char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)61,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 61;
  result = "(vp::vx::Downlink_Input_Port_ID)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)62]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)63]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)64]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)65]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)66,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  result = "(vp::vx::Downlink_Input_Port_ID)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)67]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)68]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)69]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)70]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)71,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  result = "(vp::vx::Downlink_Input_Port_ID)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)72]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)73]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)74]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)75]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)76,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  result = "(vp::vx::Downlink_Input_Port_ID)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)77]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)78]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)79]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)80]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)81,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  result = "(vp::vx::Downlink_Input_Port_ID)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)82]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)83]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)84]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)85]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)86,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  result = "(vp::vx::Downlink_Input_Port_ID)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)87]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)88]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)89]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)90]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)91,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  result = "(vp::vx::Downlink_Input_Port_ID)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)92]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)93]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)94]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)95]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)96,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  result = "(vp::vx::Downlink_Input_Port_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)97]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)98]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)99]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)100]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)101,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  result = "(vp::vx::Downlink_Input_Port_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)102]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)103]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)104]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)105]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)106,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  result = "(vp::vx::Downlink_Input_Port_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)107]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)108]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)109]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)110]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)111,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  result = "(vp::vx::Downlink_Input_Port_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)112]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)113]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)114]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)115]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)116,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  result = "(vp::vx::Downlink_Input_Port_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)117]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)118]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)119]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)120]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)121,128ul>((int)"(vp::vx::Downlink_Input_Port_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Input_Port_ID)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  result = "(vp::vx::Downlink_Input_Port_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Input_Port_ID)122]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Input_Port_ID)123]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Input_Port_ID)124]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Input_Port_ID)125]";
      break;
    case 5:
      result = "(vp::vx::Downlink_Input_Port_ID)126]";
      break;
    case 6:
      result = "(vp::vx::Downlink_Input_Port_ID)127]";
      break;
    default:
      if ("(vp::vx::Downlink_Input_Port_ID)121]" == 128) {
        result = "(vp::vx::Downlink_Input_Port_ID)128]";
      }
      else {
        result = "?";
      }
      break;
  }
  return result;
}

char *vp::reflect_value_name_tag<vp::vx::Uplink_Output_Port_ID,128ul>(int a1)
{
  if (a1)
  {
    v2 = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)1,128ul>(a1);
    unint64_t v4 = v3;
    v5 = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    v2 = "vp::vx::Uplink_Output_Port_ID::Hardware_DSP_Mic_Output]";
    unint64_t v4 = 54;
    v5 = "vp::vx::Uplink_Output_Port_ID::Hardware_DSP_Mic_Output]";
    uint64_t v6 = 54;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  result = "vp::vx::Uplink_Output_Port_ID::Hardware_DSP_Ref_Output]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Uplink_Output_Port_ID::Hardware_DSP_Mic_Clip_Data_Output]";
      break;
    case 2:
      result = "vp::vx::Uplink_Output_Port_ID::Echo_DSP_Mic_Output]";
      break;
    case 3:
      result = "vp::vx::Uplink_Output_Port_ID::Content_DSP_Client_Output]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)5]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)6,128ul>((int)"vp::vx::Uplink_Output_Port_ID::Hardware_DSP_Ref_Output]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  result = "(vp::vx::Uplink_Output_Port_ID)6]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)7]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)8]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)9]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)10]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)11,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)6]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  result = "(vp::vx::Uplink_Output_Port_ID)11]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)12]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)13]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)14]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)15]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)16,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)11]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  result = "(vp::vx::Uplink_Output_Port_ID)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)17]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)18]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)19]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)20]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)21,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  result = "(vp::vx::Uplink_Output_Port_ID)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)22]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)23]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)24]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)25]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)26,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  result = "(vp::vx::Uplink_Output_Port_ID)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)27]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)28]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)29]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)30]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)31,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  result = "(vp::vx::Uplink_Output_Port_ID)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)32]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)33]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)34]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)35]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)36,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  result = "(vp::vx::Uplink_Output_Port_ID)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)37]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)38]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)39]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)40]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)41,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  result = "(vp::vx::Uplink_Output_Port_ID)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)42]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)43]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)44]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)45]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)46,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  result = "(vp::vx::Uplink_Output_Port_ID)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)47]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)48]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)49]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)50]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)51,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  result = "(vp::vx::Uplink_Output_Port_ID)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)52]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)53]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)54]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)55]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)56,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  result = "(vp::vx::Uplink_Output_Port_ID)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)57]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)58]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)59]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)60]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)61,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  result = "(vp::vx::Uplink_Output_Port_ID)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)62]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)63]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)64]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)65]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)66,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  result = "(vp::vx::Uplink_Output_Port_ID)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)67]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)68]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)69]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)70]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)71,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  result = "(vp::vx::Uplink_Output_Port_ID)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)72]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)73]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)74]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)75]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)76,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  result = "(vp::vx::Uplink_Output_Port_ID)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)77]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)78]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)79]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)80]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)81,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  result = "(vp::vx::Uplink_Output_Port_ID)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)82]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)83]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)84]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)85]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)86,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  result = "(vp::vx::Uplink_Output_Port_ID)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)87]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)88]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)89]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)90]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)91,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  result = "(vp::vx::Uplink_Output_Port_ID)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)92]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)93]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)94]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)95]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)96,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  result = "(vp::vx::Uplink_Output_Port_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)97]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)98]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)99]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)100]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)101,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  result = "(vp::vx::Uplink_Output_Port_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)102]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)103]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)104]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)105]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)106,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  result = "(vp::vx::Uplink_Output_Port_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)107]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)108]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)109]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)110]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)111,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  result = "(vp::vx::Uplink_Output_Port_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)112]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)113]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)114]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)115]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)116,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  result = "(vp::vx::Uplink_Output_Port_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)117]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)118]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)119]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)120]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)121,128ul>((int)"(vp::vx::Uplink_Output_Port_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_Output_Port_ID)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  result = "(vp::vx::Uplink_Output_Port_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Uplink_Output_Port_ID)122]";
      break;
    case 2:
      result = "(vp::vx::Uplink_Output_Port_ID)123]";
      break;
    case 3:
      result = "(vp::vx::Uplink_Output_Port_ID)124]";
      break;
    case 4:
      result = "(vp::vx::Uplink_Output_Port_ID)125]";
      break;
    case 5:
      result = "(vp::vx::Uplink_Output_Port_ID)126]";
      break;
    case 6:
      result = "(vp::vx::Uplink_Output_Port_ID)127]";
      break;
    default:
      if ("(vp::vx::Uplink_Output_Port_ID)121]" == 128) {
        result = "(vp::vx::Uplink_Output_Port_ID)128]";
      }
      else {
        result = "?";
      }
      break;
  }
  return result;
}

char *vp::reflect_value_name_tag<vp::vx::Downlink_Output_Port_ID,128ul>(int a1)
{
  if (a1)
  {
    v2 = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)1,128ul>(a1);
    unint64_t v4 = v3;
    v5 = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    v2 = "vp::vx::Downlink_Output_Port_ID::Hardware_DSP_Output]";
    unint64_t v4 = 52;
    v5 = "vp::vx::Downlink_Output_Port_ID::Hardware_DSP_Output]";
    uint64_t v6 = 52;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  result = "(vp::vx::Downlink_Output_Port_ID)1]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)2]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)3]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)4]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)5]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)6,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)1]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  result = "(vp::vx::Downlink_Output_Port_ID)6]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)7]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)8]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)9]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)10]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)11,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)6]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  result = "(vp::vx::Downlink_Output_Port_ID)11]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)12]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)13]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)14]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)15]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)16,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)11]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  result = "(vp::vx::Downlink_Output_Port_ID)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)17]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)18]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)19]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)20]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)21,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  result = "(vp::vx::Downlink_Output_Port_ID)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)22]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)23]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)24]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)25]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)26,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  result = "(vp::vx::Downlink_Output_Port_ID)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)27]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)28]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)29]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)30]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)31,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  result = "(vp::vx::Downlink_Output_Port_ID)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)32]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)33]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)34]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)35]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)36,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  result = "(vp::vx::Downlink_Output_Port_ID)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)37]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)38]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)39]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)40]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)41,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  result = "(vp::vx::Downlink_Output_Port_ID)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)42]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)43]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)44]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)45]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)46,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  result = "(vp::vx::Downlink_Output_Port_ID)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)47]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)48]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)49]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)50]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)51,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  result = "(vp::vx::Downlink_Output_Port_ID)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)52]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)53]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)54]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)55]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)56,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  result = "(vp::vx::Downlink_Output_Port_ID)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)57]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)58]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)59]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)60]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)61,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  result = "(vp::vx::Downlink_Output_Port_ID)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)62]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)63]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)64]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)65]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)66,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  result = "(vp::vx::Downlink_Output_Port_ID)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)67]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)68]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)69]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)70]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)71,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  result = "(vp::vx::Downlink_Output_Port_ID)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)72]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)73]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)74]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)75]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)76,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  result = "(vp::vx::Downlink_Output_Port_ID)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)77]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)78]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)79]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)80]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)81,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  result = "(vp::vx::Downlink_Output_Port_ID)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)82]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)83]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)84]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)85]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)86,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  result = "(vp::vx::Downlink_Output_Port_ID)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)87]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)88]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)89]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)90]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)91,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  result = "(vp::vx::Downlink_Output_Port_ID)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)92]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)93]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)94]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)95]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)96,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  result = "(vp::vx::Downlink_Output_Port_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)97]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)98]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)99]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)100]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)101,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  result = "(vp::vx::Downlink_Output_Port_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)102]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)103]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)104]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)105]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)106,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  result = "(vp::vx::Downlink_Output_Port_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)107]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)108]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)109]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)110]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)111,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  result = "(vp::vx::Downlink_Output_Port_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)112]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)113]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)114]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)115]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)116,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  result = "(vp::vx::Downlink_Output_Port_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)117]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)118]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)119]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)120]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)121,128ul>((int)"(vp::vx::Downlink_Output_Port_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_Output_Port_ID)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  result = "(vp::vx::Downlink_Output_Port_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Downlink_Output_Port_ID)122]";
      break;
    case 2:
      result = "(vp::vx::Downlink_Output_Port_ID)123]";
      break;
    case 3:
      result = "(vp::vx::Downlink_Output_Port_ID)124]";
      break;
    case 4:
      result = "(vp::vx::Downlink_Output_Port_ID)125]";
      break;
    case 5:
      result = "(vp::vx::Downlink_Output_Port_ID)126]";
      break;
    case 6:
      result = "(vp::vx::Downlink_Output_Port_ID)127]";
      break;
    default:
      if ("(vp::vx::Downlink_Output_Port_ID)121]" == 128) {
        result = "(vp::vx::Downlink_Output_Port_ID)128]";
      }
      else {
        result = "?";
      }
      break;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<BOOL vp::vx::detail::get_value<BOOL>(std::variant<BOOL,vp::vx::data_flow::State<BOOL>> const&)::{lambda(BOOL const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,BOOL,vp::vx::data_flow::State<BOOL>> const&>(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<BOOL vp::vx::detail::get_value<BOOL>(std::variant<BOOL,vp::vx::data_flow::State<BOOL>> const&)::{lambda(BOOL const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,BOOL,vp::vx::data_flow::State<BOOL>> const&>(uint64_t a1, std::pmr *a2)
{
  return vp::vx::detail::get_value_impl<BOOL>(a2);
}

uint64_t vp::vx::detail::get_value_impl<BOOL>(std::pmr *a1)
{
  uint64_t default_resource = std::pmr::get_default_resource(a1);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)a1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1C5FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D0B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D0B8;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(void *a1)
{
  result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149D0B8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149D0B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        v12 = "enabled";
        if (!v10) {
          v12 = "disabled";
        }
        caulk::make_string((caulk *)"%s port is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D100;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D100;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(void *a1)
{
  result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149D100;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149D100;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::IO_Port_Factory::set_is_enabled(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        v12 = "enabled";
        if (!v10) {
          v12 = "disabled";
        }
        caulk::make_string((caulk *)"%s port is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,vp::vx::data_flow::State<BOOL>>>::__assign_alt[abi:ne180100]<1ul,vp::vx::data_flow::State<BOOL>,vp::vx::data_flow::State<BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    vp::vx::data_flow::State<void>::operator=(a2, a3);
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,vp::vx::data_flow::State<BOOL>>>::__emplace[abi:ne180100]<1ul,vp::vx::data_flow::State<BOOL>>(a1, a3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,vp::vx::data_flow::State<BOOL>>>::__emplace[abi:ne180100]<1ul,vp::vx::data_flow::State<BOOL>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F149D068[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  vp::vx::data_flow::State<void>::State(a1, a2);
  *(_DWORD *)(a1 + 24) = 1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,vp::vx::data_flow::State<BOOL>>>::__emplace[abi:ne180100]<0ul,BOOL &>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F149D068[v4])(&v6, a1);
  }
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1C6798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149D148;
  return std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<unsigned int>::register_listener(std::function<void ()(unsigned int,unsigned int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,unsigned int const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D190;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D190;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(void *a1)
{
  result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149D190;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149D190;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s port I/O block size is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D1D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D1D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(void *a1)
{
  result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149D1D8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149D1D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Port_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s port I/O block size is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1C7084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149D220;
  return std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<CA::StreamDescription>::register_listener(std::function<void ()(unsigned int,CA::StreamDescription const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,CA::StreamDescription const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,CA::StreamDescription const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D268;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D268;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(void *a1)
{
  result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149D268;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149D268;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(void *a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = vp::vx::detail::convert_to_c_str(a1[3]);
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v11);
        if (v14 >= 0) {
          v12 = __p;
        }
        else {
          v12 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"%s port I/O format is %s", (uint64_t)&v16, v10, v12);
        if (SHIBYTE(v14) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v16;
        uint64_t v14 = v17;
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v15)
        {
          if (SHIBYTE(v14) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D2B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149D2B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(void *a1)
{
  result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149D2B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149D2B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Port_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(void *a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = vp::vx::detail::convert_to_c_str(a1[3]);
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v11);
        if (v14 >= 0) {
          v12 = __p;
        }
        else {
          v12 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"%s port I/O format is %s", (uint64_t)&v16, v10, v12);
        if (SHIBYTE(v14) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v16;
        uint64_t v14 = v17;
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v15)
        {
          if (SHIBYTE(v14) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t vp::vx::io::Object::Log_Context::get_description@<X0>(vp::vx::io::Object::Log_Context *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  vp::vx::io::Object::Log_Context::get_description((uint64_t)this, &v7);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a2);
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v7 = v4;
  v8[0] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C185D210](&v10);
}

void sub_1BB1C79E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *vp::vx::io::Object::Log_Context::get_description(uint64_t a1, void *a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  v9[0] = &unk_1F149D2F8;
  v9[1] = &v8;
  v9[2] = a2;
  v9[3] = v9;
  vp::vx::io::Object::Log_Context::for_each_parent(a1, (uint64_t)v9);
  result = std::__function::__value_func<void ()(vp::vx::io::Object::Log_Context const&)>::~__value_func[abi:ne180100](v9);
  int v5 = *(char *)(a1 + 23);
  if (v5 < 0)
  {
    if (!*(void *)(a1 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    return result;
  }
  if (v8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)":", 1);
    LOBYTE(v5) = *(unsigned char *)(a1 + 23);
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v6, v7);
}

void vp::vx::io::Object::Log_Context::for_each_parent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    vp::vx::io::Object::Log_Context::for_each_parent(v4, a2);
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v4);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BB1C7BA0(void *a1)
{
}

__n128 vp::vx::io::Object::Log_Context::set_user_info(uint64_t a1, __n128 *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  __n128 result = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void vp::vx::io::Object::Log_Context::set_parent(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t vp::vx::io::Object::get_log_context@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void vp::vx::io::Object::set_log_context(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void vp::vx::io::get_log_context_info(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"[", 1);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
  if (v8)
  {
    vp::vx::io::Object::Log_Context::get_description(v8, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)":", 1);
  }
  int16x8_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17, &v13);
  *(_OWORD *)a4 = v13;
  a4[2] = v14;
  v15[0] = *MEMORY[0x1E4FBA408];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v16 = v12;
  v17[0] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C185D210](&v19);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BB1C7EF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  a13 = *MEMORY[0x1E4FBA408];
  uint64_t v34 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a13 + *(void *)(a13 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a15 = v34;
  a16 = MEMORY[0x1E4FBA470] + 16;
  if (a29 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C185D210](&a32);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1C7ED4);
}

void std::__function::__func<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0,std::allocator<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0>,void ()(vp::vx::io::Object::Log_Context const&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0,std::allocator<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0>,void ()(vp::vx::io::Object::Log_Context const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F149D2F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0,std::allocator<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0>,void ()(vp::vx::io::Object::Log_Context const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F149D2F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0,std::allocator<vp::vx::io::Object::Log_Context::get_description(std::ostream &)::$_0>,void ()(vp::vx::io::Object::Log_Context const&)>::operator()(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (unsigned char *)result[1];
    if (*v5) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)result[2], (uint64_t)":", 1);
    }
    else {
      unsigned char *v5 = 1;
    }
    uint64_t v6 = (void *)v4[2];
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  }
  return result;
}

void *std::__function::__value_func<void ()(vp::vx::io::Object::Log_Context const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void vp::sim::converters::CSV_Converter<float>::to_property_list(std::string *a1@<X1>, CFStringRef *a2@<X8>)
{
  vp::utility::dump_csv_string<float>(a1, &__p);
  char v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    *a2 = v6;
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 0;
    if (v3 < 0) {
LABEL_10:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB1C82BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *vp::utility::dump_csv_string<float>@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v2 = (int *)result->__r_.__value_.__r.__words[0];
  CFIndex size = (_DWORD *)result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__l.__data_ != (std::string::pointer)size)
  {
    uint64_t v4 = (std::string::__raw *)result;
    uint64_t v5 = a2;
    do
    {
      int v12 = *v2;
      memset(&__p, 0, sizeof(__p));
      if (!boost::conversion::detail::try_lexical_convert<std::string,float>((float *)&v12, &__p))
      {
        std::bad_cast::bad_cast(&v13);
        v13.__vftable = (std::bad_cast_vtbl *)&unk_1F149D4E8;
        boost::throw_exception<boost::bad_lexical_cast>();
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(v5, (const std::string::value_type *)p_p, v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __n128 result = std::string::append(v5, ", ", 2uLL);
      ++v2;
    }
    while (v2 != size);
    if (v4->__words[0] != v4->__words[1])
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
        uint64_t v8 = v5->__r_.__value_.__l.__size_ - 1;
        v5->__r_.__value_.__l.__size_ = v8;
      }
      else
      {
        uint64_t v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&v5->__r_.__value_.__s + 23) = v8 & 0x7F;
        uint64_t v9 = v5;
      }
      v9->__r_.__value_.__s.__data_[v8] = 0;
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v10 = v5->__r_.__value_.__l.__size_ - 1;
        v5->__r_.__value_.__l.__size_ = v10;
        uint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v10 = HIBYTE(v5->__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&v5->__r_.__value_.__s + 23) = v10 & 0x7F;
      }
      v5->__r_.__value_.__s.__data_[v10] = 0;
    }
  }
  return result;
}

void sub_1BB1C8454(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::exception a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void vp::sim::converters::CSV_Converter<unsigned int>::to_property_list(std::string *a1@<X1>, CFStringRef *a2@<X8>)
{
  vp::utility::dump_csv_string<unsigned int>(a1, &__p);
  char v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    *a2 = v6;
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 0;
    if (v3 < 0) {
LABEL_10:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB1C8554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *vp::utility::dump_csv_string<unsigned int>@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  char v3 = (int *)result->__r_.__value_.__r.__words[0];
  CFIndex size = (_DWORD *)result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__l.__data_ != (std::string::pointer)size)
  {
    uint64_t v5 = (std::string::__raw *)result;
    do
    {
      int v6 = *v3;
      memset(&__p, 0, sizeof(__p));
      uint64_t v19 = v17;
      v20 = v18;
      int v13 = v6;
      uint64_t v14 = v18;
      char v15 = 48;
      int v16 = 48;
      uint64_t v19 = (std::string::value_type *)boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned int,char>::convert((uint64_t)&v13);
      v20 = v18;
      std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&__p, v19, v18, v18 - v19);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(v2, (const std::string::value_type *)p_p, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __n128 result = std::string::append(v2, ", ", 2uLL);
      ++v3;
    }
    while (v3 != size);
    if (v5->__words[0] != v5->__words[1])
    {
      if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v10 = (std::string *)v2->__r_.__value_.__r.__words[0];
        uint64_t v9 = v2->__r_.__value_.__l.__size_ - 1;
        v2->__r_.__value_.__l.__size_ = v9;
      }
      else
      {
        uint64_t v9 = HIBYTE(v2->__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&v2->__r_.__value_.__s + 23) = v9 & 0x7F;
        uint64_t v10 = v2;
      }
      v10->__r_.__value_.__s.__data_[v9] = 0;
      if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v11 = v2->__r_.__value_.__l.__size_ - 1;
        v2->__r_.__value_.__l.__size_ = v11;
        uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v11 = HIBYTE(v2->__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&v2->__r_.__value_.__s + 23) = v11 & 0x7F;
      }
      v2->__r_.__value_.__s.__data_[v11] = 0;
    }
  }
  return result;
}

void sub_1BB1C8724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void vp::sim::converters::Default_Converter<CA::ChannelLayout>::to_property_list(uint64_t a1@<X1>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)v39 = xmmword_1E62379F0;
  long long v40 = *(_OWORD *)&off_1E6237A00;
  LODWORD(valuePtr) = **(_DWORD **)a1;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  LODWORD(valuePtr) = *(_DWORD *)(*(void *)a1 + 4);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v5)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }
  if (*(unsigned int *)(*(void *)a1 + 8) > (*(void *)(a1 + 8) - *(void *)a1 - 12) / 0x14uLL) {
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  }
  LODWORD(valuePtr) = *(_DWORD *)(*(void *)a1 + 8);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v6)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
  }
  CFNumberRef v29 = v6;
  CFNumberRef v30 = v5;
  v28 = a2;
  CFNumberRef v31 = v4;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v9 = *(_DWORD **)(a1 + 8);
  if ((_DWORD *)((char *)v9 - *(void *)a1) != (_DWORD *)12)
  {
    uint64_t v10 = (_DWORD *)(*(void *)a1 + 12);
    do
    {
      *(_OWORD *)keys = xmmword_1E6237A10;
      v38 = @"Coordinates";
      LODWORD(valuePtr) = *v10;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v11)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
      }
      LODWORD(valuePtr) = v10[1];
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v12)
      {
        uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Could not construct");
      }
      LODWORD(valuePtr) = v10[2];
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      value = v13;
      if (!v13)
      {
        v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v22, "Could not construct");
      }
      LODWORD(valuePtr) = v10[3];
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      if (!v14)
      {
        v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v23, "Could not construct");
      }
      LODWORD(valuePtr) = v10[4];
      CFNumberRef v15 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFNumberRef v16 = v15;
      if (!v15)
      {
        v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Could not construct");
      }
      CFNumberRef valuePtr = v13;
      CFNumberRef v34 = v14;
      CFNumberRef v35 = v15;
      CFArrayRef v17 = CFArrayCreate(v7, (const void **)&valuePtr, 3, MEMORY[0x1E4F1D510]);
      CFRelease(v16);
      CFRelease(v14);
      CFRelease(v13);
      CFNumberRef valuePtr = v11;
      CFNumberRef v34 = v12;
      CFNumberRef v35 = v17;
      CFDictionaryRef v18 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&valuePtr, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&value, v18);
      CFArrayAppendValue(Mutable, value);
      if (value) {
        CFRelease(value);
      }
      if (v17) {
        CFRelease(v17);
      }
      CFRelease(v12);
      CFRelease(v11);
      v10 += 5;
    }
    while (v10 != v9);
  }
  CFNumberRef valuePtr = v31;
  CFNumberRef v34 = v30;
  CFNumberRef v35 = v29;
  v36 = Mutable;
  CFDictionaryRef v19 = CFDictionaryCreate(v7, (const void **)v39, (const void **)&valuePtr, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  applesauce::CF::DictionaryRef::DictionaryRef(v28, v19);
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFRelease(v29);
  CFRelease(v30);
  CFRelease(v31);
}

void sub_1BB1C8CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  CFNumberRef v15 = va_arg(va1, const void *);
  applesauce::CF::NumberRef::~NumberRef((const void **)va);
  applesauce::CF::NumberRef::~NumberRef((const void **)va1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFArray const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

applesauce::CF::StringRef *vp::sim::converters::Default_Converter<CA::StreamDescription>::to_property_list@<X0>(uint64_t a1@<X1>, const char *a2@<X2>, applesauce::CF::StringRef *a3@<X8>)
{
  vp::sim::throw_exception_if (*(_DWORD *)(a1 + 8) != 1819304813, (caulk *)"non-PCM audio formats are not supported", a2);
  vp::sim::throw_exception_if ((*(_DWORD *)(a1 + 12) & 0x1F81) != 1, (caulk *)"fixed-point audio formats are not supported", v5);
  CFNumberRef v6 = "D";
  if ((*(_DWORD *)(a1 + 12) & 0x20) == 0) {
    CFNumberRef v6 = "I";
  }
  return applesauce::CF::make_StringRef(@"F%u@%.0f/%X,%u%s", a3, *(unsigned int *)(a1 + 32), *(void *)a1, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 28), v6);
}

uint64_t vp::sim::throw_exception_if (uint64_t this, caulk *a2, const char *a3, ...)
{
  va_start(va, a3);
  if (this)
  {
    va_copy(v6, va);
    caulk::make_string(a2, (uint64_t)&v5, va);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::string v4 = v5;
    memset(&v5, 0, sizeof(v5));
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)&unk_1F1499440;
  }
  return this;
}

void sub_1BB1C8FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL vp::sim::Key_Writer::empty(const __CFDictionary **this)
{
  CFDictionaryRef v1 = *this;
  return !v1 || CFDictionaryGetCount(v1) == 0;
}

CFIndex vp::sim::Key_Writer::count(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  applesauce::CF::make_StringRef(@"%02u. %s", (applesauce::CF::StringRef *)&cf, a2, a3);
  CFIndex v4 = vp::sim::Key_Writer::count(a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

{
  CFIndex v4;
  CFTypeRef cf;

  applesauce::CF::make_StringRef(@"%02u. %s", (applesauce::CF::StringRef *)&cf, a2, a3);
  CFIndex v4 = vp::sim::Key_Writer::count(a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

CFIndex vp::sim::Key_Writer::count(CFDictionaryRef *this, const void **a2)
{
  Value = CFDictionaryGetValue(*this, *a2);
  char v3 = Value;
  if (!Value) {
    return 0;
  }
  CFRetain(Value);
  CFTypeID v4 = CFGetTypeID(v3);
  if (v4 == CFArrayGetTypeID()) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)v3);
  }
  else {
    CFIndex Count = 0;
  }
  CFRelease(v3);
  return Count;
}

void vp::sim::Key_Writer::set(CFDictionaryRef *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  applesauce::CF::make_StringRef(@"%02u. %s", (applesauce::CF::StringRef *)&cf, a2, a3);
  vp::sim::Key_Writer::set(a1, &cf, a4);
  if (cf) {
    CFRelease(cf);
  }
}

{
  CFTypeRef cf;

  applesauce::CF::make_StringRef(@"%02u. %s", (applesauce::CF::StringRef *)&cf, a2, a3);
  vp::sim::Key_Writer::set(a1, &cf, a4);
  if (cf) {
    CFRelease(cf);
  }
}

void vp::sim::Key_Writer::set(CFDictionaryRef *this, const void **a2, const void **a3)
{
  Value = (__CFArray *)CFDictionaryGetValue(*this, *a2);
  CFMutableArrayRef v7 = Value;
  if (!Value || (CFRetain(Value), CFTypeID v8 = CFGetTypeID(v7), v8 != CFArrayGetTypeID()))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D510]);
    if (v7) {
      CFRelease(v7);
    }
    CFDictionarySetValue(*this, *a2, Mutable);
    CFMutableArrayRef v7 = Mutable;
  }
  CFArrayAppendValue(v7, *a3);
  if (v7) {
    CFRelease(v7);
  }
}

const __CFArray *vp::sim::Property_List_Writer::size(const __CFArray **this)
{
  CFArrayRef result = *this;
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const void *vp::sim::Property_List_Writer::operator[]@<X0>(CFArrayRef *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  CFArrayRef result = vp::sim::Property_List_Writer::find_writable_element(a1, a2, &v5);
  *a3 = v5;
  return result;
}

const void *vp::sim::Property_List_Writer::find_writable_element@<X0>(CFArrayRef *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!*this)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2 + 1, MEMORY[0x1E4F1D510]);
    CFArrayRef v8 = *this;
    *this = Mutable;
    if (v8) {
      CFRelease(v8);
    }
  }
  while (1)
  {
    unint64_t Count = CFArrayGetCount(*this);
    uint64_t v10 = *this;
    if (Count > a2) {
      break;
    }
    CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayAppendValue(v10, v11);
    if (v11) {
      CFRelease(v11);
    }
  }
  CFArrayRef result = CFArrayGetValueAtIndex(*this, a2);
  CFNumberRef v13 = result;
  if (result) {
    CFArrayRef result = CFRetain(result);
  }
  *a3 = v13;
  return result;
}

const void *vp::sim::Property_List_Writer::operator[]@<X0>(const __CFArray **a1@<X0>, void *a2@<X8>)
{
  CFArrayRef v4 = vp::sim::Property_List_Writer::size(a1);
  if (v4) {
    unint64_t v5 = (unint64_t)v4 - 1;
  }
  else {
    unint64_t v5 = 0;
  }
  CFArrayRef result = vp::sim::Property_List_Writer::find_writable_element(a1, v5, &v7);
  *a2 = v7;
  return result;
}

uint64_t vp::sim::Property_List_Writer::write_to(CFPropertyListRef *a1)
{
  if (vp::sim::Property_List_Writer::size((const __CFArray **)a1))
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a1, kCFPropertyListXMLFormat_v1_0, 0, 0);
    CFDataGetBytePtr(Data);
    CFDataGetLength(Data);
    std::ostream::write();
    if (Data) {
      CFRelease(Data);
    }
  }
  return 1;
}

void sub_1BB1C957C(void *a1)
{
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::size_type v5 = __n;
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    uint64_t v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_1BB1C9614(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::conversion::detail::try_lexical_convert<std::string,float>(float *a1, std::string *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,21ul>::lexical_istream_limited_src((uint64_t)v6);
  BOOL v4 = boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,21ul>::shl_real<float>((uint64_t)v6, *a1);
  if (v4) {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(a2, v8, v9, v9 - v8);
  }
  std::ostream::~ostream();
  v6[0] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  return v4;
}

void sub_1BB1C9700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,21ul>::lexical_istream_limited_src(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 24;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F149D340;
  *(void *)(a1 + 104) = MEMORY[0x1E4FBA458] + 24;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA458] + 64;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)a1);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(void *)(a1 + 288) = a1 + 264;
  *(void *)(a1 + 296) = a1 + 285;
  return a1;
}

uint64_t boost::detail::basic_unlockedbuf<std::stringbuf,char>::~basic_unlockedbuf(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }

  return std::streambuf::~streambuf();
}

void boost::detail::basic_unlockedbuf<std::stringbuf,char>::~basic_unlockedbuf(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::streambuf::~streambuf();

  JUMPOUT(0x1C185D370);
}

void *boost::detail::basic_pointerbuf<char,std::stringbuf>::setbuf(void *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double boost::detail::basic_pointerbuf<char,std::stringbuf>::seekoff@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x10) != 0)
  {
    uint64_t v7 = -1;
    goto LABEL_19;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4] - v5;
  if (!a3)
  {
    uint64_t v7 = -1;
    if (a2 < 0 || v6 < a2) {
      goto LABEL_19;
    }
    uint64_t v9 = v5 + a2;
LABEL_15:
    uint64_t v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    uint64_t v7 = -1;
    uint64_t v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6) {
      goto LABEL_19;
    }
    uint64_t v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    uint64_t v9 = a1[3];
    goto LABEL_18;
  }
  uint64_t v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    uint64_t v7 = v9 - v5;
  }
LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v7;
  return result;
}

double boost::detail::basic_pointerbuf<char,std::stringbuf>::seekpos@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x10) == 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = -1;
  return result;
}

BOOL boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,21ul>::shl_real<float>(uint64_t a1, float a2)
{
  char v3 = (char *)(a1 + 264);
  if (fabsf(a2) == INFINITY)
  {
    if ((LODWORD(a2) & 0x80000000) != 0)
    {
      *(unsigned char *)(a1 + 264) = 45;
      char v3 = (char *)(a1 + 265);
    }
    v3[2] = 102;
    *(_WORD *)char v3 = 28265;
    *(void *)(a1 + 296) = v3 + 3;
    return 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 288);
    unint64_t v6 = v5 + sprintf(v3, "%.*g", 9, a2);
    *(void *)(a1 + 296) = v6;
    return v6 > *(void *)(a1 + 288);
  }
}

void std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  uint64_t v8 = this;
  if ((v12 & 0x80) != 0) {
    uint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    uint64_t v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void boost::throw_exception<boost::bad_lexical_cast>()
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept((uint64_t)exception);
}

void sub_1BB1C9C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)double result = &unk_1F149D440;
  *(void *)(result + 8) = &unk_1F149D470;
  *(void *)(result + 16) = &unk_1F149D498;
  return result;
}

uint64_t boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::bad_lexical_cast>::clone()
{
}

void sub_1BB1C9EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_lexical_cast>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BB1C9F64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));

  JUMPOUT(0x1C185D370);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));

  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 8) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x1C185D370);
}

const char *boost::bad_lexical_cast::what(boost::bad_lexical_cast *this)
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);

  JUMPOUT(0x1C185D370);
}

void boost::bad_lexical_cast::~bad_lexical_cast(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C185D370);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F149D4B8;
  *(void *)(a1 + 8) = &unk_1F149D4E8;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1F149D510;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F149D440;
  *(void *)(a1 + 8) = &unk_1F149D470;
  *(void *)(a1 + 16) = &unk_1F149D498;
  return a1;
}

void sub_1BB1CA348(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned int,char>::convert(uint64_t a1)
{
  MEMORY[0x1C185D110](&v24);
  uint64_t v2 = std::locale::classic();
  if (std::locale::operator==(&v24, v2))
  {
    unsigned int v3 = *(_DWORD *)a1;
    do
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v4 - 1;
      *(unsigned char *)(v4 - 1) = *(_DWORD *)(a1 + 20) + v3 % 0xA;
      LODWORD(v4) = *(_DWORD *)a1;
      unsigned int v3 = *(_DWORD *)a1 / 0xAu;
      *(_DWORD *)a1 = v3;
    }
    while (v4 > 9);
    uint64_t v5 = *(void *)(a1 + 8);
    goto LABEL_28;
  }
  unint64_t v6 = std::locale::use_facet(&v24, MEMORY[0x1E4FBA2A0]);
  ((void (*)(void **__return_ptr))v6->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v23 < 0)
  {
    unint64_t v7 = v22;
    if (!v22) {
      goto LABEL_24;
    }
    p_p = (char *)__p;
  }
  else
  {
    unint64_t v7 = v23;
    if (!v23) {
      goto LABEL_24;
    }
    p_p = (char *)&__p;
  }
  if (*p_p > 0)
  {
    char v9 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
    uint64_t v10 = 0;
    unint64_t v11 = __p;
    if ((v23 & 0x80u) == 0) {
      unint64_t v11 = &__p;
    }
    unint64_t v12 = (uint64_t *)(a1 + 8);
    LOBYTE(v13) = *v11;
    char v14 = *v11;
    do
    {
      if (!v14)
      {
        if (++v10 < v7)
        {
          CFNumberRef v15 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
          int v13 = *((char *)v15 + v10);
          if (v13 < 1) {
            LOBYTE(v13) = 127;
          }
        }
        CFNumberRef v16 = (unsigned char *)(*v12 - 1);
        uint64_t *v12 = (uint64_t)v16;
        *CFNumberRef v16 = v9;
        char v14 = v13;
      }
      --v14;
      uint64_t v17 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v17 - 1;
      *(unsigned char *)(v17 - 1) = *(_DWORD *)(a1 + 20) + *(_DWORD *)a1 % 0xAu;
      LODWORD(v17) = *(_DWORD *)a1;
      *(_DWORD *)a1 /= 0xAu;
    }
    while (v17 > 9);
    goto LABEL_26;
  }
LABEL_24:
  unint64_t v12 = (uint64_t *)(a1 + 8);
  unsigned int v18 = *(_DWORD *)a1;
  do
  {
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v19 - 1;
    *(unsigned char *)(v19 - 1) = *(_DWORD *)(a1 + 20) + v18 % 0xA;
    LODWORD(v19) = *(_DWORD *)a1;
    unsigned int v18 = *(_DWORD *)a1 / 0xAu;
    *(_DWORD *)a1 = v18;
  }
  while (v19 > 9);
LABEL_26:
  uint64_t v5 = *v12;
  if ((char)v23 < 0) {
    operator delete(__p);
  }
LABEL_28:
  std::locale::~locale(&v24);
  return v5;
}

void sub_1BB1CA658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::at_to<float>(const __CFArray *a1, unint64_t a2)
{
  if (!a1 || CFArrayGetCount(a1) <= a2 || (CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(ValueAtIndex);
}

void sub_1BB1CA71C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

vp::vx::database::v1::Database **vp::vx::database::v1::load@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, const std::__fs::filesystem::path *a3@<X2>, const vp::Context *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v13 = a1;
  vp::allocate_unique_noexcept<vp::vx::database::v1::Database,vp::Context const&>(&v13, a4, (uint64_t)v11);
  if (v11[0] && !vp::vx::database::v1::Database::load(v11[0], a2, a3)) {
    std::unique_ptr<vp::vx::database::v1::Database,vp::Allocator_Delete<vp::vx::database::v1::Database>>::reset[abi:ne180100](v11, 0);
  }
  long long v8 = *(_OWORD *)v11;
  long long v9 = v12;
  v11[0] = 0;
  *a5 = v8;
  a5[1] = v9;
  return std::unique_ptr<vp::vx::database::v1::Database,vp::Allocator_Delete<vp::vx::database::v1::Database>>::reset[abi:ne180100](v11, 0);
}

vp::vx::database::v1::Database **vp::allocate_unique_noexcept<vp::vx::database::v1::Database,vp::Context const&>@<X0>(uint64_t *a1@<X0>, const vp::Context *a2@<X1>, uint64_t a3@<X8>)
{
  return vp::allocate_unique<vp::vx::database::v1::Database,vp::Context const&>(a1, a2, a3);
}

void sub_1BB1CA7E0(void *a1)
{
  uint64_t v2 = (std::pmr *)__cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[1] = std::pmr::get_default_resource(v2);
  __cxa_end_catch();
}

vp::vx::database::v1::Database **std::unique_ptr<vp::vx::database::v1::Database,vp::Allocator_Delete<vp::vx::database::v1::Database>>::reset[abi:ne180100](vp::vx::database::v1::Database **result, vp::vx::database::v1::Database *a2)
{
  uint64_t v2 = *result;
  const void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    vp::vx::database::v1::Database::~Database(v2);
    return (vp::vx::database::v1::Database **)(*(uint64_t (**)(vp::vx::database::v1::Database *, vp::vx::database::v1::Database *, vp::vx::database::v1::Database *, vp::vx::database::v1::Database *))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

vp::vx::database::v1::Database **vp::allocate_unique<vp::vx::database::v1::Database,vp::Context const&>@<X0>(uint64_t *a1@<X0>, const vp::Context *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v4 = v7;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 16) = xmmword_1BB8725B0;
  uint64_t v5 = std::pmr::polymorphic_allocator<vp::vx::database::v1::Database>::new_object[abi:ne180100]<vp::vx::database::v1::Database,vp::Context const&>(&v7, a2);
  return std::unique_ptr<vp::vx::database::v1::Database,vp::Allocator_Delete<vp::vx::database::v1::Database>>::reset[abi:ne180100]((vp::vx::database::v1::Database **)a3, v5);
}

void sub_1BB1CA8C8(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::database::v1::Database,vp::Allocator_Delete<vp::vx::database::v1::Database>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

vp::vx::database::v1::Database *std::pmr::polymorphic_allocator<vp::vx::database::v1::Database>::new_object[abi:ne180100]<vp::vx::database::v1::Database,vp::Context const&>(void *a1, const vp::Context *a2)
{
  long long v8 = (vp::vx::database::v1::Database *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 472, 8);
  v6[0] = &v8;
  v6[1] = a1;
  vp::vx::database::v1::Database::Database(v8, a2);
  char v7 = 1;
  uint64_t v4 = v8;
  std::__exception_guard_exceptions<vp::vx::database::v1::Database * std::pmr::polymorphic_allocator<vp::vx::database::v1::Database>::new_object[abi:ne180100]<vp::vx::database::v1::Database,vp::Context const&>(vp::Context const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<vp::vx::database::v1::Database * std::pmr::polymorphic_allocator<vp::vx::database::v1::Database>::new_object[abi:ne180100]<vp::vx::database::v1::Database,vp::Context const&>(vp::Context const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 472, 8);
  }
  return a1;
}

uint64_t vp::decorators::CPU_Profiler::CPU_Profiler(uint64_t a1, const std::__fs::filesystem::path *a2, uint64_t *a3, uint64_t *a4)
{
  v45[19] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v37 = v7;
  vp::Decorator::Decorator((void *)a1, &v37);
  uint64_t v8 = v37;
  uint64_t v37 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)a1 = &unk_1F149D560;
  vp::decorators::CPU_Profiler::create_log(a2, 0, (uint64_t *)&__p);
  CFNumberRef v31 = vp::decorators::detail::CPU_Profile_csv_header;
  char v32 = 1;
  uint64_t v10 = *a4;
  long long v9 = (std::__shared_weak_count *)a4[1];
  uint64_t v33 = 1024;
  uint64_t v34 = v10;
  CFNumberRef v35 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::utility::CSV_Log<vp::utility::ISO_8601,unsigned long long,unsigned long long,unsigned long long>::CSV_Log(&v36, &__p, (uint64_t)&v31);
  vp::decorators::CPU_Profiler::create_log(a2, 1, (uint64_t *)buf);
  v25 = vp::decorators::detail::CPU_Profile_csv_header;
  char v26 = 1;
  uint64_t v12 = *a4;
  unint64_t v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v27 = 1024;
  uint64_t v28 = v12;
  CFNumberRef v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::utility::CSV_Log<vp::utility::ISO_8601,unsigned long long,unsigned long long,unsigned long long>::CSV_Log(&v30, buf, (uint64_t)&v25);
  *(_OWORD *)(a1 + 24) = v36;
  long long v36 = 0uLL;
  *(_OWORD *)(a1 + 40) = v30;
  long long v30 = 0uLL;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  *(void *)buf = *MEMORY[0x1E4FBA400];
  uint64_t v13 = *(void **)buf;
  char v14 = *(void **)(MEMORY[0x1E4FBA400] + 24);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = v14;
  MEMORY[0x1C185CC40](&buf[8]);
  std::ostream::~ostream();
  MEMORY[0x1C185D210](&v41);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::string __p = v13;
  *(void **)((char *)&__p + *((void *)v13 - 3)) = v14;
  MEMORY[0x1C185CC40](&v43);
  std::ostream::~ostream();
  CFNumberRef v15 = (vp *)MEMORY[0x1C185D210](v45);
  log = vp::get_log(v15);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::decorators::CPU_Profiler]", 28, &__p);
    uint64_t v18 = v44;
    uint64_t v19 = v43;
    v20 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      if ((v18 & 0x80u) == 0) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = v19;
      }
      p_p = __p;
      if ((v44 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v21) {
        unsigned __int8 v23 = " ";
      }
      else {
        unsigned __int8 v23 = "";
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = p_p;
      __int16 v39 = 2080;
      long long v40 = v23;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_INFO, "%s%screated", buf, 0x16u);
    }
    if ((char)v44 < 0) {
      operator delete(__p);
    }
  }
  return a1;
}

void sub_1BB1CAD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::ofstream::~ofstream(&STACK[0x2D0]);
  uint64_t v26 = v24[1];
  void *v24 = &unk_1F1497488;
  v24[1] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(a1);
}

void vp::decorators::CPU_Profiler::create_log(const std::__fs::filesystem::path *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t)&a1[2];
  std::__fs::filesystem::__create_directories(a1 + 2, 0);
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v12 = std::chrono::system_clock::to_time_t(&__t);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)char v14 = 0u;
  long long v15 = 0u;
  unint64_t v6 = localtime(&v12);
  size_t v7 = strftime(v14, 0x80uLL, "vp.%Y%m%d.%H%M%S.", v6);
  if (a2) {
    __darwin_ct_rune_t v8 = 100;
  }
  else {
    __darwin_ct_rune_t v8 = 117;
  }
  uint64_t v9 = __toupper(v8);
  snprintf(&v14[v7], 128 - v7, "%cL.CPU_Profile.csv", v9);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v10.__pn_, v14);
  std::__fs::filesystem::operator/[abi:ne180100](&v10, v5, &__p);
  std::ofstream::basic_ofstream(a3);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1BB1CAF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void vp::decorators::CPU_Profiler::~CPU_Profiler(std::__shared_weak_count **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::decorators::CPU_Profiler]", 28, __p);
    unint64_t v4 = v14;
    uint64_t v5 = __p[1];
    unint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      __darwin_ct_rune_t v8 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        __darwin_ct_rune_t v8 = __p;
      }
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      long long v16 = v8;
      __int16 v17 = 2080;
      long long v18 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__fs::filesystem::path v10 = this[6];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v11 = this[4];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  time_t v12 = this[1];
  *this = (std::__shared_weak_count *)&unk_1F1497488;
  this[1] = 0;
  if (v12) {
    ((void (*)(std::__shared_weak_count *))v12->~__shared_weak_count_0)(v12);
  }
}

{
  uint64_t vars8;

  vp::decorators::CPU_Profiler::~CPU_Profiler(this);

  JUMPOUT(0x1C185D370);
}

uint64_t vp::decorators::CPU_Profiler::InitializeHWInput(vp::decorators::CPU_Profiler *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, uint64_t a4, uint64_t a5, uint64_t a6, const unsigned int *a7, const AudioStreamBasicDescription *a8, const AudioChannelLayout *a9, uint64_t a10, unsigned int a11, unsigned int *a12)
{
  uint64_t result = vp::Decorator::InitializeHWInput(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, HIDWORD(a10), a11, a12);
  *((_DWORD *)this + 4) = a10;
  return result;
}

uint64_t vp::decorators::CPU_Profiler::InitializeDownlinkProcessing(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = vp::Decorator::InitializeDownlinkProcessing(a1);
  *(_DWORD *)(a1 + 20) = a3;
  return result;
}

uint64_t vp::decorators::CPU_Profiler::Process(vp::decorators::CPU_Profiler *this, const AudioBufferList *a2, const AudioTimeStamp *a3, AudioBufferList *a4, AudioTimeStamp *a5, unsigned int *a6, void *a7, unsigned int *a8, AudioStreamPacketDescription *a9)
{
  long long v20 = a8;
  long long v21 = a7;
  unsigned int v19 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  int64x2_t v17 = 0uLL;
  v16[0] = &v19;
  v16[1] = this;
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = &v21;
  v16[8] = &v20;
  v16[9] = &a9;
  vp::utility::CPU_Profiler::measure(&v17, (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::decorators::CPU_Profiler::Process(AudioBufferList const&,AudioTimeStamp const&,AudioBufferList&,AudioTimeStamp&,unsigned int &,void *,unsigned int *,AudioStreamPacketDescription *)::$_0>, (uint64_t)v16);
  uint64_t result = v19;
  if (!v19)
  {
    vp::decorators::CPU_Profiler::write_log((uint64_t)this, 0, &rep, (vp::utility::CPU_Profiler *)&v17);
    return v19;
  }
  return result;
}

void vp::decorators::CPU_Profiler::write_log(uint64_t a1, int a2, uint64_t *a3, vp::utility::CPU_Profiler *this)
{
  if (a2) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = 24;
  }
  uint64_t v8 = 20;
  if (!a2) {
    uint64_t v8 = 16;
  }
  uint64_t v11 = *(unsigned int *)(a1 + v8);
  uint64_t cycle_count = vp::utility::CPU_Profiler::get_cycle_count(this);
  uint64_t instruction_count = vp::utility::CPU_Profiler::get_instruction_count(this);
  vp::utility::CSV_Log<vp::utility::ISO_8601,unsigned long long,unsigned long long,unsigned long long>::Buffer::write(*(void *)(a1 + v7), a3, &v11, &cycle_count, &instruction_count);
}

uint64_t vp::decorators::CPU_Profiler::ProcessDownlinkAudio(vp::decorators::CPU_Profiler *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, const AudioTimeStamp *a7)
{
  int64x2_t v17 = a3;
  long long v18 = a2;
  long long v15 = a5;
  long long v16 = a4;
  unsigned int v13 = 0;
  int v14 = a6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  int64x2_t v11 = 0uLL;
  v10[0] = &v13;
  v10[1] = this;
  v10[2] = &v18;
  v10[3] = &v17;
  v10[4] = &v16;
  v10[5] = &v15;
  v10[6] = &v14;
  v10[7] = a7;
  vp::utility::CPU_Profiler::measure(&v11, (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::decorators::CPU_Profiler::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>, (uint64_t)v10);
  uint64_t result = v13;
  if (!v13)
  {
    vp::decorators::CPU_Profiler::write_log((uint64_t)this, 1, &rep, (vp::utility::CPU_Profiler *)&v11);
    return v13;
  }
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::decorators::CPU_Profiler::Process(AudioBufferList const&,AudioTimeStamp const&,AudioBufferList&,AudioTimeStamp&,unsigned int &,void *,unsigned int *,AudioStreamPacketDescription *)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = vp::Decorator::Process(*(vp::Decorator **)(*a1 + 8), *(const AudioBufferList **)(v1 + 16), *(const AudioTimeStamp **)(v1 + 24), *(AudioBufferList **)(v1 + 32), *(AudioTimeStamp **)(v1 + 40), *(unsigned int **)(v1 + 48), **(void ***)(v1 + 56), **(unsigned int ***)(v1 + 64), **(AudioStreamPacketDescription ***)(v1 + 72));
  **(_DWORD **)uint64_t v1 = result;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::decorators::CPU_Profiler::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = vp::Decorator::ProcessDownlinkAudio(*(vp::Decorator **)(*a1 + 8), **(AudioBufferList ***)(v1 + 16), **(AudioBufferList ***)(v1 + 24), **(AudioBufferList ***)(v1 + 32), **(AudioBufferList ***)(v1 + 40), **(unsigned int **)(v1 + 48), *(const AudioTimeStamp **)(v1 + 56));
  **(_DWORD **)uint64_t v1 = result;
  return result;
}

void vp::vx::io::Input_Port::copy_input_data(vp::vx::io::Input_Port *this@<X0>, AudioBufferList *a2@<X1>, const AudioBufferList *a3@<X2>, AudioTimeStamp *a4@<X3>, uint64_t a5@<X8>)
{
  vp::vx::io::validate_nonnull((vp::vx::io *)a2, a3, a4, v10);
  if (v11)
  {
    (*(void (**)(vp::vx::io::Input_Port *, AudioBufferList *, const AudioBufferList *, AudioTimeStamp *))(*(void *)this + 96))(this, a2, a3, a4);
  }
  else
  {
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v10, a5);
    if (!v11) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v10);
    }
  }
}

void vp::vx::io::Input_Port::get_format(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    vp::vx::io::Error::Error((uint64_t)&v11, 4, 20, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Port.cpp");
    int v17 = v11;
    __int16 v18 = v12;
    __int16 v19 = v13;
    long long v22 = v16;
    long long v21 = v15;
    long long v15 = 0uLL;
    *(void *)&long long v16 = 0;
    int v4 = v11;
    __int16 v5 = v12;
    __int16 v6 = v13;
    uint64_t v7 = v14;
    long long v9 = v22;
    long long v8 = v21;
    *(void *)&long long v22 = 0;
    uint64_t v20 = v14;
    long long v21 = 0uLL;
    char v10 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v17);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v11);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(&v4, a3);
    if (!v10) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v4);
    }
  }
  else
  {
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 48))((void *)a3);
    *(unsigned char *)(a3 + 48) = 1;
  }
}

void vp::vx::io::Input_Port::process(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    vp::vx::io::Error::Error((uint64_t)&v16, 4, 20, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Port.cpp");
    int v22 = v16;
    __int16 v23 = v17;
    __int16 v24 = v18;
    long long v27 = v21;
    long long v26 = v20;
    long long v20 = 0uLL;
    *(void *)&long long v21 = 0;
    int v9 = v16;
    __int16 v10 = v17;
    __int16 v11 = v18;
    uint64_t v12 = v19;
    long long v14 = v27;
    long long v13 = v26;
    *(void *)&long long v27 = 0;
    uint64_t v25 = v19;
    long long v26 = 0uLL;
    char v15 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v22);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v16);
  }
  else
  {
    vp::vx::io::validate_nonnull(a4, &v9);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 112))(a1, a3, *(void *)a4, *(void *)(a4 + 8), *(unsigned int *)(a4 + 16));
      return;
    }
  }
  _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(&v9, a5);
  if (!v15) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v9);
  }
}

void vp::vx::io::Input_Port::get_time(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    vp::vx::io::Error::Error((uint64_t)&v11, 4, 20, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Port.cpp");
    int v17 = v11;
    __int16 v18 = v12;
    __int16 v19 = v13;
    long long v22 = v16;
    long long v21 = v15;
    long long v15 = 0uLL;
    *(void *)&long long v16 = 0;
    int v4 = v11;
    __int16 v5 = v12;
    __int16 v6 = v13;
    uint64_t v7 = v14;
    long long v9 = v22;
    long long v8 = v21;
    *(void *)&long long v22 = 0;
    uint64_t v20 = v14;
    long long v21 = 0uLL;
    char v10 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v17);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v11);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEI14AudioTimeStampEEv(&v4, a3);
    if (!v10) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v4);
    }
  }
  else
  {
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 56))((void *)a3);
    *(unsigned char *)(a3 + 64) = 1;
  }
}

__n128 _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEI14AudioTimeStampEEv@<Q0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v9 = *a1;
  int v2 = v9;
  __int16 v10 = *((_WORD *)a1 + 2);
  __int16 v3 = v10;
  __int16 v11 = *((_WORD *)a1 + 3);
  __int16 v4 = v11;
  uint64_t v5 = *((void *)a1 + 1);
  long long v6 = *((_OWORD *)a1 + 1);
  long long v7 = *((_OWORD *)a1 + 2);
  uint64_t v15 = *((void *)a1 + 5);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  *(_DWORD *)a2 = v2;
  *(_WORD *)(a2 + 4) = v3;
  *(_WORD *)(a2 + 6) = v4;
  *(void *)(a2 + 8) = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  uint64_t v14 = 0;
  uint64_t v12 = v5;
  long long v13 = 0uLL;
  *(unsigned char *)(a2 + 64) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v9);
  return result;
}

uint64_t vp::vx::io::Input_Port::get_direction(vp::vx::io::Input_Port *this)
{
  return 0;
}

uint64_t vp::vx::io::Input_Port::as_output_port(vp::vx::io::Input_Port *this)
{
  return 0;
}

uint64_t vp::vx::io::Input_Port::get_terminal(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 0;
  }
  return result;
}

void vp::vx::io::Output_Port::copy_output_data(vp::vx::io::Output_Port *this@<X0>, AudioBufferList *a2@<X1>, const AudioBufferList *a3@<X2>, AudioTimeStamp *a4@<X3>, uint64_t a5@<X8>)
{
  vp::vx::io::validate_nonnull((vp::vx::io *)a2, a3, a4, v10);
  if (v11)
  {
    (*(void (**)(vp::vx::io::Output_Port *, AudioBufferList *, const AudioBufferList *, AudioTimeStamp *))(*(void *)this + 96))(this, a2, a3, a4);
  }
  else
  {
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v10, a5);
    if (!v11) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v10);
    }
  }
}

void vp::vx::io::Output_Port::get_format(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 48))((void *)a3);
    *(unsigned char *)(a3 + 48) = 1;
  }
  else
  {
    vp::vx::io::Error::Error((uint64_t)&v11, 4, 20, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Port.cpp");
    int v17 = v11;
    __int16 v18 = v12;
    __int16 v19 = v13;
    long long v22 = v16;
    long long v21 = v15;
    long long v15 = 0uLL;
    *(void *)&long long v16 = 0;
    int v4 = v11;
    __int16 v5 = v12;
    __int16 v6 = v13;
    uint64_t v7 = v14;
    long long v9 = v22;
    long long v8 = v21;
    *(void *)&long long v22 = 0;
    uint64_t v20 = v14;
    long long v21 = 0uLL;
    char v10 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v17);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v11);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(&v4, a3);
    if (!v10) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v4);
    }
  }
}

void vp::vx::io::Output_Port::get_time(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 56))((void *)a3);
    *(unsigned char *)(a3 + 64) = 1;
  }
  else
  {
    vp::vx::io::Error::Error((uint64_t)&v11, 4, 20, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Port.cpp");
    int v17 = v11;
    __int16 v18 = v12;
    __int16 v19 = v13;
    long long v22 = v16;
    long long v21 = v15;
    long long v15 = 0uLL;
    *(void *)&long long v16 = 0;
    int v4 = v11;
    __int16 v5 = v12;
    __int16 v6 = v13;
    uint64_t v7 = v14;
    long long v9 = v22;
    long long v8 = v21;
    *(void *)&long long v22 = 0;
    uint64_t v20 = v14;
    long long v21 = 0uLL;
    char v10 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v17);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v11);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEI14AudioTimeStampEEv(&v4, a3);
    if (!v10) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v4);
    }
  }
}

void vp::vx::io::Output_Port::process(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 == 1)
  {
    vp::vx::io::validate_nonnull(a4, &v9);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 112))(a1, a3, *(void *)a4, *(void *)(a4 + 8), *(unsigned int *)(a4 + 16));
      return;
    }
  }
  else
  {
    vp::vx::io::Error::Error((uint64_t)&v16, 4, 20, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Port.cpp");
    int v22 = v16;
    __int16 v23 = v17;
    __int16 v24 = v18;
    long long v27 = v21;
    long long v26 = v20;
    long long v20 = 0uLL;
    *(void *)&long long v21 = 0;
    int v9 = v16;
    __int16 v10 = v17;
    __int16 v11 = v18;
    uint64_t v12 = v19;
    long long v14 = v27;
    long long v13 = v26;
    *(void *)&long long v27 = 0;
    uint64_t v25 = v19;
    long long v26 = 0uLL;
    char v15 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v22);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v16);
  }
  _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(&v9, a5);
  if (!v15) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v9);
  }
}

uint64_t vp::vx::io::Output_Port::get_direction(vp::vx::io::Output_Port *this)
{
  return 1;
}

uint64_t vp::vx::io::Output_Port::as_input_port(vp::vx::io::Output_Port *this)
{
  return 0;
}

uint64_t vp::vx::io::Output_Port::get_terminal(uint64_t a1, int a2)
{
  if (a2 != 1) {
    return 0;
  }
  return result;
}

uint64_t vp::vx::components::CPU_Profiler::CPU_Profiler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F149D648;
  *(void *)(a1 + 8) = a3;
  int v4 = (std::pmr *)vp::Context::Context(a1 + 16, a2);
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t default_resource = (vp *)std::pmr::get_default_resource(v4);
  *(void *)(a1 + 280) = default_resource;
  log = vp::get_log(default_resource);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::CPU_Profiler]", 32, __p);
    unint64_t v8 = v16;
    int v9 = __p[1];
    __int16 v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = v8;
      }
      else {
        unint64_t v11 = (unint64_t)v9;
      }
      uint64_t v12 = (void **)__p[0];
      if ((v16 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      if (v11) {
        long long v13 = " ";
      }
      else {
        long long v13 = "";
      }
      *(_DWORD *)buf = 136315394;
      __int16 v18 = v12;
      __int16 v19 = 2080;
      long long v20 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void vp::vx::components::CPU_Profiler::~CPU_Profiler(std::__shared_weak_count **this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::CPU_Profiler]", 32, __p);
    unint64_t v4 = v15;
    __int16 v5 = __p[1];
    __int16 v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      unint64_t v8 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        unint64_t v8 = __p;
      }
      if (v7) {
        int v9 = " ";
      }
      else {
        int v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      __int16 v17 = v8;
      __int16 v18 = 2080;
      __int16 v19 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
  std::unique_ptr<vp::vx::io::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::io::Node_Decorator_Factory>>::reset[abi:ne180100]((void (****)(void))this + 34, 0);
  __int16 v10 = this[33];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v11 = this[31];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = this[29];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  long long v13 = this[27];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  vp::Context::~Context((vp::Context *)(this + 2));
}

{
  uint64_t vars8;

  vp::vx::components::CPU_Profiler::~CPU_Profiler(this);

  JUMPOUT(0x1C185D370);
}

uint64_t vp::vx::components::CPU_Profiler::as_io_node_decorator_factory(uint64_t a1)
{
  return *(void *)(a1 + 272);
}

void vp::vx::components::CPU_Profiler::set_messenger(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  *(_OWORD *)(a1 + 208) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void vp::vx::components::CPU_Profiler::set_state_manager(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 232);
  *(_OWORD *)(a1 + 224) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::CPU_Profiler::set_state_observer(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 248);
  *(_OWORD *)(a1 + 240) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::CPU_Profiler::set_state_owner(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 264);
  *(_OWORD *)(a1 + 256) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::CPU_Profiler::configure(vp::vx::components::CPU_Profiler *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::CPU_Profiler]", 32, &__p);
    uint64_t v4 = BYTE7(v29);
    uint64_t v5 = v28;
    __int16 v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v4 & 0x80u) == 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = v5;
      }
      p_p = __p;
      if ((SBYTE7(v29) & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v7) {
        int v9 = " ";
      }
      else {
        int v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v33 = p_p;
      __int16 v34 = 2080;
      CFNumberRef v35 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s%sconfigure", buf, 0x16u);
    }
    if (SBYTE7(v29) < 0) {
      operator delete(__p);
    }
  }
  __int16 v10 = (std::__shared_weak_count *)*((void *)this + 29);
  if (!v10
    || (unint64_t v11 = std::__shared_weak_count::lock(v10), (v12 = v11) == 0)
    || (uint64_t v13 = *((void *)this + 28), atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
                                      !v13))
  {
    uint64_t v24 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  uint64_t v30 = 0;
  CFNumberRef v31 = 0;
  long long v14 = (std::__shared_weak_count *)*((void *)this + 31);
  if (!v14
    || (unsigned __int8 v15 = std::__shared_weak_count::lock(v14), (v31 = v15) == 0)
    || (uint64_t v30 = *((void *)this + 30),
        uint64_t v16 = v30,
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed),
        !v16))
  {
    uint64_t v23 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  __int16 v17 = (std::__shared_weak_count *)*((void *)this + 33);
  if (!v17
    || (__int16 v18 = std::__shared_weak_count::lock(v17), (v19 = v18) == 0)
    || (uint64_t v20 = *((void *)this + 32), atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed),
                                      !v20))
  {
    uint64_t v25 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)5>(v20, (uint64_t)buf);
  vp::allocate_unique_noexcept<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>((uint64_t *)this + 1, &v30, (uint64_t *)this + 26, (uint64_t)&__p);
  uint64_t v21 = __p;
  vp::vx::data_flow::State<void>::State((uint64_t)v26, (uint64_t)buf);
  vp::vx::components::CPU_Profiler::Node_Decorator_Factory::set_should_enable_cpu_profilers((uint64_t)v21, (uint64_t)v26);
  vp::vx::data_flow::State<void>::~State((uint64_t)v26);
  vp::vx::components::CPU_Profiler::Node_Decorator_Factory::set_temporary_directory_path((std::string *)__p, (const std::__fs::filesystem::path *)((char *)this + 64));
  int v22 = (void (***)(void))__p;
  std::__fs::filesystem::path __p = 0;
  std::unique_ptr<vp::vx::io::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::io::Node_Decorator_Factory>>::reset[abi:ne180100]((void (****)(void))this + 34, v22);
  *((void *)this + 35) = v28;
  *((_OWORD *)this + 18) = v29;
  std::unique_ptr<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>>::reset[abi:ne180100]((void (****)(void))&__p, 0);
  vp::vx::data_flow::State<void>::~State((uint64_t)buf);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
}

void sub_1BB1CC390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v8 = va_arg(va1, void (***)(void));
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  long long v14 = va_arg(va1, std::__shared_weak_count *);
  std::unique_ptr<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>>::reset[abi:ne180100]((void (****)(void))va, 0);
  vp::vx::data_flow::State<void>::~State((uint64_t)va1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)5>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void (****vp::allocate_unique_noexcept<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>))(void)
{
  return vp::allocate_unique<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>(a1, a2, a3, a4);
}

void sub_1BB1CC4A4(void *a1)
{
  int v2 = (std::pmr *)__cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[1] = std::pmr::get_default_resource(v2);
  __cxa_end_catch();
}

void (****std::unique_ptr<vp::vx::io::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::io::Node_Decorator_Factory>>::reset[abi:ne180100](void (****result)(void), void (***a2)(void)))(void)
{
  int v2 = *result;
  const void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    (**v2)(v2);
    return (void (****)(void))((uint64_t (*)(void (***)(void), void (***)(void), void (***)(void), void (***)(void)))(*v3[1])[3])(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

void (****vp::allocate_unique<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>))(void)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872530;
  __int16 v6 = (void (***)(void))std::pmr::polymorphic_allocator<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>>::reset[abi:ne180100]((void (****)(void))a4, v6);
}

void sub_1BB1CC5AC(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void (****std::unique_ptr<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>>::reset[abi:ne180100](void (****result)(void), void (***a2)(void)))(void)
{
  int v2 = *result;
  const void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    (**v2)(v2);
    return (void (****)(void))((uint64_t (*)(void (***)(void), void (***)(void), void (***)(void), void (***)(void)))(*v3[1])[3])(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 96, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>::construct[abi:ne180100]<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>((uint64_t)a1, v10, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::components::CPU_Profiler::Node_Decorator_Factory * std::pmr::polymorphic_allocator<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>(std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB1CC6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pmr::polymorphic_allocator<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>::construct[abi:ne180100]<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  char v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::components::CPU_Profiler::Node_Decorator_Factory::Node_Decorator_Factory(a2, &v8, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::components::CPU_Profiler::Node_Decorator_Factory * std::pmr::polymorphic_allocator<vp::vx::components::CPU_Profiler::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::CPU_Profiler::Node_Decorator_Factory,std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &>(std::shared_ptr<vp::vx::Voice_Processor_State_Observer> &,std::shared_ptr<caulk::concurrent::messenger> &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 96, 8);
  }
  return a1;
}

uint64_t vp::vx::io::Graph::Graph(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 8) = v6 + 24;
  *(void *)(a1 + 16) = v6;
  *(void *)a1 = &unk_1F149D798;
  *(_DWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v6);
  *(void *)(a1 + 88) = default_resource;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = (std::pmr *)std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 120) = v8;
  char v9 = (std::pmr *)std::pmr::get_default_resource(v8);
  *(void *)(a1 + 128) = v9;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v10 = (std::pmr *)std::pmr::get_default_resource(v9);
  *(void *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v11 = (std::pmr *)std::pmr::get_default_resource(v10);
  *(void *)(a1 + 216) = v11;
  *(void *)(a1 + 224) = std::pmr::get_default_resource(v11);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  vp::rpb::Connection::Connection((void *)(a1 + 256));
  vp::Audio_File::Audio_File((void *)(a1 + 272));
  vp::Audio_File::Audio_File((void *)(a1 + 280));
  vp::vx::io::Object::get_log_context(a1, &__p);
  uint64_t v12 = __p;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v26 = *(std::string *)a3;
  }
  vp::vx::io::Object::Log_Context::set_user_info((uint64_t)v12, (__n128 *)&v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (vp *)v24;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  log = vp::get_log(v13);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    vp::vx::io::get_log_context_info(a1, (uint64_t)"vp::vx::io::Graph]", 17, &__p);
    unsigned __int8 v15 = (std::__shared_weak_count *)v25;
    uint64_t v16 = v24;
    __int16 v18 = vp::get_log(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)v15 >= 0) {
        __int16 v19 = v15;
      }
      else {
        __int16 v19 = v16;
      }
      p_p = __p;
      if ((v25 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v19) {
        uint64_t v21 = " ";
      }
      else {
        uint64_t v21 = "";
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v28 = p_p;
      __int16 v29 = 2080;
      uint64_t v30 = v21;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }
    if ((char)v25 < 0) {
      operator delete(__p);
    }
  }
  return a1;
}

void sub_1BB1CCA74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::io::Graph::~Graph(std::__shared_weak_count **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *this = (std::__shared_weak_count *)&unk_1F149D798;
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    vp::vx::io::get_log_context_info((uint64_t)this, (uint64_t)"vp::vx::io::Graph]", 17, __p);
    unint64_t v3 = v14;
    uint64_t v4 = __p[1];
    uint64_t v6 = vp::get_log(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v3 & 0x80u) == 0) {
        unint64_t v7 = v3;
      }
      else {
        unint64_t v7 = (unint64_t)v4;
      }
      uint64_t v8 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      if (v7) {
        char v9 = " ";
      }
      else {
        char v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v16 = v8;
      __int16 v17 = 2080;
      __int16 v18 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::objc::ID::~ID((vp::objc::ID *)(this + 35));
  vp::objc::ID::~ID((vp::objc::ID *)(this + 34));
  vp::rpb::Connection::~Connection((vp::rpb::Connection *)(this + 32));
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::~vector(this + 28);
  __p[0] = this + 24;
  std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::~vector(this + 20);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::~vector(this + 16);
  __p[0] = this + 12;
  std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  __p[0] = this + 8;
  std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  uint64_t v10 = this[7];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = this[5];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *this = (std::__shared_weak_count *)&unk_1F1493718;
  uint64_t v12 = this[2];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

{
  uint64_t vars8;

  vp::vx::io::Graph::~Graph(this);

  JUMPOUT(0x1C185D370);
}

void vp::vx::io::Graph::get_block_size(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v4) >> 4) <= a2)
  {
    vp::vx::io::Error::Error((uint64_t)&v5, 6, 40, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)&v5, a3);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v5);
  }
  else
  {
    vp::vx::io::Node_Socket::get_node((void *)(v4 + 304 * a2), &v5);
    *(_DWORD *)a3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    *(unsigned char *)(a3 + 48) = 1;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void vp::vx::io::Graph::get_buffered_frame_count(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v5) >> 4) <= a2)
  {
    vp::vx::io::Error::Error((uint64_t)v6, 6, 49, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v6, a4);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
  }
  else
  {
    vp::vx::io::Node_Socket::get_terminal_buffered_frame_count((uint64_t *)(v5 + 304 * a2), a3, a4);
  }
}

void vp::vx::io::Graph::get_buffered_frame_count(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v5) >> 4) <= a2)
  {
    vp::vx::io::Error::Error((uint64_t)&v13, 6, 58, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    int v19 = v13;
    __int16 v8 = v14;
    __int16 v20 = v14;
    __int16 v9 = v15;
    __int16 v21 = v15;
    uint64_t v10 = v16;
    long long v12 = v17;
    long long v11 = v18;
    uint64_t v25 = *((void *)&v18 + 1);
    long long v17 = 0uLL;
    *(void *)&long long v18 = 0;
    *(_DWORD *)a4 = v13;
    *(_WORD *)(a4 + 4) = v8;
    *(_WORD *)(a4 + 6) = v9;
    *(void *)(a4 + 8) = v10;
    *(_OWORD *)(a4 + 16) = v12;
    *(_OWORD *)(a4 + 32) = v11;
    uint64_t v24 = 0;
    uint64_t v22 = v10;
    long long v23 = 0uLL;
    *(unsigned char *)(a4 + 48) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v19);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v13);
  }
  else
  {
    uint64_t v6 = v5 + 304 * a2;
    unint64_t v7 = HIDWORD(a2);
    vp::vx::io::Node_Socket::get_terminal_buffered_frame_count(v6, v7, a3, a4);
  }
}

void vp::vx::io::Graph::get_buffered_frame_count(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (a2 >= (unint64_t)((*(void *)(a1 + 104) - v4) >> 4))
  {
    vp::vx::io::Error::Error((uint64_t)v9, 6, 74, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)v9, a3);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v9);
  }
  else
  {
    uint64_t v6 = 16 * a2;
    (*(void (**)(double *__return_ptr))(**(void **)(v4 + v6) + 56))(v9);
    double v7 = v9[0];
    int v8 = v10;
    (*(void (**)(double *__return_ptr))(**(void **)(*(void *)(a1 + 96) + v6) + 56))(v9);
    *(_DWORD *)a3 = ((v8 & v10) << 31 >> 31) & vabdd_f64(v9[0], v7);
    *(unsigned char *)(a3 + 48) = 1;
  }
}

void vp::vx::io::Graph::get_format(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (a2 >= (unint64_t)((*(void *)(a1 + 104) - v4) >> 4))
  {
    vp::vx::io::Error::Error((uint64_t)v5, 7, 84, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v5, a3);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v5);
  }
  else
  {
    (*(void (**)(void))(**(void **)(v4 + 16 * a2) + 48))(*(void *)(v4 + 16 * a2));
    *(unsigned char *)(a3 + 48) = 1;
  }
}

void vp::vx::io::Graph::get_required_input_frame_count(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v5) >> 4) > a2)
  {
    vp::vx::io::Node_Socket::get_node((void *)(v5 + 304 * a2), &v25);
    switch((*(unsigned int (**)(uint64_t))(*(void *)v25 + 40))(v25))
    {
      case 0u:
        unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
        if (v7 && a3 % v7) {
          LODWORD(a3) = v7 + a3 - a3 % v7;
        }
        goto LABEL_6;
      case 1u:
LABEL_6:
        int v8 = 0;
        *(_DWORD *)a4 = a3;
        goto LABEL_7;
      case 2u:
        if (a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 64))(v25, a3);
LABEL_12:
          int v8 = 0;
        }
        else
        {
          int v8 = 0;
          *(_DWORD *)a4 = 0;
LABEL_7:
          *(unsigned char *)(a4 + 48) = 1;
        }
LABEL_13:
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        if (v8) {
          break;
        }
        return;
      case 3u:
        vp::vx::io::Error::Error((uint64_t)&v19, 13, 109, 28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
        int v27 = v19;
        __int16 v9 = v20;
        __int16 v28 = v20;
        __int16 v10 = v21;
        __int16 v29 = v21;
        uint64_t v11 = v22;
        long long v13 = v23;
        long long v12 = v24;
        uint64_t v33 = *((void *)&v24 + 1);
        long long v23 = 0uLL;
        *(void *)&long long v24 = 0;
        *(_DWORD *)a4 = v19;
        *(_WORD *)(a4 + 4) = v9;
        *(_WORD *)(a4 + 6) = v10;
        *(void *)(a4 + 8) = v11;
        *(_OWORD *)(a4 + 16) = v13;
        *(_OWORD *)(a4 + 32) = v12;
        uint64_t v32 = 0;
        uint64_t v30 = v11;
        long long v31 = 0uLL;
        *(unsigned char *)(a4 + 48) = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v27);
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v19);
        goto LABEL_12;
      default:
        int v8 = 1;
        goto LABEL_13;
    }
  }
  vp::vx::io::Error::Error((uint64_t)&v19, 6, 112, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
  int v27 = v19;
  __int16 v14 = v20;
  __int16 v28 = v20;
  __int16 v15 = v21;
  __int16 v29 = v21;
  uint64_t v16 = v22;
  long long v18 = v23;
  long long v17 = v24;
  uint64_t v33 = *((void *)&v24 + 1);
  long long v23 = 0uLL;
  *(void *)&long long v24 = 0;
  *(_DWORD *)a4 = v19;
  *(_WORD *)(a4 + 4) = v14;
  *(_WORD *)(a4 + 6) = v15;
  *(void *)(a4 + 8) = v16;
  *(_OWORD *)(a4 + 16) = v18;
  *(_OWORD *)(a4 + 32) = v17;
  uint64_t v32 = 0;
  uint64_t v30 = v16;
  long long v31 = 0uLL;
  *(unsigned char *)(a4 + 48) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v27);
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v19);
}

{
  uint64_t v5;
  int v6[12];

  uint64_t v5 = *(void *)(a1 + 192);
  if (a2 >= (unint64_t)((*(void *)(a1 + 200) - v5) >> 4))
  {
    vp::vx::io::Error::Error((uint64_t)v6, 8, 121, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v6, a4);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
  }
  else
  {
    *(_DWORD *)a4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16 * a2) + 16))(*(void *)(v5 + 16 * a2), a3);
    *(unsigned char *)(a4 + 48) = 1;
  }
}

void vp::vx::io::Graph::copy_input(uint64_t a1@<X0>, unsigned int a2@<W1>, AudioBufferList *a3@<X2>, const AudioBufferList *a4@<X3>, AudioTimeStamp *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 96);
  if (a2 >= (unint64_t)((*(void *)(a1 + 104) - v7) >> 4))
  {
    vp::vx::io::Error::Error((uint64_t)&v24, 7, 149, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(&v24, a6);
    long long v12 = &v24;
LABEL_8:
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v12);
    return;
  }
  uint64_t v11 = (vp::vx::io::Input_Port *)(*(uint64_t (**)(void))(**(void **)(v7 + 16 * a2) + 64))(*(void *)(v7 + 16 * a2));
  if (!v11)
  {
    vp::vx::io::Error::Error((uint64_t)&v18, 13, 147, 20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    int v24 = v18;
    __int16 v13 = v19;
    __int16 v25 = v19;
    __int16 v14 = v20;
    __int16 v26 = v20;
    uint64_t v15 = v21;
    long long v17 = v22;
    long long v16 = v23;
    uint64_t v30 = *((void *)&v23 + 1);
    long long v22 = 0uLL;
    *(void *)&long long v23 = 0;
    *(_DWORD *)a6 = v18;
    *(_WORD *)(a6 + 4) = v13;
    *(_WORD *)(a6 + 6) = v14;
    *(void *)(a6 + 8) = v15;
    *(_OWORD *)(a6 + 16) = v17;
    *(_OWORD *)(a6 + 32) = v16;
    uint64_t v29 = 0;
    uint64_t v27 = v15;
    long long v28 = 0uLL;
    *(unsigned char *)(a6 + 48) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
    long long v12 = &v18;
    goto LABEL_8;
  }

  vp::vx::io::Input_Port::copy_input_data(v11, a3, a4, a5, a6);
}

void vp::vx::io::Graph::get_expected_output_frame_count(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v5) >> 4) > a2)
  {
    vp::vx::io::Node_Socket::get_node((void *)(v5 + 304 * a2), &v26);
    switch((*(unsigned int (**)(uint64_t))(*(void *)v26 + 40))(v26))
    {
      case 0u:
        unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
        if (!v7 || (unsigned int v8 = a3 / v7 * v7, a3 == v8)) {
          unsigned int v8 = a3;
        }
        int v9 = 0;
        *(_DWORD *)a4 = v8;
        goto LABEL_14;
      case 1u:
        int v9 = 0;
        *(_DWORD *)a4 = a3;
        goto LABEL_14;
      case 2u:
        vp::vx::io::Error::Error((uint64_t)&v20, 13, 163, 28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
        int v28 = v20;
        __int16 v10 = v21;
        __int16 v29 = v21;
        __int16 v11 = v22;
        __int16 v30 = v22;
        uint64_t v12 = v23;
        long long v14 = v24;
        long long v13 = v25;
        uint64_t v34 = *((void *)&v25 + 1);
        long long v24 = 0uLL;
        *(void *)&long long v25 = 0;
        *(_DWORD *)a4 = v20;
        *(_WORD *)(a4 + 4) = v10;
        *(_WORD *)(a4 + 6) = v11;
        *(void *)(a4 + 8) = v12;
        *(_OWORD *)(a4 + 16) = v14;
        *(_OWORD *)(a4 + 32) = v13;
        uint64_t v33 = 0;
        uint64_t v31 = v12;
        long long v32 = 0uLL;
        *(unsigned char *)(a4 + 48) = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v28);
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v20);
        goto LABEL_12;
      case 3u:
        if (a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 72))(v26, a3);
LABEL_12:
          int v9 = 0;
        }
        else
        {
          int v9 = 0;
          *(_DWORD *)a4 = 0;
LABEL_14:
          *(unsigned char *)(a4 + 48) = 1;
        }
LABEL_15:
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v9) {
          break;
        }
        return;
      default:
        int v9 = 1;
        goto LABEL_15;
    }
  }
  vp::vx::io::Error::Error((uint64_t)&v20, 6, 168, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
  int v28 = v20;
  __int16 v15 = v21;
  __int16 v29 = v21;
  __int16 v16 = v22;
  __int16 v30 = v22;
  uint64_t v17 = v23;
  long long v19 = v24;
  long long v18 = v25;
  uint64_t v34 = *((void *)&v25 + 1);
  long long v24 = 0uLL;
  *(void *)&long long v25 = 0;
  *(_DWORD *)a4 = v20;
  *(_WORD *)(a4 + 4) = v15;
  *(_WORD *)(a4 + 6) = v16;
  *(void *)(a4 + 8) = v17;
  *(_OWORD *)(a4 + 16) = v19;
  *(_OWORD *)(a4 + 32) = v18;
  uint64_t v33 = 0;
  uint64_t v31 = v17;
  long long v32 = 0uLL;
  *(unsigned char *)(a4 + 48) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v28);
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v20);
}

void vp::vx::io::Graph::copy_output(uint64_t a1@<X0>, unsigned int a2@<W1>, AudioBufferList *a3@<X2>, const AudioBufferList *a4@<X3>, AudioTimeStamp *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 96);
  if (a2 >= (unint64_t)((*(void *)(a1 + 104) - v7) >> 4))
  {
    vp::vx::io::Error::Error((uint64_t)&v24, 7, 205, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(&v24, a6);
    uint64_t v12 = &v24;
LABEL_8:
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v12);
    return;
  }
  __int16 v11 = (vp::vx::io::Output_Port *)(*(uint64_t (**)(void))(**(void **)(v7 + 16 * a2) + 72))(*(void *)(v7 + 16 * a2));
  if (!v11)
  {
    vp::vx::io::Error::Error((uint64_t)&v18, 13, 203, 20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    int v24 = v18;
    __int16 v13 = v19;
    __int16 v25 = v19;
    __int16 v14 = v20;
    __int16 v26 = v20;
    uint64_t v15 = v21;
    long long v17 = v22;
    long long v16 = v23;
    uint64_t v30 = *((void *)&v23 + 1);
    long long v22 = 0uLL;
    *(void *)&long long v23 = 0;
    *(_DWORD *)a6 = v18;
    *(_WORD *)(a6 + 4) = v13;
    *(_WORD *)(a6 + 6) = v14;
    *(void *)(a6 + 8) = v15;
    *(_OWORD *)(a6 + 16) = v17;
    *(_OWORD *)(a6 + 32) = v16;
    uint64_t v29 = 0;
    uint64_t v27 = v15;
    long long v28 = 0uLL;
    *(unsigned char *)(a6 + 48) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
    uint64_t v12 = &v18;
    goto LABEL_8;
  }

  vp::vx::io::Output_Port::copy_output_data(v11, a3, a4, a5, a6);
}

void vp::vx::io::Graph::notify(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  if (v4 == v5)
  {
LABEL_4:
    *a3 = 0;
    a3[48] = 1;
  }
  else
  {
    while (1)
    {
      vp::vx::io::Node_Socket::notify(v4, a2, v7);
      if (!v8) {
        break;
      }
      v4 += 304;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v7, (uint64_t)a3);
    if (!v8) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v7);
    }
  }
}

void vp::vx::io::Graph::process(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v5) >> 4) <= a2)
  {
    vp::vx::io::Error::Error((uint64_t)v18, 6, 259, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v18, (uint64_t)a4);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v18);
    return;
  }
  if (a3)
  {
    char v8 = (vp::vx::io::Node_Socket *)(v5 + 304 * a2);
    int v9 = *(std::__shared_weak_count **)(a1 + 40);
    if (v9)
    {
      __int16 v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        __int16 v11 = *(vp::vx::io::Parameter_Exchange **)(a1 + 32);
        if (v11)
        {
          vp::vx::io::Node_Socket::set_parameter_values(v8, *(const vp::vx::io::Parameter_Exchange **)(a1 + 32), v18);
          if (!v19)
          {
            _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v18, (uint64_t)a4);
            if (!v19) {
              vp::vx::io::Error::~Error((vp::vx::io::Error *)v18);
            }
            int v17 = 1;
LABEL_27:
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_28:
            if (v17) {
              return;
            }
            goto LABEL_29;
          }
          int v12 = 1;
        }
        else
        {
          int v12 = 0;
        }
LABEL_11:
        __int16 v13 = *(std::__shared_weak_count **)(a1 + 56);
        if (v13)
        {
          __int16 v14 = std::__shared_weak_count::lock(v13);
          if (v14)
          {
            uint64_t v15 = *(const vp::vx::io::Property_Exchange **)(a1 + 48);
            if (v15)
            {
              vp::vx::io::Node_Socket::set_property_values((unsigned int **)v8, v15, v18);
              if (!v19)
              {
                _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v18, (uint64_t)a4);
                if (!v19) {
                  vp::vx::io::Error::~Error((vp::vx::io::Error *)v18);
                }
                int v17 = 1;
                goto LABEL_25;
              }
              int v16 = 1;
            }
            else
            {
              int v16 = 0;
            }
LABEL_19:
            vp::vx::io::Node_Socket::process(v8, a3, v18);
            if (v19
              && (!v12 || (vp::vx::io::Node_Socket::get_parameter_values(v8, v11, v18), v19))
              && (!v16 || (vp::vx::io::Node_Socket::get_property_values((unsigned int **)v8, v15, v18), v19)))
            {
              int v17 = 0;
              if (!v14) {
                goto LABEL_26;
              }
            }
            else
            {
              _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v18, (uint64_t)a4);
              if (!v19) {
                vp::vx::io::Error::~Error((vp::vx::io::Error *)v18);
              }
              int v17 = 1;
              if (!v14)
              {
LABEL_26:
                if (!v10) {
                  goto LABEL_28;
                }
                goto LABEL_27;
              }
            }
LABEL_25:
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            goto LABEL_26;
          }
          int v16 = 0;
        }
        else
        {
          int v16 = 0;
          __int16 v14 = 0;
        }
        uint64_t v15 = 0;
        goto LABEL_19;
      }
      int v12 = 0;
    }
    else
    {
      int v12 = 0;
      __int16 v10 = 0;
    }
    __int16 v11 = 0;
    goto LABEL_11;
  }
LABEL_29:
  *a4 = 0;
  a4[48] = 1;
}

void vp::vx::io::Graph::reset(vp::vx::io::Graph *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (vp::vx::io::Node_Socket *)*((void *)this + 8);
  uint64_t v5 = (vp::vx::io::Node_Socket *)*((void *)this + 9);
  while (v4 != v5)
  {
    vp::vx::io::Node_Socket::reset(v8, v4);
    if (!v9)
    {
LABEL_11:
      _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)v8, (uint64_t)a2);
      if (!v9) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v8);
      }
      return;
    }
    uint64_t v4 = (vp::vx::io::Node_Socket *)((char *)v4 + 304);
  }
  uint64_t v7 = *((void *)this + 12);
  uint64_t v6 = *((void *)this + 13);
  while (v7 != v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v7 + 88))(v8);
    if (!v9) {
      goto LABEL_11;
    }
    v7 += 16;
  }
  *a2 = 0;
  a2[48] = 1;
}

void vp::vx::io::Graph::reset(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v4) >> 4) <= a2)
  {
    vp::vx::io::Error::Error((uint64_t)v5, 6, 283, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v5, a3);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v5);
  }
  else
  {
    vp::vx::io::Node_Socket::reset((vp::vx::io::Node_Socket *)(v4 + 304 * a2));
  }
}

{
  uint64_t v4;
  void (*v5)(void);
  int v6[12];
  uint64_t vars8;

  uint64_t v4 = *(void *)(a1 + 96);
  if (a2 >= (unint64_t)((*(void *)(a1 + 104) - v4) >> 4))
  {
    vp::vx::io::Error::Error((uint64_t)v6, 7, 292, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/Graph.cpp");
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v6, a3);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
  }
  else
  {
    uint64_t v5 = *(void (**)(void))(**(void **)(v4 + 16 * a2) + 88);
    v5();
  }
}

void vp::vx::io::Graph::connect(uint64_t a1@<X0>, id *a2@<X1>, unsigned char *a3@<X8>)
{
  v204 = a2;
  v194 = a3;
  __s[1] = *(id *)MEMORY[0x1E4F143B8];
  caulk::autorelease_pool::autorelease_pool((caulk::autorelease_pool *)&v256);
  vp::rpb::Server::get_shared_instance((uint64_t)&v255);
  if (!v255)
  {
    *(void *)&long long v246 = 0;
    memset(v278, 0, sizeof(v278));
    long long v276 = 0u;
    long long v277 = 0u;
    long long v275 = 0u;
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    LODWORD(v270[0]) = 134217984;
    *(void *)((char *)v270 + 4) = 0;
    int v188 = 12;
    _os_log_send_and_compose_impl();
    uint64_t v182 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v182);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 104) == v4)
  {
    uint64_t v205 = 0;
    uint64_t v197 = 0;
    v193 = &v189;
    v207 = &v257;
    int v191 = 1;
    BOOL v192 = 1;
    int v16 = (char *)&v257;
  }
  else
  {
    unint64_t v5 = 0;
    LODWORD(v6) = 0;
    uint64_t v205 = 0;
    unsigned int v7 = 1;
    do
    {
      char v8 = (uint64_t *)(v4 + 16 * v5);
      uint64_t v9 = *v8;
      __int16 v10 = (std::__shared_weak_count *)v8[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      if (v11) {
        int v12 = v205;
      }
      else {
        int v12 = v6;
      }
      if (v11) {
        uint64_t v13 = (v12 + 1);
      }
      else {
        uint64_t v13 = v205;
      }
      uint64_t v205 = v13;
      if (v11) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = (v12 + 1);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      unint64_t v5 = v7;
      uint64_t v4 = *(void *)(a1 + 96);
      ++v7;
    }
    while (v5 < (*(void *)(a1 + 104) - v4) >> 4);
    v193 = &v189;
    uint64_t v14 = MEMORY[0x1F4188790](v11);
    int v16 = (char *)&v189 - v15;
    BOOL v192 = v6 == 0;
    if (v6) {
      bzero(v16, 8 * v6);
    }
    else {
      uint64_t v6 = 0;
    }
    MEMORY[0x1F4188790](v14);
    uint64_t v197 = v6;
    v207 = (uint64_t *)((char *)&v189 - v17);
    if (v18)
    {
      bzero((char *)&v189 - v17, 8 * v18);
      int v191 = 0;
    }
    else
    {
      uint64_t v205 = 0;
      int v191 = 1;
    }
  }
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v20 = *(void *)(a1 + 104);
  v206 = v16;
  if (v20 != v19)
  {
    unint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    unsigned int v24 = 1;
    do
    {
      __int16 v25 = (uint64_t *)(v19 + 16 * v21);
      uint64_t v27 = *v25;
      __int16 v26 = (std::__shared_weak_count *)v25[1];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v27 + 48))(&v275, v27);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v270, (const CA::StreamDescription *)&v275);
      int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27);
      if (v28) {
        unsigned int v29 = v23;
      }
      else {
        unsigned int v29 = v22;
      }
      int v16 = v206;
      uint64_t v30 = (uint64_t)v207;
      if (v28)
      {
        unsigned int v23 = v29 + 1;
      }
      else
      {
        uint64_t v30 = (uint64_t)v206;
        unsigned int v22 = v29 + 1;
      }
      vp::objc::ID::operator=((id *)(v30 + 8 * v29), (id *)v270);
      vp::objc::ID::~ID((vp::objc::ID *)v270);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      unint64_t v21 = v24;
      uint64_t v19 = *(void *)(a1 + 96);
      ++v24;
    }
    while (v21 < (*(void *)(a1 + 104) - v19) >> 4);
  }
  vp::vx::io::Object::get_log_context(a1, &v275);
  uint64_t user_info = vp::vx::io::Object::Log_Context::get_user_info((vp::vx::io::Object::Log_Context *)v275);
  char v32 = *(unsigned char *)(user_info + 23);
  if (v32 >= 0) {
    uint64_t v33 = (const UInt8 *)user_info;
  }
  else {
    uint64_t v33 = *(const UInt8 **)user_info;
  }
  if (v33)
  {
    if (v32 >= 0) {
      CFIndex v34 = *(unsigned __int8 *)(user_info + 23);
    }
    else {
      CFIndex v34 = *(void *)(user_info + 8);
    }
    CFStringRef v253 = CFStringCreateWithBytes(0, v33, v34, 0x8000100u, 0);
    int v16 = v206;
    if (!v253)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v253 = 0;
  }
  vp::rpb::Host::Host((uint64_t)&v254, (id *)&v253, (uint64_t)v16, v197, (uint64_t)v207, v205);
  if (v253) {
    CFRelease(v253);
  }
  uint64_t v36 = *((void *)&v275 + 1);
  if (*((void *)&v275 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v275 + 1));
  }
  size_t v196 = 8 * ((*(void *)(a1 + 72) - *(void *)(a1 + 64)) / 304);
  MEMORY[0x1F4188790](v36);
  uint64_t v190 = v37;
  uint64_t v195 = v38;
  v208 = (id *)((char *)&v189 - v39);
  if (v37 == v38)
  {
LABEL_114:
    if (*(void *)(a1 + 200) != *(void *)(a1 + 192))
    {
      unint64_t v79 = 0;
      unsigned int v80 = 1;
      do
      {
        LODWORD(v246) = v80 - 1;
        v81 = (unsigned int *)boost::container::flat_map<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<std::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_subscript((void *)(a1 + 224), (unsigned int *)&v246);
        vp::rpb::Wire::Wire((vp::rpb::Wire *)v270, (const vp::rpb::Item *)&v208[*v81], v81[2], (const vp::rpb::Item *)&v208[v81[3]], v81[5]);
        v82 = *(void **)(*(void *)(a1 + 192) + 16 * v79);
        vp::vx::io::Object::get_log_context((uint64_t)v82 + *(void *)(*v82 - 24), &v275);
        uint64_t v83 = vp::vx::io::Object::Log_Context::get_user_info((vp::vx::io::Object::Log_Context *)v275);
        char v84 = *(unsigned char *)(v83 + 23);
        if (v84 >= 0) {
          v85 = (const UInt8 *)v83;
        }
        else {
          v85 = *(const UInt8 **)v83;
        }
        if (v85)
        {
          if (v84 >= 0) {
            CFIndex v86 = *(unsigned __int8 *)(v83 + 23);
          }
          else {
            CFIndex v86 = *(void *)(v83 + 8);
          }
          CFStringRef v251 = CFStringCreateWithBytes(0, v85, v86, 0x8000100u, 0);
          if (!v251)
          {
            v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v185, "Could not construct");
          }
        }
        else
        {
          CFStringRef v251 = 0;
        }
        vp::rpb::Object::set_name((id *)v270, (id *)&v251);
        if (v251) {
          CFRelease(v251);
        }
        if (*((void *)&v275 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v275 + 1));
        }
        vp::rpb::Host::add_wire(&v254, (const vp::rpb::Wire *)v270);
        vp::objc::ID::~ID((vp::objc::ID *)v270);
        unint64_t v79 = v80++;
      }
      while (v79 < (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 4);
    }
    vp::rpb::Host::new_delegate((vp::objc::ID *)&v250);
    vp::rpb::Item::new_delegate((vp::objc::ID *)&v249);
    v87 = *(std::__shared_weak_count **)(a1 + 40);
    if (v87)
    {
      v88 = std::__shared_weak_count::lock(v87);
      if (v88)
      {
        v199 = v88;
        v214 = *(vp::vx::io::Property_Exchange **)(a1 + 32);
        if (v214)
        {
          v201 = (char *)&v276 + 8;
          long long v275 = 0uLL;
          *(void *)&long long v276 = 0;
          uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v88);
          v202 = (uint64_t *)&v277;
          uint64_t v200 = (uint64_t)&v278[1];
          *((void *)&v276 + 1) = default_resource;
          long long v277 = 0uLL;
          v278[0] = 0;
          uint64_t v90 = std::pmr::get_default_resource(default_resource);
          uint64_t v91 = 0;
          v278[1] = v90;
          uint64_t v274 = 0x100000000;
          uint64_t v92 = *(void *)(a1 + 64);
          uint64_t v93 = *(void *)(a1 + 72);
          do
          {
            if (v93 == v92)
            {
              uint64_t v93 = v92;
            }
            else
            {
              unint64_t v94 = 0;
              int v95 = 0;
              uint64_t v203 = v91;
              int v96 = *((_DWORD *)&v274 + v91);
              v97 = v202;
              if (!v96) {
                v97 = (uint64_t *)&v275;
              }
              v211 = v97;
              uint64_t v212 = 32 * (v96 != 0);
              if (v96) {
                uint64_t v98 = 40;
              }
              else {
                uint64_t v98 = 8;
              }
              uint64_t v99 = (uint64_t)v201;
              if (v96) {
                uint64_t v99 = v200;
              }
              v210 = (uint64_t *)v99;
              do
              {
                LODWORD(v209) = v95;
                vp::vx::io::Node_Socket::get_exchanged_parameter_IDs(v92 + 304 * v94, v96, (uint64_t)v270);
                if (!v272) {
                  goto LABEL_187;
                }
                if (*((void *)&v270[0] + 1))
                {
                  v100 = *(unsigned int **)&v270[0];
                  uint64_t v101 = *(void *)&v270[0] + 4 * *((void *)&v270[0] + 1);
                  v213 = &v208[v94];
                  do
                  {
                    unsigned int v102 = *v100;
                    if (vp::vx::io::Parameter_Exchange::has_parameter(v214, *v100))
                    {
                      v103 = *(int **)((char *)&v275 + v212);
                      v104 = *(int **)((char *)&v275 + v98);
                      if (v103 == v104) {
                        goto LABEL_152;
                      }
                      char v105 = 1;
                      do
                      {
                        int v106 = *v103;
                        v103 += 8;
                        v105 &= v106 != v102;
                      }
                      while (v103 != v104);
                      if (v105)
                      {
LABEL_152:
                        *((void *)&v246 + 1) = 0;
                        CFTypeRef v247 = 0;
                        __int16 v248 = 0;
                        LODWORD(v246) = v102;
                        int v107 = bswap32(v102);
                        *(_DWORD *)((char *)__s + 1) = v107;
                        if (((char)v107 - 32) > 0x5E
                          || (((__int16)v107 >> 8) - 32) > 0x5E
                          || ((v107 << 8 >> 24) - 32) > 0x5E
                          || ((v107 >> 24) - 32) > 0x5E)
                        {
                          std::to_string(&v273, v102);
                        }
                        else
                        {
                          *(_WORD *)((char *)__s + 5) = 39;
                          LOBYTE(__s[0]) = 39;
                          std::string::basic_string[abi:ne180100]<0>(&v273, (char *)__s);
                        }
                        if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v108 = &v273;
                        }
                        else {
                          v108 = (std::string *)v273.__r_.__value_.__r.__words[0];
                        }
                        if (v108)
                        {
                          if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            CFIndex size = HIBYTE(v273.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            CFIndex size = v273.__r_.__value_.__l.__size_;
                          }
                          CFStringRef v110 = CFStringCreateWithBytes(0, (const UInt8 *)v108, size, 0x8000100u, 0);
                          if (!v110)
                          {
                            v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v183, "Could not construct");
                          }
                        }
                        else
                        {
                          CFStringRef v110 = 0;
                        }
                        v111 = (const void *)*((void *)&v246 + 1);
                        *((void *)&v246 + 1) = v110;
                        if (v111) {
                          CFRelease(v111);
                        }
                        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v273.__r_.__value_.__l.__data_);
                        }
                        __int16 v248 = 1;
                        unint64_t v112 = *(void *)((char *)&v275 + v98);
                        v113 = (unint64_t *)&v276;
                        if (v96) {
                          v113 = v278;
                        }
                        if (v112 >= *v113)
                        {
                          uint64_t v114 = std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__push_back_slow_path<vp::rpb::Parameter_Info const&>(v211, (uint64_t)&v246);
                        }
                        else
                        {
                          std::pmr::polymorphic_allocator<vp::rpb::Parameter_Info>::construct[abi:ne180100]<vp::rpb::Parameter_Info,vp::rpb::Parameter_Info const&>((uint64_t)v210, *(void *)((char *)&v275 + v98), (uint64_t)&v246);
                          uint64_t v114 = v112 + 32;
                        }
                        *(void *)((char *)&v275 + v98) = v114;
                        if (v247) {
                          CFRelease(v247);
                        }
                        if (*((void *)&v246 + 1)) {
                          CFRelease(*((CFTypeRef *)&v246 + 1));
                        }
                      }
                    }
                    if (v96 == 1)
                    {
                      LODWORD(v246) = v102;
                      *(void *)((char *)&v246 + 4) = 2;
                      LODWORD(v273.__r_.__value_.__l.__data_) = v102;
                      *(std::string::size_type *)((char *)v273.__r_.__value_.__r.__words + 4) = 2;
                      vp::rpb::Host::add_parameter_wire(&v254, (vp::rpb::Wire *)v213, (unsigned int *)&v246, (unsigned int *)&v273);
                    }
                    else if (!v96)
                    {
                      LODWORD(v246) = v102;
                      *(void *)((char *)&v246 + 4) = 1;
                      LODWORD(v273.__r_.__value_.__l.__data_) = v102;
                      *(std::string::size_type *)((char *)v273.__r_.__value_.__r.__words + 4) = 1;
                      vp::rpb::Host::add_parameter_wire(&v254, (unsigned int *)&v246, (vp::rpb::Wire *)v213, (unsigned int *)&v273);
                    }
                    ++v100;
                  }
                  while (v100 != (unsigned int *)v101);
                  if (!v272) {
LABEL_187:
                  }
                    vp::vx::io::Error::~Error((vp::vx::io::Error *)v270);
                }
                unint64_t v94 = (v209 + 1);
                uint64_t v92 = *(void *)(a1 + 64);
                uint64_t v93 = *(void *)(a1 + 72);
                int v95 = v209 + 1;
              }
              while (0x86BCA1AF286BCA1BLL * ((v93 - v92) >> 4) > v94);
              uint64_t v91 = v203;
            }
            ++v91;
          }
          while (v91 != 2);
          vp::vx::io::Direction_Pair<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>>::Direction_Pair((uint64_t *)v270, (uint64_t *)&v275);
          vp::vx::io::Direction_Pair<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>>::Direction_Pair((uint64_t *)&v240, (uint64_t *)v270);
          v269 = 0;
          v115 = (char *)operator new(0x48uLL);
          *(void *)v115 = &unk_1F149D7B8;
          *(_OWORD *)(v115 + 8) = v240;
          uint64_t v116 = v242;
          *((void *)v115 + 3) = v241;
          *((void *)v115 + 4) = v116;
          long long v240 = 0uLL;
          *(_OWORD *)(v115 + 40) = v243;
          uint64_t v117 = v245;
          *((void *)v115 + 7) = v244;
          *((void *)v115 + 8) = v117;
          uint64_t v241 = 0;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          v269 = v115;
          vp::rpb::Host::Delegate::on_get_parameter_info(&v250, (uint64_t)v268);
          std::__function::__value_func<vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__value_func[abi:ne180100](v268);
          *(void *)&long long v246 = &v243;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&long long v246 = &v240;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          vp::vx::io::Direction_Pair<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>>::Direction_Pair((uint64_t *)&v234, (uint64_t *)v270);
          v267 = 0;
          v118 = (char *)operator new(0x48uLL);
          *(void *)v118 = &unk_1F149D7B8;
          *(_OWORD *)(v118 + 8) = v234;
          uint64_t v119 = v236;
          *((void *)v118 + 3) = v235;
          *((void *)v118 + 4) = v119;
          long long v234 = 0uLL;
          *(_OWORD *)(v118 + 40) = v237;
          uint64_t v120 = v239;
          *((void *)v118 + 7) = v238;
          *((void *)v118 + 8) = v120;
          uint64_t v235 = 0;
          long long v237 = 0uLL;
          uint64_t v238 = 0;
          v267 = v118;
          vp::rpb::Item::Delegate::on_get_parameter_info(&v249, (uint64_t)v266);
          std::__function::__value_func<vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__value_func[abi:ne180100](v266);
          *(void *)&long long v246 = &v237;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&long long v246 = &v234;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          uint64_t v122 = *(void *)(a1 + 32);
          v121 = *(std::__shared_weak_count **)(a1 + 40);
          if (v121)
          {
            atomic_fetch_add_explicit(&v121->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v121->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          v265[0] = &unk_1F149D800;
          v265[1] = v122;
          v265[2] = v121;
          v265[3] = v265;
          vp::rpb::Host::Delegate::on_get_parameter(&v250, (uint64_t)v265);
          std::__function::__value_func<vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__value_func[abi:ne180100](v265);
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          v264[0] = &unk_1F149D800;
          v264[1] = v122;
          v264[2] = v121;
          v264[3] = v264;
          vp::rpb::Item::Delegate::on_get_parameter(&v249, (uint64_t)v264);
          std::__function::__value_func<vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__value_func[abi:ne180100](v264);
          if (v121) {
            std::__shared_weak_count::__release_weak(v121);
          }
          *(void *)&long long v246 = v271;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&long long v246 = v270;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&v270[0] = v202;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)v270);
          *(void *)&v270[0] = &v275;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)v270);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v199);
      }
    }
    v123 = *(std::__shared_weak_count **)(a1 + 56);
    if (v123)
    {
      v124 = std::__shared_weak_count::lock(v123);
      if (v124)
      {
        v199 = v124;
        v214 = *(vp::vx::io::Property_Exchange **)(a1 + 48);
        if (v214)
        {
          v201 = (char *)&v276 + 8;
          long long v275 = 0uLL;
          *(void *)&long long v276 = 0;
          v125 = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v124);
          v202 = (uint64_t *)&v277;
          uint64_t v200 = (uint64_t)&v278[1];
          *((void *)&v276 + 1) = v125;
          long long v277 = 0uLL;
          v278[0] = 0;
          uint64_t v126 = std::pmr::get_default_resource(v125);
          uint64_t v127 = 0;
          v278[1] = v126;
          uint64_t v274 = 0x100000000;
          uint64_t v128 = *(void *)(a1 + 64);
          uint64_t v129 = *(void *)(a1 + 72);
          do
          {
            if (v129 == v128)
            {
              uint64_t v129 = v128;
            }
            else
            {
              unint64_t v130 = 0;
              int v131 = 0;
              uint64_t v203 = v127;
              int v132 = *((_DWORD *)&v274 + v127);
              v133 = v202;
              if (!v132) {
                v133 = (uint64_t *)&v275;
              }
              v211 = v133;
              uint64_t v212 = 32 * (v132 != 0);
              if (v132) {
                uint64_t v134 = 40;
              }
              else {
                uint64_t v134 = 8;
              }
              uint64_t v135 = (uint64_t)v201;
              if (v132) {
                uint64_t v135 = v200;
              }
              v210 = (uint64_t *)v135;
              do
              {
                LODWORD(v209) = v131;
                vp::vx::io::Node_Socket::get_exchanged_property_IDs(v128 + 304 * v130, v132, (uint64_t)v270);
                if (!v272) {
                  goto LABEL_256;
                }
                if (*((void *)&v270[0] + 1))
                {
                  v136 = *(unsigned int **)&v270[0];
                  uint64_t v137 = *(void *)&v270[0] + 4 * *((void *)&v270[0] + 1);
                  v213 = &v208[v130];
                  do
                  {
                    unsigned int v138 = *v136;
                    if (vp::vx::io::Property_Exchange::has_property(v214, *v136))
                    {
                      v139 = *(int **)((char *)&v275 + v212);
                      v140 = *(int **)((char *)&v275 + v134);
                      if (v139 == v140) {
                        goto LABEL_221;
                      }
                      char v141 = 1;
                      do
                      {
                        int v142 = *v139;
                        v139 += 8;
                        v141 &= v142 != v138;
                      }
                      while (v139 != v140);
                      if (v141)
                      {
LABEL_221:
                        *((void *)&v246 + 1) = 0;
                        CFTypeRef v247 = 0;
                        __int16 v248 = 0;
                        LODWORD(v246) = v138;
                        int v143 = bswap32(v138);
                        *(_DWORD *)((char *)__s + 1) = v143;
                        if (((char)v143 - 32) > 0x5E
                          || (((__int16)v143 >> 8) - 32) > 0x5E
                          || ((v143 << 8 >> 24) - 32) > 0x5E
                          || ((v143 >> 24) - 32) > 0x5E)
                        {
                          std::to_string(&v273, v138);
                        }
                        else
                        {
                          *(_WORD *)((char *)__s + 5) = 39;
                          LOBYTE(__s[0]) = 39;
                          std::string::basic_string[abi:ne180100]<0>(&v273, (char *)__s);
                        }
                        if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v144 = &v273;
                        }
                        else {
                          v144 = (std::string *)v273.__r_.__value_.__r.__words[0];
                        }
                        if (v144)
                        {
                          if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            CFIndex v145 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            CFIndex v145 = v273.__r_.__value_.__l.__size_;
                          }
                          CFStringRef v146 = CFStringCreateWithBytes(0, (const UInt8 *)v144, v145, 0x8000100u, 0);
                          if (!v146)
                          {
                            v184 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v184, "Could not construct");
                          }
                        }
                        else
                        {
                          CFStringRef v146 = 0;
                        }
                        v147 = (const void *)*((void *)&v246 + 1);
                        *((void *)&v246 + 1) = v146;
                        if (v147) {
                          CFRelease(v147);
                        }
                        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v273.__r_.__value_.__l.__data_);
                        }
                        __int16 v248 = 1;
                        unint64_t v148 = *(void *)((char *)&v275 + v134);
                        v149 = (unint64_t *)&v276;
                        if (v132) {
                          v149 = v278;
                        }
                        if (v148 >= *v149)
                        {
                          uint64_t v150 = std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__push_back_slow_path<vp::rpb::Property_Info const&>(v211, (uint64_t)&v246);
                        }
                        else
                        {
                          std::pmr::polymorphic_allocator<vp::rpb::Property_Info>::construct[abi:ne180100]<vp::rpb::Property_Info,vp::rpb::Property_Info const&>((uint64_t)v210, *(void *)((char *)&v275 + v134), (uint64_t)&v246);
                          uint64_t v150 = v148 + 32;
                        }
                        *(void *)((char *)&v275 + v134) = v150;
                        if (v247) {
                          CFRelease(v247);
                        }
                        if (*((void *)&v246 + 1)) {
                          CFRelease(*((CFTypeRef *)&v246 + 1));
                        }
                      }
                    }
                    if (v132 == 1)
                    {
                      LODWORD(v246) = v138;
                      *(void *)((char *)&v246 + 4) = 2;
                      LODWORD(v273.__r_.__value_.__l.__data_) = v138;
                      *(std::string::size_type *)((char *)v273.__r_.__value_.__r.__words + 4) = 2;
                      vp::rpb::Host::add_property_wire(&v254, (vp::rpb::Wire *)v213, (unsigned int *)&v246, (unsigned int *)&v273);
                    }
                    else if (!v132)
                    {
                      LODWORD(v246) = v138;
                      *(void *)((char *)&v246 + 4) = 1;
                      LODWORD(v273.__r_.__value_.__l.__data_) = v138;
                      *(std::string::size_type *)((char *)v273.__r_.__value_.__r.__words + 4) = 1;
                      vp::rpb::Host::add_property_wire(&v254, (unsigned int *)&v246, (vp::rpb::Wire *)v213, (unsigned int *)&v273);
                    }
                    ++v136;
                  }
                  while (v136 != (unsigned int *)v137);
                  if (!v272) {
LABEL_256:
                  }
                    vp::vx::io::Error::~Error((vp::vx::io::Error *)v270);
                }
                unint64_t v130 = (v209 + 1);
                uint64_t v128 = *(void *)(a1 + 64);
                uint64_t v129 = *(void *)(a1 + 72);
                int v131 = v209 + 1;
              }
              while (0x86BCA1AF286BCA1BLL * ((v129 - v128) >> 4) > v130);
              uint64_t v127 = v203;
            }
            ++v127;
          }
          while (v127 != 2);
          vp::vx::io::Direction_Pair<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>>::Direction_Pair((uint64_t *)v270, (uint64_t *)&v275);
          vp::vx::io::Direction_Pair<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>>::Direction_Pair((uint64_t *)&v228, (uint64_t *)v270);
          v263 = 0;
          v151 = (char *)operator new(0x48uLL);
          *(void *)v151 = &unk_1F149D848;
          *(_OWORD *)(v151 + 8) = v228;
          uint64_t v152 = v230;
          *((void *)v151 + 3) = v229;
          *((void *)v151 + 4) = v152;
          long long v228 = 0uLL;
          *(_OWORD *)(v151 + 40) = v231;
          uint64_t v153 = v233;
          *((void *)v151 + 7) = v232;
          *((void *)v151 + 8) = v153;
          uint64_t v229 = 0;
          long long v231 = 0uLL;
          uint64_t v232 = 0;
          v263 = v151;
          vp::rpb::Host::Delegate::on_get_property_info(&v250, (uint64_t)v262);
          std::__function::__value_func<vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__value_func[abi:ne180100](v262);
          *(void *)&long long v246 = &v231;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&long long v246 = &v228;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          vp::vx::io::Direction_Pair<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>>::Direction_Pair((uint64_t *)&v222, (uint64_t *)v270);
          v261 = 0;
          v154 = (char *)operator new(0x48uLL);
          *(void *)v154 = &unk_1F149D848;
          *(_OWORD *)(v154 + 8) = v222;
          uint64_t v155 = v224;
          *((void *)v154 + 3) = v223;
          *((void *)v154 + 4) = v155;
          long long v222 = 0uLL;
          *(_OWORD *)(v154 + 40) = v225;
          uint64_t v156 = v227;
          *((void *)v154 + 7) = v226;
          *((void *)v154 + 8) = v156;
          uint64_t v223 = 0;
          long long v225 = 0uLL;
          uint64_t v226 = 0;
          v261 = v154;
          vp::rpb::Item::Delegate::on_get_property_info(&v249, (uint64_t)v260);
          std::__function::__value_func<vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__value_func[abi:ne180100](v260);
          *(void *)&long long v246 = &v225;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&long long v246 = &v222;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          uint64_t v158 = *(void *)(a1 + 48);
          v157 = *(std::__shared_weak_count **)(a1 + 56);
          if (v157)
          {
            atomic_fetch_add_explicit(&v157->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v157->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          v259[0] = &unk_1F149D890;
          v259[1] = v158;
          v259[2] = v157;
          v259[3] = v259;
          vp::rpb::Host::Delegate::on_get_property(&v250, (uint64_t)v259);
          std::__function::__value_func<vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__value_func[abi:ne180100](v259);
          if (v157) {
            atomic_fetch_add_explicit(&v157->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          v258[0] = &unk_1F149D890;
          v258[1] = v158;
          v258[2] = v157;
          v258[3] = v258;
          vp::rpb::Item::Delegate::on_get_property(&v249, (uint64_t)v258);
          std::__function::__value_func<vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__value_func[abi:ne180100](v258);
          if (v157) {
            std::__shared_weak_count::__release_weak(v157);
          }
          *(void *)&long long v246 = v271;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&long long v246 = v270;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v246);
          *(void *)&v270[0] = v202;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)v270);
          *(void *)&v270[0] = &v275;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)v270);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v199);
      }
    }
    vp::objc::ID::ID((vp::objc::ID *)&v221, &v250);
    vp::rpb::Host::set_delegate(&v254, &v221);
    vp::objc::ID::~ID((vp::objc::ID *)&v221);
    vp::objc::ID::ID((vp::objc::ID *)&v220, &v249);
    v159 = (const vp::rpb::Item *)v204;
    vp::rpb::Item::set_delegate(v204, &v220);
    vp::objc::ID::~ID((vp::objc::ID *)&v220);
    vp::rpb::Server::add_host(&v255, (const vp::rpb::Host *)&v254, v159);
    uint64_t v160 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) != v160)
    {
      uint64_t v161 = 0;
      unsigned int v162 = 1;
      do
      {
        v163 = (uint64_t *)(v160 + 304 * v161);
        vp::objc::ID::ID((vp::objc::ID *)&v219, &v208[v161]);
        vp::vx::io::Node_Socket::connect(v163, &v219);
        if (!LOBYTE(v278[0])) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v275);
        }
        vp::objc::ID::~ID((vp::objc::ID *)&v219);
        uint64_t v161 = v162;
        uint64_t v160 = *(void *)(a1 + 64);
      }
      while (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v160) >> 4) > v162++);
    }
    uint64_t v165 = *(void *)(a1 + 192);
    if (*(void *)(a1 + 200) != v165)
    {
      unint64_t v166 = 0;
      unsigned int v167 = 1;
      do
      {
        uint64_t v168 = 16 * v166;
        vp::vx::io::Object::get_log_context(*(void *)(v165 + 16 * v166) + *(void *)(**(void **)(v165 + 16 * v166) - 24), &v275);
        uint64_t v169 = vp::vx::io::Object::Log_Context::get_user_info((vp::vx::io::Object::Log_Context *)v275);
        char v170 = *(unsigned char *)(v169 + 23);
        if (v170 >= 0) {
          v171 = (const UInt8 *)v169;
        }
        else {
          v171 = *(const UInt8 **)v169;
        }
        if (v171)
        {
          if (v170 >= 0) {
            CFIndex v172 = *(unsigned __int8 *)(v169 + 23);
          }
          else {
            CFIndex v172 = *(void *)(v169 + 8);
          }
          CFStringRef v173 = CFStringCreateWithBytes(0, v171, v172, 0x8000100u, 0);
          if (!v173)
          {
            v186 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v186, "Could not construct");
          }
        }
        else
        {
          CFStringRef v173 = 0;
        }
        if (*((void *)&v275 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v275 + 1));
        }
        vp::rpb::Item::get_sub_host(v204, (uint64_t)&v275);
        if (v173) {
          CFRetain(v173);
        }
        CFStringRef v218 = v173;
        vp::rpb::Host::find_wire_by_name((id *)&v275, (id *)&v218, v270);
        if (v218) {
          CFRelease(v218);
        }
        vp::objc::ID::~ID((vp::objc::ID *)&v275);
        if (*(void *)&v270[0])
        {
          uint64_t v174 = *(void *)(*(void *)(a1 + 192) + v168);
          vp::objc::ID::ID((vp::objc::ID *)&v217, (id *)v270);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v174 + 32))(&v275, v174, &v217);
          if (!LOBYTE(v278[0])) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v275);
          }
          vp::objc::ID::~ID((vp::objc::ID *)&v217);
        }
        vp::objc::ID::~ID((vp::objc::ID *)v270);
        if (v173) {
          CFRelease(v173);
        }
        unint64_t v166 = v167;
        uint64_t v165 = *(void *)(a1 + 192);
        ++v167;
      }
      while (v166 < (*(void *)(a1 + 200) - v165) >> 4);
    }
    vp::objc::ID::ID((vp::objc::ID *)&v216, &v255);
    vp::objc::ID::ID((vp::objc::ID *)&v215, &v254);
    vp::rpb::Connection::Connection(&v275, &v216, &v215);
    vp::objc::ID::operator=((id *)(a1 + 256), (id *)&v275);
    vp::objc::ID::operator=((id *)(a1 + 264), (id *)&v275 + 1);
    vp::rpb::Connection::~Connection((vp::rpb::Connection *)&v275);
    vp::objc::ID::~ID((vp::objc::ID *)&v215);
    vp::objc::ID::~ID((vp::objc::ID *)&v216);
    vp::objc::ID::operator=((id *)(a1 + 272), &v250);
    vp::objc::ID::operator=((id *)(a1 + 280), &v249);
    v175 = v194;
    unsigned char *v194 = 0;
    v175[48] = 1;
    vp::objc::ID::~ID((vp::objc::ID *)&v249);
    vp::objc::ID::~ID((vp::objc::ID *)&v250);
    goto LABEL_300;
  }
  bzero(v208, v196);
  uint64_t v40 = 0;
  LODWORD(v214) = 0;
  v213 = (id *)(a1 + 160);
  uint64_t v41 = v195;
  while (2)
  {
    uint64_t v198 = v40;
    vp::vx::io::Node_Socket::get_node((void *)(v41 + 304 * v40), v270);
    uint64_t v42 = (*(uint64_t (**)(void, void))(**(void **)&v270[0] + 48))(*(void *)&v270[0], 0);
    v210 = &v189;
    int v43 = MEMORY[0x1F4188790](v42);
    v46 = (char *)&v189 - v44;
    uint64_t v203 = v45;
    uint64_t v47 = 8 * v45;
    if (v43) {
      bzero((char *)&v189 - v44, 8 * v45);
    }
    uint64_t v212 = (uint64_t)v46;
    uint64_t v209 = v47;
    uint64_t v48 = (*(uint64_t (**)(void, uint64_t))(**(void **)&v270[0] + 48))(*(void *)&v270[0], 1);
    int v49 = MEMORY[0x1F4188790](v48);
    v52 = (uint64_t *)((char *)&v189 - v50);
    v201 = v51;
    uint64_t v53 = 8 * (void)v51;
    if (v49) {
      bzero((char *)&v189 - v50, 8 * (void)v51);
    }
    v211 = v52;
    v202 = (uint64_t *)v53;
    uint64_t v200 = (*(unsigned int (**)(void, void))(**(void **)&v270[0] + 48))(*(void *)&v270[0], 0);
    uint64_t v54 = 0;
    v199 = (std::__shared_weak_count *)(*(unsigned int (**)(void, uint64_t))(**(void **)&v270[0] + 48))(*(void *)&v270[0], 1);
    v273.__r_.__value_.__r.__words[0] = 0x100000000;
    while (1)
    {
      uint64_t v55 = *((unsigned int *)&v273.__r_.__value_.__l.__data_ + v54);
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)&v270[0] + 48))(*(void *)&v270[0], v55)) {
        break;
      }
LABEL_84:
      if (++v54 == 2)
      {
        vp::vx::io::Object::get_log_context(*(void *)&v270[0] + *(void *)(**(void **)&v270[0] - 24), &v275);
        uint64_t v66 = vp::vx::io::Object::Log_Context::get_user_info((vp::vx::io::Object::Log_Context *)v275);
        char v67 = *(unsigned char *)(v66 + 23);
        if (v67 >= 0) {
          v68 = (const UInt8 *)v66;
        }
        else {
          v68 = *(const UInt8 **)v66;
        }
        if (v68)
        {
          if (v67 >= 0) {
            CFIndex v69 = *(unsigned __int8 *)(v66 + 23);
          }
          else {
            CFIndex v69 = *(void *)(v66 + 8);
          }
          CFStringRef v70 = CFStringCreateWithBytes(0, v68, v69, 0x8000100u, 0);
          v72 = v211;
          uint64_t v71 = v212;
          CFStringRef v252 = v70;
          if (!v70)
          {
            v187 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v187, "Could not construct");
          }
        }
        else
        {
          CFStringRef v252 = 0;
          v72 = v211;
          uint64_t v71 = v212;
        }
        vp::rpb::Item::Item((uint64_t)&v246, (id *)&v252, v71, v200, (uint64_t)v72, (uint64_t)v199);
        if (v252) {
          CFRelease(v252);
        }
        if (*((void *)&v275 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v275 + 1));
        }
        vp::objc::ID::operator=(&v208[v198], (id *)&v246);
        vp::rpb::Host::add_item(&v254, (vp::rpb::Wire *)&v246);
        vp::objc::ID::~ID((vp::objc::ID *)&v246);
        char v73 = 1;
        goto LABEL_100;
      }
    }
    uint64_t v56 = 0;
    if (v55) {
      uint64_t v57 = (uint64_t)v207;
    }
    else {
      uint64_t v57 = (uint64_t)v206;
    }
    if (v55) {
      v58 = v211;
    }
    else {
      v58 = (uint64_t *)v212;
    }
    while (1)
    {
      *(void *)&long long v246 = __PAIR64__(v55, v214);
      DWORD2(v246) = v56;
      boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::find((uint64_t)v213, (unsigned int *)&v246, (unsigned int **)&v275);
      uint64_t v59 = *(void *)(a1 + 168);
      uint64_t v60 = *(void *)(a1 + 176);
      if (v59) {
        BOOL v61 = 1;
      }
      else {
        BOOL v61 = v60 == 0;
      }
      if (!v61) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if ((void)v275 == v59 + 16 * v60) {
        break;
      }
      uint64_t v62 = *(unsigned int *)(v275 + 12);
      if (v62)
      {
        uint64_t v63 = 0;
        unsigned int v64 = 0;
        uint64_t v65 = 16 * v62;
        do
        {
          if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 96) + v63) + 40))(*(void *)(*(void *)(a1 + 96) + v63)) == v55) {
            ++v64;
          }
          v63 += 16;
        }
        while (v65 != v63);
      }
      else
      {
        unsigned int v64 = 0;
      }
      vp::objc::ID::operator=((id *)&v58[v56], (id *)(v57 + 8 * v64));
LABEL_83:
      if (++v56 >= (unint64_t)(*(unsigned int (**)(void, uint64_t))(**(void **)&v270[0] + 48))(*(void *)&v270[0], v55))goto LABEL_84; {
    }
      }
    (*(void (**)(long long *__return_ptr))(**(void **)&v270[0] + 56))(&v275);
    if (LOBYTE(v278[0]))
    {
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)__s, (const CA::StreamDescription *)&v275);
      vp::objc::ID::operator=((id *)&v58[v56], __s);
      vp::objc::ID::~ID((vp::objc::ID *)__s);
      if (!LOBYTE(v278[0])) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v275);
      }
      goto LABEL_83;
    }
    _ZNKR2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIjEEv((uint64_t)&v275, (uint64_t)v194);
    if (!LOBYTE(v278[0])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v275);
    }
    char v73 = 0;
LABEL_100:
    v74 = v202;
    if (v201)
    {
      v75 = v211 - 1;
      do
        vp::objc::ID::~ID((vp::objc::ID *)((char *)v74-- + (void)v75));
      while (v74);
    }
    uint64_t v76 = v209;
    if (v203)
    {
      uint64_t v77 = v212 - 8;
      do
      {
        vp::objc::ID::~ID((vp::objc::ID *)(v77 + v76));
        v76 -= 8;
      }
      while (v76);
    }
    if (*((void *)&v270[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v270[0] + 1));
    }
    if (v73)
    {
      uint64_t v41 = *(void *)(a1 + 64);
      unint64_t v78 = 0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v41) >> 4);
      LODWORD(v214) = v214 + 1;
      uint64_t v40 = v214;
      if (v78 <= v214) {
        goto LABEL_114;
      }
      continue;
    }
    break;
  }
LABEL_300:
  size_t v176 = v196;
  if (v190 != v195)
  {
    v177 = v208 - 1;
    do
    {
      vp::objc::ID::~ID((vp::objc::ID *)((char *)v177 + v176));
      v176 -= 8;
    }
    while (v176);
  }
  vp::objc::ID::~ID((vp::objc::ID *)&v254);
  if ((v191 & 1) == 0)
  {
    v178 = v207 - 1;
    uint64_t v179 = v205;
    do
      vp::objc::ID::~ID((vp::objc::ID *)&v178[v179--]);
    while (v179 * 8);
  }
  if (!v192)
  {
    v180 = v206 - 8;
    uint64_t v181 = 8 * v197;
    do
    {
      vp::objc::ID::~ID((vp::objc::ID *)&v180[v181]);
      v181 -= 8;
    }
    while (v181);
  }
  vp::objc::ID::~ID((vp::objc::ID *)&v255);
  caulk::autorelease_pool::~autorelease_pool((caulk::autorelease_pool *)&v256);
}

void sub_1BB1CF9B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    uint64_t v4 = *(const void **)(v2 + 584);
    if (v4) {
      CFRelease(v4);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::io::Graph::disconnect(uint64_t a1@<X0>, id *a2@<X1>, unsigned char *a3@<X8>)
{
  caulk::autorelease_pool::autorelease_pool((caulk::autorelease_pool *)v37);
  uint64_t v6 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      vp::vx::io::Node_Socket::get_node((void *)(v6 + 304 * v7), &v35);
      vp::vx::io::Object::get_log_context((uint64_t)v35 + *(void *)(*v35 - 24), &v31);
      uint64_t user_info = vp::vx::io::Object::Log_Context::get_user_info(v31);
      char v10 = *(unsigned char *)(user_info + 23);
      if (v10 >= 0) {
        uint64_t v11 = (const UInt8 *)user_info;
      }
      else {
        uint64_t v11 = *(const UInt8 **)user_info;
      }
      if (v11)
      {
        if (v10 >= 0) {
          CFIndex v12 = *(unsigned __int8 *)(user_info + 23);
        }
        else {
          CFIndex v12 = *(void *)(user_info + 8);
        }
        CFStringRef v13 = CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
        if (!v13)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
      }
      else
      {
        CFStringRef v13 = 0;
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      vp::rpb::Item::get_sub_host(a2, (uint64_t)&v31);
      if (v13) {
        CFRetain(v13);
      }
      CFTypeRef cf = v13;
      vp::rpb::Host::find_item_by_name((id *)&v31, &cf, (uint64_t)&v35);
      if (cf) {
        CFRelease(cf);
      }
      vp::objc::ID::~ID((vp::objc::ID *)&v31);
      if (v35)
      {
        uint64_t v14 = (uint64_t *)(*(void *)(a1 + 64) + 304 * v7);
        vp::objc::ID::ID((vp::objc::ID *)&v30, (id *)&v35);
        vp::vx::io::Node_Socket::disconnect(v14, &v30);
        if (!v33) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
        }
        vp::objc::ID::~ID((vp::objc::ID *)&v30);
      }
      vp::objc::ID::~ID((vp::objc::ID *)&v35);
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v7 = v8;
      uint64_t v6 = *(void *)(a1 + 64);
    }
    while (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 72) - v6) >> 4) > v8++);
  }
  uint64_t v16 = *(void *)(a1 + 192);
  if (*(void *)(a1 + 200) != v16)
  {
    unint64_t v17 = 0;
    unsigned int v18 = 1;
    do
    {
      uint64_t v19 = 16 * v17;
      vp::vx::io::Object::get_log_context(*(void *)(v16 + 16 * v17) + *(void *)(**(void **)(v16 + 16 * v17) - 24), &v31);
      uint64_t v20 = vp::vx::io::Object::Log_Context::get_user_info(v31);
      char v21 = *(unsigned char *)(v20 + 23);
      if (v21 >= 0) {
        unsigned int v22 = (const UInt8 *)v20;
      }
      else {
        unsigned int v22 = *(const UInt8 **)v20;
      }
      if (v22)
      {
        if (v21 >= 0) {
          CFIndex v23 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          CFIndex v23 = *(void *)(v20 + 8);
        }
        CFStringRef v24 = CFStringCreateWithBytes(0, v22, v23, 0x8000100u, 0);
        if (!v24)
        {
          uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v27, "Could not construct");
        }
      }
      else
      {
        CFStringRef v24 = 0;
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      vp::rpb::Item::get_sub_host(a2, (uint64_t)&v31);
      if (v24) {
        CFRetain(v24);
      }
      CFTypeRef v29 = v24;
      vp::rpb::Host::find_wire_by_name((id *)&v31, (id *)&v29, &v35);
      if (v29) {
        CFRelease(v29);
      }
      vp::objc::ID::~ID((vp::objc::ID *)&v31);
      if (v35)
      {
        uint64_t v25 = *(void *)(*(void *)(a1 + 192) + v19);
        vp::objc::ID::ID((vp::objc::ID *)&v28, (id *)&v35);
        (*(void (**)(vp::vx::io::Object::Log_Context **__return_ptr, uint64_t, uint64_t *))(*(void *)v25 + 40))(&v31, v25, &v28);
        if (!v33) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
        }
        vp::objc::ID::~ID((vp::objc::ID *)&v28);
      }
      vp::objc::ID::~ID((vp::objc::ID *)&v35);
      if (v24) {
        CFRelease(v24);
      }
      unint64_t v17 = v18;
      uint64_t v16 = *(void *)(a1 + 192);
      ++v18;
    }
    while (v17 < (*(void *)(a1 + 200) - v16) >> 4);
  }
  vp::rpb::Connection::operator=((id *)(a1 + 256));
  *a3 = 0;
  a3[48] = 1;
  caulk::autorelease_pool::~autorelease_pool((caulk::autorelease_pool *)v37);
}

void sub_1BB1CFEC0(void *a1)
{
}

uint64_t vp::vx::io::Graph_Builder::Graph_Builder(uint64_t a1, int a2, long long *a3, uint64_t a4)
{
  *(_DWORD *)a1 = a2;
  long long v5 = *a3;
  *(void *)(a1 + 24) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 8) = v5;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)a1);
  *(void *)(a1 + 80) = default_resource;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v7 = (std::pmr *)std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  unsigned int v8 = (std::pmr *)std::pmr::get_default_resource(v7);
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v9 = (std::pmr *)std::pmr::get_default_resource(v8);
  *(void *)(a1 + 200) = v9;
  *(_DWORD *)(a1 + 208) = 0;
  char v10 = (std::pmr *)std::pmr::get_default_resource(v9);
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v11 = (std::pmr *)std::pmr::get_default_resource(v10);
  *(void *)(a1 + 248) = v11;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  CFIndex v12 = (std::pmr *)std::pmr::get_default_resource(v11);
  *(void *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  CFStringRef v13 = (std::pmr *)std::pmr::get_default_resource(v12);
  *(void *)(a1 + 336) = v13;
  *(_DWORD *)(a1 + 344) = 0;
  uint64_t v14 = (std::pmr *)std::pmr::get_default_resource(v13);
  *(void *)(a1 + 352) = v14;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v15 = (std::pmr *)std::pmr::get_default_resource(v14);
  *(void *)(a1 + 384) = v15;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 440) = std::pmr::get_default_resource(v15);
  return a1;
}

void vp::vx::io::Graph_Builder::set_parameter_exchange(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::io::Graph_Builder::set_property_exchange(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t vp::vx::io::Graph_Builder::add_node(uint64_t a1, long long *a2)
{
  if (!*(void *)a2)
  {
    uint64_t v6 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  uint64_t v2 = (_DWORD *)(a1 + 72);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::emplace_unique<unsigned int &,std::shared_ptr<vp::vx::io::Node_Factory>>((void *)(a1 + 80), (unsigned int *)(a1 + 72), a2, (uint64_t)&v7);
  uint64_t v3 = *v2;
  _DWORD *v2 = v3 + 1;
  uint64_t v4 = v3 | 0x100000000;
  if ((v4 & 0x100000000) != 0) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1BB1D00CC(void *a1)
{
}

_OWORD *vp::vx::io::Graph_Builder::add_node_decorator(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v3 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v3);
  }
  return std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>((uint64_t *)(a1 + 112), (uint64_t)a2);
}

void sub_1BB1D0118(void *a1)
{
}

_OWORD *vp::vx::io::Graph_Builder::add_node_delegate(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v3 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v3);
  }
  return std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>((uint64_t *)(a1 + 144), (uint64_t)a2);
}

void sub_1BB1D0160(void *a1)
{
}

_OWORD *vp::vx::io::Graph_Builder::add_node_command(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v3 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v3);
  }
  return std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Node_Command_Factory>>((uint64_t *)(a1 + 176), (uint64_t)a2);
}

void sub_1BB1D01A8(void *a1)
{
}

uint64_t vp::vx::io::Graph_Builder::add_port(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a4)
  {
    uint64_t v13 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v13);
  }
  unsigned int v8 = (unsigned int *)(a1 + 208);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)(a1 + 208);
  *(void *)&v15[4] = a2;
  int v16 = a3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::insert_equal((void *)(a1 + 216), (unsigned int *)v15, v14);
  *(void *)uint64_t v15 = a2;
  int v9 = *(_DWORD *)(a1 + 208);
  *(_DWORD *)&v15[8] = a3;
  int v16 = v9;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::insert_unique((void *)(a1 + 248), (unsigned int *)v15, (uint64_t)v14);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::emplace_unique<unsigned int &,std::shared_ptr<vp::vx::io::Port_Factory>>((void *)(a1 + 280), v8, a4, (uint64_t)v15);
  uint64_t v10 = *v8;
  *unsigned int v8 = v10 + 1;
  uint64_t v11 = v10 | 0x100000000;
  if ((v11 & 0x100000000) != 0) {
    return v11;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1BB1D02B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB1D0264);
  }
  _Unwind_Resume(a1);
}

_OWORD *vp::vx::io::Graph_Builder::add_port_decorator(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v3 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v3);
  }
  return std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>((uint64_t *)(a1 + 312), (uint64_t)a2);
}

void sub_1BB1D0308(void *a1)
{
}

uint64_t vp::vx::io::Graph_Builder::add_wire(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, long long *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a6)
  {
    uint64_t v11 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v11);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 344);
  uint64_t v14 = a2;
  int v15 = a3;
  uint64_t v16 = a4;
  int v17 = a5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique((void *)(a1 + 352), &v13, (uint64_t)v12);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::emplace_unique<unsigned int &,std::shared_ptr<vp::vx::io::Wire_Factory>>((void *)(a1 + 384), (unsigned int *)(a1 + 344), a6, (uint64_t)&v13);
  uint64_t v8 = *(unsigned int *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = v8 + 1;
  uint64_t v9 = v8 | 0x100000000;
  if ((v9 & 0x100000000) != 0) {
    return v9;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1BB1D03EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB1D03A4);
  }
  _Unwind_Resume(a1);
}

_OWORD *vp::vx::io::Graph_Builder::add_wire_decorator(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v3 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v3);
  }
  return std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>((uint64_t *)(a1 + 416), (uint64_t)a2);
}

void sub_1BB1D0444(void *a1)
{
}

void vp::vx::io::Graph_Builder::build(char *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::io::Graph_Builder]", 25, v14);
    uint64_t v4 = v16;
    uint64_t v5 = v15;
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = v5;
      }
      if ((v16 & 0x80u) == 0) {
        uint64_t v8 = v14;
      }
      else {
        uint64_t v8 = *(uint8_t **)v14;
      }
      uint64_t v9 = " ";
      if (!v7) {
        uint64_t v9 = "";
      }
      uint64_t v10 = a1 + 8;
      if (a1[31] < 0) {
        uint64_t v10 = (void *)*v10;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v9;
      __int16 v12 = 2080;
      unsigned int v13 = v10;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%sbuilding new \"%s\" graph", buf, 0x20u);
    }
    if ((char)v16 < 0) {
      operator delete(*(void **)v14);
    }
  }
  operator new();
}

void sub_1BB1D34E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 304 * a2;
    while (v3 != v7)
      vp::vx::io::Node_Socket::~Node_Socket((vp::vx::io::Node_Socket *)(v3 - 304));
    a1[1] = v7;
  }
}

__n128 __Block_byref_object_copy__0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *___ZN2vp2vx2io13Graph_Builder5buildEN10applesauce8dispatch2v15queueE_block_invoke(uint64_t a1, uint64_t a2)
{
  void (**v5)(void *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  void v9[2];
  long long v10;
  unsigned int v11;

  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v11 = a2;
  BOOL v5 = **(void (****)(void *__return_ptr))boost::container::flat_map<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<std::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_subscript((void *)(v4 + 80), &v11);
  (*v5)(v9);
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 32 * a2;
  uint64_t v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100]((void *)v6, v7);
  *(void *)(v6 + 8) = v9[1];
  *(_OWORD *)(v6 + 16) = v10;
  return std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](v9, 0);
}

void std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::__append((uint64_t)a1, v5);
  }
}

void std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::__append((uint64_t)a1, v5);
  }
}

uint64_t vp::vx::io::Wire::get_terminal(uint64_t result, int a2)
{
  if (a2 == 1) {
    return (**(uint64_t (***)(uint64_t))result)(result);
  }
  if (!a2) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

const vp::vx::io::Error *caulk::expected<std::shared_ptr<vp::vx::io::Node_Terminal>,vp::vx::io::Error>::value(const vp::vx::io::Error *result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 48))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    vp::vx::io::Error::Error((vp::vx::io::Error *)v3, v1);
    caulk::bad_expected_access<vp::vx::io::Error>::bad_expected_access((uint64_t)exception, (uint64_t)v3);
  }
  return result;
}

void sub_1BB1D391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const vp::vx::io::Error *caulk::expected<CA::StreamDescription,vp::vx::io::Error>::value(const vp::vx::io::Error *result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 48))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    vp::vx::io::Error::Error((vp::vx::io::Error *)v3, v1);
    caulk::bad_expected_access<vp::vx::io::Error>::bad_expected_access((uint64_t)exception, (uint64_t)v3);
  }
  return result;
}

void sub_1BB1D39C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void vp::vx::io::operator<<<char const(&)[11]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB1D3A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void vp::vx::io::operator<<<char const(&)[10]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB1D3B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::~vector(void *a1)
{
  if (a1[3]) {
    (*(void (**)(void))(*(void *)*a1 + 24))();
  }
  return a1;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  __n128 result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    uint64_t v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::~vector(void *a1)
{
  if (a1[3]) {
    (*(void (**)(void))(*(void *)*a1 + 24))();
  }
  return a1;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::~vector(void *a1)
{
  if (a1[3]) {
    (*(void (**)(void))(*(void *)*a1 + 24))();
  }
  return a1;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  __n128 result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    uint64_t v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

uint64_t **std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    if (v4 != v2)
    {
      do
        vp::vx::io::Node_Socket::~Node_Socket((vp::vx::io::Node_Socket *)(v4 - 304));
      while (v4 != v2);
      uint64_t v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    uint64_t v7 = 0x86BCA1AF286BCA1BLL * ((v6[2] - v5) >> 4);
    return (uint64_t **)std::allocator_traits<vp::Allocator<vp::vx::io::Node_Socket>>::deallocate[abi:ne180100](v6 + 3, v5, v7);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<vp::vx::io::Node_Socket>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 304 * a3, 8);
}

uint64_t std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__push_back_slow_path<vp::rpb::Parameter_Info const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 3;
  if (v7) {
    uint64_t v8 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)(a1 + 3), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v8 + 32 * v3;
  unint64_t v14 = v8 + 32 * v7;
  std::pmr::polymorphic_allocator<vp::rpb::Parameter_Info>::construct[abi:ne180100]<vp::rpb::Parameter_Info,vp::rpb::Parameter_Info const&>((uint64_t)(a1 + 3), v12, a2);
  uint64_t v13 = v12 + 32;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info> &>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1BB1D3F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef std::pmr::polymorphic_allocator<vp::rpb::Parameter_Info>::construct[abi:ne180100]<vp::rpb::Parameter_Info,vp::rpb::Parameter_Info const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  *(void *)(a2 + 8) = v5;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 16));
  }
  *(void *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
  return result;
}

uint64_t *vp::vx::io::Direction_Pair<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>>::Direction_Pair(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = a2[3];
  a1[2] = 0;
  a1[3] = v4;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>(a1, *a2, a2[1], (a2[1] - *a2) >> 5);
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v5 = a2[7];
  a1[6] = 0;
  a1[7] = v5;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>(a1 + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 5);
  return a1;
}

void sub_1BB1D4064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__vallocate[abi:ne180100](result, a4);
    CFTypeRef result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<vp::Allocator<vp::rpb::Parameter_Info>,vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>((uint64_t)(v6 + 3), a2, a3, v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1BB1D40E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__vallocate[abi:ne180100](uint64_t *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 32 * a2;
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<vp::Allocator<vp::rpb::Parameter_Info>,vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pmr::polymorphic_allocator<vp::rpb::Parameter_Info>::construct[abi:ne180100]<vp::rpb::Parameter_Info,vp::rpb::Parameter_Info&>(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Parameter_Info>,vp::rpb::Parameter_Info*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BB1D41E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef std::pmr::polymorphic_allocator<vp::rpb::Parameter_Info>::construct[abi:ne180100]<vp::rpb::Parameter_Info,vp::rpb::Parameter_Info&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  *(void *)(a2 + 8) = v5;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 16));
  }
  *(void *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Parameter_Info>,vp::rpb::Parameter_Info*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Parameter_Info>,vp::rpb::Parameter_Info*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Parameter_Info>,vp::rpb::Parameter_Info*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 32;
      std::pmr::polymorphic_allocator<vp::rpb::Parameter_Info>::destroy[abi:ne180100]<vp::rpb::Parameter_Info>(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__push_back_slow_path<vp::rpb::Property_Info const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 3;
  if (v7) {
    uint64_t v8 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)(a1 + 3), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v8 + 32 * v3;
  unint64_t v14 = v8 + 32 * v7;
  std::pmr::polymorphic_allocator<vp::rpb::Property_Info>::construct[abi:ne180100]<vp::rpb::Property_Info,vp::rpb::Property_Info const&>((uint64_t)(a1 + 3), v12, a2);
  uint64_t v13 = v12 + 32;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info> &>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1BB1D43D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef std::pmr::polymorphic_allocator<vp::rpb::Property_Info>::construct[abi:ne180100]<vp::rpb::Property_Info,vp::rpb::Property_Info const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  *(void *)(a2 + 8) = v5;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 16));
  }
  *(void *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
  return result;
}

uint64_t *vp::vx::io::Direction_Pair<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>>::Direction_Pair(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = a2[3];
  a1[2] = 0;
  a1[3] = v4;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Property_Info*,vp::rpb::Property_Info*>(a1, *a2, a2[1], (a2[1] - *a2) >> 5);
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v5 = a2[7];
  a1[6] = 0;
  a1[7] = v5;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Property_Info*,vp::rpb::Property_Info*>(a1 + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 5);
  return a1;
}

void sub_1BB1D44C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Property_Info*,vp::rpb::Property_Info*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__vallocate[abi:ne180100](result, a4);
    CFTypeRef result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<vp::Allocator<vp::rpb::Property_Info>,vp::rpb::Property_Info*,vp::rpb::Property_Info*,vp::rpb::Property_Info*>((uint64_t)(v6 + 3), a2, a3, v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1BB1D4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<vp::Allocator<vp::rpb::Property_Info>,vp::rpb::Property_Info*,vp::rpb::Property_Info*,vp::rpb::Property_Info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pmr::polymorphic_allocator<vp::rpb::Property_Info>::construct[abi:ne180100]<vp::rpb::Property_Info,vp::rpb::Property_Info&>(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Property_Info>,vp::rpb::Property_Info*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BB1D45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef std::pmr::polymorphic_allocator<vp::rpb::Property_Info>::construct[abi:ne180100]<vp::rpb::Property_Info,vp::rpb::Property_Info&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  *(void *)(a2 + 8) = v5;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(a3 + 16));
  }
  *(void *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Property_Info>,vp::rpb::Property_Info*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Property_Info>,vp::rpb::Property_Info*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<vp::Allocator<vp::rpb::Property_Info>,vp::rpb::Property_Info*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 32;
      std::pmr::polymorphic_allocator<vp::rpb::Property_Info>::destroy[abi:ne180100]<vp::rpb::Property_Info>(v5, v3);
    }
    while (v3 != v4);
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::emplace_unique<unsigned int &,std::shared_ptr<vp::vx::io::Node_Factory>>(void *a1@<X0>, unsigned int *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::insert_unique(a1, &v4, a4);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1BB1D4780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::insert_unique(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v11 = 0;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v13 = (unsigned int *)v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v4 + 24 * v5);
  BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, &v11);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    uint64_t v13 = v11;
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>(a1, (unint64_t *)&v13, (uint64_t)a2, (unint64_t *)&v12);
    char v10 = v12;
  }
  else
  {
    char v10 = v11;
    if (!a1[1] && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,true>,vp::vx::io::Object_ID<vp::vx::io::Node>>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,true>,vp::vx::io::Object_ID<vp::vx::io::Node>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5 > v6 + 24 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(a1, v5, (const char *)1, a3, a4);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
}

__n128 boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = (_DWORD *)(v7 + 24 * v4);
  if (v8 == (_DWORD *)a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)a4;
    __n128 result = *(__n128 *)(a4 + 8);
    *(__n128 *)(v7 + 24 * v4 + 8) = result;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    ++a1[2];
  }
  else
  {
    BOOL v9 = v8 - 6;
    *unint64_t v8 = *(v8 - 6);
    *(_OWORD *)(v7 + 24 * v4 + 8) = *((_OWORD *)v8 - 1);
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    ++a1[2];
    if (v8 - 6 != (_DWORD *)a2)
    {
      unint64_t v10 = v8 - 6;
      do
      {
        int v11 = *(v10 - 6);
        v10 -= 6;
        *BOOL v9 = v11;
        long long v12 = *((_OWORD *)v9 - 1);
        *((void *)v9 - 2) = 0;
        *((void *)v9 - 1) = 0;
        uint64_t v13 = (std::__shared_weak_count *)*((void *)v9 + 2);
        *(_OWORD *)(v9 + 2) = v12;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        BOOL v9 = v10;
      }
      while (v10 != (_DWORD *)a2);
    }
    *(_DWORD *)a2 = *(_DWORD *)a4;
    __n128 result = *(__n128 *)(a4 + 8);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 16);
    *(__n128 *)(a2 + 8) = result;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

unint64_t boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0xAAAAAAAAAAAAAAALL;
  if (0xAAAAAAAAAAAAAAALL - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  BOOL v9 = &a2[v2];
  if (v8 < 0xAAAAAAAAAAAAAAALL) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[0] = a2;
  v16[1] = a1;
  v16[2] = a3;
  uint64_t v10 = a1[1];
  __n128 v11 = boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  v16[0] = 0;
  if (v10)
  {
    uint64_t v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = (std::__shared_weak_count **)(v10 + 16);
      do
      {
        if (*v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v13);
        }
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    (*(void (**)(void, void, uint64_t, uint64_t, __n128))(*(void *)*a1 + 24))(*a1, a1[1], 24 * a1[3], 8, v11);
  }
  uint64_t v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::~scoped_array_deallocator((uint64_t)v16);
}

void sub_1BB1D4E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

__n128 boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  __n128 result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    BOOL v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u32[2] = *(_DWORD *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *BOOL v9 = result;
      BOOL v9 = (__n128 *)((char *)v9 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 24 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

_OWORD *std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = (_OWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (uint64_t)(a1 + 3);
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v15[4] = a1 + 3;
    uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v8, v11);
    uint64_t v13 = (_OWORD *)(v12 + 16 * v7);
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = v12 + 16 * v11;
    *uint64_t v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    void v15[2] = v13 + 1;
    std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::__swap_out_circular_buffer(a1, v15);
    unint64_t v6 = (_OWORD *)a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>> &>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    _OWORD *v5 = *(_OWORD *)a2;
    unint64_t v6 = v5 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  return v6 - 1;
}

void sub_1BB1D50EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

_OWORD *std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (uint64_t)(a1 + 3);
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v15[4] = a1 + 3;
    uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v8, v11);
    char v13 = (_OWORD *)(v12 + 16 * v7);
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = v12 + 16 * v11;
    *char v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    void v15[2] = v13 + 1;
    std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::__swap_out_circular_buffer(a1, v15);
    uint64_t v6 = (_OWORD *)a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>> &>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    _OWORD *v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  return v6 - 1;
}

void sub_1BB1D53B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

_OWORD *std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Node_Command_Factory>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (uint64_t)(a1 + 3);
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v15[4] = a1 + 3;
    uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v8, v11);
    char v13 = (_OWORD *)(v12 + 16 * v7);
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = v12 + 16 * v11;
    *char v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    void v15[2] = v13 + 1;
    std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::__swap_out_circular_buffer(a1, v15);
    uint64_t v6 = (_OWORD *)a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>> &>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    _OWORD *v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  return v6 - 1;
}

void sub_1BB1D5674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::insert_equal@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, char **a3@<X8>)
{
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  unint64_t v11 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = &v4[16 * v5];
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::priv_upper_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(&v11, &v10, a2, a3);
  unint64_t v11 = *a3;
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>(a1, &v11, (uint64_t)a2, &v10);
  *a3 = v10;
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::priv_upper_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 4;
    unsigned int v6 = *a3;
    unint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[4 * (v5 >> 1)];
      if (v6 >= *v8)
      {
        unint64_t v4 = v8 + 4;
        *a1 = v8 + 4;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>@<X0>(void *result@<X0>, char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = result[1];
  if (v6 > (unint64_t)*a2) {
    goto LABEL_16;
  }
  unint64_t v7 = result[2];
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v9 = (char *)(v6 + 16 * v7);
  if (v5 > v9) {
LABEL_16:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = result[3];
  if (v10 < v7) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v7)
  {
    uint64_t v17 = *a2;
    return (void *)boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>(result, v17, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v5)
    {
      *(_DWORD *)unint64_t v5 = *(_DWORD *)a3;
      unint64_t v15 = v6 + 16 * v7;
      uint64_t v16 = *(void *)(a3 + 4);
      *(_DWORD *)(v15 + 12) = *(_DWORD *)(a3 + 12);
      *(void *)(v15 + 4) = v16;
      ++result[2];
    }
    else
    {
      *(_DWORD *)long long v9 = *((_DWORD *)v9 - 4);
      unint64_t v13 = v6 + 16 * v7;
      *(void *)(v13 + 4) = *(void *)(v9 - 12);
      *(_DWORD *)(v13 + 12) = *((_DWORD *)v9 - 1);
      ++result[2];
      if (v9 - 16 != v5) {
        uint64_t result = memmove(v5 + 16, v5, v9 - 16 - v5);
      }
      *(_DWORD *)unint64_t v5 = *(_DWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 4);
      *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 12);
      *(void *)(v5 + 4) = v14;
    }
    *a4 = *a2;
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>@<X0>(void *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 60) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (char *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[a1[1] - v10];
  return result;
}

unint64_t boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0xFFFFFFFFFFFFFFFLL;
  if (0xFFFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  long long v9 = &a2[v2];
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>(void *a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, uint64_t a6)
{
  v13[0] = __dst;
  v13[1] = a1;
  v13[2] = a3;
  uint64_t v10 = (char *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>((int)a1, v10, __src, &v10[16 * a1[2]], __dst, a5, a6);
  v13[0] = 0;
  if (v10) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 16 * a1[3], 4);
  }
  uint64_t v11 = a1[2] + a5;
  a1[1] = __dst;
  a1[2] = v11;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::~scoped_array_deallocator((uint64_t)v13);
}

void sub_1BB1D5D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, uint64_t a7)
{
  long long v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    uint64_t v12 = (char *)(__src - a2);
    memmove(__dst, a2, __src - a2);
    long long v9 = &v12[(void)v9];
  }
  if (a6 != 1) {
    boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>>();
  }
  *(_DWORD *)long long v9 = *(_DWORD *)a7;
  uint64_t v13 = *(void *)(a7 + 4);
  *((_DWORD *)v9 + 3) = *(_DWORD *)(a7 + 12);
  *(void *)(v9 + 4) = v13;
  if (__src && __src != a4)
  {
    memmove(v9 + 16, __src, a4 - __src);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 16 * *(void *)(a1 + 16), 4);
  }
  return a1;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v11 = 0;
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  uint64_t v13 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = &v4[16 * v5];
  uint64_t result = boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, (uint64_t *)&v12, a2, (unsigned int **)&v11);
  *(unsigned char *)(a3 + 8) = result;
  if (result)
  {
    uint64_t v13 = v11;
    uint64_t result = (uint64_t)boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>(a1, &v13, (uint64_t)a2, &v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = v11;
    if (!a1[1] && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
  return result;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,true>,vp::vx::io::Node_Terminal_Address>(&v12, &v11, a4, &v13);
  long long v9 = v13;
  *a5 = v13;
  if (v9 == (unsigned int *)*a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return vp::vx::io::operator<(a4, v9);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,true>,vp::vx::io::Node_Terminal_Address>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = (*a2 - *a1) >> 4;
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      uint64_t v11 = (unsigned int *)(v9 + 16 * (v8 >> 1));
      if (vp::vx::io::operator<(v11, a3))
      {
        *a1 = (uint64_t)(v11 + 4);
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

uint64_t vp::vx::io::operator<(unsigned int *a1, unsigned int *a2)
{
  v4[0] = a1;
  v4[1] = a1 + 1;
  v4[2] = a1 + 2;
  v3[0] = a2;
  v3[1] = a2 + 1;
  v3[2] = a2 + 2;
  return ((char)std::__tuple_compare_three_way[abi:ne180100]<vp::vx::io::Object_ID<vp::vx::io::Node> const&,vp::vx::io::Direction const&,unsigned int const&,vp::vx::io::Object_ID<vp::vx::io::Node> const&,vp::vx::io::Direction const&,unsigned int const&,0ul,1ul,2ul>(v4, v3) >> 7) & 1;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<vp::vx::io::Object_ID<vp::vx::io::Node> const&,vp::vx::io::Direction const&,unsigned int const&,vp::vx::io::Object_ID<vp::vx::io::Node> const&,vp::vx::io::Direction const&,unsigned int const&,0ul,1ul,2ul>(unsigned int **a1, unsigned int **a2)
{
  unsigned int v2 = **a1;
  unsigned int v3 = **a2;
  BOOL v4 = v2 == v3;
  if (v2 < v3) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4)
  {
    int v6 = *a1[1];
    int v7 = *a2[1];
    BOOL v8 = v6 == v7;
    uint64_t v5 = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if (v8)
    {
      unsigned int v9 = *a1[2];
      unsigned int v10 = *a2[2];
      BOOL v11 = v9 == v10;
      if (v9 < v10) {
        LODWORD(v5) = -1;
      }
      else {
        LODWORD(v5) = 1;
      }
      if (v11) {
        return 0;
      }
      else {
        return v5;
      }
    }
  }
  return v5;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>@<X0>(void *result@<X0>, char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = result[1];
  if (v6 > (unint64_t)*a2) {
    goto LABEL_16;
  }
  unint64_t v7 = result[2];
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unsigned int v9 = (char *)(v6 + 16 * v7);
  if (v5 > v9) {
LABEL_16:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = result[3];
  if (v10 < v7) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v7)
  {
    uint64_t v16 = *a2;
    return (void *)boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>(result, v16, (const char *)1, (uint64_t *)a3, a4);
  }
  else
  {
    if (v9 == v5)
    {
      uint64_t v15 = *(void *)a3;
      *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 8);
      *(void *)uint64_t v5 = v15;
      *(_DWORD *)(v6 + 16 * v7 + 12) = *(_DWORD *)(a3 + 12);
      ++result[2];
    }
    else
    {
      *(void *)unsigned int v9 = *((void *)v9 - 2);
      int v13 = *((_DWORD *)v9 - 1);
      *((_DWORD *)v9 + 2) = *((_DWORD *)v9 - 2);
      *(_DWORD *)(v6 + 16 * v7 + 12) = v13;
      ++result[2];
      if (v9 - 16 != v5) {
        uint64_t result = memmove(v5 + 16, v5, v9 - 16 - v5);
      }
      uint64_t v14 = *(void *)a3;
      *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 8);
      *(void *)uint64_t v5 = v14;
      *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 12);
    }
    *a4 = *a2;
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>@<X0>(void *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 60) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (char *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[a1[1] - v10];
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>(void *a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, uint64_t *a6)
{
  v13[0] = __dst;
  v13[1] = a1;
  v13[2] = a3;
  uint64_t v10 = (char *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>((int)a1, v10, __src, &v10[16 * a1[2]], __dst, a5, a6);
  v13[0] = 0;
  if (v10) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 16 * a1[3], 4);
  }
  uint64_t v11 = a1[2] + a5;
  a1[1] = __dst;
  a1[2] = v11;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::~scoped_array_deallocator((uint64_t)v13);
}

void sub_1BB1D64BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, uint64_t *a7)
{
  unsigned int v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    uint64_t v12 = (char *)(__src - a2);
    memmove(__dst, a2, __src - a2);
    unsigned int v9 = &v12[(void)v9];
  }
  if (a6 != 1) {
    boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>>();
  }
  uint64_t v13 = *a7;
  *((_DWORD *)v9 + 2) = *((_DWORD *)a7 + 2);
  *(void *)unsigned int v9 = v13;
  *((_DWORD *)v9 + 3) = *((_DWORD *)a7 + 3);
  if (__src && __src != a4)
  {
    memmove(v9 + 16, __src, a4 - __src);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 16 * *(void *)(a1 + 16), 4);
  }
  return a1;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::emplace_unique<unsigned int &,std::shared_ptr<vp::vx::io::Port_Factory>>(void *a1@<X0>, unsigned int *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::insert_unique(a1, &v4, a4);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1BB1D6670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::insert_unique(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v11 = 0;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v13 = (unsigned int *)v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v4 + 24 * v5);
  BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, &v11);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    uint64_t v13 = v11;
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>(a1, (unint64_t *)&v13, (uint64_t)a2, (unint64_t *)&v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = v11;
    if (!a1[1] && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,true>,vp::vx::io::Object_ID<vp::vx::io::Port>>(&v12, &v11, a4, &v13);
  unsigned int v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,true>,vp::vx::io::Object_ID<vp::vx::io::Port>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5 > v6 + 24 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>(a1, v5, (const char *)1, a3, a4);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[0] = a2;
  v16[1] = a1;
  v16[2] = a3;
  uint64_t v10 = a1[1];
  __n128 v11 = boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  v16[0] = 0;
  if (v10)
  {
    uint64_t v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = (std::__shared_weak_count **)(v10 + 16);
      do
      {
        if (*v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v13);
        }
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    (*(void (**)(void, void, uint64_t, uint64_t, __n128))(*(void *)*a1 + 24))(*a1, a1[1], 24 * a1[3], 8, v11);
  }
  uint64_t v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::~scoped_array_deallocator((uint64_t)v16);
}

void sub_1BB1D6B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  __n128 result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    BOOL v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u32[2] = *(_DWORD *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *BOOL v9 = result;
      BOOL v9 = (__n128 *)((char *)v9 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 24 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

_OWORD *std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = (_OWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (uint64_t)(a1 + 3);
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v15[4] = a1 + 3;
    uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v8, v11);
    uint64_t v13 = (_OWORD *)(v12 + 16 * v7);
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = v12 + 16 * v11;
    *uint64_t v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    void v15[2] = v13 + 1;
    std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::__swap_out_circular_buffer(a1, v15);
    unint64_t v6 = (_OWORD *)a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>> &>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    _OWORD *v5 = *(_OWORD *)a2;
    unint64_t v6 = v5 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  return v6 - 1;
}

void sub_1BB1D6DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  unint64_t v11 = 0;
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  char v13 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)&v4[28 * v5];
  uint64_t result = (void *)boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, (unsigned int **)&v11);
  *(unsigned char *)(a3 + 8) = (_BYTE)result;
  if (result)
  {
    char v13 = v11;
    uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>(a1, &v13, (uint64_t)a2, (char **)&v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = (unsigned int *)v11;
    if (!a1[1] && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  unint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,true>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(&v12, &v11, a4, &v13);
  long long v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,true>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*a2 - *a1) >> 2);
    unsigned int v6 = *a3;
    unint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[7 * (v5 >> 1)];
      if (*v8 < v6)
      {
        unint64_t v4 = v8 + 7;
        *a1 = v8 + 7;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>@<X0>(void *result@<X0>, char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = result[1];
  if (v6 > (unint64_t)*a2) {
    goto LABEL_16;
  }
  unint64_t v7 = result[2];
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v9 = (char *)(v6 + 28 * v7);
  if (v5 > v9) {
LABEL_16:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = result[3];
  if (v10 < v7) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v7)
  {
    uint64_t v17 = *a2;
    return (void *)boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>(result, v17, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v5)
    {
      *(_DWORD *)unint64_t v5 = *(_DWORD *)a3;
      unint64_t v15 = v6 + 28 * v7;
      long long v16 = *(_OWORD *)(a3 + 4);
      *(void *)(v15 + 20) = *(void *)(a3 + 20);
      *(_OWORD *)(v15 + 4) = v16;
      ++result[2];
    }
    else
    {
      *(_DWORD *)long long v9 = *((_DWORD *)v9 - 7);
      unint64_t v13 = v6 + 28 * v7;
      *(_OWORD *)(v13 + 4) = *(_OWORD *)(v9 - 24);
      *(void *)(v13 + 20) = *((void *)v9 - 1);
      ++result[2];
      if (v9 - 28 != v5) {
        uint64_t result = memmove(v5 + 28, v5, v9 - 28 - v5);
      }
      *(_DWORD *)unint64_t v5 = *(_DWORD *)a3;
      long long v14 = *(_OWORD *)(a3 + 4);
      *(void *)(v5 + 20) = *(void *)(a3 + 20);
      *(_OWORD *)(v5 + 4) = v14;
    }
    *a4 = *a2;
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>@<X0>(void *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x924924924924925) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  long long v14 = (char *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[a1[1] - v10];
  return result;
}

unint64_t boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0x924924924924924;
  if (0x924924924924924 - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  long long v9 = &a2[v2];
  if (v8 < 0x924924924924924) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>(void *a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, uint64_t a6)
{
  v13[0] = __dst;
  v13[1] = a1;
  v13[2] = a3;
  uint64_t v10 = (char *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>((int)a1, v10, __src, &v10[28 * a1[2]], __dst, a5, a6);
  v13[0] = 0;
  if (v10) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 28 * a1[3], 4);
  }
  uint64_t v11 = a1[2] + a5;
  a1[1] = __dst;
  a1[2] = v11;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::~scoped_array_deallocator((uint64_t)v13);
}

void sub_1BB1D75B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, uint64_t a7)
{
  long long v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    uint64_t v12 = (char *)(__src - a2);
    memmove(__dst, a2, __src - a2);
    long long v9 = &v12[(void)v9];
  }
  if (a6 != 1) {
    boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>*,boost::container::dtl::pair<vp::vx::Property_ID,unsigned int>>>();
  }
  *(_DWORD *)long long v9 = *(_DWORD *)a7;
  long long v13 = *(_OWORD *)(a7 + 4);
  *(void *)(v9 + 20) = *(void *)(a7 + 20);
  *(_OWORD *)(v9 + 4) = v13;
  if (__src && __src != a4)
  {
    memmove(v9 + 28, __src, a4 - __src);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 28 * *(void *)(a1 + 16), 4);
  }
  return a1;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::emplace_unique<unsigned int &,std::shared_ptr<vp::vx::io::Wire_Factory>>(void *a1@<X0>, unsigned int *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::insert_unique(a1, &v4, a4);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1BB1D77E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::insert_unique(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v11 = 0;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  long long v13 = (unsigned int *)v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v4 + 24 * v5);
  BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, &v11);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    long long v13 = v11;
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>(a1, (unint64_t *)&v13, (uint64_t)a2, (unint64_t *)&v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = v11;
    if (!a1[1] && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,true>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(&v12, &v11, a4, &v13);
  long long v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,true>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5 > v6 + 24 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>(a1, v5, (const char *)1, a3, a4);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[0] = a2;
  v16[1] = a1;
  v16[2] = a3;
  uint64_t v10 = a1[1];
  __n128 v11 = boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  v16[0] = 0;
  if (v10)
  {
    uint64_t v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = (std::__shared_weak_count **)(v10 + 16);
      do
      {
        if (*v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v13);
        }
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    (*(void (**)(void, void, uint64_t, uint64_t, __n128))(*(void *)*a1 + 24))(*a1, a1[1], 24 * a1[3], 8, v11);
  }
  uint64_t v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::~scoped_array_deallocator((uint64_t)v16);
}

void sub_1BB1D7CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  __n128 result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    BOOL v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u32[2] = *(_DWORD *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *BOOL v9 = result;
      BOOL v9 = (__n128 *)((char *)v9 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 24 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

_OWORD *std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::emplace_back<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = (_OWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (uint64_t)(a1 + 3);
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v15[4] = a1 + 3;
    uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v8, v11);
    uint64_t v13 = (_OWORD *)(v12 + 16 * v7);
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = v12 + 16 * v11;
    *uint64_t v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    void v15[2] = v13 + 1;
    std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::__swap_out_circular_buffer(a1, v15);
    unint64_t v6 = (_OWORD *)a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>> &>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    _OWORD *v5 = *(_OWORD *)a2;
    unint64_t v6 = v5 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  return v6 - 1;
}

void sub_1BB1D7F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

void std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0x86BCA1AF286BCA1BLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 304 * ((304 * a2 - 304) / 0x130) + 304;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = 0x86BCA1AF286BCA1BLL * ((v5 - *(void *)a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xD79435E50D7943) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x86BCA1AF286BCA1BLL * ((v4 - *(void *)a1) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x6BCA1AF286BCA1) {
      unint64_t v10 = 0xD79435E50D7943;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v18 = a1 + 24;
    if (v10) {
      uint64_t v11 = std::pmr::polymorphic_allocator<vp::vx::io::Node_Socket>::allocate[abi:ne180100](v6, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v14 = v11;
    long long v15 = (char *)(v11 + 304 * v7);
    unint64_t v17 = v11 + 304 * v10;
    size_t v13 = 304 * ((304 * a2 - 304) / 0x130) + 304;
    bzero(v15, v13);
    long long v16 = &v15[v13];
    std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::__swap_out_circular_buffer((uint64_t *)a1, &v14);
    std::__split_buffer<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket> &>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1BB1D82B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 304;
    vp::vx::io::Node_Socket::Node_Socket(v6 - 304, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::io::Node_Socket>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD79435E50D7944) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

__n128 vp::vx::io::Node_Socket::Node_Socket(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  __n128 result = *(__n128 *)(a2 + 256);
  *(__n128 *)(a1 + 256) = result;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v3 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v3;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  return result;
}

uint64_t std::__split_buffer<vp::vx::io::Node_Socket,vp::Allocator<vp::vx::io::Node_Socket> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 304;
    vp::vx::io::Node_Socket::~Node_Socket((vp::vx::io::Node_Socket *)(i - 304));
  }
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<vp::vx::io::Node_Socket>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4));
  }
  return a1;
}

void std::vector<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](v4, 0);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    uint64_t default_resource = std::vector<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = &v5[4 * a2];
    do
    {
      void *v5 = 0;
      uint64_t default_resource = (char *)std::pmr::get_default_resource((std::pmr *)default_resource);
      v5[1] = default_resource;
      v5 += 4;
    }
    while (v5 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_1BB1D86C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 += 16 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = v5 - *(void *)a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v7 >> 4;
    uint64_t v10 = v4 - *(void *)a1;
    if (v10 >> 3 > v8) {
      unint64_t v8 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    uint64_t v17 = a1 + 24;
    if (v11) {
      uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v6, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12;
    uint64_t v14 = (char *)(v12 + 16 * v9);
    unint64_t v16 = v12 + 16 * v11;
    bzero(v14, 16 * a2);
    long long v15 = &v14[16 * a2];
    std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::__swap_out_circular_buffer((uint64_t *)a1, &v13);
    std::__split_buffer<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>> &>::~__split_buffer((uint64_t)&v13);
  }
}

void sub_1BB1D8844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Port>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Port>,vp::Allocator<std::shared_ptr<vp::vx::io::Port>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Port>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

void std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 += 16 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = v5 - *(void *)a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v7 >> 4;
    uint64_t v10 = v4 - *(void *)a1;
    if (v10 >> 3 > v8) {
      unint64_t v8 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    uint64_t v17 = a1 + 24;
    if (v11) {
      uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v6, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12;
    long long v14 = (char *)(v12 + 16 * v9);
    unint64_t v16 = v12 + 16 * v11;
    bzero(v14, 16 * a2);
    long long v15 = &v14[16 * a2];
    std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::__swap_out_circular_buffer((uint64_t *)a1, &v13);
    std::__split_buffer<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>> &>::~__split_buffer((uint64_t)&v13);
  }
}

void sub_1BB1D8AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Wire>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::io::Wire>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Wire>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

vp::vx::io::Error *caulk::__expected_detail::base<std::shared_ptr<vp::vx::io::Node_Terminal>,vp::vx::io::Error>::~base(vp::vx::io::Error *this)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  else
  {
    vp::vx::io::Error::~Error(this);
  }
  return this;
}

const vp::vx::io::Error *caulk::expected<std::shared_ptr<vp::vx::io::Parameter_Controller const>,vp::vx::io::Error>::value(const vp::vx::io::Error *result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 48))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    vp::vx::io::Error::Error((vp::vx::io::Error *)v3, v1);
    caulk::bad_expected_access<vp::vx::io::Error>::bad_expected_access((uint64_t)exception, (uint64_t)v3);
  }
  return result;
}

void sub_1BB1D8D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const vp::vx::io::Error *caulk::expected<std::shared_ptr<vp::vx::io::Property_Controller const>,vp::vx::io::Error>::value(const vp::vx::io::Error *result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 48))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    vp::vx::io::Error::Error((vp::vx::io::Error *)v3, v1);
    caulk::bad_expected_access<vp::vx::io::Error>::bad_expected_access((uint64_t)exception, (uint64_t)v3);
  }
  return result;
}

void sub_1BB1D8DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 16 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,false>,vp::vx::io::Node_Terminal_Address>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v9 + 16 * v10);
  char v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (vp::vx::io::operator<(a2, v13)) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,boost::container::dtl::select1st<vp::vx::io::Node_Terminal_Address>,std::less<vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>*,false>,vp::vx::io::Node_Terminal_Address>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = (*a2 - *a1) >> 4;
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      BOOL v11 = (unsigned int *)(v9 + 16 * (v8 >> 1));
      if (vp::vx::io::operator<(v11, a3))
      {
        *a1 = (uint64_t)(v11 + 4);
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

char *boost::container::flat_map<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<std::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v17[0] = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v16 = (unsigned int *)(v2 + 28 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(v17, &v16, a2, &v14);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v10 = (unsigned int *)(v7 + 28 * v8);
  BOOL v11 = (char *)v14;
  if (v14 == v10)
  {
    unsigned int v12 = *a2;
LABEL_16:
    v17[0] = v12 | 0xFFFFFFFF00000000;
    v17[1] = 0;
    int v18 = -1;
    uint64_t v19 = 0;
    unint64_t v16 = v14;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique(a1, &v16, (unsigned int *)v17, &v15);
    BOOL v11 = v15;
    uint64_t v14 = (unsigned int *)v15;
    if (!v15) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v11 + 4;
  }
  if (!v14) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v12 = *a2;
  if (*a2 < *v14) {
    goto LABEL_16;
  }
  return v11 + 4;
}

void sub_1BB1D9194(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*a2 - *a1) >> 2);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[7 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 7;
        *a1 = v8 + 7;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, char **a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 28 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  BOOL v11 = *a2;
  unsigned int v12 = 0;
  uint64_t result = (void *)boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_insert_unique_prepare((uint64_t)a1, &v11, a3, (unsigned int **)&v12);
  if (result)
  {
    char v13 = v12;
    return boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>(a1, &v13, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v12) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = v12;
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v9 = &v4[7 * v5];
  unint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      int v18 = v9;
      uint64_t v19 = v10;
      unint64_t v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  BOOL v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 7);
  unsigned int v12 = v11 - 7;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    char v21 = v4;
    uint64_t v20 = v12;
    unint64_t v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__func(void *a1)
{
  *a1 = &unk_1F149D7B8;
  uint64_t v2 = a1 + 1;
  BOOL v4 = a1 + 5;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = v2;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__func(void *a1)
{
  *a1 = &unk_1F149D7B8;
  uint64_t v2 = a1 + 1;
  BOOL v4 = a1 + 5;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = v2;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1C185D370](a1, 0xA1C401191F8F8);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1F149D7B8;
  vp::vx::io::Direction_Pair<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>>::Direction_Pair(v2 + 1, v1);
  return v2;
}

void sub_1BB1D9604(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149D7B8;
  return vp::vx::io::Direction_Pair<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>>::Direction_Pair(a2 + 1, (uint64_t *)(a1 + 8));
}

uint64_t **std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::destroy(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v1;
  return std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::destroy_deallocate(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
  operator delete(a1);
}

uint64_t **std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_2>,vp::Expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::operator()@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 == 2)
  {
    long long v10 = 0uLL;
    uint64_t v7 = *((void *)a1 + 8);
    uint64_t v11 = 0;
    uint64_t default_resource = v7;
    uint64_t v5 = *((void *)a1 + 5);
    uint64_t v6 = *((void *)a1 + 6);
  }
  else
  {
    if (*a2 != 1)
    {
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      uint64_t default_resource = std::pmr::get_default_resource(a1);
      goto LABEL_7;
    }
    long long v10 = 0uLL;
    uint64_t v4 = *((void *)a1 + 4);
    uint64_t v11 = 0;
    uint64_t default_resource = v4;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *((void *)a1 + 2);
  }
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>((uint64_t *)&v10, v5, v6, (v6 - v5) >> 5);
LABEL_7:
  *(_OWORD *)a3 = v10;
  uint64_t v8 = default_resource;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v8;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  *(unsigned char *)(a3 + 32) = 1;
  unsigned int v13 = &v10;
  return std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v13);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F149D800;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F149D800;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149D800;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149D800;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_0>,vp::Expected<float,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::operator()(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned int v5 = *a2;
  int v15 = 2143289344;
  unsigned __int8 v16 = 1;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
  {
    *a3 = 0;
LABEL_12:
    a3[8] = 1;
    int v11 = 2143289344;
    goto LABEL_13;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
  {
    *a3 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  BOOL v9 = *(vp::vx::io::Parameter_Exchange **)(a1 + 8);
  if (v9)
  {
    vp::vx::io::Parameter_Exchange::get_parameter(v9, v5, (uint64_t)v12);
    vp::Expected<float,vp::vx::io::Error>::map_error<vp::rpb::Error (&)(vp::vx::io::Error const&)>((const vp::vx::io::Error *)v12, (void (*)(uint64_t *__return_ptr))vp::vx::io::convert_error, (uint64_t)&v13);
    caulk::expected<float,vp::rpb::Error>::operator=<vp::Expected<float,vp::rpb::Error>>(&v15, &v13);
    if (!v14) {
      vp::objc::ID::~ID((vp::objc::ID *)&v13);
    }
    if (!v12[48]) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v12);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  int v10 = v16;
  *a3 = 0;
  a3[8] = v10;
  if (v10)
  {
    int v11 = v15;
LABEL_13:
    *(_DWORD *)a3 = v11;
    return;
  }
  vp::objc::ID::ID(a3, &v15);
  if (!v16) {
    vp::objc::ID::~ID((vp::objc::ID *)&v15);
  }
}

void sub_1BB1D9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, char a18, int a19, char a20)
{
  if (!a20) {
    vp::objc::ID::~ID((vp::objc::ID *)&a18);
  }
  if (!a16) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (!*(unsigned char *)(v21 - 40)) {
    vp::objc::ID::~ID((vp::objc::ID *)(v21 - 48));
  }
  _Unwind_Resume(a1);
}

void vp::Expected<float,vp::vx::io::Error>::map_error<vp::rpb::Error (&)(vp::vx::io::Error const&)>(const vp::vx::io::Error *a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a1 + 48))
  {
    *(_DWORD *)a3 = *(_DWORD *)caulk::expected<float,vp::vx::io::Error>::value(a1);
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    a2(&v4);
    vp::objc::ID::ID(v5, &v4);
    vp::objc::ID::ID(a3, v5);
    *(unsigned char *)(a3 + 8) = 0;
    vp::objc::ID::~ID((vp::objc::ID *)v5);
    vp::objc::ID::~ID((vp::objc::ID *)&v4);
  }
}

void vp::vx::io::convert_error(vp::vx::io *this@<X0>, vp::objc::ID *a2@<X8>)
{
  CFTypeRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.coreaudio.VoiceProcessor", 34, 0x8000100u, 0);
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands(this);
  if (*(char *)(node_commands + 23) >= 0) {
    uint64_t v6 = (const char *)node_commands;
  }
  else {
    uint64_t v6 = *(const char **)node_commands;
  }
  CFIndex v7 = strlen(v6);
  if (v6)
  {
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
    if (!cf)
    {
      uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
    }
  }
  else
  {
    CFTypeRef cf = 0;
  }
  vp::rpb::Error::Error(a2, (id *)&v11, 0x20692F6Fu, (id *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1BB1D9C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

int *caulk::expected<float,vp::rpb::Error>::operator=<vp::Expected<float,vp::rpb::Error>>(int *a1, int *a2)
{
  LOBYTE(v4) = 0;
  char v5 = *((unsigned char *)a2 + 8);
  if (v5) {
    int v4 = *a2;
  }
  else {
    vp::objc::ID::ID(&v4, a2);
  }
  caulk::expected<float,vp::rpb::Error>::swap((vp::objc::ID *)&v4, a1);
  if (!v5) {
    vp::objc::ID::~ID((vp::objc::ID *)&v4);
  }
  return a1;
}

void sub_1BB1D9D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a10) {
    vp::objc::ID::~ID((vp::objc::ID *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void caulk::expected<float,vp::rpb::Error>::swap(vp::objc::ID *a1, int *a2)
{
  if (*((unsigned char *)a1 + 8)) {
    BOOL v4 = *((unsigned char *)a2 + 8) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    int v6 = *(_DWORD *)a1;
    *(_DWORD *)a1 = *a2;
    *a2 = v6;
    return;
  }
  if (!*((unsigned char *)a1 + 8))
  {
    if (*((unsigned char *)a2 + 8))
    {
      int v7 = *a2;
      vp::objc::ID::ID(a2, a1);
      vp::objc::ID::~ID(a1);
      *(_DWORD *)a1 = v7;
      char v8 = *((unsigned char *)a1 + 8);
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      *((unsigned char *)a2 + 8) = v8;
      return;
    }
    goto LABEL_11;
  }
  if (*((unsigned char *)a2 + 8))
  {
LABEL_11:
    vp::objc::ID::ID(&v9, a1);
    vp::objc::ID::operator=((id *)a1, (id *)a2);
    vp::objc::ID::operator=((id *)a2, &v9);
    goto LABEL_12;
  }
  vp::objc::ID::ID(&v9, a2);
  vp::objc::ID::~ID((vp::objc::ID *)a2);
  *a2 = *(_DWORD *)a1;
  vp::objc::ID::ID(a1, &v9);
  char v5 = *((unsigned char *)a1 + 8);
  *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v5;
LABEL_12:
  vp::objc::ID::~ID((vp::objc::ID *)&v9);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__func(void *a1)
{
  *a1 = &unk_1F149D848;
  uint64_t v2 = a1 + 1;
  BOOL v4 = a1 + 5;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = v2;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__func(void *a1)
{
  *a1 = &unk_1F149D848;
  uint64_t v2 = a1 + 1;
  BOOL v4 = a1 + 5;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = v2;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1C185D370](a1, 0xA1C401191F8F8);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1F149D848;
  vp::vx::io::Direction_Pair<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>>::Direction_Pair(v2 + 1, v1);
  return v2;
}

void sub_1BB1D9F5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149D848;
  return vp::vx::io::Direction_Pair<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>>::Direction_Pair(a2 + 1, (uint64_t *)(a1 + 8));
}

uint64_t **std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::destroy(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v1;
  return std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::destroy_deallocate(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100](&v3);
  operator delete(a1);
}

uint64_t **std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_3>,vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::operator()@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 == 2)
  {
    long long v10 = 0uLL;
    uint64_t v7 = *((void *)a1 + 8);
    uint64_t v11 = 0;
    uint64_t default_resource = v7;
    uint64_t v5 = *((void *)a1 + 5);
    uint64_t v6 = *((void *)a1 + 6);
  }
  else
  {
    if (*a2 != 1)
    {
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      uint64_t default_resource = std::pmr::get_default_resource(a1);
      goto LABEL_7;
    }
    long long v10 = 0uLL;
    uint64_t v4 = *((void *)a1 + 4);
    uint64_t v11 = 0;
    uint64_t default_resource = v4;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *((void *)a1 + 2);
  }
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Property_Info*,vp::rpb::Property_Info*>((uint64_t *)&v10, v5, v6, (v6 - v5) >> 5);
LABEL_7:
  *(_OWORD *)a3 = v10;
  uint64_t v8 = default_resource;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v8;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  *(unsigned char *)(a3 + 32) = 1;
  int v13 = &v10;
  return std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v13);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F149D890;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F149D890;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149D890;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149D890;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

const void **std::__function::__func<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1,std::allocator<vp::vx::io::Graph::connect(vp::rpb::Item)::$_1>,vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::operator()@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned int v5 = *a2;
  uint64_t v27 = 0;
  unsigned __int8 v28 = 1;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6 && (uint64_t v7 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v8 = v7;
    id v9 = *(vp::vx::io::Property_Exchange **)(a1 + 8);
    if (v9)
    {
      vp::vx::io::Property_Exchange::get_property(v9, v5, (uint64_t)&v17);
      if (v21)
      {
        long long v10 = caulk::expected<applesauce::CF::DataRef,vp::vx::io::Error>::value((const vp::vx::io::Error *)&v17);
        uint64_t v11 = *(const void **)v10;
        *(void *)long long v10 = 0;
        if (v11)
        {
          CFRetain(v11);
          char v36 = 1;
          char v25 = 1;
          v22[0] = v11;
          v32[0] = 0;
          caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::vx::io::Error>::~base(v32);
          CFRelease(v11);
        }
        else
        {
          char v36 = 1;
          char v25 = 1;
          v22[0] = 0;
          v32[0] = 0;
          caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::vx::io::Error>::~base(v32);
        }
      }
      else
      {
        v29[0] = v17;
        long long v30 = v19;
        long long v31 = v20;
        long long v19 = 0uLL;
        *(void *)&long long v20 = 0;
        v32[0] = v17;
        long long v13 = v31;
        long long v14 = v30;
        uint64_t v35 = *((void *)&v31 + 1);
        *(void *)&long long v31 = 0;
        v29[1] = v18;
        long long v30 = 0uLL;
        char v36 = 0;
        char v25 = 0;
        v22[0] = v17;
        v22[1] = v18;
        long long v23 = v14;
        long long v24 = v13;
        uint64_t v34 = 0;
        v32[1] = v18;
        long long v33 = 0uLL;
        caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::vx::io::Error>::~base(v32);
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v29);
      }
      vp::Expected<applesauce::CF::TypeRef,vp::vx::io::Error>::map_error<vp::rpb::Error (&)(vp::vx::io::Error const&)>((const vp::vx::io::Error *)v22, (void (*)(uint64_t *__return_ptr))vp::vx::io::convert_error, (uint64_t)v26);
      caulk::expected<applesauce::CF::TypeRef,vp::rpb::Error>::operator=<vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error>>((uint64_t *)&v27, (uint64_t)v26);
      caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::rpb::Error>::~base(v26);
      caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::vx::io::Error>::~base(v22);
      caulk::__expected_detail::base<applesauce::CF::DataRef,vp::vx::io::Error>::~base(&v17);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    int v15 = v28;
    *a3 = 0;
    a3[8] = v15;
    if (!v15)
    {
      vp::objc::ID::ID(a3, &v27);
      return caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::rpb::Error>::~base(&v27);
    }
    unsigned int v12 = v27;
  }
  else
  {
    unsigned int v12 = 0;
    *a3 = 0;
    a3[8] = 1;
  }
  *(void *)a3 = v12;
  uint64_t v27 = 0;
  return caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::rpb::Error>::~base(&v27);
}

void sub_1BB1DA480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  caulk::__expected_detail::base<applesauce::CF::DataRef,vp::vx::io::Error>::~base(&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::rpb::Error>::~base(&a26);
  _Unwind_Resume(a1);
}

void vp::Expected<applesauce::CF::TypeRef,vp::vx::io::Error>::map_error<vp::rpb::Error (&)(vp::vx::io::Error const&)>(const vp::vx::io::Error *a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a1 + 48))
  {
    uint64_t v4 = caulk::expected<applesauce::CF::TypeRef,vp::vx::io::Error>::value(a1);
    *(void *)a3 = *(void *)v4;
    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    a2(&v5);
    vp::objc::ID::ID(v6, &v5);
    vp::objc::ID::ID(a3, v6);
    *(unsigned char *)(a3 + 8) = 0;
    vp::objc::ID::~ID((vp::objc::ID *)v6);
    vp::objc::ID::~ID((vp::objc::ID *)&v5);
  }
}

const vp::vx::io::Error *caulk::expected<applesauce::CF::DataRef,vp::vx::io::Error>::value(const vp::vx::io::Error *result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 48))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    vp::vx::io::Error::Error((vp::vx::io::Error *)v3, v1);
    caulk::bad_expected_access<vp::vx::io::Error>::bad_expected_access((uint64_t)exception, (uint64_t)v3);
  }
  return result;
}

void sub_1BB1DA5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const vp::vx::io::Error *caulk::expected<applesauce::CF::TypeRef,vp::vx::io::Error>::value(const vp::vx::io::Error *result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 48))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    vp::vx::io::Error::Error((vp::vx::io::Error *)v3, v1);
    caulk::bad_expected_access<vp::vx::io::Error>::bad_expected_access((uint64_t)exception, (uint64_t)v3);
  }
  return result;
}

void sub_1BB1DA668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *caulk::expected<applesauce::CF::TypeRef,vp::rpb::Error>::operator=<vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error>>(uint64_t *a1, uint64_t a2)
{
  LOBYTE(v4) = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *(const void **)a2;
    *(void *)a2 = 0;
  }
  else
  {
    vp::objc::ID::ID(&v4, a2);
  }
  caulk::expected<applesauce::CF::TypeRef,vp::rpb::Error>::swap((vp::objc::ID *)&v4, a1);
  caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::rpb::Error>::~base(&v4);
  return a1;
}

void sub_1BB1DA6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void caulk::expected<applesauce::CF::TypeRef,vp::rpb::Error>::swap(vp::objc::ID *a1, uint64_t *a2)
{
  if (*((unsigned char *)a1 + 8)) {
    BOOL v4 = *((unsigned char *)a2 + 8) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = *(void *)a1;
    *(void *)a1 = 0;
    *(void *)a1 = *a2;
    *a2 = v6;
    return;
  }
  if (!*((unsigned char *)a1 + 8))
  {
    if (*((unsigned char *)a2 + 8))
    {
      uint64_t v7 = *a2;
      *a2 = 0;
      caulk::__expected_detail::destroy<applesauce::CF::TypeRef,(void *)0>((const void **)a2);
      vp::objc::ID::ID(a2, a1);
      vp::objc::ID::~ID(a1);
      *(void *)a1 = v7;
      char v8 = *((unsigned char *)a1 + 8);
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      *((unsigned char *)a2 + 8) = v8;
      return;
    }
    goto LABEL_11;
  }
  if (*((unsigned char *)a2 + 8))
  {
LABEL_11:
    vp::objc::ID::ID(&v9, a1);
    vp::objc::ID::operator=((id *)a1, (id *)a2);
    vp::objc::ID::operator=((id *)a2, &v9);
    goto LABEL_12;
  }
  vp::objc::ID::ID(&v9, a2);
  vp::objc::ID::~ID((vp::objc::ID *)a2);
  *a2 = *(void *)a1;
  *(void *)a1 = 0;
  caulk::__expected_detail::destroy<applesauce::CF::TypeRef,(void *)0>((const void **)a1);
  vp::objc::ID::ID(a1, &v9);
  char v5 = *((unsigned char *)a1 + 8);
  *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v5;
LABEL_12:
  vp::objc::ID::~ID((vp::objc::ID *)&v9);
}

const void **caulk::__expected_detail::base<applesauce::CF::TypeRef,vp::vx::io::Error>::~base(const void **this)
{
  if (*((unsigned char *)this + 48)) {
    caulk::__expected_detail::destroy<applesauce::CF::TypeRef,(void *)0>(this);
  }
  else {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)this);
  }
  return this;
}

unint64_t boost::container::flat_map<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<std::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v14[0] = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  int v18 = (unsigned int *)(v2 + 24 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,false>,vp::vx::io::Object_ID<vp::vx::io::Node>>(v14, &v18, a2, &v16);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v10 = (unsigned int *)(v7 + 24 * v8);
  unint64_t v11 = (unint64_t)v16;
  if (v16 == v10)
  {
    unsigned int v12 = *a2;
LABEL_16:
    LODWORD(v14[0]) = v12;
    v14[1] = 0;
    int v15 = 0;
    uint64_t v17 = v16;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>(a1, &v17, (uint64_t)v14, (unint64_t *)&v18);
    unint64_t v11 = (unint64_t)v18;
    unsigned __int8 v16 = v18;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      unint64_t v11 = (unint64_t)v16;
    }
    if (!v11) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v11 + 8;
  }
  if (!v16) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v12 = *a2;
  if (*a2 < *v16) {
    goto LABEL_16;
  }
  return v11 + 8;
}

void sub_1BB1DA9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,false>,vp::vx::io::Object_ID<vp::vx::io::Node>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)a3;
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  BOOL v4 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::insert_unique(a1, &v4, &v5, a4);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1BB1DAB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::insert_unique(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 24 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  long long v10 = *a2;
  unint64_t v11 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_insert_unique_prepare((uint64_t)a1, &v10, a3, &v11))
  {
    unsigned int v12 = v11;
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>(a1, (unint64_t *)&v12, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = (unint64_t)v11;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v9 = &v4[6 * v5];
  long long v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      int v18 = v9;
      long long v19 = v10;
      unsigned __int8 v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  unint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 6);
  unsigned int v12 = v11 - 6;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    char v21 = v4;
    long long v20 = v12;
    unsigned __int8 v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Node>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

void *caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>)>::functor_invoker<vp::vx::io::Graph_Builder::build(applesauce::dispatch::v1::queue)::$_0>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v5 = v3;
  long long v6 = *(_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  std::vector<std::shared_ptr<vp::vx::io::Node_Delegate>>::emplace_back<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>>(*v2, &v5);
  return std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100](&v5, 0);
}

void sub_1BB1DAE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Delegate>>::emplace_back<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    int v15 = v13;
    unsigned __int8 v16 = (uint64_t *)&v13[16 * v9];
    int v18 = &v13[16 * v12];
    std::shared_ptr<vp::vx::io::Node_Delegate>::shared_ptr[abi:ne180100]<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>,void>(v16, a2);
    uint64_t v17 = v16 + 2;
    std::vector<std::shared_ptr<vp::vx::io::Node_Delegate>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Terminal>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<vp::vx::io::Node_Delegate>::shared_ptr[abi:ne180100]<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_1BB1DAF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<vp::vx::io::Node_Delegate>::shared_ptr[abi:ne180100]<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::io::Node_Delegate *,vp::Allocator_Delete<vp::vx::io::Node_Delegate>,std::allocator<vp::vx::io::Node_Delegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::io::Node_Delegate *,vp::Allocator_Delete<vp::vx::io::Node_Delegate>,std::allocator<vp::vx::io::Node_Delegate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Delegate>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<vp::vx::io::Node_Delegate>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<vp::vx::io::Node_Delegate>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Delegate>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Delegate>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Delegate>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>)>::functor_invoker<vp::vx::io::Graph_Builder::build(applesauce::dispatch::v1::queue)::$_1>(void ***a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = v3;
  long long v7 = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 24);
  if (v3)
  {
    vp::vx::io::Object::get_log_context((uint64_t)v3 + *(void *)(*v3 - 24), &v10);
    uint64_t v4 = v10;
    vp::vx::io::Object::get_log_context(**v2 + *(void *)(*(void *)**v2 - 24), &v9);
    vp::vx::io::Object::Log_Context::set_parent(v4, &v9);
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::emplace_back<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>>(v2[1], (uint64_t *)&v6);
  }
  return std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&v6, 0);
}

void sub_1BB1DB2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::emplace_back<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    long long v15 = v13;
    unsigned __int8 v16 = (uint64_t *)&v13[16 * v9];
    int v18 = &v13[16 * v12];
    std::shared_ptr<vp::vx::io::Node_Command>::shared_ptr[abi:ne180100]<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>,void>(v16, a2);
    uint64_t v17 = v16 + 2;
    std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<vp::vx::io::Node_Terminal>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<vp::vx::io::Node_Command>::shared_ptr[abi:ne180100]<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_1BB1DB3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<vp::vx::io::Node_Command>::shared_ptr[abi:ne180100]<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::io::Node_Command *,vp::Allocator_Delete<vp::vx::io::Node_Command>,std::allocator<vp::vx::io::Node_Command>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::io::Node_Command *,vp::Allocator_Delete<vp::vx::io::Node_Command>,std::allocator<vp::vx::io::Node_Command>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<vp::vx::io::Node_Command>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<vp::vx::io::Node_Command>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Command>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Command>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Command>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::shared_ptr<vp::vx::io::Node>::shared_ptr[abi:ne180100]<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::io::Node *,vp::Allocator_Delete<vp::vx::io::Node>,std::allocator<vp::vx::io::Node>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::io::Node *,vp::Allocator_Delete<vp::vx::io::Node>,std::allocator<vp::vx::io::Node>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 112))(v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

char *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::assign<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*>(char *result, char *__src, char *a3)
{
  uint64_t v4 = __src;
  uint64_t v5 = result;
  size_t v6 = a3 - __src;
  unint64_t v7 = (a3 - __src) >> 4;
  unint64_t v8 = *((void *)result + 3);
  if (v7 <= v8)
  {
    char v13 = (char *)*((void *)result + 1);
    unint64_t v14 = *((void *)result + 2);
    if (v7 <= v14)
    {
      if (a3 == __src)
      {
LABEL_18:
        v5[2] = v7;
        return result;
      }
      unsigned __int8 v16 = (void *)*((void *)result + 1);
      size_t v15 = a3 - __src;
    }
    else
    {
      if (v14)
      {
        uint64_t result = (char *)memmove(*((void **)result + 1), __src, 16 * v14);
        v4 += 16 * v14;
        v13 += 16 * v14;
      }
      if (v7 == v14) {
        goto LABEL_18;
      }
      size_t v15 = 16 * (v7 - v14);
      unsigned __int8 v16 = v13;
      __src = v4;
    }
    uint64_t result = (char *)memmove(v16, __src, v15);
    goto LABEL_18;
  }
  if ((v6 & 0x8000000000000000) != 0) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", __src);
  }
  uint64_t result = (char *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>::allocate[abi:ne180100]((uint64_t)result, (a3 - __src) >> 4);
  long long v9 = result;
  uint64_t v10 = v5[1];
  if (v10)
  {
    v5[2] = 0;
    uint64_t result = (char *)(*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(*(void *)*v5 + 24))(*v5, v10, 16 * v8, 4);
  }
  uint64_t v11 = 0;
  v5[2] = 0;
  void v5[3] = v7;
  v5[1] = v9;
  if (v4 && v4 != a3 && v9)
  {
    uint64_t result = (char *)memmove(v9, v4, v6);
    unint64_t v12 = &v9[16 * v7];
    uint64_t v11 = v5[2];
  }
  else
  {
    unint64_t v12 = v9;
  }
  v5[2] = v11 + ((v12 - v9) >> 4);
  return result;
}

unint64_t boost::container::flat_map<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<std::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v14[0] = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  int v18 = (unsigned int *)(v2 + 24 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(v14, &v18, a2, &v16);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = (unsigned int *)(v7 + 24 * v8);
  unint64_t v11 = (unint64_t)v16;
  if (v16 == v10)
  {
    unsigned int v12 = *a2;
LABEL_16:
    LODWORD(v14[0]) = v12;
    v14[1] = 0;
    size_t v15 = 0;
    uint64_t v17 = v16;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>(a1, &v17, (uint64_t)v14, (unint64_t *)&v18);
    unint64_t v11 = (unint64_t)v18;
    unsigned __int8 v16 = v18;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      unint64_t v11 = (unint64_t)v16;
    }
    if (!v11) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v11 + 8;
  }
  if (!v16) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v12 = *a2;
  if (*a2 < *v16) {
    goto LABEL_16;
  }
  return v11 + 8;
}

void sub_1BB1DBA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)a3;
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  BOOL v4 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::insert_unique(a1, &v4, &v5, a4);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1BB1DBBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::insert_unique(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 24 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v10 = *a2;
  unint64_t v11 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_insert_unique_prepare((uint64_t)a1, &v10, a3, &v11))
  {
    unsigned int v12 = v11;
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>(a1, (unint64_t *)&v12, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = (unint64_t)v11;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v9 = &v4[6 * v5];
  uint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      int v18 = v9;
      uint64_t v19 = v10;
      unsigned __int8 v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  unint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 6);
  unsigned int v12 = v11 - 6;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    char v21 = v4;
    long long v20 = v12;
    unsigned __int8 v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::priv_equal_range<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = (_DWORD *)*a2;
  if (*a2 == *a1)
  {
LABEL_10:
    *a4 = v5;
    a4[1] = v5;
    return;
  }
  unint64_t v8 = (uint64_t)(*a2 - *a1) >> 4;
  unsigned int v9 = *a3;
  uint64_t v5 = (_DWORD *)*a1;
  while (1)
  {
    if (v8 != 1 && !v5) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if (!v5) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    unint64_t v10 = v8 >> 1;
    unint64_t v11 = &v5[4 * (v8 >> 1)];
    if (*v11 >= v9) {
      break;
    }
    uint64_t v5 = v11 + 4;
    *a1 = v11 + 4;
    unint64_t v10 = v8 + ~v10;
LABEL_9:
    unint64_t v8 = v10;
    if (!v10) {
      goto LABEL_10;
    }
  }
  if (v9 < *v11) {
    goto LABEL_9;
  }
  *a2 = &v5[4 * v8];
  unsigned int v12 = (_DWORD *)*a1;
  uint64_t v17 = v11;
  int v18 = v12;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(&v18, &v17, a3, &v19);
  unsigned int v14 = (_DWORD *)*a2;
  size_t v15 = v11 + 4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::priv_upper_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(&v15, &v14, a3, &v16);
  uint64_t v13 = v16;
  *a4 = v19;
  a4[1] = v13;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Port>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>*,false>,vp::vx::io::Object_ID<vp::vx::io::Port>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 4;
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      unint64_t v8 = &v4[4 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 4;
        *a1 = v8 + 4;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

uint64_t *std::shared_ptr<vp::vx::io::Port>::shared_ptr[abi:ne180100]<vp::vx::io::Port,vp::Allocator_Delete<vp::vx::io::Port>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::io::Port *,vp::Allocator_Delete<vp::vx::io::Port>,std::allocator<vp::vx::io::Port>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::io::Port *,vp::Allocator_Delete<vp::vx::io::Port>,std::allocator<vp::vx::io::Port>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

char *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::assign<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>*>(char *result, char *__src, char *a3)
{
  BOOL v4 = __src;
  unint64_t v5 = result;
  size_t v6 = a3 - __src;
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a3 - __src) >> 2);
  unint64_t v8 = *((void *)result + 3);
  if (v7 <= v8)
  {
    uint64_t v13 = (char *)*((void *)result + 1);
    unint64_t v14 = *((void *)result + 2);
    if (v7 <= v14)
    {
      if (a3 == __src)
      {
LABEL_18:
        v5[2] = v7;
        return result;
      }
      uint64_t v16 = (void *)*((void *)result + 1);
      size_t v15 = a3 - __src;
    }
    else
    {
      if (v14)
      {
        BOOL result = (char *)memmove(*((void **)result + 1), __src, 28 * v14);
        v4 += 28 * v14;
        v13 += 28 * v14;
      }
      if (v7 == v14) {
        goto LABEL_18;
      }
      size_t v15 = 28 * (v7 - v14);
      uint64_t v16 = v13;
      __src = v4;
    }
    BOOL result = (char *)memmove(v16, __src, v15);
    goto LABEL_18;
  }
  if (v7 >= 0x924924924924925) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", __src);
  }
  BOOL result = (char *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>::allocate[abi:ne180100]((uint64_t)result, v7);
  unsigned int v9 = result;
  uint64_t v10 = v5[1];
  if (v10)
  {
    v5[2] = 0;
    BOOL result = (char *)(*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(*(void *)*v5 + 24))(*v5, v10, 28 * v8, 4);
  }
  uint64_t v11 = 0;
  v5[2] = 0;
  void v5[3] = v7;
  v5[1] = v9;
  if (v4 && v4 != a3 && v9)
  {
    BOOL result = (char *)memmove(v9, v4, v6);
    unsigned int v12 = &v9[28 * v7];
    uint64_t v11 = v5[2];
  }
  else
  {
    unsigned int v12 = v9;
  }
  v5[2] = v11 + 0x6DB6DB6DB6DB6DB7 * ((v12 - v9) >> 2);
  return result;
}

unint64_t boost::container::flat_map<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<std::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v14[0] = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  int v18 = (unsigned int *)(v2 + 24 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,false>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(v14, &v18, a2, &v16);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = (unsigned int *)(v7 + 24 * v8);
  unint64_t v11 = (unint64_t)v16;
  if (v16 == v10)
  {
    unsigned int v12 = *a2;
LABEL_16:
    LODWORD(v14[0]) = v12;
    v14[1] = 0;
    size_t v15 = 0;
    uint64_t v17 = v16;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>(a1, &v17, (uint64_t)v14, (unint64_t *)&v18);
    unint64_t v11 = (unint64_t)v18;
    uint64_t v16 = v18;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      unint64_t v11 = (unint64_t)v16;
    }
    if (!v11) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v11 + 8;
  }
  if (!v16) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v12 = *a2;
  if (*a2 < *v16) {
    goto LABEL_16;
  }
  return v11 + 8;
}

void sub_1BB1DC4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>*,false>,vp::vx::io::Object_ID<vp::vx::io::Wire>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)a3;
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  BOOL v4 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::insert_unique(a1, &v4, &v5, a4);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1BB1DC64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::insert_unique(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 24 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v10 = *a2;
  unint64_t v11 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_insert_unique_prepare((uint64_t)a1, &v10, a3, &v11))
  {
    unsigned int v12 = v11;
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::emplace<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>(a1, (unint64_t *)&v12, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = (unint64_t)v11;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v9 = &v4[6 * v5];
  uint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      int v18 = v9;
      uint64_t v19 = v10;
      uint64_t v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  unint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 6);
  unsigned int v12 = v11 - 6;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    char v21 = v4;
    long long v20 = v12;
    uint64_t v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

void *std::unique_ptr<vp::vx::io::Wire,vp::Allocator_Delete<vp::vx::io::Wire>>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    return (void *)(*(uint64_t (**)(void, uint64_t, void, void))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t *std::shared_ptr<vp::vx::io::Wire>::shared_ptr[abi:ne180100]<vp::vx::io::Wire,vp::Allocator_Delete<vp::vx::io::Wire>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::io::Wire *,vp::Allocator_Delete<vp::vx::io::Wire>,std::allocator<vp::vx::io::Wire>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::io::Wire *,vp::Allocator_Delete<vp::vx::io::Wire>,std::allocator<vp::vx::io::Wire>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1BB1DCC8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void vp::vx::database::v1::syntax::conditions::Match_Any::Parser::parse_condition()
{
}

void vp::vx::database::v1::syntax::conditions::Match_Any::add_constraint(vp::vx::database::v1::syntax::conditions::Match_Any *this, CFTypeRef *a2)
{
  uint64_t v3 = (void *)((char *)this + 16);
  vp::vx::database::v1::syntax::Constraint::get_key(a2, &v4);
  std::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>::pair[abi:ne180100]<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint const&,0>((uint64_t)v5, &v4, (uint64_t)a2);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,boost::container::dtl::select1st<applesauce::CF::StringRef>,std::less<applesauce::CF::StringRef>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>>::emplace_equal<std::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>(v3, (long long *)v5, &v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v5[1]) {
    CFRelease(v5[1]);
  }
  if (v5[0]) {
    CFRelease(v5[0]);
  }
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t vp::vx::database::v1::syntax::conditions::Match_Any::evaluate(vp::vx::database::v1::syntax::conditions::Match_Any *this, const __CFDictionary **a2)
{
  uint64_t v3 = (const void **)*((void *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (!v2) {
    return 0;
  }
  uint64_t v6 = 32 * v2;
  while (1)
  {
    if (!v3) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (!*a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (applesauce::CF::details::has_key<applesauce::CF::StringRef const&>(*a2, v3)
      && (vp::vx::database::v1::syntax::Constraint::evaluate((vp::vx::database::v1::syntax::Constraint *)(v3 + 1), a2, 0) & 1) != 0)
    {
      break;
    }
    v3 += 4;
    v6 -= 32;
    if (!v6) {
      return 0;
    }
  }
  return 1;
}

void sub_1BB1DCF7C(void *a1)
{
}

void vp::vx::database::v1::syntax::conditions::Match_Any::Parser::~Parser(vp::vx::database::v1::syntax::conditions::Match_Any::Parser *this)
{
}

void vp::vx::database::v1::syntax::conditions::Match_Any::~Match_Any(vp::vx::database::v1::syntax::conditions::Match_Any *this)
{
}

{
  uint64_t vars8;

  boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2);

  JUMPOUT(0x1C185D370);
}

void vp::vx::database::v1::syntax::conditions::When_Not::Parser::parse_condition()
{
}

uint64_t vp::vx::database::v1::syntax::conditions::When_Not::add_condition(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v5 = v3;
  vp::vx::database::v1::syntax::conditions::When::add_condition(a1 + 16, a2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t vp::vx::database::v1::syntax::conditions::When_Not::evaluate(vp::vx::database::v1::syntax::conditions::When_Not *this, const applesauce::CF::DictionaryRef *a2)
{
  return vp::vx::database::v1::syntax::conditions::When::evaluate((void *)this + 2, (uint64_t)a2) ^ 1;
}

void vp::vx::database::v1::syntax::conditions::When_Not::Parser::~Parser(vp::vx::database::v1::syntax::conditions::When_Not::Parser *this)
{
}

void vp::vx::database::v1::syntax::conditions::When_Not::~When_Not(vp::vx::database::v1::syntax::conditions::When_Not *this)
{
  *(void *)this = &unk_1F149DA68;
  *((void *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493EC8;
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::tuple<vp::vx::database::v1::syntax::Logic,std::unique_ptr<vp::vx::database::v1::syntax::Condition>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  void **v3;

  *(void *)this = &unk_1F149DA68;
  *((void *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493EC8;
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::tuple<vp::vx::database::v1::syntax::Logic,std::unique_ptr<vp::vx::database::v1::syntax::Condition>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x1C185D370](this, 0x10A1C40387B1AC9);
}

void *vp::vx::components::Wireless_Charging_Detector::Wireless_Charging_Detector(void *a1, long long *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F149DA90;
  long long v15 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory::IO_Wireless_Charging_Detector_Delegate_Factory((uint64_t)(a1 + 1), (uint64_t)&v15);
  uint64_t v3 = (vp *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  log = vp::get_log(v3);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Wireless_Charging_Detector]", 46, __p);
    unint64_t v6 = v14;
    unint64_t v7 = __p[1];
    unint64_t v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = v6;
      }
      else {
        unint64_t v9 = (unint64_t)v7;
      }
      uint64_t v10 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      if (v9) {
        unint64_t v11 = " ";
      }
      else {
        unint64_t v11 = "";
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v17 = v10;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void vp::vx::components::Wireless_Charging_Detector::~Wireless_Charging_Detector(std::__shared_weak_count **this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Wireless_Charging_Detector]", 46, __p);
    unint64_t v4 = v13;
    uint64_t v5 = __p[1];
    unint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      unint64_t v8 = (void **)__p[0];
      if ((v13 & 0x80u) == 0) {
        unint64_t v8 = __p;
      }
      if (v7) {
        unint64_t v9 = " ";
      }
      else {
        unint64_t v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      long long v15 = v8;
      __int16 v16 = 2080;
      unint64_t v17 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = this[3];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  this[4] = (std::__shared_weak_count *)&unk_1F1493718;
  unint64_t v11 = this[6];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

{
  uint64_t vars8;

  vp::vx::components::Wireless_Charging_Detector::~Wireless_Charging_Detector(this);

  JUMPOUT(0x1C185D370);
}

uint64_t vp::vx::components::Wireless_Charging_Detector::as_io_node_delegate_factory(uint64_t a1)
{
  return a1 + 8;
}

void vp::vx::database::v1::syntax::conditions::Match::Parser::parse_condition()
{
}

uint64_t vp::vx::database::v1::syntax::conditions::Match::evaluate(vp::vx::database::v1::syntax::conditions::Match *this, const __CFDictionary **a2)
{
  return vp::vx::database::v1::syntax::Constraint::evaluate((vp::vx::database::v1::syntax::conditions::Match *)((char *)this + 16), a2, 1);
}

void vp::vx::database::v1::syntax::conditions::Match::Parser::~Parser(vp::vx::database::v1::syntax::conditions::Match::Parser *this)
{
}

void vp::vx::database::v1::syntax::conditions::Match::~Match(vp::vx::database::v1::syntax::conditions::Match *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t vp::vx::database::v1::syntax::Constraint::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(const void **)a1;
  uint64_t v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  unint64_t v6 = *(const void **)(a1 + 16);
  unint64_t v7 = *(const void **)(a2 + 16);
  *(void *)(a1 + 16) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  return a1;
}

id *vp::rpb::Array<vp::rpb::Terminal>::Array(id *a1, vp::rpb::Wire *a2, uint64_t a3)
{
  *a1 = 0;
  unint64_t v6 = [MEMORY[0x1E4F1CA48] array];
  if (a3)
  {
    uint64_t v7 = 8 * a3;
    do
    {
      unint64_t v8 = (void *)vp::rpb::Wire::objc_self(a2);
      [v6 addObject:v8];

      a2 = (vp::rpb::Wire *)((char *)a2 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  unint64_t v9 = (objc_object *)[v6 copy];
  vp::objc::ID::ID((vp::objc::ID *)&v11, v9);
  vp::objc::ID::operator=(a1, &v11);
  vp::objc::ID::~ID((vp::objc::ID *)&v11);

  return a1;
}

{
  void *v6;
  uint64_t v7;
  void *v8;
  objc_object *v9;
  id v11;

  *a1 = 0;
  unint64_t v6 = [MEMORY[0x1E4F1CA48] array];
  if (a3)
  {
    uint64_t v7 = 8 * a3;
    do
    {
      unint64_t v8 = (void *)vp::rpb::Wire::objc_self(a2);
      [v6 addObject:v8];

      a2 = (vp::rpb::Wire *)((char *)a2 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  unint64_t v9 = (objc_object *)[v6 copy];
  vp::objc::ID::ID((vp::objc::ID *)&v11, v9);
  vp::objc::ID::operator=(a1, &v11);
  vp::objc::ID::~ID((vp::objc::ID *)&v11);

  return a1;
}

void sub_1BB1DDAB4(_Unwind_Exception *a1)
{
  vp::objc::ID::~ID(v1);
  _Unwind_Resume(a1);
}

void sub_1BB1DDBA4(_Unwind_Exception *a1)
{
  vp::objc::ID::~ID(v1);
  _Unwind_Resume(a1);
}

void vp::rpb::Array<vp::rpb::Terminal>::operator[](id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = [*a1 objectAtIndexedSubscript:a2];
  vp::rpb::Wire::Wire(a3, v4);
}

vp::objc::ID *vp::rpb::Error::Error(vp::objc::ID *a1, id *a2, unsigned int a3, id *a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)MEMORY[0x1E4F28C58];
  id v8 = *a2;
  uint64_t v13 = *MEMORY[0x1E4F28568];
  id v9 = *a4;
  v14[0] = v9;
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
  id v11 = [v7 errorWithDomain:v8 code:a3 userInfo:v10];
  vp::objc::ID::ID(a1, v11);

  return a1;
}

void sub_1BB1DDD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

vp::objc::ID *vp::rpb::Error::Error(vp::objc::ID *a1, id *a2, unsigned int a3, id *a4, id *a5)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  id v9 = (void *)MEMORY[0x1E4F28C58];
  id v10 = *a2;
  v16[0] = *MEMORY[0x1E4F28568];
  id v11 = *a4;
  v17[0] = v11;
  v16[1] = *MEMORY[0x1E4F28A50];
  id v12 = *a5;
  v17[1] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];
  unsigned __int8 v14 = [v9 errorWithDomain:v10 code:a3 userInfo:v13];
  vp::objc::ID::ID(a1, v14);

  return a1;
}

void sub_1BB1DDE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *vp::vx::detail::strip@<X0>(std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v3 = a2;
  LODWORD(aboost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  BOOL v4 = (int)a2 < 0;
  CFIndex size = (std::string *)a1->__r_.__value_.__l.__size_;
  if ((int)a2 < 0) {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  a2 = (std::string *)a2;
  if (v4) {
    a2 = size;
  }
  unsigned __int8 v31 = 10;
  unint64_t v6 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(a1, (unsigned __int8 *)a2 + (void)a1, &v31);
  std::string::size_type v7 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) == 0) {
    id v8 = v2;
  }
  else {
    id v8 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  if ((v7 & 0x80u) != 0) {
    std::string::size_type v7 = v2->__r_.__value_.__l.__size_;
  }
  std::string::erase(v2, v6 - (unsigned __int8 *)v8, (char *)v8 + v7 - (char *)v6);
  int v9 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
  id v10 = (std::string *)v2->__r_.__value_.__r.__words[0];
  std::string::size_type v11 = v2->__r_.__value_.__l.__size_;
  if (v9 >= 0) {
    id v12 = v2;
  }
  else {
    id v12 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v13 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  if (v9 >= 0) {
    std::string::size_type v14 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v2->__r_.__value_.__l.__size_;
  }
  long long v15 = (std::string *)((char *)v12 + v14);
  if (v14)
  {
    std::string::size_type v16 = v14 - 2;
    while (1)
    {
      unint64_t v17 = v12;
      id v12 = (std::string *)((char *)v12 + 1);
      if (v12 == v15) {
        break;
      }
      uint64_t v18 = v16--;
      if (v17->__r_.__value_.__s.__data_[0] == 32 && v17->__r_.__value_.__s.__data_[1] == 32)
      {
        if (&v17->__r_.__value_.__s.__data_[2] != (std::string::value_type *)v15)
        {
          int v19 = 32;
          uint64_t v20 = 1;
          do
          {
            int v21 = v19;
            int v19 = v12->__r_.__value_.__s.__data_[v20];
            if (v21 != 32 || v19 != 32)
            {
              v17->__r_.__value_.__s.__data_[1] = v19;
              unint64_t v17 = (std::string *)((char *)v17 + 1);
            }
            ++v20;
            --v18;
          }
          while (v18);
          std::string::size_type v13 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
          id v10 = (std::string *)v2->__r_.__value_.__r.__words[0];
          std::string::size_type v11 = v2->__r_.__value_.__l.__size_;
          LOBYTE(v9) = *((unsigned char *)&v2->__r_.__value_.__s + 23);
        }
        long long v15 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        break;
      }
    }
  }
  if ((v9 & 0x80u) != 0)
  {
    std::string::size_type v22 = v11;
  }
  else
  {
    id v10 = v2;
    std::string::size_type v22 = v13;
  }
  std::string::erase(v2, (char *)v15 - (char *)v10, (char *)v10 + v22 - (char *)v15);
  std::string::size_type v23 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    long long v24 = (std::string *)v2->__r_.__value_.__r.__words[0];
    std::string::size_type v25 = v2->__r_.__value_.__l.__size_;
    if (!v25)
    {
LABEL_39:
      std::string::size_type v26 = -1;
      goto LABEL_40;
    }
  }
  else
  {
    long long v24 = v2;
    std::string::size_type v25 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&v2->__r_.__value_.__s + 23)) {
      goto LABEL_39;
    }
  }
  std::string::size_type v26 = 0;
  while (v24->__r_.__value_.__s.__data_[v26] == 32)
  {
    if (v25 == ++v26) {
      goto LABEL_39;
    }
  }
LABEL_40:
  if ((v23 & 0x80) != 0)
  {
    uint64_t v27 = (std::string *)v2->__r_.__value_.__r.__words[0];
    std::string::size_type v23 = v2->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v27 = v2;
  }
  uint64_t v28 = (uint64_t)&v27[-1].__r_.__value_.__r.__words[2] + 7;
  while (v23)
  {
    int v29 = *(unsigned __int8 *)(v28 + v23--);
    if (v29 != 32) {
      return std::string::basic_string(v3, v2, v26, v23, (std::allocator<char> *)&v32);
    }
  }
  std::string::size_type v23 = -1;
  return std::string::basic_string(v3, v2, v26, v23, (std::allocator<char> *)&v32);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  unint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void sub_1BB1DE370(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  a14 = *MEMORY[0x1E4FBA408];
  uint64_t v34 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a14 + *(void *)(a14 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a16 = v34;
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C185D210](&a33);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1DE350);
}

uint64_t vp::vx::DSP_Node_Factory::DSP_Node_Factory(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 1296) = &unk_1F1493718;
  int v8 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)int v8 = &unk_1F1493738;
  *(_OWORD *)(v8 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(void *)(a1 + 1304) = v8 + 24;
  *(void *)(a1 + 131boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v8;
  *(void *)a1 = &unk_1F149DC38;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 1296) = &unk_1F149DC68;
  *(_OWORD *)(a1 + 16) = *a3;
  *a3 = 0u;
  *(_OWORD *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *a4;
  *a4 = 0u;
  vp::vx::data_flow::State<void>::State(a1 + 48);
  vp::vx::data_flow::State<void>::State(a1 + 72);
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  vp::vx::data_flow::State<void>::State(a1 + 128);
  int v9 = (std::pmr *)vp::vx::data_flow::State<void>::State(a1 + 152);
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource(v9);
  *(void *)(a1 + 176) = default_resource;
  *(void *)(a1 + 184) = a1 + 208;
  *(_OWORD *)(a1 + 19boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = xmmword_1BB8725D0;
  std::string::size_type v11 = (std::pmr *)std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 59boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v11;
  *(void *)(a1 + 60std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = a1 + 624;
  *(_OWORD *)(a1 + 608) = xmmword_1BB8725D0;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  id v12 = (std::pmr *)std::pmr::get_default_resource(v11);
  *(void *)(a1 + 103boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v12;
  *(void *)(a1 + 104std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(void *)(a1 + 1064) = std::pmr::get_default_resource(v12);
  vp::vx::data_flow::State<void>::State(a1 + 1072);
  vp::vx::data_flow::State<void>::State(a1 + 1096);
  vp::vx::data_flow::State<void>::State(a1 + 1120);
  vp::vx::data_flow::State<void>::State(a1 + 1144);
  vp::vx::data_flow::State<void>::State(a1 + 1168);
  std::string::size_type v13 = (vp *)vp::vx::data_flow::State<void>::State(a1 + 1192);
  *(_OWORD *)(a1 + 127boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 123boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_DWORD *)(a1 + 1288) = 1;
  log = vp::get_log(v13);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::vx::get_log_context_info((vp::vx *)a1, __p);
    unint64_t v16 = v25;
    int v17 = (char)v25;
    uint64_t v18 = __p[1];
    int v19 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (v17 >= 0) {
        unint64_t v20 = v16;
      }
      else {
        unint64_t v20 = (unint64_t)v18;
      }
      int v21 = (void **)__p[0];
      if (v17 >= 0) {
        int v21 = __p;
      }
      if (v20) {
        std::string::size_type v22 = " ";
      }
      else {
        std::string::size_type v22 = "";
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v27 = v21;
      __int16 v28 = 2080;
      int v29 = v22;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
      LOBYTE(v17) = v25;
    }
    if ((v17 & 0x80) != 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1DE764(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::DSP_Node_Factory::~DSP_Node_Factory(void **this, void **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *this = *a2;
  BOOL v4 = (vp *)a2[3];
  *(void **)((char *)this + *(v3 - 3)) = v4;
  log = vp::get_log(v4);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::vx::get_log_context_info((vp::vx *)this, __p);
    unint64_t v7 = v18;
    int v8 = (char)v18;
    int v9 = __p[1];
    id v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (v8 >= 0) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = (unint64_t)v9;
      }
      id v12 = (void **)__p[0];
      if (v8 >= 0) {
        id v12 = __p;
      }
      if (v11) {
        std::string::size_type v13 = " ";
      }
      else {
        std::string::size_type v13 = "";
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v20 = v12;
      __int16 v21 = 2080;
      std::string::size_type v22 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
      LOBYTE(v8) = v18;
    }
    if ((v8 & 0x80) != 0) {
      operator delete(__p[0]);
    }
  }
  std::string::size_type v14 = (std::__shared_weak_count *)this[160];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((char *)this + 1263) < 0) {
    operator delete(this[155]);
  }
  if (*((char *)this + 1239) < 0) {
    operator delete(this[152]);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 149));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 146));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 143));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 140));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 137));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 134));
  __p[0] = this + 130;
  std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  __p[0] = this + 126;
  std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::~vector(this + 74);
  boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::~vector(this + 22);
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 19));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 16));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,vp::vx::data_flow::State<BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(this + 12));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 9));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 6));
  long long v15 = (std::__shared_weak_count *)this[5];
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  unint64_t v16 = (std::__shared_weak_count *)this[3];
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

void vp::vx::DSP_Node_Factory::~DSP_Node_Factory(void **this)
{
  *(void *)(v1 + 1296) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 1312);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::DSP_Node_Factory::~DSP_Node_Factory(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::DSP_Node_Factory::~DSP_Node_Factory(vp::vx::DSP_Node_Factory *this)
{
}

{
  uint64_t vars8;

  vp::vx::DSP_Node_Factory::~DSP_Node_Factory((void **)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void vp::vx::DSP_Node_Factory::get_configuration(vp::vx::DSP_Node_Factory *this@<X0>, uint64_t a2@<X8>)
{
  vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::get_value((vp::vx::DSP_Node_Factory *)((char *)this + 48), a2);
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      unint64_t v6 = (atomic_ullong *)v5;
      unint64_t v7 = (vp::vx *)*((void *)this + 2);
      if (v7)
      {
        v18[0] = this;
        v18[1] = v7;
        std::string::value_type v18[2] = (vp::vx *)v5;
        p_shared_owners = &v5->__shared_owners_;
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        vp::vx::DSP_Node_Factory::get_configuration(void)const::$_0::operator()<std::__fs::filesystem::path>(v18, (const std::string::value_type **)a2);
        int v9 = *(const std::string::value_type ***)(a2 + 88);
        id v10 = *(const std::string::value_type ***)(a2 + 96);
        v17[0] = this;
        v17[1] = v7;
        void v17[2] = (vp::vx *)v6;
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        while (v9 != v10)
        {
          vp::vx::DSP_Node_Factory::get_configuration(void)const::$_0::operator()<std::__fs::filesystem::path>(v17, v9);
          v9 += 3;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
        unint64_t v11 = *(const std::string::value_type ***)(a2 + 64);
        id v12 = *(const std::string::value_type ***)(a2 + 72);
        v16[0] = this;
        v16[1] = v7;
        void v16[2] = (vp::vx *)v6;
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        while (v11 != v12)
        {
          vp::vx::DSP_Node_Factory::get_configuration(void)const::$_0::operator()<std::__fs::filesystem::path>(v16, v11);
          v11 += 3;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
        std::string::size_type v14 = *(const std::string::value_type ***)(a2 + 112);
        std::string::size_type v13 = *(const std::string::value_type ***)(a2 + 120);
        v15[0] = this;
        v15[1] = v7;
        void v15[2] = (vp::vx *)v6;
        atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
        while (v14 != v13)
        {
          vp::vx::DSP_Node_Factory::get_configuration(void)const::$_0::operator()<std::__fs::filesystem::path>(v15, v14);
          v14 += 3;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
    }
  }
}

void vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::get_value(std::pmr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t default_resource = std::pmr::get_default_resource(a1);
  vp::vx::data_flow::Value::Value(v7, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)a1, (vp::vx::data_flow::Value *)v7);
  if ((uint64_t (***)())v7[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration>(void)::s_type_id) {
    uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v6;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(a2 + 24, (uint64_t *)(v5 + 24));
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v5 + 64);
  *(void *)(a2 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(v5 + 80);
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(v5 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v5 + 88);
  *(void *)(a2 + 104) = *(void *)(v5 + 104);
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  *(_OWORD *)(a2 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_OWORD *)(v5 + 112);
  *(void *)(a2 + 128) = *(void *)(v5 + 128);
  *(void *)(v5 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(v5 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(v5 + 128) = 0;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(v5 + 136);
  *(void *)(a2 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(v5 + 152);
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(_OWORD *)(a2 + 16std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v5 + 160);
  *(void *)(a2 + 176) = *(void *)(v5 + 176);
  *(void *)(v5 + 16std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(v5 + 168) = 0;
  *(void *)(v5 + 176) = 0;
  *(unsigned char *)(a2 + 184) = *(unsigned char *)(v5 + 184);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v7);
}

void sub_1BB1DED68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  _Unwind_Resume(a1);
}

double vp::vx::DSP_Node_Factory::get_configuration(void)const::$_0::operator()<std::__fs::filesystem::path>(vp::vx **a1, const std::string::value_type **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  BOOL v4 = a1[1];
  uint64_t v5 = *((void *)*a1 + 1);
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *a2, (std::string::size_type)a2[1]);
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v6 = (vp *)(*(void *(**)(long long *__return_ptr, vp::vx *, uint64_t, std::string *))(*(void *)v4 + 32))(&v22, v4, v5, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  log = vp::get_log(v6);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::vx::get_log_context_info(v3, __p);
    unint64_t v9 = v20;
    int v10 = (char)v20;
    unint64_t v11 = __p[1];
    id v12 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      if (v10 >= 0) {
        unint64_t v13 = v9;
      }
      else {
        unint64_t v13 = (unint64_t)v11;
      }
      std::string::size_type v14 = (void **)__p[0];
      if (v10 >= 0) {
        std::string::size_type v14 = __p;
      }
      if (v13) {
        long long v15 = " ";
      }
      else {
        long long v15 = "";
      }
      unint64_t v16 = (uint64_t *)*a2;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v16 = (uint64_t *)a2;
      }
      *(_DWORD *)buf = 136315906;
      int v17 = &v22;
      if (SHIBYTE(v23) < 0) {
        int v17 = (long long *)v22;
      }
      unsigned __int8 v25 = v14;
      __int16 v26 = 2080;
      uint64_t v27 = v15;
      __int16 v28 = 2080;
      int v29 = v16;
      __int16 v30 = 2080;
      unsigned __int8 v31 = v17;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s%sadjust \"%s\" to \"%s\"", buf, 0x2Au);
      LOBYTE(v1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v20;
    }
    if ((v10 & 0x80) != 0) {
      operator delete(__p[0]);
    }
  }
  if (*((char *)a2 + 23) < 0) {
    operator delete((void *)*a2);
  }
  double result = *(double *)&v22;
  *(_OWORD *)a2 = v22;
  a2[2] = v23;
  return result;
}

void sub_1BB1DEF60(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,unsigned __int8 a21,long long buf,int a23,__int16 a24,__int16 a25,uint64_t *a26)
{
  if (a2)
  {
    __int16 v28 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v28);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::vx::get_log_context_info(v27, &__p);
      uint64_t v31 = a21;
      int v32 = (char)a21;
      uint64_t v33 = a17;
      uint64_t v34 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        if (v32 >= 0) {
          uint64_t v35 = v31;
        }
        else {
          uint64_t v35 = v33;
        }
        p_p = __p;
        if (v32 >= 0) {
          p_p = &__p;
        }
        if (v35) {
          uint64_t v37 = " ";
        }
        else {
          uint64_t v37 = "";
        }
        int v38 = *((char *)v26 + 23);
        uint64_t v39 = (uint64_t *)*v26;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = p_p;
        if (v38 >= 0) {
          uint64_t v40 = v26;
        }
        else {
          uint64_t v40 = v39;
        }
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v37;
        a25 = 2080;
        a26 = v40;
        _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, "%s%sfailed to adjust \"%s\"", (uint8_t *)&buf, 0x20u);
        LOBYTE(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a21;
      }
      if ((v32 & 0x80) != 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB1DEF2CLL);
  }
  _Unwind_Resume(a1);
}

double vp::vx::DSP_Node_Factory::set_configuration(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      int v8 = operator new(0x28uLL);
      *int v8 = &unk_1F149E0D0;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      int v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F149E088;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  int v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  unint64_t v11 = v9;
  *unint64_t v9 = &unk_1F149E040;
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  int v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 6), a2).n128_u64[0];
  return result;
}

void sub_1BB1DF1EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1DF1FC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DF1F8);
  }
  JUMPOUT(0x1BB1DF1F0);
}

void sub_1BB1DF204(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DF1F8);
  }
  JUMPOUT(0x1BB1DF1F0);
}

uint64_t vp::vx::DSP_Node_Factory::get_block_size(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 72;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1DF268(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_block_size(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      int v8 = operator new(0x28uLL);
      *int v8 = &unk_1F149E160;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      int v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F149E118;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  int v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  unint64_t v11 = v9;
  *unint64_t v9 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  int v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 9), a2).n128_u64[0];
  return result;
}

void sub_1BB1DF41C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1DF42C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DF428);
  }
  JUMPOUT(0x1BB1DF420);
}

void sub_1BB1DF434(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DF428);
  }
  JUMPOUT(0x1BB1DF420);
}

void vp::vx::DSP_Node_Factory::set_block_size_is_fixed(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      int v8 = operator new(0x28uLL);
      *int v8 = &unk_1F149E1F0;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      unint64_t v13 = v8;
      std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v12);
      unint64_t v16 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F149E1A8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  unint64_t v13 = v10;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v12);
  unint64_t v16 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  unint64_t v11 = v9;
  *unint64_t v9 = &unk_1F1498B58;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v14);
  unint64_t v16 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v15);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,vp::vx::data_flow::State<BOOL>>>::__assign_alt[abi:ne180100]<1ul,vp::vx::data_flow::State<BOOL>,vp::vx::data_flow::State<BOOL>>((uint64_t)(a1 + 12), (uint64_t)(a1 + 12), a2);
}

void sub_1BB1DF5E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::vx::DSP_Node_Factory::get_fft_block_size(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 128;
  BOOL v2 = vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)this + 128);
  if (!v2) {
    return 0;
  }
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v2);
  vp::vx::data_flow::Value::Value(v6, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v6);
  uint64_t v4 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  return v4 | 0x100000000;
}

void sub_1BB1DF678(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_fft_block_size(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      int v8 = operator new(0x28uLL);
      *int v8 = &unk_1F149E280;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      uint64_t v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F149E238;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  uint64_t v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  unint64_t v11 = v9;
  *unint64_t v9 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  uint64_t v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 16), a2).n128_u64[0];
  return result;
}

void sub_1BB1DF82C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1DF83C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DF838);
  }
  JUMPOUT(0x1BB1DF830);
}

void sub_1BB1DF844(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DF838);
  }
  JUMPOUT(0x1BB1DF830);
}

double vp::vx::DSP_Node_Factory::get_sample_rate(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 152;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  double v3 = *(double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1DF8B0(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_sample_rate(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      int v8 = operator new(0x28uLL);
      *int v8 = &unk_1F149E358;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,double const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      uint64_t v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F149E310;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,double const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  uint64_t v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  unint64_t v11 = v9;
  *unint64_t v9 = &unk_1F149E2C8;
  std::__function::__value_func<void ()(unsigned int,double const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  uint64_t v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 19), a2).n128_u64[0];
  return result;
}

void sub_1BB1DFA64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1DFA74(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DFA70);
  }
  JUMPOUT(0x1BB1DFA68);
}

void sub_1BB1DFA7C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1DFA70);
  }
  JUMPOUT(0x1BB1DFA68);
}

std::pmr *vp::vx::DSP_Node_Factory::for_each_input_format(std::pmr *result, uint64_t a2)
{
  uint64_t v3 = *((void *)result + 23);
  uint64_t v2 = *((void *)result + 24);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v2)
  {
    uint64_t v6 = v3 + 48 * v2;
    do
    {
      if (!v3) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      uint64_t default_resource = std::pmr::get_default_resource(result);
      vp::vx::data_flow::Value::Value(v16, default_resource);
      uint64_t v8 = v3 + 24;
      vp::vx::data_flow::State<void>::get_value(v8, (vp::vx::data_flow::Value *)v16);
      uint64_t v9 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
      uint64_t v10 = *(void *)(v9 + 32);
      long long v11 = *(_OWORD *)(v9 + 16);
      v14[0] = *(_OWORD *)v9;
      v14[1] = v11;
      uint64_t v15 = v10;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v16);
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v13 = v8 - 24;
      double result = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v12 + 48))(v12, v13, v14);
      uint64_t v3 = v13 + 48;
    }
    while (v3 != v6);
  }
  return result;
}

void sub_1BB1DFBA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_input_format(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v15 = *(std::string *)a2;
  }
  unint64_t v6 = a1[1];
  unint64_t v16 = v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[4];
  unint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v15;
  }
  unint64_t v9 = v16;
  unint64_t v18 = v16;
  int v19 = a1;
  if (HIDWORD(v6))
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      unint64_t v9 = v18;
      uint64_t v10 = v19;
    }
    else
    {
      std::string v20 = v17;
      uint64_t v10 = a1;
    }
    unint64_t v21 = v9;
    long long v22 = v10;
    v23[0] = v8;
    v23[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      unint64_t v9 = v21;
      uint64_t v10 = v22;
    }
    else
    {
      std::string __p = v20;
    }
    unint64_t v25 = v9;
    __int16 v26 = v10;
    __int16 v28 = 0;
    long long v11 = (char *)operator new(0x40uLL);
    *(void *)long long v11 = &unk_1F149E3E8;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v12 = (std::string *)(v11 + 24);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v11 + 5) = *((void *)&__p.__r_.__value_.__l + 2);
      goto LABEL_31;
    }
  }
  else
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      unint64_t v9 = v18;
      uint64_t v10 = v19;
    }
    else
    {
      std::string v20 = v17;
      uint64_t v10 = a1;
    }
    unint64_t v21 = v9;
    long long v22 = v10;
    v23[0] = v8;
    v23[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      unint64_t v9 = v21;
      uint64_t v10 = v22;
    }
    else
    {
      std::string __p = v20;
    }
    unint64_t v25 = v9;
    __int16 v26 = v10;
    __int16 v28 = 0;
    long long v11 = (char *)operator new(0x40uLL);
    *(void *)long long v11 = &unk_1F149E3A0;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v12 = (std::string *)(v11 + 24);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v11 + 5) = *((void *)&__p.__r_.__value_.__l + 2);
      goto LABEL_31;
    }
  }
  std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  unint64_t v9 = v25;
  uint64_t v10 = v26;
LABEL_31:
  *((void *)v11 + 6) = v9;
  *((void *)v11 + 7) = v10;
  __int16 v28 = v11;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v27);
  uint64_t v31 = 0;
  uint64_t v13 = operator new(0x28uLL);
  *uint64_t v13 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(v13 + 1), (uint64_t)v29);
  uint64_t v31 = v13;
  vp::vx::data_flow::State<void>::register_listener(a3, (uint64_t)v30);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v29);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v23[1]) {
    std::__shared_weak_count::__release_weak(v23[1]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  v20.__r_.__value_.__r.__words[0] = 0;
  return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::insert_or_assign<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(a1 + 22, (void ***)&v20, (void **)a2, a3, (uint64_t)v23);
}

void sub_1BB1DFF94(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    BOOL v4 = (std::__shared_weak_count *)v2[2];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::pmr *vp::vx::DSP_Node_Factory::for_each_output_format(std::pmr *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 75);
  uint64_t v3 = *((void *)result + 76);
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v3)
  {
    uint64_t v6 = v2 + 48 * v3;
    do
    {
      if (!v2) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      uint64_t default_resource = std::pmr::get_default_resource(result);
      vp::vx::data_flow::Value::Value(v16, default_resource);
      uint64_t v8 = v2 + 24;
      vp::vx::data_flow::State<void>::get_value(v8, (vp::vx::data_flow::Value *)v16);
      uint64_t v9 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
      uint64_t v10 = *(void *)(v9 + 32);
      long long v11 = *(_OWORD *)(v9 + 16);
      v14[0] = *(_OWORD *)v9;
      v14[1] = v11;
      uint64_t v15 = v10;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v16);
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v13 = v8 - 24;
      double result = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v12 + 48))(v12, v13, v14);
      uint64_t v2 = v13 + 48;
    }
    while (v2 != v6);
  }
  return result;
}

void sub_1BB1E0110(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_output_format(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v15 = *(std::string *)a2;
  }
  unint64_t v6 = a1[1];
  unint64_t v16 = v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[4];
  unint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v15;
  }
  unint64_t v9 = v16;
  unint64_t v18 = v16;
  int v19 = a1;
  if (HIDWORD(v6))
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      unint64_t v9 = v18;
      uint64_t v10 = v19;
    }
    else
    {
      std::string v20 = v17;
      uint64_t v10 = a1;
    }
    unint64_t v21 = v9;
    long long v22 = v10;
    v23[0] = v8;
    v23[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      unint64_t v9 = v21;
      uint64_t v10 = v22;
    }
    else
    {
      std::string __p = v20;
    }
    unint64_t v25 = v9;
    __int16 v26 = v10;
    __int16 v28 = 0;
    long long v11 = (char *)operator new(0x40uLL);
    *(void *)long long v11 = &unk_1F149E478;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v12 = (std::string *)(v11 + 24);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v11 + 5) = *((void *)&__p.__r_.__value_.__l + 2);
      goto LABEL_31;
    }
  }
  else
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      unint64_t v9 = v18;
      uint64_t v10 = v19;
    }
    else
    {
      std::string v20 = v17;
      uint64_t v10 = a1;
    }
    unint64_t v21 = v9;
    long long v22 = v10;
    v23[0] = v8;
    v23[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      unint64_t v9 = v21;
      uint64_t v10 = v22;
    }
    else
    {
      std::string __p = v20;
    }
    unint64_t v25 = v9;
    __int16 v26 = v10;
    __int16 v28 = 0;
    long long v11 = (char *)operator new(0x40uLL);
    *(void *)long long v11 = &unk_1F149E430;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v12 = (std::string *)(v11 + 24);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v11 + 5) = *((void *)&__p.__r_.__value_.__l + 2);
      goto LABEL_31;
    }
  }
  std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  unint64_t v9 = v25;
  uint64_t v10 = v26;
LABEL_31:
  *((void *)v11 + 6) = v9;
  *((void *)v11 + 7) = v10;
  __int16 v28 = v11;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v27);
  uint64_t v31 = 0;
  uint64_t v13 = operator new(0x28uLL);
  *uint64_t v13 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(v13 + 1), (uint64_t)v29);
  uint64_t v31 = v13;
  vp::vx::data_flow::State<void>::register_listener(a3, (uint64_t)v30);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v29);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v23[1]) {
    std::__shared_weak_count::__release_weak(v23[1]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  v20.__r_.__value_.__r.__words[0] = 0;
  return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::insert_or_assign<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(a1 + 74, (void ***)&v20, (void **)a2, a3, (uint64_t)v23);
}

void sub_1BB1E04FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    BOOL v4 = (std::__shared_weak_count *)v2[2];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL vp::vx::DSP_Node_Factory::get_should_enable_audio_recorders(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 1072;
  BOOL v2 = vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)this + 1072);
  if (!v2) {
    return 0;
  }
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v2);
  vp::vx::data_flow::Value::Value(v6, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v6);
  BOOL v4 = *(unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6) != 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  return v4;
}

void sub_1BB1E05C8(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      uint64_t v8 = operator new(0x28uLL);
      *uint64_t v8 = &unk_1F149E508;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      std::string v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = &unk_1F149E4C0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  std::string v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  long long v11 = v9;
  *unint64_t v9 = &unk_1F1498B58;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  std::string v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 134), a2).n128_u64[0];
  return result;
}

void sub_1BB1E077C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1E078C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0788);
  }
  JUMPOUT(0x1BB1E0780);
}

void sub_1BB1E0794(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0788);
  }
  JUMPOUT(0x1BB1E0780);
}

double vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v8 = a1[1];
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      unint64_t v4 = v8;
LABEL_5:
      unint64_t v9 = operator new(0x20uLL);
      *unint64_t v9 = &unk_1F149E5E0;
      v9[1] = v6;
      v9[2] = v5;
      void v9[3] = v4;
      std::string v15 = v9;
      std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v14);
      uint64_t v18 = 0;
      uint64_t v10 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    unint64_t v4 = v8;
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  long long v11 = operator new(0x20uLL);
  *long long v11 = &unk_1F149E598;
  v11[1] = v6;
  v11[2] = v5;
  v11[3] = v4;
  std::string v15 = v11;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v14);
  uint64_t v18 = 0;
  uint64_t v10 = operator new(0x28uLL);
LABEL_8:
  uint64_t v12 = v10;
  *uint64_t v10 = &unk_1F149E550;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v16);
  uint64_t v18 = v12;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v17);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](v14);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 137), a2).n128_u64[0];
  return result;
}

void sub_1BB1E0940(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1E0950(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E094CLL);
  }
  JUMPOUT(0x1BB1E0944);
}

void sub_1BB1E0958(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E094CLL);
  }
  JUMPOUT(0x1BB1E0944);
}

uint64_t vp::vx::DSP_Node_Factory::get_should_connect_to_AUPB(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 1120;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1E09BC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      unint64_t v8 = operator new(0x28uLL);
      *unint64_t v8 = &unk_1F149E670;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      std::string v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = &unk_1F149E628;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  std::string v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  long long v11 = v9;
  *unint64_t v9 = &unk_1F1498B58;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  std::string v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 140), a2).n128_u64[0];
  return result;
}

void sub_1BB1E0B70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1E0B80(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0B7CLL);
  }
  JUMPOUT(0x1BB1E0B74);
}

void sub_1BB1E0B88(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0B7CLL);
  }
  JUMPOUT(0x1BB1E0B74);
}

uint64_t vp::vx::DSP_Node_Factory::get_should_connect_to_RPB(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 1144;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1E0BEC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      unint64_t v8 = operator new(0x28uLL);
      *unint64_t v8 = &unk_1F149E700;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      std::string v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = &unk_1F149E6B8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  std::string v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  long long v11 = v9;
  *unint64_t v9 = &unk_1F1498B58;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  std::string v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 143), a2).n128_u64[0];
  return result;
}

void sub_1BB1E0DA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1E0DB0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0DACLL);
  }
  JUMPOUT(0x1BB1E0DA4);
}

void sub_1BB1E0DB8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0DACLL);
  }
  JUMPOUT(0x1BB1E0DA4);
}

uint64_t vp::vx::DSP_Node_Factory::get_sample_rate_conversion_algorithm(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 1168;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1E0E1C(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      unint64_t v8 = operator new(0x28uLL);
      *unint64_t v8 = &unk_1F149E790;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      std::string v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = &unk_1F149E748;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  std::string v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  long long v11 = v9;
  *unint64_t v9 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  std::string v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 146), a2).n128_u64[0];
  return result;
}

void sub_1BB1E0FD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1E0FE0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0FDCLL);
  }
  JUMPOUT(0x1BB1E0FD4);
}

void sub_1BB1E0FE8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E0FDCLL);
  }
  JUMPOUT(0x1BB1E0FD4);
}

uint64_t vp::vx::DSP_Node_Factory::get_sample_rate_conversion_quality(vp::vx::DSP_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 1192;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1E104C(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    p_shared_weak_owners = &v5->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (HIDWORD(v4))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
LABEL_5:
      unint64_t v8 = operator new(0x28uLL);
      *unint64_t v8 = &unk_1F149E820;
      v8[1] = v6;
      void v8[2] = v5;
      v8[3] = v4;
      v8[4] = a1;
      std::string::size_type v14 = v8;
      std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
      std::string v17 = 0;
      unint64_t v9 = operator new(0x28uLL);
      goto LABEL_8;
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  }
  else if (HIDWORD(v4))
  {
    goto LABEL_5;
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = &unk_1F149E7D8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = v4;
  v10[4] = a1;
  std::string::size_type v14 = v10;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  std::string v17 = 0;
  unint64_t v9 = operator new(0x28uLL);
LABEL_8:
  long long v11 = v9;
  *unint64_t v9 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v15);
  std::string v17 = v11;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v13);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)(a1 + 149), a2).n128_u64[0];
  return result;
}

void sub_1BB1E1200(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB1E1210(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E120CLL);
  }
  JUMPOUT(0x1BB1E1204);
}

void sub_1BB1E1218(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB1E120CLL);
  }
  JUMPOUT(0x1BB1E1204);
}

std::string *vp::vx::DSP_Node_Factory::set_tuning_resources_path(vp::vx::DSP_Node_Factory *this, const std::__fs::filesystem::path *a2)
{
  return std::string::operator=((std::string *)((char *)this + 1216), &a2->__pn_);
}

std::string *vp::vx::DSP_Node_Factory::set_temporary_directory_path(vp::vx::DSP_Node_Factory *this, const std::__fs::filesystem::path *a2)
{
  return std::string::operator=((std::string *)((char *)this + 1240), &a2->__pn_);
}

uint64_t vp::vx::DSP_Node_Factory::set_time(uint64_t this, const uint64_t *a2)
{
  *(void *)(this + 1264) = *a2;
  return this;
}

void *vp::vx::DSP_Node_Factory::new_node@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v72 = a3;
  *(void *)uint64_t v71 = 0;
  *(void *)&v71[8] = std::pmr::get_default_resource((std::pmr *)a1);
  log = vp::get_log(*(vp **)&v71[8]);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::vx::get_log_context_info((vp::vx *)a1, &__p);
    uint64_t v9 = HIBYTE(v90);
    int v10 = SHIBYTE(v90);
    uint64_t v11 = v90;
    uint64_t v12 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (v10 >= 0) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = v11;
      }
      p_p = __p;
      if (v10 >= 0) {
        p_p = &__p;
      }
      if (v13) {
        std::string v15 = " ";
      }
      else {
        std::string v15 = "";
      }
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%s%swill create node", (uint8_t *)&buf, 0x16u);
      LOBYTE(v1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v90);
    }
    if ((v10 & 0x80) != 0) {
      operator delete(__p);
    }
  }
  if (!atomic_load((unsigned int *)(a1 + 1288)))
  {
    vp::allocate_unique_noexcept<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(&v72, (uint64_t *)(a1 + 1272), (uint64_t)&__p);
    uint64_t v18 = __p;
    std::string __p = 0;
    std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](v71, (uint64_t)v18);
    *(_OWORD *)&v71[8] = v90;
    *(void *)&v71[24] = v91;
    std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](&__p, 0);
    if (!*(void *)v71) {
      goto LABEL_20;
    }
    (*(void (**)(void **__return_ptr))(**(void **)v71 + 88))(&__p);
    if (!v92)
    {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
      std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](v71, 0);
    }
  }
  std::string v17 = *(void **)v71;
  if (*(void *)v71)
  {
LABEL_89:
    uint64_t v56 = v17[3];
    uint64_t v55 = v17[4];
    if (v55) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 127boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v56;
    uint64_t v57 = *(std::__shared_weak_count **)(a1 + 1280);
    *(void *)(a1 + 128std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v55;
    if (v57)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      std::string v17 = *(void **)v71;
    }
    atomic_store(0, (unsigned int *)(a1 + 1288));
    vp::vx::io::Object::get_log_context((uint64_t)v17 + *(void *)(*v17 - 24), &buf);
    uint64_t v58 = buf.__pn_.__r_.__value_.__r.__words[0];
    uint64_t v73 = *(void *)(a1 + 8);
    if (HIDWORD(v73) == 0xFFFFFFFF) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(void *)uint64_t v93 = &v79;
    ((void (*)(void **__return_ptr, unsigned char *, uint64_t *))off_1F149DFA8[HIDWORD(v73)])(&__p, v93, &v73);
    vp::vx::io::Object::Log_Context::set_user_info(v58, (__n128 *)&__p);
    if (SHIBYTE(v90) < 0) {
      operator delete(__p);
    }
    CFIndex size = (vp *)buf.__pn_.__r_.__value_.__l.__size_;
    if (buf.__pn_.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__pn_.__r_.__value_.__l.__size_);
    }
    goto LABEL_98;
  }
LABEL_20:
  vp::vx::DSP_Node_Factory::get_configuration((vp::vx::DSP_Node_Factory *)a1, (uint64_t)&buf);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&v81, (uint64_t)v97);
  uint64_t v19 = v81;
  unint64_t v20 = v82;
  uint64_t v81 = 0;
  unint64_t v82 = 0;
  *(void *)uint64_t v93 = v19;
  *(void *)&v93[8] = v20;
  *(void *)&v93[16] = v83;
  uint64_t v94 = v84;
  int v95 = v85;
  if (v84)
  {
    unint64_t v21 = *(void *)(v83 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v21 >= v20) {
        v21 %= v20;
      }
    }
    else
    {
      v21 &= v20 - 1;
    }
    *(void *)(v19 + 8 * v21) = &v93[16];
    uint64_t v83 = 0;
    uint64_t v84 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v81);
  if (vp::vx::detail::get_value<BOOL>(a1 + 96)) {
    block_CFIndex size = vp::vx::DSP_Node_Factory::get_block_size((vp::vx::DSP_Node_Factory *)a1);
  }
  else {
    block_CFIndex size = 1;
  }
  double sample_rate = vp::vx::DSP_Node_Factory::get_sample_rate((vp::vx::DSP_Node_Factory *)a1);
  vp::vx::dsp::Graph_Macro_Generator::generate_slice_duration_macros((vp::vx::dsp::Graph_Macro_Generator *)v93, sample_rate, block_size);
  std::string __p = &unk_1F149DD58;
  *(void *)&long long v90 = v93;
  uint64_t v91 = &__p;
  vp::vx::DSP_Node_Factory::for_each_input_format((std::pmr *)a1, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::string const&,CA::StreamDescription const&)>::~__value_func[abi:ne180100](&__p);
  std::string __p = &unk_1F149DDA0;
  *(void *)&long long v90 = v93;
  uint64_t v91 = &__p;
  vp::vx::DSP_Node_Factory::for_each_output_format((std::pmr *)a1, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::string const&,CA::StreamDescription const&)>::~__value_func[abi:ne180100](&__p);
  fft_block_CFIndex size = vp::vx::DSP_Node_Factory::get_fft_block_size((vp::vx::DSP_Node_Factory *)a1);
  if ((fft_block_size & 0xFF00000000) != 0) {
    vp::vx::dsp::Graph_Macro_Generator::generate_fft_block_size_macros((vp::vx::dsp::Graph_Macro_Generator *)v93, fft_block_size);
  }
  char v80 = 0;
  uint64_t v79 = 0;
  BOOL v25 = vp::vx::data_flow::State_Transaction::operator BOOL(a1 + 1096);
  if (v25)
  {
    uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v25);
    vp::vx::data_flow::Value::Value(&__p, default_resource);
    vp::vx::data_flow::State<void>::get_value(a1 + 1096, (vp::vx::data_flow::Value *)&__p);
    uint64_t v27 = (const void **)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&__p);
    __int16 v28 = *v27;
    vp::vx *v27 = 0;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&__p);
    if (v28)
    {
      CFRetain(v28);
      CFTypeRef cf = v28;
      vp::cf::Predicate::create(&cf, &__p);
      if (cf) {
        CFRelease(cf);
      }
      if (__p)
      {
        vp::cf::Predicate::Predicate(v77, &__p);
        vp::vx::dsp::Graph_Feature_Filter::filter_enable_audio_recorders(&v79, v77);
        vp::cf::Predicate::~Predicate((vp::cf::Predicate *)v77);
      }
      vp::cf::Predicate::~Predicate((vp::cf::Predicate *)&__p);
      CFRelease(v28);
    }
  }
  vp::vx::dsp::Graph_Builder::Graph_Builder(&__p, v72);
  vp::vx::dsp::Graph_Builder::set_graph_file_path((vp::vx::dsp::Graph_Builder *)&__p, &buf);
  int v29 = (std::__fs::filesystem::path *)v99[0];
  __int16 v30 = (std::__fs::filesystem::path *)v99[1];
  while (v29 != v30)
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    std::__fs::filesystem::__status(v29, &__ec);
    if (LOBYTE(v86[0]))
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (LOBYTE(v86[0]))
      {
        if (LOBYTE(v86[0]) != 255 && !__ec.__val_) {
          vp::vx::dsp::Graph_Builder::set_au_strip_file_path((vp::vx::dsp::Graph_Builder *)&__p, v29);
        }
      }
    }
    ++v29;
  }
  uint64_t v31 = (std::__fs::filesystem::path *)v98[0];
  uint64_t v32 = (std::__fs::filesystem::path *)v98[1];
  while (v31 != v32)
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    std::__fs::filesystem::__status(v31, &__ec);
    if (LOBYTE(v86[0]))
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (LOBYTE(v86[0]))
      {
        if (LOBYTE(v86[0]) != 255 && !__ec.__val_) {
          vp::vx::dsp::Graph_Builder::set_property_strip_file_path((vp::vx::dsp::Graph_Builder *)&__p, v31);
        }
      }
    }
    ++v31;
  }
  uint64_t v33 = (std::__fs::filesystem::path *)v100[0];
  uint64_t v34 = (std::__fs::filesystem::path *)v100[1];
  while (v33 != v34)
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    std::__fs::filesystem::__status(v33, &__ec);
    if (LOBYTE(v86[0]))
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (LOBYTE(v86[0]))
      {
        if (LOBYTE(v86[0]) != 255 && !__ec.__val_) {
          vp::vx::dsp::Graph_Builder::set_property_strip_override_file_path((vp::vx::dsp::Graph_Builder *)&__p, v33);
        }
      }
    }
    ++v33;
  }
  uint64_t v35 = (float *)v101;
  char v36 = v102;
  while (v35 != v36)
  {
    vp::vx::dsp::Graph_Builder::set_parameter((vp::vx::dsp::Graph_Builder *)&__p, *(_DWORD *)v35, v35[1]);
    v35 += 2;
  }
  uint64_t v37 = *(void *)(a1 + 1016);
  uint64_t v38 = *(void *)(a1 + 1008);
  while (v37 != v38)
    uint64_t v37 = vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(v37 - 32);
  *(void *)(a1 + 1016) = v38;
  *(void *)&__ec.__val_ = &unk_1F149DDE8;
  __ec.__cat_ = (const std::error_category *)a1;
  p_ec = &__ec;
  vp::vx::dsp::Graph_Builder::set_parameter_callback((uint64_t)&__p, (uint64_t)&__ec);
  std::__function::__value_func<applesauce::CF::NumberRef ()>::~__value_func[abi:ne180100](&__ec);
  uint64_t v39 = v103[0];
  uint64_t v40 = v103[1];
  while (v39 != v40)
  {
    int v41 = *(_DWORD *)v39;
    uint64_t v42 = *(const void **)(v39 + 8);
    if (v42) {
      CFRetain(*(CFTypeRef *)(v39 + 8));
    }
    CFTypeRef v76 = v42;
    vp::vx::dsp::Graph_Builder::set_property((uint64_t)&__p, v41, &v76);
    if (v76) {
      CFRelease(v76);
    }
    v39 += 16;
  }
  uint64_t v43 = *(void *)(a1 + 1048);
  uint64_t v44 = *(void *)(a1 + 1040);
  while (v43 != v44)
    uint64_t v43 = vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(v43 - 32);
  *(void *)(a1 + 1048) = v44;
  v86[0] = &unk_1F149DED0;
  v86[1] = a1;
  v86[3] = v86;
  vp::vx::dsp::Graph_Builder::set_property_callback((uint64_t)&__p, (uint64_t)v86);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()>::~__value_func[abi:ne180100](v86);
  vp::vx::dsp::Graph_Builder::set_should_enable_latency_compensation((uint64_t)&__p, v104);
  if (vp::vx::detail::get_value<BOOL>(a1 + 96))
  {
    int v45 = vp::vx::DSP_Node_Factory::get_block_size((vp::vx::DSP_Node_Factory *)a1);
    vp::vx::dsp::Graph_Builder::set_fixed_block_size((uint64_t)&__p, v45);
  }
  else if (a2 == 1)
  {
    int v47 = vp::vx::DSP_Node_Factory::get_block_size((vp::vx::DSP_Node_Factory *)a1);
    vp::vx::dsp::Graph_Builder::set_variable_pull_model_block_size((uint64_t)&__p, v47);
  }
  else if (!a2)
  {
    int v46 = vp::vx::DSP_Node_Factory::get_block_size((vp::vx::DSP_Node_Factory *)a1);
    vp::vx::dsp::Graph_Builder::set_variable_push_model_block_size((uint64_t)&__p, v46);
  }
  char should_enable_audio_recorders = vp::vx::DSP_Node_Factory::get_should_enable_audio_recorders((vp::vx::DSP_Node_Factory *)a1);
  vp::vx::dsp::Graph_Builder::set_should_enable_audio_recorders((uint64_t)&__p, should_enable_audio_recorders);
  char should_connect_to_AUPB = vp::vx::DSP_Node_Factory::get_should_connect_to_AUPB((vp::vx::DSP_Node_Factory *)a1);
  vp::vx::dsp::Graph_Builder::set_should_connect_to_AUPB((uint64_t)&__p, should_connect_to_AUPB);
  char should_connect_to_RPB = vp::vx::DSP_Node_Factory::get_should_connect_to_RPB((vp::vx::DSP_Node_Factory *)a1);
  vp::vx::dsp::Graph_Builder::set_should_connect_to_RPB((uint64_t)&__p, should_connect_to_RPB);
  int sample_rate_conversion_algorithm = vp::vx::DSP_Node_Factory::get_sample_rate_conversion_algorithm((vp::vx::DSP_Node_Factory *)a1);
  vp::vx::dsp::Graph_Builder::set_sample_rate_conversion_algorithm((uint64_t)&__p, sample_rate_conversion_algorithm);
  int sample_rate_conversion_quality = vp::vx::DSP_Node_Factory::get_sample_rate_conversion_quality((vp::vx::DSP_Node_Factory *)a1);
  vp::vx::dsp::Graph_Builder::set_sample_rate_conversion_quality((uint64_t)&__p, sample_rate_conversion_quality);
  vp::vx::dsp::Graph_Builder::set_tuning_resources_path((vp::vx::dsp::Graph_Builder *)&__p, (const std::__fs::filesystem::path *)(a1 + 1216));
  vp::vx::dsp::Graph_Builder::set_temporary_directory_path((vp::vx::dsp::Graph_Builder *)&__p, (const std::__fs::filesystem::path *)(a1 + 1240));
  uint64_t v73 = *(void *)(a1 + 1264);
  vp::vx::dsp::Graph_Builder::set_time((uint64_t)&__p, &v73);
  vp::vx::dsp::Graph_Builder::build((uint64_t)&__p, (const vp::vx::dsp::Graph_Macro_Generator *)v93, (std::string::size_type)&v79, &v73);
  uint64_t v53 = v73;
  uint64_t v73 = 0;
  std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](v71, v53);
  *(_OWORD *)&v71[8] = v74;
  *(void *)&v71[24] = v75;
  std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](&v73, 0);
  vp::vx::dsp::Graph_Builder::~Graph_Builder((vp::vx::dsp::Graph_Builder *)&__p);
  vp::cf::Predicate::~Predicate((vp::cf::Predicate *)&v79);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v93);
  std::string __p = v103;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v101)
  {
    unsigned int v102 = (float *)v101;
    operator delete(v101);
  }
  std::string __p = v100;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = v99;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = v98;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  CFIndex size = (vp *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v97);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  std::string v17 = *(void **)v71;
  if (*(void *)v71) {
    goto LABEL_89;
  }
LABEL_98:
  uint64_t v59 = vp::get_log(size);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v60 = (vp *)vp::vx::get_log_context_info((vp::vx *)a1, &buf);
    std::string::size_type v61 = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
    int v62 = SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
    std::string::size_type v63 = buf.__pn_.__r_.__value_.__l.__size_;
    unsigned int v64 = vp::get_log(v60);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      if (v62 >= 0) {
        std::string::size_type v65 = v61;
      }
      else {
        std::string::size_type v65 = v63;
      }
      p_std::__fs::filesystem::path buf = (std::__fs::filesystem::path *)buf.__pn_.__r_.__value_.__r.__words[0];
      if (v62 >= 0) {
        p_std::__fs::filesystem::path buf = &buf;
      }
      if (v65) {
        char v67 = " ";
      }
      else {
        char v67 = "";
      }
      *(_DWORD *)uint64_t v93 = 136315394;
      *(void *)&v93[4] = p_buf;
      *(_WORD *)&v93[12] = 2080;
      *(void *)&v93[14] = v67;
      _os_log_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_DEBUG, "%s%sdid create node", v93, 0x16u);
      LOBYTE(v6boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *((unsigned char *)&buf.__pn_.__r_.__value_.__s + 23);
    }
    if ((v62 & 0x80) != 0) {
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    }
  }
  long long v68 = *(_OWORD *)v71;
  long long v69 = *(_OWORD *)&v71[16];
  *(void *)uint64_t v71 = 0;
  *a4 = v68;
  a4[1] = v69;
  return std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](v71, 0);
}

void sub_1BB1E1C10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::DSP_Node_Factory_Provider::create_dsp_node_factory()
{
}

void vp::vx::DSP_Node_Factory_Provider::~DSP_Node_Factory_Provider(vp::vx::DSP_Node_Factory_Provider *this)
{
}

const char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<vp::vx::detail::convert_to_c_str(std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID> &>(uint64_t a1, _DWORD *a2)
{
  BOOL v2 = "hardware";
  if (*a2 == 1) {
    BOOL v2 = "echo";
  }
  if (*a2 == 2) {
    return "content";
  }
  else {
    return v2;
  }
}

const char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<vp::vx::detail::convert_to_c_str(std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID> &>(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = *a2 - 1;
  if (v2 > 2) {
    return "voice mix";
  }
  else {
    return off_1E6237A70[v2];
  }
}

void *applesauce::CF::details::pretty_print@<X0>(applesauce::CF::details *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
    applesauce::CF::convert_to<float,0>(this);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7, a2);
    uint64_t v6 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v7[0] = MEMORY[0x1E4FBA470] + 16;
    if (v8 < 0) {
      operator delete((void *)v7[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1C185D210](&v9);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "(null)");
  }
}

void sub_1BB1E1FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    if (v4 != v2)
    {
      do
        uint64_t v4 = vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(v4 - 32);
      while (v4 != v2);
      uint64_t v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    uint64_t v7 = (v6[2] - v5) >> 5;
    return (uint64_t **)std::allocator_traits<vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>>>::deallocate[abi:ne180100](v6 + 3, v5, v7);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 32 * a3, 8);
}

uint64_t vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(uint64_t a1)
{
  if (vp::vx::data_flow::State_Transaction::operator BOOL(a1))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    if (v2)
    {
      vp::vx::data_flow::State<void>::unregister_listener(a1, v2);
      *(_DWORD *)(a1 + 24) = 0;
    }
    memset(v4, 0, sizeof(v4));
    vp::vx::data_flow::State<void>::State((uint64_t)v4);
    vp::vx::data_flow::State<void>::operator=(a1, (uint64_t)v4);
    vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  }
  return vp::vx::data_flow::State<void>::~State(a1);
}

uint64_t **std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    if (v4 != v2)
    {
      do
        uint64_t v4 = vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(v4 - 32);
      while (v4 != v2);
      uint64_t v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    uint64_t v7 = (v6[2] - v5) >> 5;
    return (uint64_t **)std::allocator_traits<vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::deallocate[abi:ne180100](v6 + 3, v5, v7);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 32 * a3, 8);
}

void *boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1];
    do
    {
      --v2;
      std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>((uint64_t)a1, v3);
      v3 += 48;
    }
    while (v2);
  }
  if (a1[3]) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  return a1;
}

void std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>(uint64_t a1, uint64_t a2)
{
  vp::vx::data_flow::State<void>::~State(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void *boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,true>,std::string>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 4);
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      uint64_t v11 = (void *)(v9 + 48 * (v8 >> 1));
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, a3) & 0x80) != 0)
      {
        *a1 = (uint64_t)(v11 + 6);
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F149DD28[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISA_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISA_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  return vp::vx::data_flow::State<void>::~State(a2);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F149DD38[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISA_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISA_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  return vp::vx::data_flow::State<void>::~State(a2);
}

void *vp::allocate_unique_noexcept<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return vp::allocate_unique<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(a1, a2, a3);
}

void sub_1BB1E2568(void *a1)
{
  uint64_t v2 = (std::pmr *)__cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[1] = std::pmr::get_default_resource(v2);
  __cxa_end_catch();
}

void *vp::allocate_unique<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v4 = v7;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 16) = xmmword_1BB8716C0;
  uint64_t v5 = std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(&v7, a2);
  return std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100]((void *)a3, (uint64_t)v5);
}

void sub_1BB1E25E8(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unsigned __int8 *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)v2 + 112))(v2);
    return (void *)(*(uint64_t (**)(void, uint64_t, void, void))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

void *std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(void *a1, uint64_t *a2)
{
  unint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 64, 8);
  v6[0] = &v8;
  v6[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::construct[abi:ne180100]<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>((uint64_t)a1, v8, a2);
  char v7 = 1;
  uint64_t v4 = v8;
  std::__exception_guard_exceptions<vp::vx::dsp::Graph * std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(std::shared_ptr<vp::vx::dsp::Kernel> &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void sub_1BB1E271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::construct[abi:ne180100]<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::dsp::Graph::Graph(a2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::dsp::Graph * std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,std::shared_ptr<vp::vx::dsp::Kernel> &>(std::shared_ptr<vp::vx::dsp::Kernel> &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 64, 8);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F149DD58;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F149DD58;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEEclESQ_SU_(uint64_t a1, const void **a2, uint64_t a3)
{
}

void *std::__function::__value_func<void ()(std::string const&,CA::StreamDescription const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E0_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E0_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F149DDA0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E0_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F149DDA0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlRKT_RKT0_E0_NS_9allocatorISH_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENSI_IcEEEERKN2CA17StreamDescriptionEEEclESQ_SU_(uint64_t a1, const void **a2, uint64_t a3)
{
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E_NS_9allocatorISC_EEFN10applesauce2CF9NumberRefEjEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E_NS_9allocatorISC_EEFN10applesauce2CF9NumberRefEjEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F149DDE8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E_NS_9allocatorISC_EEFN10applesauce2CF9NumberRefEjEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F149DDE8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E_NS_9allocatorISC_EEFN10applesauce2CF9NumberRefEjEEclEOj(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  int v12 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6) {
    goto LABEL_7;
  }
  char v7 = v6;
  uint64_t v8 = *(void *)(v4 + 16);
  if (!v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_7:
    *a3 = 0;
    return;
  }
  v11[0] = v4;
  v11[1] = &v12;
  (*(void (**)(void *__return_ptr))(*(void *)v8 + 16))(v9);
  if (v10 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v13 = v11;
  ((void (*)(void **, void *))off_1F149DE20[v10])(&v13, v9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BB1E2B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZZN2vp2vx16DSP_Node_Factory8new_nodeENS9_2io5ModelENS8_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSH_EUlSH_E_EEJONS0_6__baseILNS0_6_TraitE1EJN10applesauce2CF9NumberRefENS9_9data_flow5StateISS_EEEEEEEEDcSH_DpT0_(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZZN2vp2vx16DSP_Node_Factory8new_nodeENS9_2io5ModelENS8_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSH_EUlSH_E_EEJONS0_6__baseILNS0_6_TraitE1EJN10applesauce2CF9NumberRefENS9_9data_flow5StateISS_EEEEEEEEDcSH_DpT0_@<X0>(uint64_t ***a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  vp::vx::data_flow::State<void>::State((uint64_t)v21, a2);
  uint64_t v5 = *v4;
  uint64_t v7 = (*v4)[4];
  uint64_t v6 = (std::__shared_weak_count *)(*v4)[5];
  *(void *)&long long v22 = *v4;
  *((void *)&v22 + 1) = v7;
  uint64_t v23 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = *(_DWORD *)v4[1];
  unint64_t v8 = v5[127];
  unint64_t v9 = v5[128];
  if (v8 >= v9)
  {
    uint64_t v11 = v5[126];
    uint64_t v12 = (uint64_t)(v8 - v11) >> 5;
    if ((unint64_t)(v12 + 1) >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v9 - v11;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    int v29 = v5 + 129;
    if (v15) {
      uint64_t v16 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)(v5 + 129), v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v25 = v16;
    uint64_t v26 = v16 + 32 * v12;
    uint64_t v27 = v26;
    unint64_t v28 = v16 + 32 * v15;
    _ZNSt3__116allocator_traitsIN2vp9AllocatorINS1_2vx16DSP_Node_Factory8ListenerIN10applesauce2CF9NumberRefEEEEEE9constructB8ne180100IS9_JRNS3_9data_flow5StateIS8_EEZZZZNS4_8new_nodeENS3_2io5ModelENS2_ISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSM_ENKUlSM_E_clISF_EESP_SM_EUlSM_T0_E_EvEEvRSA_PSM_DpOT0_(v26, (uint64_t)v21, &v22);
    v27 += 32;
    std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::__swap_out_circular_buffer(v5 + 126, &v25);
    uint64_t v10 = v5[127];
    std::__split_buffer<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>> &>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    _ZNSt3__116allocator_traitsIN2vp9AllocatorINS1_2vx16DSP_Node_Factory8ListenerIN10applesauce2CF9NumberRefEEEEEE9constructB8ne180100IS9_JRNS3_9data_flow5StateIS8_EEZZZZNS4_8new_nodeENS3_2io5ModelENS2_ISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSM_ENKUlSM_E_clISF_EESP_SM_EUlSM_T0_E_EvEEvRSA_PSM_DpOT0_(v5[127], (uint64_t)v21, &v22);
    uint64_t v10 = v8 + 32;
    v5[127] = v8 + 32;
  }
  v5[127] = v10;
  std::string v17 = v23;
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v17);
  vp::vx::data_flow::Value::Value(&v25, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v21, (vp::vx::data_flow::Value *)&v25);
  uint64_t v19 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v25);
  *a3 = *v19;
  *uint64_t v19 = 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v25);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v21);
}

void sub_1BB1E2CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, char a16)
{
  *(void *)(v17 + 1016) = v16;
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116allocator_traitsIN2vp9AllocatorINS1_2vx16DSP_Node_Factory8ListenerIN10applesauce2CF9NumberRefEEEEEE9constructB8ne180100IS9_JRNS3_9data_flow5StateIS8_EEZZZZNS4_8new_nodeENS3_2io5ModelENS2_ISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSM_ENKUlSM_E_clISF_EESP_SM_EUlSM_T0_E_EvEEvRSA_PSM_DpOT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  vp::vx::data_flow::State<void>::State((uint64_t)v12, a2);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v12);
  *(_DWORD *)(a1 + 24) = 0;
  if (vp::vx::data_flow::State_Transaction::operator BOOL(v5))
  {
    long long v11 = *a3;
    uint64_t v6 = *((void *)a3 + 2);
    *((void *)a3 + 1) = 0;
    *((void *)a3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    int v7 = *((_DWORD *)a3 + 6);
    unint64_t v8 = (char *)operator new(0x28uLL);
    *(void *)unint64_t v8 = &unk_1F149DE88;
    *(_OWORD *)(v8 + 8) = v11;
    *((void *)v8 + 3) = v6;
    *((_DWORD *)v8 + 8) = v7;
    void v13[3] = v8;
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v13);
    uint64_t v16 = 0;
    unint64_t v9 = operator new(0x28uLL);
    *unint64_t v9 = &unk_1F149DE40;
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v14);
    uint64_t v16 = v9;
    LODWORD(v9) = vp::vx::data_flow::State<void>::register_listener(a1, (uint64_t)v15);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100](v14);
    *(_DWORD *)(a1 + 24) = v9;
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100](v13);
  }
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB1E2E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149DE40;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149DE40;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149DE40;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1E3008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149DE40;
  return std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::NumberRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    double result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,applesauce::CF::NumberRef const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *_ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EED1Ev(void *a1)
{
  *a1 = &unk_1F149DE88;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EED0Ev(void *a1)
{
  *a1 = &unk_1F149DE88;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x28uLL);
  *(void *)double result = &unk_1F149DE88;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE7__cloneEPNS0_6__baseIST_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F149DE88;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_DWORD *)(result + 32);
  return result;
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF9NumberRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EEclEOjSS_(uint64_t a1, unsigned int *a2, CFTypeRef *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  int v5 = (void *)*a3;
  if (*a3) {
    CFRetain(*a3);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      unint64_t v9 = v8;
      uint64_t v10 = *(void *)(a1 + 16);
      if (v10)
      {
        atomic_fetch_add((atomic_uint *volatile)(v7 + 1288), 1u);
        unint64_t v11 = *(void *)(v7 + 8);
        unsigned int v12 = *(_DWORD *)(a1 + 32);
        if (v5) {
          CFRetain(v5);
        }
        uint64_t v13 = vp::vx::detail::convert_to_c_str(v11);
        int v14 = bswap32(v12);
        *(_DWORD *)((char *)&__s.__r_.__value_.__l.__data_ + 1) = v14;
        if (((char)v14 - 32) > 0x5E
          || (((__int16)v14 >> 8) - 32) > 0x5E
          || ((v14 << 8 >> 24) - 32) > 0x5E
          || ((v14 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v17, v12);
        }
        else
        {
          strcpy(&__s.__r_.__value_.__s.__data_[5], "'");
          __s.__r_.__value_.__s.__data_[0] = 39;
          std::string::basic_string[abi:ne180100]<0>(&v17, (char *)&__s);
        }
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v15 = &v17;
        }
        else {
          unint64_t v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
        }
        if (v5)
        {
          applesauce::CF::details::pretty_print((applesauce::CF::details *)v5, &__p);
          vp::vx::detail::strip(&__p, &__s);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__s, "null");
        }
        p_s = &__s;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        caulk::make_string((caulk *)"%s parameter %s override is %s", (uint64_t)&v20, v13, v15, p_s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (v5 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        std::string v17 = v20;
        memset(&v20, 0, sizeof(v20));
        char v18 = 1;
        if (HIDWORD(v11)) {
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v10 + 32))(v10, v4, &v17);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v10 + 24))(v10, v4, &v17);
        }
        if (v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!v5) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        operator delete(v20.__r_.__value_.__l.__data_);
        if (v5) {
LABEL_39:
        }
          CFRelease(v5);
      }
LABEL_40:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1BB1E3694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v25)
  {
    CFRelease(v25);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    CFRelease(v25);
  }
  else
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,applesauce::CF::NumberRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t v7 = a2[1];
  }
  else
  {
    do
    {
      vp::vx::data_flow::State<void>::State(v6 - 32, v5 - 32);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v5 - 8);
      v5 -= 32;
      uint64_t v6 = v7;
    }
    while (v5 != v4);
  }
  a2[1] = v7;
  uint64_t v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(i - 32);
  }
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 5);
  }
  return a1;
}

void *std::__function::__value_func<applesauce::CF::NumberRef ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E0_NS_9allocatorISC_EEFN10applesauce2CF13DictionaryRefEjEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E0_NS_9allocatorISC_EEFN10applesauce2CF13DictionaryRefEjEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F149DED0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E0_NS_9allocatorISC_EEFN10applesauce2CF13DictionaryRefEjEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F149DED0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvEUlT_E0_NS_9allocatorISC_EEFN10applesauce2CF13DictionaryRefEjEEclEOj(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  int v12 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v4 + 16);
  if (!v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_7:
    *a3 = 0;
    return;
  }
  v11[0] = v4;
  v11[1] = &v12;
  (*(void (**)(void *__return_ptr))(*(void *)v8 + 24))(v9);
  if (v10 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v13 = v11;
  ((void (*)(void **, void *))off_1F149DF08[v10])(&v13, v9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BB1E3AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZZN2vp2vx16DSP_Node_Factory8new_nodeENS9_2io5ModelENS8_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSH_EUlSH_E_EEJONS0_6__baseILNS0_6_TraitE1EJN10applesauce2CF13DictionaryRefENS9_9data_flow5StateISS_EEEEEEEEDcSH_DpT0_(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZZN2vp2vx16DSP_Node_Factory8new_nodeENS9_2io5ModelENS8_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSH_EUlSH_E_EEJONS0_6__baseILNS0_6_TraitE1EJN10applesauce2CF13DictionaryRefENS9_9data_flow5StateISS_EEEEEEEEDcSH_DpT0_@<X0>(uint64_t ***a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  vp::vx::data_flow::State<void>::State((uint64_t)v21, a2);
  uint64_t v5 = *v4;
  uint64_t v7 = (*v4)[4];
  uint64_t v6 = (std::__shared_weak_count *)(*v4)[5];
  *(void *)&long long v22 = *v4;
  *((void *)&v22 + 1) = v7;
  uint64_t v23 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = *(_DWORD *)v4[1];
  unint64_t v8 = v5[131];
  unint64_t v9 = v5[132];
  if (v8 >= v9)
  {
    uint64_t v11 = v5[130];
    uint64_t v12 = (uint64_t)(v8 - v11) >> 5;
    if ((unint64_t)(v12 + 1) >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v9 - v11;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    int v29 = v5 + 133;
    if (v15) {
      uint64_t v16 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)(v5 + 133), v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v25 = v16;
    uint64_t v26 = v16 + 32 * v12;
    uint64_t v27 = v26;
    unint64_t v28 = v16 + 32 * v15;
    _ZNSt3__116allocator_traitsIN2vp9AllocatorINS1_2vx16DSP_Node_Factory8ListenerIN10applesauce2CF13DictionaryRefEEEEEE9constructB8ne180100IS9_JRNS3_9data_flow5StateIS8_EEZZZZNS4_8new_nodeENS3_2io5ModelENS2_ISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSM_ENKUlSM_E_clISF_EESP_SM_EUlSM_T0_E_EvEEvRSA_PSM_DpOT0_(v26, (uint64_t)v21, &v22);
    v27 += 32;
    std::vector<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::NumberRef>>>::__swap_out_circular_buffer(v5 + 130, &v25);
    uint64_t v10 = v5[131];
    std::__split_buffer<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>> &>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    _ZNSt3__116allocator_traitsIN2vp9AllocatorINS1_2vx16DSP_Node_Factory8ListenerIN10applesauce2CF13DictionaryRefEEEEEE9constructB8ne180100IS9_JRNS3_9data_flow5StateIS8_EEZZZZNS4_8new_nodeENS3_2io5ModelENS2_ISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSM_ENKUlSM_E_clISF_EESP_SM_EUlSM_T0_E_EvEEvRSA_PSM_DpOT0_(v5[131], (uint64_t)v21, &v22);
    uint64_t v10 = v8 + 32;
    v5[131] = v8 + 32;
  }
  v5[131] = v10;
  std::string v17 = v23;
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v17);
  vp::vx::data_flow::Value::Value(&v25, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v21, (vp::vx::data_flow::Value *)&v25);
  uint64_t v19 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v25);
  *a3 = *v19;
  *uint64_t v19 = 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v25);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v21);
}

void sub_1BB1E3C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, char a16)
{
  *(void *)(v17 + 1048) = v16;
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116allocator_traitsIN2vp9AllocatorINS1_2vx16DSP_Node_Factory8ListenerIN10applesauce2CF13DictionaryRefEEEEEE9constructB8ne180100IS9_JRNS3_9data_flow5StateIS8_EEZZZZNS4_8new_nodeENS3_2io5ModelENS2_ISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSM_ENKUlSM_E_clISF_EESP_SM_EUlSM_T0_E_EvEEvRSA_PSM_DpOT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  vp::vx::data_flow::State<void>::State((uint64_t)v12, a2);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v12);
  *(_DWORD *)(a1 + 24) = 0;
  if (vp::vx::data_flow::State_Transaction::operator BOOL(v5))
  {
    long long v11 = *a3;
    uint64_t v6 = *((void *)a3 + 2);
    *((void *)a3 + 1) = 0;
    *((void *)a3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    int v7 = *((_DWORD *)a3 + 6);
    unint64_t v8 = (char *)operator new(0x28uLL);
    *(void *)unint64_t v8 = &unk_1F149DF70;
    *(_OWORD *)(v8 + 8) = v11;
    *((void *)v8 + 3) = v6;
    *((_DWORD *)v8 + 8) = v7;
    void v13[3] = v8;
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v13);
    uint64_t v16 = 0;
    unint64_t v9 = operator new(0x28uLL);
    *unint64_t v9 = &unk_1F149DF28;
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v14);
    uint64_t v16 = v9;
    LODWORD(v9) = vp::vx::data_flow::State<void>::register_listener(a1, (uint64_t)v15);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v14);
    *(_DWORD *)(a1 + 24) = v9;
    std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v13);
  }
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB1E3DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149DF28;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149DF28;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149DF28;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1E3FB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149DF28;
  return std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    double result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *_ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EED1Ev(void *a1)
{
  *a1 = &unk_1F149DF70;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EED0Ev(void *a1)
{
  *a1 = &unk_1F149DF70;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x28uLL);
  *(void *)double result = &unk_1F149DF70;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE7__cloneEPNS0_6__baseIST_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F149DF70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_DWORD *)(result + 32);
  return result;
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZZZN2vp2vx16DSP_Node_Factory8new_nodeENS3_2io5ModelENS2_9AllocatorISt4byteEEENK3__0clEvENKUlT_E0_clIjEEDaSB_ENKUlSB_E_clINS3_9data_flow5StateIN10applesauce2CF13DictionaryRefEEEEESE_SB_EUlSB_T0_E_NS_9allocatorISO_EEFvjRKSL_EEclEOjSS_(uint64_t a1, unsigned int *a2, CFTypeRef *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  CFTypeRef v5 = *a3;
  if (*a3) {
    CFRetain(*a3);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      unint64_t v9 = v8;
      uint64_t v10 = *(void *)(a1 + 16);
      if (v10)
      {
        atomic_fetch_add((atomic_uint *volatile)(v7 + 1288), 1u);
        unint64_t v11 = *(void *)(v7 + 8);
        unsigned int v12 = *(_DWORD *)(a1 + 32);
        if (v5) {
          CFRetain(v5);
        }
        uint64_t v13 = vp::vx::detail::convert_to_c_str(v11);
        int v14 = bswap32(v12);
        *(_DWORD *)((char *)&__s.__r_.__value_.__l.__data_ + 1) = v14;
        if (((char)v14 - 32) > 0x5E
          || (((__int16)v14 >> 8) - 32) > 0x5E
          || ((v14 << 8 >> 24) - 32) > 0x5E
          || ((v14 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v18, v12);
        }
        else
        {
          strcpy(&__s.__r_.__value_.__s.__data_[5], "'");
          __s.__r_.__value_.__s.__data_[0] = 39;
          std::string::basic_string[abi:ne180100]<0>(&v18, (char *)&__s);
        }
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v15 = &v18;
        }
        else {
          unint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        if (v5)
        {
          CFStringRef v16 = CFCopyDescription(v5);
          applesauce::CF::details::CFString_get_value<true>(v16, (uint64_t)&__p);
          if (v16) {
            CFRelease(v16);
          }
          vp::vx::detail::strip(&__p, &__s);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__s, "null");
        }
        p_s = &__s;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        caulk::make_string((caulk *)"%s property %s override is %s", (uint64_t)&v21, v13, v15, p_s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (v5 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        std::string v18 = v21;
        memset(&v21, 0, sizeof(v21));
        char v19 = 1;
        if (HIDWORD(v11)) {
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v10 + 32))(v10, v4, &v18);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v10 + 24))(v10, v4, &v18);
        }
        if (v19 && SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!v5) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        operator delete(v21.__r_.__value_.__l.__data_);
        if (v5) {
LABEL_41:
        }
          CFRelease(v5);
      }
LABEL_42:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1BB1E4650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v25)
  {
    CFRelease(v25);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    CFRelease(v25);
  }
  else
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__split_buffer<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>,vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>::~Listener(i - 32);
  }
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<vp::vx::DSP_Node_Factory::Listener<applesauce::CF::DictionaryRef>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 5);
  }
  return a1;
}

void *std::__function::__value_func<applesauce::CF::DictionaryRef ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void vp::vx::dsp::Graph_Builder::~Graph_Builder(vp::vx::dsp::Graph_Builder *this)
{
  std::__function::__value_func<applesauce::CF::DictionaryRef ()>::~__value_func[abi:ne180100]((void *)this + 39);
  uint64_t v3 = (void **)((char *)this + 288);
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<applesauce::CF::NumberRef ()>::~__value_func[abi:ne180100]((void *)this + 32);
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 3std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 184);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 160);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 136);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((unsigned char *)this + 128) && *((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((unsigned char *)this + 96) && *((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((unsigned char *)this + 32))
  {
    if (*((char *)this + 31) < 0) {
      operator delete(*((void **)this + 1));
    }
  }
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx16DSP_Node_Factory8new_nodeENS9_2io5ModelENS8_9AllocatorISt4byteEEENK3__0clEvEUlT_E1_EEJONS0_6__baseILNS0_6_TraitE0EJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEEEEEDcSH_DpT0_@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  double result = vp::reflect_value_name_tag<vp::vx::Uplink_DSP_Node_ID,128ul>(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeRef v5 = result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  double result = memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx16DSP_Node_Factory8new_nodeENS9_2io5ModelENS8_9AllocatorISt4byteEEENK3__0clEvEUlT_E1_EEJONS0_6__baseILNS0_6_TraitE0EJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEEEEEDcSH_DpT0_@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  double result = vp::reflect_value_name_tag<vp::vx::Downlink_DSP_Node_ID,128ul>(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeRef v5 = result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  double result = memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

char *vp::reflect_value_name_tag<vp::vx::Uplink_DSP_Node_ID,128ul>(int a1)
{
  if (a1)
  {
    uint64_t v2 = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)1,128ul>(a1);
    unint64_t v4 = v3;
    CFTypeRef v5 = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = "vp::vx::Uplink_DSP_Node_ID::Hardware]";
    unint64_t v4 = 36;
    CFTypeRef v5 = "vp::vx::Uplink_DSP_Node_ID::Hardware]";
    uint64_t v6 = 36;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  double result = "vp::vx::Uplink_DSP_Node_ID::Echo]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "vp::vx::Uplink_DSP_Node_ID::Content]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)3]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)4]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)5]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)6,128ul>((int)"vp::vx::Uplink_DSP_Node_ID::Echo]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  double result = "(vp::vx::Uplink_DSP_Node_ID)6]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)7]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)8]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)9]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)10]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)11,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)6]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  double result = "(vp::vx::Uplink_DSP_Node_ID)11]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)12]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)13]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)14]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)15]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)16,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)11]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  double result = "(vp::vx::Uplink_DSP_Node_ID)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)17]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)18]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)19]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)20]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)21,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  double result = "(vp::vx::Uplink_DSP_Node_ID)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)22]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)23]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)24]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)25]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)26,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  double result = "(vp::vx::Uplink_DSP_Node_ID)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)27]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)28]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)29]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)30]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)31,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  double result = "(vp::vx::Uplink_DSP_Node_ID)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)32]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)33]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)34]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)35]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)36,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  double result = "(vp::vx::Uplink_DSP_Node_ID)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)37]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)38]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)39]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)40]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)41,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  double result = "(vp::vx::Uplink_DSP_Node_ID)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)42]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)43]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)44]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)45]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)46,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  double result = "(vp::vx::Uplink_DSP_Node_ID)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)47]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)48]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)49]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)50]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)51,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  double result = "(vp::vx::Uplink_DSP_Node_ID)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)52]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)53]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)54]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)55]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)56,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  double result = "(vp::vx::Uplink_DSP_Node_ID)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)57]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)58]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)59]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)60]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)61,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  double result = "(vp::vx::Uplink_DSP_Node_ID)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)62]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)63]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)64]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)65]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)66,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  double result = "(vp::vx::Uplink_DSP_Node_ID)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)67]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)68]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)69]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)70]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)71,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  double result = "(vp::vx::Uplink_DSP_Node_ID)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)72]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)73]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)74]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)75]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)76,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  double result = "(vp::vx::Uplink_DSP_Node_ID)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)77]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)78]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)79]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)80]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)81,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  double result = "(vp::vx::Uplink_DSP_Node_ID)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)82]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)83]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)84]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)85]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)86,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  double result = "(vp::vx::Uplink_DSP_Node_ID)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)87]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)88]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)89]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)90]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)91,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  double result = "(vp::vx::Uplink_DSP_Node_ID)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)92]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)93]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)94]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)95]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)96,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  double result = "(vp::vx::Uplink_DSP_Node_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)97]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)98]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)99]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)100]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)101,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  double result = "(vp::vx::Uplink_DSP_Node_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)102]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)103]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)104]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)105]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)106,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  double result = "(vp::vx::Uplink_DSP_Node_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)107]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)108]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)109]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)110]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)111,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  double result = "(vp::vx::Uplink_DSP_Node_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)112]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)113]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)114]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)115]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)116,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  double result = "(vp::vx::Uplink_DSP_Node_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)117]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)118]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)119]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)120]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)121,128ul>((int)"(vp::vx::Uplink_DSP_Node_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Uplink_DSP_Node_ID)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  double result = "(vp::vx::Uplink_DSP_Node_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Uplink_DSP_Node_ID)122]";
      break;
    case 2:
      double result = "(vp::vx::Uplink_DSP_Node_ID)123]";
      break;
    case 3:
      double result = "(vp::vx::Uplink_DSP_Node_ID)124]";
      break;
    case 4:
      double result = "(vp::vx::Uplink_DSP_Node_ID)125]";
      break;
    case 5:
      double result = "(vp::vx::Uplink_DSP_Node_ID)126]";
      break;
    case 6:
      double result = "(vp::vx::Uplink_DSP_Node_ID)127]";
      break;
    default:
      if ("(vp::vx::Uplink_DSP_Node_ID)121]" == 128) {
        double result = "(vp::vx::Uplink_DSP_Node_ID)128]";
      }
      else {
        double result = "?";
      }
      break;
  }
  return result;
}

char *vp::reflect_value_name_tag<vp::vx::Downlink_DSP_Node_ID,128ul>(int a1)
{
  if (a1)
  {
    uint64_t v2 = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)1,128ul>(a1);
    unint64_t v4 = v3;
    CFTypeRef v5 = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = "vp::vx::Downlink_DSP_Node_ID::Voice_Mix]";
    unint64_t v4 = 39;
    CFTypeRef v5 = "vp::vx::Downlink_DSP_Node_ID::Voice_Mix]";
    uint64_t v6 = 39;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  double result = "vp::vx::Downlink_DSP_Node_ID::Voice]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "vp::vx::Downlink_DSP_Node_ID::Dynamics]";
      break;
    case 2:
      double result = "vp::vx::Downlink_DSP_Node_ID::Hardware]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)4]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)5]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)6,128ul>((int)"vp::vx::Downlink_DSP_Node_ID::Voice]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  double result = "(vp::vx::Downlink_DSP_Node_ID)6]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)7]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)8]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)9]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)10]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)11,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)6]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  double result = "(vp::vx::Downlink_DSP_Node_ID)11]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)12]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)13]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)14]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)15]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)16,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)11]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  double result = "(vp::vx::Downlink_DSP_Node_ID)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)17]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)18]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)19]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)20]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)21,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  double result = "(vp::vx::Downlink_DSP_Node_ID)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)22]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)23]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)24]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)25]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)26,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  double result = "(vp::vx::Downlink_DSP_Node_ID)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)27]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)28]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)29]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)30]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)31,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  double result = "(vp::vx::Downlink_DSP_Node_ID)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)32]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)33]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)34]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)35]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)36,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  double result = "(vp::vx::Downlink_DSP_Node_ID)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)37]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)38]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)39]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)40]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)41,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  double result = "(vp::vx::Downlink_DSP_Node_ID)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)42]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)43]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)44]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)45]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)46,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  double result = "(vp::vx::Downlink_DSP_Node_ID)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)47]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)48]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)49]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)50]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)51,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  double result = "(vp::vx::Downlink_DSP_Node_ID)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)52]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)53]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)54]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)55]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)56,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  double result = "(vp::vx::Downlink_DSP_Node_ID)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)57]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)58]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)59]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)60]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)61,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  double result = "(vp::vx::Downlink_DSP_Node_ID)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)62]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)63]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)64]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)65]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)66,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  double result = "(vp::vx::Downlink_DSP_Node_ID)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)67]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)68]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)69]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)70]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)71,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  double result = "(vp::vx::Downlink_DSP_Node_ID)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)72]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)73]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)74]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)75]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)76,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  double result = "(vp::vx::Downlink_DSP_Node_ID)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)77]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)78]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)79]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)80]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)81,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  double result = "(vp::vx::Downlink_DSP_Node_ID)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)82]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)83]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)84]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)85]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)86,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  double result = "(vp::vx::Downlink_DSP_Node_ID)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)87]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)88]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)89]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)90]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)91,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  double result = "(vp::vx::Downlink_DSP_Node_ID)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)92]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)93]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)94]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)95]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)96,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  double result = "(vp::vx::Downlink_DSP_Node_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)97]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)98]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)99]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)100]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)101,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  double result = "(vp::vx::Downlink_DSP_Node_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)102]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)103]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)104]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)105]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)106,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  double result = "(vp::vx::Downlink_DSP_Node_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)107]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)108]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)109]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)110]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)111,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  double result = "(vp::vx::Downlink_DSP_Node_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)112]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)113]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)114]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)115]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)116,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  double result = "(vp::vx::Downlink_DSP_Node_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)117]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)118]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)119]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)120]";
      break;
    default:
      double result = vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)121,128ul>((int)"(vp::vx::Downlink_DSP_Node_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Downlink_DSP_Node_ID)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  double result = "(vp::vx::Downlink_DSP_Node_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      double result = "(vp::vx::Downlink_DSP_Node_ID)122]";
      break;
    case 2:
      double result = "(vp::vx::Downlink_DSP_Node_ID)123]";
      break;
    case 3:
      double result = "(vp::vx::Downlink_DSP_Node_ID)124]";
      break;
    case 4:
      double result = "(vp::vx::Downlink_DSP_Node_ID)125]";
      break;
    case 5:
      double result = "(vp::vx::Downlink_DSP_Node_ID)126]";
      break;
    case 6:
      double result = "(vp::vx::Downlink_DSP_Node_ID)127]";
      break;
    default:
      if ("(vp::vx::Downlink_DSP_Node_ID)121]" == 128) {
        double result = "(vp::vx::Downlink_DSP_Node_ID)128]";
      }
      else {
        double result = "?";
      }
      break;
  }
  return result;
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx20get_log_context_infoEPKNS9_16DSP_Node_FactoryEENK3__0clEvEUlT_E_EEJONS0_6__baseILNS0_6_TraitE0EJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEEEEEDcSE_DpT0_(uint64_t a1, int *a2)
{
  return vp::reflect_value_name_tag<vp::vx::Uplink_DSP_Node_ID,128ul>(*a2);
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx20get_log_context_infoEPKNS9_16DSP_Node_FactoryEENK3__0clEvEUlT_E_EEJONS0_6__baseILNS0_6_TraitE0EJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEEEEEDcSE_DpT0_(uint64_t a1, int *a2)
{
  return vp::reflect_value_name_tag<vp::vx::Downlink_DSP_Node_ID,128ul>(*a2);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 192, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 192, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

std::string *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::copy_value(uint64_t a1, std::string **a2, long long **a3)
{
  return vp::vx::DSP_Node_Configuration::DSP_Node_Configuration(*a2, *a3);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::move_value(uint64_t a1, uint64_t *a2, long long **a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Configuration*>(*a2, *a3);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::destroy_value(uint64_t a1, uint64_t *a2)
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration>::compare_value(uint64_t a1, std::__fs::filesystem::path::__string_view a2)
{
  uint64_t v2 = *(const std::__fs::filesystem::path **)a2.__data_;
  a2.__data_ = *(const std::string_view::value_type **)a2.__size_;
  return vp::vx::DSP_Node_Configuration::operator==(v2, a2);
}

void std::__destroy_at[abi:ne180100]<vp::vx::DSP_Node_Configuration,0>(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 160);
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void **)(a1 + 112);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)(a1 + 88);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)(a1 + 64);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t vp::vx::DSP_Node_Configuration::operator==(const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  data = a2.__data_;
  uint64_t result = std::__fs::filesystem::operator==[abi:ne180100](a1, a2);
  if (result)
  {
    uint64_t result = std::operator==[abi:ne180100]<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>((uint64_t)&a1[1], (void *)data + 3);
    if (result)
    {
      uint64_t v6 = (const std::__fs::filesystem::path *)a1[2].__pn_.__r_.__value_.__r.__words[2];
      int v7 = (const std::__fs::filesystem::path *)a1[3].__pn_.__r_.__value_.__l.__data_;
      unint64_t v8 = (const std::string_view::value_type *)*((void *)data + 8);
      if ((char *)v7 - (char *)v6 != *((void *)data + 9) - (void)v8) {
        return 0;
      }
      while (v6 != v7)
      {
        v5.__data_ = v8;
        uint64_t result = std::__fs::filesystem::operator==[abi:ne180100](v6, v5);
        if (!result) {
          return result;
        }
        ++v6;
        v8 += 24;
      }
      unint64_t v9 = (const std::__fs::filesystem::path *)a1[3].__pn_.__r_.__value_.__r.__words[2];
      uint64_t v10 = (const std::__fs::filesystem::path *)a1[4].__pn_.__r_.__value_.__l.__data_;
      unint64_t v11 = (const std::string_view::value_type *)*((void *)data + 11);
      if ((char *)v10 - (char *)v9 != *((void *)data + 12) - (void)v11) {
        return 0;
      }
      while (v9 != v10)
      {
        v5.__data_ = v11;
        uint64_t result = std::__fs::filesystem::operator==[abi:ne180100](v9, v5);
        if (!result) {
          return result;
        }
        ++v9;
        v11 += 24;
      }
      unsigned int v12 = (const std::__fs::filesystem::path *)a1[4].__pn_.__r_.__value_.__r.__words[2];
      uint64_t v13 = (const std::__fs::filesystem::path *)a1[5].__pn_.__r_.__value_.__l.__data_;
      int v14 = (const std::string_view::value_type *)*((void *)data + 14);
      if ((char *)v13 - (char *)v12 != *((void *)data + 15) - (void)v14) {
        return 0;
      }
      while (v12 != v13)
      {
        v5.__data_ = v14;
        uint64_t result = std::__fs::filesystem::operator==[abi:ne180100](v12, v5);
        if (!result) {
          return result;
        }
        ++v12;
        v14 += 24;
      }
      std::string::size_type v16 = a1[5].__pn_.__r_.__value_.__r.__words[2];
      std::string::pointer v15 = a1[6].__pn_.__r_.__value_.__l.__data_;
      uint64_t v17 = *((void *)data + 17);
      if (&v15[-v16] == (std::string::pointer)(*((void *)data + 18) - v17))
      {
        while ((std::string::pointer)v16 != v15)
        {
          if (*(_DWORD *)v16 != *(_DWORD *)v17 || *(float *)(v16 + 4) != *(float *)(v17 + 4)) {
            return 0;
          }
          v16 += 8;
          v17 += 8;
        }
        uint64_t result = std::operator==[abi:ne180100]<std::tuple<unsigned int,applesauce::CF::DictionaryRef>,std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t *)&a1[6].__pn_.__r_.__value_.__r.__words[2], (uint64_t *)data + 20);
        if (result) {
          return a1[7].__pn_.__r_.__value_.__s.__data_[16] == *((unsigned __int8 *)data + 184);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  do
  {
    unint64_t v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result) {
      break;
    }
    uint64_t v6 = result;
    uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v8 = v2[3];
    }
    uint64_t v9 = *(unsigned __int8 *)(result + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(result + 24);
    }
    if (v8 != v9) {
      return 0;
    }
    if (v10 >= 0) {
      unint64_t v11 = (unsigned __int8 *)(result + 16);
    }
    else {
      unint64_t v11 = *(unsigned __int8 **)(result + 16);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        unint64_t v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    uint64_t v12 = *((unsigned __int8 *)v2 + 63);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *((unsigned __int8 *)v2 + 63);
    }
    else {
      uint64_t v13 = v2[6];
    }
    uint64_t v14 = *(unsigned __int8 *)(v6 + 63);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v6 + 48);
    }
    if (v13 != v14) {
      return 0;
    }
    std::string::size_type v16 = (const void **)(v2 + 5);
    char v19 = *(unsigned __int8 **)(v6 + 40);
    std::string v18 = (unsigned __int8 *)(v6 + 40);
    uint64_t v17 = v19;
    if (v15 >= 0) {
      std::string v20 = v18;
    }
    else {
      std::string v20 = v17;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*v16, v20, v2[6])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 63))
    {
      while (*(unsigned __int8 *)v16 == *v20)
      {
        std::string::size_type v16 = (const void **)((char *)v16 + 1);
        ++v20;
        if (!--v12) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    uint64_t v2 = (uint64_t *)*v2;
    uint64_t result = 1;
  }
  while (v2);
  return result;
}

BOOL std::operator==[abi:ne180100]<std::tuple<unsigned int,applesauce::CF::DictionaryRef>,std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<unsigned int,applesauce::CF::DictionaryRef>,std::tuple<unsigned int,applesauce::CF::DictionaryRef>>((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

BOOL std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<unsigned int,applesauce::CF::DictionaryRef>,std::tuple<unsigned int,applesauce::CF::DictionaryRef>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a3 + 8);
  BOOL result = (v3 | v4) == 0;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return CFEqual((CFTypeRef)v3, (CFTypeRef)v4) != 0;
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  *unint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  unint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E040;
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E040;
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149E040;
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1E6DF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E040;
  return std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>::register_listener(std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    BOOL result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E088;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E088;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E088;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E088;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_uplink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::operator()(void *a1, unsigned int *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint8x8_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        double v10 = vp::utility::exception_filter_all_noexcept<void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1} const&,vp::vx::DSP_Node_Configuration const&>(a1 + 3, a3, (uint64_t)__p);
        (*(void (**)(uint64_t, uint64_t, void **, double))(*(void *)v9 + 24))(v9, v6, __p, v10);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

double vp::utility::exception_filter_all_noexcept<void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1} const&,vp::vx::DSP_Node_Configuration const&>@<D0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  atomic_fetch_add((atomic_uint *volatile)(a1[1] + 1288), 1u);
  v27[0] = 0;
  unint64_t v28 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::__fs::filesystem::path const&,std::__fs::filesystem::path,0>((uint64_t)v25, (uint64_t)a2);
  uint64_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v27, ".dspg");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  char v7 = *(unsigned char *)v6;
  *(unsigned char *)uint64_t v6 = v25[0];
  v25[0] = v7;
  unint64_t v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v26;
  uint64_t v26 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  uint64_t v9 = a2[8];
  uint64_t v10 = a2[9];
  unint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v27, ".propstrip");
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__fs::filesystem::path const*,std::__fs::filesystem::path const*,std::back_insert_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)__p, v9, v10, (uint64_t)v11);
  uint64_t v12 = a2[11];
  uint64_t v13 = a2[12];
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v27, ".austrip");
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__fs::filesystem::path const*,std::__fs::filesystem::path const*,std::back_insert_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)__p, v12, v13, (uint64_t)v14);
  uint64_t v16 = a2[14];
  uint64_t v15 = a2[15];
  uint64_t v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v27, ".propstrip (override)");
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__fs::filesystem::path const*,std::__fs::filesystem::path const*,std::back_insert_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)__p, v16, v15, (uint64_t)v17);
  uint64_t v18 = vp::vx::detail::convert_to_c_str(*a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v27, -1, 0x20u, 0, 0, __p);
  if (v24 >= 0) {
    char v19 = __p;
  }
  else {
    char v19 = (void **)__p[0];
  }
  caulk::make_string((caulk *)"%s configuration is %s", (uint64_t)&v21, v18, v19);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  double result = *(double *)&v21;
  *(_OWORD *)a3 = v21;
  *(void *)(a3 + 16) = v22;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

void sub_1BB1E7428(void *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3 - 64);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2, *(unsigned __int8 *)(v3 - 64));
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BB1E7410);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::__fs::filesystem::path const&,std::__fs::filesystem::path,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::__fs::filesystem::path const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::__fs::filesystem::path const&>(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_1BB1E7524(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__fs::filesystem::path const*,std::__fs::filesystem::path const*,std::back_insert_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::__fs::filesystem::path const&,std::__fs::filesystem::path,0>((uint64_t)v8, v5);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a4, (uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
      v5 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1BB1E75C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *std::__function::__value_func<void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E0D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E0D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E0D0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E0D0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1},std::allocator<void vp::vx::observe_downlink<vp::vx::DSP_Node_Configuration,void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(unsigned int,vp::vx::DSP_Node_Configuration const&)#1}>,void ()(unsigned int,vp::vx::DSP_Node_Configuration const&)>::operator()(void *a1, unsigned int *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        double v10 = vp::utility::exception_filter_all_noexcept<void vp::vx::DSP_Node_Factory::listen<vp::vx::DSP_Node_Configuration,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0>(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration> &,vp::vx::DSP_Node_Factory::set_configuration(vp::vx::data_flow::State<vp::vx::DSP_Node_Configuration>)::$_0)::{lambda(vp::vx::DSP_Node_Configuration const&)#1} const&,vp::vx::DSP_Node_Configuration const&>(a1 + 3, a3, (uint64_t)__p);
        (*(void (**)(uint64_t, uint64_t, void **, double))(*(void *)v9 + 32))(v9, v6, __p, v10);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E118;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E118;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E118;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E118;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s I/O block size is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E7B50(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E160;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E160;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E160;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E160;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s I/O block size is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E7DF4(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E1A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E1A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E1A8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E1A8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        char v12 = "fixed";
        if (!v10) {
          char v12 = "variable";
        }
        caulk::make_string((caulk *)"%s I/O block size is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E80B0(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E1F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E1F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E1F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E1F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_block_size_is_fixed(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        char v12 = "fixed";
        if (!v10) {
          char v12 = "variable";
        }
        caulk::make_string((caulk *)"%s I/O block size is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E836C(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E238;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E238;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E238;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E238;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s FFT block size is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E8610(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E280;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E280;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E280;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E280;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_fft_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s FFT block size is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E88B4(void *a1)
{
}

uint64_t std::__function::__value_func<void ()(unsigned int,double const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E2C8;
  std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E2C8;
  std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149E2C8;
  std::__function::__value_func<void ()(unsigned int,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1E8A48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E2C8;
  return std::__function::__value_func<void ()(unsigned int,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<double>::register_listener(std::function<void ()(unsigned int,double const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    __n128 result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,double const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,double const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E310;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E310;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E310;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E310;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_uplink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::operator()(void *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s I/O sample rate is %f", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E8ECC(void *a1)
{
}

void *std::__function::__value_func<void ()(unsigned int,double const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E358;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E358;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E358;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E358;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1},std::allocator<void vp::vx::observe_downlink<double,void vp::vx::DSP_Node_Factory::listen<double,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0>(vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(double const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<double> &,vp::vx::DSP_Node_Factory::set_sample_rate(vp::vx::data_flow::State<double>)::$_0)::{lambda(unsigned int,double const&)#1}>,void ()(unsigned int,double const&)>::operator()(void *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s I/O sample rate is %f", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E9200(void *a1)
{
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E3A0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E3A0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F149E3A0;
  std::__compressed_pair_elem<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BB1E9344(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E3A0;
  return std::__compressed_pair_elem<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(void *a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[7] + 1288), 1u);
        uint64_t v10 = vp::vx::detail::convert_to_c_str(a1[6]);
        char v14 = (void *)a1[3];
        char v13 = a1 + 3;
        char v12 = v14;
        if (*((char *)v13 + 23) < 0) {
          char v13 = v12;
        }
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v11);
        if (v17 >= 0) {
          char v15 = __p;
        }
        else {
          char v15 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"%s input '%s' format is %s", (uint64_t)&v19, v10, v13, v15);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v19;
        uint64_t v17 = v20;
        char v18 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v18)
        {
          if (SHIBYTE(v17) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E9508(void *a1)
{
}

void *std::__compressed_pair_elem<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = *(void *)(a2 + 40);
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_1BB1E959C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E3E8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E3E8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F149E3E8;
  std::__compressed_pair_elem<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BB1E9734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E3E8;
  return std::__compressed_pair_elem<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(void *a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    char v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[7] + 1288), 1u);
        uint64_t v10 = vp::vx::detail::convert_to_c_str(a1[6]);
        char v14 = (void *)a1[3];
        char v13 = a1 + 3;
        char v12 = v14;
        if (*((char *)v13 + 23) < 0) {
          char v13 = v12;
        }
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v11);
        if (v17 >= 0) {
          char v15 = __p;
        }
        else {
          char v15 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"%s input '%s' format is %s", (uint64_t)&v19, v10, v13, v15);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v19;
        uint64_t v17 = v20;
        char v18 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v18)
        {
          if (SHIBYTE(v17) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1E98F8(void *a1)
{
}

void *std::__compressed_pair_elem<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = *(void *)(a2 + 40);
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_1BB1E998C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

double boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::insert_or_assign<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>@<D0>(void *a1@<X0>, void ***a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 0;
  char v18 = 0;
  if (*a2)
  {
    uint64_t v17 = *a2;
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v17, a3, &v18);
  }
  else
  {
    uint64_t v10 = (long long *)a1[1];
    uint64_t v11 = a1[2];
    uint64_t v20 = v10;
    if (v10) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v11 == 0;
    }
    if (!v12) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    long long v19 = &v10[3 * v11];
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v20, (uint64_t *)&v19, a3, &v18);
  }
  *(unsigned char *)(a5 + 8) = inserted;
  if (inserted)
  {
    uint64_t v16 = (long long *)v18;
    boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::emplace<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(a1, &v16, (long long *)a3, a4, &v20);
    *(void *)a5 = v20;
  }
  else
  {
    uint64_t v14 = a1[1];
    if (a1[2] < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v14) >> 4)) {
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    }
    uint64_t v15 = v14 + 16 * (((uint64_t)v18 - v14) >> 4);
    *(void *)a5 = v15;
    *(void *)&double result = vp::vx::data_flow::State<void>::operator=(v15 + 24, a4).n128_u64[0];
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_insert_unique_prepare(uint64_t a1, void ***a2, void **a3, void ***a4)
{
  int v5 = *(void ***)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v11 = &v5[6 * v4];
  BOOL v12 = *a2;
  if (v12 != v11)
  {
    if (!v12) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v12) & 0x80) == 0)
    {
      char v13 = *a2;
      long long v19 = v11;
      uint64_t v20 = v13;
      uint64_t v14 = (uint64_t *)&v20;
      uint64_t v15 = (uint64_t *)&v19;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
    }
    int v5 = *(void ***)(a1 + 8);
    uint64_t v11 = *a2;
  }
  *a4 = v11;
  uint64_t v17 = *a2;
  if (*a2 == v5) {
    return 1;
  }
  if (!v17) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  char v18 = v17 - 6;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17 - 6, a3) & 0x80) != 0) {
    return 1;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v18) & 0x80) != 0)
  {
    long long v21 = v18;
    uint64_t v22 = v5;
    uint64_t v14 = (uint64_t *)&v22;
    uint64_t v15 = (uint64_t *)&v21;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
  }
  BOOL result = 0;
  *a4 = v18;
  return result;
}

void boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::emplace<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(void *a1@<X0>, long long **a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, long long **a5@<X8>)
{
  BOOL v6 = *a2;
  unint64_t v7 = a1[1];
  if (v7 > (unint64_t)v6) {
    goto LABEL_11;
  }
  unint64_t v9 = a1[2];
  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v6 > v7 + 48 * v9) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v11 = a1[3];
  if (v11 < v9) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v11 == v9)
  {
    boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>(a1, v6, (const char *)1, a4, a3, a5);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>(a1, (std::string *)v6, 1, a4, a3);
    *a5 = *a2;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4, void ***a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::small_vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,8ul,vp::Allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,true>,std::string>(&v12, &v11, a4, &v13);
  unint64_t v9 = v13;
  *a5 = v13;
  if (v9 == (void **)*a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, v9) & 0x80u) != 0;
}

void boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>(void *a1, std::string *this, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[2];
  if (v5 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v10 = a1[1];
  uint64_t v11 = (std::string *)(v10 + 48 * v5);
  if (v11 == this)
  {
    boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::pair<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(this, a5, a4);
    ++a1[2];
  }
  else
  {
    uint64_t v12 = v11 - 2;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v11[-2].__r_.__value_.__l.__data_;
    v11->__r_.__value_.__r.__words[2] = v11[-2].__r_.__value_.__r.__words[2];
    v11[-2].__r_.__value_.__l.__size_ = 0;
    v11[-2].__r_.__value_.__r.__words[2] = 0;
    v11[-2].__r_.__value_.__r.__words[0] = 0;
    vp::vx::data_flow::State<void>::State(v10 + 48 * v5 + 24, (uint64_t)&v11[-1]);
    ++a1[2];
    for (; v12 != this; v12 -= 2)
      boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::operator=((uint64_t)v12, (long long *)&v12[-2]);
    boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::pair<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(&v13, a5, a4);
    boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::operator=((uint64_t)this, (long long *)&v13);
    std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>((uint64_t)a1, (uint64_t)&v13);
  }
}

std::string *boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>@<X0>(void *a1@<X0>, long long *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = a1[1];
  unint64_t v13 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::cf::Notification_Center::Listener>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v13 >= 0x555555555555556) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v14);
  }
  uint64_t v15 = v13;
  uint64_t v16 = (std::string *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::cf::Notification_Center::Listener>>::allocate[abi:ne180100]((uint64_t)a1, v13);
  BOOL result = boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>(a1, v16, v15, a2, (uint64_t)a3, a4, a5);
  *a6 = (char *)a2 + a1[1] - v12;
  return result;
}

std::string *boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::pair<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&this[1], a3);
  return this;
}

uint64_t boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  vp::vx::data_flow::State<void>::operator=(a1 + 24, (uint64_t)a2 + 24);
  return a1;
}

std::string *boost::container::vector<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>(void *a1, std::string *this, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, long long *a7)
{
  uint64_t v11 = (long long *)a1[1];
  BOOL result = boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>((int)a1, v11, a4, &v11[3 * a1[2]], this, a5, a6, a7);
  if (v11)
  {
    for (uint64_t i = a1[2]; i; v11 += 3)
    {
      --i;
      std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>>((uint64_t)a1, (uint64_t)v11);
    }
    BOOL result = (std::string *)boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v14 = a1[2] + a5;
  a1[1] = this;
  a1[2] = v14;
  a1[3] = a3;
  return result;
}

void sub_1BB1EA15C(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>*,std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>>(int a1, long long *a2, long long *a3, long long *a4, std::string *this, uint64_t a6, uint64_t a7, long long *a8)
{
  uint64_t v12 = a3;
  unint64_t v13 = this;
  if (a2 != a3)
  {
    uint64_t v14 = a2;
    unint64_t v13 = this;
    do
    {
      long long v15 = *v14;
      v13->__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
      *(void *)uint64_t v14 = 0;
      vp::vx::data_flow::State<void>::State((uint64_t)&v13[1], (uint64_t)v14 + 24);
      v14 += 3;
      v13 += 2;
    }
    while (v14 != v12);
  }
  if (a6 != 1) {
    __assert_rtn("priv_uninitialized_copy_some_and_update", "advanced_insert_int.hpp", 265, "n == 1");
  }
  BOOL result = boost::container::dtl::pair<std::string,vp::vx::data_flow::State<CA::StreamDescription>>::pair<std::string const&,vp::vx::data_flow::State<CA::StreamDescription>>(v13, a8, a7);
  if (v12 != a4)
  {
    BOOL result = v13 + 3;
    do
    {
      long long v17 = *v12;
      result[-1].__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&result[-1].__r_.__value_.__l.__data_ = v17;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
      *(void *)uint64_t v12 = 0;
      vp::vx::data_flow::State<void>::State((uint64_t)result, (uint64_t)v12 + 24);
      v12 += 3;
      BOOL result = v18 + 2;
    }
    while (v12 != a4);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E430;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E430;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F149E430;
  std::__compressed_pair_elem<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BB1EA3EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E430;
  return std::__compressed_pair_elem<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(void *a1, unsigned int *a2, CA::StreamDescription *a3)
{
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[7] + 1288), 1u);
        uint64_t v10 = vp::vx::detail::convert_to_c_str(a1[6]);
        uint64_t v14 = (void *)a1[3];
        unint64_t v13 = a1 + 3;
        uint64_t v12 = v14;
        if (*((char *)v13 + 23) < 0) {
          unint64_t v13 = v12;
        }
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v11);
        if (v17 >= 0) {
          long long v15 = __p;
        }
        else {
          long long v15 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"%s output '%s' format is %s", (uint64_t)&v19, v10, v13, v15);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v19;
        uint64_t v17 = v20;
        char v18 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v18)
        {
          if (SHIBYTE(v17) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EA5B0(void *a1)
{
}

void *std::__compressed_pair_elem<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = *(void *)(a2 + 40);
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_1BB1EA644(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E478;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F149E478;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F149E478;
  std::__compressed_pair_elem<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BB1EA788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E478;
  return std::__compressed_pair_elem<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_input_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(void *a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[7] + 1288), 1u);
        uint64_t v10 = vp::vx::detail::convert_to_c_str(a1[6]);
        uint64_t v14 = (void *)a1[3];
        unint64_t v13 = a1 + 3;
        uint64_t v12 = v14;
        if (*((char *)v13 + 23) < 0) {
          unint64_t v13 = v12;
        }
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v11);
        if (v17 >= 0) {
          long long v15 = __p;
        }
        else {
          long long v15 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"%s output '%s' format is %s", (uint64_t)&v19, v10, v13, v15);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v19;
        uint64_t v17 = v20;
        char v18 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v18)
        {
          if (SHIBYTE(v17) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EA94C(void *a1)
{
}

void *std::__compressed_pair_elem<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void vp::vx::observe_downlink<CA::StreamDescription,void vp::vx::DSP_Node_Factory::listen<CA::StreamDescription,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(CA::StreamDescription const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::DSP_Node_Factory::set_output_format(std::string const&,vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1} const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = *(void *)(a2 + 40);
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_1BB1EA9E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E4C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E4C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E4C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E4C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        uint64_t v12 = "enabled";
        if (!v10) {
          uint64_t v12 = "disabled";
        }
        caulk::make_string((caulk *)"%s audio recorders are %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EAC9C(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E508;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E508;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E508;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E508;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        uint64_t v12 = "enabled";
        if (!v10) {
          uint64_t v12 = "disabled";
        }
        caulk::make_string((caulk *)"%s audio recorders are %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EAF58(void *a1)
{
}

uint64_t std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E550;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E550;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149E550;
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1EB0EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E550;
  return std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::StringRef>::register_listener(std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    __n128 result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,applesauce::CF::StringRef const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E598;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E598;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::__clone(void *a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149E598;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149E598;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_uplink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::operator()(void *a1, unsigned int *a2, CFTypeRef *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        double v10 = vp::utility::exception_filter_all_noexcept<vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0 const&,applesauce::CF::StringRef const&>(a1 + 3, a3, (uint64_t)__p);
        (*(void (**)(uint64_t, uint64_t, void **, double))(*(void *)v9 + 24))(v9, v6, __p, v10);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

double vp::utility::exception_filter_all_noexcept<vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0 const&,applesauce::CF::StringRef const&>@<D0>(unint64_t *a1@<X0>, CFTypeRef *a2@<X1>, uint64_t a3@<X8>)
{
  CFStringRef v5 = (const __CFString *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v6 = vp::vx::detail::convert_to_c_str(*a1);
  uint64_t v7 = v6;
  if (v5)
  {
    applesauce::CF::convert_to<std::string,0>(v5, (uint64_t)__p);
    if (v13 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    caulk::make_string((caulk *)"%s audio recorders predicate is '%s'", (uint64_t)&v10, v7, v8);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 16) = v11;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    *(unsigned char *)(a3 + 24) = 1;
    CFRelease(v5);
  }
  else
  {
    caulk::make_string((caulk *)"%s audio recorders predicate is undefined", (uint64_t)&v10, v6);
    double result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 16) = v11;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

void sub_1BB1EB63C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  *uint64_t v4 = 0;
  v4[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BB1EB620);
}

void *std::__function::__value_func<void ()(unsigned int,applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E5E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E5E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::__clone(void *a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F149E5E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F149E5E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1},std::allocator<void vp::vx::observe_downlink<applesauce::CF::StringRef,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<applesauce::CF::StringRef> &,vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0)::{lambda(unsigned int,applesauce::CF::StringRef const&)#1}>,void ()(unsigned int,applesauce::CF::StringRef const&)>::operator()(void *a1, unsigned int *a2, CFTypeRef *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        double v10 = vp::utility::exception_filter_all_noexcept<vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(vp::vx::data_flow::State<applesauce::CF::StringRef>)::$_0 const&,applesauce::CF::StringRef const&>(a1 + 3, a3, (uint64_t)__p);
        (*(void (**)(uint64_t, uint64_t, void **, double))(*(void *)v9 + 32))(v9, v6, __p, v10);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E628;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E628;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E628;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E628;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        char v12 = "connected";
        if (!v10) {
          char v12 = "disconnected";
        }
        caulk::make_string((caulk *)"%s AUPB is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EBBF4(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E670;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E670;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E670;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E670;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        char v12 = "connected";
        if (!v10) {
          char v12 = "disconnected";
        }
        caulk::make_string((caulk *)"%s AUPB is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EBEB0(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E6B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E6B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E6B8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E6B8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        char v12 = "connected";
        if (!v10) {
          char v12 = "disconnected";
        }
        caulk::make_string((caulk *)"%s RPB is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EC16C(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E700;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E700;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E700;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E700;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_downlink<BOOL,void vp::vx::DSP_Node_Factory::listen<BOOL,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0>(vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(BOOL const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(vp::vx::data_flow::State<BOOL>)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        int v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        char v12 = "connected";
        if (!v10) {
          char v12 = "disconnected";
        }
        caulk::make_string((caulk *)"%s RPB is %s", (uint64_t)__p, v11, v12);
        char v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v15)
        {
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EC428(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E748;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E748;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E748;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E748;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s sample rate conversion algorithm is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EC6CC(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E790;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E790;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E790;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E790;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s sample rate conversion algorithm is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1EC970(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E7D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E7D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E7D8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E7D8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s sample rate conversion quality is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1ECC14(void *a1)
{
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E820;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E820;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F149E820;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F149E820;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,void vp::vx::DSP_Node_Factory::listen<unsigned int,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int const&)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(void *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a1[1];
      if (v9)
      {
        atomic_fetch_add((atomic_uint *volatile)(a1[4] + 1288), 1u);
        uint64_t v10 = *a3;
        uint64_t v11 = vp::vx::detail::convert_to_c_str(a1[3]);
        caulk::make_string((caulk *)"%s sample rate conversion quality is %u", (uint64_t)__p, v11, v10);
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v14)
        {
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1ECEB8(void *a1)
{
}

uint64_t vp::vx::IO_Far_End_Voice_Proc_Node_Factory::IO_Far_End_Voice_Proc_Node_Factory(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 96) = &unk_1F1493718;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 104) = v4 + 24;
  *(void *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v4;
  *(void *)a1 = &unk_1F149E870;
  *(void *)(a1 + 96) = &unk_1F149E8A0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  vp::vx::data_flow::State<void>::State(a1 + 24);
  vp::vx::data_flow::State<void>::State(a1 + 48);
  CFStringRef v5 = (vp *)vp::vx::data_flow::State<void>::State(a1 + 72);
  log = vp::get_log(v5);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    vp::vx::io::get_log_context_info(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"vp::vx::IO_Far_End_Voice_Proc_Node_Factory]", 42, __p);
    unint64_t v7 = v16;
    uint64_t v8 = __p[1];
    uint64_t v10 = vp::get_log(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = (unint64_t)v8;
      }
      char v12 = (void **)__p[0];
      if ((v16 & 0x80u) == 0) {
        char v12 = __p;
      }
      if (v11) {
        char v13 = " ";
      }
      else {
        char v13 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      char v18 = v12;
      __int16 v19 = 2080;
      uint64_t v20 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1ED0D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::~IO_Far_End_Voice_Proc_Node_Factory(vp::vx::IO_Far_End_Voice_Proc_Node_Factory *this, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  uint64_t v4 = (vp *)a2[3];
  *(void *)((char *)this + *(void *)(v3 - 24)) = v4;
  log = vp::get_log(v4);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    vp::vx::io::get_log_context_info((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)"vp::vx::IO_Far_End_Voice_Proc_Node_Factory]", 42, __p);
    unint64_t v6 = v15;
    unint64_t v7 = __p[1];
    uint64_t v9 = vp::get_log(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if ((v6 & 0x80u) == 0) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = (unint64_t)v7;
      }
      unint64_t v11 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        unint64_t v11 = __p;
      }
      if (v10) {
        char v12 = " ";
      }
      else {
        char v12 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v17 = v11;
      __int16 v18 = 2080;
      __int16 v19 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 72);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 48);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 24);
  char v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::~IO_Far_End_Voice_Proc_Node_Factory(vp::vx::IO_Far_End_Voice_Proc_Node_Factory *this)
{
  *(void *)(v1 + 96) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 112);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::~IO_Far_End_Voice_Proc_Node_Factory(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Far_End_Voice_Proc_Node_Factory::~IO_Far_End_Voice_Proc_Node_Factory(vp::vx::IO_Far_End_Voice_Proc_Node_Factory *this)
{
}

{
  uint64_t vars8;

  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::~IO_Far_End_Voice_Proc_Node_Factory((vp::vx::IO_Far_End_Voice_Proc_Node_Factory *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void **vp::vx::IO_Far_End_Voice_Proc_Node_Factory::new_node@<X0>(vp *a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a2;
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v6 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24);
    }
    else {
      uint64_t v6 = 0;
    }
    vp::vx::io::get_log_context_info(v6, (uint64_t)"vp::vx::IO_Far_End_Voice_Proc_Node_Factory]", 42, __p);
    unint64_t v7 = v32;
    uint64_t v8 = __p[1];
    unint64_t v10 = vp::get_log(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = (unint64_t)v8;
      }
      char v12 = (void **)__p[0];
      if ((v32 & 0x80u) == 0) {
        char v12 = __p;
      }
      if (v11) {
        char v13 = " ";
      }
      else {
        char v13 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s%swill create node", buf, 0x16u);
    }
    if ((char)v32 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::get_format(a1, (uint64_t)__p);
  max_block_CFIndex size = vp::vx::IO_Far_End_Voice_Proc_Node_Factory::get_max_block_size(a1);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::get_input_block(a1, aBlock);
  vp::allocate_unique<vp::vx::io::nodes::Far_End_Voice_Proc_Node,CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(&v33, (long long *)__p, &max_block_size, (const void **)aBlock, (uint64_t)buf);
  char v14 = *(vp **)aBlock;
  if (*(void *)aBlock) {
    _Block_release(*(const void **)aBlock);
  }
  if (*(void *)buf)
  {
    vp::vx::io::Object::get_log_context(*(void *)buf + 64, __p);
    unsigned __int8 v15 = __p[0];
    std::string::basic_string[abi:ne180100]<0>(&v28, "Voice_Proc");
    vp::vx::io::Object::Log_Context::set_user_info((uint64_t)v15, &v28);
    if (v29 < 0) {
      operator delete((void *)v28.n128_u64[0]);
    }
    char v14 = (vp *)__p[1];
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  unsigned __int8 v16 = vp::get_log(v14);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v17 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24);
    }
    else {
      uint64_t v17 = 0;
    }
    vp::vx::io::get_log_context_info(v17, (uint64_t)"vp::vx::IO_Far_End_Voice_Proc_Node_Factory]", 42, __p);
    unint64_t v18 = v32;
    __int16 v19 = __p[1];
    uint64_t v21 = vp::get_log(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      if ((v18 & 0x80u) == 0) {
        unint64_t v22 = v18;
      }
      else {
        unint64_t v22 = (unint64_t)v19;
      }
      uint64_t v23 = (void **)__p[0];
      if ((v32 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      if (v22) {
        char v24 = " ";
      }
      else {
        char v24 = "";
      }
      *(_DWORD *)aBlock = 136315394;
      *(void *)&aBlock[4] = v23;
      __int16 v35 = 2080;
      char v36 = v24;
      _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, "%s%sdid create node", aBlock, 0x16u);
    }
    if ((char)v32 < 0) {
      operator delete(__p[0]);
    }
  }
  long long v25 = *(_OWORD *)buf;
  long long v26 = *(_OWORD *)&buf[16];
  *(void *)std::__fs::filesystem::path buf = 0;
  *a3 = v25;
  a3[1] = v26;
  return std::unique_ptr<vp::vx::io::nodes::Far_End_Voice_Proc_Node,vp::Allocator_Delete<vp::vx::io::nodes::Far_End_Voice_Proc_Node>>::reset[abi:ne180100]((void **)buf, 0);
}

void sub_1BB1ED6C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void **vp::allocate_unique<vp::vx::io::nodes::Far_End_Voice_Proc_Node,CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, int *a3@<X2>, const void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v6 = v9;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = v6;
  *(_OWORD *)(a5 + 16) = xmmword_1BB871770;
  unint64_t v7 = (void *)std::pmr::polymorphic_allocator<vp::vx::io::nodes::Far_End_Voice_Proc_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Far_End_Voice_Proc_Node,CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(&v9, a2, a3, a4);
  return std::unique_ptr<vp::vx::io::nodes::Far_End_Voice_Proc_Node,vp::Allocator_Delete<vp::vx::io::nodes::Far_End_Voice_Proc_Node>>::reset[abi:ne180100]((void **)a5, v7);
}

void sub_1BB1ED72C(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::io::nodes::Far_End_Voice_Proc_Node,vp::Allocator_Delete<vp::vx::io::nodes::Far_End_Voice_Proc_Node>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::get_format(vp::vx::IO_Far_End_Voice_Proc_Node_Factory *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 72;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v7, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v3, (vp::vx::data_flow::Value *)v7);
  uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  long long v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(v5 + 32);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v7);
}

void sub_1BB1ED7AC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Far_End_Voice_Proc_Node_Factory::get_max_block_size(vp::vx::IO_Far_End_Voice_Proc_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 48;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1ED81C(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::get_input_block(vp::vx::IO_Far_End_Voice_Proc_Node_Factory *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)this + 24;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v6, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v3, (vp::vx::data_flow::Value *)v6);
  if ((uint64_t (***)())v6[2] == &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id) {
    uint64_t v5 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = 0;
  if (*v5)
  {
    *a2 = *v5;
    void *v5 = 0;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
}

void sub_1BB1ED8B8(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = a1 + 24;
    vp::vx::data_flow::State<void>::operator=(a1 + 24, a2);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v4 = a1 + 24;
    vp::vx::data_flow::State<void>::operator=(a1 + 24, a2);
  }
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_1F149EA10;
  v5[1] = v3;
  v5[2] = v2;
  void v7[3] = v5;
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  unint64_t v10 = 0;
  long long v6 = operator new(0x28uLL);
  *long long v6 = &unk_1F149E9C8;
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)v8);
  unint64_t v10 = v6;
  vp::vx::data_flow::State<void>::register_listener(v4, (uint64_t)v9);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100](v7);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BB1EDA00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = a1 + 48;
    vp::vx::data_flow::State<void>::operator=(a1 + 48, a2);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v4 = a1 + 48;
    vp::vx::data_flow::State<void>::operator=(a1 + 48, a2);
  }
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_1F149EA58;
  v5[1] = v3;
  v5[2] = v2;
  void v7[3] = v5;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  unint64_t v10 = 0;
  long long v6 = operator new(0x28uLL);
  *long long v6 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)v8);
  unint64_t v10 = v6;
  vp::vx::data_flow::State<void>::register_listener(v4, (uint64_t)v9);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v7);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BB1EDB44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = a1 + 72;
    vp::vx::data_flow::State<void>::operator=(a1 + 72, a2);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v4 = a1 + 72;
    vp::vx::data_flow::State<void>::operator=(a1 + 72, a2);
  }
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_1F149EAA0;
  v5[1] = v3;
  v5[2] = v2;
  void v7[3] = v5;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  unint64_t v10 = 0;
  long long v6 = operator new(0x28uLL);
  *long long v6 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)v8);
  unint64_t v10 = v6;
  vp::vx::data_flow::State<void>::register_listener(v4, (uint64_t)v9);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v7);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BB1EDC88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory_Provider::create_io_fev_proc_node_factory()
{
}

void vp::vx::IO_Far_End_Voice_Proc_Node_Factory_Provider::~IO_Far_End_Voice_Proc_Node_Factory_Provider(vp::vx::IO_Far_End_Voice_Proc_Node_Factory_Provider *this)
{
}

void **std::unique_ptr<vp::vx::io::nodes::Far_End_Voice_Proc_Node,vp::Allocator_Delete<vp::vx::io::nodes::Far_End_Voice_Proc_Node>>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::io::nodes::Far_End_Voice_Proc_Node,0>(v2);
    return (void **)(*(uint64_t (**)(void *, void *, void *, void *))(*v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::io::nodes::Far_End_Voice_Proc_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Far_End_Voice_Proc_Node,CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void *a1, long long *a2, int *a3, const void **a4)
{
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 88, 8);
  v10[0] = &v12;
  v10[1] = a1;
  vp::vx::io::nodes::Far_End_Voice_Proc_Node::Far_End_Voice_Proc_Node(v12, a2, *a3, a4);
  char v11 = 1;
  uint64_t v8 = v12;
  std::__exception_guard_exceptions<vp::vx::io::nodes::Far_End_Voice_Proc_Node * std::pmr::polymorphic_allocator<vp::vx::io::nodes::Far_End_Voice_Proc_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Far_End_Voice_Proc_Node,CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

void std::__destroy_at[abi:ne180100]<vp::vx::io::nodes::Far_End_Voice_Proc_Node,0>(void *a1)
{
  uint64_t v2 = (const void *)a1[7];
  if (v2)
  {
    _Block_release(v2);
    a1[7] = 0;
  }
  a1[8] = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::io::nodes::Far_End_Voice_Proc_Node * std::pmr::polymorphic_allocator<vp::vx::io::nodes::Far_End_Voice_Proc_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Far_End_Voice_Proc_Node,CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(CA::StreamDescription,unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 88, 8);
  }
  return a1;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void **vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::copy_value(uint64_t a1, void **a2, const void **a3)
{
  return std::construct_at[abi:ne180100]<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>*>(a2, a3);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::move_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = 0;
  if (*a3)
  {
    *a2 = *a3;
    *a3 = 0;
  }
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::destroy_value(uint64_t a1, const void **a2)
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::compare_value()
{
  return 0;
}

void **std::construct_at[abi:ne180100]<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>*>(void **a1, const void **a2)
{
  *a1 = 0;
  if (*a2) {
    *a1 = _Block_copy(*a2);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,0>(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
}

uint64_t std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E9C8;
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149E9C8;
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149E9C8;
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1EE174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149E9C8;
  return std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::register_listener(std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    __n128 result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EA10;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EA10;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149EA10;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149EA10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1},std::allocator<void vp::vx::observe_downlink<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(vp::vx::data_flow::State<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>)::$_0)::{lambda(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)#1}>,void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::operator()(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"far-end-voice \"proc\" I/O block is %p", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__value_func<void ()(unsigned int,vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EA58;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EA58;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149EA58;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149EA58;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"far-end-voice \"proc\" max I/O block size is %u", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EAA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EAA0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149EAA0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149EAA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_downlink<CA::StreamDescription,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(uint64_t a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10)
      {
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v8);
        if (v13 >= 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"far-end-voice \"proc\" I/O format is %s", (uint64_t)&v15, v11);
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v15;
        uint64_t v13 = v16;
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v10 + 32))(v10, v6, __p);
        if (v14)
        {
          if (SHIBYTE(v13) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

uint64_t vp::vx::io::nodes::Mic_Ref_Sync_Node::Mic_Ref_Sync_Node(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  *(void *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = &unk_1F1493718;
  char v12 = (char *)operator new(0x40uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)char v12 = &unk_1F1493738;
  *(_OWORD *)(v12 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v12 + 7) = 0;
  *(_OWORD *)(v12 + 24) = 0u;
  *(void *)(a1 + 128) = v12 + 24;
  *(void *)(a1 + 136) = v12;
  *(void *)a1 = &unk_1F149EAF0;
  *(void *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = &unk_1F149EB88;
  long long v14 = *(_OWORD *)a2;
  long long v13 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 8) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  long long v16 = *(_OWORD *)a3;
  long long v15 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_DWORD *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 9boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a5;
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v12);
  unint64_t v18 = (std::pmr *)vp::Audio_Ring_Buffer::create((long long *)a2, a4 - (a5 & (a5 >> 31)), default_resource, (void **)(a1 + 96));
  if (a4 <= ((double)a6 / 1000.0 * *(double *)a3)) {
    a4 = ((double)a6 / 1000.0 * *(double *)a3);
  }
  uint64_t v19 = std::pmr::get_default_resource(v18);
  vp::Audio_Ring_Buffer::create((long long *)a3, a4, v19, (void **)(a1 + 104));
  *(unsigned char *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  if (!*(void *)(a1 + 96))
  {
    uint64_t v21 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v21);
  }
  if (!*(void *)(a1 + 104))
  {
    uint64_t v22 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v22);
  }
  return a1;
}

uint64_t vp::vx::io::nodes::Mic_Ref_Sync_Node::get_block_size(vp::vx::io::nodes::Mic_Ref_Sync_Node *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t vp::vx::io::nodes::Mic_Ref_Sync_Node::get_block_size_policy(vp::vx::io::nodes::Mic_Ref_Sync_Node *this)
{
  return 1;
}

uint64_t vp::vx::io::nodes::Mic_Ref_Sync_Node::get_terminal_count()
{
  return 2;
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::get_terminal_format(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    long long v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a3 + 16) = v6;
    uint64_t v5 = *(void *)(a1 + 80);
    goto LABEL_5;
  }
  if (!a2)
  {
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a3 + 16) = v4;
    uint64_t v5 = *(void *)(a1 + 40);
LABEL_5:
    *(void *)(a3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v5;
    *(unsigned char *)(a3 + 48) = 1;
    return;
  }
  vp::vx::io::Error::Error((uint64_t)&v12, 9, 61, 24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
  int v18 = v12;
  __int16 v7 = v13;
  __int16 v19 = v13;
  __int16 v8 = v14;
  __int16 v20 = v14;
  uint64_t v9 = v15;
  long long v11 = v16;
  long long v10 = v17;
  uint64_t v24 = *((void *)&v17 + 1);
  long long v16 = 0uLL;
  *(void *)&long long v17 = 0;
  *(_DWORD *)a3 = v12;
  *(_WORD *)(a3 + 4) = v7;
  *(_WORD *)(a3 + 6) = v8;
  *(void *)(a3 + 8) = v9;
  *(_OWORD *)(a3 + 16) = v11;
  *(_OWORD *)(a3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v10;
  uint64_t v23 = 0;
  uint64_t v21 = v9;
  long long v22 = 0uLL;
  *(unsigned char *)(a3 + 48) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v18);
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v12);
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::get_required_input_frame_count(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = a1;
  *(unsigned char *)(a2 + 48) = 1;
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::get_expected_output_frame_count(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = a1;
  *(unsigned char *)(a2 + 48) = 1;
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::process(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  if (*(_DWORD *)(a1 + 88) < a6)
  {
    uint64_t v39 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v54, 2, 81, 23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
    vp::vx::io::operator<<<char const(&)[13]>(v39, "frame count ", &v51);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" is larger than ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"maximum allowed block size", 26);
    std::ostream::operator<<();
  }
  else if (a3 == 2)
  {
    if (a5 == 2)
    {
      vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v54, *(const AudioBufferList **)a2);
      uint64_t v12 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v12 + 56))
      {
        double v13 = *(double *)v12;
        vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v49, *(const AudioBufferList **)a4);
        vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v48, *(const AudioBufferList **)(a2 + 24));
        uint64_t v14 = *(void *)(a2 + 32);
        int v15 = *(_DWORD *)(v14 + 56);
        if ((v15 & 1) != 0 || !*(unsigned char *)(a1 + 112))
        {
          uint64_t v44 = (unsigned char *)a7;
          uint64_t v16 = (uint64_t)v13;
          uint64_t v17 = (uint64_t)v13 + a6;
          double v18 = *(double *)v14;
          vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v46, *(const AudioBufferList **)(a4 + 24));
          vp::Audio_Ring_Buffer::write((uint64_t *)(a1 + 96), *(AudioBufferList **)a2, v16, v17);
          int v19 = *(_DWORD *)(a1 + 92) & (*(int *)(a1 + 92) >> 31);
          if (vp::Audio_Ring_Buffer::read((uint64_t *)(a1 + 96), *(const AudioBufferList **)a4, v16 + v19, v17 + v19))
          {
            int v20 = 1;
            if ((v15 & 1) == 0) {
              goto LABEL_21;
            }
          }
          else
          {
            int v20 = vp::for_each_buffer(v49, (unsigned int (*)(unsigned int *, uint64_t, float))vp::fill, a6, 0.0);
            if ((v15 & 1) == 0) {
              goto LABEL_21;
            }
          }
          vp::Audio_Ring_Buffer::write((uint64_t *)(a1 + 104), *(AudioBufferList **)(a2 + 24), (uint64_t)v18, (uint64_t)v18 + a6);
          int v21 = *(_DWORD *)(a1 + 92);
          vp::Audio_Ring_Buffer::get_time_range((uint64_t *)(a1 + 104), (uint64_t)&v51);
          if (v52 > v51)
          {
            uint64_t v22 = v21 & ~(v21 >> 31);
            uint64_t v23 = v17 - v22;
            uint64_t v24 = v16 - v22;
            if (!a6 || (v52 >= v23 ? (BOOL v25 = v51 <= v24) : (BOOL v25 = 0), v25))
            {
              if (vp::Audio_Ring_Buffer::read((uint64_t *)(a1 + 104), *(const AudioBufferList **)(a4 + 24), v24, v23))
              {
                *(unsigned char *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 1;
                long long v26 = v44;
                if (v20)
                {
LABEL_25:
                  char v29 = *(long long **)(a2 + 8);
                  __int16 v30 = *(_OWORD **)(a4 + 8);
                  long long v31 = *v29;
                  long long v32 = v29[1];
                  long long v33 = v29[3];
                  v30[2] = v29[2];
                  void v30[3] = v33;
                  *__int16 v30 = v31;
                  v30[1] = v32;
                  uint64_t v34 = *(_OWORD **)(a2 + 8);
                  __int16 v35 = *(_OWORD **)(a4 + 32);
                  long long v36 = v34[1];
                  long long v38 = v34[2];
                  long long v37 = v34[3];
                  *__int16 v35 = *v34;
                  v35[1] = v36;
                  v35[2] = v38;
                  v35[3] = v37;
                  unsigned char *v26 = 0;
                  v26[48] = 1;
                  return;
                }
                goto LABEL_20;
              }
            }
          }
LABEL_21:
          if (*(unsigned char *)(a1 + 112)) {
            int v28 = vp::for_each_buffer(v49, (unsigned int (*)(unsigned int *, uint64_t, float))vp::fill, a6, 0.0);
          }
          else {
            int v28 = vp::for_each_buffer_pair(v49, *(_DWORD **)v54, (unsigned int (*)(unsigned int *, _DWORD *, uint64_t))vp::copy, a6);
          }
          long long v26 = v44;
          if (v20 & v28 & vp::for_each_buffer(v46, (unsigned int (*)(unsigned int *, uint64_t, float))vp::fill, a6, 0.0))goto LABEL_25; {
LABEL_20:
          }
          vp::vx::io::Error::Error((uint64_t)&v51, 0, 222, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
          vp::vx::io::operator<<<char const(&)[31]>((vp::vx::io::Error *)&v51, "unknown I/O error has occurred", v45);
          vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v45);
          uint64_t v27 = (uint64_t)v26;
LABEL_33:
          _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)&v51, v27);
          uint64_t v42 = (vp::vx::io::Error *)&v51;
          goto LABEL_34;
        }
        vp::vx::io::Error::Error((uint64_t)&v51, 3, 125, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
        vp::vx::io::operator<<<char const(&)[41]>((vp::vx::io::Error *)&v51, "reference input sample time is not valid", v47);
        uint64_t v43 = (vp::vx::io::Error_String_Stream_Writer *)v47;
      }
      else
      {
        vp::vx::io::Error::Error((uint64_t)&v51, 3, 109, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
        vp::vx::io::operator<<<char const(&)[42]>((vp::vx::io::Error *)&v51, "microphone input sample time is not valid", v50);
        uint64_t v43 = (vp::vx::io::Error_String_Stream_Writer *)v50;
      }
      vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer(v43);
      uint64_t v27 = a7;
      goto LABEL_33;
    }
    int v41 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v54, 3, 95, 23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
    vp::vx::io::operator<<<char const(&)[18]>(v41, "output data size ", &v51);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" does not match ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"expected data size ", 19);
    std::ostream::operator<<();
  }
  else
  {
    uint64_t v40 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v54, 3, 88, 23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/nodes/Mic_Ref_Sync_Node.cpp");
    vp::vx::io::operator<<<char const(&)[17]>(v40, "input data size ", &v51);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" does not match ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"expected data size ", 19);
    std::ostream::operator<<();
  }
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v51);
  _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v54, a7);
  uint64_t v42 = (vp::vx::io::Error *)v54;
LABEL_34:
  vp::vx::io::Error::~Error(v42);
}

void vp::vx::io::operator<<<char const(&)[42]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB1EF360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void vp::vx::io::operator<<<char const(&)[31]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB1EF3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

uint64_t *vp::vx::io::nodes::Mic_Ref_Sync_Node::reset@<X0>(vp::vx::io::nodes::Mic_Ref_Sync_Node *this@<X0>, unsigned char *a2@<X8>)
{
  vp::Audio_Ring_Buffer::clear((uint64_t *)this + 12);
  __n128 result = vp::Audio_Ring_Buffer::clear((uint64_t *)this + 13);
  *((unsigned char *)this + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *a2 = 0;
  a2[48] = 1;
  return result;
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::connect(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[48] = 1;
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::disconnect(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[48] = 1;
}

void vp::vx::io::nodes::Mic_Ref_Sync_Node::~Mic_Ref_Sync_Node(vp::vx::io::nodes::Mic_Ref_Sync_Node *this)
{
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::vx::io::nodes::Mic_Ref_Sync_Node *)((char *)this + 104));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::vx::io::nodes::Mic_Ref_Sync_Node *)((char *)this + 96));
  *((void *)this + 15) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::vx::io::nodes::Mic_Ref_Sync_Node *)((char *)this + 104));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::vx::io::nodes::Mic_Ref_Sync_Node *)((char *)this + 96));
  *((void *)this + 15) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::io::nodes::Mic_Ref_Sync_Node::~Mic_Ref_Sync_Node(vp::vx::io::nodes::Mic_Ref_Sync_Node *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::Audio_Ring_Buffer *)(v1 + 13));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::Audio_Ring_Buffer *)(v1 + 12));
  v1[15] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[17];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::Audio_Ring_Buffer *)(v1 + 13));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::Audio_Ring_Buffer *)(v1 + 12));
  v1[15] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[17];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t vp::vx::components::Audio_Data_Analysis::Audio_Data_Analysis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F149EBA8;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  vp::vx::data_flow::State<void>::State(a1 + 48);
  *(_DWORD *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  size_t v5 = (vp *)vp::vx::data_flow::State<void>::State(a1 + 80);
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (!*(void *)(a1 + 112))
  {
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    long long v21 = 0uLL;
    long long v22 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
    uint64_t v17 = 0;
    _os_log_send_and_compose_impl();
    uint64_t v15 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v15);
  }
  log = vp::get_log(v5);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
    __int16 v8 = (void *)BYTE7(v21);
    uint64_t v9 = __p[1];
    long long v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((char)v8 >= 0) {
        long long v11 = v8;
      }
      else {
        long long v11 = v9;
      }
      uint64_t v12 = (void **)__p[0];
      if ((SBYTE7(v21) & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      if (v11) {
        double v13 = " ";
      }
      else {
        double v13 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v17 = v12;
      __int16 v18 = 2080;
      int v19 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if (SBYTE7(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1EF884(_Unwind_Exception *a1)
{
  vp::Domain_Pair<std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::~Domain_Pair(v5);
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 136);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  vp::vx::components::Audio_Data_Analysis::Audio_Data_Analysis(v4, v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t vp::Domain_Pair<std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::~Domain_Pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void vp::vx::components::Audio_Data_Analysis::~Audio_Data_Analysis(std::__shared_mutex_base *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  vp::vx::components::Audio_Data_Analysis::unregister_listeners(this);
  vp::vx::components::Audio_Data_Analysis::destroy_audio_data_analysis_client((vp::vx::components::Audio_Data_Analysis *)this);
  log = vp::get_log(v2);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
    unint64_t v5 = v18;
    uint64_t v6 = __p[1];
    uint64_t v7 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if ((v5 & 0x80u) == 0) {
        unint64_t v8 = v5;
      }
      else {
        unint64_t v8 = (unint64_t)v6;
      }
      uint64_t v9 = (void **)__p[0];
      if ((v18 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      if (v8) {
        long long v10 = " ";
      }
      else {
        long long v10 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      int v20 = v9;
      __int16 v21 = 2080;
      long long v22 = v10;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
  }
  sig = (std::__shared_weak_count *)this[1].__mut_.__m_.__sig;
  if (sig) {
    std::__shared_weak_count::__release_shared[abi:ne180100](sig);
  }
  uint64_t v12 = *(std::__shared_weak_count **)&this->__gate2_.__cv_.__opaque[32];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  double v13 = *(std::__shared_weak_count **)&this->__gate2_.__cv_.__opaque[16];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)this->__gate2_.__cv_.__opaque;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)&this->__gate1_.__cv_.__opaque[8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&this->__mut_.__m_.__opaque[40]);
  uint64_t v15 = *(std::__shared_weak_count **)&this->__mut_.__m_.__opaque[32];
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)&this->__mut_.__m_.__opaque[16];
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

{
  uint64_t vars8;

  vp::vx::components::Audio_Data_Analysis::~Audio_Data_Analysis(this);

  JUMPOUT(0x1C185D370);
}

std::__shared_mutex_base *vp::vx::components::Audio_Data_Analysis::unregister_listeners(std::__shared_mutex_base *this)
{
  int v1 = *(_DWORD *)this->__gate1_.__cv_.__opaque;
  if (v1)
  {
    uint64_t v2 = this;
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&this->__mut_.__m_.__opaque[40], v1);
    *(_DWORD *)v2->__gate1_.__cv_.__opaque = 0;
    this = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&v2->__gate1_.__cv_.__opaque[8], *(_DWORD *)&v2->__gate1_.__cv_.__opaque[32]);
    *(_DWORD *)&v2->__gate1_.__cv_.__opaque[32] = 0;
  }
  return this;
}

void vp::vx::components::Audio_Data_Analysis::destroy_audio_data_analysis_client(vp::vx::components::Audio_Data_Analysis *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
    long long v4 = (std::__shared_weak_count *)*((void *)this + 17);
    *((void *)this + 16) = 0;
    *((void *)this + 17) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    log = vp::get_log((vp *)v4);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
      unint64_t v7 = v14;
      unint64_t v8 = __p[1];
      uint64_t v9 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if ((v7 & 0x80u) == 0) {
          unint64_t v10 = v7;
        }
        else {
          unint64_t v10 = (unint64_t)v8;
        }
        if ((v14 & 0x80u) == 0) {
          long long v11 = __p;
        }
        else {
          long long v11 = (void **)__p[0];
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        uint64_t v16 = v11;
        if (v10) {
          uint64_t v12 = " ";
        }
        else {
          uint64_t v12 = "";
        }
        __int16 v17 = 2080;
        unsigned __int8 v18 = v12;
        __int16 v19 = 2048;
        uint64_t v20 = v3;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed audio data analysis client with session ID %llu", buf, 0x20u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::components::Audio_Data_Analysis::as_io_node_decorator_factory(uint64_t a1, int a2)
{
  uint64_t v2 = 160;
  if (!a2) {
    uint64_t v2 = 144;
  }
  return *(void *)(a1 + v2);
}

void vp::vx::components::Audio_Data_Analysis::set_state_manager(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v4 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::Audio_Data_Analysis::set_state_owner(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v4 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::Audio_Data_Analysis::configure(vp::vx::components::Audio_Data_Analysis *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, &__p);
    uint64_t v4 = HIBYTE(v29);
    uint64_t v5 = v28;
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v4 & 0x80u) == 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = v5;
      }
      p_p = __p;
      if (SHIBYTE(v29) >= 0) {
        p_p = &__p;
      }
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      *(void *)CFTypeRef cf = p_p;
      *(_WORD *)&cf[8] = 2080;
      *(void *)&cf[10] = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s%sconfigure", buf, 0x16u);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v11 = *((void *)this + 14);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 15);
  if (!v10)
  {
    if (v11) {
      goto LABEL_18;
    }
LABEL_31:
    uint64_t v20 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v20);
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!v11) {
    goto LABEL_31;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_18:
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v12
    || (double v13 = std::__shared_weak_count::lock(v12)) == 0
    || (unsigned __int8 v14 = v13,
        uint64_t v15 = *((void *)this + 2),
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed),
        !v15))
  {
    uint64_t v21 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v16
    || (__int16 v17 = std::__shared_weak_count::lock(v16), (v18 = v17) == 0)
    || (uint64_t v19 = *((void *)this + 4), atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed), !v19))
  {
    uint64_t v22 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)69>(v19, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::operator=((uint64_t)this + 48, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State((uint64_t)&__p);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)55>(v19, (uint64_t)v23);
  std::string __p = &unk_1F149ECF8;
  uint64_t v28 = v11;
  char v29 = v10;
  __int16 v30 = &__p;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
  int v26 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::components::Audio_Data_Analysis *)((char *)this + 48));
  vp::vx::data_flow::State_Manager::create_state(v15 + 48, (uint64_t)&__p, (uint64_t)buf);
  vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)buf);
  vp::vx::data_flow::State<void>::~State(buf);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)&__p, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  vp::vx::data_flow::State<void>::operator=((uint64_t)this + 80, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State((uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State((uint64_t)v23);
  vp::allocate_unique<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>((uint64_t *)this + 1, (uint64_t)&__p);
  *(_DWORD *)std::__fs::filesystem::path buf = 42;
  CFRetain(@"epout");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf[4], @"epout");
  vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory::add_tap_point((uint64_t)__p, 2u, 0, 1, (uint64_t)buf);
  std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::operator=[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>,void>((void *)this + 18, (uint64_t *)&__p);
  if (*(void *)&cf[4]) {
    CFRelease(*(CFTypeRef *)&cf[4]);
  }
  std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::reset[abi:ne180100]((uint64_t *)&__p, 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BB1F0080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *vp::allocate_unique<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v3 = v6;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = xmmword_1BB871770;
  uint64_t v4 = std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>(&v6);
  return std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::reset[abi:ne180100]((uint64_t *)a2, v4);
}

void sub_1BB1F0174(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::operator=[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::shared_ptr[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point::~Tap_Point(vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point *this)
{
  int v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

void vp::vx::components::Audio_Data_Analysis::begin_configuration_change(vp *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
      unint64_t v5 = v12;
      long long v6 = __p[1];
      uint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        if ((v5 & 0x80u) == 0) {
          unint64_t v8 = v5;
        }
        else {
          unint64_t v8 = (unint64_t)v6;
        }
        uint64_t v9 = (void **)__p[0];
        if ((v12 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        if (v8) {
          unint64_t v10 = " ";
        }
        else {
          unint64_t v10 = "";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        unsigned __int8 v14 = v9;
        __int16 v15 = 2080;
        uint64_t v16 = v10;
        __int16 v17 = 2080;
        unsigned __int8 v18 = "uplink";
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_INFO, "%s%sbegin %s configuration changes", buf, 0x20u);
      }
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
    }
    vp::vx::components::Audio_Data_Analysis::unregister_listeners((std::__shared_mutex_base *)a1);
    vp::vx::components::Audio_Data_Analysis::destroy_audio_data_analysis_client(a1);
    vp::vx::components::Audio_Data_Analysis::create_audio_data_analysis_client(a1);
    vp::vx::components::Audio_Data_Analysis::register_listeners(a1);
  }
}

void vp::vx::components::Audio_Data_Analysis::create_audio_data_analysis_client(vp::vx::components::Audio_Data_Analysis *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = (char *)this + 48;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(buf, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v3, (vp::vx::data_flow::Value *)buf);
  uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  *(void *)&__p[16] = *(void *)(v5 + 16);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)v2 + 16))(&v31, v2, __p);
  uint64_t v6 = *std::shared_ptr<vp::services::Audio_Data_Analysis::Client>::operator=[abi:ne180100]<vp::services::Audio_Data_Analysis::Client,std::default_delete<vp::services::Audio_Data_Analysis::Client>,void>((void *)this + 16, &v31);
  uint64_t v7 = v31;
  uint64_t v31 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  unint64_t v8 = *(vp **)__p;
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v6)
  {
    uint64_t v9 = (vp *)(*(uint64_t (**)(void))(**((void **)this + 16) + 16))();
    log = vp::get_log(v9);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
      uint64_t v12 = __p[23];
      uint64_t v13 = *(void *)&__p[8];
      unsigned __int8 v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v13;
        }
        if (__p[23] >= 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        *(void *)&uint8_t buf[4] = v16;
        if (v15) {
          __int16 v17 = " ";
        }
        else {
          __int16 v17 = "";
        }
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v17;
        __int16 v33 = 2048;
        uint64_t v34 = v9;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s%screated audio data analysis client with session ID %llu", buf, 0x20u);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v19 = *((void *)this + 17);
    uint64_t v18 = *((void *)this + 18);
    uint64_t v20 = *((void *)this + 16);
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *(std::__shared_weak_count **)(v18 + 16);
    *(void *)(v18 + 8) = v20;
    *(void *)(v18 + 16) = v19;
    if (v21) {
LABEL_23:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  else
  {
    uint64_t v22 = vp::get_log(v8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, buf);
      uint64_t v24 = HIBYTE(v33);
      uint64_t v25 = *(void *)&buf[8];
      int v26 = vp::get_log(v23);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        if ((v24 & 0x80u) == 0) {
          uint64_t v27 = v24;
        }
        else {
          uint64_t v27 = v25;
        }
        uint64_t v28 = *(unsigned char **)buf;
        if (v33 >= 0) {
          uint64_t v28 = buf;
        }
        if (v27) {
          char v29 = " ";
        }
        else {
          char v29 = "";
        }
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = v28;
        *(_WORD *)&__p[12] = 2080;
        *(void *)&__p[14] = v29;
        _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, "%s%sfailed to create audio data analysis client", __p, 0x16u);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v30 = *((void *)this + 18);
    uint64_t v21 = *(std::__shared_weak_count **)(v30 + 16);
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0;
    if (v21) {
      goto LABEL_23;
    }
  }
}

void sub_1BB1F06B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a10) {
    vp::vx::components::Audio_Issue_Detector::configure(a10);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::components::Audio_Data_Analysis::register_listeners(vp::vx::components::Audio_Data_Analysis *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 16);
  if (v1)
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v4 = operator new(0x20uLL);
    *long long v4 = &unk_1F149EDC0;
    v4[1] = this;
    v4[2] = v1;
    void v4[3] = v3;
    void v9[3] = v4;
    std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
    uint64_t v12 = 0;
    uint64_t v5 = operator new(0x28uLL);
    void *v5 = &unk_1F149ED78;
    std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v10);
    uint64_t v12 = v5;
    LODWORD(v5) = vp::vx::data_flow::State<void>::register_listener((uint64_t)this + 48, (uint64_t)v11);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(std::vector<long long> const&)>::~__value_func[abi:ne180100](v10);
    *((_DWORD *)this + 18) = v5;
    std::__function::__value_func<void ()(std::vector<long long> const&)>::~__value_func[abi:ne180100](v9);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = &unk_1F149EE08;
    v6[1] = this;
    void v6[2] = v1;
    void v6[3] = v3;
    v8[3] = v6;
    std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v8);
    uint64_t v12 = 0;
    uint64_t v7 = operator new(0x28uLL);
    *uint64_t v7 = &unk_1F1496070;
    std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
    uint64_t v12 = v7;
    LODWORD(v7) = vp::vx::data_flow::State<void>::register_listener((uint64_t)this + 80, (uint64_t)v11);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](v10);
    *((_DWORD *)this + 26) = v7;
    std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](v8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BB1F08E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::components::Audio_Data_Analysis::end_configuration_change(vp *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
      unint64_t v5 = v12;
      uint64_t v6 = __p[1];
      uint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        if ((v5 & 0x80u) == 0) {
          unint64_t v8 = v5;
        }
        else {
          unint64_t v8 = (unint64_t)v6;
        }
        uint64_t v9 = (void **)__p[0];
        if ((v12 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        if (v8) {
          unint64_t v10 = " ";
        }
        else {
          unint64_t v10 = "";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        unsigned __int8 v14 = v9;
        __int16 v15 = 2080;
        uint64_t v16 = v10;
        __int16 v17 = 2080;
        uint64_t v18 = "uplink";
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_INFO, "%s%send %s configuration changes", buf, 0x20u);
      }
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
    }
    vp::vx::components::Audio_Data_Analysis::initialize_audio_data_analysis_client(a1);
  }
}

void vp::vx::components::Audio_Data_Analysis::initialize_audio_data_analysis_client(vp::vx::components::Audio_Data_Analysis *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 16);
  if (v1)
  {
    uint64_t v2 = (vp *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
    if ((v2 & 1) == 0)
    {
      log = vp::get_log(v2);
      if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
      {
        log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
        unint64_t v5 = v12;
        uint64_t v6 = __p[1];
        uint64_t v7 = vp::get_log(log_context_info);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          if ((v5 & 0x80u) == 0) {
            unint64_t v8 = v5;
          }
          else {
            unint64_t v8 = (unint64_t)v6;
          }
          uint64_t v9 = (void **)__p[0];
          if ((v12 & 0x80u) == 0) {
            uint64_t v9 = __p;
          }
          if (v8) {
            unint64_t v10 = " ";
          }
          else {
            unint64_t v10 = "";
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
          unsigned __int8 v14 = v9;
          __int16 v15 = 2080;
          uint64_t v16 = v10;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to initialize audio data analysis client", buf, 0x16u);
        }
        if ((char)v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void vp::vx::components::Audio_Data_Analysis::end_configuration_change(vp *a1, int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
      unint64_t v7 = v14;
      unint64_t v8 = __p[1];
      uint64_t v9 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        if ((v7 & 0x80u) == 0) {
          unint64_t v10 = v7;
        }
        else {
          unint64_t v10 = (unint64_t)v8;
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315906;
        uint64_t v16 = v11;
        if (v10) {
          unsigned __int8 v12 = " ";
        }
        else {
          unsigned __int8 v12 = "";
        }
        __int16 v17 = 2080;
        uint64_t v18 = v12;
        __int16 v19 = 2080;
        uint64_t v20 = "uplink";
        __int16 v21 = 1024;
        int v22 = a3;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_INFO, "%s%send %s configuration changes with error %u", buf, 0x26u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
    vp::vx::components::Audio_Data_Analysis::unregister_listeners((std::__shared_mutex_base *)a1);
    vp::vx::components::Audio_Data_Analysis::destroy_audio_data_analysis_client(a1);
  }
}

void vp::vx::components::Audio_Data_Analysis::get_dsp_property_override(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 == 1 && a3 == 1633968493)
  {
    uint64_t v7 = 561211748;
    uint64_t v5 = *(void *)(a1 + 128);
    if (v5) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned long long &>((applesauce::CF::TypeRef *)&v8, "UInt64", &v7);
    v6[0] = &v8;
    v6[1] = 1;
    *(void *)a4 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v6);
    *(_DWORD *)(a4 + 24) = 1;
    if (cf) {
      CFRelease(cf);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
    *(_DWORD *)(a4 + 24) = 0;
  }
}

void sub_1BB1F0E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<vp::services::Audio_Data_Analysis::Client>::operator=[abi:ne180100]<vp::services::Audio_Data_Analysis::Client,std::default_delete<vp::services::Audio_Data_Analysis::Client>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<vp::services::Audio_Data_Analysis::Client>::shared_ptr[abi:ne180100]<vp::services::Audio_Data_Analysis::Client,std::default_delete<vp::services::Audio_Data_Analysis::Client>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EED1Ev(void *a1)
{
  *a1 = &unk_1F149ECF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EED0Ev(void *a1)
{
  *a1 = &unk_1F149ECF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149ECF8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149ECF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components19Audio_Data_Analysis9configureEvE3__0JNS3_14Operation_ModeENS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_SK_EEERNS4_13State_ManagerESM_ST_EUlPPKNS4_5ValueEPS11_E_NSI_IS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  long long v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id) {
    uint64_t v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id) {
    uint64_t v9 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *v7;
  if (*v7 > 6) {
    goto LABEL_34;
  }
  if (((1 << v10) & 0x62) != 0)
  {
    CFRetain(@"com.apple.mobilephone");
    uint64_t v11 = @"com.apple.mobilephone";
    goto LABEL_12;
  }
  if (((1 << v10) & 0x14) != 0)
  {
    CFRetain(@"com.apple.facetime");
    uint64_t v11 = @"com.apple.facetime";
LABEL_12:
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v20, v11);
    goto LABEL_13;
  }
  if (v10)
  {
LABEL_34:
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  service_provider = (void *)vp::Service::get_service_provider(*(vp::Service **)(a1 + 8));
  vp::Service_Provider::get<vp::services::Audio_Statistics,(decltype(nullptr))0>(service_provider, &v24);
  if (v24)
  {
    __int16 v15 = (void *)*v9;
    uint64_t v16 = (void *)v9[1];
    if ((void *)*v9 != v16)
    {
      __int16 v17 = 0;
      while (1)
      {
        if (((*(uint64_t (**)(uint64_t, void))(*(void *)v24 + 32))(v24, *v15) & 0xFFFFFFFD) != 0)
        {
          uint64_t v18 = v17;
          goto LABEL_32;
        }
        (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v24 + 40))(&v23);
        if (v23)
        {
          CFTypeRef cf = 0;
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[25]>((const __CFDictionary *)v23, "HostApplicationDisplayID", &cf, &v22);
          uint64_t v18 = v22;
          int v22 = v17;
          if (v17) {
            CFRelease(v17);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v18)
          {
            int v19 = 0;
            goto LABEL_29;
          }
          __int16 v17 = 0;
        }
        int v19 = 1;
        uint64_t v18 = v17;
LABEL_29:
        if (v23) {
          CFRelease(v23);
        }
        if (!v19) {
          goto LABEL_36;
        }
LABEL_32:
        ++v15;
        __int16 v17 = v18;
        if (v15 == v16) {
          goto LABEL_36;
        }
      }
    }
  }
  uint64_t v18 = 0;
LABEL_36:
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v20 = v18;
LABEL_13:
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)uint64_t v5 = std::pmr::get_default_resource(v12);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v5);
  void *result = v20;
  return result;
}

void sub_1BB1F12AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::Service::get_service_provider(vp::Service *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v2 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v2);
  }
  return result;
}

void sub_1BB1F13AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[25]>@<X0>(const __CFDictionary *a1@<X0>, char *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,char const(&)[25]>(a1, a2, &cf);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,char const(&)[25]>(const __CFDictionary *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = applesauce::CF::details::at_key<char const(&)[25]>(a1, a2);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(void *)a3 = v5;
  char v7 = 1;
LABEL_6:
  a3[8] = v7;
}

const void *applesauce::CF::details::at_key<char const(&)[25]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB1F1570(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t *std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 88, 8);
  uint64_t v8 = v2;
  v6[0] = &v8;
  v6[1] = a1;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(void *)uint64_t v2 = &unk_1F149FA90;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v2);
  *(void *)(v2 + 24) = default_resource;
  *(void *)(v2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(v2 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = std::pmr::get_default_resource(default_resource);
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(v2 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  char v7 = 1;
  uint64_t v4 = v8;
  std::__exception_guard_exceptions<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory * std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>()::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::__destroy_at[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,0>(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 24);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)(a1 + 56));
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1];
    do
    {
      --v2;
      std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>((uint64_t)a1, v3);
      v3 += 24;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  }
  return a1;
}

void std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)(a2 + 16);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory * std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>()::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 88, 8);
  }
  return a1;
}

uint64_t *std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>::shared_ptr[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory *,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>,std::allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory *,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>,std::allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  std::__destroy_at[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory,0>(v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned long long &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB1F1A20(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149ED78;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149ED78;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149ED78;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1F1B58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149ED78;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(std::vector<long long> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::vector<long long>>::register_listener(std::function<void ()(std::vector<long long> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

void *std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EDC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EDC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

char *std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F149EDC0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F149EDC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_0>,void ()(std::vector<long long> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    CFNumberRef v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      CFStringRef v6 = v5;
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        uint64_t v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a2);
        if ((v8 & 1) == 0)
        {
          log = vp::get_log(v8);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
            unint64_t v11 = v18;
            unsigned __int8 v12 = __p[1];
            uint64_t v13 = vp::get_log(log_context_info);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              if ((v11 & 0x80u) == 0) {
                unint64_t v14 = v11;
              }
              else {
                unint64_t v14 = (unint64_t)v12;
              }
              __int16 v15 = (void **)__p[0];
              if ((v18 & 0x80u) == 0) {
                __int16 v15 = __p;
              }
              if (v14) {
                uint64_t v16 = " ";
              }
              else {
                uint64_t v16 = "";
              }
              *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
              uint64_t v20 = v15;
              __int16 v21 = 2080;
              int v22 = v16;
              _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%s%sfailed to update audio data analysis client reporter IDs", buf, 0x16u);
            }
            if ((char)v18 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void *std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EE08;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149EE08;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

char *std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F149EE08;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F149EE08;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1,std::allocator<vp::vx::components::Audio_Data_Analysis::register_listeners(void)::$_1>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    CFNumberRef v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      CFStringRef v6 = v5;
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        uint64_t v8 = *a2;
        if (v8) {
          CFRetain(v8);
        }
        CFTypeRef cf = v8;
        char v9 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v7 + 32))(v7, &cf);
        int v10 = (vp *)cf;
        if (cf) {
          CFRelease(cf);
        }
        if ((v9 & 1) == 0)
        {
          log = vp::get_log(v10);
          if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
          {
            log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis]", 39, __p);
            unint64_t v13 = v20;
            unint64_t v14 = __p[1];
            __int16 v15 = vp::get_log(log_context_info);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              if ((v13 & 0x80u) == 0) {
                unint64_t v16 = v13;
              }
              else {
                unint64_t v16 = (unint64_t)v14;
              }
              __int16 v17 = (void **)__p[0];
              if ((v20 & 0x80u) == 0) {
                __int16 v17 = __p;
              }
              if (v16) {
                unsigned __int8 v18 = " ";
              }
              else {
                unsigned __int8 v18 = "";
              }
              *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
              uint64_t v23 = v17;
              __int16 v24 = 2080;
              uint64_t v25 = v18;
              _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%s%sfailed to set audio application bundle ID", buf, 0x16u);
            }
            if ((char)v20 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1BB1F2274(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<vp::services::Audio_Data_Analysis::Client>::shared_ptr[abi:ne180100]<vp::services::Audio_Data_Analysis::Client,std::default_delete<vp::services::Audio_Data_Analysis::Client>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::services::Audio_Data_Analysis::Client  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::services::Audio_Data_Analysis::Client  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void vp::vx::components::Audio_Data_Analysis::Audio_Data_Analysis(std::__shared_weak_count **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  vp::vx::data_flow::State<void>::~State(a2);
  vp::vx::data_flow::State<void>::~State(a3);
  uint64_t v8 = *(std::__shared_weak_count **)(a4 + 40);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  char v9 = *(std::__shared_weak_count **)(a4 + 24);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t vp::vx::components::Audio_Injector::Audio_Injector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  *(void *)a1 = &unk_1F149EE88;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  vp::Domain_Pair<vp::vx::IO_Node_Audio_Injector_Factory>::Domain_Pair<vp::Context const&,vp::Allocator<std::byte> &>(a1 + 56, a2, &v16);
  uint64_t v4 = (vp *)vp::vx::data_flow::State<void>::State(a1 + 424);
  log = vp::get_log(v4);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Injector]", 34, __p);
    unint64_t v7 = v15;
    uint64_t v8 = __p[1];
    char v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = v7;
      }
      else {
        unint64_t v10 = (unint64_t)v8;
      }
      unint64_t v11 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        unint64_t v11 = __p;
      }
      if (v10) {
        unsigned __int8 v12 = " ";
      }
      else {
        unsigned __int8 v12 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      unsigned __int8 v18 = v11;
      __int16 v19 = 2080;
      unsigned __int8 v20 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1F2550(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  vp::vx::components::Phone_Proximity_Detector::Phone_Proximity_Detector(v1);
  _Unwind_Resume(a1);
}

void vp::vx::components::Audio_Injector::~Audio_Injector(std::__shared_weak_count **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Injector]", 34, __p);
    unint64_t v4 = v14;
    CFNumberRef v5 = __p[1];
    CFStringRef v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      uint64_t v8 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      if (v7) {
        char v9 = " ";
      }
      else {
        char v9 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v16 = v8;
      __int16 v17 = 2080;
      unsigned __int8 v18 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 53));
  vp::Domain_Pair<vp::vx::IO_Node_Audio_Injector_Factory>::~Domain_Pair((uint64_t)(this + 7));
  unint64_t v10 = this[6];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v11 = this[4];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned __int8 v12 = this[2];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  uint64_t vars8;

  vp::vx::components::Audio_Injector::~Audio_Injector(this);

  JUMPOUT(0x1C185D370);
}

char *vp::vx::components::Audio_Injector::as_io_node_decorator_factory(vp::vx::components::Audio_Injector *a1, int a2)
{
  BOOL is_enabled = vp::vx::components::Audio_Injector::is_enabled(a1);
  CFNumberRef v5 = (char *)a1 + 56;
  if (a2) {
    CFNumberRef v5 = (char *)a1 + 240;
  }
  if (is_enabled) {
    return v5;
  }
  else {
    return 0;
  }
}

BOOL vp::vx::components::Audio_Injector::is_enabled(vp::vx::components::Audio_Injector *this)
{
  uint64_t v1 = (char *)this + 424;
  BOOL result = vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)this + 424);
  if (result)
  {
    uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)result);
    vp::vx::data_flow::Value::Value(v5, default_resource);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
    int v4 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
    return v4 != 0;
  }
  return result;
}

void sub_1BB1F27CC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1F27BCLL);
}

void vp::vx::components::Audio_Injector::set_state_manager(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::Audio_Injector::set_state_observer(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::Audio_Injector::set_state_owner(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::components::Audio_Injector::configure(vp::vx::components::Audio_Injector *this)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Injector]", 34, &v70);
    uint64_t v4 = v72;
    uint64_t v5 = v71;
    CFStringRef v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v4 & 0x80u) == 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = v5;
      }
      uint64_t v8 = v70;
      if ((v72 & 0x80u) == 0) {
        uint64_t v8 = (void **)&v70;
      }
      if (v7) {
        char v9 = " ";
      }
      else {
        char v9 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      char v67 = v8;
      __int16 v68 = 2080;
      long long v69 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s%sconfigure", buf, 0x16u);
    }
    if ((char)v72 < 0) {
      operator delete(v70);
    }
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v10
    || (unint64_t v11 = std::__shared_weak_count::lock(v10)) == 0
    || (unsigned __int8 v12 = v11,
        uint64_t v13 = *((void *)this + 1),
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
        !v13))
  {
    uint64_t v34 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v34);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  unsigned __int8 v14 = (std::__shared_weak_count *)*((void *)this + 4);
  if (!v14
    || (unsigned __int8 v15 = std::__shared_weak_count::lock(v14)) == 0
    || (uint64_t v16 = v15,
        uint64_t v17 = *((void *)this + 3),
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed),
        !v17))
  {
    uint64_t v35 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v35);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  unsigned __int8 v18 = (std::__shared_weak_count *)*((void *)this + 6);
  if (!v18
    || (uint64_t v19 = std::__shared_weak_count::lock(v18)) == 0
    || (unsigned __int8 v20 = v19,
        uint64_t v21 = *((void *)this + 5),
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed),
        !v21))
  {
    uint64_t v36 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v36);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)0>(v21, (uint64_t)&v70);
  vp::vx::data_flow::State<void>::operator=((uint64_t)this + 424, (uint64_t)&v70);
  BOOL v22 = vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)this + 424);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v70);
  if (v22)
  {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = operator new(0x20uLL);
    void *v23 = &unk_1F149F138;
    v23[1] = v17;
    v23[2] = v16;
    std::string::size_type v65 = v23;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v64);
    uint64_t v73 = 0;
    __int16 v24 = (void **)operator new(0x28uLL);
    const char *v24 = &unk_1F1498B58;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v24 + 1), (uint64_t)buf);
    uint64_t v73 = v24;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)this + 424, (uint64_t)&v70);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](&v70);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v64);
    std::__shared_weak_count::__release_weak(v16);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)10>(v21, (uint64_t)v61);
    CFStringRef v70 = (void **)&unk_1F149EFD8;
    uint64_t v25 = v13 + 48;
    LOBYTE(v71) = 0;
    uint64_t v73 = (void **)&v70;
    v63[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::components::Audio_Injector *)((char *)this + 424));
    v63[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v61);
    vp::vx::data_flow::State_Manager::create_state(v13 + 48, (uint64_t)&v70, (uint64_t)buf);
    vp::vx::data_flow::State<void>::State((uint64_t)v64, (uint64_t)buf);
    vp::vx::data_flow::State<void>::~State(buf);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v70);
    vp::vx::data_flow::State<void>::State((uint64_t)v62, (uint64_t)v64);
    vp::vx::data_flow::State<void>::~State((uint64_t)v64);
    vp::vx::data_flow::State<void>::~State((uint64_t)v61);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v26 = operator new(0x20uLL);
    void *v26 = &unk_1F149F1C8;
    v26[1] = v17;
    v26[2] = v16;
    std::string::size_type v65 = v26;
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v64);
    uint64_t v73 = 0;
    uint64_t v27 = (void **)operator new(0x28uLL);
    vp::vx *v27 = &unk_1F149F180;
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)(v27 + 1), (uint64_t)buf);
    uint64_t v73 = v27;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v62, (uint64_t)&v70);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](&v70);
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100](v64);
    std::__shared_weak_count::__release_weak(v16);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>(v21, (uint64_t)v63);
    CFStringRef v70 = (void **)&unk_1F149F088;
    LOBYTE(v71) = 0;
    uint64_t v73 = (void **)&v70;
    v63[6] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::components::Audio_Injector *)((char *)this + 424));
    v63[7] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v63);
    vp::vx::data_flow::State_Manager::create_state(v25, (uint64_t)&v70, (uint64_t)buf);
    vp::vx::data_flow::State<void>::State((uint64_t)v64, (uint64_t)buf);
    vp::vx::data_flow::State<void>::~State(buf);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v70);
    vp::vx::data_flow::State<void>::State((uint64_t)v61, (uint64_t)v64);
    vp::vx::data_flow::State<void>::~State((uint64_t)v64);
    vp::vx::data_flow::State<void>::~State((uint64_t)v63);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v28 = operator new(0x20uLL);
    void *v28 = &unk_1F149F258;
    v28[1] = v17;
    v28[2] = v16;
    std::string::size_type v65 = v28;
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v64);
    uint64_t v73 = 0;
    char v29 = (void **)operator new(0x28uLL);
    *char v29 = &unk_1F149F210;
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)(v29 + 1), (uint64_t)buf);
    uint64_t v73 = v29;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v61, (uint64_t)&v70);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](&v70);
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100](v64);
    std::__shared_weak_count::__release_weak(v16);
    uint64_t v30 = 0;
    while (1)
    {
      int v31 = vp::domains(void)::s_domains[v30];
      if (v31) {
        long long v32 = (char *)this + 240;
      }
      else {
        long long v32 = (char *)this + 56;
      }
      if (v31 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v45, "dlfev");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 0, 0, 1, &v45);
        if (v46 < 0) {
          operator delete((void *)v45.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v43, "dloau");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 3u, 1u, 0, &v43);
        if (v44 < 0) {
          operator delete((void *)v43.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v41, "dlsso");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 3u, 2u, 0, &v41);
        if (v42 < 0) {
          operator delete((void *)v41.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v39, "dlvio");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 3u, 3u, 0, &v39);
        if (v40 < 0) {
          operator delete((void *)v39.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v37, "dlout");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 4u, 0, 1, &v37);
        if ((v38 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        __int16 v33 = &v37;
      }
      else
      {
        if (v31) {
          goto LABEL_55;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "hwmic");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 0, 0, 0, &__p);
        if (v60 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v57, "hwref");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 0, 1u, 0, &v57);
        if (v58 < 0) {
          operator delete((void *)v57.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v55, "tsmic");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 0, 0, 1, &v55);
        if (v56 < 0) {
          operator delete((void *)v55.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v53, "tsref");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 0, 1u, 1, &v53);
        if (v54 < 0) {
          operator delete((void *)v53.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v51, "epmic");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 2u, 0, 0, &v51);
        if (v52 < 0) {
          operator delete((void *)v51.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v49, "epref");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 2u, 1u, 0, &v49);
        if (v50 < 0) {
          operator delete((void *)v49.n128_u64[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v47, "ulout");
        vp::vx::IO_Node_Audio_Injector_Factory::add_audio_injector((uint64_t)v32, 3u, 0, 1, &v47);
        if ((v48 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        __int16 v33 = &v47;
      }
      operator delete((void *)v33->n128_u64[0]);
LABEL_55:
      if (++v30 == 2)
      {
        vp::vx::data_flow::State<void>::~State((uint64_t)v61);
        vp::vx::data_flow::State<void>::~State((uint64_t)v62);
        break;
      }
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
}

void sub_1BB1F312C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void vp::vx::components::Audio_Injector::begin_configuration_changes(vp::vx::components::Audio_Injector *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (!v2
    || (long long v3 = std::__shared_weak_count::lock(v2)) == 0
    || (uint64_t v4 = *((void *)this + 5),
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
        uint64_t v26 = v3,
        !v4))
  {
    uint64_t v25 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  for (uint64_t i = 0; i != 2; ++i)
  {
    if (vp::domains(void)::s_domains[i]) {
      CFStringRef v6 = (char *)this + 240;
    }
    else {
      CFStringRef v6 = (char *)this + 56;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "unkn");
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)10>(v4, (uint64_t)&v27);
    BOOL v7 = vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)&v27);
    if (v7)
    {
      uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v7);
      vp::vx::data_flow::Value::Value(&v29, default_resource);
      vp::vx::data_flow::State<void>::get_value((uint64_t)&v27, (vp::vx::data_flow::Value *)&v29);
      int v9 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v29);
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v29);
      uint64_t v10 = vp::vx::legacy_cast_noexcept<vp::vx::Input_Port_Type>(v9);
      if ((v10 & 0xFF00000000) != 0)
      {
        if (v10)
        {
          int v11 = bswap32(v10);
          *(_DWORD *)std::string __s = v11;
          if (((char)v11 - 32) > 0x5E
            || (((__int16)v11 >> 8) - 32) > 0x5E
            || ((v11 << 8 >> 24) - 32) > 0x5E
            || ((v11 >> 24) - 32) > 0x5E)
          {
            std::to_string(&v29, v10);
          }
          else
          {
            char v32 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v29, __s);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v29;
        }
      }
    }
    vp::vx::data_flow::State<void>::~State((uint64_t)&v27);
    v33[0] = __p.__r_.__value_.__l.__size_;
    std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
    *(void *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    if (v6[55] < 0) {
      operator delete(*((void **)v6 + 4));
    }
    uint64_t v14 = v33[0];
    *((void *)v6 + 4) = v12;
    *((void *)v6 + 5) = v14;
    *(void *)(v6 + 47) = *(void *)((char *)v33 + 7);
    v6[55] = v13;
    std::string::basic_string[abi:ne180100]<0>(&v27, "unkn");
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>(v4, (uint64_t)__s);
    BOOL v15 = vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)__s);
    if (v15)
    {
      uint64_t v16 = std::pmr::get_default_resource((std::pmr *)v15);
      vp::vx::data_flow::Value::Value(&v29, v16);
      vp::vx::data_flow::State<void>::get_value((uint64_t)__s, (vp::vx::data_flow::Value *)&v29);
      int v17 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v29);
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v29);
      uint64_t v18 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(v17);
      if ((v18 & 0xFF00000000) != 0)
      {
        if (v18)
        {
          int v19 = bswap32(v18);
          *(_DWORD *)uint64_t v34 = v19;
          if (((char)v19 - 32) > 0x5E
            || (((__int16)v19 >> 8) - 32) > 0x5E
            || ((v19 << 8 >> 24) - 32) > 0x5E
            || ((v19 >> 24) - 32) > 0x5E)
          {
            std::to_string(&v29, v18);
          }
          else
          {
            char v35 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v29, v34);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          std::string v27 = v29;
        }
      }
    }
    vp::vx::data_flow::State<void>::~State((uint64_t)__s);
    v30[0] = v27.__r_.__value_.__l.__size_;
    std::string::size_type v20 = v27.__r_.__value_.__r.__words[0];
    *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
    char v21 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    memset(&v27, 0, sizeof(v27));
    if (v6[79] < 0)
    {
      operator delete(*((void **)v6 + 7));
      int v23 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      uint64_t v24 = v30[0];
      *((void *)v6 + 7) = v20;
      *((void *)v6 + 8) = v24;
      *(void *)(v6 + 71) = *(void *)((char *)v30 + 7);
      v6[79] = v21;
      if (v23 < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v22 = v30[0];
      *((void *)v6 + 7) = v20;
      *((void *)v6 + 8) = v22;
      *(void *)(v6 + 71) = *(void *)((char *)v30 + 7);
      v6[79] = v21;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
}

void sub_1BB1F3678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1BB1F3744(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1BB1F375C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BB1F3734);
  }
  uint64_t v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

void sub_1BB1F37D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1BB1F37F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BB1F37C8);
  }
  uint64_t v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t vp::Domain_Pair<vp::vx::IO_Node_Audio_Injector_Factory>::~Domain_Pair(uint64_t a1)
{
  *(void *)(a1 + 184) = &unk_1F1493570;
  boost::container::vector<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>,vp::Allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>,void>::~vector((void *)(a1 + 336));
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector((void *)(a1 + 304));
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector((void *)(a1 + 272));
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  *(void *)a1 = &unk_1F1493570;
  boost::container::vector<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>,vp::Allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>,void>::~vector((void *)(a1 + 152));
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector((void *)(a1 + 120));
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector((void *)(a1 + 88));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_15Input_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__1JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_15Input_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__1JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F149EFD8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_15Input_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__1JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F149EFD8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_15Input_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__1JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  long long v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    CFStringRef v6 = (unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    CFStringRef v6 = 0;
  }
  BOOL v7 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  if (*v6) {
    uint64_t v8 = *v7 | 0x100000000;
  }
  else {
    uint64_t v8 = 0x100000000;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v9);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<std::optional<vp::vx::Input_Port_Type>>(void)::s_type_id;
  BOOL result = (uint64_t *)vp::vx::data_flow::Value::allocate_storage(v4);
  uint64_t *result = v8;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Input_Port_Type>>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Input_Port_Type>>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Input_Port_Type>>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Input_Port_Type>>::copy_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Input_Port_Type>>::move_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Input_Port_Type>>::compare_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 4)) {
    BOOL v3 = *(unsigned char *)(a3 + 4) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (*(unsigned char *)(a2 + 4) != 0) == (*(unsigned char *)(a3 + 4) != 0);
  }
  else {
    return *(_DWORD *)a2 == *(_DWORD *)a3;
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_16Output_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__3JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_16Output_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__3JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F149F088;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_16Output_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__3JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F149F088;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalINS3_16Output_Port_TypeEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_10components14Audio_Injector9configureEvE3__3JbS7_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbS7_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  BOOL v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    CFStringRef v6 = (unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    CFStringRef v6 = 0;
  }
  BOOL v7 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  if (*v6) {
    uint64_t v8 = *v7 | 0x100000000;
  }
  else {
    uint64_t v8 = 0x100000000;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v9);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<std::optional<vp::vx::Output_Port_Type>>(void)::s_type_id;
  BOOL result = (uint64_t *)vp::vx::data_flow::Value::allocate_storage(v4);
  uint64_t *result = v8;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Output_Port_Type>>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Output_Port_Type>>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Output_Port_Type>>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Output_Port_Type>>::copy_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Output_Port_Type>>::move_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<vp::vx::Output_Port_Type>>::compare_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 4)) {
    BOOL v3 = *(unsigned char *)(a3 + 4) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (*(unsigned char *)(a2 + 4) != 0) == (*(unsigned char *)(a3 + 4) != 0);
  }
  else {
    return *(_DWORD *)a2 == *(_DWORD *)a3;
  }
}

uint64_t vp::Domain_Pair<vp::vx::IO_Node_Audio_Injector_Factory>::Domain_Pair<vp::Context const&,vp::Allocator<std::byte> &>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = vp::vx::IO_Node_Audio_Injector_Factory::IO_Node_Audio_Injector_Factory(a1, a2, *a3);
  vp::vx::IO_Node_Audio_Injector_Factory::IO_Node_Audio_Injector_Factory(v6 + 184, a2, *a3);
  return a1;
}

void sub_1BB1F3D0C(_Unwind_Exception *a1)
{
  vp::vx::IO_Node_Audio_Injector_Factory::~IO_Node_Audio_Injector_Factory(v1);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void *std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F138;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F138;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F138;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F138;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::components::Audio_Injector::configure(void)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::components::Audio_Injector::configure(void)::$_0)::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    BOOL v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        if (*a3) {
          std::exception_ptr v10 = "enabled";
        }
        else {
          std::exception_ptr v10 = "disabled";
        }
        caulk::make_string((caulk *)"I/O node audio injectors are %s", (uint64_t)__p, v10);
        char v13 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 16))(v9, v6, __p);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F180;
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F180;
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149F180;
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1F417C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149F180;
  return std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<std::optional<vp::vx::Input_Port_Type>>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    BOOL result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F1C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F1C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F1C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F1C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Input_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_2>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Input_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_2)::{lambda(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    BOOL v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (!v9)
      {
LABEL_34:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
      uint64_t v10 = *a3;
      if ((v10 & 0xFF00000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, "microphone port type for audio injectors is undefined");
LABEL_31:
        std::string v22 = v24;
        char v23 = 1;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v9 + 16))(v9, v6, &v22);
        if (v23)
        {
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_34;
      }
      uint64_t v11 = vp::vx::legacy_cast_noexcept<vp::vx::Input_Port_Type>(v10);
      if ((v11 & 0xFF00000000) == 0) {
        LODWORD(v11) = 0;
      }
      int v12 = bswap32(v11);
      *(_DWORD *)((char *)__dst + 1) = v12;
      if (((char)v12 - 32) > 0x5E
        || (((__int16)v12 >> 8) - 32) > 0x5E
        || ((v12 << 8 >> 24) - 32) > 0x5E
        || ((v12 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v22, v11);
      }
      else
      {
        *(_WORD *)((char *)__dst + 5) = 39;
        LOBYTE(__dst[0]) = 39;
        std::string::basic_string[abi:ne180100]<0>(&v22, (char *)__dst);
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v13 = &v22;
      }
      else {
        char v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      uint64_t v14 = vp::reflect_value_name_tag<vp::vx::Input_Port_Type,128ul>(v10);
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v14;
      int v17 = (void *)v15;
      if (v15 >= 0x17)
      {
        uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v19 = v15 | 7;
        }
        uint64_t v20 = v19 + 1;
        uint64_t v18 = (void **)operator new(v19 + 1);
        __dst[1] = v17;
        int64_t v26 = v20 | 0x8000000000000000;
        __dst[0] = v18;
      }
      else
      {
        HIBYTE(v26) = v15;
        uint64_t v18 = __dst;
        if (!v15) {
          goto LABEL_25;
        }
      }
      memmove(v18, v16, (size_t)v17);
LABEL_25:
      *((unsigned char *)v17 + (void)v18) = 0;
      char v21 = __dst;
      if (v26 < 0) {
        char v21 = (void **)__dst[0];
      }
      caulk::make_string((caulk *)"microphone port type for audio injectors is %s (%s)", (uint64_t)&v24, v13, v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
  }
}

void sub_1BB1F4778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1F46E4);
}

void *std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Input_Port_Type> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F210;
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F210;
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149F210;
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1F49D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149F210;
  return std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>>::register_listener(std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<std::optional<vp::vx::Output_Port_Type>>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    BOOL result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F258;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F258;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F258;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F258;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1},std::allocator<void vp::vx::observe_global<std::optional<vp::vx::Output_Port_Type>,vp::vx::components::Audio_Injector::configure(void)::$_4>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::optional<vp::vx::Output_Port_Type>> &,vp::vx::components::Audio_Injector::configure(void)::$_4)::{lambda(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)#1}>,void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    BOOL v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (!v9)
      {
LABEL_34:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
      uint64_t v10 = *a3;
      if ((v10 & 0xFF00000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, "reference port type for audio injectors is undefined");
LABEL_31:
        std::string v22 = v24;
        char v23 = 1;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v9 + 16))(v9, v6, &v22);
        if (v23)
        {
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_34;
      }
      uint64_t v11 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(v10);
      if ((v11 & 0xFF00000000) == 0) {
        LODWORD(v11) = 0;
      }
      int v12 = bswap32(v11);
      *(_DWORD *)((char *)__dst + 1) = v12;
      if (((char)v12 - 32) > 0x5E
        || (((__int16)v12 >> 8) - 32) > 0x5E
        || ((v12 << 8 >> 24) - 32) > 0x5E
        || ((v12 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v22, v11);
      }
      else
      {
        *(_WORD *)((char *)__dst + 5) = 39;
        LOBYTE(__dst[0]) = 39;
        std::string::basic_string[abi:ne180100]<0>(&v22, (char *)__dst);
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v13 = &v22;
      }
      else {
        char v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      uint64_t v14 = vp::reflect_value_name_tag<vp::vx::Output_Port_Type,128ul>(v10);
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v14;
      int v17 = (void *)v15;
      if (v15 >= 0x17)
      {
        uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v19 = v15 | 7;
        }
        uint64_t v20 = v19 + 1;
        uint64_t v18 = (void **)operator new(v19 + 1);
        __dst[1] = v17;
        int64_t v26 = v20 | 0x8000000000000000;
        __dst[0] = v18;
      }
      else
      {
        HIBYTE(v26) = v15;
        uint64_t v18 = __dst;
        if (!v15) {
          goto LABEL_25;
        }
      }
      memmove(v18, v16, (size_t)v17);
LABEL_25:
      *((unsigned char *)v17 + (void)v18) = 0;
      char v21 = __dst;
      if (v26 < 0) {
        char v21 = (void **)__dst[0];
      }
      caulk::make_string((caulk *)"reference port type for audio injectors is %s (%s)", (uint64_t)&v24, v13, v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
  }
}

void sub_1BB1F4FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1F4F38);
}

void *std::__function::__value_func<void ()(unsigned int,std::optional<vp::vx::Output_Port_Type> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1BB1F52AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  a13 = *MEMORY[0x1E4FBA408];
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a13 + *(void *)(a13 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a15 = v33;
  a16 = MEMORY[0x1E4FBA470] + 16;
  if (a29 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C185D210](&a32);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1F5294);
}

uint64_t vp::vx::IO_Wire_Factory::IO_Wire_Factory(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 104) = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6 + 24;
  *(void *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v6;
  *(void *)a1 = &unk_1F149F2A8;
  *(void *)(a1 + 104) = &unk_1F149F2D8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  vp::vx::data_flow::State<void>::State(a1 + 32);
  vp::vx::data_flow::State<void>::State(a1 + 56);
  BOOL v7 = (vp *)vp::vx::data_flow::State<void>::State(a1 + 80);
  log = vp::get_log(v7);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::vx::get_log_context_info((vp::vx *)a1, __p);
    unint64_t v10 = v19;
    int v11 = (char)v19;
    int v12 = __p[1];
    char v13 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (v11 >= 0) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = (unint64_t)v12;
      }
      unint64_t v15 = (void **)__p[0];
      if (v11 >= 0) {
        unint64_t v15 = __p;
      }
      if (v14) {
        uint64_t v16 = " ";
      }
      else {
        uint64_t v16 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      char v21 = v15;
      __int16 v22 = 2080;
      char v23 = v16;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
      LOBYTE(v11) = v19;
    }
    if ((v11 & 0x80) != 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1F55C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Wire_Factory::~IO_Wire_Factory(std::__shared_weak_count **this, std::__shared_weak_count **a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *this = *a2;
  uint64_t v4 = (vp *)a2[3];
  *(std::__shared_weak_count **)((char *)this + (unint64_t)v3[-1].__vftable) = (std::__shared_weak_count *)v4;
  log = vp::get_log(v4);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::vx::get_log_context_info((vp::vx *)this, __p);
    unint64_t v7 = v16;
    int v8 = (char)v16;
    uint64_t v9 = __p[1];
    unint64_t v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (v8 >= 0) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = (unint64_t)v9;
      }
      int v12 = (void **)__p[0];
      if (v8 >= 0) {
        int v12 = __p;
      }
      if (v11) {
        char v13 = " ";
      }
      else {
        char v13 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v18 = v12;
      __int16 v19 = 2080;
      uint64_t v20 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
      LOBYTE(v8) = v16;
    }
    if ((v8 & 0x80) != 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 10));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 7));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 4));
  unint64_t v14 = this[3];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

void vp::vx::IO_Wire_Factory::~IO_Wire_Factory(std::__shared_weak_count **this)
{
  *(void *)(v1 + 104) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Wire_Factory::~IO_Wire_Factory(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Wire_Factory::~IO_Wire_Factory(vp::vx::IO_Wire_Factory *this)
{
  vp::vx::IO_Wire_Factory::~IO_Wire_Factory((std::__shared_weak_count **)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  vp::vx::IO_Wire_Factory::~IO_Wire_Factory((std::__shared_weak_count **)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void vp::vx::IO_Wire_Factory::new_wire(vp *a1@<X0>, const CA::StreamDescription *a2@<X2>, const CA::StreamDescription *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v56 = a4;
  log = vp::get_log(a1);
  BOOL v10 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    log_context_info = (vp *)vp::vx::get_log_context_info(a1, __p);
    uint64_t v12 = __p[23];
    int v13 = __p[23];
    uint64_t v14 = *(void *)&__p[8];
    unint64_t v15 = vp::get_log(log_context_info);
    BOOL v10 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      if (v13 >= 0) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v14;
      }
      int v17 = *(unsigned char **)__p;
      if (v13 >= 0) {
        int v17 = __p;
      }
      if (v16) {
        uint64_t v18 = " ";
      }
      else {
        uint64_t v18 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v18;
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%s%swill create wire", buf, 0x16u);
      LOBYTE(v13) = __p[23];
    }
    if ((v13 & 0x80) != 0) {
      operator delete(*(void **)__p);
    }
  }
  __n128 v55 = a1;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = std::pmr::get_default_resource((std::pmr *)v10);
  if (*(double *)a2 == *(double *)a3
    && *((_DWORD *)a2 + 2) == *((_DWORD *)a3 + 2)
    && *((_DWORD *)a2 + 4) == *((_DWORD *)a3 + 4)
    && *((_DWORD *)a2 + 5) == *((_DWORD *)a3 + 5)
    && *((_DWORD *)a2 + 7) == *((_DWORD *)a3 + 7)
    && *((_DWORD *)a2 + 8) == *((_DWORD *)a3 + 8)
    && CA::Implementation::EquivalentFormatFlags(a2, (const AudioStreamBasicDescription *)a3, 0, 0))
  {
    *(void *)std::__fs::filesystem::path buf = vp::vx::IO_Wire_Factory::get_storage_capacity(a1);
    vp::allocate_unique<vp::vx::io::wires::Audio_Pass_Through_Wire,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(&v56, a2, (uint64_t *)buf, (uint64_t)__p);
    uint64_t v19 = *(void *)__p;
    *(void *)std::string __p = 0;
    std::unique_ptr<vp::vx::io::Wire,vp::Allocator_Delete<vp::vx::io::Wire>>::reset[abi:ne180100]((void *)a5, v19);
    *(void *)(a5 + 8) = *(void *)&__p[8];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&__p[16];
    uint64_t v20 = (vp *)std::unique_ptr<vp::vx::io::wires::Audio_Pass_Through_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Pass_Through_Wire>>::reset[abi:ne180100](__p, 0);
  }
  else
  {
    *(void *)std::string __p = vp::vx::IO_Wire_Factory::get_storage_capacity(a1);
    vp::allocate_unique<vp::vx::io::wires::Audio_Converter_Wire,CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(&v56, a2, a3, (uint64_t *)__p, (uint64_t)v53);
    if (*(double *)a2 != *(double *)a3)
    {
      int sample_rate_conversion_algorithm = (vp *)vp::vx::IO_Wire_Factory::get_sample_rate_conversion_algorithm(a1);
      int v22 = (int)sample_rate_conversion_algorithm;
      char v23 = vp::get_log(sample_rate_conversion_algorithm);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = (vp *)vp::vx::get_log_context_info(a1, buf);
        uint64_t v25 = v58;
        int v26 = (char)v58;
        uint64_t v27 = *(void *)&buf[8];
        uint64_t v28 = vp::get_log(v24);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          if (v26 >= 0) {
            uint64_t v29 = v25;
          }
          else {
            uint64_t v29 = v27;
          }
          uint64_t v30 = *(unsigned char **)buf;
          if (v26 >= 0) {
            uint64_t v30 = buf;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v30;
          if (v29) {
            int v31 = " ";
          }
          else {
            int v31 = "";
          }
          *(_WORD *)&__p[12] = 2080;
          *(void *)&__p[14] = v31;
          *(_WORD *)&__p[22] = 1024;
          *(_DWORD *)&unsigned char __p[24] = v22;
          _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "%s%ssetting audio converter SRC algorithm to %u", __p, 0x1Cu);
          LOBYTE(v26) = v58;
        }
        if ((v26 & 0x80) != 0) {
          operator delete(*(void **)buf);
        }
      }
      vp::vx::io::wires::Audio_Converter_Wire::set_sample_rate_conversion_algorithm((AudioConverterRef *)v53[0], v22, (uint64_t)buf);
      vp::Expected<void,vp::vx::io::Error>::on_error<vp::vx::IO_Wire_Factory::new_wire(vp::vx::io::Model,CA::StreamDescription const&,CA::StreamDescription const&,vp::Allocator<std::byte>)::$_0 &>((uint64_t)buf, &v55, (uint64_t)__p);
      if (!v61) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
      }
      if (!v59) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
      }
      int sample_rate_conversion_quality = (vp *)vp::vx::IO_Wire_Factory::get_sample_rate_conversion_quality(a1);
      int v33 = (int)sample_rate_conversion_quality;
      uint64_t v34 = vp::get_log(sample_rate_conversion_quality);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        char v35 = (vp *)vp::vx::get_log_context_info(a1, buf);
        uint64_t v36 = v58;
        int v37 = (char)v58;
        uint64_t v38 = *(void *)&buf[8];
        __n128 v39 = vp::get_log(v35);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          if (v37 >= 0) {
            uint64_t v40 = v36;
          }
          else {
            uint64_t v40 = v38;
          }
          __n128 v41 = *(unsigned char **)buf;
          if (v37 >= 0) {
            __n128 v41 = buf;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v41;
          if (v40) {
            char v42 = " ";
          }
          else {
            char v42 = "";
          }
          *(_WORD *)&__p[12] = 2080;
          *(void *)&__p[14] = v42;
          *(_WORD *)&__p[22] = 1024;
          *(_DWORD *)&unsigned char __p[24] = v33;
          _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_DEBUG, "%s%ssetting audio converter SRC quality to %u", __p, 0x1Cu);
          LOBYTE(v37) = v58;
        }
        if ((v37 & 0x80) != 0) {
          operator delete(*(void **)buf);
        }
      }
      vp::vx::io::wires::Audio_Converter_Wire::set_sample_rate_conversion_quality((AudioConverterRef *)v53[0], v33, (uint64_t)buf);
      vp::Expected<void,vp::vx::io::Error>::on_error<vp::vx::IO_Wire_Factory::new_wire(vp::vx::io::Model,CA::StreamDescription const&,CA::StreamDescription const&,vp::Allocator<std::byte>)::$_0 &>((uint64_t)buf, &v55, (uint64_t)__p);
      if (!v61) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
      }
      if (!v59) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
      }
    }
    __n128 v43 = v53[0];
    v53[0] = 0;
    std::unique_ptr<vp::vx::io::Wire,vp::Allocator_Delete<vp::vx::io::Wire>>::reset[abi:ne180100]((void *)a5, (uint64_t)v43);
    *(vp::vx::io::wires::Audio_Converter_Wire **)(a5 + 8) = v53[1];
    *(_OWORD *)(a5 + 16) = v54;
    uint64_t v20 = (vp *)std::unique_ptr<vp::vx::io::wires::Audio_Converter_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Converter_Wire>>::reset[abi:ne180100](v53, 0);
  }
  char v44 = vp::get_log(v20);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    __n128 v45 = (vp *)vp::vx::get_log_context_info(a1, __p);
    uint64_t v46 = __p[23];
    int v47 = __p[23];
    uint64_t v48 = *(void *)&__p[8];
    __n128 v49 = vp::get_log(v45);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      if (v47 >= 0) {
        uint64_t v50 = v46;
      }
      else {
        uint64_t v50 = v48;
      }
      __n128 v51 = *(unsigned char **)__p;
      if (v47 >= 0) {
        __n128 v51 = __p;
      }
      if (v50) {
        char v52 = " ";
      }
      else {
        char v52 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      *(void *)&uint8_t buf[4] = v51;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v52;
      _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%s%sdid create wire", buf, 0x16u);
      LOBYTE(v47) = __p[23];
    }
    if ((v47 & 0x80) != 0) {
      operator delete(*(void **)__p);
    }
  }
}

void sub_1BB1F5DE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *vp::allocate_unique<vp::vx::io::wires::Audio_Pass_Through_Wire,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>@<X0>(uint64_t *a1@<X0>, const CA::StreamDescription *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872620;
  uint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Pass_Through_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Pass_Through_Wire,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::io::wires::Audio_Pass_Through_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Pass_Through_Wire>>::reset[abi:ne180100]((void *)a4, (uint64_t)v6);
}

void sub_1BB1F5E44(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::io::wires::Audio_Pass_Through_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Pass_Through_Wire>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Wire_Factory::get_storage_capacity(vp::vx::IO_Wire_Factory *this)
{
  uint64_t v1 = (char *)this + 80;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1F5EB8(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

void *vp::allocate_unique<vp::vx::io::wires::Audio_Converter_Wire,CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>@<X0>(uint64_t *a1@<X0>, const CA::StreamDescription *a2@<X1>, const CA::StreamDescription *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v6 = v9;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = v6;
  *(_OWORD *)(a5 + 16) = xmmword_1BB872630;
  unint64_t v7 = std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Converter_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Converter_Wire,CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(&v9, a2, a3, a4);
  return std::unique_ptr<vp::vx::io::wires::Audio_Converter_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Converter_Wire>>::reset[abi:ne180100]((void *)a5, (uint64_t)v7);
}

void sub_1BB1F5F20(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::io::wires::Audio_Converter_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Converter_Wire>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Wire_Factory::get_sample_rate_conversion_algorithm(vp::vx::IO_Wire_Factory *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1F5F94(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

__n128 vp::Expected<void,vp::vx::io::Error>::on_error<vp::vx::IO_Wire_Factory::new_wire(vp::vx::io::Model,CA::StreamDescription const&,CA::StreamDescription const&,vp::Allocator<std::byte>)::$_0 &>@<Q0>(uint64_t a1@<X0>, vp::vx **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a1 + 48);
  if (v4)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = v4;
  }
  else
  {
    uint64_t v6 = *a2;
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
    {
      log_context_info = (vp *)vp::vx::get_log_context_info(v6, __p);
      unint64_t v10 = v26;
      LODWORD(v11) = (char)v26;
      uint64_t v12 = __p[1];
      int v13 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        if ((int)v11 >= 0) {
          unint64_t v15 = v10;
        }
        else {
          unint64_t v15 = (unint64_t)v12;
        }
        if ((int)v11 >= 0) {
          unint64_t v11 = __p;
        }
        else {
          unint64_t v11 = (void **)__p[0];
        }
        if (v15) {
          uint64_t v16 = " ";
        }
        else {
          uint64_t v16 = "";
        }
        int v17 = *(unsigned __int16 *)(a1 + 4);
        int v18 = *(unsigned __int16 *)(a1 + 6);
        uint64_t log_source_file_path = vp::get_log_source_file_path(*(vp **)(a1 + 8), v14);
        uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)a1);
        if (*(char *)(node_commands + 23) >= 0) {
          uint64_t v21 = node_commands;
        }
        else {
          uint64_t v21 = *(void *)node_commands;
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136316418;
        uint64_t v28 = v11;
        __int16 v29 = 2080;
        uint64_t v30 = v16;
        char v31 = 0;
        char v32 = 4;
        int v33 = v17;
        __int16 v34 = 1024;
        int v35 = v18;
        __int16 v36 = 2080;
        uint64_t v37 = log_source_file_path;
        __int16 v38 = 2080;
        uint64_t v39 = v21;
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_FAULT, "%s%sunexpected error at line %u column %u in \"%s\" - %s", buf, 0x36u);
        LOBYTE(v11) = v26;
      }
      if ((v11 & 0x80) != 0) {
        operator delete(__p[0]);
      }
    }
    int v22 = *(unsigned __int8 *)(a1 + 48);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = v22;
    if (!v22)
    {
      int v23 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)a3 = *(_DWORD *)a1;
      *(_DWORD *)(a3 + 4) = v23;
      *(void *)(a3 + 8) = *(void *)(a1 + 8);
      __n128 result = *(__n128 *)(a1 + 16);
      long long v24 = *(_OWORD *)(a1 + 32);
      *(__n128 *)(a3 + 16) = result;
      *(_OWORD *)(a3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v24;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    }
  }
  return result;
}

uint64_t vp::vx::IO_Wire_Factory::get_sample_rate_conversion_quality(vp::vx::IO_Wire_Factory *this)
{
  uint64_t v1 = (char *)this + 56;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB1F61CC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

void vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 32;
  vp::vx::data_flow::State<void>::operator=(a1 + 32, a2);
  if (v2 == 1)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = operator new(0x20uLL);
    *uint64_t v8 = &unk_1F149F3E0;
    v8[1] = v4;
    void v8[2] = v3;
    unint64_t v11 = v8;
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
    uint64_t v14 = 0;
    unint64_t v7 = operator new(0x28uLL);
    goto LABEL_11;
  }
  if (!v2)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = &unk_1F149F398;
    v6[1] = v4;
    void v6[2] = v3;
    unint64_t v11 = v6;
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
    uint64_t v14 = 0;
    unint64_t v7 = operator new(0x28uLL);
LABEL_11:
    uint64_t v9 = v7;
    *unint64_t v7 = &unk_1F149D148;
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v12);
    uint64_t v14 = v9;
    vp::vx::data_flow::State<void>::register_listener(v5, (uint64_t)v13);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v10);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    return;
  }
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1BB1F63B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 56;
  vp::vx::data_flow::State<void>::operator=(a1 + 56, a2);
  if (v2 == 1)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = operator new(0x20uLL);
    *uint64_t v8 = &unk_1F149F470;
    v8[1] = v4;
    void v8[2] = v3;
    unint64_t v11 = v8;
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
    uint64_t v14 = 0;
    unint64_t v7 = operator new(0x28uLL);
    goto LABEL_11;
  }
  if (!v2)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = &unk_1F149F428;
    v6[1] = v4;
    void v6[2] = v3;
    unint64_t v11 = v6;
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
    uint64_t v14 = 0;
    unint64_t v7 = operator new(0x28uLL);
LABEL_11:
    uint64_t v9 = v7;
    *unint64_t v7 = &unk_1F149D148;
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v12);
    uint64_t v14 = v9;
    vp::vx::data_flow::State<void>::register_listener(v5, (uint64_t)v13);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v10);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    return;
  }
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1BB1F65B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Wire_Factory::set_storage_capacity(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 80;
  vp::vx::data_flow::State<void>::operator=(a1 + 80, a2);
  if (v2 == 1)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = operator new(0x20uLL);
    *uint64_t v8 = &unk_1F149F5B0;
    v8[1] = v4;
    void v8[2] = v3;
    unint64_t v11 = v8;
    std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
    uint64_t v14 = 0;
    unint64_t v7 = operator new(0x28uLL);
    goto LABEL_11;
  }
  if (!v2)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = &unk_1F149F568;
    v6[1] = v4;
    void v6[2] = v3;
    unint64_t v11 = v6;
    std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
    uint64_t v14 = 0;
    unint64_t v7 = operator new(0x28uLL);
LABEL_11:
    uint64_t v9 = v7;
    *unint64_t v7 = &unk_1F149F520;
    std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v12);
    uint64_t v14 = v9;
    vp::vx::data_flow::State<void>::register_listener(v5, (uint64_t)v13);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](v10);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    return;
  }
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1BB1F67A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Wire_Factory_Provider::create_io_wire_factory()
{
}

void vp::vx::IO_Wire_Factory_Provider::~IO_Wire_Factory_Provider(vp::vx::IO_Wire_Factory_Provider *this)
{
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, int a4)
{
  if (a4)
  {
    int32x4_t v4 = *(int32x4_t *)&a2->mFormatID;
    v4.i64[1] = *((void *)this + 1);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v4)))) {
      return 1;
    }
  }
  int v6 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 2) != 1819304813) {
    return v6 == a2->mFormatFlags;
  }
  int v7 = v6 & 0x7FFFFFFF;
  if ((v6 & 0x7FFFFFFF) == 0) {
    int v7 = *((_DWORD *)this + 3);
  }
  if (a3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v7 & 0xFFFFFFBF;
  }
  unsigned int v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    int v10 = *((_DWORD *)this + 7);
    if ((v6 & 0x20) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *((_DWORD *)this + 7);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *((_DWORD *)this + 8);
      int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_20;
    }
    unsigned int v9 = 0;
    unsigned int v12 = *((_DWORD *)this + 8);
    int v13 = v8 | 8;
  }
  else
  {
    int v13 = v8 | 8;
    int v10 = *((_DWORD *)this + 7);
    unsigned int v12 = *((_DWORD *)this + 8);
  }
  BOOL v14 = v12 == 0;
LABEL_20:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if (v17) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813) {
    return v20 == mFormatFlags;
  }
  AudioFormatFlags v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0) {
    AudioFormatFlags v22 = a2->mFormatFlags;
  }
  if (a3) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v22 & 0xFFFFFFBF;
  }
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    int v28 = v23 | 8;
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
LABEL_53:
    BOOL v29 = mBitsPerChannel == 0;
    goto LABEL_54;
  }
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v26 = 1;
  }
  else {
    UInt32 v26 = a2->mChannelsPerFrame;
  }
  if (!v26)
  {
    UInt32 mBytesPerFrame = 0;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    int v28 = v23 | 8;
    goto LABEL_53;
  }
  UInt32 mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  int v28 = v23 | 8;
  BOOL v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_54:
  if (v29) {
    unsigned int v23 = v28;
  }
  BOOL v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  unsigned int v31 = v23 & 0xFFFFFFEF;
  if (!v30) {
    unsigned int v31 = v23;
  }
  if (v31) {
    v31 &= ~4u;
  }
  BOOL v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  int v33 = v31 & 2;
  if (v32) {
    int v33 = v31;
  }
  if (mChannelsPerFrame == 1) {
    unsigned int v34 = v33 & 0xFFFFFFDF;
  }
  else {
    unsigned int v34 = v33;
  }
  if (v34) {
    AudioFormatFlags mFormatFlags = v34;
  }
  else {
    AudioFormatFlags mFormatFlags = 0x80000000;
  }
  return v20 == mFormatFlags;
}

char *vp::reflect_value_name_tag<vp::Domain,128ul>(int a1)
{
  if (a1)
  {
    int v2 = vp::detail::reflect_value_name<(vp::Domain)1,128ul>(a1);
    unint64_t v4 = v3;
    uint64_t v5 = vp::detail::reflect_value_name<(vp::Domain)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    int v2 = "vp::Domain::Uplink]";
    unint64_t v4 = 18;
    uint64_t v5 = "vp::Domain::Uplink]";
    uint64_t v6 = 18;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::Domain)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  __n128 result = "vp::Domain::Downlink]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)2]";
      break;
    case 2:
      __n128 result = "(vp::Domain)3]";
      break;
    case 3:
      __n128 result = "(vp::Domain)4]";
      break;
    case 4:
      __n128 result = "(vp::Domain)5]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)6,128ul>((int)"vp::Domain::Downlink]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  __n128 result = "(vp::Domain)6]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)7]";
      break;
    case 2:
      __n128 result = "(vp::Domain)8]";
      break;
    case 3:
      __n128 result = "(vp::Domain)9]";
      break;
    case 4:
      __n128 result = "(vp::Domain)10]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)11,128ul>((int)"(vp::Domain)6]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  __n128 result = "(vp::Domain)11]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)12]";
      break;
    case 2:
      __n128 result = "(vp::Domain)13]";
      break;
    case 3:
      __n128 result = "(vp::Domain)14]";
      break;
    case 4:
      __n128 result = "(vp::Domain)15]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)16,128ul>((int)"(vp::Domain)11]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  __n128 result = "(vp::Domain)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)17]";
      break;
    case 2:
      __n128 result = "(vp::Domain)18]";
      break;
    case 3:
      __n128 result = "(vp::Domain)19]";
      break;
    case 4:
      __n128 result = "(vp::Domain)20]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)21,128ul>((int)"(vp::Domain)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  __n128 result = "(vp::Domain)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)22]";
      break;
    case 2:
      __n128 result = "(vp::Domain)23]";
      break;
    case 3:
      __n128 result = "(vp::Domain)24]";
      break;
    case 4:
      __n128 result = "(vp::Domain)25]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)26,128ul>((int)"(vp::Domain)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  __n128 result = "(vp::Domain)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)27]";
      break;
    case 2:
      __n128 result = "(vp::Domain)28]";
      break;
    case 3:
      __n128 result = "(vp::Domain)29]";
      break;
    case 4:
      __n128 result = "(vp::Domain)30]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)31,128ul>((int)"(vp::Domain)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  __n128 result = "(vp::Domain)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)32]";
      break;
    case 2:
      __n128 result = "(vp::Domain)33]";
      break;
    case 3:
      __n128 result = "(vp::Domain)34]";
      break;
    case 4:
      __n128 result = "(vp::Domain)35]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)36,128ul>((int)"(vp::Domain)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  __n128 result = "(vp::Domain)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)37]";
      break;
    case 2:
      __n128 result = "(vp::Domain)38]";
      break;
    case 3:
      __n128 result = "(vp::Domain)39]";
      break;
    case 4:
      __n128 result = "(vp::Domain)40]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)41,128ul>((int)"(vp::Domain)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  __n128 result = "(vp::Domain)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)42]";
      break;
    case 2:
      __n128 result = "(vp::Domain)43]";
      break;
    case 3:
      __n128 result = "(vp::Domain)44]";
      break;
    case 4:
      __n128 result = "(vp::Domain)45]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)46,128ul>((int)"(vp::Domain)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  __n128 result = "(vp::Domain)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)47]";
      break;
    case 2:
      __n128 result = "(vp::Domain)48]";
      break;
    case 3:
      __n128 result = "(vp::Domain)49]";
      break;
    case 4:
      __n128 result = "(vp::Domain)50]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)51,128ul>((int)"(vp::Domain)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  __n128 result = "(vp::Domain)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)52]";
      break;
    case 2:
      __n128 result = "(vp::Domain)53]";
      break;
    case 3:
      __n128 result = "(vp::Domain)54]";
      break;
    case 4:
      __n128 result = "(vp::Domain)55]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)56,128ul>((int)"(vp::Domain)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  __n128 result = "(vp::Domain)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)57]";
      break;
    case 2:
      __n128 result = "(vp::Domain)58]";
      break;
    case 3:
      __n128 result = "(vp::Domain)59]";
      break;
    case 4:
      __n128 result = "(vp::Domain)60]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)61,128ul>((int)"(vp::Domain)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  __n128 result = "(vp::Domain)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)62]";
      break;
    case 2:
      __n128 result = "(vp::Domain)63]";
      break;
    case 3:
      __n128 result = "(vp::Domain)64]";
      break;
    case 4:
      __n128 result = "(vp::Domain)65]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)66,128ul>((int)"(vp::Domain)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  __n128 result = "(vp::Domain)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)67]";
      break;
    case 2:
      __n128 result = "(vp::Domain)68]";
      break;
    case 3:
      __n128 result = "(vp::Domain)69]";
      break;
    case 4:
      __n128 result = "(vp::Domain)70]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)71,128ul>((int)"(vp::Domain)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  __n128 result = "(vp::Domain)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)72]";
      break;
    case 2:
      __n128 result = "(vp::Domain)73]";
      break;
    case 3:
      __n128 result = "(vp::Domain)74]";
      break;
    case 4:
      __n128 result = "(vp::Domain)75]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)76,128ul>((int)"(vp::Domain)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  __n128 result = "(vp::Domain)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)77]";
      break;
    case 2:
      __n128 result = "(vp::Domain)78]";
      break;
    case 3:
      __n128 result = "(vp::Domain)79]";
      break;
    case 4:
      __n128 result = "(vp::Domain)80]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)81,128ul>((int)"(vp::Domain)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  __n128 result = "(vp::Domain)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)82]";
      break;
    case 2:
      __n128 result = "(vp::Domain)83]";
      break;
    case 3:
      __n128 result = "(vp::Domain)84]";
      break;
    case 4:
      __n128 result = "(vp::Domain)85]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)86,128ul>((int)"(vp::Domain)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  __n128 result = "(vp::Domain)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)87]";
      break;
    case 2:
      __n128 result = "(vp::Domain)88]";
      break;
    case 3:
      __n128 result = "(vp::Domain)89]";
      break;
    case 4:
      __n128 result = "(vp::Domain)90]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)91,128ul>((int)"(vp::Domain)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  __n128 result = "(vp::Domain)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)92]";
      break;
    case 2:
      __n128 result = "(vp::Domain)93]";
      break;
    case 3:
      __n128 result = "(vp::Domain)94]";
      break;
    case 4:
      __n128 result = "(vp::Domain)95]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)96,128ul>((int)"(vp::Domain)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  __n128 result = "(vp::Domain)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)97]";
      break;
    case 2:
      __n128 result = "(vp::Domain)98]";
      break;
    case 3:
      __n128 result = "(vp::Domain)99]";
      break;
    case 4:
      __n128 result = "(vp::Domain)100]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)101,128ul>((int)"(vp::Domain)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  __n128 result = "(vp::Domain)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)102]";
      break;
    case 2:
      __n128 result = "(vp::Domain)103]";
      break;
    case 3:
      __n128 result = "(vp::Domain)104]";
      break;
    case 4:
      __n128 result = "(vp::Domain)105]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)106,128ul>((int)"(vp::Domain)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  __n128 result = "(vp::Domain)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)107]";
      break;
    case 2:
      __n128 result = "(vp::Domain)108]";
      break;
    case 3:
      __n128 result = "(vp::Domain)109]";
      break;
    case 4:
      __n128 result = "(vp::Domain)110]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)111,128ul>((int)"(vp::Domain)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  __n128 result = "(vp::Domain)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)112]";
      break;
    case 2:
      __n128 result = "(vp::Domain)113]";
      break;
    case 3:
      __n128 result = "(vp::Domain)114]";
      break;
    case 4:
      __n128 result = "(vp::Domain)115]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)116,128ul>((int)"(vp::Domain)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  __n128 result = "(vp::Domain)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)117]";
      break;
    case 2:
      __n128 result = "(vp::Domain)118]";
      break;
    case 3:
      __n128 result = "(vp::Domain)119]";
      break;
    case 4:
      __n128 result = "(vp::Domain)120]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::Domain)121,128ul>((int)"(vp::Domain)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::Domain)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  __n128 result = "(vp::Domain)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::Domain)122]";
      break;
    case 2:
      __n128 result = "(vp::Domain)123]";
      break;
    case 3:
      __n128 result = "(vp::Domain)124]";
      break;
    case 4:
      __n128 result = "(vp::Domain)125]";
      break;
    case 5:
      __n128 result = "(vp::Domain)126]";
      break;
    case 6:
      __n128 result = "(vp::Domain)127]";
      break;
    default:
      if ("(vp::Domain)121]" == 128) {
        __n128 result = "(vp::Domain)128]";
      }
      else {
        __n128 result = "?";
      }
      break;
  }
  return result;
}

void *std::unique_ptr<vp::vx::io::wires::Audio_Pass_Through_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Pass_Through_Wire>>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    unint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    return (void *)(*(uint64_t (**)(void, uint64_t, void, void))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

vp::vx::io::wires::Audio_Pass_Through_Wire *std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Pass_Through_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Pass_Through_Wire,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(void *a1, const CA::StreamDescription *a2, uint64_t *a3)
{
  int v10 = (vp::vx::io::wires::Audio_Pass_Through_Wire *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 344, 8);
  v8[0] = &v10;
  v8[1] = a1;
  char v9 = 0;
  vp::vx::io::wires::Audio_Pass_Through_Wire::Audio_Pass_Through_Wire(v10, a2, *a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::io::wires::Audio_Pass_Through_Wire * std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Pass_Through_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Pass_Through_Wire,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB1F792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<vp::vx::io::wires::Audio_Pass_Through_Wire * std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Pass_Through_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Pass_Through_Wire,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 344, 8);
  }
  return a1;
}

void *std::unique_ptr<vp::vx::io::wires::Audio_Converter_Wire,vp::Allocator_Delete<vp::vx::io::wires::Audio_Converter_Wire>>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    unint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    return (void *)(*(uint64_t (**)(void, uint64_t, void, void))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

vp::vx::io::wires::Audio_Converter_Wire *std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Converter_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Converter_Wire,CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(void *a1, const CA::StreamDescription *a2, const CA::StreamDescription *a3, uint64_t *a4)
{
  unsigned int v12 = (vp::vx::io::wires::Audio_Converter_Wire *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 464, 8);
  v10[0] = &v12;
  v10[1] = a1;
  char v11 = 0;
  vp::vx::io::wires::Audio_Converter_Wire::Audio_Converter_Wire(v12, a2, a3, *a4);
  char v11 = 1;
  unint64_t v8 = v12;
  std::__exception_guard_exceptions<vp::vx::io::wires::Audio_Converter_Wire * std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Converter_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Converter_Wire,CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

void sub_1BB1F7AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<vp::vx::io::wires::Audio_Converter_Wire * std::pmr::polymorphic_allocator<vp::vx::io::wires::Audio_Converter_Wire>::new_object[abi:ne180100]<vp::vx::io::wires::Audio_Converter_Wire,CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(CA::StreamDescription const&,CA::StreamDescription const&,std::chrono::duration<long long,std::ratio<1l,1000l>> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 464, 8);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F398;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F398;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F398;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F398;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"I/O wire sample rate conversion algorithm is %u", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F3E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F3E0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F3E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F3E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"I/O wire sample rate conversion algorithm is %u", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F428;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F428;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F428;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F428;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"I/O wire sample rate conversion quality is %u", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F470;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F470;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F470;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F470;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_downlink<unsigned int,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"I/O wire sample rate conversion quality is %u", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::chrono::duration<long long,std::ratio<1l,1000l>>>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::chrono::duration<long long,std::ratio<1l,1000l>>>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::chrono::duration<long long,std::ratio<1l,1000l>>>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::chrono::duration<long long,std::ratio<1l,1000l>>>::copy_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::chrono::duration<long long,std::ratio<1l,1000l>>>::move_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<std::chrono::duration<long long,std::ratio<1l,1000l>>>::compare_value(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F520;
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F520;
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149F520;
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1F86B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149F520;
  return std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>::register_listener(std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    __n128 result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F568;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F568;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F568;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F568;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::operator()(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"I/O wire storage capacity is %lld milliseconds", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F5B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149F5B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149F5B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149F5B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_downlink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Wire_Factory::set_storage_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::operator()(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"I/O wire storage capacity is %lld milliseconds", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 32))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t vp::vx::components::Power_Log::Node_Delegate::Node_Delegate(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 72;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  uint64_t v9 = (char *)operator new(0x40uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v9 = &unk_1F1493738;
  *(_OWORD *)(v9 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v9 + 7) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(void *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v9 + 24;
  *(void *)(a1 + 88) = v9;
  *(void *)a1 = &unk_1F149F600;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F149F648;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(double *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v19 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v19);
  }
  if (!*(void *)(a1 + 24))
  {
    uint64_t v20 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v20);
  }
  if (a4 <= 0.0)
  {
    uint64_t v21 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v21);
  }
  log = vp::get_log((vp *)v9);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    vp::vx::io::get_log_context_info(v8, (uint64_t)"vp::vx::components::Power_Log::Node_Delegate]", 44, __p);
    unint64_t v11 = v23;
    char v12 = __p[1];
    BOOL v14 = vp::get_log(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      if ((v11 & 0x80u) == 0) {
        unint64_t v15 = v11;
      }
      else {
        unint64_t v15 = (unint64_t)v12;
      }
      BOOL v16 = (void **)__p[0];
      if ((v23 & 0x80u) == 0) {
        BOOL v16 = __p;
      }
      if (v15) {
        unsigned int v17 = " ";
      }
      else {
        unsigned int v17 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v25 = v16;
      __int16 v26 = 2080;
      uint64_t v27 = v17;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1F902C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate(caulk::concurrent::messenger **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (vp *)caulk::concurrent::messenger::drain(this[1]);
  log = vp::get_log(v2);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    vp::vx::io::get_log_context_info((uint64_t)(this + 9), (uint64_t)"vp::vx::components::Power_Log::Node_Delegate]", 44, __p);
    unint64_t v4 = v14;
    int v5 = __p[1];
    int v7 = vp::get_log(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v8 = v4;
      }
      else {
        unint64_t v8 = (unint64_t)v5;
      }
      uint64_t v9 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      if (v8) {
        int v10 = " ";
      }
      else {
        int v10 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      BOOL v16 = v9;
      __int16 v17 = 2080;
      BOOL v18 = v10;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v11 = (std::__shared_weak_count *)this[4];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  char v12 = (std::__shared_weak_count *)this[2];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

{
  uint64_t v1;
  std::__shared_weak_count *v2;

  vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate(this);
  *(void *)(v1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate(this);

  JUMPOUT(0x1C185D370);
}

void sub_1BB1F918C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void virtual thunk to'vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate(vp::vx::components::Power_Log::Node_Delegate *this)
{
  vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate((caulk::concurrent::messenger **)((char *)this
                                                                                               + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate((caulk::concurrent::messenger **)((char *)this
                                                                                               + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void vp::vx::components::Power_Log::Node_Delegate::get_parameter_ids(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1)
  {
    uint64_t v3 = operator new(8uLL);
    *a2 = v3;
    *v3++ = 0x736D6470736D7370;
    a2[1] = v3;
    a2[2] = v3;
  }
}

void vp::vx::components::Power_Log::Node_Delegate::get_property_ids(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t vp::vx::components::Power_Log::Node_Delegate::notify(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v3 = (vp::vx::components::Power_Log::Node_Delegate *)this;
  if (a2 == 1)
  {
    vp::vx::components::Power_Log::Node_Delegate::log_power_data((vp::vx::components::Power_Log::Node_Delegate *)this);
    return vp::vx::components::Power_Log::Node_Delegate::log_power_data(v3);
  }
  else if (!a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v5) {
      LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 8))(v5, 1936552816, 1);
    }
    *((_DWORD *)v3 + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *((_DWORD *)v3 + 12) & 0xFFFFFFFE | v5;
    this = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (this) {
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)this + 8))(this, 1936548976, 1);
    }
    *((_DWORD *)v3 + 14) = *((_DWORD *)v3 + 14) & 0xFFFFFFFE | this;
  }
  return this;
}

uint64_t vp::vx::components::Power_Log::Node_Delegate::log_power_data(vp::vx::components::Power_Log::Node_Delegate *this)
{
  unsigned int v2 = *((_DWORD *)this + 12);
  int v3 = v2 & 1;
  if (v2 < 2 || v3 == 0)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    *(float *)&unsigned int v5 = *((float *)this + 13) / (float)(v2 >> 1);
    *((_DWORD *)this + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
    *((_DWORD *)this + 13) = 0;
    uint64_t v6 = v5;
    uint64_t v7 = 0x100000000;
  }
  unsigned int v8 = *((_DWORD *)this + 14);
  int v9 = v8 & 1;
  if (v8 < 2 || v9 == 0)
  {
    uint64_t v12 = 0;
  }
  else
  {
    *(float *)&unsigned int v11 = *((float *)this + 15) / (float)(v8 >> 1);
    *((_DWORD *)this + 14) = v9;
    *((_DWORD *)this + 15) = 0;
    uint64_t v12 = v11 | 0x100000000;
  }
  int v13 = (caulk::concurrent::messenger *)*((void *)this + 1);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)uint64_t v14 = &unk_1F149F6E8;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v6 | v7;
  *(void *)(v14 + 28) = v12;
  uint64_t v16 = *((void *)this + 3);
  uint64_t v15 = *((void *)this + 4);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v14 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v16;
  *(void *)(v14 + 48) = v15;
  *(void *)uint64_t v14 = &unk_1F149F6C0;
  return caulk::concurrent::messenger::enqueue(v13, (caulk::concurrent::message *)v14);
}

void sub_1BB1F957C(void *a1)
{
}

void vp::vx::components::Power_Log::Node_Delegate::process(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    if (*(void *)(a1 + 64))
    {
      uint64_t v5 = mach_absolute_time();
      uint64_t v6 = *(void *)(a1 + 64);
      double v7 = (double)(uint64_t)(v5 - v6) * 0.0000000416666667;
      double v8 = *(double *)(a1 + 40);
      if (v7 >= v8)
      {
        double __y = 0.0;
        modf(v7 / v8, &__y);
        *(void *)(a1 + 64) = v6 + (uint64_t)(v8 * __y * 24000000.0);
        int v9 = 1;
      }
      else
      {
        int v9 = 0;
      }
    }
    else
    {
      int v9 = 0;
      *(void *)(a1 + 64) = mach_absolute_time();
    }
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
      if (v10)
      {
        (*(void (**)(double *__return_ptr))(*(void *)v10 + 24))(&v14);
      }
      else
      {
        vp::vx::io::Error::Error((uint64_t)&v24, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
        double __y = v24;
        long long v11 = v26;
        long long v22 = v27;
        long long v26 = 0uLL;
        *(void *)&long long v27 = 0;
        double v14 = v24;
        uint64_t v15 = v25;
        long long v16 = v11;
        long long v17 = v22;
        *(void *)&long long v22 = 0;
        uint64_t v20 = v25;
        long long v21 = 0uLL;
        char v18 = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__y);
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
      }
      if (v18)
      {
        *(float *)(a1 + 5boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(float *)caulk::expected<float,vp::vx::io::Error>::value((const vp::vx::io::Error *)&v14)
                            + *(float *)(a1 + 52);
        *(_DWORD *)(a1 + 48) += 2;
        char v23 = v18;
        if (v18) {
          goto LABEL_17;
        }
      }
      else
      {
        char v23 = 0;
      }
      double __y = v14;
      uint64_t v20 = v15;
      long long v21 = v16;
      long long v22 = v17;
      long long v16 = 0uLL;
      *(void *)&long long v17 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&__y);
      if (!v18) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v14);
      }
    }
LABEL_17:
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
      if (v12)
      {
        (*(void (**)(double *__return_ptr))(*(void *)v12 + 24))(&v14);
      }
      else
      {
        vp::vx::io::Error::Error((uint64_t)&v24, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
        double __y = v24;
        long long v13 = v26;
        long long v22 = v27;
        long long v26 = 0uLL;
        *(void *)&long long v27 = 0;
        double v14 = v24;
        uint64_t v15 = v25;
        long long v16 = v13;
        long long v17 = v22;
        *(void *)&long long v22 = 0;
        uint64_t v20 = v25;
        long long v21 = 0uLL;
        char v18 = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__y);
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
      }
      if (!v18)
      {
        char v23 = 0;
        goto LABEL_25;
      }
      *(float *)(a1 + 6std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(float *)caulk::expected<float,vp::vx::io::Error>::value((const vp::vx::io::Error *)&v14)
                          + *(float *)(a1 + 60);
      *(_DWORD *)(a1 + 56) += 2;
      char v23 = v18;
      if (!v18)
      {
LABEL_25:
        double __y = v14;
        uint64_t v20 = v15;
        long long v21 = v16;
        long long v22 = v17;
        long long v16 = 0uLL;
        *(void *)&long long v17 = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__y);
        if (!v18) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v14);
        }
      }
    }
    if (v9) {
      vp::vx::components::Power_Log::Node_Delegate::log_power_data((vp::vx::components::Power_Log::Node_Delegate *)a1);
    }
  }
}

uint64_t vp::vx::components::Power_Log::Node_Delegate_Factory::Node_Delegate_Factory(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(a1 + 48) = &unk_1F1493718;
  double v8 = (char *)operator new(0x40uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)double v8 = &unk_1F1493738;
  *(_OWORD *)(v8 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(void *)(a1 + 56) = v8 + 24;
  *(void *)(a1 + 64) = v8;
  *(void *)a1 = &unk_1F149F670;
  *(void *)(a1 + 48) = &unk_1F149F6A0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(double *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = a4;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v10 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v10);
  }
  if (!*(void *)(a1 + 24))
  {
    uint64_t v11 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v11);
  }
  if (a4 <= 0.0)
  {
    uint64_t v12 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
  }
  return a1;
}

caulk::concurrent::messenger ***vp::vx::components::Power_Log::Node_Delegate_Factory::new_node_delegate(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v10[1] = a5;
  uint64_t v11 = a3;
  v10[0] = a4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if (v7
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 8))(v7, 1936552816, 1) & 1) != 0
    || (__n128 result = (caulk::concurrent::messenger ***)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2)) != 0
    && (__n128 result = (caulk::concurrent::messenger ***)((uint64_t (*)(caulk::concurrent::messenger ***, uint64_t, uint64_t))(*result)[1])(result, 1936548976, 1), result))
  {
    vp::allocate_unique<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>(&v11, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 24), (double *)(a1 + 40), (uint64_t)v12);
    long long v9 = v12[0];
    *(void *)&v12[0] = 0;
    v13[0] = v9;
    v13[1] = v12[1];
    caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>)>::operator()(v10, (uint64_t *)v13);
    std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100](v13, 0);
    return std::unique_ptr<vp::vx::components::Power_Log::Node_Delegate,vp::Allocator_Delete<vp::vx::components::Power_Log::Node_Delegate>>::reset[abi:ne180100]((caulk::concurrent::messenger ***)v12, 0);
  }
  return result;
}

void sub_1BB1F9BB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, caulk::concurrent::messenger **);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100]((uint64_t *)va1, 0);
  std::unique_ptr<vp::vx::components::Power_Log::Node_Delegate,vp::Allocator_Delete<vp::vx::components::Power_Log::Node_Delegate>>::reset[abi:ne180100]((caulk::concurrent::messenger ***)va, 0);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1F9B9CLL);
}

void vp::vx::components::Power_Log::Node_Delegate_Factory::~Node_Delegate_Factory(vp::vx::components::Power_Log::Node_Delegate_Factory *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 6) = &unk_1F1493718;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 6) = &unk_1F1493718;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::components::Power_Log::Node_Delegate_Factory::~Node_Delegate_Factory(vp::vx::components::Power_Log::Node_Delegate_Factory *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  unsigned int v2 = (std::__shared_weak_count *)v1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  v1[6] = &unk_1F1493718;
  unint64_t v4 = (std::__shared_weak_count *)v1[8];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  unsigned int v2 = (std::__shared_weak_count *)v1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  v1[6] = &unk_1F1493718;
  unint64_t v4 = (std::__shared_weak_count *)v1[8];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

void caulk::concurrent::details::rt_message_call<vp::vx::components::Power_Log::Node_Delegate::log_power_data(void)::$_0::operator() const(void)::{lambda(std::shared_ptr<vp::services::Power_Log> const&)#1},std::shared_ptr<vp::services::Power_Log>&>::~rt_message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F149F6E8;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F149F6E8;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<vp::vx::components::Power_Log::Node_Delegate::log_power_data(void)::$_0::operator() const(void)::{lambda(std::shared_ptr<vp::services::Power_Log> const&)#1},std::shared_ptr<vp::services::Power_Log>&>::perform(uint64_t a1)
{
  unsigned int v2 = (caulk::concurrent::message *)a1;
  (*(void (**)(void, void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 20), *(void *)(a1 + 28));
  return caulk::concurrent::details::rt_message_call<vp::vx::components::Power_Log::Node_Delegate::log_power_data(void)::$_0::operator() const(void)::{lambda(std::shared_ptr<vp::services::Power_Log> const&)#1},std::shared_ptr<vp::services::Power_Log>&>::rt_cleanup::~rt_cleanup(&v2);
}

void caulk::concurrent::details::message_call<vp::vx::components::Power_Log::Node_Delegate::log_power_data(void)::$_0::operator() const(void)::{lambda(std::shared_ptr<vp::services::Power_Log> const&)#1},std::shared_ptr<vp::services::Power_Log>&>::~message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F149F6E8;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F149F6E8;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

uint64_t caulk::concurrent::details::message_call<vp::vx::components::Power_Log::Node_Delegate::log_power_data(void)::$_0::operator() const(void)::{lambda(std::shared_ptr<vp::services::Power_Log> const&)#1},std::shared_ptr<vp::services::Power_Log>&>::perform(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 20), *(void *)(a1 + 28));
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<vp::vx::components::Power_Log::Node_Delegate::log_power_data(void)::$_0::operator() const(void)::{lambda(std::shared_ptr<vp::services::Power_Log> const&)#1},std::shared_ptr<vp::services::Power_Log>&>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  unsigned int v2 = *a1;
  *(void *)unsigned int v2 = &unk_1F149F6E8;
  int v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 56, 8);
  return a1;
}

caulk::concurrent::messenger ***vp::allocate_unique<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v6 = v9;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = v6;
  *(_OWORD *)(a5 + 16) = xmmword_1BB872530;
  uint64_t v7 = (caulk::concurrent::messenger **)std::pmr::polymorphic_allocator<vp::vx::components::Power_Log::Node_Delegate>::new_object[abi:ne180100]<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>(&v9, a2, a3, a4);
  return std::unique_ptr<vp::vx::components::Power_Log::Node_Delegate,vp::Allocator_Delete<vp::vx::components::Power_Log::Node_Delegate>>::reset[abi:ne180100]((caulk::concurrent::messenger ***)a5, v7);
}

void sub_1BB1FA100(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::components::Power_Log::Node_Delegate,vp::Allocator_Delete<vp::vx::components::Power_Log::Node_Delegate>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

caulk::concurrent::messenger ***std::unique_ptr<vp::vx::components::Power_Log::Node_Delegate,vp::Allocator_Delete<vp::vx::components::Power_Log::Node_Delegate>>::reset[abi:ne180100](caulk::concurrent::messenger ***result, caulk::concurrent::messenger **a2)
{
  unsigned int v2 = *result;
  void *result = a2;
  if (v2)
  {
    int v3 = result;
    vp::vx::components::Power_Log::Node_Delegate::~Node_Delegate(v2);
    return (caulk::concurrent::messenger ***)(*((uint64_t (**)(caulk::concurrent::messenger **, caulk::concurrent::messenger **, caulk::concurrent::messenger **, caulk::concurrent::messenger **))*v3[1]
                                              + 3))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::components::Power_Log::Node_Delegate>::new_object[abi:ne180100]<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>(void *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 96, 8);
  v10[0] = &v12;
  v10[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::components::Power_Log::Node_Delegate>::construct[abi:ne180100]<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>((uint64_t)a1, v12, a2, a3, a4);
  char v11 = 1;
  uint64_t v8 = v12;
  std::__exception_guard_exceptions<vp::vx::components::Power_Log::Node_Delegate * std::pmr::polymorphic_allocator<vp::vx::components::Power_Log::Node_Delegate>::new_object[abi:ne180100]<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>(std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

void sub_1BB1FA22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pmr::polymorphic_allocator<vp::vx::components::Power_Log::Node_Delegate>::construct[abi:ne180100]<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, double *a5)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  char v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v8 = *a4;
  uint64_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::components::Power_Log::Node_Delegate::Node_Delegate(a2, (uint64_t)&v10, (uint64_t)&v8, *a5);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v7 = v11;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::components::Power_Log::Node_Delegate * std::pmr::polymorphic_allocator<vp::vx::components::Power_Log::Node_Delegate>::new_object[abi:ne180100]<vp::vx::components::Power_Log::Node_Delegate,std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&>(std::shared_ptr<caulk::concurrent::messenger> const&,std::shared_ptr<vp::services::Power_Log> const&,double const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 96, 8);
  }
  return a1;
}

vp::services::Model_Manager_Impl::Model_Manager_Monitor *vp::services::Model_Manager_Impl::Model_Manager_Monitor::Model_Manager_Monitor(vp::services::Model_Manager_Impl::Model_Manager_Monitor *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)this = &unk_1F149F710;
  *((void *)this + 3) = 0;
  unsigned int v2 = (id *)((char *)this + 24);
  *((unsigned char *)this + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *((unsigned char *)this + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  int v3 = objc_alloc_init(ModelManagerMonitor);
  vp::objc::ID::ID((vp::objc::ID *)&v5, (objc_object *)v3);
  vp::objc::ID::operator=(v2, &v5);
  vp::objc::ID::~ID((vp::objc::ID *)&v5);

  return this;
}

void sub_1BB1FA3D0(_Unwind_Exception *a1)
{
  vp::objc::ID::~ID(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void vp::services::Model_Manager_Impl::Model_Manager_Monitor::register_listener(uint64_t a1, uint64_t a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  id v4 = *(id *)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    id v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3321888768;
    v9[2] = ___ZN2vp8services18Model_Manager_Impl21Model_Manager_Monitor17register_listenerENSt3__18functionIFvbEEE_block_invoke;
    void v9[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvbEEE_e8_v12__0B8l;
    std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v10, a2);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3321888768;
    v7[2] = ___ZN2vp8services18Model_Manager_Impl21Model_Manager_Monitor17register_listenerENSt3__18functionIFvbEEE_block_invoke_1;
    void v7[3] = &__block_descriptor_48_ea8_32c80_ZTSNSt3__18weak_ptrIN2vp8services18Model_Manager_Impl21Model_Manager_MonitorEEE_e8_v16__0q8l;
    void v7[4] = v6;
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    objc_msgSend(v4, "register_for_inference_monitor_eventsWithEventCallback:completionHandler:", v9, v7);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v10);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BB1FA560(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN2vp8services18Model_Manager_Impl21Model_Manager_Monitor17register_listenerENSt3__18functionIFvbEEE_block_invoke(uint64_t a1, char a2)
{
  return std::function<void ()(BOOL)>::operator()(a1 + 32, a2);
}

uint64_t std::function<void ()(BOOL)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void ___ZN2vp8services18Model_Manager_Impl21Model_Manager_Monitor17register_listenerENSt3__18functionIFvbEEE_block_invoke_1(uint64_t a1, uint64_t a2)
{
  int v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    id v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        *(void *)(v6 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a2;
        *(unsigned char *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t __copy_helper_block_ea8_32c80_ZTSNSt3__18weak_ptrIN2vp8services18Model_Manager_Impl21Model_Manager_MonitorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(a2 + 32);
  *(void *)(result + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c80_ZTSNSt3__18weak_ptrIN2vp8services18Model_Manager_Impl21Model_Manager_MonitorEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void vp::services::Model_Manager_Impl::Model_Manager_Monitor::unregister_listener(id *this)
{
  id v2 = this[3];
  if (v2 && *((unsigned char *)this + 40))
  {
    id v3 = v2;
    objc_msgSend(v2, "unregister_from_inference_monitorWithObserver:completionHandler:", this[4], &__block_literal_global);
    id v2 = v3;
  }
}

double vp::services::Model_Manager_Impl::create_monitor@<D0>(_OWORD *a1@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN2vp8services18Model_Manager_Impl21Model_Manager_MonitorENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v4);
  double result = v4[0];
  *a1 = *(_OWORD *)v4;
  return result;
}

void vp::services::Model_Manager_Impl::~Model_Manager_Impl(vp::services::Model_Manager_Impl *this)
{
}

void vp::services::Model_Manager_Impl::Model_Manager_Monitor::~Model_Manager_Monitor(vp::services::Model_Manager_Impl::Model_Manager_Monitor *this)
{
  vp::objc::ID::~ID((vp::services::Model_Manager_Impl::Model_Manager_Monitor *)((char *)this + 24));
  id v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  vp::objc::ID::~ID((vp::services::Model_Manager_Impl::Model_Manager_Monitor *)((char *)this + 24));
  id v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  char v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void _ZNSt3__115allocate_sharedB8ne180100IN2vp8services18Model_Manager_Impl21Model_Manager_MonitorENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  id v2 = operator new(0x48uLL);
  _ZNSt3__120__shared_ptr_emplaceIN2vp8services18Model_Manager_Impl21Model_Manager_MonitorENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;

  std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::__enable_weak_this[abi:ne180100]<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block,caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1BB1FA8A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN2vp8services18Model_Manager_Impl21Model_Manager_MonitorENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F149F7E8;
  vp::services::Model_Manager_Impl::Model_Manager_Monitor::Model_Manager_Monitor((vp::services::Model_Manager_Impl::Model_Manager_Monitor *)(a1 + 3));
  return a1;
}

void sub_1BB1FA904(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vp::services::Model_Manager_Impl::Model_Manager_Monitor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F149F7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vp::services::Model_Manager_Impl::Model_Manager_Monitor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F149F7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<vp::services::Model_Manager_Impl::Model_Manager_Monitor>::__on_zero_shared(uint64_t a1)
{
}

void std::__destroy_at[abi:ne180100]<vp::services::Model_Manager_Impl::Model_Manager_Monitor,0>(uint64_t a1)
{
  vp::objc::ID::~ID((vp::objc::ID *)(a1 + 24));
  id v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t vp::vx::components::Audio_Data_Analysis::Node_Decorator::Node_Decorator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 136) = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v6 + 7) = 0;
  *(void *)(a1 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 144) = v6 + 24;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v17 = v7;
  long long v18 = *(_OWORD *)(a2 + 1);
  uint64_t v19 = a2[3];
  vp::vx::io::Node_Decorator::Node_Decorator(a1, (uint64_t *)off_1F149F8D8, (uint64_t)&v17);
  uint64_t v8 = (std::pmr *)std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](&v17, 0);
  *(void *)a1 = &unk_1F149F828;
  *(void *)(a1 + 136) = &unk_1F149F8C0;
  *(_OWORD *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource(v8);
  *(void *)(a1 + 56) = default_resource;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v10 = (vp *)std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 96) = 0;
  log = (caulk::deferred_logger *)vp::get_log(v10);
  caulk::deferred_logger::create_v(log, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  double v14 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v14)
  {
    if (v13) {
      return a1;
    }
LABEL_6:
    uint64_t v16 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v16);
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!v13) {
    goto LABEL_6;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  return a1;
}

void sub_1BB1FAB7C(_Unwind_Exception *a1)
{
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v4);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v3);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  vp::vx::io::Node_Decorator::~Node_Decorator(v1, (uint64_t *)off_1F149F8D8);
  *((void *)v1 + 17) = v2;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 19);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

void vp::vx::components::Audio_Data_Analysis::Node_Decorator::add_tap_point(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  unsigned int v9 = a2;
  if (a3) {
    id v5 = (void *)(a1 + 88);
  }
  else {
    id v5 = (void *)(a1 + 56);
  }
  uint64_t v6 = boost::container::flat_map<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point,std::less<unsigned int>,vp::Allocator<std::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_subscript(v5, &v9);
  *uint64_t v6 = *(_DWORD *)a4;
  uint64_t v7 = (const void *)*((void *)v6 + 1);
  uint64_t v8 = *(const void **)(a4 + 8);
  *((void *)v6 + 1) = v8;
  if (v8) {
    CFRetain(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t vp::vx::components::Audio_Data_Analysis::Node_Decorator::process(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5)
  {
    uint64_t v13 = 24 * v5;
    do
    {
      if (!v6) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v14 = *v6;
      if (a3 <= v14)
      {
        uint64_t v29 = _os_crash();
        caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v29);
      }
      if (((*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), v6[2], *(void *)(a2 + 24 * v14), *(unsigned int *)(a2 + 24 * v14 + 16), *(void *)(a2 + 24 * v14 + 8)) & 1) == 0)
      {
        uint64_t v15 = _os_log_pack_size();
        uint64_t message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 120), v15 + 88, 16);
        if (message)
        {
          uint64_t v17 = (caulk::concurrent::message *)message;
          long long v18 = (_DWORD *)_os_log_pack_fill();
          int v19 = *v6;
          *long long v18 = 67109120;
          v18[1] = v19;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(a1 + 120) + 16), v17);
        }
      }
      v6 += 6;
      v13 -= 24;
    }
    while (v13);
  }
  uint64_t result = vp::vx::io::Node_Decorator::process(a1);
  long long v22 = *(unsigned int **)(a1 + 96);
  uint64_t v21 = *(void *)(a1 + 104);
  if (!v22 && v21) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v21)
  {
    uint64_t v23 = 24 * v21;
    do
    {
      if (!v22) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v24 = *v22;
      if (a5 <= v24)
      {
        uint64_t v30 = _os_crash();
        caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v30);
      }
      uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), v22[2], *(void *)(a4 + 24 * v24), *(unsigned int *)(a4 + 24 * v24 + 16), *(void *)(a4 + 24 * v24 + 8));
      if ((result & 1) == 0)
      {
        uint64_t v25 = _os_log_pack_size();
        uint64_t result = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 120), v25 + 88, 16);
        if (result)
        {
          long long v26 = (caulk::concurrent::message *)result;
          long long v27 = (_DWORD *)_os_log_pack_fill();
          int v28 = *v22;
          _DWORD *v27 = 67109120;
          v27[1] = v28;
          uint64_t result = caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(a1 + 120) + 16), v26);
        }
      }
      v22 += 6;
      v23 -= 24;
    }
    while (v23);
  }
  return result;
}

void vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory::add_tap_point(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  if (a4) {
    uint64_t v6 = (void *)(a1 + 56);
  }
  else {
    uint64_t v6 = (void *)(a1 + 24);
  }
  unint64_t v10 = a2 | ((unint64_t)a3 << 32);
  BOOL v7 = boost::container::flat_map<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<std::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_subscript(v6, (unsigned int *)&v10);
  *BOOL v7 = *(_DWORD *)a5;
  uint64_t v8 = (const void *)*((void *)v7 + 1);
  unsigned int v9 = *(const void **)(a5 + 8);
  *((void *)v7 + 1) = v9;
  if (v9) {
    CFRetain(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory::new_node_decorator@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  __n128 v53 = (uint64_t *)(result + 8);
  if (!*(void *)(result + 8)) {
    goto LABEL_23;
  }
  uint64_t v9 = result;
  unint64_t v10 = (uint64_t (***)(void, uint64_t))(*(uint64_t (**)(void))(**(void **)a3 + 24))();
  if (v10)
  {
    uint64_t result = (**v10)(v10, 1633968493);
    if (result) {
      goto LABEL_23;
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 40))();
  if (result) {
    goto LABEL_23;
  }
  char v11 = 0;
  uint64_t v12 = v9 + 24;
  uint64_t v13 = v9 + 56;
  unint64_t v14 = (char *)&vp::vx::io::directions(void)::s_directions;
  do
  {
    if (*(_DWORD *)v14) {
      uint64_t v15 = v9 + 56;
    }
    else {
      uint64_t v15 = v9 + 24;
    }
    uint64_t v16 = *(_DWORD **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
    if (v16) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = v17 == 0;
    }
    if (!v18) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if (v17)
    {
      uint64_t v19 = 24 * v17;
      while (1)
      {
        if (!v16) {
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        }
        if (*v16 == a2) {
          break;
        }
        v16 += 6;
        v19 -= 24;
        if (!v19) {
          goto LABEL_21;
        }
      }
      char v11 = 1;
    }
LABEL_21:
    v14 += 4;
  }
  while (v14 != "N5caulk19bad_expected_accessIiEE");
  if ((v11 & 1) == 0)
  {
LABEL_23:
    uint64_t v20 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)a5 = v20;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a5 + 24) = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v50 = (_OWORD *)a5;
    *(void *)std::__fs::filesystem::path buf = a4;
    vp::allocate_unique<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>((uint64_t *)buf, a3, v53, (uint64_t)v61);
    uint64_t v21 = (char *)&vp::vx::io::directions(void)::s_directions;
    uint64_t v51 = v9 + 56;
    uint64_t v52 = v9 + 24;
    do
    {
      int v22 = *(_DWORD *)v21;
      if (*(_DWORD *)v21) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = v12;
      }
      uint64_t v25 = *(void *)(v23 + 8);
      uint64_t v24 = *(void *)(v23 + 16);
      if (v25) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = v24 == 0;
      }
      if (!v26) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (v24)
      {
        uint64_t v27 = v25 + 8;
        uint64_t v28 = 24 * v24;
        do
        {
          if (v27 == 8) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          int v29 = *(_DWORD *)(v27 - 8);
          unsigned int v30 = *(_DWORD *)(v27 - 4);
          unsigned int v59 = *(_DWORD *)v27;
          CFTypeRef v31 = *(CFTypeRef *)(v27 + 8);
          if (v31) {
            CFRetain(*(CFTypeRef *)(v27 + 8));
          }
          CFTypeRef cf = v31;
          if (v29 == a2)
          {
            if (vp::vx::io::Node_Decorator::get_terminal_count((uint64_t)v61[0]) > v30)
            {
              uint64_t v32 = *v53;
              uint64_t v33 = v59;
              CFTypeRef v34 = cf;
              if (cf) {
                CFRetain(cf);
              }
              CFTypeRef v58 = v34;
              vp::vx::io::Node_Decorator::get_terminal_format((uint64_t)v61[0]);
              block_CFIndex size = vp::vx::io::Node_Decorator::get_block_size(v61[0]);
              char v36 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, unsigned char *, uint64_t, BOOL))(*(void *)v32 + 40))(v32, v33, &v58, buf, block_size, v22 == 1);
              if (!v68) {
                vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
              }
              uint64_t v37 = (vp *)v58;
              if (v58) {
                CFRelease(v58);
              }
              if ((v36 & 1) == 0)
              {
                log = vp::get_log(v37);
                if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
                {
                  log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory]", 63, v56);
                  unint64_t v40 = v57;
                  __n128 v41 = v56[1];
                  char v42 = vp::get_log(log_context_info);
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  {
                    if ((v40 & 0x80u) == 0) {
                      unint64_t v43 = v40;
                    }
                    else {
                      unint64_t v43 = (unint64_t)v41;
                    }
                    if ((v57 & 0x80u) == 0) {
                      char v44 = v56;
                    }
                    else {
                      char v44 = (void **)v56[0];
                    }
                    if (v43) {
                      __n128 v45 = " ";
                    }
                    else {
                      __n128 v45 = "";
                    }
                    uint64_t v46 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
                    applesauce::CF::convert_to<std::string,0>(*v46, (uint64_t)__p);
                    int v47 = __p;
                    if (v55 < 0) {
                      int v47 = (void **)__p[0];
                    }
                    *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
                    *(void *)&uint8_t buf[4] = v44;
                    __int16 v64 = 2080;
                    std::string::size_type v65 = v45;
                    __int16 v66 = 2080;
                    char v67 = v47;
                    _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "%s%sfailed to create audio data analysis PCM node \"%s\"", buf, 0x20u);
                    if (v55 < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  if ((char)v57 < 0) {
                    operator delete(v56[0]);
                  }
                }
              }
              vp::vx::components::Audio_Data_Analysis::Node_Decorator::add_tap_point((uint64_t)v61[0], v30, v22, v27);
            }
            CFTypeRef v31 = cf;
          }
          if (v31) {
            CFRelease(v31);
          }
          v27 += 24;
          v28 -= 24;
        }
        while (v28);
      }
      v21 += 4;
      uint64_t v13 = v51;
      uint64_t v12 = v52;
    }
    while (v21 != "N5caulk19bad_expected_accessIiEE");
    long long v48 = *(_OWORD *)v61;
    long long v49 = v62;
    v61[0] = 0;
    *uint64_t v50 = v48;
    v50[1] = v49;
    return (uint64_t)std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator>>::reset[abi:ne180100]((void **)v61, 0);
  }
  return result;
}

void sub_1BB1FB50C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void **vp::allocate_unique<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872650;
  uint64_t v6 = (void *)std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator>>::reset[abi:ne180100]((void **)a4, v6);
}

void sub_1BB1FB5B0(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *applesauce::CF::StringRef::operator->(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_1BB1FB620(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::components::Audio_Data_Analysis::Node_Decorator::~Node_Decorator(vp::vx::components::Audio_Data_Analysis::Node_Decorator *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)this + 11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)this + 7);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = off_1F149F918;
  *((void *)this + 17) = off_1F149F9B0;
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100]((void *)this + 1, 0);
  *((void *)this + 17) = &unk_1F1493718;
  char v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)this + 11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)this + 7);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = off_1F149F918;
  *((void *)this + 17) = off_1F149F9B0;
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100]((void *)this + 1, 0);
  *((void *)this + 17) = &unk_1F1493718;
  char v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::components::Audio_Data_Analysis::Node_Decorator::~Node_Decorator(vp::vx::components::Audio_Data_Analysis::Node_Decorator *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v1 + 11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *uint64_t v1 = off_1F149F918;
  v1[17] = off_1F149F9B0;
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](v1 + 1, 0);
  v1[17] = &unk_1F1493718;
  char v4 = (std::__shared_weak_count *)v1[19];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v1 + 11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *uint64_t v1 = off_1F149F918;
  v1[17] = off_1F149F9B0;
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](v1 + 1, 0);
  v1[17] = &unk_1F1493718;
  char v4 = (std::__shared_weak_count *)v1[19];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

void vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory::~Node_Decorator_Factory(vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory *this)
{
  uint64_t v2 = (void *)((char *)this + 24);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)this + 7);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (void *)((char *)this + 24);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector((void *)this + 7);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1];
    do
    {
      --v2;
      std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>((uint64_t)a1, v3);
      v3 += 24;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  }
  return a1;
}

void std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)(a2 + 16);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unsigned int *boost::container::flat_map<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point,std::less<unsigned int>,vp::Allocator<std::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v13 = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  v16[0] = v2 + 24 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,false>,unsigned int>(&v13, v16, a2, &v18);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v10 = v18;
  if (v18 == (unsigned int *)(v7 + 24 * v8))
  {
    unsigned int v11 = *a2;
LABEL_16:
    v16[0] = 0;
    v16[1] = 0;
    LODWORD(v13) = v11;
    int v14 = 0;
    CFTypeRef cf = 0;
    uint64_t v17 = v18;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::emplace_hint_unique<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(a1, &v17, (uint64_t)&v13, (uint64_t *)&v18);
    unint64_t v10 = v18;
    if (cf) {
      CFRelease(cf);
    }
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v10 + 2;
  }
  if (!v18) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v11 = *a2;
  if (*a2 < *v18) {
    goto LABEL_16;
  }
  return v10 + 2;
}

void sub_1BB1FBCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~pair((uint64_t)va);
  boost::container::dtl::value_init<vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~value_init((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::container::dtl::value_init<vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~value_init(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,false>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::emplace_hint_unique<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a3 + 8);
  v7[0] = *(_DWORD *)a3;
  v7[2] = v5;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  unsigned int v6 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::insert_unique(a1, &v6, v7, a4);
  std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>((uint64_t)a1, (uint64_t)v7);
}

void sub_1BB1FBE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(v3, (uint64_t)va);
  _Unwind_Resume(a1);
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_18;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 24 * v7) {
LABEL_18:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v13 = *a2;
  int v14 = 0;
  uint64_t result = (void *)boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare((uint64_t)a1, &v13, a3, &v14);
  if (result)
  {
    uint64_t v15 = v14;
    unint64_t v11 = a1[1];
    if (v11 > (unint64_t)v14) {
      goto LABEL_19;
    }
    uint64_t v12 = a1[2];
    if (!v11)
    {
      if (v12) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
    }
    if ((unint64_t)v14 > v11 + 24 * v12) {
LABEL_19:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
    return boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(a1, (uint64_t *)&v15, (const char *)1, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1] && v14) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = (uint64_t)v14;
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = &v4[6 * v5];
  unint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      BOOL v18 = v9;
      uint64_t v19 = v10;
      uint64_t v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  unint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 6);
  uint64_t v12 = v11 - 6;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    uint64_t v21 = v4;
    uint64_t v20 = v12;
    uint64_t v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  unint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,true>,unsigned int>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[6 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 6;
        *a1 = v8 + 6;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>@<X0>(void *result@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v5 = result[2];
  unint64_t v6 = result[3];
  if (v6 < v5) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v7 = *a2;
  if (v6 - v5 < (unint64_t)a3)
  {
    uint64_t v17 = *a2;
    return (void *)boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(result, v17, a3, a4, a5);
  }
  else
  {
    if (v6 == v5) {
      boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
    }
    uint64_t v8 = result[1];
    uint64_t v9 = (_DWORD *)(v8 + 24 * v5);
    if (v9 == (_DWORD *)v7)
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a4;
      uint64_t v16 = v8 + 24 * v5;
      *(_DWORD *)(v16 + 8) = *(_DWORD *)(a4 + 8);
      *(void *)(v16 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = 0;
      result[2] = v5 + 1;
    }
    else
    {
      unint64_t v10 = v9 - 6;
      *uint64_t v9 = *(v9 - 6);
      uint64_t v11 = v8 + 24 * v5;
      *(_DWORD *)(v11 + 8) = *(v9 - 4);
      *(void *)(v11 + 16) = *((void *)v9 - 1);
      *((void *)v9 - 1) = 0;
      result[2] = v5 + 1;
      if (v9 - 6 != (_DWORD *)v7)
      {
        uint64_t v12 = v9 - 6;
        do
        {
          int v13 = *(v12 - 6);
          v12 -= 6;
          *unint64_t v10 = v13;
          void v10[2] = *(v10 - 4);
          uint64_t v14 = *((void *)v10 + 2);
          *((void *)v10 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *((void *)v10 - 1);
          *((void *)v10 - 1) = v14;
          unint64_t v10 = v12;
        }
        while (v12 != (_DWORD *)v7);
      }
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a4;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a4 + 8);
      uint64_t v15 = *(void *)(v7 + 16);
      *(void *)(v7 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v15;
    }
    *a5 = *a2;
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = a2;
  v14[1] = a1;
  _OWORD v14[2] = a3;
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  v14[0] = 0;
  if (v10)
  {
    for (uint64_t i = a1[2]; i; v10 += 24)
    {
      --i;
      std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>((uint64_t)a1, v10);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * a1[3], 8);
  }
  uint64_t v12 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v12;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::~scoped_array_deallocator((uint64_t)v14);
}

void sub_1BB1FC58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(a7 + 8);
  *(void *)(v7 + 16) = *(void *)(a7 + 16);
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    uint64_t v8 = (void *)(v7 + 40);
    do
    {
      *((_DWORD *)v8 - 4) = *(_DWORD *)a3;
      *((_DWORD *)v8 - boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_DWORD *)(a3 + 8);
      *uint64_t v8 = *(void *)(a3 + 16);
      v8 += 3;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 24 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

unsigned int *boost::container::flat_map<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<std::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v17 = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  v20[0] = v2 + 24 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,false>,std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>(&v17, v20, a2, &v22);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = v22;
  if (v22 == (unsigned int *)(v7 + 24 * v8)) {
    goto LABEL_23;
  }
  if (!v22) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*a2 >= *v22) {
    char v11 = 1;
  }
  else {
    char v11 = -1;
  }
  if (*a2 == *v22)
  {
    unsigned int v12 = a2[1];
    unsigned int v13 = v22[1];
    BOOL v14 = v12 >= v13;
    BOOL v15 = v12 == v13;
    char v11 = -1;
    if (v14) {
      char v11 = 1;
    }
    if (v15) {
      char v11 = 0;
    }
  }
  if (v11 < 0)
  {
LABEL_23:
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v17 = *(void *)a2;
    int v18 = 0;
    CFTypeRef cf = 0;
    uint64_t v21 = v22;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::emplace_hint_unique<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(a1, &v21, &v17, (uint64_t *)&v22);
    uint64_t v10 = v22;
    if (cf) {
      CFRelease(cf);
    }
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  return v10 + 2;
}

void sub_1BB1FC8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~pair((uint64_t)va);
  boost::container::dtl::value_init<vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>::~value_init((uint64_t)va1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,false>,std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v8 = v5 >> 1;
      BOOL v9 = &v4[6 * (v5 >> 1)];
      if (*v9 >= v6) {
        char v10 = 1;
      }
      else {
        char v10 = -1;
      }
      if (*v9 == v6)
      {
        unsigned int v11 = v9[1];
        BOOL v12 = v11 == v7;
        char v10 = v11 >= v7 ? 1 : -1;
        if (v12) {
          char v10 = 0;
        }
      }
      if (v10 < 0)
      {
        BOOL v4 = v9 + 6;
        *a1 = v9 + 6;
        unint64_t v8 = v5 + ~v8;
      }
      unint64_t v5 = v8;
    }
    while (v8);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::emplace_hint_unique<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v9 = a3[2];
  a3[2] = 0;
  unsigned int v6 = *a2;
  uint64_t v7 = v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::insert_unique(a1, &v6, (unsigned int *)&v7, a4);
  std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>((uint64_t)a1, (uint64_t)&v7);
}

void sub_1BB1FCA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>(v3, (uint64_t)va);
  _Unwind_Resume(a1);
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_18;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 24 * v7) {
LABEL_18:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unsigned int v13 = *a2;
  BOOL v14 = 0;
  uint64_t result = (void *)boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare((uint64_t)a1, &v13, a3, &v14);
  if (result)
  {
    BOOL v15 = v14;
    unint64_t v11 = a1[1];
    if (v11 > (unint64_t)v14) {
      goto LABEL_19;
    }
    uint64_t v12 = a1[2];
    if (!v11)
    {
      if (v12) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
    }
    if ((unint64_t)v14 > v11 + 24 * v12) {
LABEL_19:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
    return boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(a1, (uint64_t *)&v15, (const char *)1, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1] && v14) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = (uint64_t)v14;
  }
  return result;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = &v4[6 * v5];
  uint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10) {
      char v11 = 1;
    }
    else {
      char v11 = -1;
    }
    if (*a3 == *v10)
    {
      unsigned int v12 = a3[1];
      unsigned int v13 = v10[1];
      BOOL v14 = v12 >= v13;
      BOOL v15 = v12 == v13;
      char v11 = -1;
      if (v14) {
        char v11 = 1;
      }
      if (v15) {
        char v11 = 0;
      }
    }
    if ((v11 & 0x80) == 0)
    {
      uint64_t v28 = v9;
      int v29 = v10;
      uint64_t v16 = (uint64_t *)&v29;
      uint64_t v17 = &v28;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  int v18 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v18) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  uint64_t v19 = v18 - 6;
  unsigned int v20 = *(v18 - 6);
  unsigned int v21 = *a3;
  if (v20 == *a3)
  {
    unsigned int v22 = *(v18 - 5);
    unsigned int v23 = a3[1];
    if (v22 >= v23)
    {
      BOOL v14 = v23 >= v22;
      BOOL v24 = v23 == v22;
      char v25 = -1;
      if (v14) {
        char v25 = 1;
      }
      if (v24) {
        char v25 = 0;
      }
      if (v25 < 0)
      {
LABEL_29:
        CFTypeRef v31 = v4;
        unsigned int v30 = v19;
        uint64_t v16 = (uint64_t *)&v31;
        uint64_t v17 = &v30;
        return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
      }
      goto LABEL_36;
    }
    return 1;
  }
  if (v20 < v21) {
    return 1;
  }
  char v27 = -1;
  if (v21 >= v20) {
    char v27 = 1;
  }
  if (v27 < 0) {
    goto LABEL_29;
  }
LABEL_36:
  uint64_t result = 0;
  *a4 = v19;
  return result;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v17 = *a3;
  uint64_t v18 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,true>,std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>(&v18, &v17, a4, &v19);
  uint64_t v9 = v19;
  *a5 = v19;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*a4 >= *v9) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 255;
  }
  if (*a4 == *v9)
  {
    unsigned int v11 = a4[1];
    unsigned int v12 = v9[1];
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    uint64_t v15 = 255;
    if (v13) {
      uint64_t v15 = 1;
    }
    if (v14) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = v15;
    }
  }
  return v10 >> 7;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,true>,std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v8 = v5 >> 1;
      uint64_t v9 = &v4[6 * (v5 >> 1)];
      if (*v9 >= v6) {
        char v10 = 1;
      }
      else {
        char v10 = -1;
      }
      if (*v9 == v6)
      {
        unsigned int v11 = v9[1];
        BOOL v12 = v11 == v7;
        char v10 = v11 >= v7 ? 1 : -1;
        if (v12) {
          char v10 = 0;
        }
      }
      if (v10 < 0)
      {
        BOOL v4 = v9 + 6;
        *a1 = v9 + 6;
        unint64_t v8 = v5 + ~v8;
      }
      unint64_t v5 = v8;
    }
    while (v8);
  }
  *a4 = v4;
}

void *boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>@<X0>(void *result@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6 = result[2];
  unint64_t v5 = result[3];
  if (v5 < v6) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v7 = *a2;
  if (v5 - v6 < (unint64_t)a3)
  {
    uint64_t v18 = *a2;
    return (void *)boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(result, v18, a3, a4, a5);
  }
  else
  {
    if (v5 == v6) {
      boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
    }
    uint64_t v8 = result[1];
    uint64_t v9 = (void *)(v8 + 24 * v6);
    if (v9 == (void *)v7)
    {
      *(void *)uint64_t v7 = *(void *)a4;
      uint64_t v17 = v8 + 24 * v6;
      *(_DWORD *)(v17 + 8) = *(_DWORD *)(a4 + 8);
      *(void *)(v17 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = 0;
      ++result[2];
    }
    else
    {
      char v10 = v9 - 3;
      uint64_t v11 = *(v9 - 3);
      uint64_t v12 = v8 + 24 * v6;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v9 - 4);
      *(void *)(v12 + 16) = *(v9 - 1);
      *(v9 - 1) = 0;
      *uint64_t v9 = v11;
      ++result[2];
      if (v9 - 3 != (void *)v7)
      {
        BOOL v13 = v9 - 3;
        do
        {
          uint64_t v14 = *(v13 - 3);
          v13 -= 3;
          *((_DWORD *)v10 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *((_DWORD *)v10 - 4);
          uint64_t v15 = v10[2];
          void v10[2] = *(v10 - 1);
          *(v10 - 1) = v15;
          *char v10 = v14;
          char v10 = v13;
        }
        while (v13 != (void *)v7);
      }
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a4;
      *(_DWORD *)(v7 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a4 + 8);
      uint64_t v16 = *(void *)(v7 + 16);
      *(void *)(v7 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v16;
    }
    *a5 = *a2;
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = a2;
  v14[1] = a1;
  _OWORD v14[2] = a3;
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  v14[0] = 0;
  if (v10)
  {
    for (uint64_t i = a1[2]; i; v10 += 24)
    {
      --i;
      std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>::destroy[abi:ne180100]<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>((uint64_t)a1, v10);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * a1[3], 8);
  }
  uint64_t v12 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v12;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::~scoped_array_deallocator((uint64_t)v14);
}

void sub_1BB1FD1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(void *)uint64_t v7 = *(void *)a7;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(a7 + 8);
  *(void *)(v7 + 16) = *(void *)(a7 + 16);
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    uint64_t v8 = (void *)(v7 + 40);
    do
    {
      *(v8 - boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)a3;
      *((_DWORD *)v8 - boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_DWORD *)(a3 + 8);
      *uint64_t v8 = *(void *)(a3 + 16);
      v8 += 3;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 24 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

void **std::unique_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator,vp::Allocator_Delete<vp::vx::components::Audio_Data_Analysis::Node_Decorator>>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,0>(v2);
    return (void **)(*(uint64_t (**)(void *, void *, void *, void *))(*v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 160, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>((uint64_t)a1, v10, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::components::Audio_Data_Analysis::Node_Decorator * std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>(std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB1FD484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__destroy_at[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,0>(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(a1 + 11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::components::Audio_Data_Analysis::Node_Decorator::Tap_Point>>,void>::~vector(a1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *a1 = off_1F149F918;
  a1[17] = off_1F149F9B0;
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](a1 + 1, 0);
  a1[17] = &unk_1F1493718;
  BOOL v4 = (std::__shared_weak_count *)a1[19];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)a3;
  *(void *)a3 = 0;
  long long v10 = *(_OWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a3 + 24);
  unint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v7 = *a4;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::components::Audio_Data_Analysis::Node_Decorator::Node_Decorator(a2, &v9, (uint64_t)&v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](&v9, 0);
}

void sub_1BB1FD5EC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<vp::vx::components::Audio_Data_Analysis::Node_Decorator * std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis::Node_Decorator>::new_object[abi:ne180100]<vp::vx::components::Audio_Data_Analysis::Node_Decorator,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&>(std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,std::shared_ptr<vp::services::Audio_Data_Analysis::Client> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 160, 8);
  }
  return a1;
}

uint64_t vp::vx::IO_Node_Audio_Capturer::IO_Node_Audio_Capturer(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  long long v10 = (char *)operator new(0x40uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)long long v10 = &unk_1F1493738;
  *(_OWORD *)(v10 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v10 + 7) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(void *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v10 + 24;
  *(void *)(a1 + 128) = v10;
  uint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v24 = v11;
  long long v25 = *(_OWORD *)(a2 + 1);
  uint64_t v26 = a2[3];
  vp::vx::io::Node_Decorator::Node_Decorator(a1, (uint64_t *)off_1F149FB70, (uint64_t)&v24);
  uint64_t v12 = (vp *)std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](&v24, 0);
  *(void *)a1 = &unk_1F149FAC0;
  *(void *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F149FB58;
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a5;
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = a4;
  log = vp::get_log(v12);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    vp::vx::io::get_log_context_info(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"vp::vx::IO_Node_Audio_Capturer]", 30, __p);
    unint64_t v14 = v23;
    uint64_t v15 = __p[1];
    uint64_t v17 = vp::get_log(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      if ((v14 & 0x80u) == 0) {
        unint64_t v18 = v14;
      }
      else {
        unint64_t v18 = (unint64_t)v15;
      }
      uint64_t v19 = (void **)__p[0];
      if ((v23 & 0x80u) == 0) {
        uint64_t v19 = __p;
      }
      if (v18) {
        unsigned int v20 = " ";
      }
      else {
        unsigned int v20 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v28 = v19;
      __int16 v29 = 2080;
      unsigned int v30 = v20;
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB1FD8B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Node_Audio_Capturer::~IO_Node_Audio_Capturer(vp::vx::IO_Node_Audio_Capturer *this, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  unint64_t v5 = (vp *)a2[5];
  *(void *)((char *)this + *(void *)(v4 - 24)) = v5;
  log = vp::get_log(v5);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    vp::vx::io::get_log_context_info((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)"vp::vx::IO_Node_Audio_Capturer]", 30, __p);
    unint64_t v7 = v16;
    uint64_t v8 = __p[1];
    long long v10 = vp::get_log(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = (unint64_t)v8;
      }
      uint64_t v12 = (void **)__p[0];
      if ((v16 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      if (v11) {
        uint64_t v13 = " ";
      }
      else {
        uint64_t v13 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      unint64_t v18 = v12;
      __int16 v19 = 2080;
      unsigned int v20 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = (char *)this + 72;
  std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  __p[0] = (char *)this + 40;
  std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  uint64_t v14 = a2[1];
  *(void *)this = v14;
  *(void *)((char *)this + *(void *)(v14 - 24)) = a2[4];
  std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100]((void *)this + 1, 0);
}

void vp::vx::IO_Node_Audio_Capturer::~IO_Node_Audio_Capturer(vp::vx::IO_Node_Audio_Capturer *this)
{
  *(void *)(v1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Node_Audio_Capturer::~IO_Node_Audio_Capturer(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Node_Audio_Capturer::~IO_Node_Audio_Capturer(vp::vx::IO_Node_Audio_Capturer *this)
{
  vp::vx::IO_Node_Audio_Capturer::~IO_Node_Audio_Capturer((vp::vx::IO_Node_Audio_Capturer *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  vp::vx::IO_Node_Audio_Capturer::~IO_Node_Audio_Capturer((vp::vx::IO_Node_Audio_Capturer *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void vp::vx::IO_Node_Audio_Capturer::process(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  vp::vx::io::Error::Error((uint64_t)&__p, 0, 46, 52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/IO_Node_Audio_Capturer_Factory.cpp");
  *(void *)std::__fs::filesystem::path buf = __p;
  __int16 v12 = WORD2(__p);
  __int16 v13 = HIWORD(__p);
  uint64_t v14 = v45;
  long long v16 = v46;
  long long v15 = v47;
  uint64_t v50 = *((void *)&v47 + 1);
  long long v46 = 0uLL;
  *(void *)&long long v47 = 0;
  *(_DWORD *)a6 = __p;
  *(_WORD *)(a6 + 4) = v12;
  *(_WORD *)(a6 + 6) = v13;
  *(void *)(a6 + 8) = v14;
  *(_OWORD *)(a6 + 16) = v16;
  *(_OWORD *)(a6 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v15;
  uint64_t v49 = 0;
  *(void *)&buf[8] = v14;
  *(_OWORD *)&buf[16] = 0uLL;
  *(unsigned char *)(a6 + 48) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
  if (a3)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    __int16 v19 = (AudioBufferList **)(a2 + 16);
    do
    {
      uint64_t v20 = *(void *)(a1 + 40);
      if (v18 < (*(void *)(a1 + 48) - v20) >> 3)
      {
        if (*(void *)(v20 + 8 * v18))
        {
          BOOL v21 = vp::vx::detail::capture(*(v19 - 2), (AudioTimeStamp *)*(v19 - 1), (vp::Audio_Capture *)(v20 + v17), *(_DWORD *)(a1 + 104), *(unsigned int *)v19, v20);
          if (!v21)
          {
            unsigned int v22 = vp::get_log((vp *)v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              vp::vx::io::get_log_context_info(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"vp::vx::IO_Node_Audio_Capturer]", 30, &__p);
              uint64_t v40 = BYTE7(v46);
              uint64_t v38 = v45;
              log = vp::get_log(v23);
              if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
              {
                uint64_t v24 = v38;
                if ((v40 & 0x80u) == 0) {
                  uint64_t v24 = v40;
                }
                p_p = &__p;
                if (SBYTE7(v46) < 0) {
                  p_p = __p;
                }
                *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
                BOOL v26 = v24 == 0;
                char v27 = " ";
                if (v26) {
                  char v27 = "";
                }
                *(void *)&uint8_t buf[4] = p_p;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v27;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&buf[24] = v18;
                _os_log_impl(&dword_1BB0CE000, log, OS_LOG_TYPE_ERROR, "%s%sfailed to capture data for input %lu", buf, 0x20u);
              }
              if (SBYTE7(v46) < 0) {
                operator delete(__p);
              }
            }
          }
        }
      }
      ++v18;
      v17 += 8;
      v19 += 3;
    }
    while (a3 != v18);
  }
  vp::vx::io::Node_Decorator::process(a1);
  caulk::expected<void,vp::vx::io::Error>::operator=((int *)a6, (uint64_t)buf);
  if (!v51) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
  }
  if (a5)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    unsigned int v30 = (AudioBufferList **)(a4 + 16);
    do
    {
      uint64_t v31 = *(void *)(a1 + 72);
      if (v29 < (*(void *)(a1 + 80) - v31) >> 3)
      {
        if (*(void *)(v31 + 8 * v29))
        {
          BOOL v32 = vp::vx::detail::capture(*(v30 - 2), (AudioTimeStamp *)*(v30 - 1), (vp::Audio_Capture *)(v31 + v28), *(_DWORD *)(a1 + 104), *(unsigned int *)v30, v31);
          if (!v32)
          {
            uint64_t v33 = vp::get_log((vp *)v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              vp::vx::io::get_log_context_info(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"vp::vx::IO_Node_Audio_Capturer]", 30, &__p);
              uint64_t v41 = BYTE7(v46);
              uint64_t v39 = v45;
              loga = vp::get_log(v34);
              if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
              {
                uint64_t v35 = v39;
                if ((v41 & 0x80u) == 0) {
                  uint64_t v35 = v41;
                }
                if ((SBYTE7(v46) & 0x80u) == 0) {
                  char v36 = &__p;
                }
                else {
                  char v36 = __p;
                }
                *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
                BOOL v26 = v35 == 0;
                uint64_t v37 = " ";
                if (v26) {
                  uint64_t v37 = "";
                }
                *(void *)&uint8_t buf[4] = v36;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v37;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&buf[24] = v29;
                _os_log_impl(&dword_1BB0CE000, loga, OS_LOG_TYPE_ERROR, "%s%sfailed to capture data for output %lu", buf, 0x20u);
              }
              if (SBYTE7(v46) < 0) {
                operator delete(__p);
              }
            }
          }
        }
      }
      ++v29;
      v28 += 8;
      v30 += 3;
    }
    while (a5 != v29);
  }
}

void sub_1BB1FE04C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL vp::vx::detail::capture@<W0>(AudioBufferList *a1@<X2>, AudioTimeStamp *a2@<X4>, vp::Audio_Capture *a3@<X0>, int a4@<W1>, uint64_t a5@<X3>, BOOL a6@<W8>)
{
  if (a4 == 1)
  {
    vp::Audio_Capture::write_async(a3, a1, a2, a5, v7);
    return v7[4] != 0;
  }
  if (!a4)
  {
    vp::Audio_Capture::write(a3, a1, a2, a5, v7);
    return v7[4] != 0;
  }
  return a6;
}

uint64_t vp::vx::IO_Node_Audio_Capturer_Factory::IO_Node_Audio_Capturer_Factory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F149FBA8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 24) = 0;
  vp::vx::data_flow::State<void>::State(a1 + 24);
  *(void *)(a1 + 48) = 0;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(void *)(a1 + 56) = std::chrono::system_clock::to_time_t(&__t);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  vp::vx::data_flow::State<void>::State(a1 + 88);
  *(_DWORD *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = a3;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a3;
  *(void *)(a1 + 16std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  return a1;
}

BOOL vp::vx::IO_Node_Audio_Capturer_Factory::get_should_enable_audio_capturers(vp::vx::IO_Node_Audio_Capturer_Factory *this)
{
  uint64_t v1 = (char *)this + 24;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v4, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v4);
  LODWORD(v1) = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  return v1 != 0;
}

void sub_1BB1FE1BC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB1FE1ACLL);
}

double vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  v8[0] = &unk_1F149FD50;
  v8[1] = v5;
  void v8[2] = v4;
  v8[3] = v8;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v8);
  unint64_t v11 = 0;
  uint64_t v6 = operator new(0x28uLL);
  *uint64_t v6 = &unk_1F1498B58;
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)v9);
  unint64_t v11 = v6;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v10);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v8);
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 24, a2).n128_u64[0];
  return result;
}

void sub_1BB1FE2EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Node_Audio_Capturer_Factory::set_audio_capturers_mode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t vp::vx::IO_Node_Audio_Capturer_Factory::set_audio_capturers_ring_buffer_mode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 5boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a2;
  return result;
}

uint64_t vp::vx::IO_Node_Audio_Capturer_Factory::set_diagnostic_log_time(uint64_t this, uint64_t a2)
{
  *(void *)(this + 56) = a2;
  return this;
}

std::string *vp::vx::IO_Node_Audio_Capturer_Factory::set_temporary_directory_path(vp::vx::IO_Node_Audio_Capturer_Factory *this, const std::__fs::filesystem::path *a2)
{
  return std::string::operator=((std::string *)((char *)this + 64), &a2->__pn_);
}

void vp::vx::IO_Node_Audio_Capturer_Factory::get_port_type_four_char_code(vp::vx::IO_Node_Audio_Capturer_Factory *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v4 = (std::pmr *)std::string::basic_string[abi:ne180100]<0>(&__p, "????");
  uint64_t default_resource = std::pmr::get_default_resource(v4);
  vp::vx::data_flow::Value::Value(v9, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v3, (vp::vx::data_flow::Value *)v9);
  uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  *(_OWORD *)a2 = *(_OWORD *)v6;
  *(void *)(a2 + 16) = *(void *)(v6 + 16);
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  if (v8 < 0) {
    operator delete(__p);
  }
}

void sub_1BB1FE3A8(void *a1, long long a2, uint64_t a3, ...)
{
  va_start(va, a3);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __cxa_begin_catch(a1);
  *(_OWORD *)uint64_t v3 = a2;
  *(void *)(v3 + 16) = a3;
  __cxa_end_catch();
  JUMPOUT(0x1BB1FE388);
}

double vp::vx::IO_Node_Audio_Capturer_Factory::set_port_type_four_char_code(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::observe_global<std::string>(&v6, a2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 88, a2).n128_u64[0];
  return result;
}

void *vp::vx::observe_global<std::string>(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  v7[0] = &unk_1F149FDE0;
  v7[1] = v4;
  v7[2] = v3;
  void v7[3] = v7;
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  long long v10 = 0;
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = &unk_1F149FD98;
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v8);
  long long v10 = v5;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v9);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100](v7);
}

void sub_1BB1FE53C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Node_Audio_Capturer_Factory::set_call_count(uint64_t this, int a2)
{
  *(_DWORD *)(this + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a2;
  return this;
}

__n128 vp::vx::IO_Node_Audio_Capturer_Factory::add_audio_capturer(uint64_t a1, unsigned int a2, unsigned int a3, int a4, __n128 *a5)
{
  if (a4) {
    uint64_t v6 = (void *)(a1 + 152);
  }
  else {
    uint64_t v6 = (void *)(a1 + 120);
  }
  v10[0] = a2;
  v10[1] = a3;
  unint64_t v7 = boost::container::flat_map<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<std::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::priv_subscript(v6, v10);
  char v8 = (__n128 *)v7;
  if (*((char *)v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  __n128 result = *a5;
  v8[1].n128_u64[0] = a5[1].n128_u64[0];
  *char v8 = result;
  a5[1].n128_u8[7] = 0;
  a5->n128_u8[0] = 0;
  return result;
}

__n128 vp::vx::IO_Node_Audio_Capturer_Factory::new_node_decorator@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v71 = a4;
  BOOL should_enable_audio_capturers = vp::vx::IO_Node_Audio_Capturer_Factory::get_should_enable_audio_capturers((vp::vx::IO_Node_Audio_Capturer_Factory *)a1);
  if (should_enable_audio_capturers)
  {
    uint64_t v55 = a5;
    uint64_t v69 = 0;
    *(void *)CFStringRef v70 = std::pmr::get_default_resource((std::pmr *)should_enable_audio_capturers);
    uint64_t v58 = a3;
    uint64_t v10 = *(void *)a3;
    memset(v81, 0, sizeof(v81));
    time_t v68 = *(void *)(a1 + 56);
    uint64_t v11 = localtime(&v68);
    strftime((char *)v81, 0x40uLL, "%Y%m%d.%H%M%S", v11);
    v67.__val_ = 0;
    v67.__cat_ = std::system_category();
    uint64_t v12 = (std::string *)(a1 + 64);
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)(a1 + 64), &v67);
    uint64_t v13 = 0;
    uint64_t v80 = 0x100000000;
    uint64_t v59 = v10;
    do
    {
      uint64_t v56 = v13;
      uint64_t v14 = *((unsigned int *)&v80 + v13);
      unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v14);
      if (v15)
      {
        unint64_t v16 = 0;
        if (v14) {
          uint64_t v17 = a1 + 152;
        }
        else {
          uint64_t v17 = a1 + 120;
        }
        unint64_t v18 = "output";
        if (!v14) {
          unint64_t v18 = "input";
        }
        unsigned __int8 v57 = v18;
        uint64_t v60 = v15;
        do
        {
          v66.__r_.__value_.__r.__words[0] = __PAIR64__(v16, a2);
          boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::find(v17, (unsigned int *)&v66, (unsigned int **)__p);
          uint64_t v19 = *(void *)(v17 + 8);
          uint64_t v20 = *(void *)(v17 + 16);
          if (v19) {
            BOOL v21 = 1;
          }
          else {
            BOOL v21 = v20 == 0;
          }
          if (!v21) {
            __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
          }
          uint64_t v22 = *(void *)__p;
          if (*(void *)__p != v19 + 32 * v20)
          {
            if (*(char *)(a1 + 87) < 0) {
              std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
            }
            else {
              std::string v66 = *v12;
            }
            std::__fs::filesystem::path::append[abi:ne180100]<char [8]>(&v66, "vp.");
            unsigned __int8 v23 = (char *)&v80 + 7;
            while (*++v23)
              ;
            std::string::append[abi:ne180100]<char const*,0>(&v66, (char *)v81, v23);
            std::string::append(&v66, ".", 1uLL);
            caulk::make_string((caulk *)"%03u", (uint64_t)__p, *(unsigned int *)(a1 + 112));
            if (__p[23] >= 0) {
              long long v25 = __p;
            }
            else {
              long long v25 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v26 = __p[23];
            }
            else {
              std::string::size_type v26 = *(void *)&__p[8];
            }
            std::string::append(&v66, v25, v26);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::string::append(&v66, ".", 1uLL);
            vp::vx::IO_Node_Audio_Capturer_Factory::get_port_type_four_char_code((vp::vx::IO_Node_Audio_Capturer_Factory *)a1, (uint64_t)__p);
            if (__p[23] >= 0) {
              char v27 = __p;
            }
            else {
              char v27 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v28 = __p[23];
            }
            else {
              std::string::size_type v28 = *(void *)&__p[8];
            }
            std::string::append(&v66, v27, v28);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::string::append(&v66, ".", 1uLL);
            uint64_t v31 = *(const std::string::value_type **)(v22 + 8);
            uint64_t v30 = v22 + 8;
            unint64_t v29 = v31;
            int v32 = *(char *)(v30 + 23);
            if (v32 >= 0) {
              uint64_t v33 = (const std::string::value_type *)v30;
            }
            else {
              uint64_t v33 = v29;
            }
            if (v32 >= 0) {
              std::string::size_type v34 = *(unsigned __int8 *)(v30 + 23);
            }
            else {
              std::string::size_type v34 = *(void *)(v30 + 8);
            }
            std::string::append(&v66, v33, v34);
            std::string::append(&v66, ".caf", 4uLL);
            (*(void (**)(unsigned char *__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v10 + 56))(__p, v10, v16, v14);
            vp::Audio_Capture::create((const std::__fs::filesystem::path *)&v66, (uint64_t)__p, *(_DWORD *)(a1 + 52), &v65);
            if (!(_BYTE)v78) {
              vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
            }
            if (v65)
            {
              log = vp::get_log(v35);
              if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v37 = a2;
                log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::IO_Node_Audio_Capturer_Factory]", 38, v63);
                unint64_t v39 = v64;
                uint64_t v40 = v63[1];
                uint64_t v41 = vp::get_log(log_context_info);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                {
                  if ((v39 & 0x80u) == 0) {
                    unint64_t v42 = v39;
                  }
                  else {
                    unint64_t v42 = (unint64_t)v40;
                  }
                  unint64_t v43 = v63;
                  if ((v64 & 0x80u) != 0) {
                    unint64_t v43 = (void **)v63[0];
                  }
                  BOOL v21 = v42 == 0;
                  char v44 = " ";
                  if (v21) {
                    char v44 = "";
                  }
                  uint64_t v45 = &v66;
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v45 = (std::string *)v66.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)std::string __p = 136316418;
                  *(void *)&__p[4] = v43;
                  *(_WORD *)&__p[12] = 2080;
                  *(void *)&__p[14] = v44;
                  *(_WORD *)&__p[22] = 2080;
                  uint64_t v73 = v45;
                  __int16 v74 = 1024;
                  int v75 = v37;
                  __int16 v76 = 2080;
                  uint64_t v77 = v57;
                  __int16 v78 = 1024;
                  int v79 = v16;
                  _os_log_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_DEFAULT, "%s%scapture audio to \"%s\" for node %u %s terminal %u", __p, 0x36u);
                }
                if ((char)v64 < 0) {
                  operator delete(v63[0]);
                }
                a2 = v37;
                uint64_t v12 = (std::string *)(a1 + 64);
                uint64_t v10 = v59;
              }
              uint64_t v46 = v69;
              if (!v69)
              {
                v63[0] = v71;
                int v47 = *(_DWORD *)(a1 + 48);
                int v61 = *(_DWORD *)(a1 + 52);
                int v62 = v47;
                vp::allocate_unique<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>((uint64_t *)v63, v58, &v62, &v61, (uint64_t *)&v71, (uint64_t)__p);
                uint64_t v48 = *(void *)__p;
                *(void *)std::string __p = 0;
                std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100](&v69, v48);
                *(_OWORD *)CFStringRef v70 = *(_OWORD *)&__p[8];
                *(void *)&v70[16] = v73;
                std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100](__p, 0);
                goto LABEL_63;
              }
              while (1)
              {
                uint64_t v49 = v14 ? 72 : 40;
                uint64_t v50 = v14 ? v46 + 72 : v46 + 40;
                if (v16 <= (uint64_t)(*(void *)(v50 + 8) - *(void *)(v46 + v49)) >> 3) {
                  break;
                }
                *(void *)std::string __p = 0;
                std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::emplace_back<decltype(nullptr)>(v50);
LABEL_63:
                uint64_t v46 = v69;
              }
              std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::emplace_back<vp::Audio_Capture>(v50, &v65);
            }
            vp::Audio_Capture::~Audio_Capture((vp::Audio_Capture *)&v65);
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
          }
          ++v16;
        }
        while (v16 != v60);
      }
      uint64_t v13 = v56 + 1;
    }
    while (v56 != 1);
    uint64_t v51 = v69;
    if (v69)
    {
      uint64_t v69 = 0;
      uint64_t v52 = *(void *)v70;
      *(void *)uint64_t v55 = v51;
      *(void *)(v55 + 8) = v52;
      *(_OWORD *)(v55 + 16) = *(_OWORD *)&v70[8];
      std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100](&v69, 0);
      return result;
    }
    std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100](&v69, 0);
    a5 = v55;
    a3 = v58;
  }
  uint64_t v54 = *(void *)a3;
  *(void *)a3 = 0;
  *(void *)a5 = v54;
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a5 + 8) = result;
  *(void *)(a5 + 24) = *(void *)(a3 + 24);
  return result;
}

void sub_1BB1FEBC0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *vp::allocate_unique<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v7 = v10;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = v7;
  *(_OWORD *)(a6 + 16) = xmmword_1BB872660;
  uint64_t v8 = std::pmr::polymorphic_allocator<vp::vx::IO_Node_Audio_Capturer>::new_object[abi:ne180100]<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>(&v10, a2, a3, a4, a5);
  return std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100]((void *)a6, v8);
}

void sub_1BB1FEC34(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::emplace_back<decltype(nullptr)>(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v3 >= v2)
  {
    uint64_t v5 = a1 + 24;
    uint64_t v6 = (uint64_t)(v3 - *(void *)a1) >> 3;
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = v2 - *(void *)a1;
    uint64_t v8 = v7 >> 2;
    if (v7 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v8 = v6 + 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v16 = a1 + 24;
    if (v9) {
      uint64_t v10 = std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<vp::vx::Property_ID,void *> *> *>::allocate[abi:ne180100](v5, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v12 = v10;
    uint64_t v13 = (void *)(v10 + 8 * v6);
    unint64_t v15 = v10 + 8 * v9;
    vp::Audio_File::Audio_File(v13);
    uint64_t v14 = v13 + 1;
    std::vector<vp::Audio_Buffer>::__swap_out_circular_buffer((uint64_t **)a1, &v12);
    unint64_t v4 = *(void *)(a1 + 8);
    std::__split_buffer<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture> &>::~__split_buffer((uint64_t)&v12);
  }
  else
  {
    vp::Audio_File::Audio_File(*(void **)(a1 + 8));
    unint64_t v4 = v3 + 8;
    *(void *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 8) = v4;
  return v4 - 8;
}

void sub_1BB1FED40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::emplace_back<vp::Audio_Capture>(uint64_t a1, uint64_t *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    uint64_t v7 = a1 + 24;
    uint64_t v8 = (uint64_t)(v5 - *(void *)a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v18 = a1 + 24;
    if (v11) {
      uint64_t v12 = std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<vp::vx::Property_ID,void *> *> *>::allocate[abi:ne180100](v7, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = v12;
    unint64_t v15 = (void *)(v12 + 8 * v8);
    unint64_t v17 = v12 + 8 * v11;
    vp::Audio_Buffer::Audio_Buffer(v15, a2);
    uint64_t v16 = v15 + 1;
    std::vector<vp::Audio_Buffer>::__swap_out_circular_buffer((uint64_t **)a1, &v14);
    unint64_t v6 = *(void *)(a1 + 8);
    std::__split_buffer<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture> &>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    vp::Audio_Buffer::Audio_Buffer(*(void **)(a1 + 8), a2);
    unint64_t v6 = v5 + 8;
    *(void *)(a1 + 8) = v5 + 8;
  }
  *(void *)(a1 + 8) = v6;
  return v6 - 8;
}

void sub_1BB1FEE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::IO_Node_Audio_Capturer_Factory::~IO_Node_Audio_Capturer_Factory(vp::vx::IO_Node_Audio_Capturer_Factory *this)
{
  *(void *)this = &unk_1F149FBA8;
  unint64_t v2 = (void *)((char *)this + 120);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector((void *)this + 19);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector(v2);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 88);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 24);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F149FBA8;
  unint64_t v2 = (void *)((char *)this + 120);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector((void *)this + 19);
  boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::~vector(v2);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 88);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 24);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t **std::vector<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    unint64_t v3 = result;
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    unint64_t v6 = v1;
    if (v4 != v2)
    {
      do
        vp::Audio_Capture::~Audio_Capture((vp::Audio_Capture *)(v4 - 8));
      while (v4 != v2);
      unint64_t v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    uint64_t v7 = (v6[2] - v5) >> 3;
    return (uint64_t **)std::allocator_traits<vp::Allocator<vp::Audio_Capture>>::deallocate[abi:ne180100](v6 + 3, v5, v7);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<vp::Audio_Capture>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 8 * a3, 8);
}

uint64_t std::__split_buffer<vp::Audio_Capture,vp::Allocator<vp::Audio_Capture> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    vp::Audio_Capture::~Audio_Capture((vp::Audio_Capture *)(i - 8));
  }
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<vp::Audio_Capture>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3);
  }
  return a1;
}

void *std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149FD50;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149FD50;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149FD50;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149FD50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0,std::allocator<vp::vx::IO_Node_Audio_Capturer_Factory::set_should_enable_audio_capturers(vp::vx::data_flow::State<BOOL>)::$_0>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *a2;
    int v6 = *a3;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        if (v6) {
          uint64_t v10 = "I/O node audio captures are enabled";
        }
        else {
          uint64_t v10 = "I/O node audio captures are disabled";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v10);
        char v13 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 16))(v9, v5, __p);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BB1FF320(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned int,std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149FD98;
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149FD98;
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F149FD98;
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB1FF4B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F149FD98;
  return std::__function::__value_func<void ()(unsigned int,std::string const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::string>::register_listener(std::function<void ()(unsigned int,std::string const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<std::string>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    __n128 result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,std::string const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,std::string const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149FDE0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::~__func(void *a1)
{
  *a1 = &unk_1F149FDE0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F149FDE0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F149FDE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1},std::allocator<void vp::vx::observe_global<std::string>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::string> &)::{lambda(unsigned int,std::string const&)#1}>,void ()(unsigned int,std::string const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void vp::vx::observe_global<BOOL>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &)::{lambda(unsigned int,BOOL const&)#1} &,unsigned int,BOOL const&>((uint64_t *)(a1 + 8), a2);
}

void *std::__function::__value_func<void ()(unsigned int,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::unique_ptr<vp::vx::IO_Node_Audio_Capturer,vp::Allocator_Delete<vp::vx::IO_Node_Audio_Capturer>>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)v2 + 112))(v2);
    return (void *)(*(uint64_t (**)(void, uint64_t, void, void))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Node_Audio_Capturer>::new_object[abi:ne180100]<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>(void *a1, uint64_t a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 136, 8);
  v12[0] = &v14;
  v12[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Node_Audio_Capturer>::construct[abi:ne180100]<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>((uint64_t)a1, v14, a2, a3, a4, a5);
  char v13 = 1;
  uint64_t v10 = v14;
  std::__exception_guard_exceptions<vp::vx::IO_Node_Audio_Capturer * std::pmr::polymorphic_allocator<vp::vx::IO_Node_Audio_Capturer>::new_object[abi:ne180100]<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>(std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1BB1FFA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::pmr::polymorphic_allocator<vp::vx::IO_Node_Audio_Capturer>::construct[abi:ne180100]<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t v6 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v8 = v6;
  long long v9 = *(_OWORD *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 24);
  vp::vx::IO_Node_Audio_Capturer::IO_Node_Audio_Capturer(a2, &v8, *a4, *a5, *a6);
  return std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>::reset[abi:ne180100](&v8, 0);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Node_Audio_Capturer * std::pmr::polymorphic_allocator<vp::vx::IO_Node_Audio_Capturer>::new_object[abi:ne180100]<vp::vx::IO_Node_Audio_Capturer,std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &>(std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>,vp::vx::IO_Node_Audio_Capturer::Mode,vp::Audio_Capture::RingBufferMode,vp::Allocator<vp::vx::io::Node> &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 136, 8);
  }
  return a1;
}

uint64_t vp::vx::IO_Smart_Cover_Detector_Delegate::IO_Smart_Cover_Detector_Delegate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = &unk_1F1493718;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 48) = v4 + 24;
  *(void *)(a1 + 56) = v4;
  *(void *)a1 = &unk_1F149FE30;
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = &unk_1F149FE78;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!*(void *)(a1 + 24))
  {
    uint64_t v6 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  return a1;
}

void vp::vx::IO_Smart_Cover_Detector_Delegate::~IO_Smart_Cover_Detector_Delegate(vp::vx::IO_Smart_Cover_Detector_Delegate *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 5) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Smart_Cover_Detector_Delegate::~IO_Smart_Cover_Detector_Delegate(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Smart_Cover_Detector_Delegate::~IO_Smart_Cover_Detector_Delegate(vp::vx::IO_Smart_Cover_Detector_Delegate *this)
{
}

{
  uint64_t vars8;

  vp::vx::IO_Smart_Cover_Detector_Delegate::~IO_Smart_Cover_Detector_Delegate((vp::vx::IO_Smart_Cover_Detector_Delegate *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void vp::vx::IO_Smart_Cover_Detector_Delegate::get_parameter_ids(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    uint64_t v3 = operator new(4uLL);
    *a2 = v3;
    *v3++ = 1853058404;
    a2[1] = v3;
    a2[2] = v3;
  }
}

void vp::vx::IO_Smart_Cover_Detector_Delegate::get_property_ids(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void vp::vx::IO_Smart_Cover_Detector_Delegate::process(uint64_t a1, int a2, uint64_t (***a3)(void))
{
  uint64_t v5 = (**a3)(a3);
  if (!v5)
  {
    uint64_t v10 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v10);
  }
  if (!a2)
  {
    uint64_t v6 = v5;
    int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    char v8 = v7;
    if (*(unsigned char *)(a1 + 8)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v7 == 0;
    }
    if (v9)
    {
      if (*(unsigned char *)(a1 + 8) && (v7 & 1) == 0 && *(unsigned char *)(a1 + 16))
      {
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t, float))(*(void *)v6 + 32))(v15, v6, 1853058404, *(float *)(a1 + 12));
        if (!v18) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)v15);
        }
        if (*(unsigned char *)(a1 + 16)) {
          *(unsigned char *)(a1 + 16) = 0;
        }
      }
      goto LABEL_24;
    }
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 24))(v11, v6, 1853058404);
    if (v14)
    {
      *(_DWORD *)(a1 + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_DWORD *)caulk::expected<float,vp::vx::io::Error>::value((const vp::vx::io::Error *)v11);
      *(unsigned char *)(a1 + 16) = 1;
      char v18 = v14;
      if (v14)
      {
LABEL_21:
        if (*(unsigned char *)(a1 + 16))
        {
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t, float))(*(void *)v6 + 32))(v15, v6, 1853058404, 1.0);
          if (!v18) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)v15);
          }
        }
LABEL_24:
        *(unsigned char *)(a1 + 8) = v8;
        return;
      }
    }
    else
    {
      char v18 = 0;
    }
    v15[0] = v11[0];
    v15[1] = v11[1];
    long long v16 = v12;
    long long v17 = v13;
    long long v12 = 0uLL;
    *(void *)&long long v13 = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v15);
    if (!v14) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v11);
    }
    goto LABEL_21;
  }
}

uint64_t vp::vx::IO_Smart_Cover_Detector_Delegate_Factory::IO_Smart_Cover_Detector_Delegate_Factory(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = &unk_1F1493718;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v4 + 24;
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v4;
  *(void *)a1 = &unk_1F149FEA0;
  *(void *)(a1 + 24) = &unk_1F149FED0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v6 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  return a1;
}

vp::vx::IO_Smart_Cover_Detector_Delegate **vp::vx::IO_Smart_Cover_Detector_Delegate_Factory::new_node_delegate(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v10[1] = a5;
  uint64_t v11 = a3;
  v10[0] = a4;
  __n128 result = (vp::vx::IO_Smart_Cover_Detector_Delegate **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if (result)
  {
    __n128 result = (vp::vx::IO_Smart_Cover_Detector_Delegate **)(*((uint64_t (**)(vp::vx::IO_Smart_Cover_Detector_Delegate **, uint64_t, void))*result
                                                           + 1))(result, 1853058404, 0);
    if (result)
    {
      vp::allocate_unique<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>(&v11, (uint64_t *)(a1 + 8), (uint64_t)v8);
      long long v7 = v8[0];
      *(void *)&v8[0] = 0;
      v9[0] = v7;
      v9[1] = v8[1];
      caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>)>::operator()(v10, (uint64_t *)v9);
      std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100](v9, 0);
      return std::unique_ptr<vp::vx::IO_Smart_Cover_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Smart_Cover_Detector_Delegate>>::reset[abi:ne180100]((vp::vx::IO_Smart_Cover_Detector_Delegate **)v8, 0);
    }
  }
  return result;
}

vp::vx::IO_Smart_Cover_Detector_Delegate **vp::allocate_unique<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v4 = v7;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 16) = xmmword_1BB8716C0;
  uint64_t v5 = (vp::vx::IO_Smart_Cover_Detector_Delegate *)std::pmr::polymorphic_allocator<vp::vx::IO_Smart_Cover_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>(&v7, a2);
  return std::unique_ptr<vp::vx::IO_Smart_Cover_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Smart_Cover_Detector_Delegate>>::reset[abi:ne180100]((vp::vx::IO_Smart_Cover_Detector_Delegate **)a3, v5);
}

void sub_1BB200168(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Smart_Cover_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Smart_Cover_Detector_Delegate>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void vp::vx::IO_Smart_Cover_Detector_Delegate_Factory::~IO_Smart_Cover_Detector_Delegate_Factory(vp::vx::IO_Smart_Cover_Detector_Delegate_Factory *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 3) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 3) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Smart_Cover_Detector_Delegate_Factory::~IO_Smart_Cover_Detector_Delegate_Factory(vp::vx::IO_Smart_Cover_Detector_Delegate_Factory *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v1[3] = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v1[3] = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

vp::vx::IO_Smart_Cover_Detector_Delegate **std::unique_ptr<vp::vx::IO_Smart_Cover_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Smart_Cover_Detector_Delegate>>::reset[abi:ne180100](vp::vx::IO_Smart_Cover_Detector_Delegate **result, vp::vx::IO_Smart_Cover_Detector_Delegate *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    vp::vx::IO_Smart_Cover_Detector_Delegate::~IO_Smart_Cover_Detector_Delegate(v2);
    return (vp::vx::IO_Smart_Cover_Detector_Delegate **)(*(uint64_t (**)(vp::vx::IO_Smart_Cover_Detector_Delegate *, vp::vx::IO_Smart_Cover_Detector_Delegate *, vp::vx::IO_Smart_Cover_Detector_Delegate *, vp::vx::IO_Smart_Cover_Detector_Delegate *))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Smart_Cover_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>(void *a1, uint64_t *a2)
{
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 64, 8);
  v6[0] = &v8;
  v6[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Smart_Cover_Detector_Delegate>::construct[abi:ne180100]<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>((uint64_t)a1, v8, a2);
  char v7 = 1;
  uint64_t v4 = v8;
  std::__exception_guard_exceptions<vp::vx::IO_Smart_Cover_Detector_Delegate * std::pmr::polymorphic_allocator<vp::vx::IO_Smart_Cover_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>(std::shared_ptr<vp::services::Smart_Cover_Detector> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void sub_1BB200450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pmr::polymorphic_allocator<vp::vx::IO_Smart_Cover_Detector_Delegate>::construct[abi:ne180100]<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::IO_Smart_Cover_Detector_Delegate::IO_Smart_Cover_Detector_Delegate(a2, (uint64_t)&v5);
  uint64_t v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Smart_Cover_Detector_Delegate * std::pmr::polymorphic_allocator<vp::vx::IO_Smart_Cover_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Smart_Cover_Detector_Delegate,std::shared_ptr<vp::services::Smart_Cover_Detector> const&>(std::shared_ptr<vp::services::Smart_Cover_Detector> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 64, 8);
  }
  return a1;
}

uint64_t *vp::vx::Orientation_Manager::Orientation_Manager(uint64_t *a1, std::pmr *a2, uint64_t a3)
{
  v48[4] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  uint64_t v5 = (uint64_t)(a1 + 5);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v6 = (uint64_t)(a1 + 2);
  LODWORD(__p) = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>(a2, &__p, (uint64_t)(a1 + 2));
  LODWORD(__p) = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>(a2, &__p, v5);
  char v7 = *((void *)a2 + 1);
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a1;
  BOOL v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v8 = *a1;
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v18 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v18);
  }
  if (!v8) {
    goto LABEL_26;
  }
LABEL_7:
  vp::vx::data_flow::State<void>::State((uint64_t)v36, v6);
  if (v7)
  {
    dispatch_retain(v7);
    vp::vx::data_flow::State<void>::State((uint64_t)&__p, (uint64_t)v36);
    dispatch_object_t object = v7;
    dispatch_retain(v7);
  }
  else
  {
    vp::vx::data_flow::State<void>::State((uint64_t)&__p, (uint64_t)v36);
    dispatch_object_t object = 0;
  }
  __n128 v10 = vp::vx::data_flow::State<void>::State((uint64_t)v48, (uint64_t)&__p);
  v48[3] = object;
  dispatch_object_t object = 0;
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t (***)(), __n128))(*(void *)v8 + 16))(v8, &v47, v10);
  ((void (*)(uint64_t))v47[3])((uint64_t)v48);
  if (object) {
    dispatch_release(object);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)&__p);
  if (v7) {
    dispatch_release(v7);
  }
  long long v12 = (vp *)vp::vx::data_flow::State<void>::~State((uint64_t)v36);
  if ((v11 & 1) == 0)
  {
    log = vp::get_log(v12);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Orientation_Manager]", 27, &__p);
      uint64_t v21 = v39;
      uint64_t v22 = v38;
      unsigned __int8 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        if ((v21 & 0x80u) == 0) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = v22;
        }
        p_p = __p;
        if ((v39 & 0x80u) == 0) {
          p_p = &__p;
        }
        if (v24) {
          std::string::size_type v26 = " ";
        }
        else {
          std::string::size_type v26 = "";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
        char v44 = p_p;
        __int16 v45 = 2080;
        uint64_t v46 = v26;
        _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "%s%sfailed to register device orientation listener", buf, 0x16u);
      }
      if ((char)v39 < 0) {
        operator delete(__p);
      }
    }
  }
  uint64_t v13 = *a1;
  vp::vx::data_flow::State<void>::State((uint64_t)v35, v5);
  if (v7)
  {
    dispatch_retain(v7);
    vp::vx::data_flow::State<void>::State((uint64_t)&__p, (uint64_t)v35);
    dispatch_object_t object = v7;
    dispatch_retain(v7);
  }
  else
  {
    vp::vx::data_flow::State<void>::State((uint64_t)&__p, (uint64_t)v35);
    dispatch_object_t object = 0;
  }
  __n128 v14 = vp::vx::data_flow::State<void>::State((uint64_t)v42, (uint64_t)&__p);
  v42[3] = object;
  dispatch_object_t object = 0;
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t (***)(), __n128))(*(void *)v13 + 32))(v13, &v41, v14);
  ((void (*)(uint64_t))v41[3])((uint64_t)v42);
  if (object) {
    dispatch_release(object);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)&__p);
  if (v7) {
    dispatch_release(v7);
  }
  long long v16 = (vp *)vp::vx::data_flow::State<void>::~State((uint64_t)v35);
  if ((v15 & 1) == 0)
  {
    char v27 = vp::get_log(v16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v28 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Orientation_Manager]", 27, &__p);
      uint64_t v29 = v39;
      uint64_t v30 = v38;
      uint64_t v31 = vp::get_log(v28);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        if ((v29 & 0x80u) == 0) {
          uint64_t v32 = v29;
        }
        else {
          uint64_t v32 = v30;
        }
        uint64_t v33 = __p;
        if ((v39 & 0x80u) == 0) {
          uint64_t v33 = &__p;
        }
        if (v32) {
          std::string::size_type v34 = " ";
        }
        else {
          std::string::size_type v34 = "";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
        char v44 = v33;
        __int16 v45 = 2080;
        uint64_t v46 = v34;
        _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "%s%sfailed to register UI orientation listener", buf, 0x16u);
      }
      if ((char)v39 < 0) {
        operator delete(__p);
      }
    }
  }
  if (v7) {
    dispatch_release(v7);
  }
  return a1;
}

void sub_1BB20099C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  _OWORD v8[2] = &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void vp::vx::Orientation_Manager::~Orientation_Manager(std::__shared_weak_count **this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (vp *)((uint64_t (*)(std::__shared_weak_count *))(*this)->__get_deleter)(*this);
  if ((v2 & 1) == 0)
  {
    log = vp::get_log(v2);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Orientation_Manager]", 27, &__p);
      uint64_t v7 = v23;
      uint64_t v8 = v22;
      BOOL v9 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        if ((v7 & 0x80u) == 0) {
          uint64_t v10 = v7;
        }
        else {
          uint64_t v10 = v8;
        }
        p_p = __p;
        if ((v23 & 0x80u) == 0) {
          p_p = &__p;
        }
        if (v10) {
          long long v12 = " ";
        }
        else {
          long long v12 = "";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
        long long v25 = p_p;
        __int16 v26 = 2080;
        char v27 = v12;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to unregister device orientation listener", buf, 0x16u);
      }
      if ((char)v23 < 0) {
        operator delete(__p);
      }
    }
  }
  uint64_t v3 = (vp *)((uint64_t (*)(void))(*this)->__vftable[1].~__shared_weak_count)();
  if ((v3 & 1) == 0)
  {
    uint64_t v13 = vp::get_log(v3);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      __n128 v14 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Orientation_Manager]", 27, &__p);
      uint64_t v15 = v23;
      uint64_t v16 = v22;
      long long v17 = vp::get_log(v14);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if ((v15 & 0x80u) == 0) {
          uint64_t v18 = v15;
        }
        else {
          uint64_t v18 = v16;
        }
        uint64_t v19 = __p;
        if ((v23 & 0x80u) == 0) {
          uint64_t v19 = &__p;
        }
        if (v18) {
          uint64_t v20 = " ";
        }
        else {
          uint64_t v20 = "";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
        long long v25 = v19;
        __int16 v26 = 2080;
        char v27 = v20;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to unregister UI orientation listener", buf, 0x16u);
      }
      if ((char)v23 < 0) {
        operator delete(__p);
      }
    }
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 5));
  vp::vx::data_flow::State<void>::~State((uint64_t)(this + 2));
  uint64_t v4 = this[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t vp::vx::Orientation_Manager::get_device_orientation@<X0>(vp::vx::Orientation_Manager *this@<X0>, uint64_t a2@<X8>)
{
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)this + 16);
}

uint64_t vp::vx::Orientation_Manager::get_ui_orientation@<X0>(vp::vx::Orientation_Manager *this@<X0>, uint64_t a2@<X8>)
{
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)this + 40);
}

void caulk::inplace_function_detail::vtable<void,CAOrientation>::vtable<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>(caulk::inplace_function_detail::wrapper<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>)::{lambda(void *,CAOrientation&&)#1}::__invoke(dispatch_object_t *a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = a1[3];
  if (v4) {
    dispatch_retain(a1[3]);
  }
  v6[0] = std::pmr::get_default_resource((std::pmr *)a1);
  v6[1] = 0;
  void v6[2] = &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v6) = v3;
  dispatch_object_t object = v4;
  vp::vx::data_flow::State<void>::set_value((uint64_t)a1, (uint64_t)v6, &object);
  if (object) {
    dispatch_release(object);
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
}

void sub_1BB200DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10)
{
  if (object) {
    dispatch_release(object);
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&a10);
  _Unwind_Resume(a1);
}

void caulk::inplace_function_detail::vtable<void,CAOrientation>::vtable<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>(caulk::inplace_function_detail::wrapper<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>)::{lambda(void *,void *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  vp::vx::data_flow::State<void>::State(a1, a2);
  uint64_t v4 = *(NSObject **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    dispatch_retain(v4);
  }
}

uint64_t caulk::inplace_function_detail::vtable<void,CAOrientation>::vtable<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>(caulk::inplace_function_detail::wrapper<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>)::{lambda(void *,void *)#2}::__invoke(uint64_t a1, uint64_t a2)
{
  vp::vx::data_flow::State<void>::State(a1, a2);
  *(void *)(v3 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;

  return vp::vx::data_flow::State<void>::~State(a2);
}

uint64_t caulk::inplace_function_detail::vtable<void,CAOrientation>::vtable<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>(caulk::inplace_function_detail::wrapper<vp::vx::anonymous namespace'::make_listener_for (vp::vx::data_flow::Variable<CAOrientation>,applesauce::dispatch::v1::queue)::$_0>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }

  return vp::vx::data_flow::State<void>::~State(a1);
}

vp::vx::database::v1::runtime::File_Manager *vp::vx::database::v1::runtime::File_Manager::File_Manager(vp::vx::database::v1::runtime::File_Manager *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F149FF18;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, __p);
    unint64_t v4 = v12;
    uint64_t v5 = __p[1];
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      uint64_t v8 = (void **)__p[0];
      if ((v12 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      if (v7) {
        BOOL v9 = " ";
      }
      else {
        BOOL v9 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      __n128 v14 = v8;
      __int16 v15 = 2080;
      uint64_t v16 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void vp::vx::database::v1::runtime::File_Manager::~File_Manager(void **this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, __p);
    unint64_t v4 = v11;
    uint64_t v5 = __p[1];
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      uint64_t v8 = (void **)__p[0];
      if ((v11 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      if (v7) {
        BOOL v9 = " ";
      }
      else {
        BOOL v9 = "";
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      uint64_t v13 = v8;
      __int16 v14 = 2080;
      __int16 v15 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v11 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::~__hash_table((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  vp::vx::database::v1::runtime::File_Manager::~File_Manager(this);

  JUMPOUT(0x1C185D370);
}

__n128 vp::vx::database::v1::runtime::File_Manager::set_working_directory_path(vp::vx::database::v1::runtime::File_Manager *this, std::__fs::filesystem::path *a2)
{
  uint64_t v3 = (char *)this + 8;
  if (*((char *)this + 31) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *(__n128 *)&a2->__pn_.__r_.__value_.__l.__data_;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *((void *)&a2->__pn_.__r_.__value_.__l + 2);
  *(__n128 *)uint64_t v3 = result;
  *((unsigned char *)&a2->__pn_.__r_.__value_.__s + 23) = 0;
  a2->__pn_.__r_.__value_.__s.__data_[0] = 0;
  return result;
}

void vp::vx::database::v1::runtime::File_Manager::load_property_list(vp::vx::database::v1::runtime::File_Manager *this@<X0>, std::__fs::filesystem::path *a2@<X1>, CFTypeRef *a3@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, &v68);
    std::string::size_type v8 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v68.__r_.__value_.__l.__size_;
    uint64_t v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((v8 & 0x80u) == 0) {
        std::string::size_type v11 = v8;
      }
      else {
        std::string::size_type v11 = size;
      }
      unsigned __int8 v12 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned __int8 v12 = &v68;
      }
      if (v11) {
        uint64_t v13 = " ";
      }
      else {
        uint64_t v13 = "";
      }
      int v14 = SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = a2->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      if (v14 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = (std::__fs::filesystem::path *)v15;
      }
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      std::error_code v67 = v16;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s%swill load \"%s\" file", (uint8_t *)&buf, 0x20u);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::find<std::__fs::filesystem::path>((void *)this + 4, a2);
  if (v17)
  {
    uint64_t v18 = v17[5];
    CFTypeRef cf = (CFTypeRef)v18;
    if (v18) {
      uint64_t v18 = (uint64_t)CFRetain((CFTypeRef)v18);
    }
LABEL_55:
    std::string::size_type v34 = vp::get_log((vp *)v18);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, &v68);
      std::string::size_type v36 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      std::string::size_type v37 = v68.__r_.__value_.__l.__size_;
      uint64_t v38 = vp::get_log(v35);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        if ((v36 & 0x80u) == 0) {
          std::string::size_type v39 = v36;
        }
        else {
          std::string::size_type v39 = v37;
        }
        uint64_t v40 = (std::string *)v68.__r_.__value_.__r.__words[0];
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v40 = &v68;
        }
        if (v39) {
          uint64_t v41 = " ";
        }
        else {
          uint64_t v41 = "";
        }
        int v42 = SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]);
        std::string::size_type v43 = a2->__pn_.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
        if (v42 >= 0) {
          char v44 = a2;
        }
        else {
          char v44 = (std::__fs::filesystem::path *)v43;
        }
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v41;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        std::error_code v67 = v44;
        _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEBUG, "%s%sdid load \"%s\" file", (uint8_t *)&buf, 0x20u);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
    *a3 = cf;
    return;
  }
  std::__fs::filesystem::path::__string_view v20 = std::__fs::filesystem::path::__root_directory(a2);
  data = (std::string_view::value_type *)v20.__data_;
  if (v20.__size_) {
    goto LABEL_21;
  }
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v68, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v68 = *(std::string *)((char *)this + 8);
  }
  std::__fs::filesystem::path::root_directory[abi:ne180100]((const std::__fs::filesystem::path *)((char *)this + 8), (uint64_t)&__p);
  while (1)
  {
    std::__fs::filesystem::path::__string_view v45 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&v68);
    data = (std::string_view::value_type *)v45.__data_;
    if (!v45.__size_) {
      break;
    }
    std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)&v68, &v61);
    data = (std::string_view::value_type *)std::__fs::filesystem::__status(&v61, 0);
    if (v65 && v65 != 255)
    {
      if ((SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        std::string buf = v61.__pn_;
        LOBYTE(v67) = 1;
        break;
      }
      std::string::__init_copy_ctor_external(&buf, v61.__pn_.__r_.__value_.__l.__data_, v61.__pn_.__r_.__value_.__l.__size_);
      char v47 = 1;
      goto LABEL_84;
    }
    v46.__data_ = (const std::string_view::value_type *)&__p;
    data = (std::string_view::value_type *)std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v68, v46);
    if (data)
    {
      char v47 = 0;
      buf.__r_.__value_.__s.__data_[0] = 0;
LABEL_84:
      LOBYTE(v67) = v47;
      if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__pn_.__r_.__value_.__l.__data_);
      }
      break;
    }
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v68, (uint64_t)&v60);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::string v68 = v60;
    if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if ((char)v64 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (!v45.__size_)
  {
LABEL_21:
    if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&buf, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = a2->__pn_;
    }
    LOBYTE(v67) = 1;
    goto LABEL_27;
  }
  if ((_BYTE)v67)
  {
LABEL_27:
    uint64_t v21 = vp::get_log((vp *)data);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, &__p);
      uint64_t v23 = v64;
      uint64_t v24 = v63;
      long long v25 = vp::get_log(v22);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        if ((v23 & 0x80u) == 0) {
          uint64_t v26 = v23;
        }
        else {
          uint64_t v26 = v24;
        }
        if ((v64 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (v26) {
          uint64_t v28 = " ";
        }
        else {
          uint64_t v28 = "";
        }
        LODWORD(v68.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        p_std::string buf = &buf;
        WORD2(v68.__r_.__value_.__r.__words[1]) = 2080;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
        HIWORD(v68.__r_.__value_.__r.__words[2]) = 2080;
        uint64_t v69 = (std::__fs::filesystem::path *)p_buf;
        _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_INFO, "%s%sload \"%s\" file", (uint8_t *)&v68, 0x20u);
      }
      if ((char)v64 < 0) {
        operator delete(__p);
      }
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &buf;
    }
    else {
      uint64_t v30 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    uint64_t v31 = (const char *)std::string::basic_string[abi:ne180100]<0>(&v68, (char *)v30);
    CFPropertyListRef CFTypeRef = applesauce::CF::details::make_CFTypeRef(v31);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    CFTypeRef cf = CFTypeRef;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)&cf;
    uint64_t v18 = (uint64_t)std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__emplace_unique_impl<std::tuple<std::__fs::filesystem::path const&,applesauce::CF::TypeRef&>>((void *)this + 4, &v68);
    char v33 = 0;
    goto LABEL_49;
  }
  uint64_t v48 = vp::get_log((vp *)data);
  uint64_t v18 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    uint64_t v49 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, &__p);
    uint64_t v50 = v64;
    uint64_t v51 = v63;
    uint64_t v52 = vp::get_log(v49);
    uint64_t v18 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if ((v50 & 0x80u) == 0) {
        uint64_t v53 = v50;
      }
      else {
        uint64_t v53 = v51;
      }
      uint64_t v54 = __p;
      if ((v64 & 0x80u) == 0) {
        uint64_t v54 = &__p;
      }
      if (v53) {
        uint64_t v55 = " ";
      }
      else {
        uint64_t v55 = "";
      }
      int v56 = SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]);
      std::string::size_type v57 = a2->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v68.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
      if (v56 >= 0) {
        uint64_t v58 = a2;
      }
      else {
        uint64_t v58 = (std::__fs::filesystem::path *)v57;
      }
      WORD2(v68.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v55;
      HIWORD(v68.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v69 = v58;
      _os_log_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_DEFAULT, "%s%sfailed to find \"%s\" file", (uint8_t *)&v68, 0x20u);
    }
    if ((char)v64 < 0) {
      operator delete(__p);
    }
  }
  *a3 = 0;
  char v33 = 1;
LABEL_49:
  if ((_BYTE)v67 && SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v33 & 1) == 0) {
    goto LABEL_55;
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB201864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint8_t buf,int a28,int a29,__int16 a30,uint64_t a31,char a32,char a33,uint64_t a34,__int16 a35,uint64_t a36)
{
  if (a2)
  {
    if (a19 < 0) {
      operator delete(__p);
    }
    if (a25 < 0) {
      operator delete(a20);
    }
    if (*(char *)(v37 - 105) < 0) {
      operator delete(*(void **)(v37 - 128));
    }
    std::string::size_type v39 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v39);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::database::v1::runtime::File_Manager]", 43, &a20);
      int v42 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        vp::get_log_exception_info((uint64_t)&a11);
      }
      if (a25 < 0) {
        operator delete(a20);
      }
    }
    void *v36 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BB201514);
  }
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::path::root_directory[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__root_directory(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

CFPropertyListRef applesauce::CF::details::make_CFTypeRef(const char *a1)
{
  applesauce::CF::make_DataRef(a1, &data);
  if (!data)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFPropertyListRef v1 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
  if (!v1)
  {
    unint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v4, "Could not construct");
  }
  if (data) {
    CFRelease(data);
  }
  return v1;
}

void sub_1BB201C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::DataRef::~DataRef(&a10);
  _Unwind_Resume(a1);
}

void *applesauce::CF::make_DataRef@<X0>(const char *a1@<X0>, CFDataRef *a2@<X8>)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  std::__fs::filesystem::path::__string_view v3 = fopen(a1, "rb");
  std::string __p = &unk_1F149FF40;
  uint64_t v10 = (unsigned char *)MEMORY[0x1E4F14800];
  p_p = &__p;
  __stream = v3;
  std::__function::__value_func<int ()(__sFILE *)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)&__p);
  std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](&__p);
  if (!__stream)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  fseek(__stream, 0, 2);
  size_t v4 = MEMORY[0x1C185DC20](__stream);
  std::vector<unsigned char>::vector(&__p, v4);
  fseek(__stream, 0, 0);
  fread(__p, 1uLL, v10 - (unsigned char *)__p, __stream);
  CFDataRef v5 = CFDataCreate(0, (const UInt8 *)__p, v10 - (unsigned char *)__p);
  *a2 = v5;
  if (!v5)
  {
    std::string::size_type v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100]((uint64_t *)&__stream, 0);
  return std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](v13);
}

void sub_1BB201E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100](&a13, 0);
  std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::~__func()
{
}

void *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F149FF40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F149FF40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__value_func<int ()(__sFILE *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    CFDataRef v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BB202068(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<int ()(__sFILE *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<int ()(__sFILE *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::__fs::filesystem::path const,applesauce::CF::TypeRef>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::__fs::filesystem::path const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::find<std::__fs::filesystem::path>(void *a1, std::__fs::filesystem::path *__p)
{
  size_t v4 = std::__fs::filesystem::hash_value(__p);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  size_t v7 = v4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    size_t v10 = v4;
    if (v4 >= *(void *)&v6) {
      size_t v10 = v4 % *(void *)&v6;
    }
  }
  else
  {
    size_t v10 = (*(void *)&v6 - 1) & v4;
  }
  std::string::size_type v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v13 = i[1];
    if (v13 == v7)
    {
      v5.__data_ = (const std::string_view::value_type *)__p;
      if (std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)(i + 2), v5)) {
        return i;
      }
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(void *)&v6) {
          v13 %= *(void *)&v6;
        }
      }
      else
      {
        v13 &= *(void *)&v6 - 1;
      }
      if (v13 != v10) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__emplace_unique_impl<std::tuple<std::__fs::filesystem::path const&,applesauce::CF::TypeRef&>>(void *a1, void *a2)
{
  std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__construct_node<std::tuple<std::__fs::filesystem::path const&,applesauce::CF::TypeRef&>>((uint64_t)a1, a2, (uint64_t)v6);
  BOOL inserted = std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1BB20233C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

size_t std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__construct_node<std::tuple<std::__fs::filesystem::path const&,applesauce::CF::TypeRef&>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  int8x8_t v6 = (char *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)int8x8_t v6 = 0;
  *((void *)v6 + 1) = 0;
  size_t v7 = (const std::__fs::filesystem::path *)std::pair<std::__fs::filesystem::path const,applesauce::CF::TypeRef>::pair[abi:ne180100]<std::__fs::filesystem::path const&,applesauce::CF::TypeRef&,(void *)0>((std::string *)(v6 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  size_t result = std::__fs::filesystem::hash_value(v7);
  *((void *)v6 + 1) = result;
  return result;
}

void sub_1BB2023B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  std::basic_string_view<_CharT, _Traits>::size_type v4 = a2 + 16;
  v7.__data_ = (const std::string_view::value_type *)std::__fs::filesystem::hash_value((const std::__fs::filesystem::path *)(a2 + 16));
  v2[1] = v7.__data_;
  v7.__size_ = v4;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v7);
  if (v5) {
    return v5;
  }
  std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

std::string *std::pair<std::__fs::filesystem::path const,applesauce::CF::TypeRef>::pair[abi:ne180100]<std::__fs::filesystem::path const&,applesauce::CF::TypeRef&,(void *)0>(std::string *this, void *a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v4 = (long long *)*a2;
  if (*(char *)(*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    this->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  int8x8_t v6 = (CFTypeRef *)a2[1];
  CFTypeRef v7 = *v6;
  if (*v6) {
    CFRetain(*v6);
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, std::__fs::filesystem::path::__string_view a2)
{
  int8x8_t v3 = *(int8x8_t *)(a1 + 8);
  if (v3)
  {
    std::string::size_type size = (const std::string_view::value_type *)a2.__size_;
    CFDataRef data = a2.__data_;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
    v6.i16[0] = vaddlv_u8(v6);
    unint64_t v7 = v6.u32[0];
    if (v6.u32[0] > 1uLL) {
      uint64_t v8 = (const std::string_view::value_type *)*(void *)&v3 <= a2.__data_
    }
         ? (unint64_t)a2.__data_ % *(void *)&v3
         : (uint64_t)a2.__data_;
    else {
      uint64_t v8 = (*(void *)&v3 - 1) & (uint64_t)a2.__data_;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if ((const std::string_view::value_type *)v11 == data)
        {
          a2.__data_ = size;
          if (std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v7 > 1)
          {
            if (v11 >= *(void *)&v3) {
              v11 %= *(void *)&v3;
            }
          }
          else
          {
            v11 &= *(void *)&v3 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!*(void *)&v3 || (float)(v13 * (float)(unint64_t)v3) < v12)
  {
    BOOL v14 = 1;
    if (*(void *)&v3 >= 3uLL) {
      BOOL v14 = (*(void *)&v3 & (*(void *)&v3 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * *(void *)&v3);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::__unordered_map_hasher<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,vp::vx::database::v1::runtime::File_Manager::Hash,std::equal_to<std::__fs::filesystem::path>,true>,std::__unordered_map_equal<std::__fs::filesystem::path,std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,std::equal_to<std::__fs::filesystem::path>,vp::vx::database::v1::runtime::File_Manager::Hash,true>,std::allocator<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  long long v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    void *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    long long v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::__fs::filesystem::path,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::__fs::filesystem::path const,applesauce::CF::TypeRef>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::AGC_Adaptive_Control_Delegate(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = (char *)this + 40;
  *((void *)this + 5) = &unk_1F1493718;
  unint64_t v3 = (char *)operator new(0x40uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)unint64_t v3 = &unk_1F1493738;
  *(_OWORD *)(v3 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v3 + 7) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *((void *)this + 6) = v3 + 24;
  *((void *)this + 7) = v3;
  *(void *)this = &unk_1F149FF90;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = &unk_1F149FFD8;
  *((void *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = 1;
  log = vp::get_log((vp *)v3);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    vp::vx::io::get_log_context_info((uint64_t)v2, (uint64_t)"vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate]", 61, __p);
    unint64_t v5 = v14;
    unint64_t v6 = __p[1];
    uint64_t v8 = vp::get_log(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      if ((v5 & 0x80u) == 0) {
        unint64_t v9 = v5;
      }
      else {
        unint64_t v9 = (unint64_t)v6;
      }
      size_t v10 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        size_t v10 = __p;
      }
      if (v9) {
        unint64_t v11 = " ";
      }
      else {
        unint64_t v11 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v16 = v10;
      __int16 v17 = 2080;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%s%screated", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1BB2028E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::~AGC_Adaptive_Control_Delegate(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    if (this) {
      unint64_t v3 = (char *)this + 40;
    }
    else {
      unint64_t v3 = 0;
    }
    vp::vx::io::get_log_context_info((uint64_t)v3, (uint64_t)"vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate]", 61, __p);
    unint64_t v4 = v12;
    unint64_t v5 = __p[1];
    unint64_t v7 = vp::get_log(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v8 = v4;
      }
      else {
        unint64_t v8 = (unint64_t)v5;
      }
      unint64_t v9 = (void **)__p[0];
      if ((v12 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      if (v8) {
        size_t v10 = " ";
      }
      else {
        size_t v10 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unsigned __int8 v14 = v9;
      __int16 v15 = 2080;
      unint64_t v16 = v10;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

{
  uint64_t v1;
  std::__shared_weak_count *v2;

  vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::~AGC_Adaptive_Control_Delegate(this);
  *(void *)(v1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = &unk_1F1493718;
  int8x8_t v2 = *(std::__shared_weak_count **)(v1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::~AGC_Adaptive_Control_Delegate(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::~AGC_Adaptive_Control_Delegate(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *this)
{
}

{
  uint64_t vars8;

  vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::~AGC_Adaptive_Control_Delegate((vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

char *vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::get_parameter_ids@<X0>(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1)
  {
    size_t result = (char *)operator new(0x20uLL);
    a2[1] = result + 32;
    a2[2] = result + 32;
    qmemcpy(result, "elcaegmabpsdfhcegmcetmcegtceedrm", 32);
    *a2 = result;
  }
  else
  {
    unint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *unint64_t v4 = 0x616D676561636C65;
    size_t result = (char *)(v4 + 1);
    a2[1] = result;
    a2[2] = result;
  }
  return result;
}

void vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::get_property_ids(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    unint64_t v3 = operator new(4uLL);
    *a2 = v3;
    *v3++ = 1835229540;
    a2[1] = v3;
    a2[2] = v3;
  }
}

void vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::notify(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v45 = v3;
    uint64_t v46 = v4;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v7)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 24))(&v31);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v36, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      uint64_t v40 = v36;
      long long v8 = v38;
      long long v44 = v39;
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      long long v34 = v44;
      long long v33 = v8;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = 0;
      unsigned __int8 v35 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v40);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v36);
    }
    int v9 = v35;
    float v10 = *(float *)&v31;
    if (!v35) {
      float v10 = -33.1;
    }
    *(float *)(a1 + 8) = v10;
    if (!v9) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v11)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 24))(&v31);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v36, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      uint64_t v40 = v36;
      long long v12 = v38;
      long long v44 = v39;
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      long long v34 = v44;
      long long v33 = v12;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = 0;
      unsigned __int8 v35 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v40);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v36);
    }
    int v13 = v35;
    float v14 = *(float *)&v31;
    if (!v35) {
      float v14 = -10.1;
    }
    *(float *)(a1 + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v14;
    if (!v13) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v15)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 24))(&v31);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v36, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      uint64_t v40 = v36;
      long long v16 = v38;
      long long v44 = v39;
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      long long v34 = v44;
      long long v33 = v16;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = 0;
      unsigned __int8 v35 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v40);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v36);
    }
    int v17 = v35;
    float v18 = *(float *)&v31;
    if (!v35) {
      float v18 = -60.1;
    }
    *(float *)(a1 + 16) = v18;
    if (!v17) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v19)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 24))(&v31);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v36, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      uint64_t v40 = v36;
      long long v20 = v38;
      long long v44 = v39;
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      long long v34 = v44;
      long long v33 = v20;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = 0;
      unsigned __int8 v35 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v40);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v36);
    }
    int v21 = v35;
    unsigned int v22 = *(float *)&v31;
    if (!v35) {
      unsigned int v22 = 20;
    }
    *(_DWORD *)(a1 + 24) = v22;
    if (!v21) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v23)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v23 + 24))(&v31);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v36, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      uint64_t v40 = v36;
      long long v24 = v38;
      long long v44 = v39;
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      long long v34 = v44;
      long long v33 = v24;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = 0;
      unsigned __int8 v35 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v40);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v36);
    }
    int v25 = v35;
    float v26 = *(float *)&v31;
    if (!v35) {
      float v26 = -19.1;
    }
    *(float *)(a1 + 28) = v26;
    if (!v25) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
    if (v27)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v27 + 24))(&v31);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v36, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      uint64_t v40 = v36;
      long long v28 = v38;
      long long v44 = v39;
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      long long v34 = v44;
      long long v33 = v28;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = 0;
      unsigned __int8 v35 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v40);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v36);
    }
    int v29 = v35;
    float v30 = *(float *)&v31;
    if (!v35) {
      float v30 = *(float *)"ffF@elcaegmabpsdfhcegmcetmcegtceedrmelcaegmabpsdfhcegmcetmcegtceedrm";
    }
    *(float *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v30;
    if (!v29) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v31);
    }
    *(unsigned char *)(a1 + 36) = 1;
    *(_DWORD *)(a1 + 2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  }
}

void vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::process(uint64_t a1, int a2, uint64_t (***a3)(void))
{
  if (!a2)
  {
    uint64_t v5 = (*a3)[1](a3);
    if (v5)
    {
      (*(void (**)(BOOL **__return_ptr))(*(void *)v5 + 24))(&v24);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v29, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      long long v38 = v29;
      long long v6 = v31;
      long long v41 = v32;
      long long v31 = 0uLL;
      *(void *)&long long v32 = 0;
      long long v24 = v29;
      uint64_t v25 = v30;
      long long v26 = v6;
      long long v27 = v41;
      *(void *)&long long v41 = 0;
      uint64_t v39 = v30;
      long long v40 = 0uLL;
      char v28 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v29);
    }
    if (v28)
    {
      v7.n128_u32[0] = *(_DWORD *)caulk::expected<float,vp::vx::io::Error>::value((const vp::vx::io::Error *)&v24);
      BOOL v8 = v7.n128_f32[0] == 1.0;
      LOBYTE(v29) = v7.n128_f32[0] == 1.0;
      char v33 = 1;
    }
    else
    {
      long long v34 = v24;
      long long v36 = v26;
      long long v37 = v27;
      long long v26 = 0uLL;
      *(void *)&long long v27 = 0;
      long long v38 = v24;
      long long v10 = v36;
      long long v9 = v37;
      *((void *)&v41 + 1) = *((void *)&v37 + 1);
      *(void *)&long long v37 = 0;
      uint64_t v35 = v25;
      long long v36 = 0uLL;
      char v42 = 0;
      int v29 = v24;
      uint64_t v30 = v25;
      long long v31 = v10;
      long long v32 = v9;
      *(void *)&long long v41 = 0;
      uint64_t v39 = v25;
      long long v40 = 0uLL;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v34);
      char v33 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v29);
      BOOL v8 = 1;
    }
    if (!v28) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
    }
    BOOL v43 = v8;
    long long v34 = &v43;
    uint64_t v35 = 4;
    uint64_t v11 = ((uint64_t (*)(uint64_t (***)(void), __n128))(*a3)[2])(a3, v7);
    if (v11)
    {
      (*(void (**)(BOOL **__return_ptr))(*(void *)v11 + 40))(&v38);
    }
    else
    {
      vp::vx::io::Error::Error((uint64_t)&v24, 13, 463, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
      int v29 = v24;
      long long v12 = v26;
      long long v32 = v27;
      long long v26 = 0uLL;
      *(void *)&long long v27 = 0;
      long long v38 = v24;
      uint64_t v39 = v25;
      long long v40 = v12;
      long long v41 = v32;
      *(void *)&long long v32 = 0;
      uint64_t v30 = v25;
      long long v31 = 0uLL;
      char v42 = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v29);
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
    }
    if (!v42) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
    }
    int v13 = *(_DWORD *)(a1 + 20);
    if (v13)
    {
      *(_DWORD *)(a1 + 2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v13 - 1;
    }
    else
    {
      uint64_t v14 = (*a3)[1](a3);
      if (v14)
      {
        (*(void (**)(BOOL **__return_ptr))(*(void *)v14 + 24))(&v38);
      }
      else
      {
        vp::vx::io::Error::Error((uint64_t)&v24, 13, 396, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
        int v29 = v24;
        long long v15 = v26;
        long long v32 = v27;
        long long v26 = 0uLL;
        *(void *)&long long v27 = 0;
        long long v38 = v24;
        uint64_t v39 = v25;
        long long v40 = v15;
        long long v41 = v32;
        *(void *)&long long v32 = 0;
        uint64_t v30 = v25;
        long long v31 = 0uLL;
        char v42 = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v29);
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
      }
      if (v42) {
        float v16 = *(float *)&v38;
      }
      else {
        float v16 = -200.0;
      }
      if (!v42) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
      }
      float v17 = *(float *)(a1 + 16);
      if (v16 > v17 && *(unsigned char *)(a1 + 36))
      {
        float v18 = *(float *)(a1 + 28);
        uint64_t v19 = (**a3)(a3);
        if (v19)
        {
          (*(void (**)(BOOL **__return_ptr, float))(*(void *)v19 + 32))(&v38, v18);
        }
        else
        {
          vp::vx::io::Error::Error((uint64_t)&v24, 13, 405, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
          int v29 = v24;
          long long v20 = v26;
          long long v32 = v27;
          long long v26 = 0uLL;
          *(void *)&long long v27 = 0;
          long long v38 = v24;
          uint64_t v39 = v25;
          long long v40 = v20;
          long long v41 = v32;
          *(void *)&long long v32 = 0;
          uint64_t v30 = v25;
          long long v31 = 0uLL;
          char v42 = 0;
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v29);
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
        }
        if (!v42) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
        }
        float v21 = *(float *)(a1 + 32);
        uint64_t v22 = (**a3)(a3);
        if (v22)
        {
          (*(void (**)(BOOL **__return_ptr, float))(*(void *)v22 + 32))(&v38, v21);
        }
        else
        {
          vp::vx::io::Error::Error((uint64_t)&v24, 13, 405, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
          int v29 = v24;
          long long v23 = v26;
          long long v32 = v27;
          long long v26 = 0uLL;
          *(void *)&long long v27 = 0;
          long long v38 = v24;
          uint64_t v39 = v25;
          long long v40 = v23;
          long long v41 = v32;
          *(void *)&long long v32 = 0;
          uint64_t v30 = v25;
          long long v31 = 0uLL;
          char v42 = 0;
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v29);
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v24);
        }
        if (!v42) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
        }
        *(_DWORD *)(a1 + 2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 24);
        *(unsigned char *)(a1 + 36) = 0;
      }
      else if (v16 <= v17 && !*(unsigned char *)(a1 + 36))
      {
        vp::vx::io::Node::set_parameter<vp::vx::Graph_Parameter_ID>(a3, (uint64_t)&v38, *(float *)(a1 + 8));
        if (!v42) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
        }
        vp::vx::io::Node::set_parameter<vp::vx::Graph_Parameter_ID>(a3, (uint64_t)&v38, *(float *)(a1 + 12));
        if (!v42) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v38);
        }
        *(_DWORD *)(a1 + 2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 24);
        *(unsigned char *)(a1 + 36) = 1;
      }
    }
  }
}

void vp::vx::io::Node::set_parameter<vp::vx::Graph_Parameter_ID>(uint64_t (***a1)(void)@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v5 = (**a1)(a1);
  if (v5)
  {
    __n128 v7 = *(void (**)(__n128))(*(void *)v5 + 32);
    v6.n128_f32[0] = a3;
    v7(v6);
  }
  else
  {
    vp::vx::io::Error::Error((uint64_t)&v13, 13, 405, 16, (uint64_t)"Source/AudioDSP/VoiceProcessor/vp/vx/io/Node.hpp");
    int v19 = v13;
    __int16 v8 = v14;
    __int16 v20 = v14;
    __int16 v9 = v15;
    __int16 v21 = v15;
    uint64_t v10 = v16;
    long long v12 = v17;
    long long v11 = v18;
    uint64_t v25 = *((void *)&v18 + 1);
    long long v17 = 0uLL;
    *(void *)&long long v18 = 0;
    *(_DWORD *)a2 = v13;
    *(_WORD *)(a2 + 4) = v8;
    *(_WORD *)(a2 + 6) = v9;
    *(void *)(a2 + 8) = v10;
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v11;
    uint64_t v24 = 0;
    uint64_t v22 = v10;
    long long v23 = 0uLL;
    *(unsigned char *)(a2 + 48) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v19);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v13);
  }
}

vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory *vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory::AGC_Adaptive_Control_Delegate_Factory(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory *this)
{
  *((void *)this + 1) = &unk_1F1493718;
  int8x8_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)int8x8_t v2 = &unk_1F1493738;
  *(_OWORD *)(v2 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v2 + 24;
  *((void *)this + 3) = v2;
  *(void *)this = &unk_1F14A0000;
  *((void *)this + 1) = &unk_1F14A0030;
  return this;
}

uint64_t vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory::new_node_delegate(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v14[1] = a5;
  uint64_t v15 = a3;
  v14[0] = a4;
  __n128 v6 = (uint64_t (***)(void, void))(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (v6) {
    BOOL v8 = result == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    __int16 v9 = (uint64_t (***)(void, uint64_t))result;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t result = (**v6)(v6, *(unsigned int *)&aFffElcaegmabps[v10 + 36]);
      if ((result & 1) == 0) {
        break;
      }
      v10 += 4;
      if (v10 == 32)
      {
        uint64_t result = (**v9)(v9, 1835229540);
        if (result)
        {
          vp::allocate_unique<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>(&v15, (uint64_t)v12);
          long long v11 = v12[0];
          *(void *)&v12[0] = 0;
          v13[0] = v11;
          v13[1] = v12[1];
          caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>)>::operator()(v14, (uint64_t *)v13);
          std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100](v13, 0);
          return (uint64_t)std::unique_ptr<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate,vp::Allocator_Delete<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>>::reset[abi:ne180100]((vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate **)v12, 0);
        }
        return result;
      }
    }
  }
  return result;
}

vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate **vp::allocate_unique<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v3 = v6;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = xmmword_1BB8716C0;
  uint64_t v4 = std::pmr::polymorphic_allocator<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>::new_object[abi:ne180100]<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>(&v6);
  return std::unique_ptr<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate,vp::Allocator_Delete<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>>::reset[abi:ne180100]((vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate **)a2, v4);
}

void sub_1BB203CAC(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate,vp::Allocator_Delete<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory::~AGC_Adaptive_Control_Delegate_Factory(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory *this)
{
  *((void *)this + 1) = &unk_1F1493718;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *((void *)this + 1) = &unk_1F1493718;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory::~AGC_Adaptive_Control_Delegate_Factory(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate_Factory *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 1) = &unk_1F1493718;
  int8x8_t v2 = (std::__shared_weak_count *)*((void *)v1 + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  char *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 1) = &unk_1F1493718;
  int8x8_t v2 = (std::__shared_weak_count *)*((void *)v1 + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate **std::unique_ptr<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate,vp::Allocator_Delete<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>>::reset[abi:ne180100](vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate **result, vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *a2)
{
  int8x8_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::~AGC_Adaptive_Control_Delegate(v2);
    return (vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate **)(*(uint64_t (**)(vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *, vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *, vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *, vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *std::pmr::polymorphic_allocator<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>::new_object[abi:ne180100]<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>(void *a1)
{
  uint64_t v6 = (vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 64, 8);
  v4[0] = &v6;
  v4[1] = a1;
  vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate::AGC_Adaptive_Control_Delegate(v6);
  char v5 = 1;
  int8x8_t v2 = v6;
  std::__exception_guard_exceptions<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate * std::pmr::polymorphic_allocator<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>::new_object[abi:ne180100]<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>()::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v4);
  return v2;
}

uint64_t std::__exception_guard_exceptions<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate * std::pmr::polymorphic_allocator<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>::new_object[abi:ne180100]<vp::vx::components::Share_Play::AGC_Adaptive_Control_Delegate>()::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 64, 8);
  }
  return a1;
}

vp::rpb::Terminal *vp::rpb::Terminal::Terminal(vp::rpb::Terminal *this, const CA::StreamDescription *a2)
{
  id v4 = objc_alloc(MEMORY[0x1E4F95E00]);
  long long v5 = *((_OWORD *)a2 + 1);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v6 = (void *)[v4 initWithFormat:v8];
  vp::rpb::Object::Object(this, v6);

  return this;
}

void vp::create_shared_messenger(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v15 = a1;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = (std::__shared_weak_count *)vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger;
  if (!vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger
    || (uint64_t v3 = std::__shared_weak_count::lock((std::__shared_weak_count *)vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger),
        (a2[1] = (uint64_t)v3) == 0)
    || (uint64_t v4 = vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger,
        *a2 = vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger,
        !v4))
  {
    unsigned int v14 = 1;
    long long v5 = (long long *)caulk::concurrent::messenger::shared_high_priority((caulk::concurrent::messenger *)v3);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v5);
    long long v6 = v5[2];
    *(_OWORD *)&v13[13] = *(long long *)((char *)v5 + 45);
    *(_OWORD *)int v13 = v6;
    std::optional<std::string>::operator=[abi:ne180100]<char const(&)[47],void>(&__p, "com.apple.coreaudio.VoiceProcessor (messenger)");
    vp::allocate_unique_noexcept<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>(&v15, &v14, (uint64_t)&__p, (uint64_t)v10);
    std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>,void>(a2, v10);
    std::unique_ptr<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>>::reset[abi:ne180100](v10, 0);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    }
    vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger = v8;
    uint64_t v9 = (std::__shared_weak_count *)vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger;
    vp::create_shared_messenger(vp::Allocator<std::byte>)::s_messenger = v7;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v12)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const(&)[47],void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void *vp::allocate_unique_noexcept<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return vp::allocate_unique<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>(a1, a2, a3, a4);
}

void sub_1BB204190(void *a1)
{
  int8x8_t v2 = (std::pmr *)__cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[1] = std::pmr::get_default_resource(v2);
  __cxa_end_catch();
}

void *std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<caulk::concurrent::messenger>::shared_ptr[abi:ne180100]<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1BB204238(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void *vp::allocate_unique<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872700;
  uint64_t v6 = std::pmr::polymorphic_allocator<caulk::concurrent::messenger>::new_object[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>(&v8, a2, a3);
  return std::unique_ptr<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>>::reset[abi:ne180100]((void *)a4, v6);
}

void sub_1BB20434C(_Unwind_Exception *a1)
{
  std::unique_ptr<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::unique_ptr<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    long long v3 = result;
    MEMORY[0x1C185C240](v2);
    return (void *)(*(uint64_t (**)(void, uint64_t, void, void))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<caulk::concurrent::messenger>::new_object[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>(void *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 16, 8);
  v8[0] = &v10;
  v8[1] = a1;
  char v9 = 0;
  MEMORY[0x1C185C230](v10, *a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<caulk::concurrent::messenger * std::pmr::polymorphic_allocator<caulk::concurrent::messenger>::new_object[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>(caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB204468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<caulk::concurrent::messenger * std::pmr::polymorphic_allocator<caulk::concurrent::messenger>::new_object[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &>(caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 16, 8);
  }
  return a1;
}

uint64_t *std::shared_ptr<caulk::concurrent::messenger>::shared_ptr[abi:ne180100]<caulk::concurrent::messenger,vp::Allocator_Delete<caulk::concurrent::messenger>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<caulk::concurrent::messenger *,vp::Allocator_Delete<caulk::concurrent::messenger>,std::allocator<caulk::concurrent::messenger>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<caulk::concurrent::messenger *,vp::Allocator_Delete<caulk::concurrent::messenger>,std::allocator<caulk::concurrent::messenger>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  MEMORY[0x1C185C240](v2);
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void vp::create(vp *this@<X0>, vp::v3 *a2@<X1>, void *a3@<X8>)
{
  int v5 = (int)this;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  BOOL v8 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    int v11 = 67109120;
    int v12 = v5;
    _os_log_impl(&dword_1BB0CE000, log, OS_LOG_TYPE_DEFAULT, "create VoiceProcessorV%u", (uint8_t *)&v11, 8u);
  }
  switch(v5)
  {
    case 3:
      vp::v3::create(a2, v9);
    case 4:
      vp::v4::create(a2, v9);
    case 5:
      vp::v5::create(a2, v9);
    case 6:
      vp::v6::create(a2, v9);
    case 7:
      vp::v7::create(a2, v9);
    case 8:
      vp::v8::create(a2, v9);
    case 9:
      vp::v9::create(a2, v9);
    case 10:
      vp::v10::create(a2, v9);
    default:
      uint64_t v10 = vp::get_log((vp *)v8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        int v11 = 67109120;
        int v12 = v5;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_FAULT, "VoiceProcessorV%u is not supported", (uint8_t *)&v11, 8u);
      }
      *a3 = 0;
      return;
  }
}

void sub_1BB2047CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    size_t v4 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v4);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
      vp::create(v3, log);
    }
    void *v2 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BB20479CLL);
  }
  _Unwind_Resume(a1);
}

void vp::create(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_impl(&dword_1BB0CE000, a2, OS_LOG_TYPE_ERROR, "failed to create VoiceProcessorV%u due to uncaught exception", (uint8_t *)v2, 8u);
}

void *vp::vx::IO_Property_Setter_Command_Factory::IO_Property_Setter_Command_Factory(void *a1, uint64_t a2)
{
  a1[5] = &unk_1F1493718;
  size_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)size_t v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  a1[6] = v4 + 24;
  a1[7] = v4;
  *a1 = &unk_1F14A0090;
  a1[1] = a2;
  a1[4] = 0;
  a1[5] = &unk_1F14A00C0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void vp::vx::IO_Property_Setter_Command_Factory::new_node_command(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v14[0] = a4;
  v14[1] = a5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (v7)
  {
    (*(void (**)(unsigned int **__return_ptr))(*(void *)v7 + 16))(&v12);
    BOOL v8 = v12;
    char v9 = v13;
    if (v12 != v13)
    {
      uint64_t v10 = a1 + 8;
      do
      {
        unsigned int v16 = *v8;
        int v11 = boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::at(v10, &v16);
        uint64_t v17 = a3;
        (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t *))v11)(v15, (uint64_t)(v11 + 2), &v17);
        caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>)>::operator()(v14, v15);
        std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](v15, 0);
        ++v8;
      }
      while (v8 != v9);
      BOOL v8 = v12;
    }
    if (v8)
    {
      uint64_t v13 = v8;
      operator delete(v8);
    }
  }
}

void vp::vx::IO_Property_Setter_Command_Factory::~IO_Property_Setter_Command_Factory(vp::vx::IO_Property_Setter_Command_Factory *this)
{
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector((void *)this + 1);
  *((void *)this + 5) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector((void *)this + 1);
  *((void *)this + 5) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Property_Setter_Command_Factory::~IO_Property_Setter_Command_Factory(vp::vx::IO_Property_Setter_Command_Factory *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector(v1 + 1);
  v1[5] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector(v1 + 1);
  v1[5] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::at(uint64_t a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::find(a1, a2, &v8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v8 == (unsigned int *)(v4 + 48 * v5)) {
    boost::container::throw_length_error((boost::container *)"flat_map::at key not found", v3);
  }
  return v8 + 2;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 48 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,true>,vp::vx::Graph_Property_ID>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  int v12 = (unsigned int *)(v9 + 48 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,true>,vp::vx::Graph_Property_ID>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 4);
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      BOOL v8 = &v4[12 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 12;
        *a1 = v8 + 12;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1] + 16;
    do
    {
      (*(void (**)(uint64_t))(*(void *)(v3 - 8) + 24))(v3);
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 48 * v4, 8);
  }
  return a1;
}

double vp::vx::dsp::Graph_Builder::Graph_Builder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 21boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 22std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 228) = 0;
  *(void *)(a1 + 24std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 23boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 348) = 0;
  *(unsigned char *)(a1 + 35boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 356) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 36std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  return result;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_tuning_resources_path(vp::vx::dsp::Graph_Builder *this, const std::__fs::filesystem::path *a2)
{
  std::optional<std::__fs::filesystem::path>::operator=[abi:ne180100]<std::__fs::filesystem::path const&,void>((std::string *)((char *)this + 8), &a2->__pn_);
  return this;
}

std::string *std::optional<std::__fs::filesystem::path>::operator=[abi:ne180100]<std::__fs::filesystem::path const&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_temporary_directory_path(vp::vx::dsp::Graph_Builder *this, const std::__fs::filesystem::path *a2)
{
  std::optional<std::__fs::filesystem::path>::operator=[abi:ne180100]<std::__fs::filesystem::path const&,void>((std::string *)((char *)this + 40), &a2->__pn_);
  return this;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_graph_file_path(vp::vx::dsp::Graph_Builder *this, const std::__fs::filesystem::path *a2)
{
  std::optional<std::__fs::filesystem::path>::operator=[abi:ne180100]<std::__fs::filesystem::path const&,void>((std::string *)this + 3, &a2->__pn_);
  if (*((unsigned char *)this + 128))
  {
    if (*((char *)this + 127) < 0) {
      operator delete(*((void **)this + 13));
    }
    *((unsigned char *)this + 128) = 0;
  }
  return this;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_au_strip_file_path(vp::vx::dsp::Graph_Builder *this, std::__fs::filesystem::path *a2)
{
  long long v3 = (char *)this + 136;
  unint64_t v4 = *((void *)this + 18);
  if (v4 >= *((void *)this + 19))
  {
    uint64_t v5 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)v3, (long long *)a2);
  }
  else
  {
    std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)v3, (long long *)a2);
    uint64_t v5 = v4 + 24;
  }
  *((void *)this + 18) = v5;
  return this;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_property_strip_file_path(vp::vx::dsp::Graph_Builder *this, std::__fs::filesystem::path *a2)
{
  long long v3 = (char *)this + 160;
  unint64_t v4 = *((void *)this + 21);
  if (v4 >= *((void *)this + 22))
  {
    uint64_t v5 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)v3, (long long *)a2);
  }
  else
  {
    std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)v3, (long long *)a2);
    uint64_t v5 = v4 + 24;
  }
  *((void *)this + 21) = v5;
  return this;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_property_strip_override_file_path(vp::vx::dsp::Graph_Builder *this, std::__fs::filesystem::path *a2)
{
  long long v3 = (char *)this + 184;
  unint64_t v4 = *((void *)this + 24);
  if (v4 >= *((void *)this + 25))
  {
    uint64_t v5 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)v3, (long long *)a2);
  }
  else
  {
    std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)v3, (long long *)a2);
    uint64_t v5 = v4 + 24;
  }
  *((void *)this + 24) = v5;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_fixed_block_size(uint64_t this, int a2)
{
  *(_DWORD *)(this + 208) = a2;
  *(unsigned char *)(this + 21boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 1;
  if (*(unsigned char *)(this + 220)) {
    *(unsigned char *)(this + 22std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  }
  if (*(unsigned char *)(this + 228)) {
    *(unsigned char *)(this + 228) = 0;
  }
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_variable_pull_model_block_size(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 212)) {
    *(unsigned char *)(this + 21boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  }
  *(_DWORD *)(this + 216) = a2;
  *(unsigned char *)(this + 22std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 1;
  if (*(unsigned char *)(this + 228)) {
    *(unsigned char *)(this + 228) = 0;
  }
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_variable_push_model_block_size(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 212)) {
    *(unsigned char *)(this + 21boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  }
  if (*(unsigned char *)(this + 220)) {
    *(unsigned char *)(this + 22std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  }
  *(_DWORD *)(this + 224) = a2;
  *(unsigned char *)(this + 228) = 1;
  return this;
}

vp::vx::dsp::Graph_Builder *vp::vx::dsp::Graph_Builder::set_parameter(vp::vx::dsp::Graph_Builder *this, int a2, float a3)
{
  unsigned int v6 = (char *)this + 248;
  unint64_t v7 = *((void *)this + 31);
  BOOL v8 = (float *)*((void *)this + 30);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (void **)((char *)this + 232);
    BOOL v11 = (float *)*((void *)this + 29);
    uint64_t v12 = ((char *)v8 - (char *)v11) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v7 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v6, v15);
      BOOL v11 = (float *)*((void *)this + 29);
      BOOL v8 = (float *)*((void *)this + 30);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = (float *)&v16[8 * v12];
    long long v18 = &v16[8 * v15];
    *(_DWORD *)uint64_t v17 = a2;
    v17[1] = a3;
    uint64_t v9 = v17 + 2;
    if (v8 != v11)
    {
      do
      {
        uint64_t v19 = *((void *)v8 - 1);
        v8 -= 2;
        *((void *)v17 - 1) = v19;
        v17 -= 2;
      }
      while (v8 != v11);
      BOOL v11 = (float *)*v10;
    }
    *((void *)this + 29) = v17;
    *((void *)this + 3std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v9;
    *((void *)this + 31) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_DWORD *)BOOL v8 = a2;
    v8[1] = a3;
    uint64_t v9 = v8 + 2;
  }
  *((void *)this + 3std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v9;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_parameter_callback(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<applesauce::CF::NumberRef ()>::operator=[abi:ne180100]((void *)(a1 + 256), a2);
  return a1;
}

uint64_t vp::vx::dsp::Graph_Builder::set_property(uint64_t a1, int a2, void *a3)
{
  int v5 = a2;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::emplace_back<unsigned int &,applesauce::CF::DictionaryRef>((char **)(a1 + 288), &v5, a3);
  return a1;
}

char *std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::emplace_back<unsigned int &,applesauce::CF::DictionaryRef>(char **a1, _DWORD *a2, void *a3)
{
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    BOOL v11 = *a1;
    uint64_t v12 = (uint64_t)(v9 - (void)*a1) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v7 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v26 = v6;
    if (v15)
    {
      unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v15);
      BOOL v11 = *a1;
      unint64_t v9 = (unint64_t)a1[1];
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = &v16[16 * v12];
    long long v18 = &v16[16 * v15];
    uint64_t v25 = v18;
    *(_DWORD *)uint64_t v17 = *a2;
    *((void *)v17 + 1) = *a3;
    *a3 = 0;
    uint64_t v10 = v17 + 16;
    *((void *)&v24 + 1) = v17 + 16;
    if ((char *)v9 != v11)
    {
      do
      {
        int v19 = *(_DWORD *)(v9 - 16);
        v9 -= 16;
        *((_DWORD *)v17 - 4) = v19;
        v17 -= 16;
        *((void *)v17 + 1) = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = 0;
      }
      while ((char *)v9 != v11);
      uint64_t v10 = (char *)*((void *)&v24 + 1);
      long long v18 = v25;
    }
    long long v20 = *(_OWORD *)a1;
    *a1 = v17;
    a1[1] = v10;
    long long v24 = v20;
    __int16 v21 = a1[2];
    a1[2] = v18;
    uint64_t v25 = v21;
    uint64_t v23 = v20;
    std::__split_buffer<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *(_DWORD *)unint64_t v9 = *a2;
    *(void *)(v9 + 8) = *a3;
    *a3 = 0;
    uint64_t v10 = (char *)(v9 + 16);
  }
  a1[1] = v10;
  return v10 - 16;
}

uint64_t vp::vx::dsp::Graph_Builder::set_property_callback(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<applesauce::CF::DictionaryRef ()>::operator=[abi:ne180100]((void *)(a1 + 312), a2);
  return a1;
}

uint64_t vp::vx::dsp::Graph_Builder::set_sample_rate_conversion_algorithm(uint64_t this, int a2)
{
  *(_DWORD *)(this + 344) = a2;
  *(unsigned char *)(this + 348) = 1;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_sample_rate_conversion_quality(uint64_t this, int a2)
{
  *(_DWORD *)(this + 35boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a2;
  *(unsigned char *)(this + 356) = 1;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_should_enable_audio_recorders(uint64_t this, char a2)
{
  *(unsigned char *)(this + 36std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = a2;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_should_enable_latency_compensation(uint64_t this, char a2)
{
  *(unsigned char *)(this + 361) = a2;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_should_connect_to_AUPB(uint64_t this, char a2)
{
  *(unsigned char *)(this + 36boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a2;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_should_connect_to_RPB(uint64_t this, char a2)
{
  *(unsigned char *)(this + 363) = a2;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::set_time(uint64_t this, const uint64_t *a2)
{
  *(void *)(this + 368) = *a2;
  return this;
}

uint64_t vp::vx::dsp::Graph_Builder::build@<X0>(uint64_t a1@<X0>, const vp::vx::dsp::Graph_Macro_Generator *a2@<X2>, std::string::size_type a3@<X3>, void *a4@<X8>)
{
  uint64_t v219 = *MEMORY[0x1E4F143B8];
  uint64_t v205 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
      uint64_t v10 = v217[23];
      uint64_t v11 = *(void *)&v217[8];
      uint64_t v12 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if ((v10 & 0x80u) == 0) {
          uint64_t v13 = v10;
        }
        else {
          uint64_t v13 = v11;
        }
        if (v217[23] >= 0) {
          uint64_t v14 = v217;
        }
        else {
          uint64_t v14 = *(unsigned char **)v217;
        }
        if (v13) {
          unint64_t v15 = " ";
        }
        else {
          unint64_t v15 = "";
        }
        uint64_t v16 = a1 + 72;
        if (*(char *)(a1 + 95) < 0) {
          uint64_t v16 = *(void *)(a1 + 72);
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        *(void *)v207 = v16;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%s%scompiling file \"%s\"", (uint8_t *)&buf, 0x20u);
      }
      if ((v217[23] & 0x80000000) != 0) {
        operator delete(*(void **)v217);
      }
    }
    vp::vx::dsp::Graph_Compiler::compile_file(a2, &buf);
  }
  else
  {
    int v17 = *(unsigned __int8 *)(a1 + 128);
    long long v18 = vp::get_log((vp *)a1);
    if (!v17)
    {
      uint64_t v30 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (v30)
      {
        long long v31 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
        std::string::size_type v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
        long long v34 = vp::get_log(v31);
        uint64_t v30 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        if (!v30) {
          goto LABEL_168;
        }
        if ((v32 & 0x80u) == 0) {
          std::string::size_type v35 = v32;
        }
        else {
          std::string::size_type v35 = size;
        }
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        if (v35) {
          long long v37 = " ";
        }
        else {
          long long v37 = "";
        }
        *(_DWORD *)uint64_t v217 = 136315394;
        *(void *)&v217[4] = p_buf;
        *(_WORD *)&v217[12] = 2080;
        *(void *)&v217[14] = v37;
        long long v38 = "%s%sfailed to build DSP graph - graph file path and graph text are missing";
LABEL_167:
        _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, v38, v217, 0x16u);
        goto LABEL_168;
      }
LABEL_310:
      *a4 = 0;
      a4[1] = std::pmr::get_default_resource((std::pmr *)v30);
LABEL_311:
      uint64_t result = (uint64_t)v205;
      uint64_t v205 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      return result;
    }
    uint64_t v19 = a1 + 104;
    BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      __int16 v21 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
      std::string::size_type v22 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = buf.__r_.__value_.__l.__size_;
      long long v24 = vp::get_log(v21);
      BOOL v20 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v20)
      {
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v25 = v22;
        }
        else {
          std::string::size_type v25 = v23;
        }
        uint64_t v26 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &buf;
        }
        if (v25) {
          long long v27 = " ";
        }
        else {
          long long v27 = "";
        }
        *(_DWORD *)uint64_t v217 = 136315394;
        *(void *)&v217[4] = v26;
        *(_WORD *)&v217[12] = 2080;
        *(void *)&v217[14] = v27;
        _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "%s%scompiling text", v217, 0x16u);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      uint64_t v19 = a1 + 104;
    }
    char v28 = vp::get_log((vp *)v20);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v195 = a3;
      size_t v196 = a4;
      v194 = a2;
      if (*(char *)(a1 + 127) < 0)
      {
        uint64_t v19 = *(void *)(a1 + 104);
        int v29 = *(long long **)(a1 + 112);
      }
      else
      {
        int v29 = (long long *)*(unsigned __int8 *)(a1 + 127);
      }
      uint64_t v213 = v19;
      v214 = v29;
      uint64_t v39 = (vp *)std::string_view::find[abi:ne180100](&v213, "\n", 0);
      if (v39 != (vp *)-1)
      {
        long long v40 = v39;
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          if ((unint64_t)v214 < v42) {
            std::__throw_out_of_range[abi:ne180100]("string_view::substr");
          }
          uint64_t v43 = v213;
          if ((char *)v214 - v42 >= (char *)v40 - v42) {
            unint64_t v44 = (unint64_t)v40 - v42;
          }
          else {
            unint64_t v44 = (unint64_t)v214 - v42;
          }
          uint64_t v45 = vp::get_log(v39);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v46 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
            uint64_t v47 = v217[23];
            uint64_t v48 = *(void *)&v217[8];
            uint64_t v49 = vp::get_log(v46);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            {
              if ((v47 & 0x80u) == 0) {
                uint64_t v50 = v47;
              }
              else {
                uint64_t v50 = v48;
              }
              uint64_t v51 = v217;
              if (v217[23] < 0) {
                uint64_t v51 = *(unsigned char **)v217;
              }
              BOOL v52 = v50 == 0;
              uint64_t v53 = " ";
              if (v52) {
                uint64_t v53 = "";
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
              if (v44 >= 0x80000000) {
                unsigned __int8 v54 = 0;
              }
              else {
                unsigned __int8 v54 = v44;
              }
              unsigned int v55 = v44 & 0xFFFFFF00 | v54;
              if (v44) {
                unsigned int v56 = 0x7FFFFFFF;
              }
              else {
                unsigned int v56 = 0x80000000;
              }
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v53;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
              *(void *)v207 = v41;
              *(_WORD *)&v207[8] = 1040;
              if (v44 >> 31) {
                unsigned int v57 = v56;
              }
              else {
                unsigned int v57 = v55;
              }
              unsigned int v208 = v57;
              __int16 v209 = 2080;
              unint64_t v210 = v43 + v42;
              _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%s%scompiling line %2lu - %.*s", (uint8_t *)&buf, 0x30u);
              ++v41;
            }
            if ((v217[23] & 0x80000000) != 0) {
              operator delete(*(void **)v217);
            }
          }
          unint64_t v42 = (unint64_t)v40 + 1;
          uint64_t v39 = (vp *)std::string_view::find[abi:ne180100](&v213, "\n", (unint64_t)v40 + 1);
          long long v40 = v39;
        }
        while (v39 != (vp *)-1);
      }
      a3 = v195;
      a4 = v196;
      a2 = v194;
    }
    vp::vx::dsp::Graph_Compiler::compile_text((uint64_t)a2, &buf);
  }
  uint64_t v205 = (vp *)buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0;
  if (!v205)
  {
    unsigned __int8 v72 = vp::get_log(0);
    uint64_t v30 = os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
    if (v30)
    {
      uint64_t v73 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
      std::string::size_type v74 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      std::string::size_type v75 = buf.__r_.__value_.__l.__size_;
      long long v34 = vp::get_log(v73);
      uint64_t v30 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
      if (!v30) {
        goto LABEL_168;
      }
      if ((v74 & 0x80u) == 0) {
        std::string::size_type v76 = v74;
      }
      else {
        std::string::size_type v76 = v75;
      }
      uint64_t v77 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &buf;
      }
      if (v76) {
        __int16 v78 = " ";
      }
      else {
        __int16 v78 = "";
      }
      *(_DWORD *)uint64_t v217 = 136315394;
      *(void *)&v217[4] = v77;
      *(_WORD *)&v217[12] = 2080;
      *(void *)&v217[14] = v78;
      long long v38 = "%s%sfailed to build DSP graph - compilation error";
      goto LABEL_167;
    }
    goto LABEL_310;
  }
  uint64_t v58 = DSPGraph::Graph::in(v205);
  uint64_t v59 = *(void *)(v58 + 88);
  if (*(void *)(v58 + 96) == v59)
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v217, "out");
    uint64_t v190 = (void *)(v58 + 32);
    if (*(char *)(v58 + 55) < 0) {
      uint64_t v190 = (void *)*v190;
    }
    DSPGraph::strprintf(&v213, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v189, v190, (uint64_t)(*(void *)(v58 + 96) - *(void *)(v58 + 88)) >> 5, 0);
    uint64_t result = DSPGraph::ThrowException();
  }
  else
  {
    unsigned int v60 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v59 + 40))(v59) + 120);
    unsigned int v61 = 1;
    while (v61 < DSPGraph::Graph::numInputs(v205))
    {
      uint64_t v62 = DSPGraph::Graph::in(v205);
      uint64_t v63 = *(void *)(v62 + 88);
      if (*(void *)(v62 + 96) == v63)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v217, "out");
        v186 = (void *)(v62 + 32);
        if (*(char *)(v62 + 55) < 0) {
          v186 = (void *)*v186;
        }
        DSPGraph::strprintf(&v213, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v185, v186, (uint64_t)(*(void *)(v62 + 96) - *(void *)(v62 + 88)) >> 5, 0);
        uint64_t result = DSPGraph::ThrowException();
        goto LABEL_327;
      }
      unsigned __int8 v64 = (double **)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 40))(v63);
      ++v61;
      if (v60 != *v64[15])
      {
        unsigned __int8 v65 = vp::get_log((vp *)v64);
        uint64_t v30 = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
        if (v30)
        {
          std::string v66 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
          std::string::size_type v67 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          std::string::size_type v68 = buf.__r_.__value_.__l.__size_;
          long long v34 = vp::get_log(v66);
          uint64_t v30 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          if (!v30) {
            goto LABEL_168;
          }
          if ((v67 & 0x80u) == 0) {
            std::string::size_type v69 = v67;
          }
          else {
            std::string::size_type v69 = v68;
          }
          uint64_t v70 = (std::string *)buf.__r_.__value_.__r.__words[0];
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v70 = &buf;
          }
          if (v69) {
            uint64_t v71 = " ";
          }
          else {
            uint64_t v71 = "";
          }
          *(_DWORD *)uint64_t v217 = 136315394;
          *(void *)&v217[4] = v70;
          *(_WORD *)&v217[12] = 2080;
          *(void *)&v217[14] = v71;
          long long v38 = "%s%sfailed to build DSP graph - all input bus sample rates must be equal";
          goto LABEL_167;
        }
        goto LABEL_310;
      }
    }
    uint64_t v79 = DSPGraph::Graph::out(v205);
    uint64_t v80 = *(void *)(v79 + 64);
    if (*(void *)(v79 + 72) != v80)
    {
      unsigned int v81 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v80 + 40))(v80) + 120);
      unsigned int v82 = 1;
      while (1)
      {
        uint64_t v83 = (vp *)DSPGraph::Graph::numOutputs(v205);
        if (v82 >= v83) {
          break;
        }
        uint64_t v84 = DSPGraph::Graph::out(v205);
        uint64_t v85 = *(void *)(v84 + 64);
        if (*(void *)(v84 + 72) == v85)
        {
          std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v217, "in");
          int v188 = (void *)(v84 + 32);
          if (*(char *)(v84 + 55) < 0) {
            int v188 = (void *)*v188;
          }
          DSPGraph::strprintf(&v213, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v187, v188, (uint64_t)(*(void *)(v84 + 72) - *(void *)(v84 + 64)) >> 5, 0);
          uint64_t result = DSPGraph::ThrowException();
          goto LABEL_327;
        }
        CFIndex v86 = (double **)(*(uint64_t (**)(uint64_t))(*(void *)v85 + 40))(v85);
        ++v82;
        if (v81 != *v86[15])
        {
          v87 = vp::get_log((vp *)v86);
          uint64_t v30 = os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
          if (!v30) {
            goto LABEL_310;
          }
          v88 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
          std::string::size_type v89 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          std::string::size_type v90 = buf.__r_.__value_.__l.__size_;
          long long v34 = vp::get_log(v88);
          uint64_t v30 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          if (v30)
          {
            if ((v89 & 0x80u) == 0) {
              std::string::size_type v91 = v89;
            }
            else {
              std::string::size_type v91 = v90;
            }
            char v92 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v92 = &buf;
            }
            if (v91) {
              uint64_t v93 = " ";
            }
            else {
              uint64_t v93 = "";
            }
            *(_DWORD *)uint64_t v217 = 136315394;
            *(void *)&v217[4] = v92;
            *(_WORD *)&v217[12] = 2080;
            *(void *)&v217[14] = v93;
            long long v38 = "%s%sfailed to build DSP graph - all output bus sample rates must be equal";
            goto LABEL_167;
          }
          goto LABEL_168;
        }
      }
      int v204 = 1;
      if (*(unsigned char *)(a1 + 212))
      {
        uint64_t v94 = vp::get_log(v83);
        if (v60 == v81)
        {
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            int v95 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
            uint64_t v96 = v217[23];
            uint64_t v97 = *(void *)&v217[8];
            uint64_t v98 = vp::get_log(v95);
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
            {
              if ((v96 & 0x80u) == 0) {
                uint64_t v99 = v96;
              }
              else {
                uint64_t v99 = v97;
              }
              if (v217[23] >= 0) {
                v100 = v217;
              }
              else {
                v100 = *(unsigned char **)v217;
              }
              int v101 = *(_DWORD *)(a1 + 208);
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
              if (v99) {
                unsigned int v102 = " ";
              }
              else {
                unsigned int v102 = "";
              }
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v102;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
              *(_DWORD *)v207 = v101;
              *(_WORD *)&v207[4] = 1024;
              *(_DWORD *)&v207[6] = v60;
              _os_log_impl(&dword_1BB0CE000, v98, OS_LOG_TYPE_DEFAULT, "%s%ssetting fixed slice duration using block size %u and sample rate %u", (uint8_t *)&buf, 0x22u);
            }
            if ((v217[23] & 0x80000000) != 0) {
              operator delete(*(void **)v217);
            }
          }
          DSPGraph::Graph::setSliceDuration();
          int v204 = 0;
          goto LABEL_186;
        }
        uint64_t v30 = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
        if (!v30) {
          goto LABEL_310;
        }
        v113 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
        std::string::size_type v114 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        std::string::size_type v115 = buf.__r_.__value_.__l.__size_;
        long long v34 = vp::get_log(v113);
        uint64_t v30 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        if (v30)
        {
          if ((v114 & 0x80u) == 0) {
            std::string::size_type v116 = v114;
          }
          else {
            std::string::size_type v116 = v115;
          }
          uint64_t v117 = (std::string *)buf.__r_.__value_.__r.__words[0];
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v117 = &buf;
          }
          if (v116) {
            v118 = " ";
          }
          else {
            v118 = "";
          }
          *(_DWORD *)uint64_t v217 = 136315394;
          *(void *)&v217[4] = v117;
          *(_WORD *)&v217[12] = 2080;
          *(void *)&v217[14] = v118;
          long long v38 = "%s%sfailed to build DSP graph - I/O bus sample rates of fixed block size graphs must be equal";
          goto LABEL_167;
        }
LABEL_168:
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_310;
      }
      if (*(unsigned char *)(a1 + 220))
      {
        v103 = vp::get_log(v83);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v104 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
          uint64_t v105 = v217[23];
          uint64_t v106 = *(void *)&v217[8];
          int v107 = vp::get_log(v104);
          if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
          {
            if ((v105 & 0x80u) == 0) {
              uint64_t v108 = v105;
            }
            else {
              uint64_t v108 = v106;
            }
            if (v217[23] >= 0) {
              v109 = v217;
            }
            else {
              v109 = *(unsigned char **)v217;
            }
            int v110 = *(_DWORD *)(a1 + 216);
            BOOL v52 = v108 == 0;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            v111 = "";
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v109;
            if (!v52) {
              v111 = " ";
            }
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v111;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)v207 = v110;
            *(_WORD *)&v207[4] = 1024;
            *(_DWORD *)&v207[6] = v81;
            _os_log_impl(&dword_1BB0CE000, v107, OS_LOG_TYPE_DEFAULT, "%s%ssetting variable slice duration using block size %u and ouptut sample rate %u", (uint8_t *)&buf, 0x22u);
          }
          if ((v217[23] & 0x80000000) != 0) {
            operator delete(*(void **)v217);
          }
        }
        DSPGraph::Graph::setSliceDuration();
        int v112 = 2;
      }
      else
      {
        int v119 = *(unsigned __int8 *)(a1 + 228);
        uint64_t v120 = vp::get_log(v83);
        if (!v119)
        {
          uint64_t v30 = os_log_type_enabled(v120, OS_LOG_TYPE_ERROR);
          if (!v30) {
            goto LABEL_310;
          }
          v178 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
          std::string::size_type v179 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          std::string::size_type v180 = buf.__r_.__value_.__l.__size_;
          long long v34 = vp::get_log(v178);
          uint64_t v30 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          if (v30)
          {
            if ((v179 & 0x80u) == 0) {
              std::string::size_type v181 = v179;
            }
            else {
              std::string::size_type v181 = v180;
            }
            uint64_t v182 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v182 = &buf;
            }
            if (v181) {
              v183 = " ";
            }
            else {
              v183 = "";
            }
            *(_DWORD *)uint64_t v217 = 136315394;
            *(void *)&v217[4] = v182;
            *(_WORD *)&v217[12] = 2080;
            *(void *)&v217[14] = v183;
            long long v38 = "%s%sfailed to build DSP graph - block size information is missing";
            goto LABEL_167;
          }
          goto LABEL_168;
        }
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
          v121 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
          uint64_t v122 = v217[23];
          uint64_t v123 = *(void *)&v217[8];
          v124 = vp::get_log(v121);
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            if ((v122 & 0x80u) == 0) {
              uint64_t v125 = v122;
            }
            else {
              uint64_t v125 = v123;
            }
            if (v217[23] >= 0) {
              uint64_t v126 = v217;
            }
            else {
              uint64_t v126 = *(unsigned char **)v217;
            }
            int v127 = *(_DWORD *)(a1 + 224);
            BOOL v52 = v125 == 0;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            uint64_t v128 = "";
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v126;
            if (!v52) {
              uint64_t v128 = " ";
            }
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v128;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)v207 = v127;
            *(_WORD *)&v207[4] = 1024;
            *(_DWORD *)&v207[6] = v60;
            _os_log_impl(&dword_1BB0CE000, v124, OS_LOG_TYPE_DEFAULT, "%s%ssetting variable slice duration using block size %u and input sample rate %u", (uint8_t *)&buf, 0x22u);
          }
          if ((v217[23] & 0x80000000) != 0) {
            operator delete(*(void **)v217);
          }
        }
        DSPGraph::Graph::setSliceDuration();
        int v112 = 3;
      }
      int v204 = v112;
LABEL_186:
      buf.__r_.__value_.__r.__words[0] = a1;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v205;
      buf.__r_.__value_.__r.__words[2] = a3;
      vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"enable DSP graph audio recorders", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_0>, (uint64_t)&buf);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
      uint64_t v30 = vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"configure DSP graph", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_1>, (uint64_t)&buf);
      if ((v30 & 1) == 0) {
        goto LABEL_310;
      }
      if (*(unsigned char *)(a1 + 32))
      {
        uint64_t v129 = (_OWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
        }
        else
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *v129;
          buf.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
        }
        char v130 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v131 = &buf;
        }
        else {
          int v131 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (v131)
        {
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex v132 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex v132 = buf.__r_.__value_.__l.__size_;
          }
          uint64_t v30 = (uint64_t)CFStringCreateWithBytes(0, (const UInt8 *)v131, v132, 0x8000100u, 0);
          CFTypeRef cf = (CFTypeRef)v30;
          if (!v30)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          char v130 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else
        {
          CFTypeRef cf = 0;
        }
        if (v130 < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 32))
        {
          v133 = vp::get_log((vp *)v30);
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v134 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
            uint64_t v135 = v217[23];
            uint64_t v136 = *(void *)&v217[8];
            uint64_t v137 = vp::get_log(v134);
            if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
            {
              if ((v135 & 0x80u) == 0) {
                uint64_t v138 = v135;
              }
              else {
                uint64_t v138 = v136;
              }
              if (v217[23] >= 0) {
                v139 = v217;
              }
              else {
                v139 = *(unsigned char **)v217;
              }
              if (v138) {
                v140 = " ";
              }
              else {
                v140 = "";
              }
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v129 = *(_OWORD **)v129;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v139;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v140;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              *(void *)v207 = v129;
              _os_log_impl(&dword_1BB0CE000, v137, OS_LOG_TYPE_DEFAULT, "%s%ssetting \"%s\" resources path", (uint8_t *)&buf, 0x20u);
            }
            if ((v217[23] & 0x80000000) != 0) {
              operator delete(*(void **)v217);
            }
          }
        }
      }
      else
      {
        CFTypeRef cf = 0;
      }
      char v141 = *(long long **)(a1 + 160);
      for (i = *(long long **)(a1 + 168); v141 != i; char v141 = (long long *)((char *)v141 + 24))
      {
        *(void *)uint64_t v217 = v141;
        *(void *)&v217[8] = &cf;
        *(void *)&v217[16] = a1;
        CFStringRef v218 = &v205;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&buf, "file_path");
        buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&buf;
        v207[0] = 1;
        if (*((char *)v141 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v141, *((void *)v141 + 1));
        }
        else
        {
          long long v142 = *v141;
          v200.__r_.__value_.__r.__words[2] = *((void *)v141 + 2);
          *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v142;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v207[8], (uint64_t)&v200);
        v211 = &v207[8];
        char v212 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v213, (uint64_t)&buf, 2, 1, 2);
        uint64_t v215 = (vp **)&v213;
        char v216 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v201, (uint64_t)&v213, 1, 1, 2);
        vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"set property strip on DSP graph", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_2>, (uint64_t)v217);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v201);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v202, v201[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v213);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v214, v213);
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v207[j + 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v210 + j), v207[j + 8]);
        }
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v200.__r_.__value_.__l.__data_);
        }
      }
      v144 = *(long long **)(a1 + 136);
      for (k = *(long long **)(a1 + 144); v144 != k; v144 = (long long *)((char *)v144 + 24))
      {
        uint64_t v213 = a1;
        v214 = v144;
        uint64_t v215 = &v205;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&buf, "file_path");
        buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&buf;
        v207[0] = 1;
        if (*((char *)v144 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v144, *((void *)v144 + 1));
        }
        else
        {
          long long v145 = *v144;
          v200.__r_.__value_.__r.__words[2] = *((void *)v144 + 2);
          *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v145;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v207[8], (uint64_t)&v200);
        v211 = &v207[8];
        char v212 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v217, (uint64_t)&buf, 2, 1, 2);
        *(void *)&v217[16] = v217;
        LOBYTE(v218) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v201, (uint64_t)v217, 1, 1, 2);
        vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"set AU strip on DSP graph", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_3>, (uint64_t)&v213);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v201);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v202, v201[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v217);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v217[8], v217[0]);
        for (uint64_t m = 0; m != -64; m -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v207[m + 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v210 + m), v207[m + 8]);
        }
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v200.__r_.__value_.__l.__data_);
        }
      }
      v147 = *(long long **)(a1 + 184);
      for (n = *(long long **)(a1 + 192); v147 != n; v147 = (long long *)((char *)v147 + 24))
      {
        *(void *)uint64_t v217 = v147;
        *(void *)&v217[8] = &cf;
        *(void *)&v217[16] = a1;
        CFStringRef v218 = &v205;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&buf, "file_path");
        buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&buf;
        v207[0] = 1;
        if (*((char *)v147 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v147, *((void *)v147 + 1));
        }
        else
        {
          long long v148 = *v147;
          v200.__r_.__value_.__r.__words[2] = *((void *)v147 + 2);
          *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v148;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v207[8], (uint64_t)&v200);
        v211 = &v207[8];
        char v212 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v213, (uint64_t)&buf, 2, 1, 2);
        uint64_t v215 = (vp **)&v213;
        char v216 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v201, (uint64_t)&v213, 1, 1, 2);
        vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"set property strip override on DSP graph", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_4>, (uint64_t)v217);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v201);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v202, v201[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v213);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v214, v213);
        for (iuint64_t i = 0; ii != -64; ii -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v207[ii + 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v210 + ii), v207[ii + 8]);
        }
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v200.__r_.__value_.__l.__data_);
        }
      }
      buf.__r_.__value_.__r.__words[0] = a1;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v205;
      vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"set DSP graph parameter values", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_5>, (uint64_t)&buf);
      buf.__r_.__value_.__r.__words[0] = a1;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v205;
      uint64_t v150 = (vp *)vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"set DSP graph property values", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_6>, (uint64_t)&buf);
      if (*(unsigned char *)(a1 + 348))
      {
        v151 = vp::get_log(v150);
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v152 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
          uint64_t v153 = v217[23];
          uint64_t v154 = *(void *)&v217[8];
          uint64_t v155 = vp::get_log(v152);
          if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
          {
            if ((v153 & 0x80u) == 0) {
              uint64_t v156 = v153;
            }
            else {
              uint64_t v156 = v154;
            }
            if (v217[23] >= 0) {
              v157 = v217;
            }
            else {
              v157 = *(unsigned char **)v217;
            }
            BOOL v52 = v156 == 0;
            int v158 = *(_DWORD *)(a1 + 344);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v157;
            if (v52) {
              v159 = "";
            }
            else {
              v159 = " ";
            }
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v159;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)v207 = v158;
            _os_log_impl(&dword_1BB0CE000, v155, OS_LOG_TYPE_DEFAULT, "%s%ssetting sample rate conversion algorithm to %u", (uint8_t *)&buf, 0x1Cu);
          }
          if ((v217[23] & 0x80000000) != 0) {
            operator delete(*(void **)v217);
          }
        }
        uint64_t v150 = (vp *)DSPGraph::Graph::setSRCAlgorithm(v205);
        if (*(unsigned char *)(a1 + 348) && *(_DWORD *)(a1 + 344) == 1835626096)
        {
          uint64_t v160 = vp::get_log(v150);
          if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v161 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &buf);
            std::string::size_type v162 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            std::string::size_type v163 = buf.__r_.__value_.__l.__size_;
            v164 = vp::get_log(v161);
            if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
            {
              if ((v162 & 0x80u) == 0) {
                std::string::size_type v165 = v162;
              }
              else {
                std::string::size_type v165 = v163;
              }
              unint64_t v166 = (std::string *)buf.__r_.__value_.__r.__words[0];
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v166 = &buf;
              }
              if (v165) {
                unsigned int v167 = " ";
              }
              else {
                unsigned int v167 = "";
              }
              *(_DWORD *)uint64_t v217 = 136315394;
              *(void *)&v217[4] = v166;
              *(_WORD *)&v217[12] = 2080;
              *(void *)&v217[14] = v167;
              _os_log_impl(&dword_1BB0CE000, v164, OS_LOG_TYPE_DEFAULT, "%s%senabling minium phase sample rate conversion", v217, 0x16u);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v150 = (vp *)DSPGraph::Graph::setSRCMinimumPhase(v205);
        }
      }
      if (*(unsigned char *)(a1 + 356))
      {
        uint64_t v168 = vp::get_log(v150);
        if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v169 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v217);
          uint64_t v170 = v217[23];
          uint64_t v171 = *(void *)&v217[8];
          CFIndex v172 = vp::get_log(v169);
          if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
          {
            if ((v170 & 0x80u) == 0) {
              uint64_t v173 = v170;
            }
            else {
              uint64_t v173 = v171;
            }
            if (v217[23] >= 0) {
              uint64_t v174 = v217;
            }
            else {
              uint64_t v174 = *(unsigned char **)v217;
            }
            BOOL v52 = v173 == 0;
            int v175 = *(_DWORD *)(a1 + 352);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v174;
            if (v52) {
              size_t v176 = "";
            }
            else {
              size_t v176 = " ";
            }
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v176;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)v207 = v175;
            _os_log_impl(&dword_1BB0CE000, v172, OS_LOG_TYPE_DEFAULT, "%s%ssetting sample rate conversion quality to %u", (uint8_t *)&buf, 0x1Cu);
          }
          if ((v217[23] & 0x80000000) != 0) {
            operator delete(*(void **)v217);
          }
        }
        DSPGraph::Graph::setSRCQuality(v205);
      }
      *(_DWORD *)uint64_t v217 = 2 * *(unsigned __int8 *)(a1 + 361);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v217;
      uint64_t v177 = vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"initialize DSP graph", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_7>, (uint64_t)&buf);
      if (v177) {
        vp::allocate_unique_noexcept<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>((uint64_t *)a1, (uint64_t)&v204, &v205, (uint64_t)a4);
      }
      *a4 = 0;
      a4[1] = std::pmr::get_default_resource((std::pmr *)v177);
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_311;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v217, "in");
    BOOL v192 = (void *)(v79 + 32);
    if (*(char *)(v79 + 55) < 0) {
      BOOL v192 = (void *)*v192;
    }
    DSPGraph::strprintf(&v213, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v191, v192, (uint64_t)(*(void *)(v79 + 72) - *(void *)(v79 + 64)) >> 5, 0);
    uint64_t result = DSPGraph::ThrowException();
  }
LABEL_327:
  __break(1u);
  return result;
}

void sub_1BB206FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
  {
    if (cf) {
      CFRelease(cf);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::dsp::Graph_Builder::exception_guard(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  v10[0] = 0;
  uint64_t v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  uint64_t v8 = vp::vx::dsp::Graph_Builder::exception_guard(a1, a2, a3, a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
  return v8;
}

{
  void (*v5)(void);
  void v6[9];

  unsigned char v6[8] = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  v6[0] = a4;
  a3(v6);
  return 1;
}

void sub_1BB2071B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t *a17, uint64_t a18, unsigned __int8 a19, uint64_t a20)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    a19 = 0;
    a20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a19);
    if (*v20)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a17, (uint64_t)v20);
      __int16 v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(&a19, "context");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v21, (uint64_t)&a17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a17);
    }
    vp::get_log_exception_info((uint64_t)&a15);
  }
  _Unwind_Resume(a1);
}

void vp::allocate_unique_noexcept<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_1BB20738C(void *a1)
{
  uint64_t v2 = (std::pmr *)__cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[1] = std::pmr::get_default_resource(v2);
  __cxa_end_catch();
}

void vp::vx::dsp::Graph_Builder::graph_connect_AUPB(vp::vx::dsp::Graph_Builder *this, vp::vx::dsp::Graph *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, __p);
    unint64_t v5 = v12;
    uint64_t v6 = __p[1];
    unint64_t v7 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if ((v5 & 0x80u) == 0) {
        unint64_t v8 = v5;
      }
      else {
        unint64_t v8 = (unint64_t)v6;
      }
      unint64_t v9 = (void **)__p[0];
      if ((v12 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      if (v8) {
        uint64_t v10 = " ";
      }
      else {
        uint64_t v10 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v14 = v9;
      __int16 v15 = 2080;
      uint64_t v16 = v10;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%s%sconnecting to AUPB", buf, 0x16u);
    }
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::dsp::Graph::connect_to_AUPB(a2);
}

void vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph_Builder *this, vp::vx::dsp::Graph *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &__p);
    uint64_t v6 = HIBYTE(v38);
    uint64_t v7 = v37;
    unint64_t v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      if ((v6 & 0x80u) == 0) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v7;
      }
      p_p = __p;
      if (v38 >= 0) {
        p_p = &__p;
      }
      if (v9) {
        uint64_t v11 = " ";
      }
      else {
        uint64_t v11 = "";
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%s%sconnecting to RPB", (uint8_t *)&buf, 0x16u);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p);
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v34 = (CFMutableDictionaryRef *)&v35;
  CFTypeRef v35 = Mutable;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v13 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      uint64_t v13 = *(char **)v13;
    }
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,char const*>(&v34, "Tuning Resources Path", v13);
  }
  if (*((unsigned char *)this + 64))
  {
    uint64_t v14 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      uint64_t v14 = *(char **)v14;
    }
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,char const*>(&v34, "Temporary Directory Path", v14);
  }
  if (*((unsigned char *)this + 96))
  {
    __int16 v15 = (char *)this + 72;
    if (*((char *)this + 95) < 0) {
      __int16 v15 = *(char **)v15;
    }
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,char const*>(&v34, "Absolute '.dspg' File Path", v15);
  }
  if (*((unsigned char *)this + 128))
  {
    uint64_t v16 = (char *)this + 104;
    if (*((char *)this + 127) < 0) {
      uint64_t v16 = *(char **)v16;
    }
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,char const*>(&v34, "Literal '.dspg' Text", v16);
  }
  applesauce::CF::make_ArrayRef((uint64_t *)this + 17, (CFArrayRef *)&cf);
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::ArrayRef>(&v34, "Absolute '.austrip' File Paths", &cf);
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::make_ArrayRef((uint64_t *)this + 20, (CFArrayRef *)&v32);
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::ArrayRef>(&v34, "Absolute '.propstrip' File Paths", &v32);
  if (v32) {
    CFRelease(v32);
  }
  applesauce::CF::make_ArrayRef((uint64_t *)this + 23, (CFArrayRef *)&v31);
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::ArrayRef>(&v34, "Absolute '.propstrip' Override File Paths", &v31);
  if (v31) {
    CFRelease(v31);
  }
  int v17 = (*(uint64_t (**)(vp::vx::dsp::Graph *))(*(void *)a2 + 32))(a2);
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,unsigned int>(&v34, "Block Size", v17);
  unsigned int v18 = (*(uint64_t (**)(vp::vx::dsp::Graph *))(*(void *)a2 + 40))(a2);
  if (v18 < 4) {
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,char const*>(&v34, "Block Size Policy", off_1E6237AA8[v18]);
  }
  std::string __p = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&__p, (uint64_t)(*((void *)this + 30) - *((void *)this + 29)) >> 3);
  uint64_t v19 = (void *)*((void *)this + 29);
  for (uint64_t i = (void *)*((void *)this + 30); v19 != i; ++v19)
  {
    *(void *)uint64_t v43 = *v19;
    int v21 = bswap32(*(unsigned int *)v43);
    *(_DWORD *)&__s[1] = v21;
    if (((char)v21 - 32) > 0x5E
      || (((__int16)v21 >> 8) - 32) > 0x5E
      || ((v21 << 8 >> 24) - 32) > 0x5E
      || ((v21 >> 24) - 32) > 0x5E)
    {
      std::to_string(&buf, *(unsigned int *)v43);
    }
    else
    {
      __int16 v41 = 39;
      __s[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&buf, __s);
    }
    std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string,float &>(&__p, (const UInt8 *)&buf, (int *)&v43[4]);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&__p);
  CFDictionaryRef v30 = CFDictionaryRef;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::DictionaryRef>(&v34, "Parameters", (const void **)&v30);
  if (CFDictionaryRef) {
    CFRelease(CFDictionaryRef);
  }
  std::string __p = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&__p, (uint64_t)(*((void *)this + 37) - *((void *)this + 36)) >> 4);
  uint64_t v23 = *((void *)this + 36);
  for (uint64_t j = *((void *)this + 37); v23 != j; v23 += 16)
  {
    *(_DWORD *)std::string __s = *(_DWORD *)v23;
    std::__tuple_leaf<1ul,applesauce::CF::DictionaryRef,false>::__tuple_leaf[abi:ne180100](&v42, (CFTypeRef *)(v23 + 8));
    int v25 = bswap32(*(unsigned int *)__s);
    *(_DWORD *)&v43[1] = v25;
    if (((char)v25 - 32) > 0x5E
      || (((__int16)v25 >> 8) - 32) > 0x5E
      || ((v25 << 8 >> 24) - 32) > 0x5E
      || ((v25 >> 24) - 32) > 0x5E)
    {
      std::to_string(&buf, *(unsigned int *)__s);
    }
    else
    {
      strcpy(&v43[5], "'");
      v43[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&buf, v43);
    }
    std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string,applesauce::CF::DictionaryRef &>(&__p, (const UInt8 *)&buf, &v42);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v42) {
      CFRelease(v42);
    }
  }
  CFDictionaryRef v26 = applesauce::CF::details::make_CFDictionaryRef((void ***)&__p);
  CFDictionaryRef v29 = v26;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::DictionaryRef>(&v34, "Properties", (const void **)&v29);
  if (v26) {
    CFRelease(v26);
  }
  if (*((unsigned char *)this + 348)) {
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,unsigned int>(&v34, "SRC Algorithm", *((_DWORD *)this + 86));
  }
  if (*((unsigned char *)this + 356)) {
    vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,unsigned int>(&v34, "SRC Quality", *((_DWORD *)this + 88));
  }
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,BOOL>(&v34, "Enable Audio Recorders", *((unsigned __int8 *)this + 360));
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,BOOL>(&v34, "Enable Latency Compensation", *((unsigned __int8 *)this + 361));
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,BOOL>(&v34, "Connect AUPB", *((unsigned __int8 *)this + 362));
  vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,BOOL>(&v34, "Connect RPB", *((unsigned __int8 *)this + 363));
  CFTypeRef v27 = v35;
  if (v35) {
    CFRetain(v35);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v28, v27);
  vp::vx::dsp::Graph::connect_to_RPB();
}

void sub_1BB207B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,char const*>(CFMutableDictionaryRef **a1, char *__s, char *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFIndex v6 = strlen(__s);
  if (!__s)
  {
    value = 0;
    CFStringRef v13 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    int v14 = 134217984;
    uint64_t v15 = 0;
    _os_log_send_and_compose_impl();
    uint64_t v10 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v10);
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  CFStringRef v13 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = v7;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&value, a3);
  if (!value)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    int v14 = 134217984;
    uint64_t v15 = 0;
    _os_log_send_and_compose_impl();
    uint64_t v9 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v9);
  }
  CFDictionarySetValue(**a1, v8, value);
  if (value) {
    CFRelease(value);
  }
  CFRelease(v8);
}

void sub_1BB207E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::ArrayRef>(CFMutableDictionaryRef **a1, char *__s, const void **a3)
{
  CFIndex v6 = strlen(__s);
  if (!__s)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v10 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v10);
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = *a3;
  if (!v8)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v12 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
  }
  CFStringRef v9 = v7;
  CFRetain(v8);
  CFDictionarySetValue(**a1, v9, v8);
  CFRelease(v8);
  CFRelease(v9);
}

void sub_1BB2080A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  CFIndex v6 = va_arg(va1, const void *);
  applesauce::CF::TypeRef::~TypeRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  _Unwind_Resume(a1);
}

void applesauce::CF::make_ArrayRef(uint64_t *a1@<X0>, CFArrayRef *a2@<X8>)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  size_t v6 = (v4 - *a1) / 24;
  MEMORY[0x1F4188790](a1);
  CFStringRef v9 = (void *)((char *)v20 - v8);
  if (v4 != v5)
  {
    bzero((char *)v20 - v8, v6 * 8);
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = v5;
    do
    {
      CFStringRef v13 = (const char *)(v12 + v10);
      if (*(char *)(v12 + v10 + 23) < 0 && (CFStringRef v13 = *(const char **)v13) == 0)
      {
        CFStringRef v15 = 0;
      }
      else
      {
        CFIndex v14 = strlen(v13);
        CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
        if (!v15)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
      }
      long long v16 = (const void *)v9[v11];
      v9[v11] = (uint64_t)v15;
      if (v16) {
        CFRelease(v16);
      }
      ++v11;
      uint64_t v12 = *a1;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      v10 += 24;
    }
    while (v11 < v7);
  }
  *a2 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef,applesauce::CF::StringRef*>(v9, &v9[v7]);
  if (v4 != v5)
  {
    long long v17 = v9 - 1;
    do
    {
      long long v18 = (const void *)v17[v6];
      if (v18) {
        CFRelease(v18);
      }
      --v6;
    }
    while (v6 * 8);
  }
}

void sub_1BB2082D0(_Unwind_Exception *exception_object)
{
  if (v3 != v4)
  {
    uint64_t v6 = v2 - 8;
    do
    {
      applesauce::CF::StringRef::~StringRef((const void **)(v6 + v1));
      v1 -= 8;
    }
    while (v1);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,unsigned int>(CFMutableDictionaryRef **a1, char *__s, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFIndex v6 = strlen(__s);
  if (!__s)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    int valuePtr = 134217984;
    uint64_t v14 = 0;
    _os_log_send_and_compose_impl();
    uint64_t v10 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v10);
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = v7;
  int valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)&long long v15 = v9;
  if (!v9)
  {
    uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  CFDictionarySetValue(**a1, v8, v9);
  CFRelease(v9);
  CFRelease(v8);
}

void sub_1BB208504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,applesauce::CF::DictionaryRef>(CFMutableDictionaryRef **a1, char *__s, const void **a3)
{
  CFIndex v6 = strlen(__s);
  if (!__s)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v10 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v10);
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = *a3;
  if (!v8)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v12 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
  }
  CFStringRef v9 = v7;
  CFRetain(v8);
  CFDictionarySetValue(**a1, v9, v8);
  CFRelease(v8);
  CFRelease(v9);
}

void sub_1BB208794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  CFIndex v6 = va_arg(va1, const void *);
  applesauce::CF::TypeRef::~TypeRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::graph_connect_RPB(vp::vx::dsp::Graph &)const::$_0::operator()<char const*,BOOL>(CFMutableDictionaryRef **a1, char *__s, int a3)
{
  CFIndex v6 = strlen(__s);
  if (!__s)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v12 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    CFStringRef v8 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v9 = *v8;
  if (!*v8)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v11 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v11);
  }
  CFStringRef v10 = v7;
  CFDictionarySetValue(**a1, v7, v9);
  CFRelease(v9);
  CFRelease(v10);
}

void sub_1BB208A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::set_parameter_values(vp::vx::dsp::Graph_Builder *this, DSPGraph::Graph *a2)
{
  for (uint64_t i = (uint64_t *)*((void *)a2 + 67); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v5 = *((void *)this + 29);
    uint64_t v6 = *((void *)this + 30);
    if (v5 == v6)
    {
LABEL_6:
      if (*((void *)this + 35))
      {
        vp::vx::dsp::Graph_Builder::generate_parameter_value(this, *((_DWORD *)i + 4), &cf);
        if (cf)
        {
          uint64_t v8 = applesauce::CF::convert_as<float,0>((const __CFNumber *)cf);
          if ((v8 & 0xFF00000000) != 0) {
            vp::vx::dsp::Graph_Builder::set_parameter_value(this, a2, *((_DWORD *)i + 4), *(float *)&v8);
          }
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    else
    {
      unsigned int v7 = *((_DWORD *)i + 4);
      while (*(_DWORD *)v5 != v7)
      {
        v5 += 8;
        if (v5 == v6) {
          goto LABEL_6;
        }
      }
      vp::vx::dsp::Graph_Builder::set_parameter_value(this, a2, v7, *(float *)(v5 + 4));
    }
  }
}

void sub_1BB208B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::NumberRef::~NumberRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::set_parameter_value(vp::vx::dsp::Graph_Builder *this, DSPGraph::Graph *a2, unsigned int a3, float a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = a3;
  float v12 = a4;
  v11[0] = this;
  v11[1] = &v13;
  void v11[2] = &v12;
  void v11[3] = a2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v32, "parameter");
  char v33 = v32;
  char v34 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)v20, "id");
  uint64_t v21 = v20;
  char v22 = 1;
  v23[0] = 6;
  v24[0] = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  v24[1] = v23;
  char v25 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)v20, 2, 1, 2);
  CFTypeRef v27 = v26;
  char v28 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v14, "value");
  long long v15 = v14;
  char v16 = 1;
  v17[0] = 7;
  v18[0] = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  *(void *)&v18[1] = v17;
  char v19 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v29, (uint64_t)v14, 2, 1, 2);
  CFDictionaryRef v30 = v29;
  char v31 = 1;
  uint64_t v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v26, 2, 1, 2);
  char v37 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v32, 2, 1, 2);
  v39[1] = (uint64_t *)v38;
  char v40 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v38, 1, 1, 2);
  vp::vx::dsp::Graph_Builder::exception_guard((uint64_t)this, (uint64_t)"set DSP graph parameter", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::set_parameter_value(DSPGraph::Graph &,unsigned int,float)::$_0>, (uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v38);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v39, v38[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29[j]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29[j + 8], v29[j]);
  }
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v17[k * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v18[k], v17[k * 8]);
  }
  for (uint64_t m = 0; m != -8; m -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23[m * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[m], v23[m * 8]);
  }
}

void sub_1BB208E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v32 - 104));
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v32 - 168 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a32 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a16 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a24 + m));
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::generate_parameter_value(vp::vx::dsp::Graph_Builder *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = a2;
  *a3 = 0;
  v8[0] = this;
  v8[1] = a3;
  void v8[2] = &v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v19, "parameter");
  uint64_t v20 = v19;
  char v21 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)v10, "id");
  uint64_t v11 = v10;
  char v12 = 1;
  v13[0] = 6;
  v14[0] = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  v14[1] = v13;
  char v15 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v10, 2, 1, 2);
  v17[1] = (uint64_t *)v16;
  char v18 = 1;
  uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)v16, 1, 1, 2);
  char v24 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v25, (uint64_t)v19, 2, 1, 2);
  v26[1] = (uint64_t *)v25;
  char v27 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v6, (uint64_t)v25, 1, 1, 2);
  vp::vx::dsp::Graph_Builder::exception_guard((uint64_t)this, (uint64_t)"generate DSP graph parameter value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::generate_parameter_value::$_0>, (uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v26, v25[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v13[j * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v14[j], v13[j * 8]);
  }
}

void sub_1BB209194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v29 - 88));
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a28 + i));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a24);
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a16 + j));
  applesauce::CF::NumberRef::~NumberRef(v28);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::set_property_values(vp::vx::dsp::Graph_Builder *this, DSPGraph::Graph *a2)
{
  for (uint64_t i = (uint64_t *)*((void *)a2 + 72); i; uint64_t i = (uint64_t *)*i)
  {
    if (!*((unsigned char *)i + 64))
    {
      uint64_t v5 = *((void *)this + 36);
      uint64_t v6 = *((void *)this + 37);
      if (v5 == v6)
      {
LABEL_10:
        if (!*((void *)this + 42)) {
          continue;
        }
        vp::vx::dsp::Graph_Builder::generate_property_value(this, *((_DWORD *)i + 4), &cf);
        CFTypeRef v9 = cf;
        if (!cf) {
          continue;
        }
        unsigned int v10 = *((_DWORD *)i + 4);
        CFRetain(cf);
        CFTypeRef v12 = v9;
        vp::vx::dsp::Graph_Builder::set_property_value((uint64_t)this, (uint64_t)a2, v10, (uint64_t)&v12);
        if (v12) {
          CFRelease(v12);
        }
        CFTypeRef v11 = cf;
        if (!cf) {
          continue;
        }
      }
      else
      {
        unsigned int v7 = *((_DWORD *)i + 4);
        while (1)
        {
          if (*(_DWORD *)v5 == v7)
          {
            uint64_t v8 = *(const void **)(v5 + 8);
            if (v8) {
              break;
            }
          }
          v5 += 16;
          if (v5 == v6) {
            goto LABEL_10;
          }
        }
        CFRetain(*(CFTypeRef *)(v5 + 8));
        CFTypeRef v14 = v8;
        vp::vx::dsp::Graph_Builder::set_property_value((uint64_t)this, (uint64_t)a2, v7, (uint64_t)&v14);
        CFTypeRef v11 = v14;
        if (!v14) {
          continue;
        }
      }
      CFRelease(v11);
    }
  }
}

void sub_1BB209354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::set_property_value(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = a3;
  v9[0] = &v10;
  v9[1] = a4;
  _OWORD v9[2] = a1;
  void v9[3] = a2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v20, "property");
  char v21 = v20;
  char v22 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)v11, "id");
  CFTypeRef v12 = v11;
  char v13 = 1;
  v14[0] = 6;
  v15[0] = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  v15[1] = v14;
  char v16 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v17, (uint64_t)v11, 2, 1, 2);
  v18[1] = (uint64_t *)v17;
  char v19 = 1;
  uint64_t v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)v17, 1, 1, 2);
  char v25 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)v20, 2, 1, 2);
  v27[1] = (uint64_t *)v26;
  char v28 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, (uint64_t)v26, 1, 1, 2);
  vp::vx::dsp::Graph_Builder::exception_guard(a1, (uint64_t)"set DSP graph property", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::set_property_value(DSPGraph::Graph &,unsigned int,applesauce::CF::DictionaryRef)::$_0>, (uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v27, v26[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[i + 8], v23[i]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v18, v17[0]);
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v14[j * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v15[j], v14[j * 8]);
  }
}

void sub_1BB2095B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v28 - 88));
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a28 + i));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a24);
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a16 + j));
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::generate_property_value(vp::vx::dsp::Graph_Builder *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = a2;
  *a3 = 0;
  v8[0] = this;
  v8[1] = a3;
  void v8[2] = &v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v19, "property");
  uint64_t v20 = v19;
  char v21 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)v10, "id");
  CFTypeRef v11 = v10;
  char v12 = 1;
  v13[0] = 6;
  v14[0] = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  v14[1] = v13;
  char v15 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v10, 2, 1, 2);
  v17[1] = (uint64_t *)v16;
  char v18 = 1;
  uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)v16, 1, 1, 2);
  char v24 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v25, (uint64_t)v19, 2, 1, 2);
  v26[1] = (uint64_t *)v25;
  char v27 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v6, (uint64_t)v25, 1, 1, 2);
  vp::vx::dsp::Graph_Builder::exception_guard((uint64_t)this, (uint64_t)"generate DSP graph property value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::generate_property_value::$_0>, (uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v26, v25[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v13[j * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v14[j], v13[j * 8]);
  }
}

void sub_1BB209878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v29 - 88));
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a28 + i));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a24);
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a16 + j));
  applesauce::CF::DictionaryRef::~DictionaryRef(v28);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::Graph_Builder::enable_audio_recorders(uint64_t a1, uint64_t a2, id *a3)
{
  if (*(unsigned char *)(a1 + 360) && *(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = a1 + 40;
    v32.__val_ = 0;
    v32.__cat_ = std::system_category();
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)(a1 + 40), &v32);
    if (*(char *)(a2 + 431) >= 0) {
      uint64_t v6 = (const char *)(a2 + 408);
    }
    else {
      uint64_t v6 = *(const char **)(a2 + 408);
    }
    CFIndex v7 = strlen(v6);
    if (v6)
    {
      uint64_t v6 = (const char *)CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
      char v31 = v6;
      if (!v6)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      char v31 = 0;
    }
    unsigned int v9 = *(void **)(a2 + 24);
    if (v9)
    {
      unsigned int v10 = (const time_t *)(a1 + 368);
      while (1)
      {
        if (v6) {
          CFRetain(v6);
        }
        CFTypeRef v30 = v6;
        uint64_t v11 = v9[2];
        char v12 = (const char *)(v11 + 32);
        if ((*(char *)(v11 + 55) & 0x80000000) == 0) {
          break;
        }
        char v12 = *(const char **)v12;
        CFIndex v13 = strlen(v12);
        if (v12) {
          goto LABEL_17;
        }
        CFTypeRef cf = 0;
LABEL_18:
        int should_enable_audio_recorders = vp::vx::dsp::Graph_Feature_Filter::should_enable_audio_recorders(a3, &v30, &cf);
        if (cf) {
          CFRelease(cf);
        }
        if (v30) {
          CFRelease(v30);
        }
        if (should_enable_audio_recorders)
        {
          if ((*(uint64_t (**)(void))(*(void *)v9[2] + 232))(v9[2])
            || (*(uint64_t (**)(void))(*(void *)v9[2] + 240))(v9[2]))
          {
            char v15 = (char *)v9[2];
            if (*(char *)(a2 + 431) >= 0) {
              char v16 = (const char *)(a2 + 408);
            }
            else {
              char v16 = *(const char **)(a2 + 408);
            }
            long long v17 = v15 + 32;
            if (v15[55] < 0) {
              long long v17 = *(const char **)v17;
            }
            if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
            }
            (*(void (**)(char *, std::__fs::filesystem::path *, void, uint64_t, void, uint64_t))(*(void *)v15 + 152))(v15, p_p, 0, 1, 0, 4096);
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            unint64_t v19 = *(void *)(v9[2] + 96) - *(void *)(v9[2] + 88);
            if ((v19 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v20 = 0;
              uint64_t v21 = (v19 >> 5);
              do
              {
                char v22 = (char *)v9[2];
                if (*(char *)(a2 + 431) >= 0) {
                  uint64_t v23 = (const char *)(a2 + 408);
                }
                else {
                  uint64_t v23 = *(const char **)(a2 + 408);
                }
                char v24 = v22 + 32;
                if (v22[55] < 0) {
                  char v24 = *(const char **)v24;
                }
                if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v25 = &__p;
                }
                else {
                  char v25 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
                }
                (*(void (**)(char *, std::__fs::filesystem::path *, uint64_t, uint64_t, void, uint64_t))(*(void *)v22 + 152))(v22, v25, v20, 1, 0, 4096);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                }
                ++v20;
              }
              while (v21 != v20);
            }
          }
        }
        unsigned int v9 = (void *)*v9;
        if (!v9) {
          goto LABEL_50;
        }
      }
      CFIndex v13 = strlen(v12);
LABEL_17:
      CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)v12, v13, 0x8000100u, 0);
      if (!cf)
      {
        CFDictionaryRef v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Could not construct");
      }
      goto LABEL_18;
    }
LABEL_50:
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_1BB209CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

std::string *vp::vx::dsp::anonymous namespace'::make_audio_capture_file_path@<X0>(uint64_t a1@<X0>, const time_t *a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, uint64_t a5@<X4>, std::__fs::filesystem::path *a6@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)__p, "vp.");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__p, a1, a6);
  if (SBYTE7(v30) < 0) {
    operator delete(__p[0]);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)std::__fs::filesystem::path __p = 0u;
  long long v30 = 0u;
  char v12 = localtime(a2);
  strftime((char *)__p, 0x40uLL, "%Y%m%d.%H%M%S.", v12);
  CFIndex v13 = &v28;
  while (*++v13)
    ;
  std::string::append[abi:ne180100]<char const*,0>(&a6->__pn_, (char *)__p, v13);
  if (a3 && *a3)
  {
    size_t v15 = strlen(a3);
    std::string::append(&a6->__pn_, a3, v15);
    std::string::append(&a6->__pn_, ".", 1uLL);
  }
  if (a4 && *a4)
  {
    size_t v16 = strlen(a4);
    std::string::append(&a6->__pn_, a4, v16);
  }
  if ((a5 & 0xFF00000000) != 0)
  {
    std::to_string(&v24, a5);
    long long v17 = std::string::insert(&v24, 0, "[", 1uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    unint64_t v19 = std::string::append(&v25, "]", 1uLL);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    int64_t v27 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)CFDictionaryRef v26 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v27 >= 0) {
      uint64_t v21 = v26;
    }
    else {
      uint64_t v21 = (void **)v26[0];
    }
    if (v27 >= 0) {
      std::string::size_type v22 = HIBYTE(v27);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)v26[1];
    }
    std::string::append(&a6->__pn_, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(&a6->__pn_, ".caf", 4uLL);
}

void sub_1BB209F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v35 + 23) < 0) {
    operator delete(*(void **)v35);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1BB20A044(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v9) {
    unsigned int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  v15.__first_ = v10;
  v15.__begin_ = end;
  v15.__end_ = end;
  v15.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = v15.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  v15.__end_ = end + 1;
  std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  uint64_t v13 = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_1BB20A15C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::tuple<unsigned int,applesauce::CF::DictionaryRef>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef,applesauce::CF::StringRef*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  std::vector<void const*>::vector(__p, a2 - a1);
  if (a2 != v3)
  {
    unint64_t v4 = __p[0];
    do
    {
      uint64_t v5 = *v3++;
      *v4++ = v5;
    }
    while (v3 != a2);
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_1BB20A21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::reserve(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1BB20A2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string,float &>(void *a1, const UInt8 *a2, int *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      std::__split_buffer<std::string> v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v14);
    }
    else {
      std::__split_buffer<std::string> v15 = 0;
    }
    long long v17 = v15;
    long long v18 = (CFStringRef *)&v15[16 * v11];
    long long v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string,float &>(v18, a2, a3);
    unint64_t v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    unint64_t v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<std::string,float &>(*(CFStringRef **)(v6 - 8), a2, a3);
    unint64_t v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_1BB20A3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string,float &>(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int valuePtr = *a3;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  return a1;
}

void sub_1BB20A4F4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

unint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string,applesauce::CF::DictionaryRef &>(void *a1, const UInt8 *a2, const void **a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      std::__split_buffer<std::string> v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v14);
    }
    else {
      std::__split_buffer<std::string> v15 = 0;
    }
    long long v17 = v15;
    long long v18 = (CFStringRef *)&v15[16 * v11];
    long long v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string,applesauce::CF::DictionaryRef &>(v18, a2, a3);
    unint64_t v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    unint64_t v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<std::string,applesauce::CF::DictionaryRef &>(*(CFStringRef **)(v6 - 8), a2, a3);
    unint64_t v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_1BB20A65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string,applesauce::CF::DictionaryRef &>(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_1BB20A730(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<applesauce::CF::NumberRef ()(unsigned int)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<applesauce::CF::NumberRef ()>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<applesauce::CF::NumberRef ()(unsigned int)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<applesauce::CF::DictionaryRef ()(unsigned int)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<applesauce::CF::DictionaryRef ()>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<applesauce::CF::DictionaryRef ()(unsigned int)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_0>(uint64_t **a1)
{
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_1>(DSPGraph::Graph ****a1)
{
  return DSPGraph::Graph::configure(***a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_2>(vp::vx::dsp::_anonymous_namespace_ ***a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    v31.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  }
  applesauce::CF::make_DataRef((const char *)&v31, (CFDataRef *)&cf);
  applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, (applesauce::CF::DictionaryRef *)&v30);
  uint64_t v4 = (vp *)cf;
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *(void *)v1[1];
  log = vp::get_log(v4);
  BOOL v7 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &cf);
      uint64_t v9 = v29;
      uint64_t v10 = v28;
      uint64_t v11 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if ((v9 & 0x80u) == 0) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v10;
        }
        if ((v29 & 0x80u) == 0) {
          p_CFTypeRef cf = &cf;
        }
        else {
          p_CFTypeRef cf = (void *)cf;
        }
        unint64_t v14 = " ";
        if (!v12) {
          unint64_t v14 = "";
        }
        std::__split_buffer<std::string> v15 = *v1;
        if (*((char *)*v1 + 23) < 0) {
          std::__split_buffer<std::string> v15 = *(vp::vx::dsp::_anonymous_namespace_ **)v15;
        }
        LODWORD(v31.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_cf;
        WORD2(v31.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
        HIWORD(v31.__r_.__value_.__r.__words[2]) = 2080;
        long long v32 = v15;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%s%ssetting \"%s\"", (uint8_t *)&v31, 0x20u);
      }
      if ((char)v29 < 0) {
        operator delete((void *)cf);
      }
    }
    size_t v16 = *(DSPGraph::Graph **)v1[3];
    DSPGraph::Graph::setPropertyStrip(v16, (const __CFDictionary *)v31.__r_.__value_.__l.__data_, *(const __CFString **)v1[1]);
    long long v17 = (const void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__r.__words[0]) {
LABEL_42:
    }
      CFRelease(v17);
  }
  else
  {
    if (v7)
    {
      long long v18 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &cf);
      uint64_t v19 = v29;
      uint64_t v20 = v28;
      uint64_t v21 = vp::get_log(v18);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if ((v19 & 0x80u) == 0) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = v20;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v23 = &cf;
        }
        else {
          uint64_t v23 = (void *)cf;
        }
        std::string v24 = " ";
        if (!v22) {
          std::string v24 = "";
        }
        std::string v25 = *v1;
        if (*((char *)*v1 + 23) < 0) {
          std::string v25 = *(vp::vx::dsp::_anonymous_namespace_ **)v25;
        }
        LODWORD(v31.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(v31.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        HIWORD(v31.__r_.__value_.__r.__words[2]) = 2080;
        long long v32 = v25;
        _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "%s%ssetting \"%s\"", (uint8_t *)&v31, 0x20u);
      }
      if ((char)v29 < 0) {
        operator delete((void *)cf);
      }
    }
    CFDictionaryRef v26 = *(DSPGraph::Graph **)v1[3];
    DSPGraph::Graph::setPropertyStrip(v26, (const __CFDictionary *)v31.__r_.__value_.__l.__data_);
    long long v17 = (const void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__r.__words[0]) {
      goto LABEL_42;
    }
  }
  if (v30) {
    CFRelease(v30);
  }
}

void sub_1BB20AC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::DictionaryRef *applesauce::CF::make_DictionaryRef@<X0>(CFDataRef *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  if (!*this) {
    goto LABEL_9;
  }
  CFPropertyListRef v4 = CFPropertyListCreateWithData(0, *this, 0, 0, 0);
  uint64_t v5 = v4;
  if (!v4)
  {
    if (!CFDictionaryGetTypeID()) {
      goto LABEL_6;
    }
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
    goto LABEL_9;
  }
LABEL_6:

  return applesauce::CF::DictionaryRef::DictionaryRef(a2, v5);
}

void sub_1BB20AE0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::dsp::anonymous namespace'::load_plist(vp::vx::dsp::_anonymous_namespace_ *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  if (*((char *)this + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else {
    std::string __p = *(std::string *)this;
  }
  applesauce::CF::make_DataRef((const char *)&__p, (CFDataRef *)&cf);
  applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, a2);
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB20AEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1BB20AF58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (!a3)
  {
LABEL_7:
    int v13 = 1;
    if (a4) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 32 * a3;
  uint64_t v11 = (unsigned char **)(a2 + 16);
  while (1)
  {
    uint64_t v12 = *v11;
    if (**v11 != 2
      || *(void *)(*((void *)v12 + 1) + 8) - **((void **)v12 + 1) != 32
      || *(unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((uint64_t)v12, 0) != 3)
    {
      break;
    }
    v11 += 4;
    v10 -= 32;
    if (!v10) {
      goto LABEL_7;
    }
  }
  int v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    if (a5 != 1) {
      LOBYTE(v13) = 1;
    }
    if ((v13 & 1) == 0)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "cannot create object from initializer list");
      nlohmann::detail::type_error::create(301, (uint64_t)v20, exception);
    }
    int v13 = v14;
  }
LABEL_17:
  uint64_t v15 = a2 + 32 * a3;
  if (v13)
  {
    *(unsigned char *)a1 = 1;
    size_t v16 = operator new(0x18uLL);
    void v16[2] = 0;
    v16[1] = 0;
    *size_t v16 = v16 + 1;
    *(void *)(a1 + 8) = v16;
    std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(a2, v15, a1);
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v19 = v15;
    v20[0] = a2;
    *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v20, &v19);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB20B100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v5, (uint64_t)v7);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a3 + 8), *(void ***)(*v8 + 8), *(void *)(*v8 + 8), *v8 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1BB20B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v6, v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a numeric argument with ", &v6, &v7);
    nlohmann::detail::type_error::create(305, (uint64_t)&v7, exception);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_1BB20B2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  std::string v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  CFStringRef v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  void v8[2] = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v9 = *(unsigned char *)a3;
  *((void *)v8 + 8) = *(void *)(a3 + 8);
  *((unsigned char *)v8 + 56) = v9;
  uint64_t v10 = (uint64_t)v8 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_3>(vp *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)a1;
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, __p);
    unint64_t v4 = v13;
    uint64_t v5 = __p[1];
    std::string v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      if ((v13 & 0x80u) == 0) {
        CFStringRef v8 = __p;
      }
      else {
        CFStringRef v8 = (void **)__p[0];
      }
      char v9 = " ";
      if (!v7) {
        char v9 = "";
      }
      uint64_t v10 = *(uint64_t **)(v1 + 8);
      if (*((char *)v10 + 23) < 0) {
        uint64_t v10 = (uint64_t *)*v10;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v15 = 2080;
      int v16 = v9;
      __int16 v17 = 2080;
      long long v18 = v10;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%ssetting \"%s\"", buf, 0x20u);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v11 = **(DSPGraph::Graph ***)(v1 + 16);
  DSPGraph::Graph::setAUStrip(v11, *(const __CFDictionary **)buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
}

void sub_1BB20B58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_4>(vp::vx::dsp::_anonymous_namespace_ ***a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    v31.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  }
  applesauce::CF::make_DataRef((const char *)&v31, (CFDataRef *)&cf);
  applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, (applesauce::CF::DictionaryRef *)&v30);
  unint64_t v4 = (vp *)cf;
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *(void *)v1[1];
  log = vp::get_log(v4);
  BOOL v7 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &cf);
      uint64_t v9 = v29;
      uint64_t v10 = v28;
      uint64_t v11 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if ((v9 & 0x80u) == 0) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v10;
        }
        if ((v29 & 0x80u) == 0) {
          p_CFTypeRef cf = &cf;
        }
        else {
          p_CFTypeRef cf = (void *)cf;
        }
        int v14 = " ";
        if (!v12) {
          int v14 = "";
        }
        __int16 v15 = *v1;
        if (*((char *)*v1 + 23) < 0) {
          __int16 v15 = *(vp::vx::dsp::_anonymous_namespace_ **)v15;
        }
        LODWORD(v31.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_cf;
        WORD2(v31.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
        HIWORD(v31.__r_.__value_.__r.__words[2]) = 2080;
        long long v32 = v15;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%s%ssetting \"%s\"", (uint8_t *)&v31, 0x20u);
      }
      if ((char)v29 < 0) {
        operator delete((void *)cf);
      }
    }
    int v16 = *(DSPGraph::Graph **)v1[3];
    DSPGraph::Graph::setPropertyStrip(v16, (const __CFDictionary *)v31.__r_.__value_.__l.__data_, *(const __CFString **)v1[1]);
    __int16 v17 = (const void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__r.__words[0]) {
LABEL_42:
    }
      CFRelease(v17);
  }
  else
  {
    if (v7)
    {
      long long v18 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &cf);
      uint64_t v19 = v29;
      uint64_t v20 = v28;
      int v21 = vp::get_log(v18);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if ((v19 & 0x80u) == 0) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = v20;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v23 = &cf;
        }
        else {
          uint64_t v23 = (void *)cf;
        }
        std::string v24 = " ";
        if (!v22) {
          std::string v24 = "";
        }
        std::string v25 = *v1;
        if (*((char *)*v1 + 23) < 0) {
          std::string v25 = *(vp::vx::dsp::_anonymous_namespace_ **)v25;
        }
        LODWORD(v31.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(v31.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        HIWORD(v31.__r_.__value_.__r.__words[2]) = 2080;
        long long v32 = v25;
        _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "%s%ssetting \"%s\"", (uint8_t *)&v31, 0x20u);
      }
      if ((char)v29 < 0) {
        operator delete((void *)cf);
      }
    }
    CFDictionaryRef v26 = *(DSPGraph::Graph **)v1[3];
    DSPGraph::Graph::setPropertyStrip(v26, (const __CFDictionary *)v31.__r_.__value_.__l.__data_);
    __int16 v17 = (const void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__r.__words[0]) {
      goto LABEL_42;
    }
  }
  if (v30) {
    CFRelease(v30);
  }
}

void sub_1BB20B8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_5>(vp::vx::dsp::Graph_Builder ***a1)
{
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_6>(vp::vx::dsp::Graph_Builder ***a1)
{
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_7>(void ***a1)
{
  return MEMORY[0x1F410BB20](***a1, *(unsigned int *)(*a1)[1]);
}

void vp::allocate_unique<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = v6;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB8716C0;
  std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>(&v6, a2, a3);
}

void sub_1BB20B9EC(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::dsp::Graph,vp::Allocator_Delete<vp::vx::dsp::Graph>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 64, 8);
  uint64_t v6 = &v9;
  BOOL v7 = a1;
  char v8 = 0;
  std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::construct[abi:ne180100]<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>((uint64_t)a1, v9, a2, a3);
}

void sub_1BB20BAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::construct[abi:ne180100]<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  vp::vx::dsp::Graph::Graph();
}

uint64_t std::__exception_guard_exceptions<vp::vx::dsp::Graph * std::pmr::polymorphic_allocator<vp::vx::dsp::Graph>::new_object[abi:ne180100]<vp::vx::dsp::Graph,vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph>>(vp::vx::io::Node::Block_Size_Policy &,std::unique_ptr<DSPGraph::Graph> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 64, 8);
  }
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_8>(vp::vx::dsp::Graph_Builder ***a1)
{
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::build(vp::vx::dsp::Graph_Compiler const&,vp::vx::dsp::Graph_Macro_Generator const&,vp::vx::dsp::Graph_Feature_Filter const&)::$_9>(vp::vx::dsp::Graph_Builder ***a1)
{
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::set_parameter_value(DSPGraph::Graph &,unsigned int,float)::$_0>(vp *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)a1;
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, v16);
    unint64_t v4 = v17;
    uint64_t v5 = v16[1];
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      if ((v17 & 0x80u) == 0) {
        char v8 = v16;
      }
      else {
        char v8 = (void **)v16[0];
      }
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      unsigned int v10 = **(_DWORD **)(v1 + 8);
      int v11 = bswap32(v10);
      *(_DWORD *)&buf[1] = v11;
      if (((char)v11 - 32) > 0x5E
        || (((__int16)v11 >> 8) - 32) > 0x5E
        || ((v11 << 8 >> 24) - 32) > 0x5E
        || ((v11 >> 24) - 32) > 0x5E)
      {
        std::to_string(&__p, v10);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&__p, buf);
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      double v13 = **(float **)(v1 + 16);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v19 = 2080;
      uint64_t v20 = v9;
      __int16 v21 = 2080;
      uint64_t v22 = p_p;
      __int16 v23 = 2048;
      double v24 = v13;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%ssetting parameter %s to %f", buf, 0x2Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((char)v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return (*(uint64_t (**)(void, void, float))(**(void **)(v1 + 24) + 40))(*(void *)(v1 + 24), **(unsigned int **)(v1 + 8), **(float **)(v1 + 16));
}

void sub_1BB20BDCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1BB20BE5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1BB20BEF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::generate_parameter_value(unsigned int)::$_0>(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (*(void *)(v2 + 280))
  {
    std::function<applesauce::CF::NumberRef ()>::operator()(v2 + 256, *(_DWORD *)v1[2]);
    long long v3 = (const void **)v1[1];
    unint64_t v4 = *v3;
    *long long v3 = v5;
    if (v4) {
      CFRelease(v4);
    }
  }
}

uint64_t std::function<applesauce::CF::NumberRef ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::set_property_value(DSPGraph::Graph &,unsigned int,applesauce::CF::DictionaryRef)::$_0>(unsigned int ***a1)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  unsigned int v2 = ***a1;
  int v3 = bswap32(v2);
  *(_DWORD *)&buf[1] = v3;
  if (((char)v3 - 32) > 0x5E
    || (((__int16)v3 >> 8) - 32) > 0x5E
    || ((v3 << 8 >> 24) - 32) > 0x5E
    || ((v3 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v98, v2);
  }
  else
  {
    strcpy(&buf[5], "'");
    buf[0] = 39;
    std::string::basic_string[abi:ne180100]<0>(&v98, buf);
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)v1[1];
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,char const(&)[6]>(v4, "Value", (uint64_t)&cf);
  if (v97)
  {
    CFTypeRef v5 = cf;
    if (cf)
    {
      uint64_t v6 = (vp *)CFRetain(cf);
      log = vp::get_log(v6);
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
      {
        log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &v93);
        if ((v95 & 0x80u) == 0) {
          uint64_t v9 = v95;
        }
        else {
          uint64_t v9 = v94;
        }
        unsigned int v10 = vp::get_log(log_context_info);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          if ((v95 & 0x80u) == 0) {
            int v11 = &v93;
          }
          else {
            int v11 = v93;
          }
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v12 = &v98;
          }
          else {
            uint64_t v12 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          CFStringRef v13 = CFCopyDescription(v5);
          applesauce::CF::details::CFString_get_value<true>(v13, (uint64_t)__p);
          if (v13) {
            CFRelease(v13);
          }
          int v14 = " ";
          if (!v9) {
            int v14 = "";
          }
          *(_DWORD *)std::string buf = 136315906;
          *(double *)&__int16 v15 = COERCE_DOUBLE(__p);
          *(void *)&uint8_t buf[4] = v11;
          if (v92 < 0) {
            __int16 v15 = (void **)__p[0];
          }
          __int16 v100 = 2080;
          int v101 = v14;
          __int16 v102 = 2080;
          v103 = v12;
          __int16 v104 = 2080;
          double v105 = *(double *)&v15;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s to %s", buf, 0x2Au);
          if (v92 < 0) {
            operator delete(__p[0]);
          }
        }
        if ((char)v95 < 0) {
          operator delete(v93);
        }
      }
      *(void *)std::string buf = v5;
      (*(void (**)(unsigned int *, void, uint64_t, unsigned char *))(*(void *)v1[3] + 56))(v1[3], **v1, 8, buf);
      CFRelease(v5);
    }
  }
  else
  {
    CFDictionaryRef v16 = *(const __CFDictionary **)v1[1];
    if (!v16)
    {
      unsigned int v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v81, "Could not construct");
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,char const(&)[5]>(v16, "Data", &v89);
    if (v90)
    {
      CFTypeRef v17 = v89;
      if (v89)
      {
        long long v18 = (vp *)CFRetain(v89);
        __int16 v19 = vp::get_log(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &v93);
          if ((v95 & 0x80u) == 0) {
            uint64_t v21 = v95;
          }
          else {
            uint64_t v21 = v94;
          }
          uint64_t v22 = vp::get_log(v20);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            if ((v95 & 0x80u) == 0) {
              __int16 v23 = &v93;
            }
            else {
              __int16 v23 = v93;
            }
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v24 = &v98;
            }
            else {
              double v24 = (std::string *)v98.__r_.__value_.__r.__words[0];
            }
            CFStringRef v25 = CFCopyDescription(v17);
            applesauce::CF::details::CFString_get_value<true>(v25, (uint64_t)__p);
            if (v25) {
              CFRelease(v25);
            }
            CFDictionaryRef v26 = " ";
            if (!v21) {
              CFDictionaryRef v26 = "";
            }
            *(_DWORD *)std::string buf = 136315906;
            *(double *)&int64_t v27 = COERCE_DOUBLE(__p);
            *(void *)&uint8_t buf[4] = v23;
            if (v92 < 0) {
              int64_t v27 = (void **)__p[0];
            }
            __int16 v100 = 2080;
            int v101 = v26;
            __int16 v102 = 2080;
            v103 = v24;
            __int16 v104 = 2080;
            double v105 = *(double *)&v27;
            _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s to %s", buf, 0x2Au);
            if (v92 < 0) {
              operator delete(__p[0]);
            }
          }
          if ((char)v95 < 0) {
            operator delete(v93);
          }
        }
        uint64_t v28 = v1[3];
        uint64_t v29 = **v1;
        CFIndex Length = CFDataGetLength((CFDataRef)v17);
        BytePtr = CFDataGetBytePtr((CFDataRef)v17);
        (*(void (**)(unsigned int *, uint64_t, CFIndex, const UInt8 *))(*(void *)v28 + 56))(v28, v29, Length, BytePtr);
        CFRelease(v17);
      }
    }
    else
    {
      if (!*(void *)v1[1])
      {
        unsigned int v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v82, "Could not construct");
      }
      *(void *)std::string buf = v1[1];
      long long v32 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const(&)[7]>((const __CFDictionary ***)buf, "UInt32");
      v88 = v32;
      if (((unint64_t)v32 & 0xFF00000000) != 0)
      {
        int v33 = (int)v32;
        char v34 = vp::get_log(v32);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &v93);
          uint64_t v36 = v95;
          uint64_t v37 = v94;
          uint64_t v38 = vp::get_log(v35);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            if ((v36 & 0x80u) == 0) {
              uint64_t v39 = v36;
            }
            else {
              uint64_t v39 = v37;
            }
            if ((v95 & 0x80u) == 0) {
              char v40 = &v93;
            }
            else {
              char v40 = v93;
            }
            if (v39) {
              uint64_t v41 = " ";
            }
            else {
              uint64_t v41 = "";
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v40;
            unint64_t v42 = &v98;
            __int16 v100 = 2080;
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v42 = (std::string *)v98.__r_.__value_.__r.__words[0];
            }
            int v101 = v41;
            __int16 v102 = 2080;
            v103 = v42;
            __int16 v104 = 1024;
            LODWORD(v105) = v33;
            _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s to %u", buf, 0x26u);
          }
          if ((char)v95 < 0) {
            operator delete(v93);
          }
        }
        (*(void (**)(unsigned int *, void, uint64_t, vp **))(*(void *)v1[3] + 56))(v1[3], **v1, 4, &v88);
      }
      else
      {
        CFDictionaryRef v43 = *(const __CFDictionary **)v1[1];
        if (!v43)
        {
          uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v83, "Could not construct");
        }
        CFBooleanRef v44 = applesauce::CF::details::find_at_key_or_optional<unsigned long long,char const(&)[7]>(v43, "UInt64");
        __p[0] = v44;
        __p[1] = v45;
        if ((_BYTE)v45)
        {
          double v46 = *(double *)&v44;
          uint64_t v47 = vp::get_log(v44);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v48 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &v93);
            uint64_t v49 = v95;
            uint64_t v50 = v94;
            uint64_t v51 = vp::get_log(v48);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              if ((v49 & 0x80u) == 0) {
                uint64_t v52 = v49;
              }
              else {
                uint64_t v52 = v50;
              }
              if ((v95 & 0x80u) == 0) {
                uint64_t v53 = &v93;
              }
              else {
                uint64_t v53 = v93;
              }
              if (v52) {
                unsigned __int8 v54 = " ";
              }
              else {
                unsigned __int8 v54 = "";
              }
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = v53;
              unsigned int v55 = &v98;
              __int16 v100 = 2080;
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unsigned int v55 = (std::string *)v98.__r_.__value_.__r.__words[0];
              }
              int v101 = v54;
              __int16 v102 = 2080;
              v103 = v55;
              __int16 v104 = 2048;
              double v105 = v46;
              _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s to %llu", buf, 0x2Au);
            }
            if ((char)v95 < 0) {
              operator delete(v93);
            }
          }
          (*(void (**)(unsigned int *, void, uint64_t, void **))(*(void *)v1[3] + 56))(v1[3], **v1, 8, __p);
        }
        else
        {
          if (!*(void *)v1[1])
          {
            uint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v84, "Could not construct");
          }
          *(void *)std::string buf = v1[1];
          unsigned int v56 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[8]>((const __CFDictionary ***)buf, "Float32");
          v87 = v56;
          if (((unint64_t)v56 & 0xFF00000000) != 0)
          {
            float v57 = *(float *)&v56;
            uint64_t v58 = vp::get_log(v56);
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v59 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &v93);
              uint64_t v60 = v95;
              uint64_t v61 = v94;
              uint64_t v62 = vp::get_log(v59);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                if ((v60 & 0x80u) == 0) {
                  uint64_t v63 = v60;
                }
                else {
                  uint64_t v63 = v61;
                }
                if ((v95 & 0x80u) == 0) {
                  unsigned __int8 v64 = &v93;
                }
                else {
                  unsigned __int8 v64 = v93;
                }
                if (v63) {
                  unsigned __int8 v65 = " ";
                }
                else {
                  unsigned __int8 v65 = "";
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v64;
                std::string v66 = &v98;
                if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string v66 = (std::string *)v98.__r_.__value_.__r.__words[0];
                }
                __int16 v100 = 2080;
                int v101 = v65;
                __int16 v102 = 2080;
                v103 = v66;
                __int16 v104 = 2048;
                double v105 = v57;
                _os_log_impl(&dword_1BB0CE000, v62, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s to %f", buf, 0x2Au);
              }
              if ((char)v95 < 0) {
                operator delete(v93);
              }
            }
            (*(void (**)(unsigned int *, void, uint64_t, vp **))(*(void *)v1[3] + 56))(v1[3], **v1, 4, &v87);
          }
          else
          {
            CFDictionaryRef v67 = *(const __CFDictionary **)v1[1];
            if (!v67)
            {
              uint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v85, "Could not construct");
            }
            std::string::size_type v68 = applesauce::CF::details::find_at_key_or_optional<double,char const(&)[8]>(v67, "Float64");
            v86[0] = v68;
            v86[1] = v69;
            if ((_BYTE)v69)
            {
              double v70 = *(double *)&v68;
              uint64_t v71 = vp::get_log(v68);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
              {
                unsigned __int8 v72 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::dsp::Graph_Builder]", 26, &v93);
                uint64_t v73 = v95;
                uint64_t v74 = v94;
                std::string::size_type v75 = vp::get_log(v72);
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                {
                  if ((v73 & 0x80u) == 0) {
                    uint64_t v76 = v73;
                  }
                  else {
                    uint64_t v76 = v74;
                  }
                  if ((v95 & 0x80u) == 0) {
                    uint64_t v77 = &v93;
                  }
                  else {
                    uint64_t v77 = v93;
                  }
                  if (v76) {
                    __int16 v78 = " ";
                  }
                  else {
                    __int16 v78 = "";
                  }
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = v77;
                  uint64_t v79 = &v98;
                  __int16 v100 = 2080;
                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v79 = (std::string *)v98.__r_.__value_.__r.__words[0];
                  }
                  int v101 = v78;
                  __int16 v102 = 2080;
                  v103 = v79;
                  __int16 v104 = 2048;
                  double v105 = v70;
                  _os_log_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s to %f", buf, 0x2Au);
                }
                if ((char)v95 < 0) {
                  operator delete(v93);
                }
              }
              (*(void (**)(unsigned int *, void, uint64_t, void *))(*(void *)v1[3] + 56))(v1[3], **v1, 8, v86);
            }
          }
        }
      }
    }
    std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v89);
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
}

void sub_1BB20CB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const(&)[7]>(const __CFDictionary ***a1, char *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[7]>(**a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<unsigned int,0>(result);
  }
  return result;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[8]>(const __CFDictionary ***a1, char *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[8]>(**a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

const void *applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,char const(&)[6]>@<X0>(const __CFDictionary *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  CFNumberRef result = applesauce::CF::details::at_key<char const(&)[6]>(a1, a2);
  if (result)
  {
    CFTypeRef v5 = result;
    CFNumberRef result = CFRetain(result);
    *(void *)a3 = v5;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 8) = v6;
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[6]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB20CE08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,char const(&)[5]>(const __CFDictionary *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  CFDictionaryRef v4 = applesauce::CF::details::at_key<char const(&)[5]>(a1, a2);
  if (!v4) {
    goto LABEL_5;
  }
  CFIndex v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDataGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(void *)a3 = v5;
  char v7 = 1;
LABEL_6:
  a3[8] = v7;
}

const void *applesauce::CF::details::at_key<char const(&)[7]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB20CF94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const __CFBoolean *applesauce::CF::details::find_at_key_or_optional<unsigned long long,char const(&)[7]>(const __CFDictionary *a1, char *a2)
{
  CFBooleanRef result = (const __CFBoolean *)applesauce::CF::details::at_key<char const(&)[7]>(a1, a2);
  if (result) {
    return applesauce::CF::convert_as<unsigned long long,0>(result);
  }
  return result;
}

const __CFBoolean *applesauce::CF::convert_as<unsigned long long,0>(const __CFNumber *a1)
{
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1)) {
      return (const __CFBoolean *)applesauce::CF::details::number_convert_as<unsigned long long>(a1);
    }
  }

  return applesauce::CF::details::treat_as_BOOL_for_convert_as<unsigned long long>(a1);
}

const __CFBoolean *applesauce::CF::details::treat_as_BOOL_for_convert_as<unsigned long long>(const __CFBoolean *result)
{
  if (result)
  {
    CFBooleanRef v1 = result;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t applesauce::CF::details::number_convert_as<unsigned long long>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value) {
        char v17 = LOBYTE(valuePtr);
      }
      else {
        char v17 = 0;
      }
      if (Value != 0 && SLOBYTE(valuePtr) < 0) {
        unint64_t v4 = -256;
      }
      else {
        unint64_t v4 = 0;
      }
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberShortType;
LABEL_18:
      BOOL v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      unsigned __int8 v19 = LOBYTE(valuePtr);
      uint64_t v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberIntType;
LABEL_20:
      BOOL v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      unsigned __int8 v19 = LOBYTE(valuePtr);
      uint64_t v20 = SLODWORD(valuePtr);
LABEL_21:
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18) {
        unint64_t v5 = 0;
      }
      else {
        unint64_t v5 = v21;
      }
      goto LABEL_37;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloatType;
LABEL_27:
      BOOL v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      unint64_t v5 = (unint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberNSIntegerType;
LABEL_31:
      BOOL v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      unint64_t v5 = *(void *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberCGFloatType;
LABEL_33:
      BOOL v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      unint64_t v5 = (unint64_t)valuePtr;
LABEL_34:
      if (v22) {
        unint64_t v5 = 0;
      }
LABEL_37:
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      unint64_t v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

const __CFBoolean *applesauce::CF::details::find_at_key_or_optional<double,char const(&)[8]>(const __CFDictionary *a1, char *a2)
{
  CFBooleanRef result = (const __CFBoolean *)applesauce::CF::details::at_key<char const(&)[8]>(a1, a2);
  if (result) {
    return applesauce::CF::convert_as<double,0>(result);
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[9]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[9]>(char *a1)
{
  CFNumberRef v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1BB20D404(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::dsp::Graph_Builder::generate_property_value(unsigned int)::$_0>(uint64_t **a1)
{
  CFBooleanRef v1 = *a1;
  uint64_t v2 = **a1;
  if (*(void *)(v2 + 336))
  {
    std::function<applesauce::CF::DictionaryRef ()>::operator()(v2 + 312, *(_DWORD *)v1[2]);
    CFNumberType v3 = (const void **)v1[1];
    unint64_t v4 = *v3;
    *CFNumberType v3 = v5;
    if (v4) {
      CFRelease(v4);
    }
  }
}

uint64_t std::function<applesauce::CF::DictionaryRef ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

vp::vx::io::ports::Audio_Buffer_Input_Port *vp::vx::io::ports::Audio_Buffer_Input_Port::Audio_Buffer_Input_Port(vp::vx::io::ports::Audio_Buffer_Input_Port *this, const CA::StreamDescription *a2, int a3)
{
  *((void *)this + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  CFNumberRef v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)CFNumberRef v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v6 + 7) = 0;
  *((void *)this + 14) = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *(void *)this = &unk_1F14A00E8;
  *((void *)this + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F14A0178;
  *((void *)this + 13) = v6;
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)v6);
  vp::Audio_Buffer::create((uint64_t)a2, a3, default_resource, (void **)this + 1);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *((void *)this + 1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0x7FF8000000000000;
  *((unsigned char *)this + 88) = 0;
  *((_DWORD *)this + 23) = 0;
  return this;
}

double vp::vx::io::ports::Audio_Buffer_Input_Port::get_format@<D0>(vp::vx::io::ports::Audio_Buffer_Input_Port *this@<X0>, uint64_t a2@<X8>)
{
  vp::Audio_Buffer::get_format((uint64_t *)this + 1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6;
  return result;
}

uint64_t vp::vx::io::ports::Audio_Buffer_Input_Port::get_time_stamp@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>, unint64_t a4@<D2>)
{
  if (a2 == 1)
  {
    double v6 = *(double *)(result + 16);
    uint64_t v7 = *(void *)(result + 72);
    if (v7)
    {
      LODWORD(a4) = *(_DWORD *)(result + 92);
      double v6 = v6 + (double)a4;
    }
    *(double *)a3 = v6;
    long long v8 = *(_OWORD *)(result + 40);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(result + 24);
    *(_OWORD *)(a3 + 24) = v8;
    *(_OWORD *)(a3 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(result + 56);
    *(void *)(a3 + 56) = v7;
  }
  else if (!a2)
  {
    long long v4 = *(_OWORD *)(result + 32);
    *(_OWORD *)a3 = *(_OWORD *)(result + 16);
    *(_OWORD *)(a3 + 16) = v4;
    long long v5 = *(_OWORD *)(result + 64);
    *(_OWORD *)(a3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 48) = v5;
  }
  return result;
}

void vp::vx::io::ports::Audio_Buffer_Input_Port::do_copy_input_data(vp::vx::io::ports::Audio_Buffer_Input_Port *this@<X0>, const AudioBufferList *a2@<X1>, const AudioTimeStamp *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  CFNumberRef v10 = (vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8);
  uint64_t size = vp::Audio_Buffer::get_size((vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8));
  if ((size & 0xFF00000000) != 0) {
    unsigned int v12 = size;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 < a4)
  {
    unsigned __int8 v19 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v26, 2, 52, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[24]>(v19, "input data frame count ", v24);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is larger than input port's audio buffer capacity ", 51);
    vp::Audio_Buffer::get_size(v10);
    std::ostream::operator<<();
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v24);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v26, a5);
    uint64_t v20 = (vp::vx::io::Error *)v26;
LABEL_16:
    vp::vx::io::Error::~Error(v20);
    return;
  }
  vp::Audio_Buffer::prepare((uint64_t *)v10, a4);
  if ((a3->mFlags & 1) == 0)
  {
    vp::vx::io::Error::Error((uint64_t)v24, 5, 67, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[49]>((vp::vx::io::Error *)v24, "audio time stamp does not have valid sample time", v23);
    unint64_t v21 = (vp::vx::io::Error_String_Stream_Writer *)v23;
LABEL_15:
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer(v21);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v24, a5);
    uint64_t v20 = (vp::vx::io::Error *)v24;
    goto LABEL_16;
  }
  double mSampleTime = a3->mSampleTime;
  if (*((double *)this + 10) == a3->mSampleTime) {
    double mSampleTime = *((double *)this + 10);
  }
  else {
    *((unsigned char *)this + 88) = 1;
  }
  *((double *)this + 1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = mSampleTime + (double)a4;
  audio_buffer_list = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v10);
  vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v24, audio_buffer_list);
  CFNumberType v15 = *(unsigned int **)v24;
  vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v24, a2);
  if (!vp::for_each_buffer_pair(v15, *(_DWORD **)v24, (unsigned int (*)(unsigned int *, _DWORD *, uint64_t))vp::copy, a4))
  {
    vp::Audio_Buffer::prepare((uint64_t *)v10, *((_DWORD *)this + 23));
    vp::vx::io::Error::Error((uint64_t)v24, 0, 103, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[26]>((vp::vx::io::Error *)v24, "failed to copy input data", v22);
    unint64_t v21 = (vp::vx::io::Error_String_Stream_Writer *)v22;
    goto LABEL_15;
  }
  long long v16 = *(_OWORD *)&a3->mSampleTime;
  long long v17 = *(_OWORD *)&a3->mRateScalar;
  long long v18 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *((_OWORD *)this + 3) = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *((_OWORD *)this + 4) = v18;
  *((_OWORD *)this + 1) = v16;
  *((_OWORD *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v17;
  *((_DWORD *)this + 23) = a4;
  *(void *)(a5 + 48) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(unsigned char *)(a5 + 48) = 1;
}

void vp::vx::io::operator<<<char const(&)[24]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB20D940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void vp::vx::io::ports::Audio_Buffer_Input_Port::do_set_input_data(uint64_t a1@<X8>)
{
  vp::vx::io::Error::Error((uint64_t)&v10, 13, 116, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
  int v16 = v10;
  __int16 v5 = v11;
  __int16 v17 = v11;
  __int16 v6 = v12;
  __int16 v18 = v12;
  uint64_t v7 = v13;
  long long v9 = v14;
  long long v8 = v15;
  uint64_t v22 = *((void *)&v15 + 1);
  long long v14 = 0uLL;
  *(void *)&long long v15 = 0;
  *(_DWORD *)a1 = v10;
  *(_WORD *)(a1 + 4) = v5;
  *(_WORD *)(a1 + 6) = v6;
  *(void *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v8;
  uint64_t v21 = 0;
  uint64_t v19 = v7;
  long long v20 = 0uLL;
  *(unsigned char *)(a1 + 48) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v16);
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v10);
}

void vp::vx::io::ports::Audio_Buffer_Input_Port::do_process_input_data(AudioBufferList *a1@<X2>, AudioTimeStamp *a2@<X3>, vp::vx::io::ports::Audio_Buffer_Input_Port *a3@<X0>, int a4@<W1>, unsigned int a5@<W4>, unsigned char *a6@<X8>)
{
  if (a4)
  {
    a2->double mSampleTime = a2->mSampleTime + (double)a5;
    *a6 = 0;
    a6[48] = 1;
  }
  else
  {
    vp::vx::io::ports::Audio_Buffer_Input_Port::begin_process_input_data(a3, a1, a2, a5, a6);
  }
}

void vp::vx::io::ports::Audio_Buffer_Input_Port::begin_process_input_data(vp::vx::io::ports::Audio_Buffer_Input_Port *this@<X0>, AudioBufferList *a2@<X1>, AudioTimeStamp *a3@<X2>, unsigned int a4@<W3>, unsigned char *a5@<X8>)
{
  long long v9 = (char *)this + 16;
  int v10 = *((_DWORD *)this + 18);
  if ((v10 & 1) == 0)
  {
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v48, a2);
    if (vp::for_each_buffer(v48[0], (unsigned int (*)(unsigned int *, uint64_t, float))vp::fill, a4, 0.0))
    {
      long long v33 = *(_OWORD *)v9;
      long long v34 = *((_OWORD *)v9 + 1);
      long long v35 = *((_OWORD *)v9 + 3);
      *(_OWORD *)&a3->mSMPTETime.mSubframes = *((_OWORD *)v9 + 2);
      *(_OWORD *)&a3->mSMPTETime.mHours = v35;
      *(_OWORD *)&a3->double mSampleTime = v33;
      *(_OWORD *)&a3->mRateScalar = v34;
LABEL_19:
      *a5 = 0;
      a5[48] = 1;
      return;
    }
    vp::vx::io::Error::Error((uint64_t)v48, 0, 144, 23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[37]>((vp::vx::io::Error *)v48, "failed to zero-out audio buffer list", v50);
    uint64_t v28 = (vp::vx::io::Error_String_Stream_Writer *)v50;
    goto LABEL_21;
  }
  if (*((_DWORD *)this + 23) < a4)
  {
    vp::vx::io::Error::Error((uint64_t)&v44, 2, 158, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[21]>((vp::vx::io::Error *)&v44, "process frame count ", v48);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" is larger than input port's audio buffer capacity ", 51);
    std::ostream::operator<<();
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v48);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)&v44, (uint64_t)a5);
    uint64_t v29 = (vp::vx::io::Error *)&v44;
    goto LABEL_22;
  }
  double mSampleTime = a3->mSampleTime;
  long long v12 = *(_OWORD *)&a3->mWordClockTime;
  long long v44 = *(_OWORD *)&a3->mHostTime;
  long long v45 = v12;
  long long v46 = *(_OWORD *)&a3->mSMPTETime.mType;
  uint64_t v13 = *(void *)&a3->mSMPTETime.mHours;
  uint64_t v47 = *(void *)&a3->mFlags;
  long long v14 = *(_OWORD *)&a3->mRateScalar;
  long long v40 = *(_OWORD *)&a3->mSampleTime;
  long long v41 = v14;
  long long v42 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  uint64_t v43 = v13;
  AudioTimeStampFlags mFlags = a3->mFlags;
  UInt32 mReserved = a3->mReserved;
  if ((mFlags & 1) != 0 && !*((unsigned char *)this + 88))
  {
    if ((v10 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double mSampleTime = *((double *)this + 2);
  long long v14 = *(_OWORD *)((char *)this + 40);
  long long v44 = *(_OWORD *)((char *)this + 24);
  long long v30 = v44;
  long long v45 = v14;
  long long v46 = *(_OWORD *)((char *)this + 56);
  long long v31 = v46;
  uint64_t v47 = *((void *)this + 9);
  uint64_t v32 = v47;
  a3->double mSampleTime = mSampleTime;
  *(_OWORD *)&a3->mHostTime = v30;
  *(_OWORD *)&a3->mWordClockTime = v14;
  *(_OWORD *)&a3->mSMPTETime.mType = v31;
  *(void *)&a3->AudioTimeStampFlags mFlags = v32;
  *((unsigned char *)this + 88) = 0;
  if ((*((_DWORD *)this + 18) & 2) != 0)
  {
LABEL_6:
    a3->mFlags |= 2u;
    a3->mHostTime = *((void *)this + 3);
  }
LABEL_7:
  double v17 = *((double *)this + 2);
  LODWORD(v14) = *((_DWORD *)this + 23);
  if (mSampleTime + (double)a4 > v17 + (double)(unint64_t)v14)
  {
    vp::vx::io::Error::Error((uint64_t)v39, 2, 185, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[28]>((vp::vx::io::Error *)v39, "requested read time range [", v48);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)")", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" is ahead of available time range [", 35);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)")", 1);
LABEL_30:
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v48);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v39, (uint64_t)a5);
    uint64_t v29 = (vp::vx::io::Error *)v39;
    goto LABEL_22;
  }
  if (mSampleTime < v17)
  {
    vp::vx::io::Error::Error((uint64_t)v39, 2, 195, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[28]>((vp::vx::io::Error *)v39, "requested read time range [", v48);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)")", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" is behind of available time range [", 36);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)")", 1);
    goto LABEL_30;
  }
  __int16 v18 = (vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8);
  if (*(_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8)) == a2->mNumberBuffers)
  {
    audio_buffer_list = (UInt32 *)vp::Audio_Buffer::get_audio_buffer_list(v18);
    if (a2->mNumberBuffers >= *audio_buffer_list) {
      uint64_t mNumberBuffers = *audio_buffer_list;
    }
    else {
      uint64_t mNumberBuffers = a2->mNumberBuffers;
    }
    if (mNumberBuffers)
    {
      uint64_t v21 = 0;
      do
      {
        if (*(_DWORD *)(vp::Audio_Buffer::get_audio_buffer_list(v18) + v21 * 16 + 8) != a2->mBuffers[v21].mNumberChannels)
        {
          long long v27 = v41;
          *(_OWORD *)&a3->double mSampleTime = v40;
          *(_OWORD *)&a3->mRateScalar = v27;
          *(_OWORD *)&a3->mSMPTETime.mSubframes = v42;
          *(void *)&a3->mSMPTETime.mHours = v43;
          a3->AudioTimeStampFlags mFlags = mFlags;
          a3->UInt32 mReserved = mReserved;
          vp::vx::io::Error::Error((uint64_t)v48, 0, 233, 23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
          vp::vx::io::operator<<<char const(&)[45]>((vp::vx::io::Error *)v48, "audio buffer list channel counts don't match", v37);
          uint64_t v28 = (vp::vx::io::Error_String_Stream_Writer *)v37;
          goto LABEL_21;
        }
        ++v21;
      }
      while (mNumberBuffers != v21);
      uint64_t v22 = 0;
      int v23 = 4 * a4;
      do
      {
        uint64_t v24 = vp::Audio_Buffer::get_audio_buffer_list(v18);
        unsigned int v25 = *(_DWORD *)(v24 + v22 + 8);
        CFDictionaryRef v26 = (char *)a2 + v22;
        *((void *)v26 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(v24 + v22 + 16)
                             + 4 * (vabdd_f64(mSampleTime, *(double *)v9) * (double)v25);
        *((_DWORD *)v26 + 3) = v23 * v25;
        v22 += 16;
      }
      while (16 * mNumberBuffers != v22);
    }
    goto LABEL_19;
  }
  long long v36 = v41;
  *(_OWORD *)&a3->double mSampleTime = v40;
  *(_OWORD *)&a3->mRateScalar = v36;
  *(_OWORD *)&a3->mSMPTETime.mSubframes = v42;
  *(void *)&a3->mSMPTETime.mHours = v43;
  a3->AudioTimeStampFlags mFlags = mFlags;
  a3->UInt32 mReserved = mReserved;
  vp::vx::io::Error::Error((uint64_t)v48, 0, 214, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
  vp::vx::io::operator<<<char const(&)[45]>((vp::vx::io::Error *)v48, "audio buffer lists buffer counts don't match", v38);
  uint64_t v28 = (vp::vx::io::Error_String_Stream_Writer *)v38;
LABEL_21:
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer(v28);
  _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)v48, (uint64_t)a5);
  uint64_t v29 = (vp::vx::io::Error *)v48;
LABEL_22:
  vp::vx::io::Error::~Error(v29);
}

void vp::vx::io::operator<<<char const(&)[21]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB20E054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void vp::vx::io::operator<<<char const(&)[28]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB20E0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

double vp::vx::io::ports::Audio_Buffer_Input_Port::reset@<D0>(vp::vx::io::ports::Audio_Buffer_Input_Port *this@<X0>, unsigned char *a2@<X8>)
{
  vp::Audio_Buffer::prepare((vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8));
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *((void *)this + 1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0x7FF8000000000000;
  *((unsigned char *)this + 88) = 0;
  *((_DWORD *)this + 23) = 0;
  *a2 = 0;
  a2[48] = 1;
  return result;
}

vp::vx::io::ports::Audio_Buffer_Output_Port *vp::vx::io::ports::Audio_Buffer_Output_Port::Audio_Buffer_Output_Port(vp::vx::io::ports::Audio_Buffer_Output_Port *this, const CA::StreamDescription *a2, int a3)
{
  *((void *)this + 11) = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v6 + 7) = 0;
  *((void *)this + 13) = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)this = &unk_1F14A01A0;
  *((void *)this + 11) = &unk_1F14A0230;
  *((void *)this + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6 + 24;
  uint64_t v7 = (std::pmr *)vp::Audio_File::Audio_File((void *)this + 1);
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  uint64_t default_resource = std::pmr::get_default_resource(v7);
  vp::Audio_Buffer::create((uint64_t)a2, a3, default_resource, &v10);
  vp::Audio_Buffer::operator=((void **)this + 1, &v10);
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v10);
  return this;
}

double vp::vx::io::ports::Audio_Buffer_Output_Port::get_format@<D0>(vp::vx::io::ports::Audio_Buffer_Output_Port *this@<X0>, uint64_t a2@<X8>)
{
  vp::Audio_Buffer::get_format((uint64_t *)this + 1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6;
  return result;
}

uint64_t vp::vx::io::ports::Audio_Buffer_Output_Port::get_time_stamp@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>, unint64_t a4@<D2>)
{
  if (a2 == 1)
  {
    double v6 = *(double *)(result + 24);
    uint64_t v7 = *(void *)(result + 80);
    if (v7)
    {
      LODWORD(a4) = *(_DWORD *)(result + 16);
      double v6 = v6 + (double)a4;
    }
    *(double *)a3 = v6;
    long long v8 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 24) = v8;
    *(_OWORD *)(a3 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(result + 64);
    *(void *)(a3 + 56) = v7;
  }
  else if (!a2)
  {
    long long v4 = *(_OWORD *)(result + 40);
    *(_OWORD *)a3 = *(_OWORD *)(result + 24);
    *(_OWORD *)(a3 + 16) = v4;
    long long v5 = *(_OWORD *)(result + 72);
    *(_OWORD *)(a3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_OWORD *)(result + 56);
    *(_OWORD *)(a3 + 48) = v5;
  }
  return result;
}

void vp::vx::io::ports::Audio_Buffer_Output_Port::do_copy_output_data(vp::vx::io::ports::Audio_Buffer_Output_Port *this@<X0>, AudioBufferList *a2@<X1>, AudioTimeStamp *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  if (*((_DWORD *)this + 4) < a4)
  {
    long long v14 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v19, 2, 310, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[25]>(v14, "output data frame count ", v17);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" is larger than output port's audio buffer capacity ", 52);
    std::ostream::operator<<();
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v17);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v19, a5);
    long long v15 = (vp::vx::io::Error *)v19;
LABEL_7:
    vp::vx::io::Error::~Error(v15);
    return;
  }
  vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v17, a2);
  long long v9 = *(unsigned int **)v17;
  audio_buffer_list = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8));
  vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v17, audio_buffer_list);
  if (!vp::for_each_buffer_pair(v9, *(_DWORD **)v17, (unsigned int (*)(unsigned int *, _DWORD *, uint64_t))vp::copy, a4))
  {
    vp::vx::io::Error::Error((uint64_t)v17, 0, 324, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[27]>((vp::vx::io::Error *)v17, "failed to copy output data", v16);
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v16);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v17, a5);
    long long v15 = (vp::vx::io::Error *)v17;
    goto LABEL_7;
  }
  long long v11 = *(_OWORD *)((char *)this + 24);
  long long v12 = *(_OWORD *)((char *)this + 40);
  long long v13 = *(_OWORD *)((char *)this + 72);
  *(_OWORD *)&a3->mSMPTETime.mSubframes = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&a3->mSMPTETime.mHours = v13;
  *(_OWORD *)&a3->double mSampleTime = v11;
  *(_OWORD *)&a3->mRateScalar = v12;
  *(_DWORD *)a5 = a4;
  *(unsigned char *)(a5 + 48) = 1;
}

void vp::vx::io::operator<<<char const(&)[25]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB20E52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void vp::vx::io::operator<<<char const(&)[27]>(vp::vx::io::Error *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  vp::vx::io::Error_String_Stream_Writer::Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6, a1);
  size_t v5 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v5);
  *a3 = v6;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a3 + 1), &v7);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)&v6);
}

void sub_1BB20E5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)va);
  _Unwind_Resume(a1);
}

void vp::vx::io::ports::Audio_Buffer_Output_Port::do_set_output_data(uint64_t a1@<X8>)
{
  vp::vx::io::Error::Error((uint64_t)&v10, 12, 337, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
  int v16 = v10;
  __int16 v5 = v11;
  __int16 v17 = v11;
  __int16 v6 = v12;
  __int16 v18 = v12;
  uint64_t v7 = v13;
  long long v9 = v14;
  long long v8 = v15;
  uint64_t v22 = *((void *)&v15 + 1);
  long long v14 = 0uLL;
  *(void *)&long long v15 = 0;
  *(_DWORD *)a1 = v10;
  *(_WORD *)(a1 + 4) = v5;
  *(_WORD *)(a1 + 6) = v6;
  *(void *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v8;
  uint64_t v21 = 0;
  uint64_t v19 = v7;
  long long v20 = 0uLL;
  *(unsigned char *)(a1 + 48) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v16);
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v10);
}

void vp::vx::io::ports::Audio_Buffer_Output_Port::do_process_output_data(AudioBufferList *a1@<X2>, AudioTimeStamp *a2@<X3>, vp::vx::io::ports::Audio_Buffer_Output_Port *a3@<X0>, int a4@<W1>, unsigned int a5@<W4>, unsigned char *a6@<X8>)
{
  if (a4) {
    vp::vx::io::ports::Audio_Buffer_Output_Port::end_process_output_data(a3, a2, a5, a6);
  }
  else {
    vp::vx::io::ports::Audio_Buffer_Output_Port::begin_process_output_data(a3, a1, a5, a6);
  }
}

void vp::vx::io::ports::Audio_Buffer_Output_Port::begin_process_output_data(vp::vx::io::ports::Audio_Buffer_Output_Port *this@<X0>, AudioBufferList *a2@<X1>, unsigned int a3@<W3>, unsigned char *a4@<X8>)
{
  long long v8 = (vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8);
  uint64_t size = vp::Audio_Buffer::get_size((vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8));
  if ((size & 0xFF00000000) != 0) {
    unsigned int v10 = size;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 < a3)
  {
    uint64_t v19 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v24, 2, 359, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[21]>(v19, "process frame count ", v22);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" is larger than output port's audio buffer capacity ", 52);
    vp::Audio_Buffer::get_size(v8);
    std::ostream::operator<<();
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v22);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v24, (uint64_t)a4);
    __int16 v18 = (vp::vx::io::Error *)v24;
LABEL_19:
    vp::vx::io::Error::~Error(v18);
    return;
  }
  vp::Audio_Buffer::prepare((uint64_t *)v8, a3);
  if (*(_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v8) != a2->mNumberBuffers)
  {
    vp::vx::io::Error::Error((uint64_t)v22, 0, 373, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[45]>((vp::vx::io::Error *)v22, "audio buffer lists buffer counts don't match", v21);
    __int16 v17 = (vp::vx::io::Error_String_Stream_Writer *)v21;
LABEL_18:
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer(v17);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv(v22, (uint64_t)a4);
    __int16 v18 = (vp::vx::io::Error *)v22;
    goto LABEL_19;
  }
  audio_buffer_list = (UInt32 *)vp::Audio_Buffer::get_audio_buffer_list(v8);
  if (a2->mNumberBuffers >= *audio_buffer_list) {
    uint64_t mNumberBuffers = *audio_buffer_list;
  }
  else {
    uint64_t mNumberBuffers = a2->mNumberBuffers;
  }
  if (mNumberBuffers)
  {
    uint64_t v13 = 0;
    do
    {
      if (*(_DWORD *)(vp::Audio_Buffer::get_audio_buffer_list(v8) + v13 * 16 + 8) != a2->mBuffers[v13].mNumberChannels)
      {
        vp::vx::io::Error::Error((uint64_t)v22, 0, 388, 23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
        vp::vx::io::operator<<<char const(&)[45]>((vp::vx::io::Error *)v22, "audio buffer list channel counts don't match", v20);
        __int16 v17 = (vp::vx::io::Error_String_Stream_Writer *)v20;
        goto LABEL_18;
      }
      ++v13;
    }
    while (mNumberBuffers != v13);
    unint64_t v14 = 0;
    mBuffers = a2->mBuffers;
    uint64_t v16 = 16 * mNumberBuffers;
    do
    {
      mBuffers[v14 / 0x10] = *(AudioBuffer *)(vp::Audio_Buffer::get_audio_buffer_list(v8) + v14 + 8);
      v14 += 16;
    }
    while (v16 != v14);
  }
  *a4 = 0;
  a4[48] = 1;
}

void vp::vx::io::ports::Audio_Buffer_Output_Port::end_process_output_data(vp::vx::io::ports::Audio_Buffer_Output_Port *this@<X0>, AudioTimeStamp *a2@<X2>, unsigned int a3@<W3>, unsigned char *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2->mFlags)
  {
    long long v7 = *(_OWORD *)&a2->mSampleTime;
    long long v8 = *(_OWORD *)&a2->mRateScalar;
    long long v9 = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)((char *)this + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)((char *)this + 56) = v9;
    *(_OWORD *)((char *)this + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v8;
    *(_OWORD *)((char *)this + 24) = v7;
    *((_DWORD *)this + 4) = a3;
    *a4 = 0;
    a4[48] = 1;
  }
  else
  {
    audio_buffer_list = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8));
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(v16, audio_buffer_list);
    if ((vp::for_each_buffer(*(unsigned int **)&v16[0], (unsigned int (*)(unsigned int *, uint64_t, float))vp::fill, a3, 0.0) & 1) == 0)
    {
      v13[37] = 0;
      memset(v16, 0, sizeof(v16));
      os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      int v14 = 134217984;
      uint64_t v15 = 0;
      _os_log_send_and_compose_impl();
      uint64_t v12 = _os_crash_msg();
      caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
    }
    __int16 v11 = (vp::vx::io::Error *)vp::vx::io::Error::Error((uint64_t)v16, 5, 415, 19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/vp/vx/io/ports/Audio_Buffer_Port.cpp");
    vp::vx::io::operator<<<char const(&)[49]>(v11, "audio time stamp does not have valid sample time", v13);
    vp::vx::io::Error_String_Stream_Writer::~Error_String_Stream_Writer((vp::vx::io::Error_String_Stream_Writer *)v13);
    _ZNO2vp2vx2io5ErrorcvNS_8ExpectedIT_S2_EEIvEEv((int *)v16, (uint64_t)a4);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v16);
  }
}

void sub_1BB20EA58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double vp::vx::io::ports::Audio_Buffer_Output_Port::reset@<D0>(vp::vx::io::ports::Audio_Buffer_Output_Port *this@<X0>, unsigned char *a2@<X8>)
{
  vp::Audio_Buffer::prepare((vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8));
  *((_DWORD *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *a2 = 0;
  a2[48] = 1;
  return result;
}

__n128 vp::vx::io::ports::create_audio_buffer_port@<Q0>(int a1@<W0>, const CA::StreamDescription *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, __n128 *a5@<X8>)
{
  int v14 = a3;
  uint64_t v10 = *a4;
  if (a1)
  {
    vp::allocate_unique<vp::vx::io::ports::Audio_Buffer_Output_Port,CA::StreamDescription const&,unsigned int &>(&v10, a2, &v14, (uint64_t)&v11);
    __n128 v9 = v11;
    v11.n128_u64[0] = 0;
    unint64_t v6 = v12;
    unint64_t v7 = v13;
    std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Output_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Output_Port>>::reset[abi:ne180100](&v11, 0);
  }
  else
  {
    vp::allocate_unique<vp::vx::io::ports::Audio_Buffer_Input_Port,CA::StreamDescription const&,unsigned int &>(&v10, a2, &v14, (uint64_t)&v11);
    __n128 v9 = v11;
    v11.n128_u64[0] = 0;
    unint64_t v6 = v12;
    unint64_t v7 = v13;
    std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Input_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Input_Port>>::reset[abi:ne180100](&v11, 0);
  }
  __n128 result = v9;
  *a5 = v9;
  a5[1].n128_u64[0] = v6;
  a5[1].n128_u64[1] = v7;
  return result;
}

void **vp::allocate_unique<vp::vx::io::ports::Audio_Buffer_Input_Port,CA::StreamDescription const&,unsigned int &>@<X0>(uint64_t *a1@<X0>, const CA::StreamDescription *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872710;
  unint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Input_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Input_Port,CA::StreamDescription const&,unsigned int &>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Input_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Input_Port>>::reset[abi:ne180100]((void **)a4, v6);
}

void sub_1BB20EBB8(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Input_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Input_Port>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void **vp::allocate_unique<vp::vx::io::ports::Audio_Buffer_Output_Port,CA::StreamDescription const&,unsigned int &>@<X0>(uint64_t *a1@<X0>, const CA::StreamDescription *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB871660;
  unint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Output_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Output_Port,CA::StreamDescription const&,unsigned int &>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Output_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Output_Port>>::reset[abi:ne180100]((void **)a4, v6);
}

void sub_1BB20EC24(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Output_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Output_Port>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void vp::vx::io::ports::Audio_Buffer_Input_Port::~Audio_Buffer_Input_Port(vp::vx::io::ports::Audio_Buffer_Input_Port *this)
{
  vp::Audio_Buffer::~Audio_Buffer((vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8));
  *((void *)this + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  vp::Audio_Buffer::~Audio_Buffer((vp::vx::io::ports::Audio_Buffer_Input_Port *)((char *)this + 8));
  *((void *)this + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::io::ports::Audio_Buffer_Input_Port::~Audio_Buffer_Input_Port(vp::vx::io::ports::Audio_Buffer_Input_Port *this)
{
  CFBooleanRef v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(v1 + 1));
  v1[12] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  CFBooleanRef v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(v1 + 1));
  v1[12] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void vp::vx::io::ports::Audio_Buffer_Output_Port::~Audio_Buffer_Output_Port(vp::vx::io::ports::Audio_Buffer_Output_Port *this)
{
  vp::Audio_Buffer::~Audio_Buffer((vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8));
  *((void *)this + 11) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  vp::Audio_Buffer::~Audio_Buffer((vp::vx::io::ports::Audio_Buffer_Output_Port *)((char *)this + 8));
  *((void *)this + 11) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::io::ports::Audio_Buffer_Output_Port::~Audio_Buffer_Output_Port(vp::vx::io::ports::Audio_Buffer_Output_Port *this)
{
  CFBooleanRef v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(v1 + 1));
  v1[11] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  CFBooleanRef v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(v1 + 1));
  v1[11] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void **std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Input_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Input_Port>>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  const void *result = a2;
  if (v2)
  {
    CFNumberType v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Input_Port,0>(v2);
    return (void **)(*(uint64_t (**)(void *, void *, void *, void *))(*v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

vp::vx::io::ports::Audio_Buffer_Input_Port *std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Input_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Input_Port,CA::StreamDescription const&,unsigned int &>(void *a1, const CA::StreamDescription *a2, int *a3)
{
  uint64_t v10 = (vp::vx::io::ports::Audio_Buffer_Input_Port *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 120, 8);
  v8[0] = &v10;
  v8[1] = a1;
  char v9 = 0;
  vp::vx::io::ports::Audio_Buffer_Input_Port::Audio_Buffer_Input_Port(v10, a2, *a3);
  char v9 = 1;
  unint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::io::ports::Audio_Buffer_Input_Port * std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Input_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Input_Port,CA::StreamDescription const&,unsigned int &>(CA::StreamDescription const&,unsigned int &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB20F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__destroy_at[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Input_Port,0>(void *a1)
{
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1));
  a1[12] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::io::ports::Audio_Buffer_Input_Port * std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Input_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Input_Port,CA::StreamDescription const&,unsigned int &>(CA::StreamDescription const&,unsigned int &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 120, 8);
  }
  return a1;
}

void **std::unique_ptr<vp::vx::io::ports::Audio_Buffer_Output_Port,vp::Allocator_Delete<vp::vx::io::ports::Audio_Buffer_Output_Port>>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  const void *result = a2;
  if (v2)
  {
    CFNumberType v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Output_Port,0>(v2);
    return (void **)(*(uint64_t (**)(void *, void *, void *, void *))(*v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

vp::vx::io::ports::Audio_Buffer_Output_Port *std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Output_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Output_Port,CA::StreamDescription const&,unsigned int &>(void *a1, const CA::StreamDescription *a2, int *a3)
{
  uint64_t v10 = (vp::vx::io::ports::Audio_Buffer_Output_Port *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 112, 8);
  v8[0] = &v10;
  v8[1] = a1;
  char v9 = 0;
  vp::vx::io::ports::Audio_Buffer_Output_Port::Audio_Buffer_Output_Port(v10, a2, *a3);
  char v9 = 1;
  unint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::io::ports::Audio_Buffer_Output_Port * std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Output_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Output_Port,CA::StreamDescription const&,unsigned int &>(CA::StreamDescription const&,unsigned int &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB20F2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__destroy_at[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Output_Port,0>(void *a1)
{
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1));
  a1[11] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::io::ports::Audio_Buffer_Output_Port * std::pmr::polymorphic_allocator<vp::vx::io::ports::Audio_Buffer_Output_Port>::new_object[abi:ne180100]<vp::vx::io::ports::Audio_Buffer_Output_Port,CA::StreamDescription const&,unsigned int &>(CA::StreamDescription const&,unsigned int &)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 112, 8);
  }
  return a1;
}

uint64_t vp::vx::IO_Wireless_Charging_Detector_Delegate::IO_Wireless_Charging_Detector_Delegate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  long long v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)long long v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v4 + 24;
  *(void *)(a1 + 48) = v4;
  *(void *)a1 = &unk_1F14A0258;
  *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F14A02A0;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v6 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  return a1;
}

void vp::vx::IO_Wireless_Charging_Detector_Delegate::~IO_Wireless_Charging_Detector_Delegate(vp::vx::IO_Wireless_Charging_Detector_Delegate *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 4) = &unk_1F1493718;
  CFNumberType v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Wireless_Charging_Detector_Delegate::~IO_Wireless_Charging_Detector_Delegate(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Wireless_Charging_Detector_Delegate::~IO_Wireless_Charging_Detector_Delegate(vp::vx::IO_Wireless_Charging_Detector_Delegate *this)
{
}

{
  uint64_t vars8;

  vp::vx::IO_Wireless_Charging_Detector_Delegate::~IO_Wireless_Charging_Detector_Delegate((vp::vx::IO_Wireless_Charging_Detector_Delegate *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void vp::vx::IO_Wireless_Charging_Detector_Delegate::get_parameter_ids(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    CFNumberType v3 = operator new(4uLL);
    *a2 = v3;
    *v3++ = 2003004769;
    a2[1] = v3;
    a2[2] = v3;
  }
}

void vp::vx::IO_Wireless_Charging_Detector_Delegate::get_property_ids(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void vp::vx::IO_Wireless_Charging_Detector_Delegate::notify(uint64_t a1, int a2, uint64_t (***a3)(void))
{
  uint64_t v5 = (**a3)(a3);
  if (!v5)
  {
    uint64_t v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  if (!a2)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v5 + 24))(v9);
    if (v10)
    {
      BOOL v6 = *(float *)caulk::expected<float,vp::vx::io::Error>::value((const vp::vx::io::Error *)v9) == 1.0;
      int v7 = v10;
      *(unsigned char *)(a1 + 8) = v6;
      if (v7) {
        return;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
    }
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v9);
  }
}

void vp::vx::IO_Wireless_Charging_Detector_Delegate::process(uint64_t a1, int a2, uint64_t (***a3)(void))
{
  uint64_t v5 = (**a3)(a3);
  if (!v5)
  {
    uint64_t v9 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v9);
  }
  if (!a2)
  {
    uint64_t v6 = v5;
    unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    if (*(unsigned __int8 *)(a1 + 8) != v7)
    {
      char v8 = v7;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, float))(*(void *)v6 + 32))(v10, v6, 2003004769, (float)v7);
      if (!v11) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v10);
      }
      *(unsigned char *)(a1 + 8) = v8;
    }
  }
}

uint64_t vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory::IO_Wireless_Charging_Detector_Delegate_Factory(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = &unk_1F1493718;
  long long v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)long long v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v4 + 24;
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v4;
  *(void *)a1 = &unk_1F14A02C8;
  *(void *)(a1 + 24) = &unk_1F14A02F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v6 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  return a1;
}

vp::vx::IO_Wireless_Charging_Detector_Delegate **vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory::new_node_delegate(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v10[1] = a5;
  uint64_t v11 = a3;
  v10[0] = a4;
  __n128 result = (vp::vx::IO_Wireless_Charging_Detector_Delegate **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if (result)
  {
    __n128 result = (vp::vx::IO_Wireless_Charging_Detector_Delegate **)(*((uint64_t (**)(vp::vx::IO_Wireless_Charging_Detector_Delegate **, uint64_t, void))*result
                                                                 + 1))(result, 2003004769, 0);
    if (result)
    {
      vp::allocate_unique<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>(&v11, (uint64_t *)(a1 + 8), (uint64_t)v8);
      long long v7 = v8[0];
      *(void *)&v8[0] = 0;
      v9[0] = v7;
      v9[1] = v8[1];
      caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>)>::operator()(v10, (uint64_t *)v9);
      std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100](v9, 0);
      return std::unique_ptr<vp::vx::IO_Wireless_Charging_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Wireless_Charging_Detector_Delegate>>::reset[abi:ne180100]((vp::vx::IO_Wireless_Charging_Detector_Delegate **)v8, 0);
    }
  }
  return result;
}

vp::vx::IO_Wireless_Charging_Detector_Delegate **vp::allocate_unique<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v4 = v7;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 16) = xmmword_1BB8716A0;
  uint64_t v5 = (vp::vx::IO_Wireless_Charging_Detector_Delegate *)std::pmr::polymorphic_allocator<vp::vx::IO_Wireless_Charging_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>(&v7, a2);
  return std::unique_ptr<vp::vx::IO_Wireless_Charging_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Wireless_Charging_Detector_Delegate>>::reset[abi:ne180100]((vp::vx::IO_Wireless_Charging_Detector_Delegate **)a3, v5);
}

void sub_1BB20F9DC(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Wireless_Charging_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Wireless_Charging_Detector_Delegate>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory::~IO_Wireless_Charging_Detector_Delegate_Factory(vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 3) = &unk_1F1493718;
  CFNumberType v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 3) = &unk_1F1493718;
  CFNumberType v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory::~IO_Wireless_Charging_Detector_Delegate_Factory(vp::vx::IO_Wireless_Charging_Detector_Delegate_Factory *this)
{
  CFBooleanRef v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v1[3] = &unk_1F1493718;
  CFNumberType v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  CFBooleanRef v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v1[3] = &unk_1F1493718;
  CFNumberType v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

vp::vx::IO_Wireless_Charging_Detector_Delegate **std::unique_ptr<vp::vx::IO_Wireless_Charging_Detector_Delegate,vp::Allocator_Delete<vp::vx::IO_Wireless_Charging_Detector_Delegate>>::reset[abi:ne180100](vp::vx::IO_Wireless_Charging_Detector_Delegate **result, vp::vx::IO_Wireless_Charging_Detector_Delegate *a2)
{
  uint64_t v2 = *result;
  const void *result = a2;
  if (v2)
  {
    CFNumberType v3 = result;
    vp::vx::IO_Wireless_Charging_Detector_Delegate::~IO_Wireless_Charging_Detector_Delegate(v2);
    return (vp::vx::IO_Wireless_Charging_Detector_Delegate **)(*(uint64_t (**)(vp::vx::IO_Wireless_Charging_Detector_Delegate *, vp::vx::IO_Wireless_Charging_Detector_Delegate *, vp::vx::IO_Wireless_Charging_Detector_Delegate *, vp::vx::IO_Wireless_Charging_Detector_Delegate *))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Wireless_Charging_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>(void *a1, uint64_t *a2)
{
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 56, 8);
  v6[0] = &v8;
  v6[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Wireless_Charging_Detector_Delegate>::construct[abi:ne180100]<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>((uint64_t)a1, v8, a2);
  char v7 = 1;
  uint64_t v4 = v8;
  std::__exception_guard_exceptions<vp::vx::IO_Wireless_Charging_Detector_Delegate * std::pmr::polymorphic_allocator<vp::vx::IO_Wireless_Charging_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>(std::shared_ptr<vp::services::Wireless_Charging_Detector> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void sub_1BB20FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pmr::polymorphic_allocator<vp::vx::IO_Wireless_Charging_Detector_Delegate>::construct[abi:ne180100]<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFNumberType v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::IO_Wireless_Charging_Detector_Delegate::IO_Wireless_Charging_Detector_Delegate(a2, (uint64_t)&v5);
  uint64_t v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Wireless_Charging_Detector_Delegate * std::pmr::polymorphic_allocator<vp::vx::IO_Wireless_Charging_Detector_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Wireless_Charging_Detector_Delegate,std::shared_ptr<vp::services::Wireless_Charging_Detector> const&>(std::shared_ptr<vp::services::Wireless_Charging_Detector> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 56, 8);
  }
  return a1;
}

void vp::vx::database::v1::syntax::decisions::Load_Property_List::Parser::parse_decision(vp::xml::Document *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  vp::xml::Document::children(this, &v36);
  v38[0] = &v36;
  v38[1] = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::element_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::begin[abi:ne180100]((uint64_t)v38, &v34);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  while (v34)
  {
    char v7 = (vp::vx::database::v1::syntax *)vp::xml::Node::name((vp::xml::Node *)&v34);
    uint64_t v10 = vp::vx::database::v1::syntax::constexpr_hash(v7, v8, v9);
    if (v10 == 0x539572566EA6738FLL)
    {
      if (v5) {
        goto LABEL_37;
      }
      vp::xml::Document::children((vp::xml::Document *)&v34, &v23);
      long long v30 = &v23;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::text_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::begin[abi:ne180100]((uint64_t)&v30, &v26);
      while (v26)
      {
        int v14 = *(void **)(a2 + 8);
        uint64_t v15 = vp::xml::Node::content((vp::xml::Node *)&v26);
        vp::vx::database::v1::runtime::String_Pool::intern(v14, (const UInt8 *)v15, v16, &v25);
        uint64_t v5 = v25;
        if (v25) {
          goto LABEL_32;
        }
        std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::text_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::__iterator::operator++[abi:ne180100]((uint64_t)&v26);
      }
      uint64_t v5 = 0;
    }
    else if (v10 == 0x56F98C19446556ACLL)
    {
      if (v4) {
        goto LABEL_37;
      }
      vp::xml::Document::children((vp::xml::Document *)&v34, &v21);
      long long v30 = &v21;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::text_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::begin[abi:ne180100]((uint64_t)&v30, &v26);
      while (v26)
      {
        uint64_t v17 = *(void **)(a2 + 8);
        __int16 v18 = vp::xml::Node::content((vp::xml::Node *)&v26);
        vp::vx::database::v1::runtime::String_Pool::intern(v17, (const UInt8 *)v18, v19, &v25);
        uint64_t v4 = v25;
        if (v25) {
          goto LABEL_32;
        }
        std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::text_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::__iterator::operator++[abi:ne180100]((uint64_t)&v26);
      }
      uint64_t v4 = 0;
    }
    else
    {
      if (v10 != 0x69F7D38018125979 || v6) {
        goto LABEL_37;
      }
      vp::xml::Document::children((vp::xml::Document *)&v34, &v28);
      long long v30 = &v28;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::text_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::begin[abi:ne180100]((uint64_t)&v30, &v26);
      while (v26)
      {
        uint64_t v11 = *(void **)(a2 + 8);
        unint64_t v12 = vp::xml::Node::content((vp::xml::Node *)&v26);
        vp::vx::database::v1::runtime::String_Pool::intern(v11, (const UInt8 *)v12, v13, &v25);
        uint64_t v6 = v25;
        if (v25) {
          goto LABEL_32;
        }
        std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::text_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::__iterator::operator++[abi:ne180100]((uint64_t)&v26);
      }
      uint64_t v6 = 0;
    }
LABEL_32:
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if ((_BYTE)v33)
    {
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
LABEL_37:
    std::ranges::filter_view[abi:llvm18_nua]<std::ranges::ref_view<vp::xml::Node_Range>,vp::xml::element_filter(vp::xml::Node_Range)::{lambda(vp::xml::Node const&)#1}>::__iterator::operator++[abi:ne180100]((uint64_t)&v34);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if ((_BYTE)v40 && v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v6) {
    operator new();
  }
  *a3 = 0;
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t vp::vx::database::v1::syntax::decisions::Load_Property_List::Load_Property_List(uint64_t result, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(_WORD *)(result + 8) = 0;
  *(void *)__n128 result = &unk_1F14A0318;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = *a3;
  *a3 = 0;
  *(void *)(result + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *a4;
  *a4 = 0;
  *(void *)(result + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *a5;
  *a5 = 0;
  return result;
}

BOOL vp::vx::database::v1::syntax::decisions::Load_Property_List::evaluate(vp::vx::database::v1::syntax::decisions::Load_Property_List *this, const applesauce::CF::DictionaryRef *a2, void **a3)
{
  v23[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFStringRef v5 = (const __CFString *)*((void *)this + 4);
  if (v5 && (CFIndex Length = CFStringGetLength(v5)) != 0)
  {
    size_t v7 = Length + 1;
    uint64_t v8 = (char *)&v18 - ((MEMORY[0x1F4188790](Length) + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v7);
    if (!CFStringGetCString(*((CFStringRef *)this + 4), v8, v7, 0x8000100u)) {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  CFStringRef v9 = (const __CFString *)*((void *)this + 3);
  if (v9 && (CFIndex v10 = CFStringGetLength(v9)) != 0)
  {
    size_t v11 = v10 + 1;
    unint64_t v12 = (char *)&v18 - ((MEMORY[0x1F4188790](v10) + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, v11);
    if (!CFStringGetCString(*((CFStringRef *)this + 3), v12, v11, 0x8000100u)) {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  CFStringRef v13 = (const __CFString *)*((void *)this + 5);
  if (!v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  uint64_t v14 = *((void *)this + 2);
  applesauce::CF::convert_to<std::string,0>(v13, (uint64_t)&v19);
  long long v21 = v19;
  uint64_t v22 = v20;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, long long *))(*(void *)v14 + 16))(v23, v14, &v21);
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  CFTypeRef v15 = v23[0];
  if (!v23[0]) {
    return 0;
  }
  CFRetain(v23[0]);
  CFPropertyListRef v18 = v15;
  vp::vx::database::v1::Manifest::set(a3, v8, &v18, v12);
  if (v18) {
    CFRelease(v18);
  }
  BOOL result = v23[0] != 0;
  if (v23[0])
  {
    CFRelease(v23[0]);
    return 1;
  }
  return result;
}

void sub_1BB2103D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void vp::vx::database::v1::syntax::decisions::Load_Property_List::Parser::~Parser(vp::vx::database::v1::syntax::decisions::Load_Property_List::Parser *this)
{
}

void vp::vx::database::v1::syntax::decisions::Load_Property_List::~Load_Property_List(vp::vx::database::v1::syntax::decisions::Load_Property_List *this)
{
  *(void *)this = &unk_1F14A0318;
  uint64_t v2 = (const void *)*((void *)this + 5);
  if (v2) {
    CFRelease(v2);
  }
  CFNumberType v3 = (const void *)*((void *)this + 4);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 3);
  if (v4) {
    CFRelease(v4);
  }
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14A0318;
  uint64_t v2 = (const void *)*((void *)this + 5);
  if (v2) {
    CFRelease(v2);
  }
  CFNumberType v3 = (const void *)*((void *)this + 4);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 3);
  if (v4) {
    CFRelease(v4);
  }

  JUMPOUT(0x1C185D370);
}

void vp::cf::Predicate::create(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  id v4 = (id)[[NSString alloc] initWithBytesNoCopy:a1 length:a2 encoding:1 freeWhenDone:0];
  CFStringRef v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);

  vp::cf::Predicate::create(&cf, a3);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB2105C8(void *a1)
{
  __clang_call_terminate(a1);
}

void vp::cf::Predicate::create(void *a1@<X0>, id *a2@<X8>)
{
  *a2 = 0;
  CFNumberType v3 = [MEMORY[0x1E4F28F60] predicateWithFormat:*a1];
  vp::objc::ID::ID((vp::objc::ID *)&v4, v3);
  vp::objc::ID::operator=(a2, &v4);
  vp::objc::ID::~ID((vp::objc::ID *)&v4);
}

void sub_1BB21064C(void *a1)
{
}

id *vp::cf::Predicate::operator=(id *a1, id *a2)
{
  vp::objc::ID::operator=(a1, a2);
  return a1;
}

uint64_t vp::cf::Predicate::evaluate(id *this, id *a2)
{
  id v3 = *a2;
  if (v3) {
    uint64_t v4 = [*this evaluateWithObject:v3];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1BB2106DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB2106CCLL);
}

void sub_1BB210784(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BB210804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  CFIndex v10 = v9;

  a9.super_class = (Class)RPBServer_Listener;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void vp::rpb::Server::get_shared_instance(uint64_t a1@<X8>)
{
  id v3 = [MEMORY[0x1E4F95DF8] sharedInstance];
  vp::rpb::Object::Object(a1, v3);
}

uint64_t vp::rpb::Server::is_running(id *this)
{
  id v1 = vp::rpb::Object::objc_self(this);
  uint64_t v2 = [v1 isRunning];

  return v2;
}

void vp::rpb::Server::add_host(id *this, const vp::rpb::Host *a2)
{
  id v4 = vp::rpb::Object::objc_self(this);
  id v3 = (void *)vp::rpb::Wire::objc_self(a2);
  [v4 addHost:v3];
}

void sub_1BB210AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void vp::rpb::Server::add_host(id *this, const vp::rpb::Host *a2, const vp::rpb::Item *a3)
{
  id v7 = vp::rpb::Object::objc_self(this);
  CFStringRef v5 = (void *)vp::rpb::Wire::objc_self(a2);
  uint64_t v6 = (void *)vp::rpb::Wire::objc_self(a3);
  [v7 addHost:v5 toItem:v6];
}

void sub_1BB210B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void vp::rpb::Server::remove_host(id *this, const vp::rpb::Host *a2)
{
  id v4 = vp::rpb::Object::objc_self(this);
  id v3 = (void *)vp::rpb::Wire::objc_self(a2);
  [v4 removeHost:v3];
}

void sub_1BB210C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

vp::rpb::Server::Listener *vp::rpb::Server::Listener::Listener(vp::rpb::Server::Listener *this, id *a2)
{
  id v4 = [RPBServer_Listener alloc];
  id v5 = vp::rpb::Object::objc_self(a2);
  uint64_t v6 = [(RPBServer_Listener *)v4 initWithServer:v5];
  vp::objc::ID::ID(this, v6);

  return this;
}

void sub_1BB210C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vp::rpb::Server::Listener::on_did_start_running(id *a1, uint64_t a2)
{
  id v3 = *a1;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v3 + 6, a2);
}

void vp::rpb::Server::Listener::on_did_stop_running(id *a1, uint64_t a2)
{
  id v3 = *a1;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v3 + 14, a2);
}

id *vp::rpb::Connection::Connection(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (const vp::rpb::Host *)(vp::objc::ID::ID(a1, a2) + 8);
  vp::objc::ID::ID(v5, a3);
  if (*a1 && *(void *)v5) {
    vp::rpb::Server::add_host(a1, v5);
  }
  return a1;
}

void sub_1BB210DB4(void *a1)
{
}

void *vp::rpb::Connection::Connection(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = a1 + 1;
  vp::Audio_File::Audio_File(a1);
  vp::rpb::Wire::Wire(v2);
  return a1;
}

id *vp::rpb::Connection::operator=(id *a1)
{
  id v3 = 0;
  id v4 = 0;
  vp::Audio_File::Audio_File(&v3);
  vp::rpb::Wire::Wire(&v4);
  vp::objc::ID::ID(&v5, a1);
  vp::objc::ID::ID(&v6, a1 + 1);
  vp::objc::ID::operator=(a1, &v3);
  vp::objc::ID::operator=(a1 + 1, &v4);
  vp::objc::ID::operator=(&v3, &v5);
  vp::objc::ID::operator=(&v4, &v6);
  vp::rpb::Connection::~Connection(&v5);
  vp::rpb::Connection::~Connection(&v3);
  return a1;
}

void vp::rpb::Connection::~Connection(id *this)
{
  if (*this)
  {
    if (this[1])
    {
      vp::rpb::Server::remove_host(this, (const vp::rpb::Host *)(this + 1));
      vp::rpb::Host::operator=(this + 1);
    }
    vp::rpb::Host::Delegate::operator=(this);
  }
  vp::objc::ID::~ID((vp::objc::ID *)(this + 1));

  vp::objc::ID::~ID((vp::objc::ID *)this);
}

void sub_1BB210F40(void *a1)
{
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::__shared_mutex_base *vp::vx::data_flow::Engine::Engine(std::__shared_mutex_base *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = std::__shared_mutex_base::__shared_mutex_base(this);
  this[1].__mut_.__m_.__sig = 850045863;
  *(_OWORD *)this[1].__mut_.__m_.__opaque = 0u;
  *(_OWORD *)&this[1].__mut_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this[1].__mut_.__m_.__opaque[32] = 0u;
  *(void *)&this[1].__mut_.__m_.__opaque[48] = 0;
  this[1].__gate1_.__cv_.__sig = 850045863;
  *(void *)&this[1].__state_ = 0;
  this[2].__mut_.__m_.__sig = 0;
  *(_OWORD *)this[1].__gate1_.__cv_.__opaque = 0u;
  *(_OWORD *)&this[1].__gate1_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this[1].__gate1_.__cv_.__opaque[32] = 0u;
  *(_OWORD *)this[1].__gate2_.__cv_.__opaque = 0u;
  *(_OWORD *)&this[1].__gate2_.__cv_.__opaque[16] = 0u;
  *(_DWORD *)&this[1].__gate2_.__cv_.__opaque[32] = 0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v2);
  *(void *)this[2].__mut_.__m_.__opaque = default_resource;
  *(void *)&this[2].__mut_.__m_.__opaque[8] = 0;
  uint64_t v4 = (std::pmr *)std::pmr::get_default_resource(default_resource);
  *(void *)&this[2].__mut_.__m_.__opaque[16] = v4;
  *(void *)&this[2].__mut_.__m_.__opaque[24] = 0;
  *(_DWORD *)&this[2].__mut_.__m_.__opaque[32] = 1065353216;
  id v5 = (vp *)std::pmr::get_default_resource(v4);
  *(void *)&this[2].__mut_.__m_.__opaque[40] = v5;
  *(void *)&this[2].__mut_.__m_.__opaque[48] = (char *)this + 448;
  *(_OWORD *)&this[2].__gate1_.__cv_.__sig = xmmword_1BB872720;
  log = vp::get_log(v5);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::Engine]", 25, __p);
    unint64_t v8 = v16;
    CFStringRef v9 = __p[1];
    CFIndex v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = v8;
      }
      else {
        unint64_t v11 = (unint64_t)v9;
      }
      unint64_t v12 = (void **)__p[0];
      if ((v16 & 0x80u) == 0) {
        unint64_t v12 = __p;
      }
      if (v11) {
        CFStringRef v13 = " ";
      }
      else {
        CFStringRef v13 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      CFPropertyListRef v18 = v12;
      __int16 v19 = 2080;
      uint64_t v20 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1BB2111F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::data_flow::Engine::~Engine(vp::vx::data_flow::Engine *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::Engine]", 25, __p);
    unint64_t v4 = v12;
    id v5 = __p[1];
    id v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      unint64_t v8 = (void **)__p[0];
      if ((v12 & 0x80u) == 0) {
        unint64_t v8 = __p;
      }
      if (v7) {
        CFStringRef v9 = " ";
      }
      else {
        CFStringRef v9 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v14 = v8;
      __int16 v15 = 2080;
      unsigned __int8 v16 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::~vector((void *)this + 48);
  std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::~__hash_table((uint64_t)this + 328);
  CFIndex v10 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 232));
  std::mutex::~mutex((std::mutex *)((char *)this + 168));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

uint64_t vp::vx::data_flow::Engine::create_state(std::__shared_mutex_base *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  v3[0] = &v4;
  v3[1] = a1;
  v3[2] = a2;
  vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(a1, (uint64_t)"create state", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::create_state(vp::vx::data_flow::Value &&)::$_0>, (uint64_t)v3);
  return v4;
}

uint64_t vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(std::__shared_mutex_base *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = a4;
  unint64_t v8 = a1;
  char v9 = 1;
  std::__shared_mutex_base::lock(a1);
  a3(&v7);
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
}

void sub_1BB211464(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int buf)
{
  if (a2)
  {
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&buf);
    uint64_t v23 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v23);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::Engine]", 25, &__p);
      CFDictionaryRef v26 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }
      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB211430);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::vx::data_flow::Engine::create_state(std::__shared_mutex_base *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  v4[0] = &v5;
  v4[1] = a1;
  void v4[2] = a2;
  void v4[3] = a3;
  vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(a1, (uint64_t)"create state", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::create_state(std::function<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)> &&,std::span<unsigned int,18446744073709551615ul> const&)::$_0>, (uint64_t)v4);
  return v5;
}

uint64_t vp::vx::data_flow::Engine::find_and_retain_state(std::__shared_mutex_base *this, int a2)
{
  int v5 = a2;
  unsigned __int8 v4 = 0;
  v3[0] = this;
  v3[1] = &v5;
  v3[2] = &v4;
  vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"find and retain state", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::find_and_retain_state::$_0>, (uint64_t)v3);
  return v4;
}

uint64_t vp::vx::data_flow::Engine::retain_state(std::__shared_mutex_base *this, int a2)
{
  int v4 = a2;
  v3[0] = this;
  v3[1] = &v4;
  return vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"retain state", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::retain_state::$_0>, (uint64_t)v3);
}

uint64_t vp::vx::data_flow::Engine::release_state(std::__shared_mutex_base *this, int a2)
{
  int v4 = a2;
  v3[0] = this;
  v3[1] = &v4;
  return vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"release state", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::release_state::$_0>, (uint64_t)v3);
}

uint64_t vp::vx::data_flow::Engine::auto_release_state(std::__shared_mutex_base *this, int a2)
{
  int v4 = a2;
  v3[0] = this;
  v3[1] = &v4;
  return vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"auto-release state", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::auto_release_state::$_0>, (uint64_t)v3);
}

uint64_t vp::vx::data_flow::Engine::get_state_value(std::__shared_mutex_base *this, int a2, vp::vx::data_flow::Value *a3)
{
  int v5 = a2;
  v4[0] = this;
  v4[1] = &v5;
  void v4[2] = a3;
  return vp::vx::data_flow::Engine::do_with_shared_state_lock(this, (uint64_t)"get state value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::get_state_value(unsigned int,vp::vx::data_flow::Value &)::$_0>, (uint64_t)v4);
}

uint64_t vp::vx::data_flow::Engine::do_with_shared_state_lock(std::__shared_mutex_base *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = a4;
  unint64_t v8 = a1;
  char v9 = 1;
  std::__shared_mutex_base::lock_shared(a1);
  a3(&v7);
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v8);
}

void sub_1BB211834(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int buf)
{
  if (a2)
  {
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
    unsigned int v25 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v25);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::Engine]", 25, &__p);
      uint64_t v28 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a11);
      }
      if (a21 < 0) {
        operator delete(__p);
      }
    }
    std::current_exception();
    v29.__ptr_ = &a10;
    std::rethrow_exception(v29);
    __break(1u);
    JUMPOUT(0x1BB211998);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::vx::data_flow::Engine::get_state_value(std::__shared_mutex_base *this, int a2, int a3, vp::vx::data_flow::Value *a4)
{
  int v6 = a3;
  int v7 = a2;
  v5[0] = this;
  v5[1] = &v7;
  _OWORD v5[2] = &v6;
  void v5[3] = a4;
  return vp::vx::data_flow::Engine::do_with_shared_state_lock(this, (uint64_t)"get state value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::get_state_value(unsigned int,unsigned int,vp::vx::data_flow::Value &)::$_0>, (uint64_t)v5);
}

uint64_t vp::vx::data_flow::Engine::has_state_value(std::__shared_mutex_base *this, int a2, int a3)
{
  int v6 = a3;
  int v7 = a2;
  unsigned __int8 v5 = 0;
  v4[0] = &v5;
  v4[1] = this;
  void v4[2] = &v7;
  void v4[3] = &v6;
  vp::vx::data_flow::Engine::do_with_shared_state_lock(this, (uint64_t)"get state value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::has_state_value(unsigned int,unsigned int)::$_0>, (uint64_t)v4);
  return v5;
}

void vp::vx::data_flow::Engine::set_state_value(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a2;
  v3[0] = a1;
  v3[1] = &v4;
  void v3[2] = a3;
  vp::vx::data_flow::Engine::do_with_state_manager_lock(a1, (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::set_state_value(unsigned int,vp::vx::data_flow::Value &&)::$_0>, (uint64_t)v3);
}

void vp::vx::data_flow::Engine::do_with_state_manager_lock(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  unsigned __int8 v5 = a2;
  uint64_t v6 = a3;
  int v4 = (std::mutex *)(a1 + 232);
  std::mutex::lock((std::mutex *)(a1 + 232));
  a2(&v6);
  std::mutex::unlock(v4);
}

void sub_1BB211B20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  __cxa_begin_catch(a1);
  std::current_exception();
  v12.__ptr_ = &a10;
  std::rethrow_exception(v12);
  __break(1u);
}

void sub_1BB211B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t vp::vx::data_flow::Engine::set_state_value(std::__shared_mutex_base *a1, int a2, int a3, uint64_t a4)
{
  int v6 = a3;
  int v7 = a2;
  v5[0] = a1;
  v5[1] = &v7;
  _OWORD v5[2] = &v6;
  void v5[3] = a4;
  return vp::vx::data_flow::Engine::do_with_unique_state_lock(a1, (uint64_t)"set state value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::set_state_value(unsigned int,unsigned int,vp::vx::data_flow::Value &&)::$_0>, (uint64_t)v5);
}

uint64_t vp::vx::data_flow::Engine::do_with_unique_state_lock(std::__shared_mutex_base *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v6 = a3;
  uint64_t v7 = a4;
  unint64_t v8 = a1;
  char v9 = 1;
  std::__shared_mutex_base::lock(a1);
  a3(&v7);
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
}

void sub_1BB211C50(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int buf)
{
  if (a2)
  {
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&buf);
    unsigned int v25 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v25);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::Engine]", 25, &__p);
      uint64_t v28 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a11);
      }
      if (a21 < 0) {
        operator delete(__p);
      }
    }
    std::current_exception();
    v29.__ptr_ = &a10;
    std::rethrow_exception(v29);
    __break(1u);
    JUMPOUT(0x1BB211DB4);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::vx::data_flow::Engine::create_state_transaction(std::__shared_mutex_base *this)
{
  unsigned int v3 = 0;
  v2[0] = &v3;
  v2[1] = this;
  vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"create state transaction", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::create_state_transaction(void)::$_0>, (uint64_t)v2);
  return v3;
}

uint64_t vp::vx::data_flow::Engine::release_state_transaction(std::__shared_mutex_base *this, int a2)
{
  int v4 = a2;
  v3[0] = this;
  v3[1] = &v4;
  return vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"release state transaction", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::release_state_transaction::$_0>, (uint64_t)v3);
}

void vp::vx::data_flow::Engine::commit_state_transaction(vp::vx::data_flow::Engine *this, int a2)
{
  int v3 = a2;
  v2[0] = this;
  v2[1] = &v3;
  vp::vx::data_flow::Engine::do_with_state_manager_lock((uint64_t)this, (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::commit_state_transaction::$_0>, (uint64_t)v2);
}

uint64_t vp::vx::data_flow::Engine::register_listener(std::__shared_mutex_base *a1, int a2, uint64_t a3, char a4)
{
  int v8 = a2;
  char v7 = a4;
  unsigned int v6 = 0;
  v5[0] = &v7;
  v5[1] = a1;
  _OWORD v5[2] = &v8;
  void v5[3] = a3;
  void v5[4] = &v6;
  vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(a1, (uint64_t)"register listener", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::register_listener(unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)> &&,BOOL)::$_0>, (uint64_t)v5);
  return v6;
}

uint64_t vp::vx::data_flow::Engine::unregister_listener(std::__shared_mutex_base *this, int a2, int a3)
{
  int v5 = a3;
  int v6 = a2;
  v4[0] = this;
  v4[1] = &v6;
  void v4[2] = &v5;
  return vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept(this, (uint64_t)"unregister listener", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::unregister_listener(unsigned int,unsigned int)::$_0>, (uint64_t)v4);
}

void vp::vx::data_flow::Engine::set_state_manager_delegate(uint64_t a1, long long *a2)
{
  uint64_t v2 = (_OWORD *)(a1 + 296);
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 304);
  _OWORD *v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void vp::vx::data_flow::Engine::do_commit_state_transaction(vp::vx::data_flow::Engine *this, int a2)
{
  int v29 = a2;
  std::string __p = 0;
  long long v27 = 0;
  uint64_t v28 = 0;
  long long v3 = (char *)this + 384;
  memset(v25, 0, sizeof(v25));
  uint64_t v4 = boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_subscript((char *)this + 384, &v29);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5)
  {
    uint64_t v8 = v6 + 32 * v5;
    do
    {
      if (!v6) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      long long v30 = (_DWORD *)v6;
      char v9 = (vp::vx::data_flow::Value *)(std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 328, (unsigned int *)v6, (uint64_t)&std::piecewise_construct, &v30)+ 136);
      if ((vp::vx::data_flow::Value::compare_value((uint64_t)v9, v6 + 8) & 1) == 0)
      {
        vp::vx::data_flow::Value::operator=(v9, (uint64_t *)(v6 + 8));
        uint64_t v10 = v27;
        if (v27 >= v28)
        {
          std::exception_ptr v12 = (char *)__p;
          uint64_t v13 = (v27 - (unsigned char *)__p) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v28 - (unsigned char *)__p;
          if ((v28 - (unsigned char *)__p) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v28, v16);
            std::exception_ptr v12 = (char *)__p;
            uint64_t v10 = v27;
          }
          else
          {
            uint64_t v17 = 0;
          }
          CFPropertyListRef v18 = &v17[4 * v13];
          *(_DWORD *)CFPropertyListRef v18 = *(_DWORD *)v6;
          unint64_t v11 = v18 + 4;
          while (v10 != v12)
          {
            int v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          std::string __p = v18;
          long long v27 = v11;
          uint64_t v28 = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)long long v27 = *(_DWORD *)v6;
          unint64_t v11 = v10 + 4;
        }
        long long v27 = v11;
        std::deque<unsigned int>::push_back(v25, (_DWORD *)v6);
      }
      v6 += 32;
    }
    while (v6 != v8);
  }
  uint64_t v20 = boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_subscript(v3, &v29);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 + 24);
  if (v22)
  {
    uint64_t v23 = (vp::vx::data_flow::Value *)(*(void *)(v20 + 16) + 8);
    do
    {
      --v22;
      vp::vx::data_flow::Value::~Value(v23);
      uint64_t v23 = (vp::vx::data_flow::Value *)(v24 + 32);
    }
    while (v22);
  }
  *(void *)(v21 + 24) = 0;
  vp::vx::data_flow::Engine::do_update_downstream(this, (unsigned int **)&__p, v25);
  vp::vx::data_flow::Engine::do_notify_listeners((uint64_t)this, v25);
  std::deque<unsigned int>::~deque[abi:ne180100](v25);
  if (__p)
  {
    long long v27 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1BB212210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void vp::vx::data_flow::Engine::do_update_downstream(_DWORD *a1, unsigned int **a2, void *a3)
{
  CFPropertyListRef v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = (uint64_t *)&v18;
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  v14[0] = a1;
  v14[1] = &v17;
  long long v3 = *a2;
  uint64_t v4 = a2[1];
  v12[0] = a1;
  v12[1] = &v17;
  if (v3 != v4)
  {
    do
      vp::vx::data_flow::Engine::do_update_downstream(std::vector<unsigned int> const&,std::queue<unsigned int> &)::$_0::operator()(v12, *v3++);
    while (v3 != v4);
    while (v19)
    {
      BOOL v7 = v17;
      while (v7[10])
      {
        unsigned int v13 = 0;
        uint64_t v8 = (unsigned int *)(*(void *)(v7[6] + (((unint64_t)v7[9] >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v7[9] & 0x3FF));
        unsigned int v13 = *v8;
        if (std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::find<vp::vx::io::Object_ID<vp::vx::io::Node>>(v15, v8))
        {
          goto LABEL_10;
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v15, &v13, &v13);
        v12[0] = &v13;
        char v9 = (std::pmr *)std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 82), &v13, (uint64_t)&std::piecewise_construct, v12);
        uint64_t default_resource = std::pmr::get_default_resource(v9);
        vp::vx::data_flow::Value::Value(v12, default_resource);
        vp::vx::data_flow::Engine::do_update_value((vp::vx::data_flow::Engine *)a1, v13, (vp::vx::data_flow::Value *)v12);
        unint64_t v11 = (std::pmr *)((char *)v9 + 136);
        if (vp::vx::data_flow::Value::compare_value((uint64_t)v11, (uint64_t)v12))
        {
          vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v12);
        }
        else
        {
          vp::vx::data_flow::Value::operator=(v11, (uint64_t *)v12);
          std::deque<unsigned int>::push_back(a3, &v13);
          vp::vx::data_flow::Engine::do_update_downstream(std::vector<unsigned int> const&,std::queue<unsigned int> &)::$_0::operator()(v14, v13);
          vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v12);
LABEL_10:
          *(int64x2_t *)(v7 + 9) = vaddq_s64(*(int64x2_t *)(v7 + 9), (int64x2_t)xmmword_1BB872730);
          std::deque<unsigned int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(v7 + 5), 1);
        }
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(&v17, v7);
      std::deque<unsigned int>::~deque[abi:ne180100](v7 + 5);
      operator delete(v7);
    }
  }
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)v15);
  std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::destroy((uint64_t)&v17, v18);
}

void sub_1BB212434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)va);
  std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::destroy(v9 - 96, *(void **)(v9 - 88));
  _Unwind_Resume(a1);
}

uint64_t vp::vx::data_flow::Engine::do_notify_listeners(uint64_t result, int64x2_t *a2)
{
  if (a2[2].i64[1])
  {
    uint64_t v3 = result + 328;
    do
    {
      unint64_t v4 = a2[2].u64[0];
      uint64_t v5 = *(void *)(a2->i64[1] + ((v4 >> 7) & 0x1FFFFFFFFFFFFF8));
      unsigned int v12 = 0;
      unsigned int v12 = *(_DWORD *)(v5 + 4 * (v4 & 0x3FF));
      unsigned int v13 = (int *)&v12;
      uint64_t v6 = (void *)std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v12, (uint64_t)&std::piecewise_construct, &v13);
      if (v6[19])
      {
        uint64_t v7 = v6[37];
        uint64_t v8 = v6[38];
        if (v7) {
          BOOL v9 = 1;
        }
        else {
          BOOL v9 = v8 == 0;
        }
        if (!v9) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        if (v8)
        {
          uint64_t v10 = v7 + 40 * v8;
          do
          {
            if (!v7) {
              __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
            }
            uint64_t v11 = v7 + 8;
            std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(v7 + 8, v12);
            uint64_t v7 = v11 + 32;
          }
          while (v11 + 32 != v10);
        }
      }
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_1BB872730);
      BOOL result = std::deque<unsigned int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
    }
    while (a2[2].i64[1]);
  }
  return result;
}

uint64_t vp::vx::data_flow::Engine::do_register_listener(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v7 = a2;
  unsigned int v6 = atomic_fetch_add((atomic_uint *volatile)(a1 + 320), 1u) + 1;
  v8[0] = &v7;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 328, &v7, (uint64_t)&std::piecewise_construct, v8);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::emplace_unique<unsigned int const&,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>((void *)(v4 + 288), &v6, a3, (uint64_t)v8);
  return v6;
}

BOOL vp::vx::data_flow::Engine::do_unregister_listener(vp::vx::data_flow::Engine *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5 = a3;
  unsigned int v6 = a2;
  unsigned int v7 = &v6;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 328, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::erase_unique(v3 + 288, &v5);
}

void vp::vx::data_flow::Engine::do_notify_state_manager_begin(vp::vx::data_flow::Engine *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 37);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void vp::vx::data_flow::Engine::do_notify_state_manager_end(vp::vx::data_flow::Engine *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 37);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void vp::vx::data_flow::Engine::do_link_states(vp::vx::data_flow::Engine *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5 = a3;
  unsigned int v6 = a2;
  v4[0] = &v6;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 328, &v6, (uint64_t)&std::piecewise_construct, v4);
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::insert_unique((void *)(v3 + 240), &v5, (uint64_t)v4);
}

BOOL vp::vx::data_flow::Engine::do_unlink_states(vp::vx::data_flow::Engine *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5 = a3;
  unsigned int v6 = a2;
  unsigned int v7 = &v6;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 328, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::erase_unique((void *)(v3 + 240), &v5);
}

uint64_t vp::vx::data_flow::Engine::do_create_state(uint64_t a1, uint64_t *a2)
{
  unsigned int v5 = 0;
  unsigned int v5 = atomic_fetch_add((atomic_uint *volatile)(a1 + 312), 1u) + 1;
  unsigned int v6 = &v5;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 328, &v5, (uint64_t)&std::piecewise_construct, &v6);
  vp::vx::data_flow::Value::operator=((vp::vx::data_flow::Value *)(v3 + 136), a2);
  *(void *)(v3 + 128) = *(_DWORD *)(v3 + 128) & 1 | 2u;
  return v5;
}

uint64_t vp::vx::data_flow::Engine::do_create_state(atomic_uint *a1, uint64_t a2, unsigned int **a3)
{
  unsigned int v23 = 0;
  unsigned int v23 = atomic_fetch_add(a1 + 78, 1u) + 1;
  uint64_t v6 = (uint64_t)(a1 + 82);
  unsigned int v25 = &v23;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 82), &v23, (uint64_t)&std::piecewise_construct, &v25);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::operator=[abi:ne180100]((void *)(v7 + 160), a2);
  *(void *)(v7 + 128) = *(_DWORD *)(v7 + 128) & 1 | 2u;
  unint64_t v9 = (unint64_t)a3[1];
  if (*(void *)(v7 + 216) < v9)
  {
    if (v9 >> 62) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    }
    uint64_t v10 = (char *)std::pmr::polymorphic_allocator<vp::vx::Chat_Flavor>::allocate[abi:ne180100](v7 + 192, (unint64_t)a3[1]);
    boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,boost::move_iterator<unsigned int *>,unsigned int *>>((void *)(v7 + 192), v10, v9, (char *)(*(void *)(v7 + 200) + 4 * *(void *)(v7 + 208)), 0, 0);
    unint64_t v9 = (unint64_t)a3[1];
  }
  if (v9)
  {
    uint64_t v11 = *a3;
    uint64_t v12 = 4 * v9;
    do
    {
      unsigned int v13 = *v11;
      unsigned int v24 = *v11;
      uint64_t v14 = *(void *)(v7 + 208);
      uint64_t v15 = (char *)(*(void *)(v7 + 200) + 4 * v14);
      if (v14 == *(void *)(v7 + 216))
      {
        boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,unsigned int *,unsigned int const&>>((void *)(v7 + 192), v15, (const char *)1, &v24, &v25);
        if (!v25) {
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        }
      }
      else
      {
        *(_DWORD *)uint64_t v15 = v13;
        *(void *)(v7 + 208) = v14 + 1;
      }
      unsigned int v25 = &v24;
      unsigned int v16 = *(_DWORD *)(std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v24, (uint64_t)&std::piecewise_construct, &v25)+ 132);
      if (v16 >= *(_DWORD *)(v7 + 132)) {
        *(_DWORD *)(v7 + 13boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v16 + 1;
      }
      ++v11;
      v12 -= 4;
    }
    while (v12);
    uint64_t v17 = a3[1];
    if (v17)
    {
      CFPropertyListRef v18 = *a3;
      uint64_t v19 = 4 * (void)v17;
      do
      {
        unsigned int v20 = *v18++;
        unsigned int v24 = v20;
        unsigned int v25 = &v24;
        uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v24, (uint64_t)&std::piecewise_construct, &v25);
        *(_DWORD *)(v21 + 128) += 2;
        vp::vx::data_flow::Engine::do_link_states((vp::vx::data_flow::Engine *)a1, v20, v23);
        v19 -= 4;
      }
      while (v19);
    }
  }
  return v23;
}

uint64_t *vp::vx::data_flow::Engine::do_release_state(vp::vx::data_flow::Engine *this, unsigned int a2)
{
  unsigned int v11 = a2;
  uint64_t v3 = (void *)((char *)this + 328);
  BOOL result = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>((void *)this + 41, &v11);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  signed int v5 = (result[16] & 0xFFFFFFFE) - 2;
  *((_DWORD *)result + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v5 & 0xFFFFFFFE | result[16] & 1;
  if (v5 <= 1)
  {
    uint64_t v7 = (unsigned int *)result[25];
    uint64_t v6 = result[26];
    if (v7) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v6 == 0;
    }
    if (!v8) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if (v6)
    {
      uint64_t v9 = 4 * v6;
      do
      {
        if (!v7) {
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        }
        unsigned int v10 = *v7++;
        vp::vx::data_flow::Engine::do_unlink_states(this, v10, v11);
        vp::vx::data_flow::Engine::do_release_state(this, v10);
        v9 -= 4;
      }
      while (v9);
    }
    return std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__erase_unique<unsigned int>(v3, &v11);
  }
  return result;
}

uint64_t *vp::vx::data_flow::Engine::do_auto_release_state(vp::vx::data_flow::Engine *this, unsigned int a2)
{
  unsigned int v4 = a2;
  BOOL result = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>((void *)this + 41, &v4);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v3 = *((_DWORD *)result + 32);
  if ((v3 & 1) == 0) {
    *((_DWORD *)result + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = (v3 | 1) + 2;
  }
  return result;
}

void vp::vx::data_flow::Engine::do_get_state_value(vp::vx::data_flow::Engine *this, unsigned int a2, vp::vx::data_flow::Value *a3)
{
  unsigned int v7 = a2;
  signed int v5 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>((void *)this + 41, &v7);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = (const vp::vx::data_flow::Value *)(v5 + 17);
  if (v5[19])
  {
    vp::vx::data_flow::Value::operator=(a3, v6);
  }
  else
  {
    std::mutex::lock((std::mutex *)((char *)this + 168));
    vp::vx::data_flow::Engine::do_update_value(this, v7, v6);
    vp::vx::data_flow::Value::operator=(a3, v6);
    std::mutex::unlock((std::mutex *)((char *)this + 168));
  }
}

void sub_1BB212D24(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::data_flow::Engine::do_update_value(vp::vx::data_flow::Engine *this, unsigned int a2, vp::vx::data_flow::Value *a3)
{
  v19[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  unsigned int v18 = a2;
  signed int v5 = (char *)this + 328;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>((void *)this + 41, &v18);
  unsigned int v7 = v6;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v8 = v6[26];
  MEMORY[0x1F4188790](v6);
  unsigned int v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v9 >= 0x200) {
    size_t v11 = 512;
  }
  else {
    size_t v11 = v9;
  }
  bzero(&v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v11);
  if (v8)
  {
    unint64_t v12 = 0;
    do
    {
      unsigned int v17 = 0;
      unsigned int v17 = *(_DWORD *)(v7[25] + 4 * v12);
      v19[0] = &v17;
      uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v5, &v17, (uint64_t)&std::piecewise_construct, v19);
      uint64_t v14 = (vp::vx::data_flow::Value *)(v13 + 136);
      if (!*(void *)(v13 + 152)) {
        vp::vx::data_flow::Engine::do_update_value(this, v17, v14);
      }
      *(void *)&v10[8 * v12++] = v14;
    }
    while (v12 < v7[26]);
  }
  return std::function<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::operator()((uint64_t)(v7 + 20), (uint64_t)v10, (uint64_t)a3);
}

vp::vx::data_flow::Value *vp::vx::data_flow::Engine::do_get_state_value(vp::vx::data_flow::Engine *this, unsigned int a2, unsigned int a3, vp::vx::data_flow::Value *a4)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  signed int v5 = boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::at((uint64_t)this + 384, &v8);
  uint64_t v6 = boost::container::flat_map<unsigned int,vp::vx::data_flow::Value,std::less<unsigned int>,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Value>>>::at((uint64_t)(v5 + 2), &v9);
  return vp::vx::data_flow::Value::operator=(a4, (const vp::vx::data_flow::Value *)v6);
}

unsigned int *boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::at(uint64_t a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::find(a1, a2, &v8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v8 == (unsigned int *)(v4 + (v5 << 7))) {
    boost::container::throw_length_error((boost::container *)"flat_map::at key not found", v3);
  }
  return v8 + 16;
}

unsigned int *boost::container::flat_map<unsigned int,vp::vx::data_flow::Value,std::less<unsigned int>,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Value>>>::at(uint64_t a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::find(a1, a2, &v8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v8 == (unsigned int *)(v4 + 32 * v5)) {
    boost::container::throw_length_error((boost::container *)"flat_map::at key not found", v3);
  }
  return v8 + 2;
}

BOOL vp::vx::data_flow::Engine::do_check_state_value(vp::vx::data_flow::Engine *this, unsigned int a2, unsigned int a3)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  int v3 = boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::at((uint64_t)this + 384, &v8);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::find((uint64_t)(v3 + 2), &v9, &v10);
  uint64_t v4 = *((void *)v3 + 2);
  uint64_t v5 = *((void *)v3 + 3);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  return v10 != (unsigned int *)(v4 + 32 * v5);
}

void vp::vx::data_flow::Engine::do_set_state_value(_DWORD *a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v12 = a2;
  std::string __p = 0;
  unsigned int v10 = 0;
  size_t v11 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v13 = &v12;
  uint64_t v5 = (vp::vx::data_flow::Value *)(std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 82), &v12, (uint64_t)&std::piecewise_construct, &v13)+ 136);
  if ((vp::vx::data_flow::Value::compare_value((uint64_t)v5, (uint64_t)a3) & 1) == 0)
  {
    vp::vx::data_flow::Value::operator=(v5, a3);
    BOOL v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v11, 1uLL);
    *BOOL v6 = v12;
    std::string __p = v6;
    size_t v11 = &v6[v7];
    unsigned int v10 = v6 + 1;
    std::deque<unsigned int>::push_back(v8, &v12);
  }
  vp::vx::data_flow::Engine::do_update_downstream(a1, (unsigned int **)&__p, v8);
  vp::vx::data_flow::Engine::do_notify_listeners((uint64_t)a1, v8);
  std::deque<unsigned int>::~deque[abi:ne180100](v8);
  if (__p)
  {
    unsigned int v10 = __p;
    operator delete(__p);
  }
}

void sub_1BB2131B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void vp::vx::data_flow::Engine::do_set_state_value(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  int v6 = a3;
  unsigned int v7 = a2;
  uint64_t v5 = boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_subscript(a1 + 384, &v6);
  unsigned int v8 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::insert_or_assign<unsigned int const&,vp::vx::data_flow::Value>((std::pmr *)(v5 + 8), &v8, &v7, a4, (uint64_t)v9);
}

unsigned int *vp::vx::data_flow::Engine::do_release_state_transaction(vp::vx::data_flow::Engine *this, unsigned int a2)
{
  unsigned int v5 = a2;
  uint64_t v2 = (char *)this + 384;
  BOOL result = (unsigned int *)boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_subscript((char *)this + 384, &v5);
  signed int v4 = (*result & 0xFFFFFFFE) - 2;
  unsigned int *result = v4 & 0xFFFFFFFE | *result & 1;
  if (v4 <= 1) {
    return (unsigned int *)boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::erase_unique((uint64_t)v2, &v5);
  }
  return result;
}

void vp::vx::data_flow::Engine::do_update_downstream(std::vector<unsigned int> const&,std::queue<unsigned int> &)::$_0::operator()(void *a1, unsigned int a2)
{
  unsigned int v14 = a2;
  uint64_t v3 = *a1 + 328;
  uint64_t v15 = &v14;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v14, (uint64_t)&std::piecewise_construct, &v15);
  int v6 = *(unsigned int **)(v4 + 248);
  uint64_t v5 = *(void *)(v4 + 256);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5)
  {
    uint64_t v8 = 4 * v5;
    do
    {
      unsigned int v13 = 0;
      if (!v6) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned int v9 = *v6++;
      unsigned int v12 = 0;
      unsigned int v13 = v9;
      uint64_t v15 = &v13;
      unsigned int v12 = *(_DWORD *)(std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v13, (uint64_t)&std::piecewise_construct, &v15)+ 132);
      unsigned int v10 = (uint64_t **)a1[1];
      uint64_t v15 = &v12;
      size_t v11 = std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, &v12, (uint64_t)&std::piecewise_construct, &v15);
      std::deque<unsigned int>::push_back(v11 + 5, &v13);
      v8 -= 4;
    }
    while (v8);
  }
}

uint64_t std::function<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = (void *)(a1[1] + 72);
    do
    {
      --v2;
      uint64_t v3 = boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(v3)
         + 16;
    }
    while (v2);
  }
  if (a1[3]) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  return a1;
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = (vp::vx::data_flow::Value *)(a1[1] + 8);
    do
    {
      --v2;
      vp::vx::data_flow::Value::~Value(v3);
      uint64_t v3 = (vp::vx::data_flow::Value *)(v4 + 32);
    }
    while (v2);
  }
  uint64_t v5 = a1[3];
  if (v5) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 32 * v5, 8);
  }
  return a1;
}

void *boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 8 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

uint64_t std::deque<unsigned int>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    BOOL v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  unsigned int v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unsigned int v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
    char v15 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::queue<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::queue<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::queue<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::queue<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::deque<unsigned int>::~deque[abi:ne180100](v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__deallocate_node(a1, *(void **)(a1 + 24));
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *> *> *>>::deallocate[abi:ne180100]((void *)(a1 + 16), v2, *(void *)(a1 + 8));
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (void *)(result + 32);
    do
    {
      int v4 = (void *)*v2;
      std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>::destroy[abi:ne180100]<std::pair<unsigned int const,vp::vx::data_flow::Engine::State_Entry>>((uint64_t)v3, (uint64_t)(v2 + 8));
      BOOL result = std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>>::deallocate[abi:ne180100](v3, (uint64_t)v2, 1);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 320 * a3, 64);
}

void std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>::destroy[abi:ne180100]<std::pair<unsigned int const,vp::vx::data_flow::Engine::State_Entry>>(uint64_t a1, uint64_t a2)
{
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::~vector((void *)(a2 + 224));
  if (*(void *)(a2 + 200)) {
    boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>::deallocate((void *)(a2 + 176), *(void **)(a2 + 184));
  }
  if (*(void *)(a2 + 152)) {
    boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>::deallocate((void *)(a2 + 128), *(void **)(a2 + 136));
  }
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100]((void *)(a2 + 96));

  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)(a2 + 72));
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = (void *)(a1[1] + 8);
    do
    {
      --v2;
      uint64_t v3 = std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v3)
         + 5;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 40 * v4, 8);
  }
  return a1;
}

void *boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *> *> *>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 8 * a3, 8);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::create_state(vp::vx::data_flow::Value &&)::$_0>(uint64_t a1)
{
  id v1 = *(_DWORD ***)a1;
  uint64_t result = vp::vx::data_flow::Engine::do_create_state(*(void *)(*(void *)a1 + 8), *(uint64_t **)(*(void *)a1 + 16));
  **id v1 = result;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::create_state(std::function<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)> &&,std::span<unsigned int,18446744073709551615ul> const&)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = vp::vx::data_flow::Engine::do_create_state(*(atomic_uint **)(*a1 + 8), *(void *)(v1 + 16), *(unsigned int ***)(v1 + 24));
  **(_DWORD **)uint64_t v1 = result;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::find_and_retain_state(unsigned int)::$_0>(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  LODWORD(v7) = *(_DWORD *)(*a1)[1];
  uint64_t v3 = v2 + 328;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>((void *)(v2 + 328), (unsigned int *)&v7);
  uint64_t v5 = result;
  if (result)
  {
    unsigned int v6 = *(_DWORD *)v1[1];
    BOOL v7 = &v6;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v6, (uint64_t)&std::piecewise_construct, &v7);
    *(_DWORD *)(result + 128) += 2;
  }
  *(unsigned char *)v1[2] = v5 != 0;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::retain_state(unsigned int)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  unsigned int v3 = *(_DWORD *)(*a1)[1];
  uint64_t v4 = &v3;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v1 + 328, &v3, (uint64_t)&std::piecewise_construct, &v4);
  *(_DWORD *)(result + 128) += 2;
  return result;
}

uint64_t *caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::release_state(unsigned int)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  return vp::vx::data_flow::Engine::do_release_state(**a1, *(_DWORD *)(*a1)[1]);
}

uint64_t *caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::auto_release_state(unsigned int)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  return vp::vx::data_flow::Engine::do_auto_release_state(**a1, *(_DWORD *)(*a1)[1]);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::get_state_value(unsigned int,vp::vx::data_flow::Value &)::$_0>(vp::vx::data_flow::Engine ***a1)
{
}

vp::vx::data_flow::Value *caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::get_state_value(unsigned int,unsigned int,vp::vx::data_flow::Value &)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  return vp::vx::data_flow::Engine::do_get_state_value(**a1, *(_DWORD *)(*a1)[1], *(_DWORD *)(*a1)[2], (*a1)[3]);
}

BOOL caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::has_state_value(unsigned int,unsigned int)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL result = vp::vx::data_flow::Engine::do_check_state_value(*(vp::vx::data_flow::Engine **)(*a1 + 8), **(_DWORD **)(v1 + 16), **(_DWORD **)(v1 + 24));
  **(unsigned char **)uint64_t v1 = result;
  return result;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::set_state_value(unsigned int,vp::vx::data_flow::Value &&)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  vp::vx::data_flow::Engine::do_notify_state_manager_begin(v2);
  unsigned int v3 = v2;
  long long v4 = *(_OWORD *)(v1 + 1);
  vp::vx::data_flow::Engine::do_with_unique_state_lock((std::__shared_mutex_base *)v2, (uint64_t)"set state value", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::set_state_value(unsigned int,vp::vx::data_flow::Value &&)::$_0::operator() const(void)::{lambda(void)#1}>, (uint64_t)&v3);
  vp::vx::data_flow::Engine::do_notify_state_manager_end(v2);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::set_state_value(unsigned int,vp::vx::data_flow::Value &&)::$_0::operator() const(void)::{lambda(void)#1}>(_DWORD ***a1)
{
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::set_state_value(unsigned int,unsigned int,vp::vx::data_flow::Value &&)::$_0>(uint64_t **a1)
{
}

int *caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::create_state_transaction(void)::$_0>(unsigned int ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  unsigned int v4 = 0;
  unsigned int v4 = atomic_fetch_add((atomic_uint *volatile)v2 + 79, 1u) + 1;
  BOOL result = (int *)boost::container::flat_map<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<std::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_subscript(v2 + 96, &v4);
  int *result = *result & 1 | 2;
  **uint64_t v1 = v4;
  return result;
}

unsigned int *caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::release_state_transaction(unsigned int)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  return vp::vx::data_flow::Engine::do_release_state_transaction(**a1, *(_DWORD *)(*a1)[1]);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::commit_state_transaction(unsigned int)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  vp::vx::data_flow::Engine::do_notify_state_manager_begin(v2);
  unsigned int v3 = v1[1];
  v4[0] = v2;
  v4[1] = v3;
  vp::vx::data_flow::Engine::do_with_unique_state_lock_noexcept((std::__shared_mutex_base *)v2, (uint64_t)"commit state transaction", (void (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::commit_state_transaction::$_0::operator() const(void)::{lambda(void)#1}>, (uint64_t)v4);
  vp::vx::data_flow::Engine::do_notify_state_manager_end(v2);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::commit_state_transaction(unsigned int)::$_0::operator() const(void)::{lambda(void)#1}>(vp::vx::data_flow::Engine ***a1)
{
}

void *caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::register_listener(unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)> &&,BOOL)::$_0>(std::pmr *a1)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(vp::vx::data_flow::Engine **)(*(void *)a1 + 8);
  if (***(unsigned char ***)a1)
  {
    uint64_t default_resource = std::pmr::get_default_resource(a1);
    vp::vx::data_flow::Value::Value(v6, default_resource);
    vp::vx::data_flow::Engine::do_get_state_value(v2, **(_DWORD **)(v1 + 16), (vp::vx::data_flow::Value *)v6);
    std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(*(void *)(v1 + 24), **(_DWORD **)(v1 + 16));
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  }
  unsigned int v4 = **(_DWORD **)(v1 + 16);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100]((uint64_t)v6, *(void *)(v1 + 24));
  **(_DWORD **)(v1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = vp::vx::data_flow::Engine::do_register_listener((uint64_t)v2, v4, (uint64_t)v6);
  return std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v6);
}

void sub_1BB213E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  *unsigned int v3 = 0;
  return a1;
}

BOOL caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::data_flow::Engine::unregister_listener(unsigned int,unsigned int)::$_0>(vp::vx::data_flow::Engine ***a1)
{
  return vp::vx::data_flow::Engine::do_unregister_listener(**a1, *(_DWORD *)(*a1)[1], *(_DWORD *)(*a1)[2]);
}

#error "1BB214010: call analysis failed (funcsize=100)"

void sub_1BB2140F4(_Unwind_Exception *a1)
{
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(v1);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(v2);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,false>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 7;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[32 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 32;
        *a1 = v8 + 32;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::emplace_hint_unique<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, uint64_t a5, unsigned int *a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = *MEMORY[0x1E4F143B8];
  int v23 = *(_DWORD *)(a3 + 64);
  a7 = *(_DWORD *)a3;
  a15 = v23;
  uint64_t v24 = *(void *)(a3 + 80);
  a16 = *(void *)(a3 + 72);
  a17 = v24;
  a18 = *(_OWORD *)(a3 + 88);
  *(void *)(a3 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  a6 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::insert_unique(a1, &a6, &a7, a4);
  return boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(&a16);
}

void sub_1BB2142A0(_Unwind_Exception *a1)
{
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::insert_unique(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + (v7 << 7)) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unsigned int v10 = *a2;
  unsigned int v11 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v10, a3, &v11))
  {
    unsigned int v12 = v11;
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::emplace<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>(a1, &v12, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = v11;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unsigned int v9 = &v4[32 * v5];
  unsigned int v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      unsigned int v18 = v9;
      uint64_t v19 = v10;
      unsigned int v16 = (uint64_t *)&v19;
      unsigned int v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  unsigned int v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 32);
  unsigned int v12 = v11 - 32;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    uint64_t v21 = v4;
    unsigned int v20 = v12;
    unsigned int v16 = (uint64_t *)&v21;
    unsigned int v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  unsigned int v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,true>,unsigned int>(&v12, &v11, a4, &v13);
  unsigned int v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 7;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[32 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 32;
        *a1 = v8 + 32;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::emplace<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>(void *a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > (unint64_t)v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v5 > v6 + (v8 << 7)) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(a1, (uint64_t)v5, (const char *)1, a3, a4);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
}

__n128 boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v7 = a1[1] + (v4 << 7);
  if ((_DWORD *)v7 == a2)
  {
    *a2 = *(_DWORD *)a4;
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(a4 + 64);
    *(void *)(v7 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(a4 + 72);
    *(void *)(v7 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(a4 + 80);
    __n128 result = *(__n128 *)(a4 + 88);
    *(__n128 *)(v7 + 88) = result;
    *(void *)(a4 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 96) = 0;
    ++a1[2];
  }
  else
  {
    unint64_t v8 = (_DWORD *)(v7 - 128);
    *(_DWORD *)uint64_t v7 = *(_DWORD *)(v7 - 128);
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(v7 - 64);
    uint64_t v9 = *(void *)(v7 - 48);
    *(void *)(v7 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(v7 - 56);
    *(void *)(v7 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v9;
    __n128 result = *(__n128 *)(v7 - 40);
    *(__n128 *)(v7 + 88) = result;
    *(void *)(v7 - 48) = 0;
    *(void *)(v7 - 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    *(void *)(v7 - 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    ++a1[2];
    if ((_DWORD *)(v7 - 128) != a2)
    {
      unsigned int v11 = (_DWORD *)(v7 - 128);
      do
      {
        int v12 = *(v11 - 32);
        v11 -= 32;
        *unint64_t v8 = v12;
        v8[16] = *(v8 - 16);
        boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_move_assign<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>((vp::vx::data_flow::Value *)(v8 + 18), (vp::vx::data_flow::Value *)(v8 - 14));
        unint64_t v8 = v11;
      }
      while (v11 != a2);
    }
    *a2 = *(_DWORD *)a4;
    a2[16] = *(_DWORD *)(a4 + 64);
    if ((_DWORD *)a4 != a2)
    {
      boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_move_assign<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>((vp::vx::data_flow::Value *)(a2 + 18), (vp::vx::data_flow::Value *)(a4 + 72));
    }
  }
  return result;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 57) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
}

std::pmr *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_move_assign<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>(vp::vx::data_flow::Value *a1, vp::vx::data_flow::Value *a2)
{
  if (a1 == a2 && *((void *)a2 + 2)) {
    boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::priv_move_assign<boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>>();
  }
  unint64_t v5 = (void *)((char *)a2 + 8);
  __n128 result = *(std::pmr **)a2;
  if (*(void *)a2 == *(void *)a1
    || (__n128 result = (std::pmr *)(*(uint64_t (**)(std::pmr *))(*(void *)result + 32))(result), result))
  {
    uint64_t v6 = *((void *)a1 + 2);
    if (v6)
    {
      __n128 result = (std::pmr *)(*((void *)a1 + 1) + 8);
      do
      {
        --v6;
        vp::vx::data_flow::Value::~Value(result);
        __n128 result = (std::pmr *)(v7 + 32);
      }
      while (v6);
    }
    *((void *)a1 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    uint64_t v8 = *((void *)a1 + 1);
    if (v8) {
      __n128 result = (std::pmr *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)a1 + 24))(*(void *)a1, v8, 32 * *((void *)a1 + 3), 8);
    }
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    void *v5 = 0;
    *((void *)a2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    *((void *)a2 + 3) = 0;
  }
  else
  {
    uint64_t v9 = (char *)*((void *)a2 + 1);
    uint64_t v10 = *((void *)a2 + 2);
    if (!v9 && v10) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    __n128 result = boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::assign<boost::move_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>>(a1, v9, (uint64_t)&v9[32 * v10]);
    uint64_t v11 = *((void *)a2 + 2);
    if (v11)
    {
      __n128 result = (std::pmr *)(*v5 + 8);
      do
      {
        --v11;
        vp::vx::data_flow::Value::~Value(result);
        __n128 result = (std::pmr *)(v12 + 32);
      }
      while (v11);
    }
    *((void *)a2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  }
  return result;
}

std::pmr *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::assign<boost::move_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>>(vp::vx::data_flow::Value *a1, char *a2, uint64_t a3)
{
  unint64_t v5 = (a3 - (uint64_t)a2) >> 5;
  unint64_t v6 = *((void *)a1 + 3);
  if (v5 <= v6)
  {
    __n128 result = boost::container::copy_assign_range_alloc_n<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::move_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>(a1, a2, (a3 - (uint64_t)a2) >> 5, *((_DWORD **)a1 + 1), *((void *)a1 + 2));
    *((void *)a1 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v5;
  }
  else
  {
    if (a3 - (void)a2 < 0) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    }
    uint64_t v8 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)a1, (a3 - (uint64_t)a2) >> 5);
    uint64_t v9 = *((void *)a1 + 1);
    if (v9)
    {
      uint64_t v10 = *((void *)a1 + 2);
      if (v10)
      {
        uint64_t v11 = (vp::vx::data_flow::Value *)(v9 + 8);
        do
        {
          --v10;
          vp::vx::data_flow::Value::~Value(v11);
          uint64_t v11 = (vp::vx::data_flow::Value *)(v12 + 32);
        }
        while (v10);
      }
      *((void *)a1 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
      (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)a1 + 24))(*(void *)a1, v9, 32 * v6, 8);
    }
    *((void *)a1 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    *((void *)a1 + 3) = v5;
    *((void *)a1 + 1) = v8;
    return boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>>(a1, (uint64_t)a2, a3);
  }
  return result;
}

std::pmr *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>>(std::pmr *result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = result;
  uint64_t v4 = *((void *)result + 2);
  uint64_t v5 = *((void *)result + 1) + 32 * v4;
  if (a2 == a3)
  {
    uint64_t v10 = *((void *)result + 1) + 32 * v4;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)(v5 + v8) = *(_DWORD *)(a2 + v8);
      uint64_t default_resource = std::pmr::get_default_resource(result);
      __n128 result = (std::pmr *)vp::vx::data_flow::Value::Value(v5 + v8 + 8, a2 + v8 + 8, default_resource);
      v8 += 32;
    }
    while (a2 + v8 != a3);
    uint64_t v4 = *((void *)v3 + 2);
    uint64_t v10 = v5 + v8;
  }
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v4 + ((v10 - v5) >> 5);
  return result;
}

void sub_1BB214C30(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v4 = (vp::vx::data_flow::Value *)(v3 + 32 * v2 + 8);
    do
    {
      vp::vx::data_flow::Value::~Value(v4);
      uint64_t v4 = (vp::vx::data_flow::Value *)(v5 + 32);
      v1 -= 32;
    }
    while (v1);
  }
  __cxa_rethrow();
}

void sub_1BB214C58(_Unwind_Exception *a1)
{
}

vp::vx::data_flow::Value *boost::container::copy_assign_range_alloc_n<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::move_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*>(vp::vx::data_flow::Value *result, _DWORD *a2, unint64_t a3, _DWORD *a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v18 = a3;
      do
      {
        --v18;
        uint64_t v19 = (uint64_t *)(v8 + 2);
        int v20 = *v8;
        v8 += 8;
        uint64_t v21 = (vp::vx::data_flow::Value *)(a4 + 2);
        *a4 = v20;
        a4 += 8;
        __n128 result = vp::vx::data_flow::Value::operator=(v21, v19);
      }
      while (v18);
    }
    if (a5 != a3)
    {
      unint64_t v22 = a3 - a5;
      __n128 result = (vp::vx::data_flow::Value *)(a4 + 2);
      do
      {
        vp::vx::data_flow::Value::~Value(result);
        __n128 result = (vp::vx::data_flow::Value *)(v23 + 32);
        BOOL v17 = __CFADD__(v22++, 1);
      }
      while (!v17);
    }
  }
  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = &a2[8 * a5];
      unint64_t v11 = a5;
      do
      {
        --v11;
        uint64_t v12 = (uint64_t *)(v10 + 2);
        int v13 = *v10;
        v10 += 8;
        uint64_t v14 = (vp::vx::data_flow::Value *)(a4 + 2);
        *a4 = v13;
        a4 += 8;
        __n128 result = vp::vx::data_flow::Value::operator=(v14, v12);
      }
      while (v11);
    }
    if (a3 != a5)
    {
      uint64_t v15 = 0;
      do
      {
        a4[v15] = v8[v15];
        uint64_t default_resource = std::pmr::get_default_resource(result);
        __n128 result = (vp::vx::data_flow::Value *)vp::vx::data_flow::Value::Value(&a4[v15 + 2], &v8[v15 + 2], default_resource);
        v15 += 8;
        BOOL v17 = __CFADD__(v9++, 1);
      }
      while (!v17);
    }
  }
  return result;
}

void sub_1BB214D68(void *a1)
{
  __cxa_begin_catch(a1);
  if (v2)
  {
    uint64_t v3 = (vp::vx::data_flow::Value *)(v1 + 8);
    do
    {
      vp::vx::data_flow::Value::~Value(v3);
      uint64_t v3 = (vp::vx::data_flow::Value *)(v4 + 32);
      v2 -= 32;
    }
    while (v2);
  }
  __cxa_rethrow();
}

void sub_1BB214D8C(_Unwind_Exception *a1)
{
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0x1FFFFFFFFFFFFFFLL;
  if (0x1FFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = &a2[v2];
  if (v8 < 0x1FFFFFFFFFFFFFFLL) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>((uint64_t)a1, v10, a4, v10 + (a1[2] << 7), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = (void *)(v10 + 72);
      do
      {
        --v11;
        uint64_t v12 = boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector(v12)
            + 16;
      }
      while (v11);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
}

void sub_1BB214EC8(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pmr::polymorphic_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
      *(void *)(v7 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(a2 + 72);
      *(void *)(v7 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 80);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(a2 + 88);
      *(void *)(a2 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      v7 += 128;
      a2 += 128;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  *(_DWORD *)(v7 + 64) = *(_DWORD *)(a7 + 64);
  *(void *)(v7 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(a7 + 72);
  *(void *)(v7 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(a7 + 80);
  __n128 result = *(__n128 *)(a7 + 88);
  *(__n128 *)(v7 + 88) = result;
  *(void *)(a7 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a7 + 88) = 0;
  *(void *)(a7 + 96) = 0;
  if (a3 != a4)
  {
    unint64_t v9 = (__n128 *)(v7 + 216);
    do
    {
      v9[-6].n128_u32[2] = *(_DWORD *)a3;
      v9[-2].n128_u32[2] = *(_DWORD *)(a3 + 64);
      v9[-1].n128_u64[0] = *(void *)(a3 + 72);
      v9[-1].n128_u64[1] = *(void *)(a3 + 80);
      __n128 result = *(__n128 *)(a3 + 88);
      *unint64_t v9 = result;
      v9 += 8;
      *(void *)(a3 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      a3 += 128;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(void *)i)
      {
        unint64_t v12 = *(void *)(i + 8);
        if (v12 == v7)
        {
          if (*(_DWORD *)(i + 64) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 320, 64);
  *(void *)uint64_t i = 0;
  *(void *)(i + 8) = v7;
  std::pair<unsigned int const,vp::vx::data_flow::Engine::State_Entry>::pair[abi:ne180100]<unsigned int const&>(i + 64, *a4);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v14 = *(float *)(a1 + 48);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__rehash<true>((uint64_t *)a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = i;
  *(void *)(*(void *)a1 + 8 * v4) = a1 + 24;
  if (*(void *)i)
  {
    unint64_t v20 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v20 >= v8) {
        v20 %= v8;
      }
    }
    else
    {
      v20 &= v8 - 1;
    }
    uint64_t v19 = (uint64_t *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_1BB2152E8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int const,vp::vx::data_flow::Engine::State_Entry>::pair[abi:ne180100]<unsigned int const&>(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  unint64_t v3 = (void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 19boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  uint64_t v4 = a1 + 208;
  *(_OWORD *)(a1 + 16std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  uint64_t v5 = a1 + 160;
  uint64_t default_resource = std::pmr::get_default_resource((std::pmr *)a1);
  unint64_t v7 = (std::pmr *)vp::vx::data_flow::Value::Value(v3, default_resource);
  *(void *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  unint64_t v8 = (std::pmr *)std::pmr::get_default_resource(v7);
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 144) = xmmword_1BB872740;
  uint8x8_t v9 = (std::pmr *)std::pmr::get_default_resource(v8);
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 184) = v4;
  *(_OWORD *)(a1 + 19boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = xmmword_1BB872740;
  *(void *)(a1 + 224) = std::pmr::get_default_resource(v9);
  *(void *)(a1 + 23boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 24std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 248) = 0;
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__rehash<true>(uint64_t *result, size_t __n)
{
  uint64_t v2 = result;
  if (__n == 1)
  {
    unint64_t v3 = 2;
  }
  else
  {
    unint64_t v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      __n128 result = (uint64_t *)std::__next_prime(__n);
      unint64_t v3 = (unint64_t)result;
    }
  }
  int8x8_t v4 = (int8x8_t)v2[1];
  if (v3 > *(void *)&v4) {
    goto LABEL_16;
  }
  if (v3 < *(void *)&v4)
  {
    __n128 result = (uint64_t *)vcvtps_u32_f32((float)(unint64_t)v2[5] / *((float *)v2 + 12));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      __n128 result = (uint64_t *)std::__next_prime((size_t)result);
    }
    else
    {
      unint64_t v6 = (uint64_t *)(1 << -(char)__clz((unint64_t)result - 1));
      if ((unint64_t)result >= 2) {
        __n128 result = v6;
      }
    }
    if (v3 <= (unint64_t)result) {
      unint64_t v3 = (unint64_t)result;
    }
    if (v3 < *(void *)&v4)
    {
LABEL_16:
      return std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__do_rehash<true>(v2, v3);
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__do_rehash<true>(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    __n128 result = (uint64_t *)std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<vp::vx::Property_ID,void *> *> *>::allocate[abi:ne180100]((uint64_t)(result + 2), a2);
    uint64_t v4 = *v2;
    uint64_t *v2 = (uint64_t)result;
    if (v4) {
      __n128 result = (uint64_t *)std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *> *> *>>::deallocate[abi:ne180100](v2 + 2, v4, v2[1]);
    }
    uint64_t v5 = 0;
    v2[1] = a2;
    do
      *(void *)(*v2 + 8 * v5++) = 0;
    while (a2 != v5);
    unint64_t v6 = (void *)v2[3];
    if (v6)
    {
      unint64_t v7 = v6[1];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      *(void *)(*v2 + 8 * v7) = v2 + 3;
      uint64_t v10 = (void *)*v6;
      if (*v6)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= a2) {
              v11 %= a2;
            }
          }
          else
          {
            v11 &= a2 - 1;
          }
          if (v11 != v7)
          {
            if (!*(void *)(*v2 + 8 * v11))
            {
              *(void *)(*v2 + 8 * v11) = v6;
              goto LABEL_23;
            }
            *unint64_t v6 = *v10;
            *uint64_t v10 = **(void **)(*v2 + 8 * v11);
            **(void **)(*v2 + 8 * v11) = v10;
            uint64_t v10 = v6;
          }
          unint64_t v11 = v7;
LABEL_23:
          unint64_t v6 = v10;
          uint64_t v10 = (void *)*v10;
          unint64_t v7 = v11;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v9 = *result;
    std::pmr *result = 0;
    if (v9) {
      __n128 result = (uint64_t *)std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *> *> *>>::deallocate[abi:ne180100](result + 2, v9, result[1]);
    }
    v2[1] = 0;
  }
  return result;
}

void std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>::destroy[abi:ne180100]<std::pair<unsigned int const,vp::vx::data_flow::Engine::State_Entry>>(*(void *)a1, a2 + 64);
  }
  if (a2)
  {
    uint64_t v4 = *(void **)a1;
    std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>>::deallocate[abi:ne180100](v4, a2, 1);
  }
}

void std::deque<unsigned int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<unsigned int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1BB2159C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::emplace_unique<unsigned int const&,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *a2;
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::insert_unique(a1, &v7, a4);
  return std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v8);
}

void sub_1BB215AA4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v13 = 0;
  unint64_t v4 = (int *)a1[1];
  uint64_t v5 = a1[2];
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v14 = &v4[10 * v5];
  uint64_t result = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v15, (unsigned int **)&v14, a2, &v13);
  *(unsigned char *)(a3 + 8) = result;
  if (result)
  {
    uint64_t v15 = (int *)v13;
    unint64_t v10 = a1[1];
    if (v10 > (unint64_t)v13) {
      goto LABEL_15;
    }
    uint64_t v11 = a1[2];
    if (!v10 && v11) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if ((unint64_t)v13 > v10 + 40 * v11) {
LABEL_15:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
    uint64_t result = boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>(a1, &v15, (const char *)1, (int *)a2, &v14);
    uint64_t v12 = v14;
  }
  else
  {
    uint64_t v12 = (int *)v13;
    if (!a1[1] && v13) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,true>,unsigned int>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    unint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[10 * (v5 >> 1)];
      if (*v8 < v6)
      {
        unint64_t v4 = v8 + 10;
        *a1 = v8 + 10;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>@<X0>(void *a1@<X0>, int **a2@<X1>, const char *a3@<X2>, int *a4@<X3>, int **a5@<X8>)
{
  unint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  if (v7 < v6) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v11 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    uint64_t v16 = *a2;
    return boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>(a1, v16, a3, a4, a5);
  }
  else
  {
    if (v7 == v6) {
      boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
    }
    uint64_t v12 = a1[1];
    uint64_t v13 = (int *)(v12 + 40 * v6);
    if (v13 == v11)
    {
      *uint64_t v11 = *a4;
      uint64_t result = std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100](v12 + 40 * v6 + 8, (uint64_t)(a4 + 2));
      ++a1[2];
    }
    else
    {
      uint64_t v14 = (uint64_t)(v13 - 10);
      *uint64_t v13 = *(v13 - 10);
      std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100](v12 + 40 * v6 + 8, (uint64_t)(v13 - 8));
      ++a1[2];
      for (; (int *)v14 != v11; v14 -= 40)
        boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>::operator=(v14, (_DWORD *)(v14 - 40));
      uint64_t result = boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>::operator=((uint64_t)v11, a4);
    }
    *a5 = *a2;
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>@<X0>(void *a1@<X0>, int *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x666666666666667) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (_DWORD *)std::pmr::polymorphic_allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + a1[1] - v10;
  return result;
}

uint64_t boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>::operator=(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator=[abi:ne180100]((void *)(a1 + 8), (uint64_t)(a2 + 2));
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator=[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>(void *a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, _DWORD *a6)
{
  v15[0] = a2;
  v15[1] = a1;
  _OWORD v15[2] = a3;
  uint64_t v10 = (int *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>((uint64_t)a1, v10, a4, &v10[10 * a1[2]], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = v10 + 2;
      do
      {
        --v11;
        uint64_t v12 = std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v12)
            + 5;
      }
      while (v11);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 40 * a1[3], 8);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1BB2161A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v10 = a3;
  uint64_t v11 = a5;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    uint64_t v11 = a5;
    do
    {
      uint64_t v13 = (uint64_t)(v12 + 2);
      int v14 = *v12;
      v12 += 10;
      uint64_t v15 = (uint64_t)(v11 + 2);
      *uint64_t v11 = v14;
      v11 += 10;
      std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100](v15, v13);
    }
    while (v12 != v10);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *uint64_t v11 = *a7;
  uint64_t result = std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100]((uint64_t)(v11 + 2), (uint64_t)(a7 + 2));
  if (v10 != a4)
  {
    uint64_t result = (uint64_t)(v11 + 12);
    do
    {
      uint64_t v17 = (uint64_t)(v10 + 2);
      int v18 = *v10;
      v10 += 10;
      *(_DWORD *)(result - 8) = v18;
      uint64_t result = std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::__value_func[abi:ne180100](result, v17)+ 40;
    }
    while (v10 != a4);
  }
  return result;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 40 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

uint64_t std::deque<unsigned int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::erase_unique(uint64_t a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::find(a1, a2, &v10);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v6 = (unsigned int *)(v3 + 40 * v4);
  unint64_t v7 = v10;
  if (v10 != v6)
  {
    uint64_t v11 = v10;
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::erase(a1, (uint64_t *)&v11, &v9);
  }
  return v7 != v6;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 40 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,false>,unsigned int>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v9 + 40 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>*,false>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 - *a1) >> 3);
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[10 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 10;
        *a1 = v8 + 10;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>,vp::Allocator<boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>>,void>::erase@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 > *a2) {
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v9 = v5 + 40 * v7;
  if (v4 >= v9) {
LABEL_12:
  }
    boost::container::vector<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>,vp::Allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>,void>::erase();
  if (v4 + 40 != v9)
  {
    uint64_t v10 = *a2;
    do
    {
      boost::container::dtl::pair<unsigned int,std::function<void ()(unsigned int,vp::vx::data_flow::Value const&)>>::operator=(v10, (_DWORD *)(v10 + 40));
      uint64_t v11 = v10 + 80;
      v10 += 40;
    }
    while (v11 != v9);
  }
  uint64_t result = std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100]((void *)(v9 - 32));
  --*(void *)(a1 + 16);
  *a3 = v4;
  return result;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::insert_unique(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v11 = 0;
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  uint64_t v13 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)&v4[4 * v5];
  BOOL inserted = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, (unsigned int **)&v11);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    uint64_t v13 = v11;
    boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::emplace<unsigned int const&>(a1, &v13, a2, (char **)&v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = (unsigned int *)v11;
    if (!a1[1] && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,true>,unsigned int>(&v12, &v11, a4, &v13);
  unint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 2;
    unsigned int v6 = *a3;
    unint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[v5 >> 1];
      if (*v8 < v6)
      {
        unint64_t v4 = v8 + 1;
        *a1 = v8 + 1;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::emplace<unsigned int const&>(void *a1@<X0>, char **a2@<X1>, _DWORD *a3@<X2>, char **a4@<X8>)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_16;
  }
  unint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v9 = (char *)(v5 + 4 * v7);
  if (v4 > v9) {
LABEL_16:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v7) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v7)
  {
    uint64_t v14 = *a2;
    boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,unsigned int *,unsigned int const&>>(a1, v14, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v4)
    {
      *(_DWORD *)unint64_t v4 = *a3;
      a1[2] = v7 + 1;
    }
    else
    {
      *(_DWORD *)unint64_t v9 = *((_DWORD *)v9 - 1);
      a1[2] = v7 + 1;
      uint64_t v12 = v4;
      if (v9 - 4 != v4)
      {
        memmove(v4 + 4, v4, v9 - 4 - v4);
        uint64_t v12 = *a2;
      }
      *(_DWORD *)unint64_t v4 = *a3;
      unint64_t v4 = v12;
    }
    *a4 = v4;
  }
}

void boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,unsigned int *,unsigned int const&>>(void *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<vp::services::Control_Center::Chat_Flavor,vp::Allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 62) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (char *)std::pmr::polymorphic_allocator<vp::vx::Chat_Flavor>::allocate[abi:ne180100]((uint64_t)a1, v11);
  boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,unsigned int *,unsigned int const&>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[a1[1] - v10];
}

void boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,unsigned int *,unsigned int const&>>(void *a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = (char *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,vp::vx::Chat_Flavor*,vp::vx::Chat_Flavor*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,vp::vx::Chat_Flavor*,vp::vx::Chat_Flavor const&>>((int)a1, v10, __src, &v10[4 * a1[2]], __dst, a5, a6);
  if (v10) {
    boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v11 = a1[2] + a5;
  a1[1] = __dst;
  a1[2] = v11;
  a1[3] = a3;
}

void sub_1BB216BB4(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::erase_unique(void *a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::find((uint64_t)a1, a2, &v10);
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unsigned int v6 = (unsigned int *)(v3 + 4 * v4);
  unint64_t v7 = v10;
  if (v10 != v6)
  {
    uint64_t v11 = v10;
    boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::erase(a1, (unint64_t *)&v11, &v9);
  }
  return v7 != v6;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 4 * v5;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,false>,unsigned int>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v9 + 4 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,boost::container::small_vector<unsigned int,5ul,vp::Allocator<unsigned int>,void>>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,false>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 2;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      BOOL v8 = &v4[v5 >> 1];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 1;
        *a1 = v8 + 1;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void *boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::erase@<X0>(void *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *a2;
  unint64_t v4 = result[1];
  if (v4 > *a2) {
    goto LABEL_12;
  }
  unint64_t v5 = result;
  uint64_t v7 = result[2];
  if (v4) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v9 = v4 + 4 * v7;
  if (v3 >= v9) {
LABEL_12:
  }
    boost::container::vector<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>,vp::Allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>,void>::erase();
  if (v3 && v3 + 4 != v9)
  {
    uint64_t result = memmove((void *)v3, (const void *)(v3 + 4), v9 - (v3 + 4));
    uint64_t v7 = v5[2];
  }
  _OWORD v5[2] = v7 - 1;
  *a3 = v3;
  return result;
}

void *std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::operator=[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *boost::container::vector<unsigned int,boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>,boost::move_iterator<unsigned int *>,unsigned int *>>(void *result, char *__dst, uint64_t a3, char *__src, uint64_t a5, void *a6)
{
  uint64_t v11 = (uint64_t)result;
  uint64_t v12 = (char *)result[1];
  uint64_t v13 = result[2];
  if (v12) {
    BOOL v14 = __dst == 0;
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v15 = v14 || v12 == __src;
  uint64_t v16 = __dst;
  if (!v15)
  {
    uint64_t result = memmove(__dst, v12, __src - v12);
    uint64_t v16 = &__dst[__src - v12];
  }
  if (a5) {
    uint64_t result = memmove(v16, a6, 4 * a5);
  }
  if (__src)
  {
    uint64_t v17 = &v12[4 * v13];
    if (v17 != __src && v16 != 0) {
      uint64_t result = memmove(&v16[4 * a5], __src, v17 - __src);
    }
  }
  if (v12) {
    uint64_t result = boost::container::small_vector_allocator<unsigned int,vp::Allocator<void>,void>::deallocate((void *)v11, *(void **)(v11 + 8));
  }
  uint64_t v19 = *(void *)(v11 + 16) + a5;
  *(void *)(v11 + 8) = __dst;
  *(void *)(v11 + 16) = v19;
  *(void *)(v11 + 24) = a3;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unsigned int v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::remove(a1, a2, (uint64_t)&v5);
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3) {
    std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,vp::vx::data_flow::Engine::State_Entry>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 3) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[5];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 4;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + (v5 << 7);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,true>,unsigned int>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v9 + (v10 << 7));
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + (v5 << 7);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>*,false>,unsigned int>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v9 + (v10 << 7));
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,true>,unsigned int>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)(v9 + 32 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      unint64_t v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::insert_or_assign<unsigned int const&,vp::vx::data_flow::Value>(std::pmr *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 0;
  uint64_t v17 = 0;
  if (*a2)
  {
    uint64_t v16 = *a2;
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_insert_unique_prepare((uint64_t)a1, &v16, a3, &v17);
  }
  else
  {
    uint64_t v10 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v11 = *((void *)a1 + 2);
    uint64_t v19 = v10;
    if (v10) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v11 == 0;
    }
    if (!v12) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    int v18 = (unsigned int *)&v10[4 * v11];
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v19, &v18, a3, &v17);
  }
  *(unsigned char *)(a5 + 8) = inserted;
  if (inserted)
  {
    uint64_t v15 = (uint64_t *)v17;
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::emplace<unsigned int const&,vp::vx::data_flow::Value>(a1, &v15, a3, (uint64_t)a4, &v19);
    *(void *)a5 = v19;
  }
  else
  {
    uint64_t v13 = *((void *)a1 + 1);
    if (*((void *)a1 + 2) < (unint64_t)(((uint64_t)v17 - v13) >> 5)) {
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    }
    uint64_t v14 = v13 + 32 * (((uint64_t)v17 - v13) >> 5);
    *(void *)a5 = v14;
    vp::vx::data_flow::Value::operator=((vp::vx::data_flow::Value *)(v14 + 8), a4);
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = &v4[8 * v5];
  uint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      int v18 = v9;
      uint64_t v19 = v10;
      uint64_t v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  uint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 8);
  BOOL v12 = v11 - 8;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    uint64_t v21 = v4;
    int64_t v20 = v12;
    uint64_t v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::emplace<unsigned int const&,vp::vx::data_flow::Value>(std::pmr *a1@<X0>, uint64_t **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  BOOL v6 = *a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7 > (unint64_t)v6) {
    goto LABEL_11;
  }
  unint64_t v9 = *((void *)a1 + 2);
  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v6 > v7 + 32 * v9) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v11 = *((void *)a1 + 3);
  if (v11 < v9) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v11 == v9)
  {
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(a1, (uint64_t)v6, (const char *)1, a4, a3, a5);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(a1, v6, 1, a4, a3);
    *a5 = *a2;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  unint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,true>,unsigned int>(&v12, &v11, a4, &v13);
  unint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(std::pmr *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  v22[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a1 + 2);
  if (v5 == *((void *)a1 + 3)) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  BOOL v10 = (uint64_t *)(*((void *)a1 + 1) + 32 * v5);
  if (v10 == a2)
  {
    *(_DWORD *)a2 = *a5;
    uint64_t v19 = v10 + 1;
    uint64_t default_resource = std::pmr::get_default_resource(a1);
    vp::vx::data_flow::Value::Value(v19, a4, default_resource);
    ++*((void *)a1 + 2);
  }
  else
  {
    unint64_t v11 = v10 - 4;
    *(_DWORD *)BOOL v10 = *((_DWORD *)v10 - 8);
    uint64_t v12 = v10 + 1;
    unsigned int v13 = v10 - 3;
    uint64_t v14 = std::pmr::get_default_resource(a1);
    uint64_t v15 = (std::pmr *)vp::vx::data_flow::Value::Value(v12, v13, v14);
    ++*((void *)a1 + 2);
    if (v11 != a2)
    {
      uint64_t v16 = v11;
      do
      {
        int v17 = *((_DWORD *)v16 - 8);
        v16 -= 4;
        *(_DWORD *)unint64_t v11 = v17;
        uint64_t v15 = vp::vx::data_flow::Value::operator=((vp::vx::data_flow::Value *)(v11 + 1), v11 - 3);
        unint64_t v11 = v16;
      }
      while (v16 != a2);
    }
    int v21 = *a5;
    uint64_t v18 = std::pmr::get_default_resource(v15);
    vp::vx::data_flow::Value::Value(v22, a4, v18);
    *(_DWORD *)a2 = v21;
    vp::vx::data_flow::Value::operator=((vp::vx::data_flow::Value *)(a2 + 1), v22);
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v22);
  }
}

void sub_1BB217BA4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    vp::vx::data_flow::Value::~Value(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB217BC4(_Unwind_Exception *a1)
{
}

void sub_1BB217BD0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = *((void *)a1 + 1);
  unint64_t v13 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v13 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v14);
  }
  uint64_t v15 = v13;
  uint64_t v16 = (_DWORD *)std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)a1, v13);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(a1, v16, v15, a2, (uint64_t)a3, a4, a5);
  *a6 = *((void *)a1 + 1) + a2 - v12;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(std::pmr *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  v17[0] = a2;
  v17[1] = a1;
  void v17[2] = a3;
  uint64_t v11 = *((void *)a1 + 1);
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(a1, v11, a4, v11 + 32 * *((void *)a1 + 2), a2, a5, a6, a7);
  v17[0] = 0;
  if (v11)
  {
    uint64_t v12 = *((void *)a1 + 2);
    if (v12)
    {
      unint64_t v13 = (vp::vx::data_flow::Value *)(v11 + 8);
      do
      {
        --v12;
        vp::vx::data_flow::Value::~Value(v13);
        unint64_t v13 = (vp::vx::data_flow::Value *)(v14 + 32);
      }
      while (v12);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)a1 + 24))(*(void *)a1, *((void *)a1 + 1), 32 * *((void *)a1 + 3), 8);
  }
  uint64_t v15 = *((void *)a1 + 2) + a5;
  *((void *)a1 + 1) = a2;
  *((void *)a1 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v15;
  *((void *)a1 + 3) = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::~scoped_array_deallocator((uint64_t)v17);
}

void sub_1BB217D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

std::pmr *boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>*,unsigned int const&,vp::vx::data_flow::Value>>(std::pmr *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v14 = a5;
  if (a2 != a3)
  {
    uint64_t v16 = 0;
    do
    {
      a5[v16] = *(_DWORD *)(a2 + v16 * 4);
      uint64_t default_resource = std::pmr::get_default_resource(a1);
      a1 = (std::pmr *)vp::vx::data_flow::Value::Value(&a5[v16 + 2], a2 + v16 * 4 + 8, default_resource);
      v16 += 8;
    }
    while (a2 + v16 * 4 != a3);
    uint64_t v14 = &a5[v16];
  }
  if (a6 != 1) {
    __assert_rtn("priv_uninitialized_copy_some_and_update", "advanced_insert_int.hpp", 265, "n == 1");
  }
  *uint64_t v14 = *a8;
  uint64_t v18 = std::pmr::get_default_resource(a1);
  uint64_t result = (std::pmr *)vp::vx::data_flow::Value::Value(v14 + 2, a7, v18);
  if (a3 != a4)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    do
    {
      v14[v21 + 8] = *(_DWORD *)(a3 + v21 * 4);
      uint64_t v22 = std::pmr::get_default_resource(result);
      uint64_t result = (std::pmr *)vp::vx::data_flow::Value::Value(&v14[v21 + 10], a3 + v21 * 4 + 8, v22);
      v21 += 8;
      --v20;
    }
    while (a3 + v21 * 4 != a4);
  }
  return result;
}

void sub_1BB217EC8()
{
}

void sub_1BB217F28()
{
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 32 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::erase_unique(uint64_t a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,1ul,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>>,void>>::find(a1, a2, &v10);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v6 = (unsigned int *)(v3 + (v4 << 7));
  unint64_t v7 = v10;
  if (v10 != v6)
  {
    uint64_t v11 = v10;
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::erase(a1, (unint64_t *)&v11, &v9);
  }
  return v7 != v6;
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Engine::State_Transaction_Entry>,vp::Allocator<void>,void>,void>::erase@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 > *a2) {
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v5 && v7 != 0) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v9 = (_DWORD *)(v5 + (v7 << 7));
  if (v4 >= (unint64_t)v9) {
LABEL_12:
  }
    boost::container::vector<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>,vp::Allocator<boost::container::dtl::pair<std::__fs::filesystem::path,std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>>>,void>::erase();
  for (uint64_t i = (_DWORD *)(v4 + 128); i != v9; i += 32)
  {
    *(i - 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *i;
    *(i - 16) = i[16];
    boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::priv_move_assign<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>>((vp::vx::data_flow::Value *)(i - 14), (vp::vx::data_flow::Value *)(i + 18));
  }
  uint64_t result = boost::container::vector<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>,vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,void>::~vector((void *)v9 - 7);
  --*(void *)(a1 + 16);
  *a3 = v4;
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::queue<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::queue<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::queue<unsigned int>>>>::destroy(a1, a2[1]);
    std::deque<unsigned int>::~deque[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  BOOL v10 = operator new(0x18uLL);
  *BOOL v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *BOOL v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *BOOL v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1BB2184B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

uint64_t vp::vx::IO_Parameter_Setter_Delegate::IO_Parameter_Setter_Delegate(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 56) = &unk_1F1493718;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)unint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 64) = v6 + 24;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6;
  *(void *)a1 = &unk_1F14A0370;
  *(void *)(a1 + 56) = &unk_1F14A03C0;
  *(_DWORD *)(a1 + 8) = a2;
  vp::vx::data_flow::State<void>::State(a1 + 16, a3);
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0x7FC0000000000000;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 5boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v9))
  {
    uint64_t v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  return a1;
}

void vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate(vp::vx::IO_Parameter_Setter_Delegate *this)
{
  int v2 = *((_DWORD *)this + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)this + 16, v2);
    *((_DWORD *)this + 1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 16);
}

{
  uint64_t v1;
  std::__shared_weak_count *v2;

  vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate(this);
  *(void *)(v1 + 56) = &unk_1F1493718;
  int v2 = *(std::__shared_weak_count **)(v1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate(vp::vx::IO_Parameter_Setter_Delegate *this)
{
}

{
  uint64_t vars8;

  vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate((vp::vx::IO_Parameter_Setter_Delegate *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

_DWORD *vp::vx::IO_Parameter_Setter_Delegate::get_parameter_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    unint64_t v5 = operator new(4uLL);
    *a3 = v5;
    _DWORD *v5 = v4;
    uint64_t result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

std::__shared_mutex_base *vp::vx::IO_Parameter_Setter_Delegate::notify(std::__shared_mutex_base *result, int a2)
{
  int v2 = result;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    int v5 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v5)
    {
      uint64_t result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v5);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else if (!a2)
  {
    uint64_t v3 = *(unsigned int *)result->__mut_.__m_.__opaque;
    v6[0] = &unk_1F14A0438;
    v6[1] = result;
    void v6[2] = v3;
    uint64_t v6[3] = v6;
    std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)v6);
    unint64_t v9 = 0;
    int v4 = operator new(0x28uLL);
    *int v4 = &unk_1F1493DA8;
    std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v7);
    unint64_t v9 = v4;
    LODWORD(v4) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v8);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v8);
    std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v7);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v4;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v6);
  }
  return result;
}

void sub_1BB21890C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Parameter_Setter_Delegate::process(uint64_t a1, int a2, uint64_t a3, __n128 a4, __n128 a5)
{
  if (!a2)
  {
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    float v8 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 44)));
    a4.n128_f32[0] = v8;
    a5.n128_u32[0] = *(_DWORD *)(a1 + 48);
    if (!*(unsigned char *)(a1 + 52) || a5.n128_f32[0] != v8)
    {
      (*(void (**)(void *__return_ptr, uint64_t, void, __n128, __n128))(*(void *)a3 + 32))(v10, a3, *(unsigned int *)(a1 + 8), a4, a5);
      if (!v11) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v10);
      }
      *(float *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 5boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 1;
    }
  }
}

void *vp::vx::IO_Parameter_Setter_Delegate_Factory::IO_Parameter_Setter_Delegate_Factory(void *a1, uint64_t a2)
{
  a1[5] = &unk_1F1493718;
  int v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)int v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  a1[6] = v4 + 24;
  a1[7] = v4;
  *a1 = &unk_1F14A03E8;
  a1[1] = a2;
  a1[4] = 0;
  a1[5] = &unk_1F14A0418;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

double vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6 = a2;
  int v4 = boost::container::flat_map<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<std::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_subscript((void *)(a1 + 8), &v6);
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=((uint64_t)v4, a3).n128_u64[0];
  return result;
}

void vp::vx::IO_Parameter_Setter_Delegate_Factory::new_node_delegate(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v15[1] = a5;
  uint64_t v16 = a3;
  v15[0] = a4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if (v6)
  {
    (*(void (**)(int **__return_ptr))(*(void *)v6 + 16))(&v13);
    unint64_t v7 = v13;
    float v8 = v14;
    if (v13 != v14)
    {
      uint64_t v9 = a1 + 8;
      do
      {
        unsigned int v12 = *v7;
        unsigned int v19 = v12;
        uint64_t v10 = boost::container::flat_map<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<std::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::at(v9, &v19);
        vp::allocate_unique<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>(&v16, (int *)&v12, (uint64_t)v10, (uint64_t)v17);
        long long v11 = v17[0];
        *(void *)&v17[0] = 0;
        v18[0] = v11;
        v18[1] = v17[1];
        caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>)>::operator()(v15, (uint64_t *)v18);
        std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>::reset[abi:ne180100](v18, 0);
        std::unique_ptr<vp::vx::IO_Parameter_Setter_Delegate,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Delegate>>::reset[abi:ne180100]((vp::vx::IO_Parameter_Setter_Delegate **)v17, 0);
        ++v7;
      }
      while (v7 != v8);
      unint64_t v7 = v13;
    }
    if (v7)
    {
      BOOL v14 = v7;
      operator delete(v7);
    }
  }
}

void virtual thunk to'vp::vx::IO_Parameter_Setter_Delegate_Factory::~IO_Parameter_Setter_Delegate_Factory(vp::vx::IO_Parameter_Setter_Delegate_Factory *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector(v1 + 1);
  v1[5] = &unk_1F1493718;
  int v2 = (std::__shared_weak_count *)v1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector(v1 + 1);
  v1[5] = &unk_1F1493718;
  int v2 = (std::__shared_weak_count *)v1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<std::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::at(uint64_t a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::find(a1, a2, &v8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v8 == (unsigned int *)(v4 + 32 * v5)) {
    boost::container::throw_length_error((boost::container *)"flat_map::at key not found", v3);
  }
  return v8 + 2;
}

vp::vx::IO_Parameter_Setter_Delegate **vp::allocate_unique<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872090;
  BOOL v6 = (vp::vx::IO_Parameter_Setter_Delegate *)std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Parameter_Setter_Delegate,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Delegate>>::reset[abi:ne180100]((vp::vx::IO_Parameter_Setter_Delegate **)a4, v6);
}

void sub_1BB218E70(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Parameter_Setter_Delegate,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Delegate>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::find(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,true>,vp::vx::Graph_Parameter_ID>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unsigned int v12 = (unsigned int *)(v9 + 32 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,true>,vp::vx::Graph_Parameter_ID>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

vp::vx::IO_Parameter_Setter_Delegate **std::unique_ptr<vp::vx::IO_Parameter_Setter_Delegate,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Delegate>>::reset[abi:ne180100](vp::vx::IO_Parameter_Setter_Delegate **result, vp::vx::IO_Parameter_Setter_Delegate *a2)
{
  int v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate(v2);
    return (vp::vx::IO_Parameter_Setter_Delegate **)(*(uint64_t (**)(vp::vx::IO_Parameter_Setter_Delegate *, vp::vx::IO_Parameter_Setter_Delegate *, vp::vx::IO_Parameter_Setter_Delegate *, vp::vx::IO_Parameter_Setter_Delegate *))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 80, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Delegate>::construct[abi:ne180100]<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>((uint64_t)a1, v10, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Parameter_Setter_Delegate * std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>(unsigned int &,vp::vx::data_flow::State<float> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB21916C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Delegate>::construct[abi:ne180100]<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a4);
  vp::vx::IO_Parameter_Setter_Delegate::IO_Parameter_Setter_Delegate(a2, v5, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Parameter_Setter_Delegate * std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Delegate>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Delegate,unsigned int &,vp::vx::data_flow::State<float> const&>(unsigned int &,vp::vx::data_flow::State<float> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 80, 8);
  }
  return a1;
}

void std::__function::__func<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0>,void ()(float const&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0>,void ()(float const&)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F14A0438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0>,void ()(float const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Delegate::notify(vp::vx::io::Event,vp::vx::io::Node &)::$_0>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  log = vp::get_log((vp *)a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      uint64_t v6 = v4 + 56;
    }
    else {
      uint64_t v6 = 0;
    }
    unint64_t v7 = v18;
    vp::vx::io::get_log_context_info(v6, (uint64_t)"vp::vx::IO_Parameter_Setter_Delegate]", 36, v18);
    unint64_t v8 = v19;
    char v9 = v18[1];
    BOOL v11 = vp::get_log(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if ((v8 & 0x80u) == 0) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = (unint64_t)v9;
      }
      if ((v19 & 0x80u) != 0) {
        unint64_t v7 = (void **)v18[0];
      }
      if (v12) {
        uint64_t v13 = " ";
      }
      else {
        uint64_t v13 = "";
      }
      unsigned int v14 = *(_DWORD *)(a1 + 16);
      int v15 = bswap32(v14);
      *(_DWORD *)&buf[1] = v15;
      if (((char)v15 - 32) > 0x5E
        || (((__int16)v15 >> 8) - 32) > 0x5E
        || ((v15 << 8 >> 24) - 32) > 0x5E
        || ((v15 >> 24) - 32) > 0x5E)
      {
        std::to_string(&__p, v14);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&__p, buf);
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v13;
      __int16 v23 = 2080;
      uint64_t v24 = p_p;
      __int16 v25 = 2048;
      double v26 = v3;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%s%ssetting parameter %s to %f", buf, 0x2Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((char)v19 < 0) {
      operator delete(v18[0]);
    }
  }
  atomic_store(LODWORD(v3), (unsigned int *)(v4 + 44));
}

void sub_1BB2194CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<std::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_subscript(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v12 = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  v14[0] = v2 + 32 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,false>,vp::vx::Graph_Parameter_ID>(&v12, v14, a2, &v16);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = v16;
  if (v16 == (unsigned int *)(v7 + 32 * v8)) {
    goto LABEL_14;
  }
  if (!v16) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*a2 < *v16)
  {
LABEL_14:
    memset(v14, 0, sizeof(v14));
    vp::vx::data_flow::State<void>::State((uint64_t)v14);
    LODWORD(v1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *a2;
    vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v14);
    int v15 = v10;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>(a1, &v15, (int *)&v12, (int **)&v16);
    uint64_t v10 = v16;
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  return v10 + 2;
}

void sub_1BB219660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,false>,vp::vx::Graph_Parameter_ID>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  void v10[3] = *MEMORY[0x1E4F143B8];
  int v9 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)(a3 + 2));
  uint64_t v8 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::insert_unique(a1, &v8, &v9, a4);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB2197F0(_Unwind_Exception *a1)
{
  vp::vx::data_flow::State<void>::~State(v1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::insert_unique(void *a1@<X0>, unsigned int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_18;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 32 * v7) {
LABEL_18:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v12 = *a2;
  uint64_t v13 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_insert_unique_prepare((uint64_t)a1, &v12, (unsigned int *)a3, &v13))
  {
    unsigned int v14 = (int *)v13;
    unint64_t v10 = a1[1];
    if (v10 > (unint64_t)v13) {
      goto LABEL_19;
    }
    uint64_t v11 = a1[2];
    if (!v10)
    {
      if (v11) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
    }
    if ((unint64_t)v13 > v10 + 32 * v11) {
LABEL_19:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
    boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>(a1, &v14, (const char *)1, a3, a4);
  }
  else
  {
    if (!a1[1] && v13) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = (int *)v13;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  int v9 = &v4[8 * v5];
  unint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      uint64_t v18 = v9;
      unsigned __int8 v19 = v10;
      uint64_t v16 = (uint64_t *)&v19;
      size_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  uint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 8);
  uint64_t v12 = v11 - 8;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    __int16 v21 = v4;
    unint64_t v20 = v12;
    uint64_t v16 = (uint64_t *)&v21;
    size_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,boost::container::dtl::select1st<vp::vx::Graph_Parameter_ID>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,true>,vp::vx::Graph_Parameter_ID>(&v12, &v11, a4, &v13);
  int v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>(void *a1@<X0>, int **a2@<X1>, const char *a3@<X2>, int *a4@<X3>, int **a5@<X8>)
{
  unint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  if (v7 < v6) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v11 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    uint64_t v16 = *a2;
    boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>(a1, v16, a3, a4, a5);
  }
  else
  {
    if (v7 == v6) {
      boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
    }
    uint64_t v12 = (int *)(a1[1] + 32 * v6);
    if (v12 == v11)
    {
      *uint64_t v11 = *a4;
      vp::vx::data_flow::State<void>::State((uint64_t)(v12 + 2), (uint64_t)(a4 + 2));
      ++a1[2];
    }
    else
    {
      unsigned int v13 = v12 - 8;
      int *v12 = *(v12 - 8);
      vp::vx::data_flow::State<void>::State((uint64_t)(v12 + 2), (uint64_t)(v12 - 6));
      ++a1[2];
      if (v13 != v11)
      {
        unsigned int v14 = v13;
        do
        {
          int v15 = *(v14 - 8);
          v14 -= 8;
          *unsigned int v13 = v15;
          vp::vx::data_flow::State<void>::operator=((uint64_t)(v13 + 2), (uint64_t)(v13 - 6));
          unsigned int v13 = v14;
        }
        while (v14 != v11);
      }
      *uint64_t v11 = *a4;
      vp::vx::data_flow::State<void>::operator=((uint64_t)(v11 + 2), (uint64_t)(a4 + 2));
    }
    *a5 = *a2;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>@<X0>(void *a1@<X0>, int *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  unsigned int v14 = (_DWORD *)std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + a1[1] - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>(void *a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, _DWORD *a6)
{
  v15[0] = a2;
  v15[1] = a1;
  _OWORD v15[2] = a3;
  uint64_t v10 = (int *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>((uint64_t)a1, v10, a4, &v10[8 * a1[2]], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = (uint64_t)(v10 + 2);
      do
      {
        --v11;
        uint64_t v12 = vp::vx::data_flow::State<void>::~State(v12) + 32;
      }
      while (v11);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 32 * a1[3], 8);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1BB219DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>*,boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v10 = a3;
  uint64_t v11 = a5;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    uint64_t v11 = a5;
    do
    {
      uint64_t v13 = (uint64_t)(v12 + 2);
      int v14 = *v12;
      v12 += 8;
      uint64_t v15 = (uint64_t)(v11 + 2);
      *uint64_t v11 = v14;
      v11 += 8;
      vp::vx::data_flow::State<void>::State(v15, v13);
    }
    while (v12 != v10);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *uint64_t v11 = *a7;
  vp::vx::data_flow::State<void>::State((uint64_t)(v11 + 2), (uint64_t)(a7 + 2));
  if (v10 != a4)
  {
    uint64_t v16 = (uint64_t)(v11 + 10);
    do
    {
      uint64_t v17 = (uint64_t)(v10 + 2);
      int v18 = *v10;
      v10 += 8;
      *(_DWORD *)(v16 - 8) = v18;
      vp::vx::data_flow::State<void>::State(v16, v17);
      uint64_t v16 = v19 + 32;
    }
    while (v10 != a4);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 32 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

CFMutableArrayRef vp::vx::database::v1::detail::make_mutable_array@<X0>(CFMutableArrayRef *a1@<X8>)
{
  CFMutableArrayRef result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

CFMutableDictionaryRef vp::vx::database::v1::detail::make_mutable_dictionary@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a1 = result;
  return result;
}

CFMutableDictionaryRef vp::vx::database::v1::detail::make_key_path@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, CFMutableArrayRef *a3@<X8>)
{
  uint64_t v12 = a1;
  unint64_t v13 = a2;
  unint64_t v4 = std::string_view::find[abi:ne180100]((uint64_t *)&v12, ":", 0);
  if (v4 == -1)
  {
    vp::vx::database::v1::utility::parse_uint64(v12, v13);
    if (v13 == 1)
    {
      int v8 = *v12;
      if (v7) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 == 43;
      }
      char v10 = v9;
      BOOL v11 = v8 == 45;
      if (v10) {
        return vp::vx::database::v1::detail::make_mutable_array(a3);
      }
    }
    else
    {
      BOOL v11 = 0;
      if (v7) {
        return vp::vx::database::v1::detail::make_mutable_array(a3);
      }
    }
    if (!v11) {
      return vp::vx::database::v1::detail::make_mutable_dictionary(a3);
    }
    return vp::vx::database::v1::detail::make_mutable_array(a3);
  }
  if (v13 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = v13;
  }
  return (CFMutableDictionaryRef)vp::vx::database::v1::detail::make_key_path(v12, v5);
}

void vp::vx::database::v1::detail::get_value(const void *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  __src = a2;
  size_t __len = a3;
  size_t v6 = std::string_view::find[abi:ne180100]((uint64_t *)&__src, ":", 0);
  if (v6 != -1)
  {
    if (__len >= v6) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = __len;
    }
    if (__len <= v6) {
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    }
    int v8 = __src;
    BOOL v9 = (char *)__src + v6 + 1;
    size_t v10 = __len - (v6 + 1);
    unint64_t v11 = vp::vx::database::v1::utility::parse_uint64((unsigned __int8 *)__src, v7);
    if (v12)
    {
      uint64_t v13 = v11;
      CFTypeID v14 = CFGetTypeID(a1);
      if (v14 == CFArrayGetTypeID())
      {
        unint64_t v15 = 0x8000000000000000;
        if (v13) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        CFIndex v16 = v13 >= 0 ? v13 : v15;
        if (v16 < CFArrayGetCount((CFArrayRef)a1))
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v16);
          vp::vx::database::v1::detail::get_value(ValueAtIndex, v9, v10);
          return;
        }
      }
      goto LABEL_80;
    }
    CFTypeID v25 = CFGetTypeID(a1);
    if (v25 != CFDictionaryGetTypeID()) {
      goto LABEL_80;
    }
    if (v7 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        uint64_t v31 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v31 = v7 | 7;
        }
        uint64_t v32 = v31 + 1;
        p_dst = (void **)operator new(v31 + 1);
        CFIndex v47 = v7;
        int64_t v48 = v32 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v48) = v7;
        p_dst = (void **)&__dst;
        if (!v7)
        {
LABEL_40:
          *((unsigned char *)p_dst + v7) = 0;
          if (v48 >= 0) {
            unint64_t v33 = (const UInt8 *)&__dst;
          }
          else {
            unint64_t v33 = (const UInt8 *)__dst;
          }
          if (v33)
          {
            if (v48 >= 0) {
              CFIndex v34 = HIBYTE(v48);
            }
            else {
              CFIndex v34 = v47;
            }
            CFStringRef v35 = CFStringCreateWithBytes(0, v33, v34, 0x8000100u, 0);
            if (!v35)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            if ((v48 & 0x8000000000000000) == 0) {
              goto LABEL_50;
            }
          }
          else
          {
            CFStringRef v35 = 0;
            if ((v48 & 0x8000000000000000) == 0) {
              goto LABEL_50;
            }
          }
          operator delete(__dst);
LABEL_50:
          if (CFDictionaryContainsKey((CFDictionaryRef)a1, v35))
          {
            int Value = CFDictionaryGetValue((CFDictionaryRef)a1, v35);
            vp::vx::database::v1::detail::get_value(Value, v9, v10);
            if (v35) {
              CFRelease(v35);
            }
            return;
          }
          if (v35) {
            CFRelease(v35);
          }
LABEL_80:
          *a4 = 0;
          return;
        }
      }
      memmove(p_dst, v8, v7);
      goto LABEL_40;
    }
LABEL_82:
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v18 = vp::vx::database::v1::utility::parse_uint64((unsigned __int8 *)__src, __len);
  if (!v19)
  {
    CFTypeID v27 = CFGetTypeID(a1);
    if (v27 != CFDictionaryGetTypeID()) {
      goto LABEL_80;
    }
    size_t v28 = __len;
    if (__len > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_82;
    }
    int v29 = __src;
    if (__len >= 0x17)
    {
      size_t v37 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v37 = __len | 7;
      }
      size_t v38 = v37 + 1;
      long long v30 = (void **)operator new(v37 + 1);
      CFIndex v47 = v28;
      int64_t v48 = v38 | 0x8000000000000000;
      long long __dst = v30;
    }
    else
    {
      HIBYTE(v48) = __len;
      long long v30 = (void **)&__dst;
      if (!__len)
      {
LABEL_61:
        *((unsigned char *)v30 + v28) = 0;
        if (v48 >= 0) {
          uint64_t v39 = (const UInt8 *)&__dst;
        }
        else {
          uint64_t v39 = (const UInt8 *)__dst;
        }
        if (v39)
        {
          if (v48 >= 0) {
            CFIndex v40 = HIBYTE(v48);
          }
          else {
            CFIndex v40 = v47;
          }
          CFStringRef v41 = CFStringCreateWithBytes(0, v39, v40, 0x8000100u, 0);
          if (!v41)
          {
            uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v45, "Could not construct");
          }
          if ((v48 & 0x8000000000000000) == 0) {
            goto LABEL_71;
          }
        }
        else
        {
          CFStringRef v41 = 0;
          if ((v48 & 0x8000000000000000) == 0) {
            goto LABEL_71;
          }
        }
        operator delete(__dst);
LABEL_71:
        if (!CFDictionaryContainsKey((CFDictionaryRef)a1, v41))
        {
          if (v41) {
            CFRelease(v41);
          }
          goto LABEL_80;
        }
        uint64_t v42 = CFDictionaryGetValue((CFDictionaryRef)a1, v41);
        uint64_t v43 = v42;
        if (v42) {
          CFRetain(v42);
        }
        *a4 = v43;
        if (v41) {
          CFRelease(v41);
        }
        return;
      }
    }
    memmove(v30, v29, v28);
    goto LABEL_61;
  }
  uint64_t v20 = v18;
  CFTypeID v21 = CFGetTypeID(a1);
  if (v21 != CFArrayGetTypeID()) {
    goto LABEL_80;
  }
  unint64_t v22 = 0x8000000000000000;
  if (v20) {
    unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v20 < 0) {
    uint64_t v20 = v22;
  }
  if (v20 >= CFArrayGetCount((CFArrayRef)a1)) {
    goto LABEL_80;
  }
  __int16 v23 = CFArrayGetValueAtIndex((CFArrayRef)a1, v20);
  uint64_t v24 = v23;
  if (v23) {
    CFRetain(v23);
  }
  *a4 = v24;
}

void sub_1BB21A538(void *a1)
{
}

uint64_t vp::vx::database::v1::detail::set_value(void *a1, void *a2, size_t a3, const void *a4)
{
  __src = a2;
  size_t __len = a3;
  size_t v6 = std::string_view::find[abi:ne180100]((uint64_t *)&__src, ":", 0);
  if (v6 == -1)
  {
    unint64_t v17 = vp::vx::database::v1::utility::parse_uint64((unsigned __int8 *)__src, __len);
    if (v18)
    {
      uint64_t v19 = v17;
      CFTypeID v20 = CFGetTypeID(a1);
      if (v20 != CFArrayGetTypeID()) {
        return 0;
      }
      unint64_t v21 = 0x8000000000000000;
      if (v19) {
        unint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v19 < 0) {
        uint64_t v19 = v21;
      }
      if (v19 >= CFArrayGetCount((CFArrayRef)a1))
      {
        while (CFArrayGetCount((CFArrayRef)a1) <= v19)
          CFArrayAppendValue((CFMutableArrayRef)a1, @"?");
        CFArraySetValueAtIndex((CFMutableArrayRef)a1, v19, a4);
      }
      return 1;
    }
    if (__len == 1)
    {
      int v28 = *(unsigned __int8 *)__src;
      if (v28 == 45)
      {
        CFTypeID v44 = CFGetTypeID(a1);
        if (v44 != CFArrayGetTypeID()) {
          return 0;
        }
        CFArrayInsertValueAtIndex((CFMutableArrayRef)a1, 0, a4);
        return 1;
      }
      if (v28 == 43)
      {
        CFTypeID v29 = CFGetTypeID(a1);
        if (v29 != CFArrayGetTypeID()) {
          return 0;
        }
        CFArrayAppendValue((CFMutableArrayRef)a1, a4);
        return 1;
      }
    }
    CFTypeID v32 = CFGetTypeID(a1);
    if (v32 != CFDictionaryGetTypeID()) {
      return 0;
    }
    size_t v33 = __len;
    if (__len > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_100;
    }
    CFIndex v34 = __src;
    if (__len >= 0x17)
    {
      size_t v45 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v45 = __len | 7;
      }
      size_t v46 = v45 + 1;
      p_value = operator new(v45 + 1);
      CFIndex v54 = v33;
      int64_t v55 = v46 | 0x8000000000000000;
      value = p_value;
    }
    else
    {
      HIBYTE(v55) = __len;
      p_value = &value;
      if (!__len)
      {
LABEL_82:
        *((unsigned char *)p_value + v33) = 0;
        if (v55 >= 0) {
          CFIndex v47 = (const UInt8 *)&value;
        }
        else {
          CFIndex v47 = (const UInt8 *)value;
        }
        if (v47)
        {
          if (v55 >= 0) {
            CFIndex v48 = HIBYTE(v55);
          }
          else {
            CFIndex v48 = v54;
          }
          CFStringRef v49 = CFStringCreateWithBytes(0, v47, v48, 0x8000100u, 0);
          if (!v49)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          if ((v55 & 0x8000000000000000) == 0) {
            goto LABEL_92;
          }
        }
        else
        {
          CFStringRef v49 = 0;
          if ((v55 & 0x8000000000000000) == 0)
          {
LABEL_92:
            CFDictionarySetValue((CFMutableDictionaryRef)a1, v49, a4);
            if (v49) {
              CFRelease(v49);
            }
            return 1;
          }
        }
        operator delete(value);
        goto LABEL_92;
      }
    }
    memmove(p_value, v34, v33);
    goto LABEL_82;
  }
  if (__len >= v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = __len;
  }
  if (__len <= v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  int v8 = (unsigned __int8 *)__src;
  BOOL v9 = (unsigned __int8 *)__src + v6 + 1;
  unint64_t v10 = __len - (v6 + 1);
  unint64_t v11 = vp::vx::database::v1::utility::parse_uint64((unsigned __int8 *)__src, v7);
  if (v12)
  {
    uint64_t v13 = v11;
    CFTypeID v14 = CFGetTypeID(a1);
    if (v14 == CFArrayGetTypeID())
    {
      unint64_t v15 = 0x8000000000000000;
      if (v13) {
        unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v13 >= 0) {
        CFIndex v16 = v13;
      }
      else {
        CFIndex v16 = v15;
      }
      if (v16 < CFArrayGetCount((CFArrayRef)a1)) {
        goto LABEL_44;
      }
      while (CFArrayGetCount((CFArrayRef)a1) <= v16)
        CFArrayAppendValue((CFMutableArrayRef)a1, @"?");
      vp::vx::database::v1::detail::make_key_path(v9, v10, (CFMutableArrayRef *)&value);
      long long v30 = value;
      if (value)
      {
        CFArraySetValueAtIndex((CFMutableArrayRef)a1, v16, value);
        CFRelease(v30);
LABEL_44:
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v16);
        return vp::vx::database::v1::detail::set_value(ValueAtIndex, v9, v10, a4);
      }
    }
    return 0;
  }
  if (v7 != 1) {
    goto LABEL_32;
  }
  int v22 = *v8;
  if (v22 == 45)
  {
    CFTypeID v36 = CFGetTypeID(a1);
    if (v36 != CFArrayGetTypeID()) {
      return 0;
    }
    vp::vx::database::v1::detail::make_key_path(v9, v10, (CFMutableArrayRef *)&value);
    size_t v37 = value;
    uint64_t v25 = value != 0;
    if (value)
    {
      CFArrayInsertValueAtIndex((CFMutableArrayRef)a1, 0, value);
      CFRelease(v37);
    }
    return v25;
  }
  if (v22 != 43)
  {
LABEL_32:
    CFTypeID v26 = CFGetTypeID(a1);
    if (v26 != CFDictionaryGetTypeID()) {
      return 0;
    }
    if (v7 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        uint64_t v38 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v38 = v7 | 7;
        }
        uint64_t v39 = v38 + 1;
        CFTypeID v27 = operator new(v38 + 1);
        CFIndex v54 = v7;
        int64_t v55 = v39 | 0x8000000000000000;
        value = v27;
      }
      else
      {
        HIBYTE(v55) = v7;
        CFTypeID v27 = &value;
        if (!v7)
        {
LABEL_58:
          *((unsigned char *)v27 + v7) = 0;
          if (v55 >= 0) {
            CFIndex v40 = (const UInt8 *)&value;
          }
          else {
            CFIndex v40 = (const UInt8 *)value;
          }
          if (v40)
          {
            if (v55 >= 0) {
              CFIndex v41 = HIBYTE(v55);
            }
            else {
              CFIndex v41 = v54;
            }
            CFStringRef v42 = CFStringCreateWithBytes(0, v40, v41, 0x8000100u, 0);
            if (!v42)
            {
              uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v51, "Could not construct");
            }
            if (v55 < 0) {
              goto LABEL_67;
            }
          }
          else
          {
            CFStringRef v42 = 0;
            if (v55 < 0) {
LABEL_67:
            }
              operator delete(value);
          }
          if (!CFDictionaryContainsKey((CFDictionaryRef)a1, v42))
          {
            vp::vx::database::v1::detail::make_key_path(v9, v10, (CFMutableArrayRef *)&value);
            if (!value)
            {
              applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)&value);
              uint64_t v25 = 0;
              if (!v42) {
                return v25;
              }
              goto LABEL_72;
            }
            CFDictionarySetValue((CFMutableDictionaryRef)a1, v42, value);
            applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)&value);
          }
          uint64_t v43 = CFDictionaryGetValue((CFDictionaryRef)a1, v42);
          uint64_t v25 = vp::vx::database::v1::detail::set_value(v43, v9, v10, a4);
          if (!v42) {
            return v25;
          }
LABEL_72:
          CFRelease(v42);
          return v25;
        }
      }
      memmove(v27, v8, v7);
      goto LABEL_58;
    }
LABEL_100:
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeID v23 = CFGetTypeID(a1);
  if (v23 != CFArrayGetTypeID()) {
    return 0;
  }
  vp::vx::database::v1::detail::make_key_path(v9, v10, (CFMutableArrayRef *)&value);
  uint64_t v24 = value;
  uint64_t v25 = value != 0;
  if (value)
  {
    CFArrayAppendValue((CFMutableArrayRef)a1, value);
    CFRelease(v24);
  }
  return v25;
}

void sub_1BB21AB9C(void *a1)
{
}

uint64_t vp::vx::database::v1::Manifest::replace(CFTypeRef *a1, const void **a2, const void **a3)
{
  CFTypeRef v3 = *a1;
  if (!*a1 || !*a2 || !*a3) {
    return 0;
  }
  CFRetain(*a1);
  CFTypeRef v12 = v3;
  size_t v6 = *a2;
  if (v6) {
    CFRetain(v6);
  }
  CFTypeRef v11 = v6;
  size_t v7 = *a3;
  if (v7) {
    CFRetain(v7);
  }
  CFTypeRef cf = v7;
  uint64_t v8 = vp::vx::database::v1::utility::replace(&v12, &v11, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v8;
}

void sub_1BB21ACB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  CFTypeRef v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  unint64_t v5 = va_arg(va2, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va2);
  _Unwind_Resume(a1);
}

void vp::vx::database::v1::Manifest::set(void **a1, char *a2, CFPropertyListRef *a3, char *a4)
{
  CFPropertyListRef v4 = *a3;
  if (*a3)
  {
    if (a4)
    {
      size_t v8 = strlen(a4);
      vp::vx::database::v1::detail::get_value(v4, a4, v8, &propertyList);
      if (propertyList)
      {
        DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, 2uLL);
        if (propertyList) {
          CFRelease(propertyList);
        }
      }
      else
      {
        DeepCopy = 0;
      }
    }
    else
    {
      DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a3, 2uLL);
    }
    unint64_t v10 = *a1;
    if (a2)
    {
      if (!v10)
      {
        vp::vx::database::v1::detail::make_mutable_dictionary((CFMutableDictionaryRef *)&propertyList);
        CFTypeRef v11 = *a1;
        unint64_t v10 = (void *)propertyList;
        *a1 = (void *)propertyList;
        CFPropertyListRef propertyList = v11;
        if (v11)
        {
          CFRelease(v11);
          unint64_t v10 = *a1;
        }
      }
      size_t v12 = strlen(a2);
      vp::vx::database::v1::detail::set_value(v10, a2, v12, DeepCopy);
    }
    else
    {
      *a1 = DeepCopy;
      if (DeepCopy) {
        CFRetain(DeepCopy);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    if (DeepCopy) {
      CFRelease(DeepCopy);
    }
  }
}

CFPropertyListRef vp::vx::database::v1::Manifest::make_plist@<X0>(CFPropertyListRef *this@<X0>, void *a2@<X8>)
{
  if (*this) {
    CFPropertyListRef result = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *this, 0);
  }
  else {
    CFPropertyListRef result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t vp::vx::IO_Parameter_Setter_Command::IO_Parameter_Setter_Command(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 48) = &unk_1F1493718;
  size_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)size_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 56) = v6 + 24;
  *(void *)(a1 + 64) = v6;
  *(void *)a1 = &unk_1F14A0488;
  *(void *)(a1 + 48) = &unk_1F14A04D0;
  *(_DWORD *)(a1 + 8) = a2;
  vp::vx::data_flow::State<void>::State(a1 + 16, a3);
  *(_DWORD *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v9))
  {
    uint64_t v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  return a1;
}

void vp::vx::IO_Parameter_Setter_Command::~IO_Parameter_Setter_Command(vp::vx::IO_Parameter_Setter_Command *this)
{
  vp::vx::IO_Parameter_Setter_Delegate::~IO_Parameter_Setter_Delegate(this);
  *(void *)(v1 + 48) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Parameter_Setter_Command::~IO_Parameter_Setter_Command(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Parameter_Setter_Command::~IO_Parameter_Setter_Command(vp::vx::IO_Parameter_Setter_Command *this)
{
}

{
  uint64_t vars8;

  vp::vx::IO_Parameter_Setter_Command::~IO_Parameter_Setter_Command((vp::vx::IO_Parameter_Setter_Command *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

std::__shared_mutex_base *vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[1];
  if (!v3 || *(void *)(v3 + 8) == -1)
  {
    int v8 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v8)
    {
      CFPropertyListRef result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v8);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else
  {
    int v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
    uint64_t v5 = *a2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
    size_t v6 = operator new(0x28uLL);
    *size_t v6 = &unk_1F14A0548;
    v6[1] = v2;
    *((_DWORD *)v6 + 4) = v4;
    uint64_t v6[3] = v5;
    void v6[4] = v3;
    void v9[3] = v6;
    std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
    size_t v12 = 0;
    size_t v7 = operator new(0x28uLL);
    *size_t v7 = &unk_1F1493DA8;
    std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
    size_t v12 = v7;
    LODWORD(v7) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v11);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v10);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v7;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_1BB21B1C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

_DWORD *vp::vx::IO_Parameter_Setter_Command::get_parameter_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = operator new(4uLL);
    *a3 = v5;
    _DWORD *v5 = v4;
    CFPropertyListRef result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void *vp::vx::IO_Parameter_Setter_Command_Factory::IO_Parameter_Setter_Command_Factory(void *a1, uint64_t a2)
{
  a1[5] = &unk_1F1493718;
  int v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)int v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  a1[6] = v4 + 24;
  a1[7] = v4;
  *a1 = &unk_1F14A04F8;
  a1[1] = a2;
  a1[4] = 0;
  a1[5] = &unk_1F14A0528;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void vp::vx::IO_Parameter_Setter_Command_Factory::new_node_command(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t *), void (*a5)(void, uint64_t *))
{
  v15[1] = a5;
  uint64_t v16 = a3;
  v15[0] = a4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if (v6)
  {
    (*(void (**)(int **__return_ptr))(*(void *)v6 + 16))(&v13);
    size_t v7 = v13;
    int v8 = v14;
    if (v13 != v14)
    {
      uint64_t v9 = a1 + 8;
      do
      {
        unsigned int v12 = *v7;
        unsigned int v17 = v12;
        unint64_t v10 = boost::container::flat_map<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>,std::less<vp::vx::Graph_Parameter_ID>,vp::Allocator<std::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>>::at(v9, &v17);
        vp::allocate_unique<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>(&v16, (int *)&v12, (uint64_t)v10, (uint64_t)v18);
        long long v11 = v18[0];
        *(void *)&v18[0] = 0;
        v19[0] = v11;
        v19[1] = v18[1];
        caulk::function_ref<void ()(std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>)>::operator()(v15, (uint64_t *)v19);
        std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](v19, 0);
        std::unique_ptr<vp::vx::IO_Parameter_Setter_Command,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Command>>::reset[abi:ne180100]((vp::vx::IO_Parameter_Setter_Command **)v18, 0);
        ++v7;
      }
      while (v7 != v8);
      size_t v7 = v13;
    }
    if (v7)
    {
      CFTypeID v14 = v7;
      operator delete(v7);
    }
  }
}

void vp::vx::IO_Parameter_Setter_Command_Factory::~IO_Parameter_Setter_Command_Factory(vp::vx::IO_Parameter_Setter_Command_Factory *this)
{
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector((void *)this + 1);
  *((void *)this + 5) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector((void *)this + 1);
  *((void *)this + 5) = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Parameter_Setter_Command_Factory::~IO_Parameter_Setter_Command_Factory(vp::vx::IO_Parameter_Setter_Command_Factory *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector(v1 + 1);
  v1[5] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector(v1 + 1);
  v1[5] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)v1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C185D370);
}

vp::vx::IO_Parameter_Setter_Command **vp::allocate_unique<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872460;
  uint64_t v6 = (vp::vx::IO_Parameter_Setter_Command *)std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Command>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Parameter_Setter_Command,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Command>>::reset[abi:ne180100]((vp::vx::IO_Parameter_Setter_Command **)a4, v6);
}

void sub_1BB21B664(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Parameter_Setter_Command,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Command>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

vp::vx::IO_Parameter_Setter_Command **std::unique_ptr<vp::vx::IO_Parameter_Setter_Command,vp::Allocator_Delete<vp::vx::IO_Parameter_Setter_Command>>::reset[abi:ne180100](vp::vx::IO_Parameter_Setter_Command **result, vp::vx::IO_Parameter_Setter_Command *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    vp::vx::IO_Parameter_Setter_Command::~IO_Parameter_Setter_Command(v2);
    return (vp::vx::IO_Parameter_Setter_Command **)(*(uint64_t (**)(vp::vx::IO_Parameter_Setter_Command *, vp::vx::IO_Parameter_Setter_Command *, vp::vx::IO_Parameter_Setter_Command *, vp::vx::IO_Parameter_Setter_Command *))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Command>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Command>::construct[abi:ne180100]<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>((uint64_t)a1, v10, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Parameter_Setter_Command * std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Command>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>(unsigned int &,vp::vx::data_flow::State<float> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB21B788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Command>::construct[abi:ne180100]<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a4);
  vp::vx::IO_Parameter_Setter_Command::IO_Parameter_Setter_Command(a2, v5, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Parameter_Setter_Command * std::pmr::polymorphic_allocator<vp::vx::IO_Parameter_Setter_Command>::new_object[abi:ne180100]<vp::vx::IO_Parameter_Setter_Command,unsigned int &,vp::vx::data_flow::State<float> const&>(unsigned int &,vp::vx::data_flow::State<float> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 72, 8);
  }
  return a1;
}

void *std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0548;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0548;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::__clone(uint64_t a1)
{
  CFPropertyListRef result = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A0548;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0548;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0,std::allocator<vp::vx::IO_Parameter_Setter_Command::set_parameter_controller(std::weak_ptr<vp::vx::io::Parameter_Controller>)::$_0>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    float v4 = *a2;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        log = vp::get_log((vp *)v6);
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          if (v5) {
            uint64_t v10 = v5 + 48;
          }
          else {
            uint64_t v10 = 0;
          }
          long long v11 = v22;
          vp::vx::io::get_log_context_info(v10, (uint64_t)"vp::vx::IO_Parameter_Setter_Command]", 35, v22);
          unint64_t v12 = v23;
          uint64_t v13 = v22[1];
          unint64_t v15 = vp::get_log(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            if ((v12 & 0x80u) == 0) {
              unint64_t v16 = v12;
            }
            else {
              unint64_t v16 = (unint64_t)v13;
            }
            if ((v23 & 0x80u) != 0) {
              long long v11 = (void **)v22[0];
            }
            if (v16) {
              unsigned int v17 = " ";
            }
            else {
              unsigned int v17 = "";
            }
            unsigned int v18 = *(_DWORD *)(a1 + 16);
            int v19 = bswap32(v18);
            *(_DWORD *)&buf[1] = v19;
            if (((char)v19 - 32) > 0x5E
              || (((__int16)v19 >> 8) - 32) > 0x5E
              || ((v19 << 8 >> 24) - 32) > 0x5E
              || ((v19 >> 24) - 32) > 0x5E)
            {
              std::to_string(&__p, v18);
            }
            else
            {
              strcpy(&buf[5], "'");
              buf[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(&__p, buf);
            }
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v11;
            __int16 v25 = 2080;
            CFTypeID v26 = v17;
            __int16 v27 = 2080;
            int v28 = p_p;
            __int16 v29 = 2048;
            double v30 = v4;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "%s%ssetting parameter %s to %f", buf, 0x2Au);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if ((char)v23 < 0) {
            operator delete(v22[0]);
          }
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void, float))(*(void *)v8 + 32))(buf, v8, *(unsigned int *)(v5 + 8), v4);
        if (!v31) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1BB21BC70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Mic_Ref_Sync_Node_Factory::IO_Mic_Ref_Sync_Node_Factory(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 144) = &unk_1F1493718;
  float v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)float v4 = &unk_1F1493738;
  *(_OWORD *)(v4 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v4 + 24;
  *(void *)(a1 + 16std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v4;
  *(void *)a1 = &unk_1F14A0598;
  *(void *)(a1 + 144) = &unk_1F14A05C8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  vp::vx::data_flow::State<void>::State(a1 + 24);
  vp::vx::data_flow::State<void>::State(a1 + 48);
  vp::vx::data_flow::State<void>::State(a1 + 72);
  vp::vx::data_flow::State<void>::State(a1 + 96);
  uint64_t v5 = (vp *)vp::vx::data_flow::State<void>::State(a1 + 120);
  log = vp::get_log(v5);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    vp::vx::io::get_log_context_info(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"vp::vx::IO_Mic_Ref_Sync_Node_Factory]", 36, __p);
    unint64_t v7 = v16;
    uint64_t v8 = __p[1];
    uint64_t v10 = vp::get_log(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v11 = v7;
      }
      else {
        unint64_t v11 = (unint64_t)v8;
      }
      unint64_t v12 = (void **)__p[0];
      if ((v16 & 0x80u) == 0) {
        unint64_t v12 = __p;
      }
      if (v11) {
        uint64_t v13 = " ";
      }
      else {
        uint64_t v13 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unsigned int v18 = v12;
      __int16 v19 = 2080;
      CFTypeID v20 = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB21BE94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Mic_Ref_Sync_Node_Factory::~IO_Mic_Ref_Sync_Node_Factory(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  float v4 = (vp *)a2[3];
  *(void *)((char *)this + *(void *)(v3 - 24)) = v4;
  log = vp::get_log(v4);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    vp::vx::io::get_log_context_info((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)"vp::vx::IO_Mic_Ref_Sync_Node_Factory]", 36, __p);
    unint64_t v6 = v15;
    unint64_t v7 = __p[1];
    char v9 = vp::get_log(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if ((v6 & 0x80u) == 0) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = (unint64_t)v7;
      }
      unint64_t v11 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        unint64_t v11 = __p;
      }
      if (v10) {
        unint64_t v12 = " ";
      }
      else {
        unint64_t v12 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unsigned int v17 = v11;
      __int16 v18 = 2080;
      __int16 v19 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 120);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 96);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 72);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 48);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 24);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

void vp::vx::IO_Mic_Ref_Sync_Node_Factory::~IO_Mic_Ref_Sync_Node_Factory(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this)
{
  *(void *)(v1 + 144) = &unk_1F1493718;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  vp::vx::IO_Mic_Ref_Sync_Node_Factory::~IO_Mic_Ref_Sync_Node_Factory(this);

  JUMPOUT(0x1C185D370);
}

void virtual thunk to'vp::vx::IO_Mic_Ref_Sync_Node_Factory::~IO_Mic_Ref_Sync_Node_Factory(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this)
{
}

{
  uint64_t vars8;

  vp::vx::IO_Mic_Ref_Sync_Node_Factory::~IO_Mic_Ref_Sync_Node_Factory((vp::vx::IO_Mic_Ref_Sync_Node_Factory *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C185D370);
}

void **vp::vx::IO_Mic_Ref_Sync_Node_Factory::new_node@<X0>(vp *a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a2;
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v6 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24);
    }
    else {
      uint64_t v6 = 0;
    }
    vp::vx::io::get_log_context_info(v6, (uint64_t)"vp::vx::IO_Mic_Ref_Sync_Node_Factory]", 36, v48);
    uint64_t v7 = HIBYTE(v49);
    uint64_t v8 = *(void *)&v48[8];
    unint64_t v10 = vp::get_log(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = v8;
      }
      unint64_t v12 = *(unsigned char **)v48;
      if (v49 >= 0) {
        unint64_t v12 = v48;
      }
      if (v11) {
        uint64_t v13 = " ";
      }
      else {
        uint64_t v13 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s%swill create new \"mic-ref-sync\" node", buf, 0x16u);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)v48);
    }
  }
  mic_ref_time_delta = (vp *)vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_mic_ref_time_delta(a1);
  int v15 = (int)mic_ref_time_delta;
  int v44 = (int)mic_ref_time_delta;
  unsigned __int8 v16 = vp::get_log(mic_ref_time_delta);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      uint64_t v17 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24);
    }
    else {
      uint64_t v17 = 0;
    }
    vp::vx::io::get_log_context_info(v17, (uint64_t)"vp::vx::IO_Mic_Ref_Sync_Node_Factory]", 36, buf);
    uint64_t v18 = v47;
    uint64_t v19 = *(void *)&buf[8];
    uint64_t v21 = vp::get_log(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      if ((v18 & 0x80u) == 0) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v19;
      }
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = buf;
      }
      else {
        unsigned __int8 v23 = *(unsigned char **)buf;
      }
      *(_DWORD *)CFIndex v48 = 136315650;
      *(void *)&v48[4] = v23;
      if (v22) {
        uint64_t v24 = " ";
      }
      else {
        uint64_t v24 = "";
      }
      *(_WORD *)&v48[12] = 2080;
      *(void *)&v48[14] = v24;
      __int16 v49 = 1024;
      int v50 = v15;
      _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "%s%screating \"mic-ref-sync\" node with time delta of %d samples", v48, 0x1Cu);
    }
    if ((char)v47 < 0) {
      operator delete(*(void **)buf);
    }
  }
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_mic_format(a1, (uint64_t)v48);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_ref_format(a1, (uint64_t)buf);
  block_uint64_t size = vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_block_size(a1);
  uint64_t ref_audio_ring_buffer_capacity = vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_ref_audio_ring_buffer_capacity(a1);
  __int16 v25 = (vp *)vp::allocate_unique_noexcept<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(&v45, (uint64_t)v48, (uint64_t)buf, &block_size, &v44, &ref_audio_ring_buffer_capacity, (uint64_t)v43);
  if (*(void *)&v43[0])
  {
    vp::vx::io::Object::get_log_context(*(void *)&v43[0] + 120, v48);
    uint64_t v26 = *(void *)v48;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Mic_Ref_Sync");
    vp::vx::io::Object::Log_Context::set_user_info(v26, &__p);
    if (v40 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __int16 v25 = *(vp **)&v48[8];
    if (*(void *)&v48[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v48[8]);
    }
  }
  __int16 v27 = vp::get_log(v25);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v28 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24);
    }
    else {
      uint64_t v28 = 0;
    }
    vp::vx::io::get_log_context_info(v28, (uint64_t)"vp::vx::IO_Mic_Ref_Sync_Node_Factory]", 36, v48);
    uint64_t v29 = HIBYTE(v49);
    uint64_t v30 = *(void *)&v48[8];
    uint64_t v32 = vp::get_log(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      if ((v29 & 0x80u) == 0) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = v30;
      }
      CFIndex v34 = *(unsigned char **)v48;
      if (v49 >= 0) {
        CFIndex v34 = v48;
      }
      if (v33) {
        CFStringRef v35 = " ";
      }
      else {
        CFStringRef v35 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v34;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v35;
      _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%s%sdid create new \"mic-ref-sync\" node", buf, 0x16u);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)v48);
    }
  }
  long long v36 = v43[0];
  long long v37 = v43[1];
  *(void *)&v43[0] = 0;
  *a3 = v36;
  a3[1] = v37;
  return std::unique_ptr<vp::vx::io::nodes::Mic_Ref_Sync_Node,vp::Allocator_Delete<vp::vx::io::nodes::Mic_Ref_Sync_Node>>::reset[abi:ne180100]((void **)v43, 0);
}

void sub_1BB21C5B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_mic_ref_time_delta(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 96;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB21C618(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

void **vp::allocate_unique_noexcept<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, int *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  return vp::allocate_unique<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1BB21C650(void *a1)
{
  uint64_t v2 = (std::pmr *)__cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  v1[1] = std::pmr::get_default_resource(v2);
  __cxa_end_catch();
}

void vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_mic_format(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 48;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v7, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v3, (vp::vx::data_flow::Value *)v7);
  uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  long long v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(v5 + 32);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v7);
}

void sub_1BB21C6E4(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

void vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_ref_format(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 72;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v7, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v3, (vp::vx::data_flow::Value *)v7);
  uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  long long v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(v5 + 32);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v7);
}

void sub_1BB21C760(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_block_size(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 24;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB21C7D0(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Mic_Ref_Sync_Node_Factory::get_ref_audio_ring_buffer_capacity(vp::vx::IO_Mic_Ref_Sync_Node_Factory *this)
{
  uint64_t v1 = (char *)this + 120;
  uint64_t default_resource = std::pmr::get_default_resource(this);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v1, (vp::vx::data_flow::Value *)v5);
  uint64_t v3 = *(void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  return v3;
}

void sub_1BB21C840(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __clang_call_terminate(a1);
}

double vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  float v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = operator new(0x20uLL);
  *long long v6 = &unk_1F14A0688;
  v6[1] = v5;
  void v6[2] = v4;
  void v9[3] = v6;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
  unint64_t v12 = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_1F149D148;
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
  unint64_t v12 = v7;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v11);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(unsigned int,unsigned int const&)>::~__value_func[abi:ne180100](v9);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 24, a2).n128_u64[0];
  return result;
}

void sub_1BB21C978(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  float v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = operator new(0x20uLL);
  *long long v6 = &unk_1F14A06D0;
  v6[1] = v5;
  void v6[2] = v4;
  void v9[3] = v6;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
  unint64_t v12 = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
  unint64_t v12 = v7;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v11);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v9);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 48, a2).n128_u64[0];
  return result;
}

void sub_1BB21CAAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  float v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = operator new(0x20uLL);
  *long long v6 = &unk_1F14A0718;
  v6[1] = v5;
  void v6[2] = v4;
  void v9[3] = v6;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
  unint64_t v12 = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_1F149D220;
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
  unint64_t v12 = v7;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v11);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(unsigned int,CA::StreamDescription const&)>::~__value_func[abi:ne180100](v9);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 72, a2).n128_u64[0];
  return result;
}

void sub_1BB21CBE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  float v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = operator new(0x20uLL);
  *long long v6 = &unk_1F14A0810;
  v6[1] = v5;
  void v6[2] = v4;
  void v9[3] = v6;
  std::__function::__value_func<void ()(unsigned int,int const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
  unint64_t v12 = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_1F14A07C8;
  std::__function::__value_func<void ()(unsigned int,int const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
  unint64_t v12 = v7;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v11);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100](v9);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 96, a2).n128_u64[0];
  return result;
}

void sub_1BB21CD14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  float v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = operator new(0x20uLL);
  *long long v6 = &unk_1F14A0858;
  v6[1] = v5;
  void v6[2] = v4;
  void v9[3] = v6;
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
  unint64_t v12 = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_1F149F520;
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
  unint64_t v12 = v7;
  vp::vx::data_flow::State<void>::register_listener(a2, (uint64_t)v11);
  std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__value_func[abi:ne180100](v9);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)&double result = vp::vx::data_flow::State<void>::operator=(a1 + 120, a2).n128_u64[0];
  return result;
}

void sub_1BB21CE48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Mic_Ref_Sync_Node_Factory_Provider::create_io_mic_ref_sync_node_factory()
{
}

void vp::vx::IO_Mic_Ref_Sync_Node_Factory_Provider::~IO_Mic_Ref_Sync_Node_Factory_Provider(vp::vx::IO_Mic_Ref_Sync_Node_Factory_Provider *this)
{
}

void **vp::allocate_unique<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, int *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v8 = v11;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = v8;
  *(_OWORD *)(a7 + 16) = xmmword_1BB871740;
  char v9 = (void *)std::pmr::polymorphic_allocator<vp::vx::io::nodes::Mic_Ref_Sync_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(&v11, a2, a3, a4, a5, a6);
  return std::unique_ptr<vp::vx::io::nodes::Mic_Ref_Sync_Node,vp::Allocator_Delete<vp::vx::io::nodes::Mic_Ref_Sync_Node>>::reset[abi:ne180100]((void **)a7, v9);
}

void sub_1BB21CF4C(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::io::nodes::Mic_Ref_Sync_Node,vp::Allocator_Delete<vp::vx::io::nodes::Mic_Ref_Sync_Node>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<vp::vx::io::nodes::Mic_Ref_Sync_Node,vp::Allocator_Delete<vp::vx::io::nodes::Mic_Ref_Sync_Node>>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::io::nodes::Mic_Ref_Sync_Node,0>(v2);
    return (void **)(*(uint64_t (**)(void *, void *, void *, void *))(*v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::io::nodes::Mic_Ref_Sync_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4, int *a5, uint64_t *a6)
{
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 144, 8);
  v14[0] = &v16;
  v14[1] = a1;
  vp::vx::io::nodes::Mic_Ref_Sync_Node::Mic_Ref_Sync_Node(v16, a2, a3, *a4, *a5, *a6);
  char v15 = 1;
  uint64_t v12 = v16;
  std::__exception_guard_exceptions<vp::vx::io::nodes::Mic_Ref_Sync_Node * std::pmr::polymorphic_allocator<vp::vx::io::nodes::Mic_Ref_Sync_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void std::__destroy_at[abi:ne180100]<vp::vx::io::nodes::Mic_Ref_Sync_Node,0>(void *a1)
{
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::Audio_Ring_Buffer *)(a1 + 13));
  vp::Audio_Ring_Buffer::~Audio_Ring_Buffer((vp::Audio_Ring_Buffer *)(a1 + 12));
  a1[15] = &unk_1F1493718;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::__exception_guard_exceptions<vp::vx::io::nodes::Mic_Ref_Sync_Node * std::pmr::polymorphic_allocator<vp::vx::io::nodes::Mic_Ref_Sync_Node>::new_object[abi:ne180100]<vp::vx::io::nodes::Mic_Ref_Sync_Node,CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>>>(CA::StreamDescription,CA::StreamDescription,unsigned int,int const&,std::chrono::duration<long long,std::ratio<1l,1000l>> &&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 144, 8);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0688;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0688;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A0688;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A0688;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1},std::allocator<void vp::vx::observe_uplink<unsigned int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<unsigned int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(vp::vx::data_flow::State<unsigned int>)::$_0)::{lambda(unsigned int,unsigned int const&)#1}>,void ()(unsigned int,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"\"mic-ref-sync\" I/O block size is %u", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A06D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A06D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A06D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A06D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(uint64_t a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10)
      {
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v8);
        if (v13 >= 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"\"mic-ref-sync\" microphone I/O format is %s", (uint64_t)&v15, v11);
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)__n128 __p = v15;
        uint64_t v13 = v16;
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v10 + 24))(v10, v6, __p);
        if (v14)
        {
          if (SHIBYTE(v13) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0718;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0718;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A0718;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A0718;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1},std::allocator<void vp::vx::observe_uplink<CA::StreamDescription,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<CA::StreamDescription> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(vp::vx::data_flow::State<CA::StreamDescription>)::$_0)::{lambda(unsigned int,CA::StreamDescription const&)#1}>,void ()(unsigned int,CA::StreamDescription const&)>::operator()(uint64_t a1, unsigned int *a2, CA::StreamDescription *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10)
      {
        CA::StreamDescription::AsString(a3, (uint64_t)__p, v8);
        if (v13 >= 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        caulk::make_string((caulk *)"\"mic-ref-sync\" reference I/O format is %s", (uint64_t)&v15, v11);
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)__n128 __p = v15;
        uint64_t v13 = v16;
        char v14 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v10 + 24))(v10, v6, __p);
        if (v14)
        {
          if (SHIBYTE(v13) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void vp::vx::data_flow::Value::Type_ID_Eraser<int>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<int>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<int>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<int>::copy_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<int>::move_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<int>::compare_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

uint64_t std::__function::__value_func<void ()(unsigned int,int const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A07C8;
  std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A07C8;
  std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F14A07C8;
  std::__function::__value_func<void ()(unsigned int,int const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB21DAE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A07C8;
  return std::__function::__value_func<void ()(unsigned int,int const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int *a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<int>::register_listener(std::function<void ()(unsigned int,int const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int *a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<int>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    double result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      return std::function<void ()(unsigned int,int const&)>::operator()(v4, v5);
    }
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,int const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0810;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0810;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A0810;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A0810;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1},std::allocator<void vp::vx::observe_uplink<int,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<int> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(vp::vx::data_flow::State<int>)::$_0)::{lambda(unsigned int,int const&)#1}>,void ()(unsigned int,int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int16x8_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"\"mic-ref-sync\" time delta is %d samples", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::__function::__value_func<void ()(unsigned int,int const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0858;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A0858;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A0858;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A0858;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1},std::allocator<void vp::vx::observe_uplink<std::chrono::duration<long long,std::ratio<1l,1000l>>,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>> &,vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(vp::vx::data_flow::State<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0)::{lambda(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)#1}>,void ()(unsigned int,std::chrono::duration<long long,std::ratio<1l,1000l>> const&)>::operator()(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int16x8_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        caulk::make_string((caulk *)"\"mic-ref-sync\" reference audio ring buffer capacity is %lld milliseconds", (uint64_t)__p, *a3);
        char v12 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v12)
        {
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t vp::vx::Voice_Processor_State_Manager::Observer::observe_state_change_begin(uint64_t this)
{
  uint64_t v2 = *(void *)(this + 16);
  uint64_t v1 = *(void *)(this + 24);
  if (v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v1 == 0;
  }
  if (!v3) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v1)
  {
    uint64_t v4 = v2 + 32 * v1;
    do
    {
      if (!v2) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      uint64_t v5 = *(void *)(v2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
      v2 += 32;
    }
    while (v2 != v4);
  }
  return this;
}

uint64_t vp::vx::Voice_Processor_State_Manager::Observer::observe_state_change_end(uint64_t this)
{
  uint64_t v2 = *(void *)(this + 80);
  uint64_t v1 = *(void *)(this + 88);
  if (v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v1 == 0;
  }
  if (!v3) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v1)
  {
    uint64_t v4 = v2 + 32 * v1;
    do
    {
      if (!v2) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      uint64_t v5 = *(void *)(v2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
      v2 += 32;
    }
    while (v2 != v4);
  }
  return this;
}

uint64_t vp::vx::Voice_Processor_State_Manager::Observer::add_state_change_begin_callback(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  if (v3 == a1[4])
  {
    uint64_t result = boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>(a1 + 1, a1[2] + 32 * v3, (const char *)1, a2, &v5);
    if (!v5) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  else
  {
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1[2] + 32 * v3, a2);
    ++a1[3];
  }
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Manager::Observer::add_state_change_end_callback(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[11];
  if (v3 == a1[12])
  {
    uint64_t result = boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>(a1 + 9, a1[10] + 32 * v3, (const char *)1, a2, &v5);
    if (!v5) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  else
  {
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1[10] + 32 * v3, a2);
    ++a1[11];
  }
  return result;
}

void vp::vx::Voice_Processor_State_Manager::Observer::~Observer(vp::vx::Voice_Processor_State_Manager::Observer *this)
{
}

{
  uint64_t vars8;

  boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9);
  boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1);

  JUMPOUT(0x1C185D370);
}

void *boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    do
    {
      --v2;
      uint64_t v3 = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3) + 4;
    }
    while (v2);
  }
  if (a1[3]) {
    boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  return a1;
}

void *boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

uint64_t boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)a1[1];
  uint64_t result = boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>((uint64_t)a1, (uint64_t)v10, a4, (uint64_t)&v10[4 * a1[2]], a2, a5, a6);
  if (v10)
  {
    for (uint64_t i = a1[2]; i; v10 += 4)
    {
      --i;
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
    }
    uint64_t result = (uint64_t)boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return result;
}

void sub_1BB21E774(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,std::function<void ()(void)>*,std::function<void ()(void)>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a3;
  uint64_t v11 = a5;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    uint64_t v11 = a5;
    do
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v11, v12);
      v12 += 32;
      v11 += 32;
    }
    while (v12 != v10);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v11, a7);
  if (v10 != a4)
  {
    uint64_t result = v11 + 32;
    do
    {
      uint64_t v14 = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](result, v10);
      v10 += 32;
      uint64_t result = v14 + 32;
    }
    while (v10 != a4);
  }
  return result;
}

uint64_t *vp::vx::data_flow::State_Manager::State_Manager(uint64_t *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  __p[0] = a2;
  uint64_t v3 = (vp *)_ZNSt3__115allocate_sharedB8ne180100IN2vp2vx9data_flow6EngineENS1_9AllocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p, a1);
  log = vp::get_log(v3);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::State_Manager]", 32, __p);
    unint64_t v6 = v14;
    uint64_t v7 = __p[1];
    int16x8_t v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = v6;
      }
      else {
        unint64_t v9 = (unint64_t)v7;
      }
      uint64_t v10 = (void **)__p[0];
      if ((v14 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      if (v9) {
        uint64_t v11 = " ";
      }
      else {
        uint64_t v11 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v16 = v10;
      __int16 v17 = 2080;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB21E9D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN2vp2vx9data_flow6EngineENS1_9AllocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 704, 64);
  uint64_t v5 = *a1;
  v4[1] = 0;
  void v4[2] = 0;
  *uint64_t v4 = &unk_1F14A08D0;
  v4[8] = v5;
  uint64_t result = vp::vx::data_flow::Engine::Engine((vp::vx::data_flow::Engine *)(v4 + 16));
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void vp::vx::data_flow::State_Manager::~State_Manager(std::__shared_weak_count **this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  log = vp::get_log((vp *)this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::data_flow::State_Manager]", 32, __p);
    unint64_t v4 = v12;
    uint64_t v5 = __p[1];
    unint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      int16x8_t v8 = (void **)__p[0];
      if ((v12 & 0x80u) == 0) {
        int16x8_t v8 = __p;
      }
      if (v7) {
        unint64_t v9 = " ";
      }
      else {
        unint64_t v9 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unsigned __int8 v14 = v8;
      __int16 v15 = 2080;
      uint64_t v16 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = this[1];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void vp::vx::data_flow::State_Manager::set_delegate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  vp::vx::data_flow::Engine::set_state_manager_delegate(v2, (long long *)v3);
  if (v3[1]) {
    std::__shared_weak_count::__release_weak(v3[1]);
  }
}

void vp::vx::data_flow::State_Manager::create_state(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(std::__shared_mutex_base **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  v8.n128_u64[0] = (unint64_t)v5;
  v8.n128_u64[1] = v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *(std::__shared_mutex_base **)a1;
  }
  int state = vp::vx::data_flow::Engine::create_state(v5, a2);
  vp::vx::data_flow::State<void>::State(a3, &v8, state);
  if (v8.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8.n128_u64[1]);
  }
}

{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_mutex_base *v9;
  unint64_t v10;
  int state;
  uint64_t v12;
  __n128 v13;
  void v14[3];

  void v14[2] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  v14[0] = (char *)&v12 - v8;
  v14[1] = v7;
  if (v7) {
    memmove((char *)&v12 - v8, v6, 4 * v7);
  }
  unint64_t v9 = *(std::__shared_mutex_base **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  v13.n128_u64[0] = *(void *)a1;
  v13.n128_u64[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    unint64_t v9 = *(std::__shared_mutex_base **)a1;
  }
  int state = vp::vx::data_flow::Engine::create_state(v9, a2, (uint64_t)v14);
  vp::vx::data_flow::State<void>::State(a3, &v13, state);
  if (v13.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13.n128_u64[1]);
  }
}

void vp::vx::data_flow::State_Manager::find_state(vp::vx::data_flow::State_Manager *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (vp::vx::data_flow::Engine::find_and_retain_state(*(std::__shared_mutex_base **)this, a2))
  {
    unint64_t v6 = *((void *)this + 1);
    v7.n128_u64[0] = *(void *)this;
    v7.n128_u64[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::data_flow::State<void>::State(a3, &v7, a2);
    if (v7.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7.n128_u64[1]);
    }
  }
  else
  {
    vp::vx::data_flow::State<void>::State(a3);
  }
}

void vp::vx::data_flow::State_Manager::create_state_transaction(vp::vx::data_flow::State_Manager *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::data_flow::State_Transaction::State_Transaction(a2, (uint64_t)&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::__shared_ptr_emplace<vp::vx::data_flow::Engine,vp::Allocator<vp::vx::data_flow::Engine>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A08D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vp::vx::data_flow::Engine,vp::Allocator<vp::vx::data_flow::Engine>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A08D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D360);
}

void std::__shared_ptr_emplace<vp::vx::data_flow::Engine,vp::Allocator<vp::vx::data_flow::Engine>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<vp::vx::data_flow::Engine,vp::Allocator<vp::vx::data_flow::Engine>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), a1, 704, 64);
}

void vp::utility::temporary_directory_path(std::string *a1@<X8>)
{
  NSTemporaryDirectory();
  id v3 = objc_claimAutoreleasedReturnValue();
  unint64_t v4 = (char *)[v3 UTF8String];
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(a1, &v4);
}

uint64_t *vp::Audio_Capture::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void vp::Audio_Capture::~Audio_Capture(vp::Audio_Capture *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void vp::Audio_Capture::create(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unint64_t v6 = a1;
  __n128 v8 = __p;
  std::__fs::filesystem::path::extension[abi:ne180100](a1, (uint64_t)__p);
  if (v14 < 0) {
    __n128 v8 = (void **)__p[0];
  }
  size_t v9 = strlen((const char *)v8);
  uint64_t v10 = vp::utility::LUT<vp::utility::LUT_Row<std::string_view,unsigned int>,2ul>::get<0ul,1ul,std::string_view,unsigned int>((uint64_t)&vp::Audio_Capture::create(std::__fs::filesystem::path const&,CA::StreamDescription const&,vp::Audio_Capture::RingBufferMode)::s_file_type_id_lut, v8, v9);
  if ((a3 - 1) >= 3) {
    uint64_t v11 = 4096;
  }
  else {
    uint64_t v11 = qword_1BB872778[a3 - 1];
  }
  if ((v6->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v6 = (const std::__fs::filesystem::path *)v6->__pn_.__r_.__value_.__r.__words[0];
  }
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1) {
    dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_0);
  }
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction) {
    uint64_t v12 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v11, 0, v6, v10, 0, a2);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  *a4 = v12;
}

void sub_1BB21F12C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB21F0F8);
}

uint64_t vp::Audio_Capture::write@<X0>(vp::Audio_Capture *this@<X0>, const AudioBufferList *a2@<X1>, const AudioTimeStamp *a3@<X3>, uint64_t a4@<X2>, unsigned char *a5@<X8>)
{
  uint64_t v6 = *(void *)this;
  if (!a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const AudioBufferList *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a4, a2, 1, -1);
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    *a5 = 0;
    char v8 = 1;
    goto LABEL_6;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const AudioBufferList *, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a4, a2, 1, (uint64_t)a3->mSampleTime);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  char v8 = 0;
  *(_DWORD *)a5 = result;
LABEL_6:
  a5[4] = v8;
  return result;
}

uint64_t vp::Audio_Capture::write_async@<X0>(vp::Audio_Capture *this@<X0>, const AudioBufferList *a2@<X1>, const AudioTimeStamp *a3@<X3>, uint64_t a4@<X2>, unsigned char *a5@<X8>)
{
  uint64_t v6 = *(void *)this;
  if (!a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const AudioBufferList *, void, uint64_t))(*(void *)v6 + 96))(v6, a4, a2, 0, -1);
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    *a5 = 0;
    char v8 = 1;
    goto LABEL_6;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const AudioBufferList *, void, uint64_t))(*(void *)v6 + 96))(v6, a4, a2, 0, (uint64_t)a3->mSampleTime);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  char v8 = 0;
  *(_DWORD *)a5 = result;
LABEL_6:
  a5[4] = v8;
  return result;
}

uint64_t vp::utility::LUT<vp::utility::LUT_Row<std::string_view,unsigned int>,2ul>::get<0ul,1ul,std::string_view,unsigned int>(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v6 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v8 = i;
    uint64_t v9 = a1 + 16 * v6;
    if (*(void *)(v9 + 8) == __n && !memcmp(*(const void **)v9, __s2, __n)) {
      break;
    }
    uint64_t v6 = 1;
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  return *(unsigned int *)(a1 + 4 * v6 + 32) | 0x100000000;
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke()
{
  uint64_t result = dlopen((const char *)_ZZZ16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3_EUb_E8kLibPath, 5);
  if (result)
  {
    uint64_t result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

double CA::AsString@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  vp::utility::encode_to_base_64(*(vp::utility **)a1, (const unsigned __int8 *)(*(void *)(a1 + 8) - *(void *)a1), &v4);
  if (!v5) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1BB21F3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::Voice_Processor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F14A0B48;
  *(void *)(a1 + 8) = &unk_1F14A0BF8;
  vp::vx::Voice_Processor_State_Manager::Voice_Processor_State_Manager((vp::vx::Voice_Processor_State_Manager *)(a1 + 16));
  *(void *)a1 = &unk_1F14A0928;
  *(void *)(a1 + 8) = &unk_1F14A0A18;
  *(void *)(a1 + 248) = &unk_1F14A0A48;
  *(void *)(a1 + 256) = &unk_1F14A0A80;
  vp::Context::Context(a1 + 264, a2);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  std::shared_ptr<vp::vx::Configuration_Database>::shared_ptr[abi:ne180100]<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>,void>((uint64_t *)(a1 + 472), a4);
  *(void *)(a1 + 488) = vp::utility::CASuperBowl((vp::utility *)(a2 + 72), v8);
  long long v52 = xmmword_1BB872858;
  long long v53 = unk_1BB872868;
  long long v54 = xmmword_1BB872878;
  *(_OWORD *)__n128 __p = xmmword_1BB872818;
  long long v49 = unk_1BB872828;
  long long v50 = xmmword_1BB872838;
  long long v51 = unk_1BB872848;
  uint64_t v9 = (std::pmr *)vp::utility::Quantization_Table<unsigned int>::Quantization_Table((void *)(a1 + 496), __p, 0x1CuLL);
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 52std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource(v9);
  *(void *)(a1 + 544) = default_resource;
  *(_OWORD *)(a1 + 55boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 60std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 624) = std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 63boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a1 + 656;
  *(_OWORD *)(a1 + 64std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = xmmword_1BB872790;
  *(void *)(a1 + 728) = a1;
  std::allocate_shared[abi:ne180100]<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>,caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>&,void>(a1 + 728, (void *)(a1 + 736));
  *(unsigned char *)(a1 + 75boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 768) = 0;
  *(void *)(a1 + 776) = 0;
  vp::vx::data_flow::State_Transaction::State_Transaction((vp::vx::data_flow::State_Transaction *)(a1 + 784), (vp::vx::data_flow::State_Manager *)(a1 + 64));
  vp::vx::data_flow::State<void>::State(a1 + 808);
  uint64_t v11 = (std::pmr *)vp::vx::data_flow::State<void>::State(a1 + 832);
  uint64_t v12 = (std::pmr *)std::pmr::get_default_resource(v11);
  *(void *)(a1 + 856) = v12;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 88std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 91boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 92std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 96std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 1065353216;
  __p[0] = (void *)std::pmr::get_default_resource(v12);
  uint64_t v13 = (std::pmr *)vp::vx::Property_Manager::Property_Manager(a1 + 968, 128, __p);
  *(_DWORD *)(a1 + 1128) = 0;
  uint64_t v14 = std::pmr::get_default_resource(v13);
  __int16 v15 = (std::pmr *)vp::vx::io::Property_Exchange::Property_Exchange(a1 + 1136, v14);
  uint64_t v16 = std::pmr::get_default_resource(v15);
  uint64_t v17 = (std::pmr *)vp::vx::IO_Parameter_Setter_Command_Factory::IO_Parameter_Setter_Command_Factory((void *)(a1 + 1192), v16);
  uint64_t v18 = std::pmr::get_default_resource(v17);
  uint64_t v19 = (std::pmr *)vp::vx::IO_Parameter_Setter_Delegate_Factory::IO_Parameter_Setter_Delegate_Factory((void *)(a1 + 1256), v18);
  uint64_t v20 = std::pmr::get_default_resource(v19);
  uint64_t v21 = (std::pmr *)vp::vx::io::Property_Exchange::Property_Exchange(a1 + 1320, v20);
  uint64_t v22 = std::pmr::get_default_resource(v21);
  unsigned __int8 v23 = (std::pmr *)vp::vx::IO_Property_Setter_Command_Factory::IO_Property_Setter_Command_Factory((void *)(a1 + 1376), v22);
  uint64_t v24 = std::pmr::get_default_resource(v23);
  __int16 v25 = (std::pmr *)vp::vx::IO_Property_Setter_Delegate_Factory::IO_Property_Setter_Delegate_Factory((void *)(a1 + 1440), v24);
  uint64_t v26 = (std::pmr *)std::pmr::get_default_resource(v25);
  *(void *)(a1 + 1504) = v26;
  *(void *)(a1 + 151boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = a1 + 1536;
  *(_OWORD *)(a1 + 152std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = xmmword_1BB8727A0;
  *(void *)(a1 + 192std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = std::pmr::get_default_resource(v26);
  *(void *)(a1 + 1928) = a1 + 1952;
  *(_OWORD *)(a1 + 1936) = xmmword_1BB8727A0;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 235boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  vp::rpb::Wire::Wire((void *)(a1 + 2368));
  vp::rpb::Wire::Wire((void *)(a1 + 2376));
  vp::Audio_File::Audio_File((void *)(a1 + 2384));
  vp::Audio_File::Audio_File((void *)(a1 + 2392));
  *(void *)(a1 + 240std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(_WORD *)(a1 + 2408) = 1;
  *(unsigned char *)(a1 + 241std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 1;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(void *)(a1 + 243boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = -1;
  *(void *)(a1 + 244std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = -1;
  *(void *)(a1 + 2448) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 2456) = 0;
  *(unsigned char *)(a1 + 2464) = 0;
  *(void *)(a1 + 247boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 248std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(unsigned char *)(a1 + 2488) = 0;
  *(_DWORD *)(a1 + 2496) = -1;
  *(unsigned char *)(a1 + 259boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 252std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(unsigned char *)(a1 + 2536) = 0;
  *(void *)(a1 + 2616) = -1;
  *(void *)(a1 + 2608) = -1;
  *(void *)(a1 + 260std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = -1;
  *(void *)&long long v27 = 0xFFFFFFFF00000000;
  *((void *)&v27 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 2624) = v27;
  *(_OWORD *)(a1 + 264std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v27;
  *(_DWORD *)(a1 + 2656) = 0;
  *(void *)(a1 + 266std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = -1;
  *(void *)(a1 + 2668) = -1;
  vp::Audio_File::Audio_File((void *)(a1 + 2680));
  vp::Audio_File::Audio_File((void *)(a1 + 2688));
  vp::Audio_File::Audio_File((void *)(a1 + 2696));
  *(unsigned char *)(a1 + 283boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)(a1 + 284std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(unsigned char *)(a1 + 272std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v28 = *(void **)(a1 + 728);
  uint64_t v29 = *(std::__shared_weak_count **)(a1 + 744);
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v30 = *(void **)(a1 + 80);
  __p[0] = &unk_1F14A2588;
  __p[1] = v28;
  *(void *)&long long v49 = v29;
  *((void *)&v49 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = __p;
  vp::vx::Voice_Processor_State_Manager::Observer::add_state_change_begin_callback(v30, (uint64_t)__p);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
  char v31 = *(void **)(a1 + 728);
  uint64_t v32 = *(std::__shared_weak_count **)(a1 + 744);
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v33 = *(void **)(a1 + 80);
  __p[0] = &unk_1F14A25D0;
  __p[1] = v31;
  *(void *)&long long v49 = v32;
  *((void *)&v49 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = __p;
  vp::vx::Voice_Processor_State_Manager::Observer::add_state_change_end_callback(v33, (uint64_t)__p);
  CFIndex v34 = (vp *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
  log = vp::get_log(v34);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    long long v37 = (void *)BYTE7(v49);
    uint64_t v38 = __p[1];
    uint64_t v39 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)v37 >= 0) {
        char v40 = v37;
      }
      else {
        char v40 = v38;
      }
      CFIndex v41 = (void **)__p[0];
      if ((SBYTE7(v49) & 0x80u) == 0) {
        CFIndex v41 = __p;
      }
      if (v40) {
        CFStringRef v42 = " ";
      }
      else {
        CFStringRef v42 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v45 = v41;
      __int16 v46 = 2080;
      unsigned __int8 v47 = v42;
      _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }
    if (SBYTE7(v49) < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1BB21F9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a15);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

vp::vx::Voice_Processor_State_Manager *vp::vx::Voice_Processor_State_Manager::Voice_Processor_State_Manager(vp::vx::Voice_Processor_State_Manager *this)
{
  *(void *)this = dispatch_queue_create("com.apple.coreaudio.VoiceProcessor", MEMORY[0x1E4F14430]);
  *((void *)this + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = dispatch_queue_create("com.apple.coreaudio.VoiceProcessor", 0);
  *((void *)this + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  uint64_t v2 = (std::pmr *)vp::vx::data_flow::State<void>::State((uint64_t)this + 24);
  uint64_t default_resource = std::pmr::get_default_resource(v2);
  std::string v4 = (std::pmr *)vp::vx::data_flow::State_Manager::State_Manager((char *)this + 48, default_resource);
  *((void *)this + 8) = 0;
  *((void *)this + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 0;
  uint64_t v14 = std::pmr::get_default_resource(v4);
  vp::cf::Notification_Manager::Notification_Manager((void *)this + 10, &v14);
  char v5 = *((void *)this + 1);
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v14 = std::pmr::get_default_resource((std::pmr *)v5);
  vp::darwin::Notification_Manager::Notification_Manager((void *)this + 12, (uint64_t *)&object, &v14);
  uint64_t v6 = (std::pmr *)object;
  if (object) {
    dispatch_release(object);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  __n128 v7 = (std::pmr *)std::pmr::get_default_resource(v6);
  *((void *)this + 16) = v7;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = std::pmr::get_default_resource(v7);
  *((void *)this + 1boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 0;
  *((_DWORD *)this + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 1065353216;
  MEMORY[0x1C185CE10]((char *)this + 168);
  char v8 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A0C28;
  _ZNSt3__112construct_atB8ne180100IN2vp2vx29Voice_Processor_State_Manager8ObserverEJEPS4_EEPT_S7_DpOT0_((uint64_t)&v8[1]);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = v8 + 1;
  *((void *)this + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = v8;
  if (!v9)
  {
    uint64_t v11 = v8 + 1;
    uint64_t v12 = v8;
    goto LABEL_9;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  char v8 = (std::__shared_weak_count *)*((void *)this + 9);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 8);
  uint64_t v12 = v8;
  if (v8) {
LABEL_9:
  }
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  vp::vx::data_flow::State_Manager::set_delegate((uint64_t *)this + 6, (uint64_t)&v11);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  return this;
}

void *vp::utility::Quantization_Table<unsigned int>::Quantization_Table(void *a1, const void *a2, unint64_t a3)
{
  __n128 __p = 0;
  long long __dst = 0;
  uint64_t v10 = 0;
  if (a3)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](&__p, a3);
    uint64_t v6 = (char *)__dst;
    memmove(__dst, a2, 4 * a3);
    long long __dst = &v6[4 * a3];
  }
  vp::utility::Quantization_Table<unsigned int>::Quantization_Table(a1, (uint64_t)&__p);
  if (__p)
  {
    long long __dst = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1BB21FBE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

unint64_t vp::vx::Voice_Processor::add_component(vp::vx::Voice_Processor *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    vp::vx::Voice_Processor::add_component();
  }
  vp::vx::Voice_Processor::make_weak_state_observer(a1, &v6);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 32))(v2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::emplace_back<std::unique_ptr<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>>>((uint64_t)a1 + 520, a2);
}

void sub_1BB21FC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::make_weak_state_observer(vp::vx::Voice_Processor *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (!v2
    || (uint64_t v4 = *((void *)this + 91),
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v2),
        (char v5 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v4 + 248;
  if (!v4) {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);

  std::__shared_weak_count::__release_weak(v2);
}

unint64_t std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::emplace_back<std::unique_ptr<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    uint64_t v7 = a1 + 24;
    uint64_t v8 = (uint64_t)(v5 - *(void *)a1) >> 4;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - *(void *)a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v18 = a1 + 24;
    if (v11) {
      uint64_t v12 = std::pmr::polymorphic_allocator<vp::vx::Property_Manager::Listener>::allocate[abi:ne180100](v7, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = v12;
    __int16 v15 = (uint64_t *)(v12 + 16 * v8);
    unint64_t v17 = v12 + 16 * v11;
    std::shared_ptr<vp::vx::Component>::shared_ptr[abi:ne180100]<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>,void>(v15, a2);
    uint64_t v16 = v15 + 2;
    std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::__swap_out_circular_buffer((uint64_t *)a1, &v14);
    unint64_t v6 = *(void *)(a1 + 8);
    std::__split_buffer<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>> &>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::shared_ptr<vp::vx::Component>::shared_ptr[abi:ne180100]<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>,void>(*(uint64_t **)(a1 + 8), a2);
    unint64_t v6 = v5 + 16;
    *(void *)(a1 + 8) = v5 + 16;
  }
  *(void *)(a1 + 8) = v6;
  return v6 - 16;
}

void sub_1BB21FE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::set_messenger(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  return vp::vx::Voice_Processor::exception_guard(a1, (uint64_t)"set messenger", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::set_messenger(std::shared_ptr<caulk::concurrent::messenger>)::$_0>, (uint64_t)v3);
}

uint64_t vp::vx::Voice_Processor::exception_guard(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  unsigned char v6[8] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a3;
  v6[0] = a4;
  return a3(v6);
}

void sub_1BB21FF18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v19);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      uint64_t v22 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }
      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB21FEE4);
  }
  _Unwind_Resume(a1);
}

void *vp::vx::Voice_Processor::configure@<X0>(void (***this)(vp::vx::Uplink_Configuration_Manager *__hidden this)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = (vp::vx::Voice_Processor *)this;
  void v5[4] = *MEMORY[0x1E4F143B8];
  if (!this[69])
  {
    this = vp::vx::get_default_uplink_configuration_delegate((vp::vx *)this);
    *((void *)v2 + 6boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = this;
  }
  if (!*((void *)v2 + 70)) {
    *((void *)v2 + 7std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = vp::vx::get_default_downlink_configuration_delegate((vp::vx *)this);
  }
  if (!*((void *)v2 + 71)) {
    *((void *)v2 + 7boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = &vp::vx::Voice_Processor::configure(void)::s_default_provider;
  }
  if (!*((void *)v2 + 72)) {
    *((void *)v2 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::Voice_Processor::configure(void)::s_default_provider;
  }
  if (!*((void *)v2 + 73)) {
    *((void *)v2 + 73) = &vp::vx::Voice_Processor::configure(void)::s_default_provider;
  }
  if (!*((void *)v2 + 74)) {
    *((void *)v2 + 74) = &vp::vx::Voice_Processor::configure(void)::s_default_provider;
  }
  if (!*((void *)v2 + 75)) {
    *((void *)v2 + 75) = &vp::vx::Voice_Processor::configure(void)::s_default_provider;
  }
  v5[0] = &unk_1F14A2618;
  void v5[3] = v5;
  vp::vx::Voice_Processor::call_sync((uint64_t)v2, (uint64_t)v5);
  double result = std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v5);
  *a2 = 0;
  a2[4] = 1;
  return result;
}

void *vp::vx::Voice_Processor::call_sync(uint64_t a1, uint64_t a2)
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  void v6[2] = ___ZN2vp2vx15Voice_Processor9call_syncENSt3__18functionIFvRS1_EEE_block_invoke;
  uint64_t v6[3] = &__block_descriptor_tmp_7;
  void v6[4] = a1;
  std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  dispatch_sync(v4, v6);
  if (v4) {
    dispatch_release(v4);
  }
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v7);
}

{
  NSObject *v4;
  void v6[5];
  void v7[5];

  void v7[4] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  void v6[2] = ___ZNK2vp2vx15Voice_Processor9call_syncENSt3__18functionIFvRKS1_EEE_block_invoke;
  uint64_t v6[3] = &__block_descriptor_tmp_134;
  void v6[4] = a1;
  std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  dispatch_sync(v4, v6);
  if (v4) {
    dispatch_release(v4);
  }
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::~__value_func[abi:ne180100](v7);
}

void sub_1BB220268(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::Voice_Processor::~Voice_Processor(vp::vx::Voice_Processor *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14A0928;
  *((void *)this + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = &unk_1F14A0A18;
  *((void *)this + 3boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = &unk_1F14A0A48;
  *((void *)this + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F14A0A80;
  uint64_t v2 = (char *)this + 728;
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)this + 728);
  vp::rpb::Server::get_shared_instance((uint64_t)buf);
  if (*(void *)buf)
  {
    vp::objc::ID::ID((vp::objc::ID *)v38, (id *)buf);
    __p[0] = this;
    vp::vx::Voice_Processor::exception_guard((uint64_t)this, (uint64_t)"disconnect RPB server", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>, (uint64_t)__p);
    vp::objc::ID::~ID((vp::objc::ID *)v38);
    vp::objc::ID::ID((vp::objc::ID *)v37, (id *)buf);
    __p[0] = this;
    vp::vx::Voice_Processor::exception_guard((uint64_t)this, (uint64_t)"unregister RPB server listener", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::unregister_listener(vp::rpb::Server)::$_0>, (uint64_t)__p);
    vp::objc::ID::~ID((vp::objc::ID *)v37);
  }
  vp::objc::ID::~ID((vp::objc::ID *)buf);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_destroy_all((uint64_t)this + 1504);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_destroy_all((uint64_t)this + 1920);
  uint64_t v3 = *((void *)this + 300);
  *((void *)this + 30std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 293);
  long long v5 = 0uLL;
  *((_OWORD *)this + 146) = 0u;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    long long v5 = 0uLL;
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 303);
  *((_OWORD *)this + 15boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 293);
  *((_OWORD *)this + 146) = 0u;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *((void *)this + 313);
  *((void *)this + 313) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 295);
  *((void *)this + 294) = 0;
  *((void *)this + 295) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 316);
  *(_OWORD *)((char *)this + 252std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100]((uint64_t *)this + 65);
  log = vp::get_log(v11);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    unint64_t v14 = v36;
    __int16 v15 = __p[1];
    uint64_t v16 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if ((v14 & 0x80u) == 0) {
        unint64_t v17 = v14;
      }
      else {
        unint64_t v17 = (unint64_t)v15;
      }
      uint64_t v18 = (void **)__p[0];
      if ((v36 & 0x80u) == 0) {
        uint64_t v18 = __p;
      }
      if (v17) {
        uint64_t v19 = " ";
      }
      else {
        uint64_t v19 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v40 = 2080;
      CFIndex v41 = v19;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }
    if ((char)v36 < 0) {
      operator delete(__p[0]);
    }
  }
  std::unique_ptr<vp::vx::Orientation_Manager>::reset[abi:ne180100]((vp::vx::Orientation_Manager **)this + 355, 0);
  if (*((unsigned char *)this + 2832)) {
    vp::vx::Telephony_Utility_Manager::~Telephony_Utility_Manager((vp::vx::Voice_Processor *)((char *)this + 2720));
  }
  std::unique_ptr<vp::vx::System_Status_Manager>::reset[abi:ne180100]((vp::vx::System_Status_Manager **)this + 339, 0);
  uint64_t v20 = *((void *)this + 338);
  *((void *)this + 338) = 0;
  if (v20) {
    std::default_delete<vp::vx::Control_Center_Manager>::operator()[abi:ne180100]((uint64_t)this + 2704, v20);
  }
  vp::Audio_Buffer::~Audio_Buffer((vp::vx::Voice_Processor *)((char *)this + 2696));
  vp::Audio_Buffer::~Audio_Buffer((vp::vx::Voice_Processor *)((char *)this + 2688));
  vp::Audio_Buffer::~Audio_Buffer((vp::vx::Voice_Processor *)((char *)this + 2680));
  if (*((unsigned char *)this + 2592)) {
    vp::vx::IO_Personal_Audio_Command_Factory::~IO_Personal_Audio_Command_Factory((vp::vx::Voice_Processor *)((char *)this + 2536));
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 316);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = *((void *)this + 313);
  *((void *)this + 313) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  unsigned __int8 v23 = (std::__shared_weak_count *)*((void *)this + 303);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = *((void *)this + 300);
  *((void *)this + 30std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  vp::cf::Predicate::~Predicate((vp::vx::Voice_Processor *)((char *)this + 2392));
  vp::objc::ID::~ID((vp::vx::Voice_Processor *)((char *)this + 2384));
  vp::rpb::Connection::~Connection((vp::vx::Voice_Processor *)((char *)this + 2368));
  __int16 v25 = (std::__shared_weak_count *)*((void *)this + 295);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 293);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::~vector((void *)this + 240);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::~vector((void *)this + 188);
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector((void *)this + 181);
  *((void *)this + 185) = &unk_1F1493718;
  long long v27 = (std::__shared_weak_count *)*((void *)this + 187);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::~vector((void *)this + 173);
  *((void *)this + 177) = &unk_1F1493718;
  uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 179);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::~__hash_table((uint64_t)this + 1320);
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector((void *)this + 158);
  *((void *)this + 16boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &unk_1F1493718;
  uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 164);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Parameter_ID,vp::vx::data_flow::State<float>>>,void>::~vector((void *)this + 150);
  *((void *)this + 154) = &unk_1F1493718;
  uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 156);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t *)this + 142);
  caulk::concurrent::shared_spin_lock::~shared_spin_lock((vp::vx::Voice_Processor *)((char *)this + 1128));
  vp::vx::Property_Manager::~Property_Manager((vp::vx::Voice_Processor *)((char *)this + 968));
  std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::~__hash_table((uint64_t)this + 928);
  std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::~__hash_table((uint64_t)this + 888);
  boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::~vector((void *)this + 107);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 832);
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 808);
  vp::vx::data_flow::State_Transaction::~State_Transaction((vp::vx::Voice_Processor *)((char *)this + 784));
  caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::~lifetime_guard_base((uint64_t)v2);
  boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::~vector((void *)this + 78);
  char v31 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  __p[0] = (char *)this + 520;
  std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  uint64_t v32 = (void *)*((void *)this + 62);
  if (v32)
  {
    *((void *)this + 63) = v32;
    operator delete(v32);
  }
  uint64_t v33 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  CFIndex v34 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  vp::Context::~Context((vp::vx::Voice_Processor *)((char *)this + 264));
  vp::vx::Voice_Processor_State_Manager::~Voice_Processor_State_Manager((vp::vx::Voice_Processor *)((char *)this + 16));
}

{
  uint64_t vars8;

  vp::vx::Voice_Processor::~Voice_Processor(this);

  JUMPOUT(0x1C185D370);
}

void sub_1BB220860(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::Voice_Processor_State_Manager::~Voice_Processor_State_Manager(vp::vx::Voice_Processor_State_Manager *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    dispatch_source_cancel(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 0;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
    uint64_t v10 = *((void *)this + 8);
    uint64_t v11 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  vp::vx::data_flow::State_Manager::set_delegate((uint64_t *)this + 6, (uint64_t)&v10);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 168));
  std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::~__hash_table((uint64_t *)this + 14);
  long long v5 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  vp::vx::data_flow::State_Manager::~State_Manager((vp::vx::Voice_Processor_State_Manager *)((char *)this + 48));
  vp::vx::data_flow::State<void>::~State((uint64_t)this + 24);
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9) {
    dispatch_release(v9);
  }
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
}

void non-virtual thunk to'vp::vx::Voice_Processor::~Voice_Processor(vp::vx::Voice_Processor *this)
{
}

{
  vp::vx::Voice_Processor::~Voice_Processor((vp::vx::Voice_Processor *)((char *)this - 248));
}

{
  vp::vx::Voice_Processor::~Voice_Processor((vp::vx::Voice_Processor *)((char *)this - 256));
}

{
  uint64_t vars8;

  vp::vx::Voice_Processor::~Voice_Processor((vp::vx::Voice_Processor *)((char *)this - 8));

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  vp::vx::Voice_Processor::~Voice_Processor((vp::vx::Voice_Processor *)((char *)this - 248));

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  vp::vx::Voice_Processor::~Voice_Processor((vp::vx::Voice_Processor *)((char *)this - 256));

  JUMPOUT(0x1C185D370);
}

void *vp::vx::Voice_Processor::get_property@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  int v9 = a2;
  *(_DWORD *)a4 = 11;
  *(unsigned char *)(a4 + 4) = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_1F14A2660;
  v7[1] = &v9;
  v7[2] = a1;
  void v7[3] = a4;
  void v7[4] = a3;
  void v10[3] = v7;
  vp::vx::Voice_Processor::call_sync(a1, (uint64_t)v10);
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::~__value_func[abi:ne180100](v10);
}

void sub_1BB220B1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB220C10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *vp::vx::Voice_Processor::get_property_info@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  int v7 = a2;
  *(_DWORD *)a3 = 11;
  *(unsigned char *)(a3 + 16) = 0;
  long long v5 = operator new(0x20uLL);
  void *v5 = &unk_1F14A26A8;
  v5[1] = &v7;
  _OWORD v5[2] = a1;
  void v5[3] = a3;
  void v8[3] = v5;
  vp::vx::Voice_Processor::call_sync(a1, (uint64_t)v8);
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::~__value_func[abi:ne180100](v8);
}

void sub_1BB220CC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *vp::vx::Voice_Processor::set_property@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  int v9 = a2;
  *(_DWORD *)a4 = 11;
  *(unsigned char *)(a4 + 4) = 0;
  int v7 = operator new(0x28uLL);
  *int v7 = &unk_1F14A26F0;
  v7[1] = &v9;
  v7[2] = a1;
  void v7[3] = a4;
  void v7[4] = a3;
  void v10[3] = v7;
  vp::vx::Voice_Processor::call_sync(a1, (uint64_t)v10);
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v10);
}

void sub_1BB220D90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_listener(uint64_t a1, int a2, uint64_t a3)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  int v7 = a2;
  uint64_t v6 = a3;
  uint64_t v8 = 0;
  LOBYTE(vboost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 1;
  unint64_t v4 = operator new(0x28uLL);
  *unint64_t v4 = &unk_1F14A2738;
  v4[1] = &v7;
  void v4[2] = &v8;
  void v4[3] = &v6;
  void v4[4] = a1;
  void v10[3] = v4;
  vp::vx::Voice_Processor::call_sync(a1, (uint64_t)v10);
  std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v10);
  return v8;
}

void *vp::vx::Voice_Processor::remove_property_listener@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  int v9 = a2;
  uint64_t v8 = a3;
  *a4 = 0;
  a4[4] = 1;
  uint64_t v6 = operator new(0x28uLL);
  *uint64_t v6 = &unk_1F14A2780;
  v6[1] = &v9;
  void v6[2] = a4;
  uint64_t v6[3] = &v8;
  void v6[4] = a1;
  void v10[3] = v6;
  vp::vx::Voice_Processor::call_sync(a1, (uint64_t)v10);
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v10);
}

void vp::vx::Voice_Processor::begin_uplink_initialization(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  BOOL v5 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v7 = v28;
    uint64_t v8 = v27;
    int v9 = vp::get_log(log_context_info);
    BOOL v5 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v8;
      }
      p_p = __p;
      if ((v28 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      char v31 = p_p;
      __int16 v32 = 2080;
      uint64_t v33 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%sbegin uplink initialization", buf, 0x16u);
    }
    if ((char)v28 < 0) {
      operator delete(__p);
    }
  }
  unsigned int v13 = *((_DWORD *)this + 194);
  BOOL v14 = v13 > 6;
  int v15 = (1 << v13) & 0x6A;
  if (v14 || v15 == 0)
  {
    uint64_t v18 = vp::get_log((vp *)v5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      uint64_t v20 = v28;
      uint64_t v21 = v27;
      uint64_t v22 = vp::get_log(v19);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        if ((v20 & 0x80u) == 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v21;
        }
        uint64_t v24 = __p;
        if ((v28 & 0x80u) == 0) {
          uint64_t v24 = &__p;
        }
        if (v23) {
          __int16 v25 = " ";
        }
        else {
          __int16 v25 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        char v31 = v24;
        __int16 v32 = 2080;
        uint64_t v33 = v25;
        _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_FAULT, "%s%sfailed to begin uplink initialization", buf, 0x16u);
      }
      if ((char)v28 < 0) {
        operator delete(__p);
      }
    }
    char v17 = 0;
    *(_DWORD *)a2 = 8;
  }
  else
  {
    v29[0] = &unk_1F14A27C8;
    v29[3] = v29;
    vp::vx::Voice_Processor::call_sync((uint64_t)this, (uint64_t)v29);
    std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v29);
    *(unsigned char *)a2 = 0;
    char v17 = 1;
  }
  *(unsigned char *)(a2 + 4) = v17;
}

void vp::vx::Voice_Processor::end_uplink_initialization(vp::vx::Voice_Processor *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  BOOL v5 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v7 = v24;
    uint64_t v8 = v23;
    int v9 = vp::get_log(log_context_info);
    BOOL v5 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v8;
      }
      p_p = __p;
      if ((v24 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v27 = p_p;
      __int16 v28 = 2080;
      uint64_t v29 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%send uplink initialization", buf, 0x16u);
    }
    if ((char)v24 < 0) {
      operator delete(__p);
    }
  }
  if (*((_DWORD *)this + 194) == 2)
  {
    v25[0] = &unk_1F14A2810;
    int64x2_t v25[3] = v25;
    vp::vx::Voice_Processor::call_sync((uint64_t)this, (uint64_t)v25);
    std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v25);
    *a2 = 0;
    char v13 = 1;
  }
  else
  {
    BOOL v14 = vp::get_log((vp *)v5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      int v15 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      uint64_t v16 = v24;
      uint64_t v17 = v23;
      uint64_t v18 = vp::get_log(v15);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        if ((v16 & 0x80u) == 0) {
          uint64_t v19 = v16;
        }
        else {
          uint64_t v19 = v17;
        }
        uint64_t v20 = __p;
        if ((v24 & 0x80u) == 0) {
          uint64_t v20 = &__p;
        }
        if (v19) {
          uint64_t v21 = " ";
        }
        else {
          uint64_t v21 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v27 = v20;
        __int16 v28 = 2080;
        uint64_t v29 = v21;
        _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_FAULT, "%s%sfailed to end uplink initialization", buf, 0x16u);
      }
      if ((char)v24 < 0) {
        operator delete(__p);
      }
    }
    char v13 = 0;
    *(_DWORD *)a2 = 8;
  }
  a2[4] = v13;
}

void vp::vx::Voice_Processor::begin_downlink_initialization(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  BOOL v5 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v7 = v28;
    uint64_t v8 = v27;
    int v9 = vp::get_log(log_context_info);
    BOOL v5 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v8;
      }
      p_p = __p;
      if ((v28 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      char v31 = p_p;
      __int16 v32 = 2080;
      uint64_t v33 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%sbegin downlink initialization", buf, 0x16u);
    }
    if ((char)v28 < 0) {
      operator delete(__p);
    }
  }
  unsigned int v13 = *((_DWORD *)this + 194);
  BOOL v14 = v13 > 6;
  int v15 = (1 << v13) & 0x68;
  if (v14 || v15 == 0)
  {
    uint64_t v18 = vp::get_log((vp *)v5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      uint64_t v20 = v28;
      uint64_t v21 = v27;
      uint64_t v22 = vp::get_log(v19);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        if ((v20 & 0x80u) == 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v21;
        }
        unsigned __int8 v24 = __p;
        if ((v28 & 0x80u) == 0) {
          unsigned __int8 v24 = &__p;
        }
        if (v23) {
          __int16 v25 = " ";
        }
        else {
          __int16 v25 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        char v31 = v24;
        __int16 v32 = 2080;
        uint64_t v33 = v25;
        _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_FAULT, "%s%sfailed to begin downlink initialization", buf, 0x16u);
      }
      if ((char)v28 < 0) {
        operator delete(__p);
      }
    }
    char v17 = 0;
    *(_DWORD *)a2 = 8;
  }
  else
  {
    v29[0] = &unk_1F14A2858;
    v29[3] = v29;
    vp::vx::Voice_Processor::call_sync((uint64_t)this, (uint64_t)v29);
    std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v29);
    *(unsigned char *)a2 = 0;
    char v17 = 1;
  }
  *(unsigned char *)(a2 + 4) = v17;
}

void vp::vx::Voice_Processor::end_downlink_initialization(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  BOOL v5 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v7 = v23;
    uint64_t v8 = v22;
    int v9 = vp::get_log(log_context_info);
    BOOL v5 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v8;
      }
      p_p = __p;
      if ((v23 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v26 = p_p;
      __int16 v27 = 2080;
      unsigned __int8 v28 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%send downlink initialization", buf, 0x16u);
    }
    if ((char)v23 < 0) {
      operator delete(__p);
    }
  }
  if (*((_DWORD *)this + 194) == 4)
  {
    *(_DWORD *)a2 = 11;
    *(unsigned char *)(a2 + 4) = 0;
    v24[0] = &unk_1F14A28A0;
    v24[1] = a2;
    void v24[2] = this;
    v24[3] = v24;
    vp::vx::Voice_Processor::call_sync((uint64_t)this, (uint64_t)v24);
    std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v24);
  }
  else
  {
    unsigned int v13 = vp::get_log((vp *)v5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      BOOL v14 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      uint64_t v15 = v23;
      uint64_t v16 = v22;
      char v17 = vp::get_log(v14);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        if ((v15 & 0x80u) == 0) {
          uint64_t v18 = v15;
        }
        else {
          uint64_t v18 = v16;
        }
        uint64_t v19 = __p;
        if ((v23 & 0x80u) == 0) {
          uint64_t v19 = &__p;
        }
        if (v18) {
          uint64_t v20 = " ";
        }
        else {
          uint64_t v20 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v26 = v19;
        __int16 v27 = 2080;
        unsigned __int8 v28 = v20;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_FAULT, "%s%sfailed to end downlink initialization", buf, 0x16u);
      }
      if ((char)v23 < 0) {
        operator delete(__p);
      }
    }
    *(_DWORD *)a2 = 8;
    *(unsigned char *)(a2 + 4) = 0;
  }
}

void vp::vx::Voice_Processor::write_dsp_data(uint64_t a1@<X0>, uint64_t a2@<X1>, AudioBufferList *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  a6[4] = 1;
  vp::vx::Voice_Processor::components_begin_write_dsp_data<vp::vx::Uplink_Input_Port_ID,AudioTimeStamp const*>(a1, a2, a4);
  uint64_t v93 = a1 + 1128;
  unsigned int v12 = atomic_load((unsigned int *)(a1 + 1128));
  if (v12 > 0x7FFFFFFE)
  {
LABEL_5:
    char v94 = 0;
LABEL_11:
    if (a6[4]) {
      a6[4] = 0;
    }
    int v16 = 8;
LABEL_27:
    *(_DWORD *)a6 = v16;
    goto LABEL_28;
  }
  unsigned int v13 = v12;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 1128), &v13, v12 + 1);
    if (v13 == v12) {
      break;
    }
    unsigned int v12 = v13;
    if (v13 >= 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  char v94 = 1;
  uint64_t v14 = *(void *)(a1 + 2400);
  if (!v14 || !*(_DWORD *)(a1 + 780)) {
    goto LABEL_11;
  }
  if (a2 == 1)
  {
    uint64_t v15 = (unsigned int *)(a1 + 2472);
  }
  else
  {
    if (a2)
    {
LABEL_18:
      if (a6[4]) {
        a6[4] = 0;
      }
      int v16 = 9;
      goto LABEL_27;
    }
    uint64_t v15 = (unsigned int *)(a1 + 2448);
  }
  unsigned int v17 = *v15;
  if (*v15 == -1) {
    goto LABEL_18;
  }
  if (a2 == 1) {
    uint64_t v18 = (unsigned int *)(a1 + 2476);
  }
  else {
    uint64_t v18 = (unsigned int *)(a1 + 2452);
  }
  uint64_t v19 = (AudioTimeStamp *)*v18;
  if ((a5 & 0xFF00000000) != 0 && v19 != a5)
  {
    if (a6[4]) {
      a6[4] = 0;
    }
    int v16 = 1;
    goto LABEL_27;
  }
  if (*(unsigned char *)(a4 + 56))
  {
    uint64_t v22 = (AudioTimeStamp *)*v18;
    unsigned int v23 = v17;
    if (a2)
    {
      unsigned __int8 v24 = (double *)(a1 + 2480);
      __int16 v25 = (unsigned char *)(a1 + 2488);
    }
    else
    {
      unsigned __int8 v24 = (double *)(a1 + 2456);
      __int16 v25 = (unsigned char *)(a1 + 2464);
    }
    double v26 = *(double *)a4;
    if (*v25)
    {
      double v27 = *(double *)a4;
      if (*v24 != v26)
      {
        vp::vx::io::Graph::reset(v14, *(_DWORD *)(a1 + 2432), (uint64_t)v111);
        if (!v113[24]) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)v111);
        }
        uint64_t v14 = *(void *)(a1 + 2400);
      }
      double v26 = v27;
    }
    uint64_t v19 = v22;
    double v21 = v26 + (double)v22;
    char v20 = 1;
    unsigned int v17 = v23;
  }
  else
  {
    char v20 = 0;
    double v21 = 0.0;
  }
  vp::vx::io::Graph::copy_input(v14, v17, a3, (const AudioBufferList *)a4, v19, (uint64_t)v88);
  if (v92)
  {
    if (a2 == 1)
    {
      *(double *)(a1 + 248std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v21;
      *(unsigned char *)(a1 + 2488) = v20;
      *(unsigned char *)(a1 + 240boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 1;
    }
    else
    {
      *(double *)(a1 + 2456) = v21;
      *(unsigned char *)(a1 + 2464) = v20;
    }
    goto LABEL_28;
  }
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v111);
  unsigned __int8 v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"write uplink ", 13);
  if (a2 == 1) {
    uint64_t v29 = "hardware DSP ref input";
  }
  else {
    uint64_t v29 = "hardware DSP mic input";
  }
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" input", 6);
  uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v88);
  if (*(char *)(node_commands + 23) >= 0) {
    uint64_t v32 = *(unsigned __int8 *)(node_commands + 23);
  }
  else {
    uint64_t v32 = *(void *)(node_commands + 8);
  }
  log = vp::get_log((vp *)node_commands);
  BOOL v34 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
  if (v32)
  {
    if (v34)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v85);
      uint64_t v36 = v87;
      uint64_t v37 = v86;
      uint64_t v38 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        if ((v36 & 0x80u) == 0) {
          uint64_t v39 = v36;
        }
        else {
          uint64_t v39 = v37;
        }
        if ((v87 & 0x80u) == 0) {
          __int16 v40 = &v85;
        }
        else {
          __int16 v40 = v85;
        }
        if (v39) {
          CFIndex v41 = " ";
        }
        else {
          CFIndex v41 = "";
        }
        uint64_t v73 = v41;
        uint64_t v74 = v40;
        __p[0] = v114;
        std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::str[abi:ne180100]<vp::Real_Time_Safe_Allocator<char>>((uint64_t)v113, __p, v82);
        int v42 = SHIBYTE(v83);
        uint64_t v43 = v82[0];
        int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v88);
        __int16 v78 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
        uint64_t v79 = v45;
        __int16 v46 = __p;
        std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v78);
        if (v42 >= 0) {
          CFIndex v48 = v82;
        }
        else {
          CFIndex v48 = (uint64_t *)v43;
        }
        if (v81 < 0) {
          __int16 v46 = (void **)__p[0];
        }
        int v49 = v89;
        int v50 = v90;
        uint64_t log_source_file_path = vp::get_log_source_file_path(v91, v47);
        uint64_t v52 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v88);
        if (*(char *)(v52 + 23) >= 0) {
          uint64_t v53 = v52;
        }
        else {
          uint64_t v53 = *(void *)v52;
        }
        *(_DWORD *)std::string buf = 136316930;
        uint64_t v96 = v74;
        __int16 v97 = 2080;
        std::string v98 = v73;
        __int16 v99 = 2080;
        __int16 v100 = v48;
        __int16 v101 = 2080;
        __int16 v102 = v46;
        __int16 v103 = 1024;
        int v104 = v49;
        __int16 v105 = 1024;
        int v106 = v50;
        __int16 v107 = 2080;
        uint64_t v108 = log_source_file_path;
        __int16 v109 = 2080;
        uint64_t v110 = v53;
        long long v54 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
        uint64_t v55 = v38;
        uint32_t v56 = 74;
LABEL_89:
        _os_log_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_ERROR, v54, buf, v56);
        if (v81 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v83) < 0) {
          std::allocator_traits<vp::Real_Time_Safe_Allocator<char>>::deallocate[abi:ne180100](&v84, v82[0], v83 & 0x7FFFFFFFFFFFFFFFLL);
        }
        goto LABEL_93;
      }
      goto LABEL_93;
    }
  }
  else if (v34)
  {
    float v57 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v85);
    uint64_t v58 = v87;
    uint64_t v59 = v86;
    uint64_t v60 = vp::get_log(v57);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      if ((v58 & 0x80u) == 0) {
        uint64_t v61 = v58;
      }
      else {
        uint64_t v61 = v59;
      }
      if ((v87 & 0x80u) == 0) {
        uint64_t v62 = &v85;
      }
      else {
        uint64_t v62 = v85;
      }
      std::string::size_type v75 = v62;
      if (v61) {
        uint64_t v63 = " ";
      }
      else {
        uint64_t v63 = "";
      }
      __p[0] = v114;
      std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::str[abi:ne180100]<vp::Real_Time_Safe_Allocator<char>>((uint64_t)v113, __p, v82);
      int v64 = SHIBYTE(v83);
      unsigned __int8 v65 = (uint64_t *)v82[0];
      int v66 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v88);
      __int16 v78 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v66);
      uint64_t v79 = v67;
      std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v78);
      if (v64 >= 0) {
        unsigned __int8 v65 = v82;
      }
      if (v81 >= 0) {
        uint64_t v69 = __p;
      }
      else {
        uint64_t v69 = (void **)__p[0];
      }
      int v70 = v89;
      int v71 = v90;
      uint64_t v72 = vp::get_log_source_file_path(v91, v68);
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v96 = v75;
      __int16 v97 = 2080;
      std::string v98 = v63;
      __int16 v99 = 2080;
      __int16 v100 = v65;
      __int16 v101 = 2080;
      __int16 v102 = v69;
      __int16 v103 = 1024;
      int v104 = v70;
      __int16 v105 = 1024;
      int v106 = v71;
      __int16 v107 = 2080;
      uint64_t v108 = v72;
      long long v54 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
      uint64_t v55 = v60;
      uint32_t v56 = 64;
      goto LABEL_89;
    }
LABEL_93:
    if ((char)v87 < 0) {
      operator delete(v85);
    }
  }
  if (a6[4]) {
    a6[4] = 0;
  }
  *(_DWORD *)a6 = 7;
  std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::~basic_stringstream((uint64_t)v111);
  if (!v92) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v88);
  }
LABEL_28:
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v93);
  int v76 = *(_DWORD *)a6;
  char v77 = a6[4];
  vp::vx::Voice_Processor::components_end_write_dsp_data<vp::vx::Uplink_Input_Port_ID,AudioTimeStamp const*,vp::Expected<void,vp::vx::Error_Code>>(a1, a2, a4, &v76);
}

void sub_1BB221F20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int buf)
{
  if (a2)
  {
    if (a22 < 0) {
      vp::vx::Voice_Processor::write_dsp_data(&a17);
    }
    if (a29 < 0) {
      operator delete(__p);
    }
    std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::~basic_stringstream((uint64_t)&buf);
    if (!a36) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a30);
    }
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a38);
    uint64_t v55 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v55);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &a40);
      uint64_t v58 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a17);
      }
      if (a45 < 0) {
        operator delete(a40);
      }
    }
    if (*(unsigned char *)(v53 + 4)) {
      *(unsigned char *)(v53 + 4) = 0;
    }
    *(_DWORD *)uint64_t v53 = 11;
    __cxa_end_catch();
    JUMPOUT(0x1BB221A14);
  }
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::components_begin_write_dsp_data<vp::vx::Uplink_Input_Port_ID,AudioTimeStamp const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    uint64_t v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 240))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

char *vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(int a1)
{
  if (a1)
  {
    uint64_t v2 = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)1,128ul>(a1);
    unint64_t v4 = v3;
    BOOL v5 = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = "vp::vx::io::Error_Code::Unknown]";
    unint64_t v4 = 31;
    BOOL v5 = "vp::vx::io::Error_Code::Unknown]";
    uint64_t v6 = 31;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

void vp::vx::Voice_Processor::components_end_write_dsp_data<vp::vx::Uplink_Input_Port_ID,AudioTimeStamp const*,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    uint64_t v9 = *v4;
    uint64_t v10 = (std::__shared_weak_count *)v4[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = *a4;
    char v12 = *((unsigned char *)a4 + 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v9 + 248))(v9, a2, a3, &v11);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void vp::vx::Voice_Processor::write_dsp_data(uint64_t a1@<X0>, uint64_t a2@<X1>, AudioBufferList *audio_buffer_list@<X2>, const AudioBufferList *a4@<X3>, AudioTimeStamp *a5@<X4>, unsigned char *a6@<X8>)
{
  v116[20] = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  a6[4] = 1;
  vp::vx::Voice_Processor::components_begin_write_dsp_data<vp::vx::Downlink_Input_Port_ID,AudioTimeStamp const*>(a1, a2, (uint64_t)a4);
  uint64_t v93 = a1 + 1128;
  unsigned int v13 = atomic_load((unsigned int *)(a1 + 1128));
  if (v13 > 0x7FFFFFFE)
  {
LABEL_5:
    char v94 = 0;
LABEL_6:
    if (a6[4]) {
      a6[4] = 0;
    }
    int v15 = 8;
    goto LABEL_9;
  }
  unsigned int v14 = v13;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 1128), &v14, v13 + 1);
    if (v14 == v13) {
      break;
    }
    unsigned int v13 = v14;
    if (v14 >= 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  char v94 = 1;
  uint64_t v16 = *(void *)(a1 + 2504);
  if (!v16 || *(_DWORD *)(a1 + 780) != 2) {
    goto LABEL_6;
  }
  switch((int)a2)
  {
    case 0:
      unsigned int v17 = (unsigned int *)(a1 + 2620);
      goto LABEL_17;
    case 1:
      unsigned int v17 = (unsigned int *)(a1 + 2628);
      goto LABEL_17;
    case 2:
      unsigned int v17 = (unsigned int *)(a1 + 2636);
      goto LABEL_17;
    case 3:
      unsigned int v17 = (unsigned int *)(a1 + 2644);
LABEL_17:
      unsigned int v6 = *v17;
      if (*v17 != -1) {
        break;
      }
      if (a6[4]) {
        a6[4] = 0;
      }
      int v15 = 9;
      goto LABEL_9;
    default:
      break;
  }
  switch((int)a2)
  {
    case 0:
      uint64_t v18 = (unsigned int *)(a1 + 2624);
      goto LABEL_26;
    case 1:
      uint64_t v18 = (unsigned int *)(a1 + 2632);
      goto LABEL_26;
    case 2:
      uint64_t v18 = (unsigned int *)(a1 + 2640);
      goto LABEL_26;
    case 3:
      uint64_t v18 = (unsigned int *)(a1 + 2648);
LABEL_26:
      uint64_t v19 = (AudioTimeStamp *)*v18;
      if (!BYTE4(a5) || v19 == a5)
      {
        if (audio_buffer_list) {
          goto LABEL_39;
        }
LABEL_29:
        if (a2 == 2)
        {
          char v20 = (uint64_t *)(a1 + 2696);
        }
        else if (a2 == 1)
        {
          char v20 = (uint64_t *)(a1 + 2688);
        }
        else
        {
          if (a2)
          {
            audio_buffer_list = 0;
LABEL_39:
            vp::vx::io::Graph::copy_input(v16, v6, audio_buffer_list, a4, v19, (uint64_t)v88);
            if (v92)
            {
              if (a2 >= 8) {
                std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
              }
              *(void *)(a1 + 2512) |= 1 << a2;
              goto LABEL_118;
            }
            std::basic_stringstream<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v111);
            double v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"write downlink ", 15);
            if ((a2 - 1) > 2) {
              uint64_t v22 = "dynamics DSP default audio input";
            }
            else {
              uint64_t v22 = off_1E6237BA8[(int)a2 - 1];
            }
            size_t v23 = strlen(v22);
            unsigned __int8 v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" input", 6);
            uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v88);
            if (*(char *)(node_commands + 23) >= 0) {
              uint64_t v26 = *(unsigned __int8 *)(node_commands + 23);
            }
            else {
              uint64_t v26 = *(void *)(node_commands + 8);
            }
            log = vp::get_log((vp *)node_commands);
            BOOL v28 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
            if (v26)
            {
              if (v28)
              {
                log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
                uint64_t v30 = v87;
                uint64_t v31 = v86;
                uint64_t v32 = vp::get_log(log_context_info);
                if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_110;
                }
                if ((v30 & 0x80u) == 0) {
                  uint64_t v33 = v30;
                }
                else {
                  uint64_t v33 = v31;
                }
                if ((v87 & 0x80u) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                if (v33) {
                  CFStringRef v35 = " ";
                }
                else {
                  CFStringRef v35 = "";
                }
                long long __dst = v115;
                std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::str[abi:ne180100]<vp::Real_Time_Safe_Allocator<char>>((uint64_t)v113, (void **)&__dst, v82);
                if (v83 >= 0) {
                  uint64_t v36 = v82;
                }
                else {
                  uint64_t v36 = (void *)v82[0];
                }
                std::string::size_type v75 = v36;
                int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v88);
                uint64_t v38 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
                if (v39 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                __int16 v40 = v38;
                size_t v41 = v39;
                int v71 = v35;
                uint64_t v73 = p_p;
                if (v39 >= 0x17)
                {
                  uint64_t v57 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v39 | 7) != 0x17) {
                    uint64_t v57 = v39 | 7;
                  }
                  uint64_t v58 = v57 + 1;
                  p_dst = (void **)operator new(v57 + 1);
                  size_t v80 = v41;
                  int64_t v81 = v58 | 0x8000000000000000;
                  long long __dst = p_dst;
                }
                else
                {
                  HIBYTE(v8boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v39;
                  p_dst = (void **)&__dst;
                  if (!v39)
                  {
LABEL_89:
                    *((unsigned char *)p_dst + v4boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
                    if (v81 >= 0) {
                      uint64_t v59 = (void **)&__dst;
                    }
                    else {
                      uint64_t v59 = __dst;
                    }
                    int v60 = v89;
                    int v61 = v90;
                    uint64_t log_source_file_path = vp::get_log_source_file_path(v91, (const char *)v39);
                    uint64_t v63 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v88);
                    if (*(char *)(v63 + 23) >= 0) {
                      uint64_t v64 = v63;
                    }
                    else {
                      uint64_t v64 = *(void *)v63;
                    }
                    *(_DWORD *)std::string buf = 136316930;
                    uint64_t v96 = v73;
                    __int16 v97 = 2080;
                    std::string v98 = v71;
                    __int16 v99 = 2080;
                    __int16 v100 = v75;
                    __int16 v101 = 2080;
                    __int16 v102 = v59;
                    __int16 v103 = 1024;
                    int v104 = v60;
                    __int16 v105 = 1024;
                    int v106 = v61;
                    __int16 v107 = 2080;
                    uint64_t v108 = log_source_file_path;
                    __int16 v109 = 2080;
                    uint64_t v110 = v64;
                    _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_ERROR, "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s", buf, 0x4Au);
                    if (SHIBYTE(v81) < 0) {
                      operator delete(__dst);
                    }
                    if ((SHIBYTE(v83) & 0x80000000) == 0) {
                      goto LABEL_110;
                    }
                    goto LABEL_109;
                  }
                }
                memmove(p_dst, v40, v41);
                goto LABEL_89;
              }
LABEL_112:
              if (a6[4]) {
                a6[4] = 0;
              }
              *(_DWORD *)a6 = 7;
              v111 = &unk_1F1496578;
              v116[0] = &unk_1F14965C8;
              uint64_t v112 = &unk_1F14965A0;
              v113[0] = &unk_1F1496750;
              if (SHIBYTE(v114) < 0) {
                (*((void (**)(void **, void, uint64_t, uint64_t))*v115 + 3))(v115, v113[8], v114 & 0x7FFFFFFFFFFFFFFFLL, 1);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C185D210](v116);
              if (!v92) {
                vp::vx::io::Error::~Error((vp::vx::io::Error *)v88);
              }
              goto LABEL_118;
            }
            if (!v28) {
              goto LABEL_112;
            }
            uint64_t v43 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
            uint64_t v44 = v87;
            uint64_t v45 = v86;
            __int16 v46 = vp::get_log(v43);
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
              goto LABEL_110;
            }
            if ((v44 & 0x80u) == 0) {
              uint64_t v47 = v44;
            }
            else {
              uint64_t v47 = v45;
            }
            if ((v87 & 0x80u) == 0) {
              CFIndex v48 = &__p;
            }
            else {
              CFIndex v48 = __p;
            }
            if (v47) {
              int v49 = " ";
            }
            else {
              int v49 = "";
            }
            int v76 = v49;
            long long __dst = v115;
            std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::str[abi:ne180100]<vp::Real_Time_Safe_Allocator<char>>((uint64_t)v113, (void **)&__dst, v82);
            if (v83 >= 0) {
              int v50 = v82;
            }
            else {
              int v50 = (void *)v82[0];
            }
            uint64_t v74 = v50;
            int v51 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v88);
            uint64_t v52 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v51);
            if (v53 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            long long v54 = v52;
            size_t v55 = v53;
            uint64_t v72 = v48;
            if (v53 >= 0x17)
            {
              uint64_t v65 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v53 | 7) != 0x17) {
                uint64_t v65 = v53 | 7;
              }
              uint64_t v66 = v65 + 1;
              uint32_t v56 = (void **)operator new(v65 + 1);
              size_t v80 = v55;
              int64_t v81 = v66 | 0x8000000000000000;
              long long __dst = v56;
            }
            else
            {
              HIBYTE(v8boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v53;
              uint32_t v56 = (void **)&__dst;
              if (!v53)
              {
LABEL_103:
                *((unsigned char *)v56 + v55) = 0;
                if (v81 >= 0) {
                  uint64_t v67 = (void **)&__dst;
                }
                else {
                  uint64_t v67 = __dst;
                }
                int v68 = v89;
                int v69 = v90;
                uint64_t v70 = vp::get_log_source_file_path(v91, (const char *)v53);
                *(_DWORD *)std::string buf = 136316674;
                uint64_t v96 = v72;
                __int16 v97 = 2080;
                std::string v98 = v76;
                __int16 v99 = 2080;
                __int16 v100 = v74;
                __int16 v101 = 2080;
                __int16 v102 = v67;
                __int16 v103 = 1024;
                int v104 = v68;
                __int16 v105 = 1024;
                int v106 = v69;
                __int16 v107 = 2080;
                uint64_t v108 = v70;
                _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"", buf, 0x40u);
                if (SHIBYTE(v81) < 0) {
                  operator delete(__dst);
                }
                if ((SHIBYTE(v83) & 0x80000000) == 0) {
                  goto LABEL_110;
                }
LABEL_109:
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v84 + 24))(v84, v82[0], v83 & 0x7FFFFFFFFFFFFFFFLL, 1);
LABEL_110:
                if ((char)v87 < 0) {
                  operator delete(__p);
                }
                goto LABEL_112;
              }
            }
            memmove(v56, v54, v55);
            goto LABEL_103;
          }
          char v20 = (uint64_t *)(a1 + 2680);
        }
        vp::Audio_Buffer::prepare(v20, v19);
        audio_buffer_list = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v20);
        uint64_t v16 = *(void *)(a1 + 2504);
        goto LABEL_39;
      }
      if (a6[4]) {
        a6[4] = 0;
      }
      int v15 = 1;
      break;
    default:
      uint64_t v19 = a5;
      if (!audio_buffer_list) {
        goto LABEL_29;
      }
      goto LABEL_39;
  }
LABEL_9:
  *(_DWORD *)a6 = v15;
LABEL_118:
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v93);
  int v77 = *(_DWORD *)a6;
  char v78 = a6[4];
  vp::vx::Voice_Processor::components_end_write_dsp_data<vp::vx::Downlink_Input_Port_ID,AudioTimeStamp const*,vp::Expected<void,vp::vx::Error_Code>>(a1, a2, (uint64_t)a4, &v77);
}

void sub_1BB222C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BB222CC0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB222CB0);
  }
  JUMPOUT(0x1BB222CE0);
}

void sub_1BB222CD0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB222CD8);
  }
  JUMPOUT(0x1BB222CB0);
}

void sub_1BB222D90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int buf,int a47,long long a48,uint64_t a49,long long a50)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a17, -1, 0x20u, 0, 0, &__p);
  uint64_t v52 = " ";
  if (!v51) {
    uint64_t v52 = "";
  }
  std::string buf = 136315906;
  if (a29 >= 0) {
    p_p = (void **)&__p;
  }
  else {
    p_p = __p;
  }
  WORD2(a48) = 2080;
  *(void *)((char *)&a48 + 6) = v52;
  HIWORD(a48) = 2080;
  LOWORD(a5std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 2080;
  *(void *)((char *)&a50 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = p_p;
  _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, "%s%sfailed to write downlink %s input - %s", (uint8_t *)&buf, 0x2Au);
  if (a29 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a17);
  JUMPOUT(0x1BB222E44);
}

void vp::vx::Voice_Processor::components_begin_write_dsp_data<vp::vx::Downlink_Input_Port_ID,AudioTimeStamp const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    unint64_t v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 288))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void vp::vx::Voice_Processor::components_end_write_dsp_data<vp::vx::Downlink_Input_Port_ID,AudioTimeStamp const*,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    uint64_t v9 = *v4;
    uint64_t v10 = (std::__shared_weak_count *)v4[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = *a4;
    char v12 = *((unsigned char *)a4 + 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v9 + 296))(v9, a2, a3, &v11);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

uint64_t vp::vx::Voice_Processor::read_dsp_data(uint64_t a1, uint64_t a2, AudioBufferList *a3, const AudioBufferList *a4, uint64_t a5)
{
  LODWORD(v1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 11;
  BYTE4(v1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *>(a1, a2, (uint64_t)a4);
  dsp_CFDataRef data = vp::vx::Voice_Processor::do_read_dsp_data(a1, a2, a3, a4, a5);
  int v13 = dsp_data;
  char v14 = BYTE4(dsp_data);
  caulk::expected<unsigned int,vp::vx::Error_Code>::swap(&v13, (int *)&v12);
  vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(a1, a2, (uint64_t)a4, v12);
  return v12;
}

{
  uint64_t dsp_data;
  uint64_t v12;
  int v13;
  char v14;

  LODWORD(v1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 11;
  BYTE4(v1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *>(a1, a2, (uint64_t)a4);
  dsp_CFDataRef data = vp::vx::Voice_Processor::do_read_dsp_data(a1, a2, a3, a4, a5);
  int v13 = dsp_data;
  char v14 = BYTE4(dsp_data);
  caulk::expected<unsigned int,vp::vx::Error_Code>::swap(&v13, (int *)&v12);
  vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(a1, a2, (uint64_t)a4, v12);
  return v12;
}

void sub_1BB2230D0(void *a1)
{
}

void vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    unint64_t v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 256))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    uint64_t v9 = *v4;
    uint64_t v10 = (std::__shared_weak_count *)v4[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 264))(v9, a2, a3, a4);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

uint64_t vp::vx::Voice_Processor::do_read_dsp_data(uint64_t a1, int a2, AudioBufferList *a3, const AudioBufferList *a4, uint64_t a5)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = a1 + 1128;
  unsigned int v5 = atomic_load((unsigned int *)(a1 + 1128));
  if (v5 > 0x7FFFFFFE)
  {
LABEL_5:
    char v68 = 0;
  }
  else
  {
    unsigned int v10 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 1128), &v10, v5 + 1);
      if (v10 == v5) {
        break;
      }
      unsigned int v5 = v10;
      if (v10 >= 0x7FFFFFFF) {
        goto LABEL_5;
      }
    }
    char v68 = 1;
    uint64_t v13 = *(void *)(a1 + 2400);
    if (v13)
    {
      if (a2 != 4)
      {
        uint64_t v11 = 0;
        unsigned int v12 = 9;
LABEL_62:
        std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v67);
        return v11 & 0x100000000 | v12;
      }
      unsigned int v14 = *(_DWORD *)(a1 + 2496);
      if (v14 != -1)
      {
        vp::vx::io::Graph::get_buffered_frame_count(v13, v14, (uint64_t)v65);
        caulk::__expected_detail::base<unsigned int,vp::vx::io::Error>::base((uint64_t)buf, (uint64_t)v65);
        if (!(_BYTE)v79)
        {
          uint64_t v52 = _os_crash();
          caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v52);
        }
        if ((a5 & 0xFF00000000) != 0) {
          unint64_t v15 = a5;
        }
        else {
          unint64_t v15 = v65[0];
        }
        if (!v15)
        {
          unsigned int v12 = 0;
          uint64_t v11 = 0x100000000;
LABEL_60:
          if (!v66) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)v65);
          }
          goto LABEL_62;
        }
        vp::vx::io::Graph::copy_output(*(void *)(a1 + 2400), *(_DWORD *)(a1 + 2496), a3, a4, (AudioTimeStamp *)v15, (uint64_t)&v60);
        if (v64)
        {
          uint64_t v11 = 0x100000000;
          unsigned int v12 = v60;
          goto LABEL_60;
        }
        uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v60);
        if (*(char *)(node_commands + 23) >= 0) {
          uint64_t v17 = *(unsigned __int8 *)(node_commands + 23);
        }
        else {
          uint64_t v17 = *(void *)(node_commands + 8);
        }
        log = vp::get_log((vp *)node_commands);
        BOOL v19 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
        if (v17)
        {
          if (v19)
          {
            log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v57);
            if ((v59 & 0x80u) == 0) {
              uint64_t v21 = v59;
            }
            else {
              uint64_t v21 = v58;
            }
            uint64_t v22 = vp::get_log(log_context_info);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              int v23 = (char)v59;
              unsigned __int8 v24 = v57;
              int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v60);
              unint64_t v53 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
              uint64_t v54 = v26;
              double v27 = __p;
              std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v53);
              if (v23 >= 0) {
                unsigned __int8 v24 = &v57;
              }
              if (v21) {
                uint64_t v29 = " ";
              }
              else {
                uint64_t v29 = "";
              }
              if (v56 < 0) {
                double v27 = (void **)__p[0];
              }
              int v30 = v61;
              int v31 = v62;
              uint64_t log_source_file_path = vp::get_log_source_file_path(v63, v28);
              uint64_t v33 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v60);
              if (*(char *)(v33 + 23) >= 0) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = *(void *)v33;
              }
              *(_DWORD *)std::string buf = 136316930;
              uint64_t v70 = v24;
              __int16 v71 = 2080;
              uint64_t v72 = v29;
              __int16 v73 = 2080;
              uint64_t v74 = "read uplink content DSP client output";
              __int16 v75 = 2080;
              int v76 = v27;
              __int16 v77 = 1024;
              int v78 = v30;
              __int16 v79 = 1024;
              int v80 = v31;
              __int16 v81 = 2080;
              uint64_t v82 = log_source_file_path;
              __int16 v83 = 2080;
              uint64_t v84 = v34;
              CFStringRef v35 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
              uint64_t v36 = v22;
              uint32_t v37 = 74;
LABEL_53:
              _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
              if (v56 < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_55;
            }
            goto LABEL_55;
          }
        }
        else if (v19)
        {
          uint64_t v38 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v57);
          if ((v59 & 0x80u) == 0) {
            uint64_t v39 = v59;
          }
          else {
            uint64_t v39 = v58;
          }
          __int16 v40 = vp::get_log(v38);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            int v41 = (char)v59;
            int v42 = v57;
            int v43 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v60);
            unint64_t v53 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v43);
            uint64_t v54 = v44;
            std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v53);
            if (v41 >= 0) {
              int v42 = &v57;
            }
            if (v39) {
              __int16 v46 = " ";
            }
            else {
              __int16 v46 = "";
            }
            if (v56 >= 0) {
              uint64_t v47 = __p;
            }
            else {
              uint64_t v47 = (void **)__p[0];
            }
            int v48 = v61;
            int v49 = v62;
            uint64_t v50 = vp::get_log_source_file_path(v63, v45);
            *(_DWORD *)std::string buf = 136316674;
            uint64_t v70 = v42;
            __int16 v71 = 2080;
            uint64_t v72 = v46;
            __int16 v73 = 2080;
            uint64_t v74 = "read uplink content DSP client output";
            __int16 v75 = 2080;
            int v76 = v47;
            __int16 v77 = 1024;
            int v78 = v48;
            __int16 v79 = 1024;
            int v80 = v49;
            __int16 v81 = 2080;
            uint64_t v82 = v50;
            CFStringRef v35 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
            uint64_t v36 = v40;
            uint32_t v37 = 64;
            goto LABEL_53;
          }
LABEL_55:
          if ((char)v59 < 0) {
            operator delete(v57);
          }
        }
        if (!v64) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v60);
        }
        uint64_t v11 = 0;
        unsigned int v12 = 7;
        goto LABEL_60;
      }
    }
  }
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v67);
  uint64_t v11 = 0;
  unsigned int v12 = 8;
  return v11 & 0x100000000 | v12;
}

{
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  AudioTimeStamp *v11;
  vp *v12;
  NSObject *log;
  void **v14;
  vp *log_context_info;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  unint64_t v19;
  const char *v20;
  uint64_t node_commands;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[12];
  char v27;
  uint64_t v28;
  char v29;
  uint8_t buf[4];
  void **v31;
  __int16 v32;
  const char *v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  uint32_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v28 = a1 + 1128;
  unsigned int v5 = atomic_load((unsigned int *)(a1 + 1128));
  if (v5 > 0x7FFFFFFE)
  {
LABEL_5:
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v7 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 1128), &v7, v5 + 1);
      if (v7 == v5) {
        break;
      }
      unsigned int v5 = v7;
      if (v7 >= 0x7FFFFFFF) {
        goto LABEL_5;
      }
    }
    uint64_t v29 = 1;
    unsigned int v10 = *(void *)(a1 + 2504);
    if (v10)
    {
      if (a2)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 9;
LABEL_36:
        std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v28);
        return v8 & 0x100000000 | v9;
      }
      if (*(_DWORD *)(a1 + 2652) != -1)
      {
        a4[2].mBuffers[0].mNumberChannels &= ~1u;
        if ((a5 & 0xFF00000000) != 0)
        {
          uint64_t v11 = (AudioTimeStamp *)*(unsigned int *)(a1 + 2656);
          if (v11 != a5)
          {
            unint64_t v8 = 0;
            uint64_t v9 = 1;
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v11 = (AudioTimeStamp *)*(unsigned int *)(a1 + 2656);
        }
        vp::vx::io::Graph::copy_output(v10, *(_DWORD *)(a1 + 2652), a3, a4, v11, (uint64_t)v26);
        if (v27)
        {
          unint64_t v8 = 0x100000000;
          uint64_t v9 = v26[0];
        }
        else
        {
          log = vp::get_log(v12);
          if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
          {
            unsigned int v14 = __p;
            log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
            uint64_t v16 = v25;
            uint64_t v17 = __p[1];
            uint64_t v18 = vp::get_log(log_context_info);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              if ((v16 & 0x80u) == 0) {
                BOOL v19 = v16;
              }
              else {
                BOOL v19 = (unint64_t)v17;
              }
              if ((v25 & 0x80u) != 0) {
                unsigned int v14 = (void **)__p[0];
              }
              if (v19) {
                char v20 = " ";
              }
              else {
                char v20 = "";
              }
              uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v26);
              if (*(char *)(node_commands + 23) >= 0) {
                uint64_t v22 = node_commands;
              }
              else {
                uint64_t v22 = *(void *)node_commands;
              }
              *(_DWORD *)std::string buf = 136315650;
              int v31 = v14;
              uint64_t v32 = 2080;
              uint64_t v33 = v20;
              uint64_t v34 = 32;
              CFStringRef v35 = 8;
              uint64_t v36 = v22;
              _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%s%sfailed to read downlink hardware DSP output - %s", buf, 0x20u);
            }
            if ((char)v25 < 0) {
              operator delete(__p[0]);
            }
          }
          if (!v27) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)v26);
          }
          unint64_t v8 = 0;
          uint64_t v9 = 7;
        }
        goto LABEL_36;
      }
    }
  }
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v28);
  unint64_t v8 = 0;
  uint64_t v9 = 8;
  return v8 & 0x100000000 | v9;
}

void sub_1BB2236E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (!a26) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a20);
  }
  if (!a36) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a28);
  }
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1BB2237F8(void *a1)
{
}

void vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    unint64_t v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 304))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    uint64_t v9 = *v4;
    unsigned int v10 = (std::__shared_weak_count *)v4[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 312))(v9, a2, a3, a4);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void vp::vx::Voice_Processor::run_dsp(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 9;
  *(unsigned char *)(a3 + 4) = 0;
  vp::vx::Voice_Processor::components_begin_process<vp::vx::Uplink_Node_ID>((uint64_t)a1, a2);
  if (!a2)
  {
    vp::vx::Voice_Processor::run_all_of_uplink_dsp(a1, (uint64_t)&v8);
    if (v9) {
      *(unsigned char *)(a3 + 4) = v9;
    }
    else {
      *(_DWORD *)a3 = v8;
    }
  }
  int v6 = *(_DWORD *)a3;
  char v7 = *(unsigned char *)(a3 + 4);
  vp::vx::Voice_Processor::components_end_process<vp::vx::Uplink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>((uint64_t)a1, a2, &v6);
}

{
  int v6;
  char v7;
  int v8;
  char v9;

  *(_DWORD *)a3 = 9;
  *(unsigned char *)(a3 + 4) = 0;
  vp::vx::Voice_Processor::components_begin_process<vp::vx::Downlink_Node_ID>((uint64_t)a1, a2);
  if (!a2)
  {
    vp::vx::Voice_Processor::run_all_of_downlink_dsp(a1, (uint64_t)&v8);
    if (v9) {
      *(unsigned char *)(a3 + 4) = v9;
    }
    else {
      *(_DWORD *)a3 = v8;
    }
  }
  int v6 = *(_DWORD *)a3;
  char v7 = *(unsigned char *)(a3 + 4);
  vp::vx::Voice_Processor::components_end_process<vp::vx::Downlink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>((uint64_t)a1, a2, &v6);
}

void vp::vx::Voice_Processor::components_begin_process<vp::vx::Uplink_Node_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    int v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 224))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t vp::vx::Voice_Processor::run_all_of_uplink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v406 = *MEMORY[0x1E4F143B8];
  v386 = (char *)this + 1128;
  unsigned int v3 = atomic_load((unsigned int *)this + 282);
  if (v3 > 0x7FFFFFFE)
  {
LABEL_5:
    char v387 = 0;
    goto LABEL_56;
  }
  unsigned int v5 = v3;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)this + 282, &v5, v3 + 1);
    if (v5 == v3) {
      break;
    }
    unsigned int v3 = v5;
    if (v5 >= 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  char v387 = 1;
  uint64_t v6 = *((void *)this + 300);
  if (!v6)
  {
    log = vp::get_log(this);
    if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v388);
      uint64_t v12 = HIBYTE(v389);
      uint64_t v13 = *(void *)&v388[8];
      unsigned int v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        if ((v12 & 0x80u) == 0) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v13;
        }
        uint64_t v16 = *(unsigned char **)v388;
        if (v389 >= 0) {
          uint64_t v16 = v388;
        }
        if (v15) {
          uint64_t v17 = " ";
        }
        else {
          uint64_t v17 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        v402 = v16;
        __int16 v403 = 2080;
        v404 = v17;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_FAULT, "%s%scannot run uplink DSP with uninitialized VoiceProcessor", buf, 0x16u);
      }
      if (SHIBYTE(v389) < 0) {
        operator delete(*(void **)v388);
      }
    }
    goto LABEL_56;
  }
  int v7 = *((_DWORD *)this + 195);
  if (!v7)
  {
LABEL_56:
    *(_DWORD *)a2 = 8;
    *(unsigned char *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v386);
  }
  if (v7 != 2)
  {
    if (v7 != 1) {
      goto LABEL_15;
    }
    *((_DWORD *)this + 195) = 2;
  }
  if (*((unsigned char *)this + 2409))
  {
    *((unsigned char *)this + 240boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 0;
  }
  else
  {
    vp::vx::io::Graph::reset(v6, *((_DWORD *)this + 608), (uint64_t)v388);
    if (!(_BYTE)v395) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v388);
    }
  }
LABEL_15:
  vp::vx::io::Graph::get_buffered_frame_count(v6, *((unsigned int *)this + 608), 0, (uint64_t)buf);
  if (v405)
  {
    vp::vx::io::Graph::process(v6, *((_DWORD *)this + 608), *(unsigned int *)buf, v381);
    if (v385)
    {
      vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 609), 0, (uint64_t)&v377);
      if (v380)
      {
        vp::vx::io::Graph::process(v6, *((_DWORD *)this + 609), v377, &__p);
        if (v376)
        {
          vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 610), 0, (uint64_t)&__dst);
          if (v372)
          {
            vp::vx::io::Graph::get_expected_output_frame_count(v6, *((_DWORD *)this + 610), __dst, (uint64_t)&v365);
            if (v368)
            {
              vp::vx::io::Graph::process(v6, *((_DWORD *)this + 610), v365, &v361);
              if (v364)
              {
                vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 611), 0, (uint64_t)&v357);
                if (v360)
                {
                  vp::vx::io::Graph::process(v6, *((_DWORD *)this + 611), v357, &v350);
                  if (v353)
                  {
                    int v8 = 0;
                    goto LABEL_25;
                  }
                  vp::vx::io::Error::Error((vp::vx::io::Error *)&v347, (const vp::vx::io::Error *)&v350);
                  uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v347);
                  if (*(char *)(node_commands + 23) >= 0) {
                    uint64_t v195 = *(unsigned __int8 *)(node_commands + 23);
                  }
                  else {
                    uint64_t v195 = *(void *)(node_commands + 8);
                  }
                  size_t v196 = vp::get_log((vp *)node_commands);
                  BOOL v197 = os_log_type_enabled(v196, OS_LOG_TYPE_ERROR);
                  if (v195)
                  {
                    if (!v197) {
                      goto LABEL_426;
                    }
                    uint64_t v198 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v354);
                    if ((v356 & 0x80u) == 0) {
                      uint64_t v199 = v356;
                    }
                    else {
                      uint64_t v199 = v355;
                    }
                    std::string v200 = vp::get_log(v198);
                    if (!os_log_type_enabled(v200, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_424;
                    }
                    int v201 = (char)v356;
                    v202 = v354;
                    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v347);
                    v342 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
                    uint64_t v343 = v204;
                    std::string::basic_string<std::string_view,0>(&v344, (uint64_t)&v342);
                    if (v201 >= 0) {
                      v202 = &v354;
                    }
                    if (v199) {
                      v206 = " ";
                    }
                    else {
                      v206 = "";
                    }
                    if (v346 >= 0) {
                      v207 = &v344;
                    }
                    else {
                      v207 = v344;
                    }
                    int v208 = WORD2(v347);
                    int v209 = HIWORD(v347);
                    uint64_t log_source_file_path = vp::get_log_source_file_path(v348, v205);
                    uint64_t v211 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v347);
                    if (*(char *)(v211 + 23) >= 0) {
                      uint64_t v212 = v211;
                    }
                    else {
                      uint64_t v212 = *(void *)v211;
                    }
                    *(_DWORD *)v388 = 136316930;
                    *(void *)&v388[4] = v202;
                    *(_WORD *)&v388[12] = 2080;
                    *(void *)&v388[14] = v206;
                    __int16 v389 = 2080;
                    v390 = "process uplink content DSP";
                    __int16 v391 = 2080;
                    v392 = v207;
                    __int16 v393 = 1024;
                    int v394 = v208;
                    __int16 v395 = 1024;
                    int v396 = v209;
                    __int16 v397 = 2080;
                    uint64_t v398 = log_source_file_path;
                    __int16 v399 = 2080;
                    uint64_t v400 = v212;
                    uint64_t v213 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                    v214 = v200;
                    uint32_t v215 = 74;
                  }
                  else
                  {
                    if (!v197) {
                      goto LABEL_426;
                    }
                    v328 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v354);
                    if ((v356 & 0x80u) == 0) {
                      uint64_t v329 = v356;
                    }
                    else {
                      uint64_t v329 = v355;
                    }
                    v330 = vp::get_log(v328);
                    if (!os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
                    {
LABEL_424:
                      if ((char)v356 < 0) {
                        operator delete(v354);
                      }
LABEL_426:
                      *(_DWORD *)a2 = 7;
                      *(unsigned char *)(a2 + 4) = 0;
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v347);
                      if (v353)
                      {
LABEL_428:
                        int v8 = 1;
LABEL_25:
                        if (!v360) {
                          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v357);
                        }
                        goto LABEL_27;
                      }
LABEL_427:
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v350);
                      goto LABEL_428;
                    }
                    int v331 = (char)v356;
                    v332 = (void **)v354;
                    int v333 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v347);
                    v342 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v333);
                    uint64_t v343 = v334;
                    std::string::basic_string<std::string_view,0>(&v344, (uint64_t)&v342);
                    if (v331 >= 0) {
                      v336 = &v354;
                    }
                    else {
                      v336 = v332;
                    }
                    if (v329) {
                      v337 = " ";
                    }
                    else {
                      v337 = "";
                    }
                    if (v346 >= 0) {
                      v338 = &v344;
                    }
                    else {
                      v338 = v344;
                    }
                    int v339 = WORD2(v347);
                    int v340 = HIWORD(v347);
                    uint64_t v341 = vp::get_log_source_file_path(v348, v335);
                    *(_DWORD *)v388 = 136316674;
                    *(void *)&v388[4] = v336;
                    *(_WORD *)&v388[12] = 2080;
                    *(void *)&v388[14] = v337;
                    __int16 v389 = 2080;
                    v390 = "process uplink content DSP";
                    __int16 v391 = 2080;
                    v392 = v338;
                    __int16 v393 = 1024;
                    int v394 = v339;
                    __int16 v395 = 1024;
                    int v396 = v340;
                    __int16 v397 = 2080;
                    uint64_t v398 = v341;
                    uint64_t v213 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                    v214 = v330;
                    uint32_t v215 = 64;
                  }
                  _os_log_impl(&dword_1BB0CE000, v214, OS_LOG_TYPE_ERROR, v213, v388, v215);
                  if (v346 < 0) {
                    operator delete(v344);
                  }
                  goto LABEL_424;
                }
                vp::vx::io::Error::Error((vp::vx::io::Error *)&v350, (const vp::vx::io::Error *)&v357);
                uint64_t v172 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v350);
                if (*(char *)(v172 + 23) >= 0) {
                  uint64_t v173 = *(unsigned __int8 *)(v172 + 23);
                }
                else {
                  uint64_t v173 = *(void *)(v172 + 8);
                }
                uint64_t v174 = vp::get_log((vp *)v172);
                BOOL v175 = os_log_type_enabled(v174, OS_LOG_TYPE_ERROR);
                if (v173)
                {
                  if (v175)
                  {
                    size_t v176 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v347);
                    if ((v349 & 0x80u) == 0) {
                      uint64_t v177 = (vp *)v349;
                    }
                    else {
                      uint64_t v177 = v348;
                    }
                    v178 = vp::get_log(v176);
                    if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
                    {
                      int v179 = (char)v349;
                      std::string::size_type v180 = v347;
                      int v181 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v350);
                      v344 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v181);
                      uint64_t v345 = v182;
                      std::string::basic_string<std::string_view,0>(&v354, (uint64_t)&v344);
                      if (v179 >= 0) {
                        std::string::size_type v180 = &v347;
                      }
                      if (v177) {
                        v184 = " ";
                      }
                      else {
                        v184 = "";
                      }
                      if ((v356 & 0x80u) == 0) {
                        v185 = &v354;
                      }
                      else {
                        v185 = v354;
                      }
                      int v186 = WORD2(v350);
                      int v187 = HIWORD(v350);
                      uint64_t v188 = vp::get_log_source_file_path(v351, v183);
                      uint64_t v189 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v350);
                      if (*(char *)(v189 + 23) >= 0) {
                        uint64_t v190 = v189;
                      }
                      else {
                        uint64_t v190 = *(void *)v189;
                      }
                      *(_DWORD *)v388 = 136316930;
                      *(void *)&v388[4] = v180;
                      *(_WORD *)&v388[12] = 2080;
                      *(void *)&v388[14] = v184;
                      __int16 v389 = 2080;
                      v390 = "get buffered input frame count for uplink content DSP node";
                      __int16 v391 = 2080;
                      v392 = v185;
                      __int16 v393 = 1024;
                      int v394 = v186;
                      __int16 v395 = 1024;
                      int v396 = v187;
                      __int16 v397 = 2080;
                      uint64_t v398 = v188;
                      __int16 v399 = 2080;
                      uint64_t v400 = v190;
                      int v191 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                      BOOL v192 = v178;
                      uint32_t v193 = 74;
                      goto LABEL_402;
                    }
                    goto LABEL_404;
                  }
                }
                else if (v175)
                {
                  v314 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v347);
                  if ((v349 & 0x80u) == 0) {
                    v315 = (vp *)v349;
                  }
                  else {
                    v315 = v348;
                  }
                  v316 = vp::get_log(v314);
                  if (os_log_type_enabled(v316, OS_LOG_TYPE_ERROR))
                  {
                    int v317 = (char)v349;
                    v318 = (void **)v347;
                    int v319 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v350);
                    v344 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v319);
                    uint64_t v345 = v320;
                    std::string::basic_string<std::string_view,0>(&v354, (uint64_t)&v344);
                    if (v317 >= 0) {
                      v322 = &v347;
                    }
                    else {
                      v322 = v318;
                    }
                    if (v315) {
                      v323 = " ";
                    }
                    else {
                      v323 = "";
                    }
                    if ((v356 & 0x80u) == 0) {
                      v324 = &v354;
                    }
                    else {
                      v324 = v354;
                    }
                    int v325 = WORD2(v350);
                    int v326 = HIWORD(v350);
                    uint64_t v327 = vp::get_log_source_file_path(v351, v321);
                    *(_DWORD *)v388 = 136316674;
                    *(void *)&v388[4] = v322;
                    *(_WORD *)&v388[12] = 2080;
                    *(void *)&v388[14] = v323;
                    __int16 v389 = 2080;
                    v390 = "get buffered input frame count for uplink content DSP node";
                    __int16 v391 = 2080;
                    v392 = v324;
                    __int16 v393 = 1024;
                    int v394 = v325;
                    __int16 v395 = 1024;
                    int v396 = v326;
                    __int16 v397 = 2080;
                    uint64_t v398 = v327;
                    int v191 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                    BOOL v192 = v316;
                    uint32_t v193 = 64;
LABEL_402:
                    _os_log_impl(&dword_1BB0CE000, v192, OS_LOG_TYPE_ERROR, v191, v388, v193);
                    if ((char)v356 < 0) {
                      operator delete(v354);
                    }
                  }
LABEL_404:
                  if ((char)v349 < 0) {
                    operator delete(v347);
                  }
                }
                *(_DWORD *)a2 = 7;
                *(unsigned char *)(a2 + 4) = 0;
                goto LABEL_427;
              }
              vp::vx::io::Error::Error((vp::vx::io::Error *)&v357, (const vp::vx::io::Error *)&v361);
              uint64_t v150 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v357);
              if (*(char *)(v150 + 23) >= 0) {
                uint64_t v151 = *(unsigned __int8 *)(v150 + 23);
              }
              else {
                uint64_t v151 = *(void *)(v150 + 8);
              }
              uint64_t v152 = vp::get_log((vp *)v150);
              BOOL v153 = os_log_type_enabled(v152, OS_LOG_TYPE_ERROR);
              if (v151)
              {
                if (v153)
                {
                  uint64_t v154 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v350);
                  if ((v352 & 0x80u) == 0) {
                    uint64_t v155 = (vp *)v352;
                  }
                  else {
                    uint64_t v155 = v351;
                  }
                  uint64_t v156 = vp::get_log(v154);
                  if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
                  {
                    int v157 = (char)v352;
                    int v158 = v350;
                    int v159 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v357);
                    v354 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v159);
                    uint64_t v355 = v160;
                    std::string::basic_string<std::string_view,0>(&v347, (uint64_t)&v354);
                    if (v157 >= 0) {
                      int v158 = &v350;
                    }
                    if (v155) {
                      std::string::size_type v162 = " ";
                    }
                    else {
                      std::string::size_type v162 = "";
                    }
                    if ((v349 & 0x80u) == 0) {
                      std::string::size_type v163 = &v347;
                    }
                    else {
                      std::string::size_type v163 = v347;
                    }
                    int v164 = WORD2(v357);
                    int v165 = HIWORD(v357);
                    uint64_t v166 = vp::get_log_source_file_path(v358, v161);
                    uint64_t v167 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v357);
                    if (*(char *)(v167 + 23) >= 0) {
                      uint64_t v168 = v167;
                    }
                    else {
                      uint64_t v168 = *(void *)v167;
                    }
                    *(_DWORD *)v388 = 136316930;
                    *(void *)&v388[4] = v158;
                    *(_WORD *)&v388[12] = 2080;
                    *(void *)&v388[14] = v162;
                    __int16 v389 = 2080;
                    v390 = "process uplink echo DSP";
                    __int16 v391 = 2080;
                    v392 = v163;
                    __int16 v393 = 1024;
                    int v394 = v164;
                    __int16 v395 = 1024;
                    int v396 = v165;
                    __int16 v397 = 2080;
                    uint64_t v398 = v166;
                    __int16 v399 = 2080;
                    uint64_t v400 = v168;
                    uint64_t v169 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                    uint64_t v170 = v156;
                    uint32_t v171 = 74;
                    goto LABEL_382;
                  }
                  goto LABEL_384;
                }
              }
              else if (v153)
              {
                v300 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v350);
                if ((v352 & 0x80u) == 0) {
                  v301 = (vp *)v352;
                }
                else {
                  v301 = v351;
                }
                v302 = vp::get_log(v300);
                if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
                {
                  int v303 = (char)v352;
                  v304 = (void **)v350;
                  int v305 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v357);
                  v354 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v305);
                  uint64_t v355 = v306;
                  std::string::basic_string<std::string_view,0>(&v347, (uint64_t)&v354);
                  if (v303 >= 0) {
                    v308 = &v350;
                  }
                  else {
                    v308 = v304;
                  }
                  if (v301) {
                    v309 = " ";
                  }
                  else {
                    v309 = "";
                  }
                  if ((v349 & 0x80u) == 0) {
                    v310 = &v347;
                  }
                  else {
                    v310 = v347;
                  }
                  int v311 = WORD2(v357);
                  int v312 = HIWORD(v357);
                  uint64_t v313 = vp::get_log_source_file_path(v358, v307);
                  *(_DWORD *)v388 = 136316674;
                  *(void *)&v388[4] = v308;
                  *(_WORD *)&v388[12] = 2080;
                  *(void *)&v388[14] = v309;
                  __int16 v389 = 2080;
                  v390 = "process uplink echo DSP";
                  __int16 v391 = 2080;
                  v392 = v310;
                  __int16 v393 = 1024;
                  int v394 = v311;
                  __int16 v395 = 1024;
                  int v396 = v312;
                  __int16 v397 = 2080;
                  uint64_t v398 = v313;
                  uint64_t v169 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                  uint64_t v170 = v302;
                  uint32_t v171 = 64;
LABEL_382:
                  _os_log_impl(&dword_1BB0CE000, v170, OS_LOG_TYPE_ERROR, v169, v388, v171);
                  if ((char)v349 < 0) {
                    operator delete(v347);
                  }
                }
LABEL_384:
                if ((char)v352 < 0) {
                  operator delete(v350);
                }
              }
              *(_DWORD *)a2 = 7;
              *(unsigned char *)(a2 + 4) = 0;
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v357);
              int v8 = 1;
LABEL_27:
              if (!v364) {
                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v361);
              }
              goto LABEL_29;
            }
            vp::vx::io::Error::Error((vp::vx::io::Error *)&v361, (const vp::vx::io::Error *)&v365);
            uint64_t v128 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v361);
            if (*(char *)(v128 + 23) >= 0) {
              uint64_t v129 = *(unsigned __int8 *)(v128 + 23);
            }
            else {
              uint64_t v129 = *(void *)(v128 + 8);
            }
            char v130 = vp::get_log((vp *)v128);
            BOOL v131 = os_log_type_enabled(v130, OS_LOG_TYPE_ERROR);
            if (v129)
            {
              if (v131)
              {
                CFIndex v132 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v357);
                if ((v359 & 0x80u) == 0) {
                  v133 = (vp *)v359;
                }
                else {
                  v133 = v358;
                }
                uint64_t v134 = vp::get_log(v132);
                if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
                {
                  int v135 = (char)v359;
                  uint64_t v136 = v357;
                  int v137 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v361);
                  v347 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v137);
                  v348 = v138;
                  std::string::basic_string<std::string_view,0>(&v350, (uint64_t)&v347);
                  if (v135 >= 0) {
                    uint64_t v136 = &v357;
                  }
                  if (v133) {
                    v140 = " ";
                  }
                  else {
                    v140 = "";
                  }
                  if ((v352 & 0x80u) == 0) {
                    char v141 = &v350;
                  }
                  else {
                    char v141 = v350;
                  }
                  int v142 = WORD2(v361);
                  int v143 = HIWORD(v361);
                  uint64_t v144 = vp::get_log_source_file_path(v362, v139);
                  uint64_t v145 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v361);
                  if (*(char *)(v145 + 23) >= 0) {
                    uint64_t v146 = v145;
                  }
                  else {
                    uint64_t v146 = *(void *)v145;
                  }
                  *(_DWORD *)v388 = 136316930;
                  *(void *)&v388[4] = v136;
                  *(_WORD *)&v388[12] = 2080;
                  *(void *)&v388[14] = v140;
                  __int16 v389 = 2080;
                  v390 = "get uplink echo DSP I/O block size";
                  __int16 v391 = 2080;
                  v392 = v141;
                  __int16 v393 = 1024;
                  int v394 = v142;
                  __int16 v395 = 1024;
                  int v396 = v143;
                  __int16 v397 = 2080;
                  uint64_t v398 = v144;
                  __int16 v399 = 2080;
                  uint64_t v400 = v146;
                  v147 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                  long long v148 = v134;
                  uint32_t v149 = 74;
                  goto LABEL_362;
                }
                goto LABEL_364;
              }
            }
            else if (v131)
            {
              v286 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v357);
              if ((v359 & 0x80u) == 0) {
                v287 = (vp *)v359;
              }
              else {
                v287 = v358;
              }
              v288 = vp::get_log(v286);
              if (os_log_type_enabled(v288, OS_LOG_TYPE_ERROR))
              {
                int v289 = (char)v359;
                v290 = (void **)v357;
                int v291 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v361);
                v347 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v291);
                v348 = v292;
                std::string::basic_string<std::string_view,0>(&v350, (uint64_t)&v347);
                if (v289 >= 0) {
                  v294 = &v357;
                }
                else {
                  v294 = v290;
                }
                if (v287) {
                  v295 = " ";
                }
                else {
                  v295 = "";
                }
                if ((v352 & 0x80u) == 0) {
                  v296 = &v350;
                }
                else {
                  v296 = v350;
                }
                int v297 = WORD2(v361);
                int v298 = HIWORD(v361);
                uint64_t v299 = vp::get_log_source_file_path(v362, v293);
                *(_DWORD *)v388 = 136316674;
                *(void *)&v388[4] = v294;
                *(_WORD *)&v388[12] = 2080;
                *(void *)&v388[14] = v295;
                __int16 v389 = 2080;
                v390 = "get uplink echo DSP I/O block size";
                __int16 v391 = 2080;
                v392 = v296;
                __int16 v393 = 1024;
                int v394 = v297;
                __int16 v395 = 1024;
                int v396 = v298;
                __int16 v397 = 2080;
                uint64_t v398 = v299;
                v147 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                long long v148 = v288;
                uint32_t v149 = 64;
LABEL_362:
                _os_log_impl(&dword_1BB0CE000, v148, OS_LOG_TYPE_ERROR, v147, v388, v149);
                if ((char)v352 < 0) {
                  operator delete(v350);
                }
              }
LABEL_364:
              if ((char)v359 < 0) {
                operator delete(v357);
              }
            }
            *(_DWORD *)a2 = 7;
            *(unsigned char *)(a2 + 4) = 0;
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v361);
            int v8 = 1;
LABEL_29:
            if (!v368) {
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v365);
            }
            goto LABEL_31;
          }
          vp::vx::io::Error::Error((vp::vx::io::Error *)&v365, (const vp::vx::io::Error *)&__dst);
          uint64_t v106 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v365);
          if (*(char *)(v106 + 23) >= 0) {
            uint64_t v107 = *(unsigned __int8 *)(v106 + 23);
          }
          else {
            uint64_t v107 = *(void *)(v106 + 8);
          }
          uint64_t v108 = vp::get_log((vp *)v106);
          BOOL v109 = os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
          if (v107)
          {
            if (v109)
            {
              uint64_t v110 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v361);
              if ((v363 & 0x80u) == 0) {
                v111 = (vp *)v363;
              }
              else {
                v111 = v362;
              }
              uint64_t v112 = vp::get_log(v110);
              if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
              {
                int v113 = (char)v363;
                uint64_t v114 = v361;
                int v115 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v365);
                v350 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v115);
                v351 = v116;
                std::string::basic_string<std::string_view,0>(&v357, (uint64_t)&v350);
                if (v113 >= 0) {
                  uint64_t v114 = &v361;
                }
                if (v111) {
                  v118 = " ";
                }
                else {
                  v118 = "";
                }
                if ((v359 & 0x80u) == 0) {
                  int v119 = &v357;
                }
                else {
                  int v119 = v357;
                }
                int v120 = WORD2(v365);
                int v121 = HIWORD(v365);
                uint64_t v122 = vp::get_log_source_file_path(v366, v117);
                uint64_t v123 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v365);
                if (*(char *)(v123 + 23) >= 0) {
                  uint64_t v124 = v123;
                }
                else {
                  uint64_t v124 = *(void *)v123;
                }
                *(_DWORD *)v388 = 136316930;
                *(void *)&v388[4] = v114;
                *(_WORD *)&v388[12] = 2080;
                *(void *)&v388[14] = v118;
                __int16 v389 = 2080;
                v390 = "get buffered input frame count for uplink echo DSP node";
                __int16 v391 = 2080;
                v392 = v119;
                __int16 v393 = 1024;
                int v394 = v120;
                __int16 v395 = 1024;
                int v396 = v121;
                __int16 v397 = 2080;
                uint64_t v398 = v122;
                __int16 v399 = 2080;
                uint64_t v400 = v124;
                uint64_t v125 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                uint64_t v126 = v112;
                uint32_t v127 = 74;
                goto LABEL_342;
              }
              goto LABEL_344;
            }
          }
          else if (v109)
          {
            char v272 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v361);
            if ((v363 & 0x80u) == 0) {
              std::string v273 = (vp *)v363;
            }
            else {
              std::string v273 = v362;
            }
            uint64_t v274 = vp::get_log(v272);
            if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
            {
              int v275 = (char)v363;
              long long v276 = (void **)v361;
              int v277 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v365);
              v350 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v277);
              v351 = v278;
              std::string::basic_string<std::string_view,0>(&v357, (uint64_t)&v350);
              if (v275 >= 0) {
                v280 = &v361;
              }
              else {
                v280 = v276;
              }
              if (v273) {
                v281 = " ";
              }
              else {
                v281 = "";
              }
              if ((v359 & 0x80u) == 0) {
                v282 = &v357;
              }
              else {
                v282 = v357;
              }
              int v283 = WORD2(v365);
              int v284 = HIWORD(v365);
              uint64_t v285 = vp::get_log_source_file_path(v366, v279);
              *(_DWORD *)v388 = 136316674;
              *(void *)&v388[4] = v280;
              *(_WORD *)&v388[12] = 2080;
              *(void *)&v388[14] = v281;
              __int16 v389 = 2080;
              v390 = "get buffered input frame count for uplink echo DSP node";
              __int16 v391 = 2080;
              v392 = v282;
              __int16 v393 = 1024;
              int v394 = v283;
              __int16 v395 = 1024;
              int v396 = v284;
              __int16 v397 = 2080;
              uint64_t v398 = v285;
              uint64_t v125 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
              uint64_t v126 = v274;
              uint32_t v127 = 64;
LABEL_342:
              _os_log_impl(&dword_1BB0CE000, v126, OS_LOG_TYPE_ERROR, v125, v388, v127);
              if ((char)v359 < 0) {
                operator delete(v357);
              }
            }
LABEL_344:
            if ((char)v363 < 0) {
              operator delete(v361);
            }
          }
          *(_DWORD *)a2 = 7;
          *(unsigned char *)(a2 + 4) = 0;
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v365);
          int v8 = 1;
LABEL_31:
          if (!v372) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
          }
          goto LABEL_33;
        }
        vp::vx::io::Error::Error((vp::vx::io::Error *)&__dst, (const vp::vx::io::Error *)&__p);
        uint64_t v84 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
        if (*(char *)(v84 + 23) >= 0) {
          uint64_t v85 = *(unsigned __int8 *)(v84 + 23);
        }
        else {
          uint64_t v85 = *(void *)(v84 + 8);
        }
        uint64_t v86 = vp::get_log((vp *)v84);
        BOOL v87 = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
        if (v85)
        {
          if (v87)
          {
            v88 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v365);
            if ((v367 & 0x80u) == 0) {
              unsigned __int16 v89 = (vp *)v367;
            }
            else {
              unsigned __int16 v89 = v366;
            }
            unsigned __int16 v90 = vp::get_log(v88);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
            {
              int v91 = (char)v367;
              char v92 = v365;
              int v93 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
              v357 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v93);
              v358 = v94;
              std::string::basic_string<std::string_view,0>(&v361, (uint64_t)&v357);
              if (v91 >= 0) {
                char v92 = &v365;
              }
              if (v89) {
                uint64_t v96 = " ";
              }
              else {
                uint64_t v96 = "";
              }
              if ((v363 & 0x80u) == 0) {
                __int16 v97 = &v361;
              }
              else {
                __int16 v97 = v361;
              }
              int v98 = WORD2(__dst);
              int v99 = HIWORD(__dst);
              uint64_t v100 = vp::get_log_source_file_path(v370, v95);
              uint64_t v101 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
              if (*(char *)(v101 + 23) >= 0) {
                uint64_t v102 = v101;
              }
              else {
                uint64_t v102 = *(void *)v101;
              }
              *(_DWORD *)v388 = 136316930;
              *(void *)&v388[4] = v92;
              *(_WORD *)&v388[12] = 2080;
              *(void *)&v388[14] = v96;
              __int16 v389 = 2080;
              v390 = "process uplink hardware DSP";
              __int16 v391 = 2080;
              v392 = v97;
              __int16 v393 = 1024;
              int v394 = v98;
              __int16 v395 = 1024;
              int v396 = v99;
              __int16 v397 = 2080;
              uint64_t v398 = v100;
              __int16 v399 = 2080;
              uint64_t v400 = v102;
              __int16 v103 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
              int v104 = v90;
              uint32_t v105 = 74;
              goto LABEL_322;
            }
            goto LABEL_324;
          }
        }
        else if (v87)
        {
          v258 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v365);
          if ((v367 & 0x80u) == 0) {
            v259 = (vp *)v367;
          }
          else {
            v259 = v366;
          }
          v260 = vp::get_log(v258);
          if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
          {
            int v261 = (char)v367;
            v262 = (void **)v365;
            int v263 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
            v357 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v263);
            v358 = v264;
            std::string::basic_string<std::string_view,0>(&v361, (uint64_t)&v357);
            if (v261 >= 0) {
              v266 = &v365;
            }
            else {
              v266 = v262;
            }
            if (v259) {
              v267 = " ";
            }
            else {
              v267 = "";
            }
            if ((v363 & 0x80u) == 0) {
              v268 = &v361;
            }
            else {
              v268 = v361;
            }
            int v269 = WORD2(__dst);
            int v270 = HIWORD(__dst);
            uint64_t v271 = vp::get_log_source_file_path(v370, v265);
            *(_DWORD *)v388 = 136316674;
            *(void *)&v388[4] = v266;
            *(_WORD *)&v388[12] = 2080;
            *(void *)&v388[14] = v267;
            __int16 v389 = 2080;
            v390 = "process uplink hardware DSP";
            __int16 v391 = 2080;
            v392 = v268;
            __int16 v393 = 1024;
            int v394 = v269;
            __int16 v395 = 1024;
            int v396 = v270;
            __int16 v397 = 2080;
            uint64_t v398 = v271;
            __int16 v103 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
            int v104 = v260;
            uint32_t v105 = 64;
LABEL_322:
            _os_log_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_ERROR, v103, v388, v105);
            if ((char)v363 < 0) {
              operator delete(v361);
            }
          }
LABEL_324:
          if ((char)v367 < 0) {
            operator delete(v365);
          }
        }
        *(_DWORD *)a2 = 7;
        *(unsigned char *)(a2 + 4) = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
        int v8 = 1;
LABEL_33:
        if (!v376) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
        }
        goto LABEL_35;
      }
      vp::vx::io::Error::Error((vp::vx::io::Error *)&__p, (const vp::vx::io::Error *)&v377);
      uint64_t v62 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
      if (*(char *)(v62 + 23) >= 0) {
        uint64_t v63 = *(unsigned __int8 *)(v62 + 23);
      }
      else {
        uint64_t v63 = *(void *)(v62 + 8);
      }
      char v64 = vp::get_log((vp *)v62);
      BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
      if (v63)
      {
        if (v65)
        {
          char v66 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
          if ((v371 & 0x80u) == 0) {
            uint64_t v67 = (vp *)v371;
          }
          else {
            uint64_t v67 = v370;
          }
          char v68 = vp::get_log(v66);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            int v69 = (char)v371;
            p_dst = __dst;
            int v71 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
            v361 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v71);
            v362 = v72;
            std::string::basic_string<std::string_view,0>(&v365, (uint64_t)&v361);
            if (v69 >= 0) {
              p_dst = &__dst;
            }
            if (v67) {
              uint64_t v74 = " ";
            }
            else {
              uint64_t v74 = "";
            }
            if ((v367 & 0x80u) == 0) {
              __int16 v75 = &v365;
            }
            else {
              __int16 v75 = v365;
            }
            int v76 = WORD2(__p);
            int v77 = HIWORD(__p);
            uint64_t v78 = vp::get_log_source_file_path(v374, v73);
            uint64_t v79 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
            if (*(char *)(v79 + 23) >= 0) {
              uint64_t v80 = v79;
            }
            else {
              uint64_t v80 = *(void *)v79;
            }
            *(_DWORD *)v388 = 136316930;
            *(void *)&v388[4] = p_dst;
            *(_WORD *)&v388[12] = 2080;
            *(void *)&v388[14] = v74;
            __int16 v389 = 2080;
            v390 = "get buffered input frame count for uplink hardware DSP node";
            __int16 v391 = 2080;
            v392 = v75;
            __int16 v393 = 1024;
            int v394 = v76;
            __int16 v395 = 1024;
            int v396 = v77;
            __int16 v397 = 2080;
            uint64_t v398 = v78;
            __int16 v399 = 2080;
            uint64_t v400 = v80;
            __int16 v81 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
            uint64_t v82 = v68;
            uint32_t v83 = 74;
            goto LABEL_302;
          }
          goto LABEL_304;
        }
      }
      else if (v65)
      {
        uint64_t v244 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
        if ((v371 & 0x80u) == 0) {
          uint64_t v245 = (vp *)v371;
        }
        else {
          uint64_t v245 = v370;
        }
        long long v246 = vp::get_log(v244);
        if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
        {
          int v247 = (char)v371;
          __int16 v248 = (void **)__dst;
          int v249 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
          v361 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v249);
          v362 = v250;
          std::string::basic_string<std::string_view,0>(&v365, (uint64_t)&v361);
          if (v247 >= 0) {
            CFStringRef v252 = &__dst;
          }
          else {
            CFStringRef v252 = v248;
          }
          if (v245) {
            CFStringRef v253 = " ";
          }
          else {
            CFStringRef v253 = "";
          }
          if ((v367 & 0x80u) == 0) {
            id v254 = &v365;
          }
          else {
            id v254 = v365;
          }
          int v255 = WORD2(__p);
          int v256 = HIWORD(__p);
          uint64_t v257 = vp::get_log_source_file_path(v374, v251);
          *(_DWORD *)v388 = 136316674;
          *(void *)&v388[4] = v252;
          *(_WORD *)&v388[12] = 2080;
          *(void *)&v388[14] = v253;
          __int16 v389 = 2080;
          v390 = "get buffered input frame count for uplink hardware DSP node";
          __int16 v391 = 2080;
          v392 = v254;
          __int16 v393 = 1024;
          int v394 = v255;
          __int16 v395 = 1024;
          int v396 = v256;
          __int16 v397 = 2080;
          uint64_t v398 = v257;
          __int16 v81 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
          uint64_t v82 = v246;
          uint32_t v83 = 64;
LABEL_302:
          _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_ERROR, v81, v388, v83);
          if ((char)v367 < 0) {
            operator delete(v365);
          }
        }
LABEL_304:
        if ((char)v371 < 0) {
          operator delete(__dst);
        }
      }
      *(_DWORD *)a2 = 7;
      *(unsigned char *)(a2 + 4) = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
      int v8 = 1;
LABEL_35:
      if (!v380) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v377);
      }
      goto LABEL_37;
    }
    vp::vx::io::Error::Error((vp::vx::io::Error *)&v377, (const vp::vx::io::Error *)v381);
    uint64_t v40 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v377);
    if (*(char *)(v40 + 23) >= 0) {
      uint64_t v41 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v41 = *(void *)(v40 + 8);
    }
    int v42 = vp::get_log((vp *)v40);
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
    if (v41)
    {
      if (v43)
      {
        uint64_t v44 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
        if ((v375 & 0x80u) == 0) {
          uint64_t v45 = (vp *)v375;
        }
        else {
          uint64_t v45 = v374;
        }
        __int16 v46 = vp::get_log(v44);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          int v47 = (char)v375;
          p_p = __p;
          int v49 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v377);
          v365 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v49);
          v366 = v50;
          std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v365);
          if (v47 >= 0) {
            p_p = &__p;
          }
          if (v45) {
            uint64_t v52 = " ";
          }
          else {
            uint64_t v52 = "";
          }
          if ((v371 & 0x80u) == 0) {
            unint64_t v53 = &__dst;
          }
          else {
            unint64_t v53 = __dst;
          }
          int v54 = WORD2(v377);
          int v55 = HIWORD(v377);
          uint64_t v56 = vp::get_log_source_file_path(v378, v51);
          uint64_t v57 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v377);
          if (*(char *)(v57 + 23) >= 0) {
            uint64_t v58 = v57;
          }
          else {
            uint64_t v58 = *(void *)v57;
          }
          *(_DWORD *)v388 = 136316930;
          *(void *)&v388[4] = p_p;
          *(_WORD *)&v388[12] = 2080;
          *(void *)&v388[14] = v52;
          __int16 v389 = 2080;
          v390 = "process uplink \"mic-ref-sync\" DSP";
          __int16 v391 = 2080;
          v392 = v53;
          __int16 v393 = 1024;
          int v394 = v54;
          __int16 v395 = 1024;
          int v396 = v55;
          __int16 v397 = 2080;
          uint64_t v398 = v56;
          __int16 v399 = 2080;
          uint64_t v400 = v58;
          unsigned __int8 v59 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          unsigned int v60 = v46;
          uint32_t v61 = 74;
          goto LABEL_282;
        }
        goto LABEL_284;
      }
    }
    else if (v43)
    {
      uint64_t v230 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      if ((v375 & 0x80u) == 0) {
        long long v231 = (vp *)v375;
      }
      else {
        long long v231 = v374;
      }
      uint64_t v232 = vp::get_log(v230);
      if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
      {
        int v233 = (char)v375;
        long long v234 = (void **)__p;
        int v235 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v377);
        v365 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v235);
        v366 = v236;
        std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v365);
        if (v233 >= 0) {
          uint64_t v238 = &__p;
        }
        else {
          uint64_t v238 = v234;
        }
        if (v231) {
          uint64_t v239 = " ";
        }
        else {
          uint64_t v239 = "";
        }
        if ((v371 & 0x80u) == 0) {
          long long v240 = &__dst;
        }
        else {
          long long v240 = __dst;
        }
        int v241 = WORD2(v377);
        int v242 = HIWORD(v377);
        uint64_t v243 = vp::get_log_source_file_path(v378, v237);
        *(_DWORD *)v388 = 136316674;
        *(void *)&v388[4] = v238;
        *(_WORD *)&v388[12] = 2080;
        *(void *)&v388[14] = v239;
        __int16 v389 = 2080;
        v390 = "process uplink \"mic-ref-sync\" DSP";
        __int16 v391 = 2080;
        v392 = v240;
        __int16 v393 = 1024;
        int v394 = v241;
        __int16 v395 = 1024;
        int v396 = v242;
        __int16 v397 = 2080;
        uint64_t v398 = v243;
        unsigned __int8 v59 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        unsigned int v60 = v232;
        uint32_t v61 = 64;
LABEL_282:
        _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_ERROR, v59, v388, v61);
        if ((char)v371 < 0) {
          operator delete(__dst);
        }
      }
LABEL_284:
      if ((char)v375 < 0) {
        operator delete(__p);
      }
    }
    *(_DWORD *)a2 = 7;
    *(unsigned char *)(a2 + 4) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v377);
    int v8 = 1;
LABEL_37:
    if (!v385) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v381);
    }
    goto LABEL_39;
  }
  vp::vx::io::Error::Error((vp::vx::io::Error *)v381, (const vp::vx::io::Error *)buf);
  uint64_t v18 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v381);
  if (*(char *)(v18 + 23) >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    uint64_t v19 = *(void *)(v18 + 8);
  }
  char v20 = vp::get_log((vp *)v18);
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  if (v19)
  {
    if (v21)
    {
      uint64_t v22 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v377);
      if ((v379 & 0x80u) == 0) {
        int v23 = (vp *)v379;
      }
      else {
        int v23 = v378;
      }
      unsigned __int8 v24 = vp::get_log(v22);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        int v25 = (char)v379;
        uint64_t v26 = v377;
        int v27 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v381);
        long long __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v27);
        v370 = v28;
        std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
        if (v25 >= 0) {
          uint64_t v26 = &v377;
        }
        if (v23) {
          int v30 = " ";
        }
        else {
          int v30 = "";
        }
        if ((v375 & 0x80u) == 0) {
          int v31 = &__p;
        }
        else {
          int v31 = __p;
        }
        int v32 = v382;
        int v33 = v383;
        uint64_t v34 = vp::get_log_source_file_path(v384, v29);
        uint64_t v35 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v381);
        if (*(char *)(v35 + 23) >= 0) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = *(void *)v35;
        }
        *(_DWORD *)v388 = 136316930;
        *(void *)&v388[4] = v26;
        *(_WORD *)&v388[12] = 2080;
        *(void *)&v388[14] = v30;
        __int16 v389 = 2080;
        v390 = "get buffered input frame count for uplink mic-ref \"sync\" node";
        __int16 v391 = 2080;
        v392 = v31;
        __int16 v393 = 1024;
        int v394 = v32;
        __int16 v395 = 1024;
        int v396 = v33;
        __int16 v397 = 2080;
        uint64_t v398 = v34;
        __int16 v399 = 2080;
        uint64_t v400 = v36;
        uint32_t v37 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
        uint64_t v38 = v24;
        uint32_t v39 = 74;
        goto LABEL_262;
      }
      goto LABEL_264;
    }
  }
  else if (v21)
  {
    char v216 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v377);
    if ((v379 & 0x80u) == 0) {
      uint64_t v217 = (vp *)v379;
    }
    else {
      uint64_t v217 = v378;
    }
    CFStringRef v218 = vp::get_log(v216);
    if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
    {
      int v219 = (char)v379;
      id v220 = (void **)v377;
      int v221 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v381);
      long long __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v221);
      v370 = v222;
      std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
      if (v219 >= 0) {
        uint64_t v224 = &v377;
      }
      else {
        uint64_t v224 = v220;
      }
      if (v217) {
        long long v225 = " ";
      }
      else {
        long long v225 = "";
      }
      if ((v375 & 0x80u) == 0) {
        uint64_t v226 = &__p;
      }
      else {
        uint64_t v226 = __p;
      }
      int v227 = v382;
      int v228 = v383;
      uint64_t v229 = vp::get_log_source_file_path(v384, v223);
      *(_DWORD *)v388 = 136316674;
      *(void *)&v388[4] = v224;
      *(_WORD *)&v388[12] = 2080;
      *(void *)&v388[14] = v225;
      __int16 v389 = 2080;
      v390 = "get buffered input frame count for uplink mic-ref \"sync\" node";
      __int16 v391 = 2080;
      v392 = v226;
      __int16 v393 = 1024;
      int v394 = v227;
      __int16 v395 = 1024;
      int v396 = v228;
      __int16 v397 = 2080;
      uint64_t v398 = v229;
      uint32_t v37 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
      uint64_t v38 = v218;
      uint32_t v39 = 64;
LABEL_262:
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, v37, v388, v39);
      if ((char)v375 < 0) {
        operator delete(__p);
      }
    }
LABEL_264:
    if ((char)v379 < 0) {
      operator delete(v377);
    }
  }
  *(_DWORD *)a2 = 7;
  *(unsigned char *)(a2 + 4) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)v381);
  int v8 = 1;
LABEL_39:
  if (!v405) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
  }
  uint64_t result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v386);
  if (!v8)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 4) = 1;
  }
  return result;
}

void sub_1BB225B00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a14);
    if (!a26) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a20);
    }
    if (!a39) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a33);
    }
    if (!a46) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a40);
    }
    if (!a53) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a47);
    }
    if (!a60) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a54);
    }
    if (!a67) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a61);
    }
    if (!a71) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a68);
    }
    if (!LOBYTE(STACK[0x228])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a72);
    }
    if (!*(unsigned char *)(v73 - 96)) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)(v73 - 144));
    }
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100](v73 - 240);
    __int16 v75 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v75);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, (void *)(v73 - 144));
      uint64_t v78 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a68);
      }
      if (*(char *)(v73 - 121) < 0) {
        operator delete(*(void **)(v73 - 144));
      }
    }
    *(_DWORD *)uint64_t v72 = 11;
    *(unsigned char *)(v72 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BB224074);
  }
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::components_end_process<vp::vx::Uplink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    int v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v9 = *a3;
    char v10 = *((unsigned char *)a3 + 4);
    (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 232))(v7, a2, &v9);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

vp::vx::Voice_Processor *vp::vx::Voice_Processor::reset_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>, int a3@<W1>)
{
  if (!a3) {
    return (vp::vx::Voice_Processor *)vp::vx::Voice_Processor::reset_all_of_uplink_dsp(this, a2);
  }
  *(_DWORD *)a2 = 9;
  *(unsigned char *)(a2 + 4) = 0;
  return this;
}

{
  if (!a3) {
    return (vp::vx::Voice_Processor *)vp::vx::Voice_Processor::reset_all_of_downlink_dsp(this, a2);
  }
  *(_DWORD *)a2 = 9;
  *(unsigned char *)(a2 + 4) = 0;
  return this;
}

uint64_t vp::vx::Voice_Processor::reset_all_of_uplink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v56 = (char *)this + 1128;
  unsigned int v3 = atomic_load((unsigned int *)this + 282);
  if (v3 > 0x7FFFFFFE)
  {
LABEL_5:
    char v57 = 0;
LABEL_6:
    *(_DWORD *)a2 = 8;
    *(unsigned char *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v56);
  }
  unsigned int v5 = v3;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)this + 282, &v5, v3 + 1);
    if (v5 == v3) {
      break;
    }
    unsigned int v3 = v5;
    if (v5 >= 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  char v57 = 1;
  uint64_t v7 = (vp::vx::io::Graph *)*((void *)this + 300);
  if (!v7) {
    goto LABEL_6;
  }
  *((unsigned char *)this + 240boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 0;
  vp::vx::io::Graph::reset(v7, v51);
  if (!v55)
  {
    uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v51);
    if (*(char *)(node_commands + 23) >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(node_commands + 23);
    }
    else {
      uint64_t v9 = *(void *)(node_commands + 8);
    }
    log = vp::get_log((vp *)node_commands);
    BOOL v11 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11)
      {
        log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v48);
        if ((v50 & 0x80u) == 0) {
          uint64_t v13 = v50;
        }
        else {
          uint64_t v13 = v49;
        }
        unsigned int v14 = vp::get_log(log_context_info);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v15 = (char)v50;
          uint64_t v16 = (void **)v48;
          int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v51);
          uint64_t v44 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
          uint64_t v45 = v18;
          std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v44);
          if (v15 >= 0) {
            uint64_t v16 = &v48;
          }
          if (v13) {
            char v20 = " ";
          }
          else {
            char v20 = "";
          }
          if (v47 >= 0) {
            BOOL v21 = __p;
          }
          else {
            BOOL v21 = (void **)__p[0];
          }
          int v22 = v52;
          int v23 = v53;
          uint64_t log_source_file_path = vp::get_log_source_file_path(v54, v19);
          uint64_t v25 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v51);
          if (*(char *)(v25 + 23) >= 0) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = *(void *)v25;
          }
          *(_DWORD *)std::string buf = 136316930;
          unsigned __int8 v59 = v16;
          __int16 v60 = 2080;
          uint32_t v61 = v20;
          __int16 v62 = 2080;
          uint64_t v63 = "reset uplink DSP";
          __int16 v64 = 2080;
          BOOL v65 = v21;
          __int16 v66 = 1024;
          int v67 = v22;
          __int16 v68 = 1024;
          int v69 = v23;
          __int16 v70 = 2080;
          uint64_t v71 = log_source_file_path;
          __int16 v72 = 2080;
          uint64_t v73 = v26;
          int v27 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          BOOL v28 = v14;
          uint32_t v29 = 74;
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
    else if (v11)
    {
      int v30 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v48);
      if ((v50 & 0x80u) == 0) {
        uint64_t v31 = v50;
      }
      else {
        uint64_t v31 = v49;
      }
      int v32 = vp::get_log(v30);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        int v33 = (char)v50;
        uint64_t v34 = (void **)v48;
        int v35 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v51);
        uint64_t v44 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v35);
        uint64_t v45 = v36;
        std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v44);
        if (v33 >= 0) {
          uint64_t v38 = &v48;
        }
        else {
          uint64_t v38 = v34;
        }
        if (v31) {
          uint32_t v39 = " ";
        }
        else {
          uint32_t v39 = "";
        }
        if (v47 >= 0) {
          uint64_t v40 = __p;
        }
        else {
          uint64_t v40 = (void **)__p[0];
        }
        int v41 = v52;
        int v42 = v53;
        uint64_t v43 = vp::get_log_source_file_path(v54, v37);
        *(_DWORD *)std::string buf = 136316674;
        unsigned __int8 v59 = v38;
        __int16 v60 = 2080;
        uint32_t v61 = v39;
        __int16 v62 = 2080;
        uint64_t v63 = "reset uplink DSP";
        __int16 v64 = 2080;
        BOOL v65 = v40;
        __int16 v66 = 1024;
        int v67 = v41;
        __int16 v68 = 1024;
        int v69 = v42;
        __int16 v70 = 2080;
        uint64_t v71 = v43;
        int v27 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        BOOL v28 = v32;
        uint32_t v29 = 64;
LABEL_48:
        _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, v27, buf, v29);
        if (v47 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_50:
      if ((char)v50 < 0) {
        operator delete(v48);
      }
    }
    *(_DWORD *)a2 = 5;
    *(unsigned char *)(a2 + 4) = 0;
    if (!v55) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v51);
    }
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v56);
  }
  uint64_t result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v56);
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return result;
}

void sub_1BB2262E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint8_t buf,int a37,int a38,__int16 a39,int a40,__int16 a41,__int16 a42,uint64_t a43)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
    if (!a30) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a21);
    }
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a32);
    uint64_t v45 = (vp *)__cxa_begin_catch(exception_object);
    log = vp::get_log(v45);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &a21);
      int v48 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a12);
      }
      if (a26 < 0) {
        operator delete(a21);
      }
    }
    *(_DWORD *)uint64_t v43 = 11;
    *(unsigned char *)(v43 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BB225FC4);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::components_begin_process<vp::vx::Downlink_Node_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 272))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t vp::vx::Voice_Processor::run_all_of_downlink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v909 = *MEMORY[0x1E4F143B8];
  v889 = (char *)this + 1128;
  unsigned int v3 = atomic_load((unsigned int *)this + 282);
  if (v3 > 0x7FFFFFFE)
  {
LABEL_5:
    char v890 = 0;
    goto LABEL_8;
  }
  unsigned int v5 = v3;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)this + 282, &v5, v3 + 1);
    if (v5 == v3) {
      break;
    }
    unsigned int v3 = v5;
    if (v5 >= 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  char v890 = 1;
  uint64_t v6 = *((void *)this + 313);
  if (!v6)
  {
    log = vp::get_log(this);
    if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v891);
      uint64_t v35 = HIBYTE(v892);
      uint64_t v36 = *(void *)&v891[8];
      uint32_t v37 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
      {
        if ((v35 & 0x80u) == 0) {
          uint64_t v38 = v35;
        }
        else {
          uint64_t v38 = v36;
        }
        uint32_t v39 = *(unsigned char **)v891;
        if (v892 >= 0) {
          uint32_t v39 = v891;
        }
        if (v38) {
          uint64_t v40 = " ";
        }
        else {
          uint64_t v40 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        v905 = v39;
        __int16 v906 = 2080;
        v907 = v40;
        _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_FAULT, "%s%scannot run downlink DSP with uninitialized VoiceProcessor", buf, 0x16u);
      }
      if (SHIBYTE(v892) < 0) {
        operator delete(*(void **)v891);
      }
    }
    goto LABEL_8;
  }
  unsigned int v7 = *((_DWORD *)this + 195);
  if (v7 < 2)
  {
LABEL_8:
    *(_DWORD *)a2 = 8;
    *(unsigned char *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v889);
  }
  if (v7 == 2 && *((_DWORD *)this + 66) != 3)
  {
    uint64_t v27 = 0;
    while (2)
    {
      unsigned int v28 = *(_DWORD *)((char *)&xmmword_1BB8727D0 + v27);
      uint32_t v29 = (char *)this + 2620;
      switch(v28)
      {
        case 0u:
          goto LABEL_107;
        case 1u:
          uint32_t v29 = (char *)this + 2628;
          goto LABEL_107;
        case 2u:
          uint32_t v29 = (char *)this + 2636;
          goto LABEL_107;
        case 3u:
          uint32_t v29 = (char *)this + 2644;
LABEL_107:
          if (*(_DWORD *)v29 == -1) {
            goto LABEL_119;
          }
          goto LABEL_110;
        default:
          if (v28 >= 8) {
            std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
          }
LABEL_110:
          uint64_t v30 = *((void *)this + 314);
          if ((v30 & (1 << v28)) != 0)
          {
            *((void *)this + 314) = v30 & ~(1 << v28);
          }
          else
          {
            uint64_t v31 = (unsigned int *)((char *)this + 2620);
            switch(v28)
            {
              case 0u:
                goto LABEL_116;
              case 1u:
                uint64_t v31 = (unsigned int *)((char *)this + 2628);
                goto LABEL_116;
              case 2u:
                uint64_t v31 = (unsigned int *)((char *)this + 2636);
                goto LABEL_116;
              case 3u:
                uint64_t v31 = (unsigned int *)((char *)this + 2644);
LABEL_116:
                unsigned int v32 = *v31;
                break;
              default:
                unsigned int v32 = 0;
                break;
            }
            vp::vx::io::Graph::reset(v6, v32, (uint64_t)v891);
            if (!(_BYTE)v898) {
              vp::vx::io::Error::~Error((vp::vx::io::Error *)v891);
            }
          }
LABEL_119:
          v27 += 4;
          if (v27 == 16) {
            break;
          }
          continue;
      }
      break;
    }
  }
  vp::vx::io::Graph::get_block_size(v6, *((_DWORD *)this + 654), (uint64_t)buf);
  if (v908)
  {
    unsigned int v9 = *(_DWORD *)buf;
    vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 654), 0, (uint64_t)&v884);
    if (v888)
    {
      if (v9 >= v884) {
        uint64_t v10 = v9 - v884;
      }
      else {
        uint64_t v10 = 0;
      }
      vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 668), v10, (uint64_t)&v880);
      if (v883)
      {
        unsigned int v11 = v880;
        vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 653), 1, (uint64_t)&__p);
        if (v879)
        {
          if (v11 >= __p) {
            uint64_t v12 = v11 - __p;
          }
          else {
            uint64_t v12 = 0;
          }
          vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 653), v12, (uint64_t)&__dst);
          if (v875)
          {
            unsigned int v13 = __dst;
            vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 653), 0, (uint64_t)&v868);
            if (v871)
            {
              if (v13 >= v868) {
                uint64_t v14 = v13 - v868;
              }
              else {
                uint64_t v14 = 0;
              }
              vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 667), v14, (uint64_t)&v864);
              if (v867)
              {
                unsigned int v15 = v864;
                vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 652), 1, (uint64_t)&v860);
                if (v863)
                {
                  if (v15 >= v860) {
                    uint64_t v16 = v15 - v860;
                  }
                  else {
                    uint64_t v16 = 0;
                  }
                  vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 652), v16, (uint64_t)&v856);
                  if (v859)
                  {
                    unsigned int v17 = v856;
                    vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 652), 0, (uint64_t)&v852);
                    if (v855)
                    {
                      if (v17 >= v852) {
                        uint64_t v18 = v17 - v852;
                      }
                      else {
                        uint64_t v18 = 0;
                      }
                      vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 666), v18, (uint64_t)&v848);
                      if (v851)
                      {
                        unsigned int v19 = v848;
                        vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 651), 1, (uint64_t)&v844);
                        if (v847)
                        {
                          if (v19 >= v844) {
                            uint64_t v20 = v19 - v844;
                          }
                          else {
                            uint64_t v20 = 0;
                          }
                          vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 651), v20, (uint64_t)&v840);
                          if (v843)
                          {
                            unsigned int v21 = v840;
                            vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 651), 0, (uint64_t)&v836);
                            if (v839)
                            {
                              if (v21 >= v836) {
                                uint64_t v22 = v21 - v836;
                              }
                              else {
                                uint64_t v22 = 0;
                              }
                              vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 665), v22, (uint64_t)&v832);
                              if (v835)
                              {
                                unsigned int v23 = v832;
                                vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 650), 1, (uint64_t)&v828);
                                if (v831)
                                {
                                  unsigned int v24 = v23 - v828;
                                  if (v23 < v828) {
                                    unsigned int v24 = 0;
                                  }
                                  if (v23 <= v828) {
                                    unsigned int v25 = 1;
                                  }
                                  else {
                                    unsigned int v25 = v24;
                                  }
                                  vp::vx::io::Graph::process(v6, *((_DWORD *)this + 650), v25, &v824);
                                  if (v827)
                                  {
                                    vp::vx::io::Graph::process(v6, *((_DWORD *)this + 651), v21, &v820);
                                    if (v823)
                                    {
                                      vp::vx::io::Graph::process(v6, *((_DWORD *)this + 652), v17, &v816);
                                      if (v819)
                                      {
                                        vp::vx::io::Graph::process(v6, *((_DWORD *)this + 653), v13, &v812);
                                        if (v815)
                                        {
                                          vp::vx::io::Graph::process(v6, *((_DWORD *)this + 654), v9, &v805);
                                          if (v808)
                                          {
                                            int v26 = 0;
                                            goto LABEL_59;
                                          }
                                          vp::vx::io::Error::Error((vp::vx::io::Error *)&v802, (const vp::vx::io::Error *)&v805);
                                          uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v802);
                                          if (*(char *)(node_commands + 23) >= 0) {
                                            uint64_t v482 = *(unsigned __int8 *)(node_commands + 23);
                                          }
                                          else {
                                            uint64_t v482 = *(void *)(node_commands + 8);
                                          }
                                          v483 = vp::get_log((vp *)node_commands);
                                          BOOL v484 = os_log_type_enabled(v483, OS_LOG_TYPE_ERROR);
                                          if (v482)
                                          {
                                            if (!v484) {
                                              goto LABEL_995;
                                            }
                                            v485 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v809);
                                            if ((v811 & 0x80u) == 0) {
                                              uint64_t v486 = v811;
                                            }
                                            else {
                                              uint64_t v486 = v810;
                                            }
                                            v487 = vp::get_log(v485);
                                            if (!os_log_type_enabled(v487, OS_LOG_TYPE_ERROR)) {
                                              goto LABEL_993;
                                            }
                                            int v488 = (char)v811;
                                            v489 = v809;
                                            int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v802);
                                            v797 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
                                            uint64_t v798 = v491;
                                            std::string::basic_string<std::string_view,0>(&v799, (uint64_t)&v797);
                                            if (v488 >= 0) {
                                              v489 = &v809;
                                            }
                                            if (v486) {
                                              v493 = " ";
                                            }
                                            else {
                                              v493 = "";
                                            }
                                            if (v801 >= 0) {
                                              v494 = &v799;
                                            }
                                            else {
                                              v494 = v799;
                                            }
                                            int v495 = WORD2(v802);
                                            int v496 = HIWORD(v802);
                                            uint64_t log_source_file_path = vp::get_log_source_file_path(v803, v492);
                                            uint64_t v498 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v802);
                                            if (*(char *)(v498 + 23) >= 0) {
                                              uint64_t v499 = v498;
                                            }
                                            else {
                                              uint64_t v499 = *(void *)v498;
                                            }
                                            *(_DWORD *)v891 = 136316930;
                                            *(void *)&v891[4] = v489;
                                            *(_WORD *)&v891[12] = 2080;
                                            *(void *)&v891[14] = v493;
                                            __int16 v892 = 2080;
                                            v893 = "process downlink hardware DSP";
                                            __int16 v894 = 2080;
                                            v895 = v494;
                                            __int16 v896 = 1024;
                                            int v897 = v495;
                                            __int16 v898 = 1024;
                                            int v899 = v496;
                                            __int16 v900 = 2080;
                                            uint64_t v901 = log_source_file_path;
                                            __int16 v902 = 2080;
                                            uint64_t v903 = v499;
                                            v500 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                            v501 = v487;
                                            uint32_t v502 = 74;
                                          }
                                          else
                                          {
                                            if (!v484) {
                                              goto LABEL_995;
                                            }
                                            v783 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v809);
                                            if ((v811 & 0x80u) == 0) {
                                              uint64_t v784 = v811;
                                            }
                                            else {
                                              uint64_t v784 = v810;
                                            }
                                            v785 = vp::get_log(v783);
                                            if (!os_log_type_enabled(v785, OS_LOG_TYPE_ERROR))
                                            {
LABEL_993:
                                              if ((char)v811 < 0) {
                                                operator delete(v809);
                                              }
LABEL_995:
                                              *(_DWORD *)a2 = 7;
                                              *(unsigned char *)(a2 + 4) = 0;
                                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v802);
                                              if (v808)
                                              {
LABEL_997:
                                                int v26 = 1;
LABEL_59:
                                                if (!v815) {
                                                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v812);
                                                }
                                                goto LABEL_61;
                                              }
LABEL_996:
                                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v805);
                                              goto LABEL_997;
                                            }
                                            int v786 = (char)v811;
                                            v787 = (void **)v809;
                                            int v788 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v802);
                                            v797 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v788);
                                            uint64_t v798 = v789;
                                            std::string::basic_string<std::string_view,0>(&v799, (uint64_t)&v797);
                                            if (v786 >= 0) {
                                              v791 = &v809;
                                            }
                                            else {
                                              v791 = v787;
                                            }
                                            if (v784) {
                                              v792 = " ";
                                            }
                                            else {
                                              v792 = "";
                                            }
                                            if (v801 >= 0) {
                                              v793 = &v799;
                                            }
                                            else {
                                              v793 = v799;
                                            }
                                            int v794 = WORD2(v802);
                                            int v795 = HIWORD(v802);
                                            uint64_t v796 = vp::get_log_source_file_path(v803, v790);
                                            *(_DWORD *)v891 = 136316674;
                                            *(void *)&v891[4] = v791;
                                            *(_WORD *)&v891[12] = 2080;
                                            *(void *)&v891[14] = v792;
                                            __int16 v892 = 2080;
                                            v893 = "process downlink hardware DSP";
                                            __int16 v894 = 2080;
                                            v895 = v793;
                                            __int16 v896 = 1024;
                                            int v897 = v794;
                                            __int16 v898 = 1024;
                                            int v899 = v795;
                                            __int16 v900 = 2080;
                                            uint64_t v901 = v796;
                                            v500 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                            v501 = v785;
                                            uint32_t v502 = 64;
                                          }
                                          _os_log_impl(&dword_1BB0CE000, v501, OS_LOG_TYPE_ERROR, v500, v891, v502);
                                          if (v801 < 0) {
                                            operator delete(v799);
                                          }
                                          goto LABEL_993;
                                        }
                                        vp::vx::io::Error::Error((vp::vx::io::Error *)&v805, (const vp::vx::io::Error *)&v812);
                                        uint64_t v459 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v805);
                                        if (*(char *)(v459 + 23) >= 0) {
                                          uint64_t v460 = *(unsigned __int8 *)(v459 + 23);
                                        }
                                        else {
                                          uint64_t v460 = *(void *)(v459 + 8);
                                        }
                                        v461 = vp::get_log((vp *)v459);
                                        BOOL v462 = os_log_type_enabled(v461, OS_LOG_TYPE_ERROR);
                                        if (v460)
                                        {
                                          if (v462)
                                          {
                                            v463 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v802);
                                            if ((v804 & 0x80u) == 0) {
                                              v464 = (vp *)v804;
                                            }
                                            else {
                                              v464 = v803;
                                            }
                                            v465 = vp::get_log(v463);
                                            if (os_log_type_enabled(v465, OS_LOG_TYPE_ERROR))
                                            {
                                              int v466 = (char)v804;
                                              v467 = v802;
                                              int v468 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v805);
                                              v799 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v468);
                                              uint64_t v800 = v469;
                                              std::string::basic_string<std::string_view,0>(&v809, (uint64_t)&v799);
                                              if (v466 >= 0) {
                                                v467 = &v802;
                                              }
                                              if (v464) {
                                                v471 = " ";
                                              }
                                              else {
                                                v471 = "";
                                              }
                                              if ((v811 & 0x80u) == 0) {
                                                v472 = &v809;
                                              }
                                              else {
                                                v472 = v809;
                                              }
                                              int v473 = WORD2(v805);
                                              int v474 = HIWORD(v805);
                                              uint64_t v475 = vp::get_log_source_file_path(v806, v470);
                                              uint64_t v476 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v805);
                                              if (*(char *)(v476 + 23) >= 0) {
                                                uint64_t v477 = v476;
                                              }
                                              else {
                                                uint64_t v477 = *(void *)v476;
                                              }
                                              *(_DWORD *)v891 = 136316930;
                                              *(void *)&v891[4] = v467;
                                              *(_WORD *)&v891[12] = 2080;
                                              *(void *)&v891[14] = v471;
                                              __int16 v892 = 2080;
                                              v893 = "process downlink dynamics DSP";
                                              __int16 v894 = 2080;
                                              v895 = v472;
                                              __int16 v896 = 1024;
                                              int v897 = v473;
                                              __int16 v898 = 1024;
                                              int v899 = v474;
                                              __int16 v900 = 2080;
                                              uint64_t v901 = v475;
                                              __int16 v902 = 2080;
                                              uint64_t v903 = v477;
                                              v478 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                              v479 = v465;
                                              uint32_t v480 = 74;
                                              goto LABEL_971;
                                            }
                                            goto LABEL_973;
                                          }
                                        }
                                        else if (v462)
                                        {
                                          v769 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v802);
                                          if ((v804 & 0x80u) == 0) {
                                            v770 = (vp *)v804;
                                          }
                                          else {
                                            v770 = v803;
                                          }
                                          v771 = vp::get_log(v769);
                                          if (os_log_type_enabled(v771, OS_LOG_TYPE_ERROR))
                                          {
                                            int v772 = (char)v804;
                                            v773 = (void **)v802;
                                            int v774 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v805);
                                            v799 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v774);
                                            uint64_t v800 = v775;
                                            std::string::basic_string<std::string_view,0>(&v809, (uint64_t)&v799);
                                            if (v772 >= 0) {
                                              v777 = &v802;
                                            }
                                            else {
                                              v777 = v773;
                                            }
                                            if (v770) {
                                              v778 = " ";
                                            }
                                            else {
                                              v778 = "";
                                            }
                                            if ((v811 & 0x80u) == 0) {
                                              v779 = &v809;
                                            }
                                            else {
                                              v779 = v809;
                                            }
                                            int v780 = WORD2(v805);
                                            int v781 = HIWORD(v805);
                                            uint64_t v782 = vp::get_log_source_file_path(v806, v776);
                                            *(_DWORD *)v891 = 136316674;
                                            *(void *)&v891[4] = v777;
                                            *(_WORD *)&v891[12] = 2080;
                                            *(void *)&v891[14] = v778;
                                            __int16 v892 = 2080;
                                            v893 = "process downlink dynamics DSP";
                                            __int16 v894 = 2080;
                                            v895 = v779;
                                            __int16 v896 = 1024;
                                            int v897 = v780;
                                            __int16 v898 = 1024;
                                            int v899 = v781;
                                            __int16 v900 = 2080;
                                            uint64_t v901 = v782;
                                            v478 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                            v479 = v771;
                                            uint32_t v480 = 64;
LABEL_971:
                                            _os_log_impl(&dword_1BB0CE000, v479, OS_LOG_TYPE_ERROR, v478, v891, v480);
                                            if ((char)v811 < 0) {
                                              operator delete(v809);
                                            }
                                          }
LABEL_973:
                                          if ((char)v804 < 0) {
                                            operator delete(v802);
                                          }
                                        }
                                        *(_DWORD *)a2 = 7;
                                        *(unsigned char *)(a2 + 4) = 0;
                                        goto LABEL_996;
                                      }
                                      vp::vx::io::Error::Error((vp::vx::io::Error *)&v812, (const vp::vx::io::Error *)&v816);
                                      uint64_t v437 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v812);
                                      if (*(char *)(v437 + 23) >= 0) {
                                        uint64_t v438 = *(unsigned __int8 *)(v437 + 23);
                                      }
                                      else {
                                        uint64_t v438 = *(void *)(v437 + 8);
                                      }
                                      v439 = vp::get_log((vp *)v437);
                                      BOOL v440 = os_log_type_enabled(v439, OS_LOG_TYPE_ERROR);
                                      if (v438)
                                      {
                                        if (v440)
                                        {
                                          v441 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v805);
                                          if ((v807 & 0x80u) == 0) {
                                            v442 = (vp *)v807;
                                          }
                                          else {
                                            v442 = v806;
                                          }
                                          v443 = vp::get_log(v441);
                                          if (os_log_type_enabled(v443, OS_LOG_TYPE_ERROR))
                                          {
                                            int v444 = (char)v807;
                                            v445 = v805;
                                            int v446 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v812);
                                            v809 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v446);
                                            uint64_t v810 = v447;
                                            std::string::basic_string<std::string_view,0>(&v802, (uint64_t)&v809);
                                            if (v444 >= 0) {
                                              v445 = &v805;
                                            }
                                            if (v442) {
                                              v449 = " ";
                                            }
                                            else {
                                              v449 = "";
                                            }
                                            if ((v804 & 0x80u) == 0) {
                                              v450 = &v802;
                                            }
                                            else {
                                              v450 = v802;
                                            }
                                            int v451 = WORD2(v812);
                                            int v452 = HIWORD(v812);
                                            uint64_t v453 = vp::get_log_source_file_path(v813, v448);
                                            uint64_t v454 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v812);
                                            if (*(char *)(v454 + 23) >= 0) {
                                              uint64_t v455 = v454;
                                            }
                                            else {
                                              uint64_t v455 = *(void *)v454;
                                            }
                                            *(_DWORD *)v891 = 136316930;
                                            *(void *)&v891[4] = v445;
                                            *(_WORD *)&v891[12] = 2080;
                                            *(void *)&v891[14] = v449;
                                            __int16 v892 = 2080;
                                            v893 = "process downlink voice DSP";
                                            __int16 v894 = 2080;
                                            v895 = v450;
                                            __int16 v896 = 1024;
                                            int v897 = v451;
                                            __int16 v898 = 1024;
                                            int v899 = v452;
                                            __int16 v900 = 2080;
                                            uint64_t v901 = v453;
                                            __int16 v902 = 2080;
                                            uint64_t v903 = v455;
                                            v456 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                            v457 = v443;
                                            uint32_t v458 = 74;
                                            goto LABEL_951;
                                          }
                                          goto LABEL_953;
                                        }
                                      }
                                      else if (v440)
                                      {
                                        v755 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v805);
                                        if ((v807 & 0x80u) == 0) {
                                          v756 = (vp *)v807;
                                        }
                                        else {
                                          v756 = v806;
                                        }
                                        v757 = vp::get_log(v755);
                                        if (os_log_type_enabled(v757, OS_LOG_TYPE_ERROR))
                                        {
                                          int v758 = (char)v807;
                                          v759 = (void **)v805;
                                          int v760 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v812);
                                          v809 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v760);
                                          uint64_t v810 = v761;
                                          std::string::basic_string<std::string_view,0>(&v802, (uint64_t)&v809);
                                          if (v758 >= 0) {
                                            v763 = &v805;
                                          }
                                          else {
                                            v763 = v759;
                                          }
                                          if (v756) {
                                            v764 = " ";
                                          }
                                          else {
                                            v764 = "";
                                          }
                                          if ((v804 & 0x80u) == 0) {
                                            v765 = &v802;
                                          }
                                          else {
                                            v765 = v802;
                                          }
                                          int v766 = WORD2(v812);
                                          int v767 = HIWORD(v812);
                                          uint64_t v768 = vp::get_log_source_file_path(v813, v762);
                                          *(_DWORD *)v891 = 136316674;
                                          *(void *)&v891[4] = v763;
                                          *(_WORD *)&v891[12] = 2080;
                                          *(void *)&v891[14] = v764;
                                          __int16 v892 = 2080;
                                          v893 = "process downlink voice DSP";
                                          __int16 v894 = 2080;
                                          v895 = v765;
                                          __int16 v896 = 1024;
                                          int v897 = v766;
                                          __int16 v898 = 1024;
                                          int v899 = v767;
                                          __int16 v900 = 2080;
                                          uint64_t v901 = v768;
                                          v456 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                          v457 = v757;
                                          uint32_t v458 = 64;
LABEL_951:
                                          _os_log_impl(&dword_1BB0CE000, v457, OS_LOG_TYPE_ERROR, v456, v891, v458);
                                          if ((char)v804 < 0) {
                                            operator delete(v802);
                                          }
                                        }
LABEL_953:
                                        if ((char)v807 < 0) {
                                          operator delete(v805);
                                        }
                                      }
                                      *(_DWORD *)a2 = 7;
                                      *(unsigned char *)(a2 + 4) = 0;
                                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v812);
                                      int v26 = 1;
LABEL_61:
                                      if (!v819) {
                                        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v816);
                                      }
                                      goto LABEL_63;
                                    }
                                    vp::vx::io::Error::Error((vp::vx::io::Error *)&v816, (const vp::vx::io::Error *)&v820);
                                    uint64_t v415 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v816);
                                    if (*(char *)(v415 + 23) >= 0) {
                                      uint64_t v416 = *(unsigned __int8 *)(v415 + 23);
                                    }
                                    else {
                                      uint64_t v416 = *(void *)(v415 + 8);
                                    }
                                    v417 = vp::get_log((vp *)v415);
                                    BOOL v418 = os_log_type_enabled(v417, OS_LOG_TYPE_ERROR);
                                    if (v416)
                                    {
                                      if (v418)
                                      {
                                        v419 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v812);
                                        if ((v814 & 0x80u) == 0) {
                                          v420 = (vp *)v814;
                                        }
                                        else {
                                          v420 = v813;
                                        }
                                        v421 = vp::get_log(v419);
                                        if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR))
                                        {
                                          int v422 = (char)v814;
                                          v423 = v812;
                                          int v424 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v816);
                                          v802 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v424);
                                          v803 = v425;
                                          std::string::basic_string<std::string_view,0>(&v805, (uint64_t)&v802);
                                          if (v422 >= 0) {
                                            v423 = &v812;
                                          }
                                          if (v420) {
                                            v427 = " ";
                                          }
                                          else {
                                            v427 = "";
                                          }
                                          if ((v807 & 0x80u) == 0) {
                                            v428 = &v805;
                                          }
                                          else {
                                            v428 = v805;
                                          }
                                          int v429 = WORD2(v816);
                                          int v430 = HIWORD(v816);
                                          uint64_t v431 = vp::get_log_source_file_path(v817, v426);
                                          uint64_t v432 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v816);
                                          if (*(char *)(v432 + 23) >= 0) {
                                            uint64_t v433 = v432;
                                          }
                                          else {
                                            uint64_t v433 = *(void *)v432;
                                          }
                                          *(_DWORD *)v891 = 136316930;
                                          *(void *)&v891[4] = v423;
                                          *(_WORD *)&v891[12] = 2080;
                                          *(void *)&v891[14] = v427;
                                          __int16 v892 = 2080;
                                          v893 = "process downlink voice mix DSP";
                                          __int16 v894 = 2080;
                                          v895 = v428;
                                          __int16 v896 = 1024;
                                          int v897 = v429;
                                          __int16 v898 = 1024;
                                          int v899 = v430;
                                          __int16 v900 = 2080;
                                          uint64_t v901 = v431;
                                          __int16 v902 = 2080;
                                          uint64_t v903 = v433;
                                          v434 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                          v435 = v421;
                                          uint32_t v436 = 74;
                                          goto LABEL_931;
                                        }
                                        goto LABEL_933;
                                      }
                                    }
                                    else if (v418)
                                    {
                                      v741 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v812);
                                      if ((v814 & 0x80u) == 0) {
                                        v742 = (vp *)v814;
                                      }
                                      else {
                                        v742 = v813;
                                      }
                                      v743 = vp::get_log(v741);
                                      if (os_log_type_enabled(v743, OS_LOG_TYPE_ERROR))
                                      {
                                        int v744 = (char)v814;
                                        v745 = (void **)v812;
                                        int v746 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v816);
                                        v802 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v746);
                                        v803 = v747;
                                        std::string::basic_string<std::string_view,0>(&v805, (uint64_t)&v802);
                                        if (v744 >= 0) {
                                          v749 = &v812;
                                        }
                                        else {
                                          v749 = v745;
                                        }
                                        if (v742) {
                                          v750 = " ";
                                        }
                                        else {
                                          v750 = "";
                                        }
                                        if ((v807 & 0x80u) == 0) {
                                          v751 = &v805;
                                        }
                                        else {
                                          v751 = v805;
                                        }
                                        int v752 = WORD2(v816);
                                        int v753 = HIWORD(v816);
                                        uint64_t v754 = vp::get_log_source_file_path(v817, v748);
                                        *(_DWORD *)v891 = 136316674;
                                        *(void *)&v891[4] = v749;
                                        *(_WORD *)&v891[12] = 2080;
                                        *(void *)&v891[14] = v750;
                                        __int16 v892 = 2080;
                                        v893 = "process downlink voice mix DSP";
                                        __int16 v894 = 2080;
                                        v895 = v751;
                                        __int16 v896 = 1024;
                                        int v897 = v752;
                                        __int16 v898 = 1024;
                                        int v899 = v753;
                                        __int16 v900 = 2080;
                                        uint64_t v901 = v754;
                                        v434 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                        v435 = v743;
                                        uint32_t v436 = 64;
LABEL_931:
                                        _os_log_impl(&dword_1BB0CE000, v435, OS_LOG_TYPE_ERROR, v434, v891, v436);
                                        if ((char)v807 < 0) {
                                          operator delete(v805);
                                        }
                                      }
LABEL_933:
                                      if ((char)v814 < 0) {
                                        operator delete(v812);
                                      }
                                    }
                                    *(_DWORD *)a2 = 7;
                                    *(unsigned char *)(a2 + 4) = 0;
                                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v816);
                                    int v26 = 1;
LABEL_63:
                                    if (!v823) {
                                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v820);
                                    }
                                    goto LABEL_65;
                                  }
                                  vp::vx::io::Error::Error((vp::vx::io::Error *)&v820, (const vp::vx::io::Error *)&v824);
                                  uint64_t v393 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v820);
                                  if (*(char *)(v393 + 23) >= 0) {
                                    uint64_t v394 = *(unsigned __int8 *)(v393 + 23);
                                  }
                                  else {
                                    uint64_t v394 = *(void *)(v393 + 8);
                                  }
                                  __int16 v395 = vp::get_log((vp *)v393);
                                  BOOL v396 = os_log_type_enabled(v395, OS_LOG_TYPE_ERROR);
                                  if (v394)
                                  {
                                    if (v396)
                                    {
                                      __int16 v397 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v816);
                                      if ((v818 & 0x80u) == 0) {
                                        uint64_t v398 = (vp *)v818;
                                      }
                                      else {
                                        uint64_t v398 = v817;
                                      }
                                      __int16 v399 = vp::get_log(v397);
                                      if (os_log_type_enabled(v399, OS_LOG_TYPE_ERROR))
                                      {
                                        int v400 = (char)v818;
                                        v401 = v816;
                                        int v402 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v820);
                                        v805 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v402);
                                        v806 = v403;
                                        std::string::basic_string<std::string_view,0>(&v812, (uint64_t)&v805);
                                        if (v400 >= 0) {
                                          v401 = &v816;
                                        }
                                        if (v398) {
                                          char v405 = " ";
                                        }
                                        else {
                                          char v405 = "";
                                        }
                                        if ((v814 & 0x80u) == 0) {
                                          uint64_t v406 = &v812;
                                        }
                                        else {
                                          uint64_t v406 = v812;
                                        }
                                        int v407 = WORD2(v820);
                                        int v408 = HIWORD(v820);
                                        uint64_t v409 = vp::get_log_source_file_path(v821, v404);
                                        uint64_t v410 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v820);
                                        if (*(char *)(v410 + 23) >= 0) {
                                          uint64_t v411 = v410;
                                        }
                                        else {
                                          uint64_t v411 = *(void *)v410;
                                        }
                                        *(_DWORD *)v891 = 136316930;
                                        *(void *)&v891[4] = v401;
                                        *(_WORD *)&v891[12] = 2080;
                                        *(void *)&v891[14] = v405;
                                        __int16 v892 = 2080;
                                        v893 = "process downlink voice proc";
                                        __int16 v894 = 2080;
                                        v895 = v406;
                                        __int16 v896 = 1024;
                                        int v897 = v407;
                                        __int16 v898 = 1024;
                                        int v899 = v408;
                                        __int16 v900 = 2080;
                                        uint64_t v901 = v409;
                                        __int16 v902 = 2080;
                                        uint64_t v903 = v411;
                                        v412 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                        v413 = v399;
                                        uint32_t v414 = 74;
                                        goto LABEL_911;
                                      }
                                      goto LABEL_913;
                                    }
                                  }
                                  else if (v396)
                                  {
                                    v727 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v816);
                                    if ((v818 & 0x80u) == 0) {
                                      v728 = (vp *)v818;
                                    }
                                    else {
                                      v728 = v817;
                                    }
                                    v729 = vp::get_log(v727);
                                    if (os_log_type_enabled(v729, OS_LOG_TYPE_ERROR))
                                    {
                                      int v730 = (char)v818;
                                      v731 = (void **)v816;
                                      int v732 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v820);
                                      v805 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v732);
                                      v806 = v733;
                                      std::string::basic_string<std::string_view,0>(&v812, (uint64_t)&v805);
                                      if (v730 >= 0) {
                                        v735 = &v816;
                                      }
                                      else {
                                        v735 = v731;
                                      }
                                      if (v728) {
                                        v736 = " ";
                                      }
                                      else {
                                        v736 = "";
                                      }
                                      if ((v814 & 0x80u) == 0) {
                                        v737 = &v812;
                                      }
                                      else {
                                        v737 = v812;
                                      }
                                      int v738 = WORD2(v820);
                                      int v739 = HIWORD(v820);
                                      uint64_t v740 = vp::get_log_source_file_path(v821, v734);
                                      *(_DWORD *)v891 = 136316674;
                                      *(void *)&v891[4] = v735;
                                      *(_WORD *)&v891[12] = 2080;
                                      *(void *)&v891[14] = v736;
                                      __int16 v892 = 2080;
                                      v893 = "process downlink voice proc";
                                      __int16 v894 = 2080;
                                      v895 = v737;
                                      __int16 v896 = 1024;
                                      int v897 = v738;
                                      __int16 v898 = 1024;
                                      int v899 = v739;
                                      __int16 v900 = 2080;
                                      uint64_t v901 = v740;
                                      v412 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                      v413 = v729;
                                      uint32_t v414 = 64;
LABEL_911:
                                      _os_log_impl(&dword_1BB0CE000, v413, OS_LOG_TYPE_ERROR, v412, v891, v414);
                                      if ((char)v814 < 0) {
                                        operator delete(v812);
                                      }
                                    }
LABEL_913:
                                    if ((char)v818 < 0) {
                                      operator delete(v816);
                                    }
                                  }
                                  *(_DWORD *)a2 = 7;
                                  *(unsigned char *)(a2 + 4) = 0;
                                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v820);
                                  int v26 = 1;
LABEL_65:
                                  if (!v827) {
                                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v824);
                                  }
                                  goto LABEL_67;
                                }
                                vp::vx::io::Error::Error((vp::vx::io::Error *)&v824, (const vp::vx::io::Error *)&v828);
                                uint64_t v371 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v824);
                                if (*(char *)(v371 + 23) >= 0) {
                                  uint64_t v372 = *(unsigned __int8 *)(v371 + 23);
                                }
                                else {
                                  uint64_t v372 = *(void *)(v371 + 8);
                                }
                                v373 = vp::get_log((vp *)v371);
                                BOOL v374 = os_log_type_enabled(v373, OS_LOG_TYPE_ERROR);
                                if (v372)
                                {
                                  if (v374)
                                  {
                                    unsigned __int8 v375 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v820);
                                    if ((v822 & 0x80u) == 0) {
                                      char v376 = (vp *)v822;
                                    }
                                    else {
                                      char v376 = v821;
                                    }
                                    v377 = vp::get_log(v375);
                                    if (os_log_type_enabled(v377, OS_LOG_TYPE_ERROR))
                                    {
                                      int v378 = (char)v822;
                                      unsigned __int8 v379 = v820;
                                      int v380 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v824);
                                      v812 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v380);
                                      v813 = v381;
                                      std::string::basic_string<std::string_view,0>(&v816, (uint64_t)&v812);
                                      if (v378 >= 0) {
                                        unsigned __int8 v379 = &v820;
                                      }
                                      if (v376) {
                                        unsigned __int16 v383 = " ";
                                      }
                                      else {
                                        unsigned __int16 v383 = "";
                                      }
                                      if ((v818 & 0x80u) == 0) {
                                        v384 = &v816;
                                      }
                                      else {
                                        v384 = v816;
                                      }
                                      int v385 = WORD2(v824);
                                      int v386 = HIWORD(v824);
                                      uint64_t v387 = vp::get_log_source_file_path(v825, v382);
                                      uint64_t v388 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v824);
                                      if (*(char *)(v388 + 23) >= 0) {
                                        uint64_t v389 = v388;
                                      }
                                      else {
                                        uint64_t v389 = *(void *)v388;
                                      }
                                      *(_DWORD *)v891 = 136316930;
                                      *(void *)&v891[4] = v379;
                                      *(_WORD *)&v891[12] = 2080;
                                      *(void *)&v891[14] = v383;
                                      __int16 v892 = 2080;
                                      v893 = "get buffered output frame count for downlink voice proc";
                                      __int16 v894 = 2080;
                                      v895 = v384;
                                      __int16 v896 = 1024;
                                      int v897 = v385;
                                      __int16 v898 = 1024;
                                      int v899 = v386;
                                      __int16 v900 = 2080;
                                      uint64_t v901 = v387;
                                      __int16 v902 = 2080;
                                      uint64_t v903 = v389;
                                      v390 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                      __int16 v391 = v377;
                                      uint32_t v392 = 74;
                                      goto LABEL_891;
                                    }
                                    goto LABEL_893;
                                  }
                                }
                                else if (v374)
                                {
                                  v713 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v820);
                                  if ((v822 & 0x80u) == 0) {
                                    v714 = (vp *)v822;
                                  }
                                  else {
                                    v714 = v821;
                                  }
                                  v715 = vp::get_log(v713);
                                  if (os_log_type_enabled(v715, OS_LOG_TYPE_ERROR))
                                  {
                                    int v716 = (char)v822;
                                    v717 = (void **)v820;
                                    int v718 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v824);
                                    v812 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v718);
                                    v813 = v719;
                                    std::string::basic_string<std::string_view,0>(&v816, (uint64_t)&v812);
                                    if (v716 >= 0) {
                                      v721 = &v820;
                                    }
                                    else {
                                      v721 = v717;
                                    }
                                    if (v714) {
                                      v722 = " ";
                                    }
                                    else {
                                      v722 = "";
                                    }
                                    if ((v818 & 0x80u) == 0) {
                                      v723 = &v816;
                                    }
                                    else {
                                      v723 = v816;
                                    }
                                    int v724 = WORD2(v824);
                                    int v725 = HIWORD(v824);
                                    uint64_t v726 = vp::get_log_source_file_path(v825, v720);
                                    *(_DWORD *)v891 = 136316674;
                                    *(void *)&v891[4] = v721;
                                    *(_WORD *)&v891[12] = 2080;
                                    *(void *)&v891[14] = v722;
                                    __int16 v892 = 2080;
                                    v893 = "get buffered output frame count for downlink voice proc";
                                    __int16 v894 = 2080;
                                    v895 = v723;
                                    __int16 v896 = 1024;
                                    int v897 = v724;
                                    __int16 v898 = 1024;
                                    int v899 = v725;
                                    __int16 v900 = 2080;
                                    uint64_t v901 = v726;
                                    v390 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                    __int16 v391 = v715;
                                    uint32_t v392 = 64;
LABEL_891:
                                    _os_log_impl(&dword_1BB0CE000, v391, OS_LOG_TYPE_ERROR, v390, v891, v392);
                                    if ((char)v818 < 0) {
                                      operator delete(v816);
                                    }
                                  }
LABEL_893:
                                  if ((char)v822 < 0) {
                                    operator delete(v820);
                                  }
                                }
                                *(_DWORD *)a2 = 7;
                                *(unsigned char *)(a2 + 4) = 0;
                                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v824);
                                int v26 = 1;
LABEL_67:
                                if (!v831) {
                                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v828);
                                }
                                goto LABEL_69;
                              }
                              vp::vx::io::Error::Error((vp::vx::io::Error *)&v828, (const vp::vx::io::Error *)&v832);
                              uint64_t v349 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v828);
                              if (*(char *)(v349 + 23) >= 0) {
                                uint64_t v350 = *(unsigned __int8 *)(v349 + 23);
                              }
                              else {
                                uint64_t v350 = *(void *)(v349 + 8);
                              }
                              v351 = vp::get_log((vp *)v349);
                              BOOL v352 = os_log_type_enabled(v351, OS_LOG_TYPE_ERROR);
                              if (v350)
                              {
                                if (v352)
                                {
                                  char v353 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v824);
                                  if ((v826 & 0x80u) == 0) {
                                    v354 = (vp *)v826;
                                  }
                                  else {
                                    v354 = v825;
                                  }
                                  uint64_t v355 = vp::get_log(v353);
                                  if (os_log_type_enabled(v355, OS_LOG_TYPE_ERROR))
                                  {
                                    int v356 = (char)v826;
                                    v357 = v824;
                                    int v358 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v828);
                                    v816 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v358);
                                    v817 = v359;
                                    std::string::basic_string<std::string_view,0>(&v820, (uint64_t)&v816);
                                    if (v356 >= 0) {
                                      v357 = &v824;
                                    }
                                    if (v354) {
                                      v361 = " ";
                                    }
                                    else {
                                      v361 = "";
                                    }
                                    if ((v822 & 0x80u) == 0) {
                                      v362 = &v820;
                                    }
                                    else {
                                      v362 = v820;
                                    }
                                    int v363 = WORD2(v828);
                                    int v364 = HIWORD(v828);
                                    uint64_t v365 = vp::get_log_source_file_path(v829, v360);
                                    uint64_t v366 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v828);
                                    if (*(char *)(v366 + 23) >= 0) {
                                      uint64_t v367 = v366;
                                    }
                                    else {
                                      uint64_t v367 = *(void *)v366;
                                    }
                                    *(_DWORD *)v891 = 136316930;
                                    *(void *)&v891[4] = v357;
                                    *(_WORD *)&v891[12] = 2080;
                                    *(void *)&v891[14] = v361;
                                    __int16 v892 = 2080;
                                    v893 = "get frame count deficit for downlink voice mix DSP";
                                    __int16 v894 = 2080;
                                    v895 = v362;
                                    __int16 v896 = 1024;
                                    int v897 = v363;
                                    __int16 v898 = 1024;
                                    int v899 = v364;
                                    __int16 v900 = 2080;
                                    uint64_t v901 = v365;
                                    __int16 v902 = 2080;
                                    uint64_t v903 = v367;
                                    char v368 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                    v369 = v355;
                                    uint32_t v370 = 74;
                                    goto LABEL_871;
                                  }
                                  goto LABEL_873;
                                }
                              }
                              else if (v352)
                              {
                                v699 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v824);
                                if ((v826 & 0x80u) == 0) {
                                  v700 = (vp *)v826;
                                }
                                else {
                                  v700 = v825;
                                }
                                v701 = vp::get_log(v699);
                                if (os_log_type_enabled(v701, OS_LOG_TYPE_ERROR))
                                {
                                  int v702 = (char)v826;
                                  v703 = (void **)v824;
                                  int v704 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v828);
                                  v816 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v704);
                                  v817 = v705;
                                  std::string::basic_string<std::string_view,0>(&v820, (uint64_t)&v816);
                                  if (v702 >= 0) {
                                    v707 = &v824;
                                  }
                                  else {
                                    v707 = v703;
                                  }
                                  if (v700) {
                                    v708 = " ";
                                  }
                                  else {
                                    v708 = "";
                                  }
                                  if ((v822 & 0x80u) == 0) {
                                    v709 = &v820;
                                  }
                                  else {
                                    v709 = v820;
                                  }
                                  int v710 = WORD2(v828);
                                  int v711 = HIWORD(v828);
                                  uint64_t v712 = vp::get_log_source_file_path(v829, v706);
                                  *(_DWORD *)v891 = 136316674;
                                  *(void *)&v891[4] = v707;
                                  *(_WORD *)&v891[12] = 2080;
                                  *(void *)&v891[14] = v708;
                                  __int16 v892 = 2080;
                                  v893 = "get frame count deficit for downlink voice mix DSP";
                                  __int16 v894 = 2080;
                                  v895 = v709;
                                  __int16 v896 = 1024;
                                  int v897 = v710;
                                  __int16 v898 = 1024;
                                  int v899 = v711;
                                  __int16 v900 = 2080;
                                  uint64_t v901 = v712;
                                  char v368 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                  v369 = v701;
                                  uint32_t v370 = 64;
LABEL_871:
                                  _os_log_impl(&dword_1BB0CE000, v369, OS_LOG_TYPE_ERROR, v368, v891, v370);
                                  if ((char)v822 < 0) {
                                    operator delete(v820);
                                  }
                                }
LABEL_873:
                                if ((char)v826 < 0) {
                                  operator delete(v824);
                                }
                              }
                              *(_DWORD *)a2 = 7;
                              *(unsigned char *)(a2 + 4) = 0;
                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v828);
                              int v26 = 1;
LABEL_69:
                              if (!v835) {
                                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v832);
                              }
                              goto LABEL_71;
                            }
                            vp::vx::io::Error::Error((vp::vx::io::Error *)&v832, (const vp::vx::io::Error *)&v836);
                            uint64_t v327 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v832);
                            if (*(char *)(v327 + 23) >= 0) {
                              uint64_t v328 = *(unsigned __int8 *)(v327 + 23);
                            }
                            else {
                              uint64_t v328 = *(void *)(v327 + 8);
                            }
                            uint64_t v329 = vp::get_log((vp *)v327);
                            BOOL v330 = os_log_type_enabled(v329, OS_LOG_TYPE_ERROR);
                            if (v328)
                            {
                              if (v330)
                              {
                                int v331 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v828);
                                if ((v830 & 0x80u) == 0) {
                                  v332 = (vp *)v830;
                                }
                                else {
                                  v332 = v829;
                                }
                                int v333 = vp::get_log(v331);
                                if (os_log_type_enabled(v333, OS_LOG_TYPE_ERROR))
                                {
                                  int v334 = (char)v830;
                                  v335 = v828;
                                  int v336 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v832);
                                  v820 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v336);
                                  v821 = v337;
                                  std::string::basic_string<std::string_view,0>(&v824, (uint64_t)&v820);
                                  if (v334 >= 0) {
                                    v335 = &v828;
                                  }
                                  if (v332) {
                                    int v339 = " ";
                                  }
                                  else {
                                    int v339 = "";
                                  }
                                  if ((v826 & 0x80u) == 0) {
                                    int v340 = &v824;
                                  }
                                  else {
                                    int v340 = v824;
                                  }
                                  int v341 = WORD2(v832);
                                  int v342 = HIWORD(v832);
                                  uint64_t v343 = vp::get_log_source_file_path(v833, v338);
                                  uint64_t v344 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v832);
                                  if (*(char *)(v344 + 23) >= 0) {
                                    uint64_t v345 = v344;
                                  }
                                  else {
                                    uint64_t v345 = *(void *)v344;
                                  }
                                  *(_DWORD *)v891 = 136316930;
                                  *(void *)&v891[4] = v335;
                                  *(_WORD *)&v891[12] = 2080;
                                  *(void *)&v891[14] = v339;
                                  __int16 v892 = 2080;
                                  v893 = "get buffered input frame count for downlink voice mix DSP";
                                  __int16 v894 = 2080;
                                  v895 = v340;
                                  __int16 v896 = 1024;
                                  int v897 = v341;
                                  __int16 v898 = 1024;
                                  int v899 = v342;
                                  __int16 v900 = 2080;
                                  uint64_t v901 = v343;
                                  __int16 v902 = 2080;
                                  uint64_t v903 = v345;
                                  char v346 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                  v347 = v333;
                                  uint32_t v348 = 74;
                                  goto LABEL_851;
                                }
                                goto LABEL_853;
                              }
                            }
                            else if (v330)
                            {
                              v685 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v828);
                              if ((v830 & 0x80u) == 0) {
                                v686 = (vp *)v830;
                              }
                              else {
                                v686 = v829;
                              }
                              v687 = vp::get_log(v685);
                              if (os_log_type_enabled(v687, OS_LOG_TYPE_ERROR))
                              {
                                int v688 = (char)v830;
                                v689 = (void **)v828;
                                int v690 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v832);
                                v820 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v690);
                                v821 = v691;
                                std::string::basic_string<std::string_view,0>(&v824, (uint64_t)&v820);
                                if (v688 >= 0) {
                                  v693 = &v828;
                                }
                                else {
                                  v693 = v689;
                                }
                                if (v686) {
                                  v694 = " ";
                                }
                                else {
                                  v694 = "";
                                }
                                if ((v826 & 0x80u) == 0) {
                                  v695 = &v824;
                                }
                                else {
                                  v695 = v824;
                                }
                                int v696 = WORD2(v832);
                                int v697 = HIWORD(v832);
                                uint64_t v698 = vp::get_log_source_file_path(v833, v692);
                                *(_DWORD *)v891 = 136316674;
                                *(void *)&v891[4] = v693;
                                *(_WORD *)&v891[12] = 2080;
                                *(void *)&v891[14] = v694;
                                __int16 v892 = 2080;
                                v893 = "get buffered input frame count for downlink voice mix DSP";
                                __int16 v894 = 2080;
                                v895 = v695;
                                __int16 v896 = 1024;
                                int v897 = v696;
                                __int16 v898 = 1024;
                                int v899 = v697;
                                __int16 v900 = 2080;
                                uint64_t v901 = v698;
                                char v346 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                v347 = v687;
                                uint32_t v348 = 64;
LABEL_851:
                                _os_log_impl(&dword_1BB0CE000, v347, OS_LOG_TYPE_ERROR, v346, v891, v348);
                                if ((char)v826 < 0) {
                                  operator delete(v824);
                                }
                              }
LABEL_853:
                              if ((char)v830 < 0) {
                                operator delete(v828);
                              }
                            }
                            *(_DWORD *)a2 = 7;
                            *(unsigned char *)(a2 + 4) = 0;
                            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v832);
                            int v26 = 1;
LABEL_71:
                            if (!v839) {
                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v836);
                            }
                            goto LABEL_73;
                          }
                          vp::vx::io::Error::Error((vp::vx::io::Error *)&v836, (const vp::vx::io::Error *)&v840);
                          uint64_t v305 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v836);
                          if (*(char *)(v305 + 23) >= 0) {
                            uint64_t v306 = *(unsigned __int8 *)(v305 + 23);
                          }
                          else {
                            uint64_t v306 = *(void *)(v305 + 8);
                          }
                          v307 = vp::get_log((vp *)v305);
                          BOOL v308 = os_log_type_enabled(v307, OS_LOG_TYPE_ERROR);
                          if (v306)
                          {
                            if (v308)
                            {
                              v309 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v832);
                              if ((v834 & 0x80u) == 0) {
                                v310 = (vp *)v834;
                              }
                              else {
                                v310 = v833;
                              }
                              int v311 = vp::get_log(v309);
                              if (os_log_type_enabled(v311, OS_LOG_TYPE_ERROR))
                              {
                                int v312 = (char)v834;
                                uint64_t v313 = v832;
                                int v314 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v836);
                                v824 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v314);
                                v825 = v315;
                                std::string::basic_string<std::string_view,0>(&v828, (uint64_t)&v824);
                                if (v312 >= 0) {
                                  uint64_t v313 = &v832;
                                }
                                if (v310) {
                                  int v317 = " ";
                                }
                                else {
                                  int v317 = "";
                                }
                                if ((v830 & 0x80u) == 0) {
                                  v318 = &v828;
                                }
                                else {
                                  v318 = v828;
                                }
                                int v319 = WORD2(v836);
                                int v320 = HIWORD(v836);
                                uint64_t v321 = vp::get_log_source_file_path(v837, v316);
                                uint64_t v322 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v836);
                                if (*(char *)(v322 + 23) >= 0) {
                                  uint64_t v323 = v322;
                                }
                                else {
                                  uint64_t v323 = *(void *)v322;
                                }
                                *(_DWORD *)v891 = 136316930;
                                *(void *)&v891[4] = v313;
                                *(_WORD *)&v891[12] = 2080;
                                *(void *)&v891[14] = v317;
                                __int16 v892 = 2080;
                                v893 = "get required input frame count for downlink voice mix DSP";
                                __int16 v894 = 2080;
                                v895 = v318;
                                __int16 v896 = 1024;
                                int v897 = v319;
                                __int16 v898 = 1024;
                                int v899 = v320;
                                __int16 v900 = 2080;
                                uint64_t v901 = v321;
                                __int16 v902 = 2080;
                                uint64_t v903 = v323;
                                v324 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                int v325 = v311;
                                uint32_t v326 = 74;
                                goto LABEL_831;
                              }
                              goto LABEL_833;
                            }
                          }
                          else if (v308)
                          {
                            v671 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v832);
                            if ((v834 & 0x80u) == 0) {
                              v672 = (vp *)v834;
                            }
                            else {
                              v672 = v833;
                            }
                            v673 = vp::get_log(v671);
                            if (os_log_type_enabled(v673, OS_LOG_TYPE_ERROR))
                            {
                              int v674 = (char)v834;
                              v675 = (void **)v832;
                              int v676 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v836);
                              v824 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v676);
                              v825 = v677;
                              std::string::basic_string<std::string_view,0>(&v828, (uint64_t)&v824);
                              if (v674 >= 0) {
                                v679 = &v832;
                              }
                              else {
                                v679 = v675;
                              }
                              if (v672) {
                                v680 = " ";
                              }
                              else {
                                v680 = "";
                              }
                              if ((v830 & 0x80u) == 0) {
                                v681 = &v828;
                              }
                              else {
                                v681 = v828;
                              }
                              int v682 = WORD2(v836);
                              int v683 = HIWORD(v836);
                              uint64_t v684 = vp::get_log_source_file_path(v837, v678);
                              *(_DWORD *)v891 = 136316674;
                              *(void *)&v891[4] = v679;
                              *(_WORD *)&v891[12] = 2080;
                              *(void *)&v891[14] = v680;
                              __int16 v892 = 2080;
                              v893 = "get required input frame count for downlink voice mix DSP";
                              __int16 v894 = 2080;
                              v895 = v681;
                              __int16 v896 = 1024;
                              int v897 = v682;
                              __int16 v898 = 1024;
                              int v899 = v683;
                              __int16 v900 = 2080;
                              uint64_t v901 = v684;
                              v324 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                              int v325 = v673;
                              uint32_t v326 = 64;
LABEL_831:
                              _os_log_impl(&dword_1BB0CE000, v325, OS_LOG_TYPE_ERROR, v324, v891, v326);
                              if ((char)v830 < 0) {
                                operator delete(v828);
                              }
                            }
LABEL_833:
                            if ((char)v834 < 0) {
                              operator delete(v832);
                            }
                          }
                          *(_DWORD *)a2 = 7;
                          *(unsigned char *)(a2 + 4) = 0;
                          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v836);
                          int v26 = 1;
LABEL_73:
                          if (!v843) {
                            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v840);
                          }
                          goto LABEL_75;
                        }
                        vp::vx::io::Error::Error((vp::vx::io::Error *)&v840, (const vp::vx::io::Error *)&v844);
                        uint64_t v283 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v840);
                        if (*(char *)(v283 + 23) >= 0) {
                          uint64_t v284 = *(unsigned __int8 *)(v283 + 23);
                        }
                        else {
                          uint64_t v284 = *(void *)(v283 + 8);
                        }
                        uint64_t v285 = vp::get_log((vp *)v283);
                        BOOL v286 = os_log_type_enabled(v285, OS_LOG_TYPE_ERROR);
                        if (v284)
                        {
                          if (v286)
                          {
                            v287 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v836);
                            if ((v838 & 0x80u) == 0) {
                              v288 = (vp *)v838;
                            }
                            else {
                              v288 = v837;
                            }
                            int v289 = vp::get_log(v287);
                            if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                            {
                              int v290 = (char)v838;
                              int v291 = v836;
                              int v292 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v840);
                              v828 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v292);
                              v829 = v293;
                              std::string::basic_string<std::string_view,0>(&v832, (uint64_t)&v828);
                              if (v290 >= 0) {
                                int v291 = &v836;
                              }
                              if (v288) {
                                v295 = " ";
                              }
                              else {
                                v295 = "";
                              }
                              if ((v834 & 0x80u) == 0) {
                                v296 = &v832;
                              }
                              else {
                                v296 = v832;
                              }
                              int v297 = WORD2(v840);
                              int v298 = HIWORD(v840);
                              uint64_t v299 = vp::get_log_source_file_path(v841, v294);
                              uint64_t v300 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v840);
                              if (*(char *)(v300 + 23) >= 0) {
                                uint64_t v301 = v300;
                              }
                              else {
                                uint64_t v301 = *(void *)v300;
                              }
                              *(_DWORD *)v891 = 136316930;
                              *(void *)&v891[4] = v291;
                              *(_WORD *)&v891[12] = 2080;
                              *(void *)&v891[14] = v295;
                              __int16 v892 = 2080;
                              v893 = "get buffered output frame count for downlink voice mix DSP";
                              __int16 v894 = 2080;
                              v895 = v296;
                              __int16 v896 = 1024;
                              int v897 = v297;
                              __int16 v898 = 1024;
                              int v899 = v298;
                              __int16 v900 = 2080;
                              uint64_t v901 = v299;
                              __int16 v902 = 2080;
                              uint64_t v903 = v301;
                              v302 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                              int v303 = v289;
                              uint32_t v304 = 74;
                              goto LABEL_811;
                            }
                            goto LABEL_813;
                          }
                        }
                        else if (v286)
                        {
                          v657 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v836);
                          if ((v838 & 0x80u) == 0) {
                            v658 = (vp *)v838;
                          }
                          else {
                            v658 = v837;
                          }
                          v659 = vp::get_log(v657);
                          if (os_log_type_enabled(v659, OS_LOG_TYPE_ERROR))
                          {
                            int v660 = (char)v838;
                            v661 = (void **)v836;
                            int v662 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v840);
                            v828 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v662);
                            v829 = v663;
                            std::string::basic_string<std::string_view,0>(&v832, (uint64_t)&v828);
                            if (v660 >= 0) {
                              v665 = &v836;
                            }
                            else {
                              v665 = v661;
                            }
                            if (v658) {
                              v666 = " ";
                            }
                            else {
                              v666 = "";
                            }
                            if ((v834 & 0x80u) == 0) {
                              v667 = &v832;
                            }
                            else {
                              v667 = v832;
                            }
                            int v668 = WORD2(v840);
                            int v669 = HIWORD(v840);
                            uint64_t v670 = vp::get_log_source_file_path(v841, v664);
                            *(_DWORD *)v891 = 136316674;
                            *(void *)&v891[4] = v665;
                            *(_WORD *)&v891[12] = 2080;
                            *(void *)&v891[14] = v666;
                            __int16 v892 = 2080;
                            v893 = "get buffered output frame count for downlink voice mix DSP";
                            __int16 v894 = 2080;
                            v895 = v667;
                            __int16 v896 = 1024;
                            int v897 = v668;
                            __int16 v898 = 1024;
                            int v899 = v669;
                            __int16 v900 = 2080;
                            uint64_t v901 = v670;
                            v302 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                            int v303 = v659;
                            uint32_t v304 = 64;
LABEL_811:
                            _os_log_impl(&dword_1BB0CE000, v303, OS_LOG_TYPE_ERROR, v302, v891, v304);
                            if ((char)v834 < 0) {
                              operator delete(v832);
                            }
                          }
LABEL_813:
                          if ((char)v838 < 0) {
                            operator delete(v836);
                          }
                        }
                        *(_DWORD *)a2 = 7;
                        *(unsigned char *)(a2 + 4) = 0;
                        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v840);
                        int v26 = 1;
LABEL_75:
                        if (!v847) {
                          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v844);
                        }
                        goto LABEL_77;
                      }
                      vp::vx::io::Error::Error((vp::vx::io::Error *)&v844, (const vp::vx::io::Error *)&v848);
                      uint64_t v261 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v844);
                      if (*(char *)(v261 + 23) >= 0) {
                        uint64_t v262 = *(unsigned __int8 *)(v261 + 23);
                      }
                      else {
                        uint64_t v262 = *(void *)(v261 + 8);
                      }
                      int v263 = vp::get_log((vp *)v261);
                      BOOL v264 = os_log_type_enabled(v263, OS_LOG_TYPE_ERROR);
                      if (v262)
                      {
                        if (v264)
                        {
                          v265 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v840);
                          if ((v842 & 0x80u) == 0) {
                            v266 = (vp *)v842;
                          }
                          else {
                            v266 = v841;
                          }
                          v267 = vp::get_log(v265);
                          if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
                          {
                            int v268 = (char)v842;
                            int v269 = v840;
                            int v270 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v844);
                            v832 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v270);
                            v833 = v271;
                            std::string::basic_string<std::string_view,0>(&v836, (uint64_t)&v832);
                            if (v268 >= 0) {
                              int v269 = &v840;
                            }
                            if (v266) {
                              std::string v273 = " ";
                            }
                            else {
                              std::string v273 = "";
                            }
                            if ((v838 & 0x80u) == 0) {
                              uint64_t v274 = &v836;
                            }
                            else {
                              uint64_t v274 = v836;
                            }
                            int v275 = WORD2(v844);
                            int v276 = HIWORD(v844);
                            uint64_t v277 = vp::get_log_source_file_path(v845, v272);
                            uint64_t v278 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v844);
                            if (*(char *)(v278 + 23) >= 0) {
                              uint64_t v279 = v278;
                            }
                            else {
                              uint64_t v279 = *(void *)v278;
                            }
                            *(_DWORD *)v891 = 136316930;
                            *(void *)&v891[4] = v269;
                            *(_WORD *)&v891[12] = 2080;
                            *(void *)&v891[14] = v273;
                            __int16 v892 = 2080;
                            v893 = "get frame count deficit for downlink voice DSP";
                            __int16 v894 = 2080;
                            v895 = v274;
                            __int16 v896 = 1024;
                            int v897 = v275;
                            __int16 v898 = 1024;
                            int v899 = v276;
                            __int16 v900 = 2080;
                            uint64_t v901 = v277;
                            __int16 v902 = 2080;
                            uint64_t v903 = v279;
                            v280 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                            v281 = v267;
                            uint32_t v282 = 74;
                            goto LABEL_791;
                          }
                          goto LABEL_793;
                        }
                      }
                      else if (v264)
                      {
                        v643 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v840);
                        if ((v842 & 0x80u) == 0) {
                          v644 = (vp *)v842;
                        }
                        else {
                          v644 = v841;
                        }
                        v645 = vp::get_log(v643);
                        if (os_log_type_enabled(v645, OS_LOG_TYPE_ERROR))
                        {
                          int v646 = (char)v842;
                          v647 = (void **)v840;
                          int v648 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v844);
                          v832 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v648);
                          v833 = v649;
                          std::string::basic_string<std::string_view,0>(&v836, (uint64_t)&v832);
                          if (v646 >= 0) {
                            v651 = &v840;
                          }
                          else {
                            v651 = v647;
                          }
                          if (v644) {
                            v652 = " ";
                          }
                          else {
                            v652 = "";
                          }
                          if ((v838 & 0x80u) == 0) {
                            v653 = &v836;
                          }
                          else {
                            v653 = v836;
                          }
                          int v654 = WORD2(v844);
                          int v655 = HIWORD(v844);
                          uint64_t v656 = vp::get_log_source_file_path(v845, v650);
                          *(_DWORD *)v891 = 136316674;
                          *(void *)&v891[4] = v651;
                          *(_WORD *)&v891[12] = 2080;
                          *(void *)&v891[14] = v652;
                          __int16 v892 = 2080;
                          v893 = "get frame count deficit for downlink voice DSP";
                          __int16 v894 = 2080;
                          v895 = v653;
                          __int16 v896 = 1024;
                          int v897 = v654;
                          __int16 v898 = 1024;
                          int v899 = v655;
                          __int16 v900 = 2080;
                          uint64_t v901 = v656;
                          v280 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                          v281 = v645;
                          uint32_t v282 = 64;
LABEL_791:
                          _os_log_impl(&dword_1BB0CE000, v281, OS_LOG_TYPE_ERROR, v280, v891, v282);
                          if ((char)v838 < 0) {
                            operator delete(v836);
                          }
                        }
LABEL_793:
                        if ((char)v842 < 0) {
                          operator delete(v840);
                        }
                      }
                      *(_DWORD *)a2 = 7;
                      *(unsigned char *)(a2 + 4) = 0;
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v844);
                      int v26 = 1;
LABEL_77:
                      if (!v851) {
                        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v848);
                      }
                      goto LABEL_79;
                    }
                    vp::vx::io::Error::Error((vp::vx::io::Error *)&v848, (const vp::vx::io::Error *)&v852);
                    uint64_t v239 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v848);
                    if (*(char *)(v239 + 23) >= 0) {
                      uint64_t v240 = *(unsigned __int8 *)(v239 + 23);
                    }
                    else {
                      uint64_t v240 = *(void *)(v239 + 8);
                    }
                    int v241 = vp::get_log((vp *)v239);
                    BOOL v242 = os_log_type_enabled(v241, OS_LOG_TYPE_ERROR);
                    if (v240)
                    {
                      if (v242)
                      {
                        uint64_t v243 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v844);
                        if ((v846 & 0x80u) == 0) {
                          uint64_t v244 = (vp *)v846;
                        }
                        else {
                          uint64_t v244 = v845;
                        }
                        uint64_t v245 = vp::get_log(v243);
                        if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
                        {
                          int v246 = (char)v846;
                          int v247 = v844;
                          int v248 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v848);
                          v836 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v248);
                          v837 = v249;
                          std::string::basic_string<std::string_view,0>(&v840, (uint64_t)&v836);
                          if (v246 >= 0) {
                            int v247 = &v844;
                          }
                          if (v244) {
                            CFStringRef v251 = " ";
                          }
                          else {
                            CFStringRef v251 = "";
                          }
                          if ((v842 & 0x80u) == 0) {
                            CFStringRef v252 = &v840;
                          }
                          else {
                            CFStringRef v252 = v840;
                          }
                          int v253 = WORD2(v848);
                          int v254 = HIWORD(v848);
                          uint64_t v255 = vp::get_log_source_file_path(v849, v250);
                          uint64_t v256 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v848);
                          if (*(char *)(v256 + 23) >= 0) {
                            uint64_t v257 = v256;
                          }
                          else {
                            uint64_t v257 = *(void *)v256;
                          }
                          *(_DWORD *)v891 = 136316930;
                          *(void *)&v891[4] = v247;
                          *(_WORD *)&v891[12] = 2080;
                          *(void *)&v891[14] = v251;
                          __int16 v892 = 2080;
                          v893 = "get buffered input frame count for downlink voice DSP";
                          __int16 v894 = 2080;
                          v895 = v252;
                          __int16 v896 = 1024;
                          int v897 = v253;
                          __int16 v898 = 1024;
                          int v899 = v254;
                          __int16 v900 = 2080;
                          uint64_t v901 = v255;
                          __int16 v902 = 2080;
                          uint64_t v903 = v257;
                          v258 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                          v259 = v245;
                          uint32_t v260 = 74;
                          goto LABEL_771;
                        }
                        goto LABEL_773;
                      }
                    }
                    else if (v242)
                    {
                      v629 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v844);
                      if ((v846 & 0x80u) == 0) {
                        v630 = (vp *)v846;
                      }
                      else {
                        v630 = v845;
                      }
                      v631 = vp::get_log(v629);
                      if (os_log_type_enabled(v631, OS_LOG_TYPE_ERROR))
                      {
                        int v632 = (char)v846;
                        v633 = (void **)v844;
                        int v634 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v848);
                        v836 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v634);
                        v837 = v635;
                        std::string::basic_string<std::string_view,0>(&v840, (uint64_t)&v836);
                        if (v632 >= 0) {
                          v637 = &v844;
                        }
                        else {
                          v637 = v633;
                        }
                        if (v630) {
                          v638 = " ";
                        }
                        else {
                          v638 = "";
                        }
                        if ((v842 & 0x80u) == 0) {
                          v639 = &v840;
                        }
                        else {
                          v639 = v840;
                        }
                        int v640 = WORD2(v848);
                        int v641 = HIWORD(v848);
                        uint64_t v642 = vp::get_log_source_file_path(v849, v636);
                        *(_DWORD *)v891 = 136316674;
                        *(void *)&v891[4] = v637;
                        *(_WORD *)&v891[12] = 2080;
                        *(void *)&v891[14] = v638;
                        __int16 v892 = 2080;
                        v893 = "get buffered input frame count for downlink voice DSP";
                        __int16 v894 = 2080;
                        v895 = v639;
                        __int16 v896 = 1024;
                        int v897 = v640;
                        __int16 v898 = 1024;
                        int v899 = v641;
                        __int16 v900 = 2080;
                        uint64_t v901 = v642;
                        v258 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                        v259 = v631;
                        uint32_t v260 = 64;
LABEL_771:
                        _os_log_impl(&dword_1BB0CE000, v259, OS_LOG_TYPE_ERROR, v258, v891, v260);
                        if ((char)v842 < 0) {
                          operator delete(v840);
                        }
                      }
LABEL_773:
                      if ((char)v846 < 0) {
                        operator delete(v844);
                      }
                    }
                    *(_DWORD *)a2 = 7;
                    *(unsigned char *)(a2 + 4) = 0;
                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v848);
                    int v26 = 1;
LABEL_79:
                    if (!v855) {
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v852);
                    }
                    goto LABEL_81;
                  }
                  vp::vx::io::Error::Error((vp::vx::io::Error *)&v852, (const vp::vx::io::Error *)&v856);
                  uint64_t v217 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v852);
                  if (*(char *)(v217 + 23) >= 0) {
                    uint64_t v218 = *(unsigned __int8 *)(v217 + 23);
                  }
                  else {
                    uint64_t v218 = *(void *)(v217 + 8);
                  }
                  int v219 = vp::get_log((vp *)v217);
                  BOOL v220 = os_log_type_enabled(v219, OS_LOG_TYPE_ERROR);
                  if (v218)
                  {
                    if (v220)
                    {
                      int v221 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v848);
                      if ((v850 & 0x80u) == 0) {
                        long long v222 = (vp *)v850;
                      }
                      else {
                        long long v222 = v849;
                      }
                      uint64_t v223 = vp::get_log(v221);
                      if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
                      {
                        int v224 = (char)v850;
                        long long v225 = v848;
                        int v226 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v852);
                        v840 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v226);
                        v841 = v227;
                        std::string::basic_string<std::string_view,0>(&v844, (uint64_t)&v840);
                        if (v224 >= 0) {
                          long long v225 = &v848;
                        }
                        if (v222) {
                          uint64_t v229 = " ";
                        }
                        else {
                          uint64_t v229 = "";
                        }
                        if ((v846 & 0x80u) == 0) {
                          uint64_t v230 = &v844;
                        }
                        else {
                          uint64_t v230 = v844;
                        }
                        int v231 = WORD2(v852);
                        int v232 = HIWORD(v852);
                        uint64_t v233 = vp::get_log_source_file_path(v853, v228);
                        uint64_t v234 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v852);
                        if (*(char *)(v234 + 23) >= 0) {
                          uint64_t v235 = v234;
                        }
                        else {
                          uint64_t v235 = *(void *)v234;
                        }
                        *(_DWORD *)v891 = 136316930;
                        *(void *)&v891[4] = v225;
                        *(_WORD *)&v891[12] = 2080;
                        *(void *)&v891[14] = v229;
                        __int16 v892 = 2080;
                        v893 = "get required input frame count for downlink voice DSP";
                        __int16 v894 = 2080;
                        v895 = v230;
                        __int16 v896 = 1024;
                        int v897 = v231;
                        __int16 v898 = 1024;
                        int v899 = v232;
                        __int16 v900 = 2080;
                        uint64_t v901 = v233;
                        __int16 v902 = 2080;
                        uint64_t v903 = v235;
                        uint64_t v236 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                        long long v237 = v223;
                        uint32_t v238 = 74;
                        goto LABEL_751;
                      }
                      goto LABEL_753;
                    }
                  }
                  else if (v220)
                  {
                    v615 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v848);
                    if ((v850 & 0x80u) == 0) {
                      v616 = (vp *)v850;
                    }
                    else {
                      v616 = v849;
                    }
                    v617 = vp::get_log(v615);
                    if (os_log_type_enabled(v617, OS_LOG_TYPE_ERROR))
                    {
                      int v618 = (char)v850;
                      v619 = (void **)v848;
                      int v620 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v852);
                      v840 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v620);
                      v841 = v621;
                      std::string::basic_string<std::string_view,0>(&v844, (uint64_t)&v840);
                      if (v618 >= 0) {
                        v623 = &v848;
                      }
                      else {
                        v623 = v619;
                      }
                      if (v616) {
                        v624 = " ";
                      }
                      else {
                        v624 = "";
                      }
                      if ((v846 & 0x80u) == 0) {
                        v625 = &v844;
                      }
                      else {
                        v625 = v844;
                      }
                      int v626 = WORD2(v852);
                      int v627 = HIWORD(v852);
                      uint64_t v628 = vp::get_log_source_file_path(v853, v622);
                      *(_DWORD *)v891 = 136316674;
                      *(void *)&v891[4] = v623;
                      *(_WORD *)&v891[12] = 2080;
                      *(void *)&v891[14] = v624;
                      __int16 v892 = 2080;
                      v893 = "get required input frame count for downlink voice DSP";
                      __int16 v894 = 2080;
                      v895 = v625;
                      __int16 v896 = 1024;
                      int v897 = v626;
                      __int16 v898 = 1024;
                      int v899 = v627;
                      __int16 v900 = 2080;
                      uint64_t v901 = v628;
                      uint64_t v236 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                      long long v237 = v617;
                      uint32_t v238 = 64;
LABEL_751:
                      _os_log_impl(&dword_1BB0CE000, v237, OS_LOG_TYPE_ERROR, v236, v891, v238);
                      if ((char)v846 < 0) {
                        operator delete(v844);
                      }
                    }
LABEL_753:
                    if ((char)v850 < 0) {
                      operator delete(v848);
                    }
                  }
                  *(_DWORD *)a2 = 7;
                  *(unsigned char *)(a2 + 4) = 0;
                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v852);
                  int v26 = 1;
LABEL_81:
                  if (!v859) {
                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v856);
                  }
                  goto LABEL_83;
                }
                vp::vx::io::Error::Error((vp::vx::io::Error *)&v856, (const vp::vx::io::Error *)&v860);
                uint64_t v195 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v856);
                if (*(char *)(v195 + 23) >= 0) {
                  uint64_t v196 = *(unsigned __int8 *)(v195 + 23);
                }
                else {
                  uint64_t v196 = *(void *)(v195 + 8);
                }
                BOOL v197 = vp::get_log((vp *)v195);
                BOOL v198 = os_log_type_enabled(v197, OS_LOG_TYPE_ERROR);
                if (v196)
                {
                  if (v198)
                  {
                    uint64_t v199 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v852);
                    if ((v854 & 0x80u) == 0) {
                      std::string v200 = (vp *)v854;
                    }
                    else {
                      std::string v200 = v853;
                    }
                    int v201 = vp::get_log(v199);
                    if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
                    {
                      int v202 = (char)v854;
                      uint64_t v203 = v852;
                      int v204 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v856);
                      v844 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v204);
                      v845 = v205;
                      std::string::basic_string<std::string_view,0>(&v848, (uint64_t)&v844);
                      if (v202 >= 0) {
                        uint64_t v203 = &v852;
                      }
                      if (v200) {
                        v207 = " ";
                      }
                      else {
                        v207 = "";
                      }
                      if ((v850 & 0x80u) == 0) {
                        int v208 = &v848;
                      }
                      else {
                        int v208 = v848;
                      }
                      int v209 = WORD2(v856);
                      int v210 = HIWORD(v856);
                      uint64_t v211 = vp::get_log_source_file_path(v857, v206);
                      uint64_t v212 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v856);
                      if (*(char *)(v212 + 23) >= 0) {
                        uint64_t v213 = v212;
                      }
                      else {
                        uint64_t v213 = *(void *)v212;
                      }
                      *(_DWORD *)v891 = 136316930;
                      *(void *)&v891[4] = v203;
                      *(_WORD *)&v891[12] = 2080;
                      *(void *)&v891[14] = v207;
                      __int16 v892 = 2080;
                      v893 = "get buffered output frame count for downlink voice DSP";
                      __int16 v894 = 2080;
                      v895 = v208;
                      __int16 v896 = 1024;
                      int v897 = v209;
                      __int16 v898 = 1024;
                      int v899 = v210;
                      __int16 v900 = 2080;
                      uint64_t v901 = v211;
                      __int16 v902 = 2080;
                      uint64_t v903 = v213;
                      v214 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                      uint32_t v215 = v201;
                      uint32_t v216 = 74;
                      goto LABEL_731;
                    }
                    goto LABEL_733;
                  }
                }
                else if (v198)
                {
                  v601 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v852);
                  if ((v854 & 0x80u) == 0) {
                    v602 = (vp *)v854;
                  }
                  else {
                    v602 = v853;
                  }
                  v603 = vp::get_log(v601);
                  if (os_log_type_enabled(v603, OS_LOG_TYPE_ERROR))
                  {
                    int v604 = (char)v854;
                    v605 = (void **)v852;
                    int v606 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v856);
                    v844 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v606);
                    v845 = v607;
                    std::string::basic_string<std::string_view,0>(&v848, (uint64_t)&v844);
                    if (v604 >= 0) {
                      v609 = &v852;
                    }
                    else {
                      v609 = v605;
                    }
                    if (v602) {
                      v610 = " ";
                    }
                    else {
                      v610 = "";
                    }
                    if ((v850 & 0x80u) == 0) {
                      v611 = &v848;
                    }
                    else {
                      v611 = v848;
                    }
                    int v612 = WORD2(v856);
                    int v613 = HIWORD(v856);
                    uint64_t v614 = vp::get_log_source_file_path(v857, v608);
                    *(_DWORD *)v891 = 136316674;
                    *(void *)&v891[4] = v609;
                    *(_WORD *)&v891[12] = 2080;
                    *(void *)&v891[14] = v610;
                    __int16 v892 = 2080;
                    v893 = "get buffered output frame count for downlink voice DSP";
                    __int16 v894 = 2080;
                    v895 = v611;
                    __int16 v896 = 1024;
                    int v897 = v612;
                    __int16 v898 = 1024;
                    int v899 = v613;
                    __int16 v900 = 2080;
                    uint64_t v901 = v614;
                    v214 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                    uint32_t v215 = v603;
                    uint32_t v216 = 64;
LABEL_731:
                    _os_log_impl(&dword_1BB0CE000, v215, OS_LOG_TYPE_ERROR, v214, v891, v216);
                    if ((char)v850 < 0) {
                      operator delete(v848);
                    }
                  }
LABEL_733:
                  if ((char)v854 < 0) {
                    operator delete(v852);
                  }
                }
                *(_DWORD *)a2 = 7;
                *(unsigned char *)(a2 + 4) = 0;
                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v856);
                int v26 = 1;
LABEL_83:
                if (!v863) {
                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v860);
                }
                goto LABEL_85;
              }
              vp::vx::io::Error::Error((vp::vx::io::Error *)&v860, (const vp::vx::io::Error *)&v864);
              uint64_t v173 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v860);
              if (*(char *)(v173 + 23) >= 0) {
                uint64_t v174 = *(unsigned __int8 *)(v173 + 23);
              }
              else {
                uint64_t v174 = *(void *)(v173 + 8);
              }
              BOOL v175 = vp::get_log((vp *)v173);
              BOOL v176 = os_log_type_enabled(v175, OS_LOG_TYPE_ERROR);
              if (v174)
              {
                if (v176)
                {
                  uint64_t v177 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v856);
                  if ((v858 & 0x80u) == 0) {
                    v178 = (vp *)v858;
                  }
                  else {
                    v178 = v857;
                  }
                  int v179 = vp::get_log(v177);
                  if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                  {
                    int v180 = (char)v858;
                    int v181 = v856;
                    int v182 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v860);
                    v848 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v182);
                    v849 = v183;
                    std::string::basic_string<std::string_view,0>(&v852, (uint64_t)&v848);
                    if (v180 >= 0) {
                      int v181 = &v856;
                    }
                    if (v178) {
                      v185 = " ";
                    }
                    else {
                      v185 = "";
                    }
                    if ((v854 & 0x80u) == 0) {
                      int v186 = &v852;
                    }
                    else {
                      int v186 = v852;
                    }
                    int v187 = WORD2(v860);
                    int v188 = HIWORD(v860);
                    uint64_t v189 = vp::get_log_source_file_path(v861, v184);
                    uint64_t v190 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v860);
                    if (*(char *)(v190 + 23) >= 0) {
                      uint64_t v191 = v190;
                    }
                    else {
                      uint64_t v191 = *(void *)v190;
                    }
                    *(_DWORD *)v891 = 136316930;
                    *(void *)&v891[4] = v181;
                    *(_WORD *)&v891[12] = 2080;
                    *(void *)&v891[14] = v185;
                    __int16 v892 = 2080;
                    v893 = "get frame deficit for downlink dynamics DSP";
                    __int16 v894 = 2080;
                    v895 = v186;
                    __int16 v896 = 1024;
                    int v897 = v187;
                    __int16 v898 = 1024;
                    int v899 = v188;
                    __int16 v900 = 2080;
                    uint64_t v901 = v189;
                    __int16 v902 = 2080;
                    uint64_t v903 = v191;
                    BOOL v192 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                    uint32_t v193 = v179;
                    uint32_t v194 = 74;
                    goto LABEL_711;
                  }
                  goto LABEL_713;
                }
              }
              else if (v176)
              {
                v587 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v856);
                if ((v858 & 0x80u) == 0) {
                  v588 = (vp *)v858;
                }
                else {
                  v588 = v857;
                }
                v589 = vp::get_log(v587);
                if (os_log_type_enabled(v589, OS_LOG_TYPE_ERROR))
                {
                  int v590 = (char)v858;
                  v591 = (void **)v856;
                  int v592 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v860);
                  v848 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v592);
                  v849 = v593;
                  std::string::basic_string<std::string_view,0>(&v852, (uint64_t)&v848);
                  if (v590 >= 0) {
                    v595 = &v856;
                  }
                  else {
                    v595 = v591;
                  }
                  if (v588) {
                    v596 = " ";
                  }
                  else {
                    v596 = "";
                  }
                  if ((v854 & 0x80u) == 0) {
                    v597 = &v852;
                  }
                  else {
                    v597 = v852;
                  }
                  int v598 = WORD2(v860);
                  int v599 = HIWORD(v860);
                  uint64_t v600 = vp::get_log_source_file_path(v861, v594);
                  *(_DWORD *)v891 = 136316674;
                  *(void *)&v891[4] = v595;
                  *(_WORD *)&v891[12] = 2080;
                  *(void *)&v891[14] = v596;
                  __int16 v892 = 2080;
                  v893 = "get frame deficit for downlink dynamics DSP";
                  __int16 v894 = 2080;
                  v895 = v597;
                  __int16 v896 = 1024;
                  int v897 = v598;
                  __int16 v898 = 1024;
                  int v899 = v599;
                  __int16 v900 = 2080;
                  uint64_t v901 = v600;
                  BOOL v192 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                  uint32_t v193 = v589;
                  uint32_t v194 = 64;
LABEL_711:
                  _os_log_impl(&dword_1BB0CE000, v193, OS_LOG_TYPE_ERROR, v192, v891, v194);
                  if ((char)v854 < 0) {
                    operator delete(v852);
                  }
                }
LABEL_713:
                if ((char)v858 < 0) {
                  operator delete(v856);
                }
              }
              *(_DWORD *)a2 = 7;
              *(unsigned char *)(a2 + 4) = 0;
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v860);
              int v26 = 1;
LABEL_85:
              if (!v867) {
                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v864);
              }
              goto LABEL_87;
            }
            vp::vx::io::Error::Error((vp::vx::io::Error *)&v864, (const vp::vx::io::Error *)&v868);
            uint64_t v151 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v864);
            if (*(char *)(v151 + 23) >= 0) {
              uint64_t v152 = *(unsigned __int8 *)(v151 + 23);
            }
            else {
              uint64_t v152 = *(void *)(v151 + 8);
            }
            BOOL v153 = vp::get_log((vp *)v151);
            BOOL v154 = os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
            if (v152)
            {
              if (v154)
              {
                uint64_t v155 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v860);
                if ((v862 & 0x80u) == 0) {
                  uint64_t v156 = (vp *)v862;
                }
                else {
                  uint64_t v156 = v861;
                }
                int v157 = vp::get_log(v155);
                if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                {
                  int v158 = (char)v862;
                  int v159 = v860;
                  int v160 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v864);
                  v852 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v160);
                  v853 = v161;
                  std::string::basic_string<std::string_view,0>(&v856, (uint64_t)&v852);
                  if (v158 >= 0) {
                    int v159 = &v860;
                  }
                  if (v156) {
                    std::string::size_type v163 = " ";
                  }
                  else {
                    std::string::size_type v163 = "";
                  }
                  if ((v858 & 0x80u) == 0) {
                    int v164 = &v856;
                  }
                  else {
                    int v164 = v856;
                  }
                  int v165 = WORD2(v864);
                  int v166 = HIWORD(v864);
                  uint64_t v167 = vp::get_log_source_file_path(v865, v162);
                  uint64_t v168 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v864);
                  if (*(char *)(v168 + 23) >= 0) {
                    uint64_t v169 = v168;
                  }
                  else {
                    uint64_t v169 = *(void *)v168;
                  }
                  *(_DWORD *)v891 = 136316930;
                  *(void *)&v891[4] = v159;
                  *(_WORD *)&v891[12] = 2080;
                  *(void *)&v891[14] = v163;
                  __int16 v892 = 2080;
                  v893 = "get buffered input frame count for downlink dynamics DSP";
                  __int16 v894 = 2080;
                  v895 = v164;
                  __int16 v896 = 1024;
                  int v897 = v165;
                  __int16 v898 = 1024;
                  int v899 = v166;
                  __int16 v900 = 2080;
                  uint64_t v901 = v167;
                  __int16 v902 = 2080;
                  uint64_t v903 = v169;
                  uint64_t v170 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                  uint32_t v171 = v157;
                  uint32_t v172 = 74;
                  goto LABEL_691;
                }
                goto LABEL_693;
              }
            }
            else if (v154)
            {
              v573 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v860);
              if ((v862 & 0x80u) == 0) {
                v574 = (vp *)v862;
              }
              else {
                v574 = v861;
              }
              v575 = vp::get_log(v573);
              if (os_log_type_enabled(v575, OS_LOG_TYPE_ERROR))
              {
                int v576 = (char)v862;
                v577 = (void **)v860;
                int v578 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v864);
                v852 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v578);
                v853 = v579;
                std::string::basic_string<std::string_view,0>(&v856, (uint64_t)&v852);
                if (v576 >= 0) {
                  v581 = &v860;
                }
                else {
                  v581 = v577;
                }
                if (v574) {
                  v582 = " ";
                }
                else {
                  v582 = "";
                }
                if ((v858 & 0x80u) == 0) {
                  v583 = &v856;
                }
                else {
                  v583 = v856;
                }
                int v584 = WORD2(v864);
                int v585 = HIWORD(v864);
                uint64_t v586 = vp::get_log_source_file_path(v865, v580);
                *(_DWORD *)v891 = 136316674;
                *(void *)&v891[4] = v581;
                *(_WORD *)&v891[12] = 2080;
                *(void *)&v891[14] = v582;
                __int16 v892 = 2080;
                v893 = "get buffered input frame count for downlink dynamics DSP";
                __int16 v894 = 2080;
                v895 = v583;
                __int16 v896 = 1024;
                int v897 = v584;
                __int16 v898 = 1024;
                int v899 = v585;
                __int16 v900 = 2080;
                uint64_t v901 = v586;
                uint64_t v170 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                uint32_t v171 = v575;
                uint32_t v172 = 64;
LABEL_691:
                _os_log_impl(&dword_1BB0CE000, v171, OS_LOG_TYPE_ERROR, v170, v891, v172);
                if ((char)v858 < 0) {
                  operator delete(v856);
                }
              }
LABEL_693:
              if ((char)v862 < 0) {
                operator delete(v860);
              }
            }
            *(_DWORD *)a2 = 7;
            *(unsigned char *)(a2 + 4) = 0;
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v864);
            int v26 = 1;
LABEL_87:
            if (!v871) {
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v868);
            }
            goto LABEL_89;
          }
          vp::vx::io::Error::Error((vp::vx::io::Error *)&v868, (const vp::vx::io::Error *)&__dst);
          uint64_t v129 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v868);
          if (*(char *)(v129 + 23) >= 0) {
            uint64_t v130 = *(unsigned __int8 *)(v129 + 23);
          }
          else {
            uint64_t v130 = *(void *)(v129 + 8);
          }
          BOOL v131 = vp::get_log((vp *)v129);
          BOOL v132 = os_log_type_enabled(v131, OS_LOG_TYPE_ERROR);
          if (v130)
          {
            if (v132)
            {
              v133 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v864);
              if ((v866 & 0x80u) == 0) {
                uint64_t v134 = (vp *)v866;
              }
              else {
                uint64_t v134 = v865;
              }
              int v135 = vp::get_log(v133);
              if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
              {
                int v136 = (char)v866;
                int v137 = v864;
                int v138 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v868);
                v856 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v138);
                v857 = v139;
                std::string::basic_string<std::string_view,0>(&v860, (uint64_t)&v856);
                if (v136 >= 0) {
                  int v137 = &v864;
                }
                if (v134) {
                  char v141 = " ";
                }
                else {
                  char v141 = "";
                }
                if ((v862 & 0x80u) == 0) {
                  int v142 = &v860;
                }
                else {
                  int v142 = v860;
                }
                int v143 = WORD2(v868);
                int v144 = HIWORD(v868);
                uint64_t v145 = vp::get_log_source_file_path(v869, v140);
                uint64_t v146 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v868);
                if (*(char *)(v146 + 23) >= 0) {
                  uint64_t v147 = v146;
                }
                else {
                  uint64_t v147 = *(void *)v146;
                }
                *(_DWORD *)v891 = 136316930;
                *(void *)&v891[4] = v137;
                *(_WORD *)&v891[12] = 2080;
                *(void *)&v891[14] = v141;
                __int16 v892 = 2080;
                v893 = "get required input frame count for downlink dynamics DSP";
                __int16 v894 = 2080;
                v895 = v142;
                __int16 v896 = 1024;
                int v897 = v143;
                __int16 v898 = 1024;
                int v899 = v144;
                __int16 v900 = 2080;
                uint64_t v901 = v145;
                __int16 v902 = 2080;
                uint64_t v903 = v147;
                long long v148 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                uint32_t v149 = v135;
                uint32_t v150 = 74;
                goto LABEL_671;
              }
              goto LABEL_673;
            }
          }
          else if (v132)
          {
            v559 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v864);
            if ((v866 & 0x80u) == 0) {
              v560 = (vp *)v866;
            }
            else {
              v560 = v865;
            }
            v561 = vp::get_log(v559);
            if (os_log_type_enabled(v561, OS_LOG_TYPE_ERROR))
            {
              int v562 = (char)v866;
              v563 = (void **)v864;
              int v564 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v868);
              v856 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v564);
              v857 = v565;
              std::string::basic_string<std::string_view,0>(&v860, (uint64_t)&v856);
              if (v562 >= 0) {
                v567 = &v864;
              }
              else {
                v567 = v563;
              }
              if (v560) {
                v568 = " ";
              }
              else {
                v568 = "";
              }
              if ((v862 & 0x80u) == 0) {
                v569 = &v860;
              }
              else {
                v569 = v860;
              }
              int v570 = WORD2(v868);
              int v571 = HIWORD(v868);
              uint64_t v572 = vp::get_log_source_file_path(v869, v566);
              *(_DWORD *)v891 = 136316674;
              *(void *)&v891[4] = v567;
              *(_WORD *)&v891[12] = 2080;
              *(void *)&v891[14] = v568;
              __int16 v892 = 2080;
              v893 = "get required input frame count for downlink dynamics DSP";
              __int16 v894 = 2080;
              v895 = v569;
              __int16 v896 = 1024;
              int v897 = v570;
              __int16 v898 = 1024;
              int v899 = v571;
              __int16 v900 = 2080;
              uint64_t v901 = v572;
              long long v148 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
              uint32_t v149 = v561;
              uint32_t v150 = 64;
LABEL_671:
              _os_log_impl(&dword_1BB0CE000, v149, OS_LOG_TYPE_ERROR, v148, v891, v150);
              if ((char)v862 < 0) {
                operator delete(v860);
              }
            }
LABEL_673:
            if ((char)v866 < 0) {
              operator delete(v864);
            }
          }
          *(_DWORD *)a2 = 7;
          *(unsigned char *)(a2 + 4) = 0;
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v868);
          int v26 = 1;
LABEL_89:
          if (!v875) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
          }
          goto LABEL_91;
        }
        vp::vx::io::Error::Error((vp::vx::io::Error *)&__dst, (const vp::vx::io::Error *)&__p);
        uint64_t v107 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
        if (*(char *)(v107 + 23) >= 0) {
          uint64_t v108 = *(unsigned __int8 *)(v107 + 23);
        }
        else {
          uint64_t v108 = *(void *)(v107 + 8);
        }
        BOOL v109 = vp::get_log((vp *)v107);
        BOOL v110 = os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
        if (v108)
        {
          if (v110)
          {
            v111 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v868);
            if ((v870 & 0x80u) == 0) {
              uint64_t v112 = (vp *)v870;
            }
            else {
              uint64_t v112 = v869;
            }
            int v113 = vp::get_log(v111);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
              int v114 = (char)v870;
              int v115 = v868;
              int v116 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
              v860 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v116);
              v861 = v117;
              std::string::basic_string<std::string_view,0>(&v864, (uint64_t)&v860);
              if (v114 >= 0) {
                int v115 = &v868;
              }
              if (v112) {
                int v119 = " ";
              }
              else {
                int v119 = "";
              }
              if ((v866 & 0x80u) == 0) {
                int v120 = &v864;
              }
              else {
                int v120 = v864;
              }
              int v121 = WORD2(__dst);
              int v122 = HIWORD(__dst);
              uint64_t v123 = vp::get_log_source_file_path(v873, v118);
              uint64_t v124 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
              if (*(char *)(v124 + 23) >= 0) {
                uint64_t v125 = v124;
              }
              else {
                uint64_t v125 = *(void *)v124;
              }
              *(_DWORD *)v891 = 136316930;
              *(void *)&v891[4] = v115;
              *(_WORD *)&v891[12] = 2080;
              *(void *)&v891[14] = v119;
              __int16 v892 = 2080;
              v893 = "get buffered output frame count for downlink dynamics DSP";
              __int16 v894 = 2080;
              v895 = v120;
              __int16 v896 = 1024;
              int v897 = v121;
              __int16 v898 = 1024;
              int v899 = v122;
              __int16 v900 = 2080;
              uint64_t v901 = v123;
              __int16 v902 = 2080;
              uint64_t v903 = v125;
              uint64_t v126 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
              uint32_t v127 = v113;
              uint32_t v128 = 74;
              goto LABEL_651;
            }
            goto LABEL_653;
          }
        }
        else if (v110)
        {
          v545 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v868);
          if ((v870 & 0x80u) == 0) {
            v546 = (vp *)v870;
          }
          else {
            v546 = v869;
          }
          v547 = vp::get_log(v545);
          if (os_log_type_enabled(v547, OS_LOG_TYPE_ERROR))
          {
            int v548 = (char)v870;
            v549 = (void **)v868;
            int v550 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
            v860 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v550);
            v861 = v551;
            std::string::basic_string<std::string_view,0>(&v864, (uint64_t)&v860);
            if (v548 >= 0) {
              v553 = &v868;
            }
            else {
              v553 = v549;
            }
            if (v546) {
              v554 = " ";
            }
            else {
              v554 = "";
            }
            if ((v866 & 0x80u) == 0) {
              v555 = &v864;
            }
            else {
              v555 = v864;
            }
            int v556 = WORD2(__dst);
            int v557 = HIWORD(__dst);
            uint64_t v558 = vp::get_log_source_file_path(v873, v552);
            *(_DWORD *)v891 = 136316674;
            *(void *)&v891[4] = v553;
            *(_WORD *)&v891[12] = 2080;
            *(void *)&v891[14] = v554;
            __int16 v892 = 2080;
            v893 = "get buffered output frame count for downlink dynamics DSP";
            __int16 v894 = 2080;
            v895 = v555;
            __int16 v896 = 1024;
            int v897 = v556;
            __int16 v898 = 1024;
            int v899 = v557;
            __int16 v900 = 2080;
            uint64_t v901 = v558;
            uint64_t v126 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
            uint32_t v127 = v547;
            uint32_t v128 = 64;
LABEL_651:
            _os_log_impl(&dword_1BB0CE000, v127, OS_LOG_TYPE_ERROR, v126, v891, v128);
            if ((char)v866 < 0) {
              operator delete(v864);
            }
          }
LABEL_653:
          if ((char)v870 < 0) {
            operator delete(v868);
          }
        }
        *(_DWORD *)a2 = 7;
        *(unsigned char *)(a2 + 4) = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
        int v26 = 1;
LABEL_91:
        if (!v879) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
        }
        goto LABEL_93;
      }
      vp::vx::io::Error::Error((vp::vx::io::Error *)&__p, (const vp::vx::io::Error *)&v880);
      uint64_t v85 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
      if (*(char *)(v85 + 23) >= 0) {
        uint64_t v86 = *(unsigned __int8 *)(v85 + 23);
      }
      else {
        uint64_t v86 = *(void *)(v85 + 8);
      }
      BOOL v87 = vp::get_log((vp *)v85);
      BOOL v88 = os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
      if (v86)
      {
        if (v88)
        {
          unsigned __int16 v89 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
          if ((v874 & 0x80u) == 0) {
            unsigned __int16 v90 = (vp *)v874;
          }
          else {
            unsigned __int16 v90 = v873;
          }
          int v91 = vp::get_log(v89);
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
          {
            int v92 = (char)v874;
            p_dst = __dst;
            int v94 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
            v864 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v94);
            v865 = v95;
            std::string::basic_string<std::string_view,0>(&v868, (uint64_t)&v864);
            if (v92 >= 0) {
              p_dst = &__dst;
            }
            if (v90) {
              __int16 v97 = " ";
            }
            else {
              __int16 v97 = "";
            }
            if ((v870 & 0x80u) == 0) {
              int v98 = &v868;
            }
            else {
              int v98 = v868;
            }
            int v99 = WORD2(__p);
            int v100 = HIWORD(__p);
            uint64_t v101 = vp::get_log_source_file_path(v877, v96);
            uint64_t v102 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
            if (*(char *)(v102 + 23) >= 0) {
              uint64_t v103 = v102;
            }
            else {
              uint64_t v103 = *(void *)v102;
            }
            *(_DWORD *)v891 = 136316930;
            *(void *)&v891[4] = p_dst;
            *(_WORD *)&v891[12] = 2080;
            *(void *)&v891[14] = v97;
            __int16 v892 = 2080;
            v893 = "get required input frame count for downlink hardware DSP";
            __int16 v894 = 2080;
            v895 = v98;
            __int16 v896 = 1024;
            int v897 = v99;
            __int16 v898 = 1024;
            int v899 = v100;
            __int16 v900 = 2080;
            uint64_t v901 = v101;
            __int16 v902 = 2080;
            uint64_t v903 = v103;
            int v104 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
            uint32_t v105 = v91;
            uint32_t v106 = 74;
            goto LABEL_631;
          }
          goto LABEL_633;
        }
      }
      else if (v88)
      {
        v531 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
        if ((v874 & 0x80u) == 0) {
          v532 = (vp *)v874;
        }
        else {
          v532 = v873;
        }
        v533 = vp::get_log(v531);
        if (os_log_type_enabled(v533, OS_LOG_TYPE_ERROR))
        {
          int v534 = (char)v874;
          v535 = (void **)__dst;
          int v536 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
          v864 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v536);
          v865 = v537;
          std::string::basic_string<std::string_view,0>(&v868, (uint64_t)&v864);
          if (v534 >= 0) {
            v539 = &__dst;
          }
          else {
            v539 = v535;
          }
          if (v532) {
            v540 = " ";
          }
          else {
            v540 = "";
          }
          if ((v870 & 0x80u) == 0) {
            v541 = &v868;
          }
          else {
            v541 = v868;
          }
          int v542 = WORD2(__p);
          int v543 = HIWORD(__p);
          uint64_t v544 = vp::get_log_source_file_path(v877, v538);
          *(_DWORD *)v891 = 136316674;
          *(void *)&v891[4] = v539;
          *(_WORD *)&v891[12] = 2080;
          *(void *)&v891[14] = v540;
          __int16 v892 = 2080;
          v893 = "get required input frame count for downlink hardware DSP";
          __int16 v894 = 2080;
          v895 = v541;
          __int16 v896 = 1024;
          int v897 = v542;
          __int16 v898 = 1024;
          int v899 = v543;
          __int16 v900 = 2080;
          uint64_t v901 = v544;
          int v104 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
          uint32_t v105 = v533;
          uint32_t v106 = 64;
LABEL_631:
          _os_log_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_ERROR, v104, v891, v106);
          if ((char)v870 < 0) {
            operator delete(v868);
          }
        }
LABEL_633:
        if ((char)v874 < 0) {
          operator delete(__dst);
        }
      }
      *(_DWORD *)a2 = 7;
      *(unsigned char *)(a2 + 4) = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
      int v26 = 1;
LABEL_93:
      if (!v883) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v880);
      }
      goto LABEL_95;
    }
    vp::vx::io::Error::Error((vp::vx::io::Error *)&v880, (const vp::vx::io::Error *)&v884);
    uint64_t v63 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v880);
    if (*(char *)(v63 + 23) >= 0) {
      uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
    }
    else {
      uint64_t v64 = *(void *)(v63 + 8);
    }
    BOOL v65 = vp::get_log((vp *)v63);
    BOOL v66 = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    if (v64)
    {
      if (v66)
      {
        int v67 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
        if ((v878 & 0x80u) == 0) {
          __int16 v68 = (vp *)v878;
        }
        else {
          __int16 v68 = v877;
        }
        int v69 = vp::get_log(v67);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          int v70 = (char)v878;
          p_p = __p;
          int v72 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v880);
          v868 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v72);
          v869 = v73;
          std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v868);
          if (v70 >= 0) {
            p_p = &__p;
          }
          if (v68) {
            __int16 v75 = " ";
          }
          else {
            __int16 v75 = "";
          }
          if ((v874 & 0x80u) == 0) {
            int v76 = &__dst;
          }
          else {
            int v76 = __dst;
          }
          int v77 = WORD2(v880);
          int v78 = HIWORD(v880);
          uint64_t v79 = vp::get_log_source_file_path(v881, v74);
          uint64_t v80 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v880);
          if (*(char *)(v80 + 23) >= 0) {
            uint64_t v81 = v80;
          }
          else {
            uint64_t v81 = *(void *)v80;
          }
          *(_DWORD *)v891 = 136316930;
          *(void *)&v891[4] = p_p;
          *(_WORD *)&v891[12] = 2080;
          *(void *)&v891[14] = v75;
          __int16 v892 = 2080;
          v893 = "get buffered input frame count for downlink hardware DSP";
          __int16 v894 = 2080;
          v895 = v76;
          __int16 v896 = 1024;
          int v897 = v77;
          __int16 v898 = 1024;
          int v899 = v78;
          __int16 v900 = 2080;
          uint64_t v901 = v79;
          __int16 v902 = 2080;
          uint64_t v903 = v81;
          uint64_t v82 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          uint32_t v83 = v69;
          uint32_t v84 = 74;
          goto LABEL_611;
        }
        goto LABEL_613;
      }
    }
    else if (v66)
    {
      v517 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      if ((v878 & 0x80u) == 0) {
        v518 = (vp *)v878;
      }
      else {
        v518 = v877;
      }
      v519 = vp::get_log(v517);
      if (os_log_type_enabled(v519, OS_LOG_TYPE_ERROR))
      {
        int v520 = (char)v878;
        v521 = (void **)__p;
        int v522 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v880);
        v868 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v522);
        v869 = v523;
        std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v868);
        if (v520 >= 0) {
          v525 = &__p;
        }
        else {
          v525 = v521;
        }
        if (v518) {
          v526 = " ";
        }
        else {
          v526 = "";
        }
        if ((v874 & 0x80u) == 0) {
          v527 = &__dst;
        }
        else {
          v527 = __dst;
        }
        int v528 = WORD2(v880);
        int v529 = HIWORD(v880);
        uint64_t v530 = vp::get_log_source_file_path(v881, v524);
        *(_DWORD *)v891 = 136316674;
        *(void *)&v891[4] = v525;
        *(_WORD *)&v891[12] = 2080;
        *(void *)&v891[14] = v526;
        __int16 v892 = 2080;
        v893 = "get buffered input frame count for downlink hardware DSP";
        __int16 v894 = 2080;
        v895 = v527;
        __int16 v896 = 1024;
        int v897 = v528;
        __int16 v898 = 1024;
        int v899 = v529;
        __int16 v900 = 2080;
        uint64_t v901 = v530;
        uint64_t v82 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        uint32_t v83 = v519;
        uint32_t v84 = 64;
LABEL_611:
        _os_log_impl(&dword_1BB0CE000, v83, OS_LOG_TYPE_ERROR, v82, v891, v84);
        if ((char)v874 < 0) {
          operator delete(__dst);
        }
      }
LABEL_613:
      if ((char)v878 < 0) {
        operator delete(__p);
      }
    }
    *(_DWORD *)a2 = 7;
    *(unsigned char *)(a2 + 4) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v880);
    int v26 = 1;
LABEL_95:
    if (!v888) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v884);
    }
    goto LABEL_97;
  }
  vp::vx::io::Error::Error((vp::vx::io::Error *)&v884, (const vp::vx::io::Error *)buf);
  uint64_t v41 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v884);
  if (*(char *)(v41 + 23) >= 0) {
    uint64_t v42 = *(unsigned __int8 *)(v41 + 23);
  }
  else {
    uint64_t v42 = *(void *)(v41 + 8);
  }
  uint64_t v43 = vp::get_log((vp *)v41);
  BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  if (v42)
  {
    if (v44)
    {
      uint64_t v45 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v880);
      if ((v882 & 0x80u) == 0) {
        __int16 v46 = (vp *)v882;
      }
      else {
        __int16 v46 = v881;
      }
      char v47 = vp::get_log(v45);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        int v48 = (char)v882;
        uint64_t v49 = v880;
        int v50 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v884);
        long long __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v50);
        v873 = v51;
        std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
        if (v48 >= 0) {
          uint64_t v49 = &v880;
        }
        if (v46) {
          unsigned __int16 v53 = " ";
        }
        else {
          unsigned __int16 v53 = "";
        }
        if ((v878 & 0x80u) == 0) {
          int v54 = &__p;
        }
        else {
          int v54 = __p;
        }
        int v55 = v885;
        int v56 = v886;
        uint64_t v57 = vp::get_log_source_file_path(v887, v52);
        uint64_t v58 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v884);
        if (*(char *)(v58 + 23) >= 0) {
          uint64_t v59 = v58;
        }
        else {
          uint64_t v59 = *(void *)v58;
        }
        *(_DWORD *)v891 = 136316930;
        *(void *)&v891[4] = v49;
        *(_WORD *)&v891[12] = 2080;
        *(void *)&v891[14] = v53;
        __int16 v892 = 2080;
        v893 = "get downlink hardware DSP I/O block size";
        __int16 v894 = 2080;
        v895 = v54;
        __int16 v896 = 1024;
        int v897 = v55;
        __int16 v898 = 1024;
        int v899 = v56;
        __int16 v900 = 2080;
        uint64_t v901 = v57;
        __int16 v902 = 2080;
        uint64_t v903 = v59;
        __int16 v60 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
        uint32_t v61 = v47;
        uint32_t v62 = 74;
        goto LABEL_591;
      }
      goto LABEL_593;
    }
  }
  else if (v44)
  {
    v503 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v880);
    if ((v882 & 0x80u) == 0) {
      v504 = (vp *)v882;
    }
    else {
      v504 = v881;
    }
    v505 = vp::get_log(v503);
    if (os_log_type_enabled(v505, OS_LOG_TYPE_ERROR))
    {
      int v506 = (char)v882;
      v507 = (void **)v880;
      int v508 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v884);
      long long __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v508);
      v873 = v509;
      std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
      if (v506 >= 0) {
        v511 = &v880;
      }
      else {
        v511 = v507;
      }
      if (v504) {
        v512 = " ";
      }
      else {
        v512 = "";
      }
      if ((v878 & 0x80u) == 0) {
        v513 = &__p;
      }
      else {
        v513 = __p;
      }
      int v514 = v885;
      int v515 = v886;
      uint64_t v516 = vp::get_log_source_file_path(v887, v510);
      *(_DWORD *)v891 = 136316674;
      *(void *)&v891[4] = v511;
      *(_WORD *)&v891[12] = 2080;
      *(void *)&v891[14] = v512;
      __int16 v892 = 2080;
      v893 = "get downlink hardware DSP I/O block size";
      __int16 v894 = 2080;
      v895 = v513;
      __int16 v896 = 1024;
      int v897 = v514;
      __int16 v898 = 1024;
      int v899 = v515;
      __int16 v900 = 2080;
      uint64_t v901 = v516;
      __int16 v60 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
      uint32_t v61 = v505;
      uint32_t v62 = 64;
LABEL_591:
      _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_ERROR, v60, v891, v62);
      if ((char)v878 < 0) {
        operator delete(__p);
      }
    }
LABEL_593:
    if ((char)v882 < 0) {
      operator delete(v880);
    }
  }
  *(_DWORD *)a2 = 7;
  *(unsigned char *)(a2 + 4) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v884);
  int v26 = 1;
LABEL_97:
  if (!v908) {
    vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
  }
  uint64_t result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v889);
  if (!v26)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 4) = 1;
  }
  return result;
}

void sub_1BB22AB04(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a14);
    if (!a26) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a20);
    }
    if (!a39) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a33);
    }
    if (!a46) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a40);
    }
    if (!a53) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a47);
    }
    if (!a60) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a54);
    }
    if (!a67) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a61);
    }
    if (!a71) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a68);
    }
    if (!LOBYTE(STACK[0x228])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a72);
    }
    if (!LOBYTE(STACK[0x260])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x230]);
    }
    if (!LOBYTE(STACK[0x298])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x268]);
    }
    if (!LOBYTE(STACK[0x2D0])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x2A0]);
    }
    if (!LOBYTE(STACK[0x308])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x2D8]);
    }
    if (!LOBYTE(STACK[0x340])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x310]);
    }
    if (!LOBYTE(STACK[0x378])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x348]);
    }
    if (!LOBYTE(STACK[0x3B0])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x380]);
    }
    if (!LOBYTE(STACK[0x3E8])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x3B8]);
    }
    if (!LOBYTE(STACK[0x420])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x3F0]);
    }
    if (!LOBYTE(STACK[0x458])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x428]);
    }
    if (!LOBYTE(STACK[0x490])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x460]);
    }
    if (!LOBYTE(STACK[0x4C8])) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x498]);
    }
    if (!*(unsigned char *)(v73 - 112)) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)(v73 - 160));
    }
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100](v73 - 256);
    __int16 v75 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v75);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, (void *)(v73 - 160));
      int v78 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&STACK[0x460]);
      }
      if (*(char *)(v73 - 137) < 0) {
        operator delete(*(void **)(v73 - 160));
      }
    }
    *(_DWORD *)uint64_t v72 = 11;
    *(unsigned char *)(v72 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BB226A80);
  }
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::components_end_process<vp::vx::Downlink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    int v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v9 = *a3;
    char v10 = *((unsigned char *)a3 + 4);
    (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 280))(v7, a2, &v9);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t vp::vx::Voice_Processor::reset_all_of_downlink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  int v55 = (char *)this + 1128;
  unsigned int v3 = atomic_load((unsigned int *)this + 282);
  if (v3 > 0x7FFFFFFE)
  {
LABEL_5:
    char v56 = 0;
LABEL_6:
    *(_DWORD *)a2 = 8;
    *(unsigned char *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v55);
  }
  unsigned int v5 = v3;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)this + 282, &v5, v3 + 1);
    if (v5 == v3) {
      break;
    }
    unsigned int v3 = v5;
    if (v5 >= 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  char v56 = 1;
  if (!*((void *)this + 313)) {
    goto LABEL_6;
  }
  *(void *)std::string buf = (char *)this + 2512;
  *(_DWORD *)&buf[8] = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)buf, 8uLL);
  vp::vx::io::Graph::reset(*((vp::vx::io::Graph **)this + 313), v50);
  if (!v54)
  {
    uint64_t node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v50);
    if (*(char *)(node_commands + 23) >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(node_commands + 23);
    }
    else {
      uint64_t v8 = *(void *)(node_commands + 8);
    }
    log = vp::get_log((vp *)node_commands);
    BOOL v10 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10)
      {
        log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v47);
        if ((v49 & 0x80u) == 0) {
          uint64_t v12 = v49;
        }
        else {
          uint64_t v12 = v48;
        }
        unsigned int v13 = vp::get_log(log_context_info);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v14 = (char)v49;
          unsigned int v15 = v47;
          int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v50);
          uint64_t v43 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
          uint64_t v44 = v17;
          std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v43);
          if (v14 >= 0) {
            unsigned int v15 = &v47;
          }
          if (v12) {
            unsigned int v19 = " ";
          }
          else {
            unsigned int v19 = "";
          }
          if (v46 >= 0) {
            uint64_t v20 = __p;
          }
          else {
            uint64_t v20 = (void **)__p[0];
          }
          int v21 = v51;
          int v22 = v52;
          uint64_t log_source_file_path = vp::get_log_source_file_path(v53, v18);
          uint64_t v24 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v50);
          if (*(char *)(v24 + 23) >= 0) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = *(void *)v24;
          }
          *(_DWORD *)std::string buf = 136316930;
          *(void *)&uint8_t buf[4] = v15;
          __int16 v58 = 2080;
          uint64_t v59 = v19;
          __int16 v60 = 2080;
          uint32_t v61 = "reset downlink DSP";
          __int16 v62 = 2080;
          uint64_t v63 = v20;
          __int16 v64 = 1024;
          int v65 = v21;
          __int16 v66 = 1024;
          int v67 = v22;
          __int16 v68 = 2080;
          uint64_t v69 = log_source_file_path;
          __int16 v70 = 2080;
          uint64_t v71 = v25;
          int v26 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          uint64_t v27 = v13;
          uint32_t v28 = 74;
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
    else if (v10)
    {
      uint32_t v29 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v47);
      if ((v49 & 0x80u) == 0) {
        uint64_t v30 = v49;
      }
      else {
        uint64_t v30 = v48;
      }
      uint64_t v31 = vp::get_log(v29);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        int v32 = (char)v49;
        int v33 = (void **)v47;
        int v34 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v50);
        uint64_t v43 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v34);
        uint64_t v44 = v35;
        std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v43);
        if (v32 >= 0) {
          uint32_t v37 = &v47;
        }
        else {
          uint32_t v37 = v33;
        }
        if (v30) {
          uint64_t v38 = " ";
        }
        else {
          uint64_t v38 = "";
        }
        if (v46 >= 0) {
          uint32_t v39 = __p;
        }
        else {
          uint32_t v39 = (void **)__p[0];
        }
        int v40 = v51;
        int v41 = v52;
        uint64_t v42 = vp::get_log_source_file_path(v53, v36);
        *(_DWORD *)std::string buf = 136316674;
        *(void *)&uint8_t buf[4] = v37;
        __int16 v58 = 2080;
        uint64_t v59 = v38;
        __int16 v60 = 2080;
        uint32_t v61 = "reset downlink DSP";
        __int16 v62 = 2080;
        uint64_t v63 = v39;
        __int16 v64 = 1024;
        int v65 = v40;
        __int16 v66 = 1024;
        int v67 = v41;
        __int16 v68 = 2080;
        uint64_t v69 = v42;
        int v26 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        uint64_t v27 = v31;
        uint32_t v28 = 64;
LABEL_48:
        _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, v26, buf, v28);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_50:
      if ((char)v49 < 0) {
        operator delete(v47);
      }
    }
    *(_DWORD *)a2 = 5;
    *(unsigned char *)(a2 + 4) = 0;
    if (!v54) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v50);
    }
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v55);
  }
  uint64_t result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v55);
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return result;
}

void sub_1BB22B578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint8_t buf,int a37,int a38,__int16 a39,int a40,__int16 a41,__int16 a42,uint64_t a43)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
    if (!a30) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a21);
    }
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a32);
    uint64_t v45 = (vp *)__cxa_begin_catch(exception_object);
    log = vp::get_log(v45);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &a21);
      uint64_t v48 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a12);
      }
      if (a26 < 0) {
        operator delete(a21);
      }
    }
    *(_DWORD *)uint64_t v43 = 11;
    *(unsigned char *)(v43 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BB22B258);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::should_use_internal_reference(vp::vx::Voice_Processor *this)
{
  return *((unsigned __int8 *)this + 2408);
}

uint64_t vp::vx::Voice_Processor::should_fade_audio_buffers(vp::vx::Voice_Processor *this)
{
  return *((unsigned __int8 *)this + 2410);
}

void vp::vx::Voice_Processor::components_configure(vp::vx::Voice_Processor *this)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v2 = std::chrono::system_clock::to_time_t(&__t);
  unsigned int v3 = (uint64_t *)*((void *)this + 65);
  unint64_t v4 = (uint64_t *)*((void *)this + 66);
  if (v3 != v4)
  {
    time_t v5 = v2;
    do
    {
      uint64_t v7 = *v3;
      uint64_t v6 = (std::__shared_weak_count *)v3[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 77);
      __t.__d_.__rep_ = *((void *)this + 76);
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::chrono::system_clock::time_point *))(*(void *)v7 + 16))(v7, &__t);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      vp::vx::Voice_Processor::make_weak_state_manager(this, &v13);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 24))(v7, &v13);
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      vp::vx::Voice_Processor::make_weak_state_observer(this, &v11);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, &v11);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      vp::vx::Voice_Processor::make_weak_state_owner(this, &v9);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 40))(v7, &v9);
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      (*(void (**)(uint64_t, time_t))(*(void *)v7 + 48))(v7, v5);
      (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void vp::vx::Voice_Processor::components_begin_state_change(vp::vx::Voice_Processor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 65);
  for (char i = (uint64_t *)*((void *)this + 66); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    unint64_t v4 = (std::__shared_weak_count *)v1[1];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void vp::vx::Voice_Processor::components_end_state_change(vp::vx::Voice_Processor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 65);
  for (char i = (uint64_t *)*((void *)this + 66); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    unint64_t v4 = (std::__shared_weak_count *)v1[1];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 96))(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void vp::vx::Voice_Processor::components_begin_configuration_changes(vp::vx::Voice_Processor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 65);
  for (char i = (uint64_t *)*((void *)this + 66); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    unint64_t v4 = (std::__shared_weak_count *)v1[1];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 104))(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void vp::vx::Voice_Processor::begin_state_change(vp::vx::Voice_Processor *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    unint64_t v4 = v11;
    time_t v5 = __p[1];
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      uint64_t v8 = (void **)__p[0];
      if ((v11 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v13 = v8;
      __int16 v14 = 2080;
      unsigned int v15 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s%sbegin state change", buf, 0x16u);
    }
    if ((char)v11 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::Voice_Processor::components_begin_state_change(this);
}

void vp::vx::Voice_Processor::end_state_change(vp::vx::Voice_Processor *this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(this);
  BOOL v3 = os_log_type_enabled(log, OS_LOG_TYPE_INFO);
  if (v3)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v5 = v49;
    uint64_t v6 = v48;
    unint64_t v7 = vp::get_log(log_context_info);
    BOOL v3 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v3)
    {
      if ((v5 & 0x80u) == 0) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = v6;
      }
      p_p = __p;
      if ((v49 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (v8) {
        BOOL v10 = " ";
      }
      else {
        BOOL v10 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unsigned __int16 v51 = p_p;
      __int16 v52 = 2080;
      unsigned __int16 v53 = v10;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_INFO, "%s%send state change", buf, 0x16u);
    }
    if ((char)v49 < 0) {
      operator delete(__p);
    }
  }
  if ((*((_DWORD *)this + 194) - 5) > 1 || !(*((void *)this + 119) | *((void *)this + 114)))
  {
    uint32_t v29 = vp::get_log((vp *)v3);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO)) {
      goto LABEL_56;
    }
    uint64_t v30 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v31 = v49;
    uint64_t v32 = v48;
    uint64_t v24 = vp::get_log(v30);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
      goto LABEL_54;
    }
    if ((v31 & 0x80u) == 0) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = v32;
    }
    int v34 = __p;
    if ((v49 & 0x80u) == 0) {
      int v34 = &__p;
    }
    if (v33) {
      uint64_t v35 = " ";
    }
    else {
      uint64_t v35 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    unsigned __int16 v51 = v34;
    __int16 v52 = 2080;
    unsigned __int16 v53 = v35;
    uint32_t v28 = "%s%sinternal re-configuration is not required";
    goto LABEL_52;
  }
  unsigned __int8 v11 = vp::get_log((vp *)v3);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v13 = v49;
    uint64_t v14 = v48;
    unsigned int v15 = vp::get_log(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if ((v13 & 0x80u) == 0) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = v14;
      }
      uint64_t v17 = __p;
      if ((v49 & 0x80u) == 0) {
        uint64_t v17 = &__p;
      }
      if (v16) {
        uint64_t v18 = " ";
      }
      else {
        uint64_t v18 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      unsigned __int16 v51 = v17;
      __int16 v52 = 2080;
      unsigned __int16 v53 = v18;
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_INFO, "%s%sinternal re-configuration is required", buf, 0x16u);
    }
    if ((char)v49 < 0) {
      operator delete(__p);
    }
  }
  vp::vx::Voice_Processor::handle_configuration_changes(this, v46);
  if (!v46[4])
  {
    *((_DWORD *)this + 194) = 6;
    uint64_t v38 = vp::get_log(v19);
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
    uint32_t v39 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v40 = v49;
    uint64_t v41 = v48;
    uint64_t v42 = vp::get_log(v39);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      goto LABEL_54;
    }
    if ((v40 & 0x80u) == 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v41;
    }
    uint64_t v44 = __p;
    if ((v49 & 0x80u) == 0) {
      uint64_t v44 = &__p;
    }
    if (v43) {
      uint64_t v45 = " ";
    }
    else {
      uint64_t v45 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    unsigned __int16 v51 = v44;
    __int16 v52 = 2080;
    unsigned __int16 v53 = v45;
    uint32_t v28 = "%s%sfailed to handle configuration changes";
    uint64_t v36 = v42;
    os_log_type_t v37 = OS_LOG_TYPE_ERROR;
    goto LABEL_53;
  }
  *((_DWORD *)this + 194) = 5;
  uint64_t v20 = vp::get_log(v19);
  if (!os_log_type_enabled(v20, OS_LOG_TYPE_INFO)) {
    goto LABEL_56;
  }
  int v21 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
  uint64_t v22 = v49;
  uint64_t v23 = v48;
  uint64_t v24 = vp::get_log(v21);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    if ((v22 & 0x80u) == 0) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = v23;
    }
    int v26 = __p;
    if ((v49 & 0x80u) == 0) {
      int v26 = &__p;
    }
    if (v25) {
      uint64_t v27 = " ";
    }
    else {
      uint64_t v27 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    unsigned __int16 v51 = v26;
    __int16 v52 = 2080;
    unsigned __int16 v53 = v27;
    uint32_t v28 = "%s%smanaged to handle configuration changes";
LABEL_52:
    uint64_t v36 = v24;
    os_log_type_t v37 = OS_LOG_TYPE_INFO;
LABEL_53:
    _os_log_impl(&dword_1BB0CE000, v36, v37, v28, buf, 0x16u);
  }
LABEL_54:
  if ((char)v49 < 0) {
    operator delete(__p);
  }
LABEL_56:
  vp::vx::Property_Manager::notify_property_listeners((vp::vx::Voice_Processor *)((char *)this + 968));
  vp::vx::Voice_Processor::components_end_state_change(this);
}

void vp::vx::Voice_Processor::handle_configuration_changes(vp::vx::Voice_Processor *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!(*((void *)this + 119) | *((void *)this + 114)))
  {
LABEL_53:
    *a2 = 0;
    a2[4] = 1;
    return;
  }
  BOOL v3 = this;
  vp::vx::Voice_Processor::log_configuration_changes(this);
  vp::rpb::Server::get_shared_instance((uint64_t)v59);
  *(void *)__n128 __p = v3;
  vp::vx::Voice_Processor::exception_guard((uint64_t)v3, (uint64_t)"disconnect RPB server", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>, (uint64_t)__p);
  vp::objc::ID::~ID((vp::objc::ID *)v59);
  uint64_t v57 = (char *)v3 + 1128;
  char v58 = 1;
  unint64_t v4 = caulk::concurrent::shared_spin_lock::lock((atomic_uint *)v3 + 282);
  log = vp::get_log((vp *)v4);
  uint64_t v54 = v3;
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    uint64_t v7 = HIBYTE(v61);
    uint64_t v8 = *(void *)&__p[8];
    uint64_t v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v8;
      }
      if (v61 >= 0) {
        unsigned __int8 v11 = __p;
      }
      else {
        unsigned __int8 v11 = *(unsigned char **)__p;
      }
      BOOL v12 = v10 == 0;
      uint64_t v13 = " ";
      if (v12) {
        uint64_t v13 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s%sbegin configuration change", buf, 0x16u);
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(*(void **)__p);
    }
  }
  *((_DWORD *)v3 + 195) = 0;
  *(std::chrono::system_clock::time_point *)__n128 __p = std::chrono::system_clock::now();
  uint64_t v56 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)__p);
  vp::vx::Voice_Processor::components_update_time<long>((uint64_t)v3, v56);
  vp::vx::Voice_Processor::components_begin_configuration_changes(v3);
  vp::vx::Voice_Processor::dsp_node_factory_update_time((uint64_t)v3, &v56);
  uint64_t v14 = 0;
  unsigned int v15 = (char *)v3 + 888;
  uint64_t v16 = (char *)v3 + 928;
  uint64_t v17 = vp::domains(void)::s_domains;
  unsigned __int16 v53 = (char *)v3 + 928;
  while (1)
  {
    uint64_t v18 = v17[v14];
    uint64_t v19 = (uint64_t)(v18 ? v16 : v15);
    if (*(void *)(v19 + 24)) {
      break;
    }
LABEL_37:
    if (++v14 == 2)
    {
      vp::vx::Voice_Processor::components_end_configuration_changes<>((uint64_t)v3);
      *((_DWORD *)v3 + 195) = 1;
      uint64_t v35 = vp::get_log(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
        uint64_t v37 = HIBYTE(v61);
        uint64_t v38 = *(void *)&__p[8];
        uint32_t v39 = vp::get_log(v36);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          if ((v37 & 0x80u) == 0) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = v38;
          }
          if (v61 >= 0) {
            uint64_t v41 = __p;
          }
          else {
            uint64_t v41 = *(unsigned char **)__p;
          }
          BOOL v12 = v40 == 0;
          uint64_t v42 = " ";
          if (v12) {
            uint64_t v42 = "";
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v41;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v42;
          _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_DEFAULT, "%s%send configuration change", buf, 0x16u);
        }
        if (SHIBYTE(v61) < 0) {
          operator delete(*(void **)__p);
        }
        BOOL v3 = v54;
      }
      std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v57);
      vp::rpb::Server::get_shared_instance((uint64_t)v55);
      *(void *)__n128 __p = v55;
      *(void *)&__p[8] = v3;
      vp::vx::Voice_Processor::exception_guard((uint64_t)v3, (uint64_t)"connect RPB server", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>, (uint64_t)__p);
      vp::objc::ID::~ID((vp::objc::ID *)v55);
      goto LABEL_53;
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::clear(v19);
  vp::vx::Voice_Processor::components_begin_configuration_change<vp::Domain>((uint64_t)v3, v18);
  v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v21 = vp::vx::Voice_Processor::build_dsp(v3, v18);
  if (a2[4])
  {
    v22.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v23 = vp::get_log((vp *)v22.__d_.__rep_);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = v17;
      uint64_t v25 = a2;
      int v26 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, buf);
      uint64_t v27 = v66;
      uint64_t v28 = *(void *)&buf[8];
      uint32_t v29 = vp::get_log(v26);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        if ((v27 & 0x80u) == 0) {
          uint64_t v30 = v27;
        }
        else {
          uint64_t v30 = v28;
        }
        uint64_t v31 = buf;
        if ((v66 & 0x80u) != 0) {
          uint64_t v31 = *(unsigned char **)buf;
        }
        BOOL v12 = v30 == 0;
        uint64_t v32 = " ";
        if (v12) {
          uint64_t v32 = "";
        }
        uint64_t v33 = "downlink";
        if (!v18) {
          uint64_t v33 = "uplink";
        }
        *(_DWORD *)__n128 __p = 136315906;
        *(void *)&__p[4] = v31;
        *(_WORD *)&__p[12] = 2080;
        *(void *)&__p[14] = v32;
        __int16 v61 = 2080;
        __int16 v62 = v33;
        __int16 v63 = 2048;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v64 = (v22.__d_.__rep_ - v20.__d_.__rep_) / 1000;
        _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_INFO, "%s%smanaged to build %s DSP in %lld milliseconds", __p, 0x2Au);
      }
      if ((char)v66 < 0) {
        operator delete(*(void **)buf);
      }
      a2 = v25;
      uint64_t v17 = v24;
      uint64_t v16 = v53;
      BOOL v3 = v54;
    }
    vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain>((uint64_t)v3, v18);
    goto LABEL_37;
  }
  uint64_t v43 = vp::get_log(v21);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    uint64_t v44 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, buf);
    uint64_t v45 = v66;
    uint64_t v46 = *(void *)&buf[8];
    char v47 = vp::get_log(v44);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      if ((v45 & 0x80u) == 0) {
        uint64_t v48 = v45;
      }
      else {
        uint64_t v48 = v46;
      }
      if ((v66 & 0x80u) == 0) {
        unsigned __int8 v49 = buf;
      }
      else {
        unsigned __int8 v49 = *(unsigned char **)buf;
      }
      BOOL v12 = v48 == 0;
      int v50 = " ";
      if (v12) {
        int v50 = "";
      }
      *(_DWORD *)__n128 __p = 136315650;
      *(void *)&__p[4] = v49;
      unsigned __int16 v51 = "downlink";
      if (!v18) {
        unsigned __int16 v51 = "uplink";
      }
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = v50;
      __int16 v61 = 2080;
      __int16 v62 = v51;
      _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "%s%sfailed to build %s DSP", __p, 0x20u);
    }
    if ((char)v66 < 0) {
      operator delete(*(void **)buf);
    }
    BOOL v3 = v54;
  }
  uint64_t v52 = *(unsigned int *)a2;
  vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain,vp::vx::Error_Code>((uint64_t)v3, v18, v52);
  vp::vx::Voice_Processor::components_end_configuration_changes<vp::vx::Error_Code>((uint64_t)v3, v52);
  std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v57);
}

void sub_1BB22C6DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor::log_configuration_changes(vp::vx::Voice_Processor *this)
{
  int v5 = 0;
  BOOL v3 = this;
  unint64_t v4 = &v5;
  vp::vx::Voice_Processor::exception_guard((uint64_t)this, (uint64_t)"log configuration changes", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0>, (uint64_t)&v3);
  int v5 = 1;
  BOOL v3 = this;
  unint64_t v4 = &v5;
  return vp::vx::Voice_Processor::exception_guard((uint64_t)this, (uint64_t)"log configuration changes", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0>, (uint64_t)&v3);
}

void vp::vx::Voice_Processor::components_update_time<long>(uint64_t a1, uint64_t a2)
{
  time_t v2 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t vp::vx::Voice_Processor::dsp_node_factory_update_time(uint64_t this, const uint64_t *a2)
{
  uint64_t v2 = *(void *)(this + 1512);
  uint64_t v3 = *(void *)(this + 1520);
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v3)
  {
    uint64_t v6 = v2 + 24 * v3;
    do
    {
      if (!v2) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      this = vp::vx::DSP_Node_Factory::set_time(*(void *)(v2 + 8), a2);
      v2 += 24;
    }
    while (v2 != v6);
  }
  return this;
}

void vp::vx::Voice_Processor::components_begin_configuration_change<vp::Domain>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

vp::vx::Voice_Processor *vp::vx::Voice_Processor::build_dsp(vp::vx::Voice_Processor *this, int a2)
{
  if (a2 == 1) {
    vp::vx::Voice_Processor::build_downlink_dsp(this);
  }
  if (!a2) {
    vp::vx::Voice_Processor::build_uplink_dsp(this);
  }
  return this;
}

void vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain,vp::vx::Error_Code>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    uint64_t v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 144))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void vp::vx::Voice_Processor::components_end_configuration_changes<vp::vx::Error_Code>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 136))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void vp::vx::Voice_Processor::components_end_configuration_changes<>(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 520);
  for (char i = *(uint64_t **)(a1 + 528); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    BOOL v4 = (std::__shared_weak_count *)v1[1];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 112))(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void vp::vx::Voice_Processor::build_uplink_dsp(vp::vx::Voice_Processor *this)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 300);
  if (v2)
  {
    vp::vx::io::Graph::notify(v2, 1, v71);
    if (!v71[48]) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v71);
    }
    uint64_t v3 = *((void *)this + 300);
    *((void *)this + 30std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  BOOL v4 = (std::pmr *)std::string::basic_string[abi:ne180100]<0>(__p, "UL");
  uint64_t default_resource = std::pmr::get_default_resource(v4);
  vp::vx::io::Graph_Builder::Graph_Builder(v71, 0, __p, default_resource);
  if (v70 < 0) {
    operator delete(__p[0]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1192, v39);
  long long v68 = v39[0];
  v39[0] = 0uLL;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v71, &v68);
  if (*((void *)&v68 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
  }
  if (*((void *)&v39[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39[0] + 1));
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1256, v39);
  long long v67 = v39[0];
  v39[0] = 0uLL;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v71, &v67);
  if (*((void *)&v67 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v67 + 1));
  }
  if (*((void *)&v39[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39[0] + 1));
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1136, v39);
  long long v66 = v39[0];
  if (*((void *)&v39[0] + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39[0] + 1) + 16), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::set_parameter_exchange((uint64_t)v71, (uint64_t *)&v66);
  if (*((void *)&v66 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
  }
  if (*((void *)&v39[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39[0] + 1));
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1376, v39);
  long long v65 = v39[0];
  v39[0] = 0uLL;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v71, &v65);
  if (*((void *)&v65 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v65 + 1));
  }
  if (*((void *)&v39[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39[0] + 1));
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1440, v39);
  long long v64 = v39[0];
  v39[0] = 0uLL;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v71, &v64);
  if (*((void *)&v64 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
  }
  if (*((void *)&v39[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39[0] + 1));
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1320, v39);
  long long v63 = v39[0];
  if (*((void *)&v39[0] + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39[0] + 1) + 16), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::set_property_exchange((uint64_t)v71, (uint64_t *)&v63);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
  }
  if (*((void *)&v39[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39[0] + 1));
  }
  uint64_t v6 = *((void *)this + 303);
  *(void *)&long long v62 = *((void *)this + 302);
  *((void *)&v62 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = vp::vx::io::Graph_Builder::add_node((uint64_t)v71, &v62);
  if (*((void *)&v62 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
  }
  *(void *)&v39[0] = 0;
  uint64_t v8 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v39);
  uint64_t v9 = v8[1];
  *(void *)&long long v61 = *v8;
  *((void *)&v61 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v38 = vp::vx::io::Graph_Builder::add_node((uint64_t)v71, &v61);
  if (*((void *)&v61 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
  }
  *(void *)&v39[0] = 1;
  uint64_t v10 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v39);
  uint64_t v11 = v10[1];
  *(void *)&long long v60 = *v10;
  *((void *)&v60 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v37 = vp::vx::io::Graph_Builder::add_node((uint64_t)v71, &v60);
  if (*((void *)&v60 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
  }
  *(void *)&v39[0] = 2;
  BOOL v12 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v39);
  uint64_t v13 = v12[1];
  *(void *)&long long v59 = *v12;
  *((void *)&v59 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = vp::vx::io::Graph_Builder::add_node((uint64_t)v71, &v59);
  if (*((void *)&v59 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
  }
  *(void *)&v39[0] = 0;
  unsigned int v15 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v39);
  uint64_t v16 = v15[1];
  *(void *)&long long v58 = *v15;
  *((void *)&v58 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_port((uint64_t)v71, v7, 0, &v58);
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  *(void *)&v39[0] = 1;
  uint64_t v17 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v39);
  uint64_t v18 = v17[1];
  *(void *)&long long v57 = *v17;
  *((void *)&v57 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_port((uint64_t)v71, v7, 1, &v57);
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  *(void *)&v39[0] = 0x200000004;
  uint64_t v19 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v39);
  uint64_t v20 = v19[1];
  *(void *)&long long v56 = *v19;
  *((void *)&v56 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_port((uint64_t)v71, v14 | 0x100000000, 0, &v56);
  if (*((void *)&v56 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v56 + 1));
  }
  uint64_t v21 = *((void *)this + 292);
  uint64_t v22 = *((void *)this + 293);
  if (v22)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    *((void *)&v55 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v22;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *((void *)&v55 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  }
  *(void *)&long long v55 = v21;
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v71, v7 | 0x100000000, 0, v38, 0, &v55);
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  *(void *)&long long v54 = v21;
  *((void *)&v54 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v71, v7 | 0x100000000, 1, v38, 1, &v54);
  if (*((void *)&v54 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
  }
  *(void *)&long long v53 = v21;
  *((void *)&v53 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = v38 | 0x100000000;
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v71, v23, 0, v37, 0, &v53);
  if (*((void *)&v53 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
  }
  *(void *)&long long v52 = v21;
  *((void *)&v52 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v71, v23, 1, v37, 1, &v52);
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(this, (uint64_t)buf);
  uint64_t v25 = std::pmr::get_default_resource(v24);
  vp::vx::data_flow::Value::Value(v39, v25);
  vp::vx::data_flow::State<void>::get_value((uint64_t)buf, (vp::vx::data_flow::Value *)v39);
  int v26 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v39);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v39);
  vp::vx::data_flow::State<void>::~State((uint64_t)buf);
  if (v26)
  {
    *(void *)&long long v51 = v21;
    *((void *)&v51 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::io::Graph_Builder::add_wire((uint64_t)v71, v23, 2, v37, 2, &v51);
    if (*((void *)&v51 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
    }
  }
  *(void *)&long long v50 = v21;
  *((void *)&v50 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v71, v37 | 0x100000000, 0, v14, 0, &v50);
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  uint64_t v27 = (uint64_t *)*((void *)this + 65);
  for (char i = (uint64_t *)*((void *)this + 66); v27 != i; v27 += 2)
  {
    uint64_t v30 = *v27;
    uint32_t v29 = (std::__shared_weak_count *)v27[1];
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = (*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 184))(v30, 0);
    if (v31)
    {
      uint64_t v48 = v31;
      unsigned __int8 v49 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_node_command((uint64_t)v71, &v48);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
    }
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 192))(v30, 0);
    if (v32)
    {
      uint64_t v46 = v32;
      char v47 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_node_decorator((uint64_t)v71, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
    }
    uint64_t v33 = (*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 200))(v30, 0);
    if (v33)
    {
      uint64_t v44 = v33;
      uint64_t v45 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v71, &v44);
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
    }
    uint64_t v34 = (*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 208))(v30, 0);
    if (v34)
    {
      uint64_t v42 = v34;
      uint64_t v43 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_port_decorator((uint64_t)v71, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
    }
    uint64_t v35 = (*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 216))(v30, 0);
    if (v35)
    {
      uint64_t v40 = v35;
      uint64_t v41 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_wire_decorator((uint64_t)v71, &v40);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  uint64_t v36 = *((void *)this + 2);
  if (v36) {
    dispatch_retain(v36);
  }
  vp::vx::io::Graph_Builder::build(v71);
}

void sub_1BB22D7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)(v17 - 176));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::build_downlink_dsp(vp::vx::Voice_Processor *this)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 313);
  if (v2)
  {
    vp::vx::io::Graph::notify(v2, 1, v94);
    if (!v94[48]) {
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v94);
    }
    uint64_t v3 = *((void *)this + 313);
    *((void *)this + 313) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  BOOL v4 = (std::pmr *)std::string::basic_string[abi:ne180100]<0>(__p, "DL");
  uint64_t default_resource = std::pmr::get_default_resource(v4);
  vp::vx::io::Graph_Builder::Graph_Builder(v94, 1, __p, default_resource);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1192, v95);
  long long v91 = *(_OWORD *)v95;
  *(void *)unsigned __int8 v95 = 0;
  *(void *)&v95[8] = 0;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v94, &v91);
  if (*((void *)&v91 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
  }
  if (*(void *)&v95[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1256, v95);
  long long v90 = *(_OWORD *)v95;
  *(void *)unsigned __int8 v95 = 0;
  *(void *)&v95[8] = 0;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v94, &v90);
  if (*((void *)&v90 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
  }
  if (*(void *)&v95[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1136, v95);
  uint64_t v88 = *(void *)v95;
  unsigned __int16 v89 = *(std::__shared_weak_count **)&v95[8];
  if (*(void *)&v95[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v95[8] + 16), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::set_parameter_exchange((uint64_t)v94, &v88);
  if (v89) {
    std::__shared_weak_count::__release_weak(v89);
  }
  if (*(void *)&v95[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1376, v95);
  long long v87 = *(_OWORD *)v95;
  *(void *)unsigned __int8 v95 = 0;
  *(void *)&v95[8] = 0;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v94, &v87);
  if (*((void *)&v87 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v87 + 1));
  }
  if (*(void *)&v95[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1440, v95);
  long long v86 = *(_OWORD *)v95;
  *(void *)unsigned __int8 v95 = 0;
  *(void *)&v95[8] = 0;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v94, &v86);
  if (*((void *)&v86 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v86 + 1));
  }
  if (*(void *)&v95[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1320, v95);
  uint64_t v84 = *(void *)v95;
  uint64_t v85 = *(std::__shared_weak_count **)&v95[8];
  if (*(void *)&v95[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v95[8] + 16), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::set_property_exchange((uint64_t)v94, &v84);
  if (v85) {
    std::__shared_weak_count::__release_weak(v85);
  }
  if (*(void *)&v95[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
  }
  uint64_t v6 = *((void *)this + 316);
  *(void *)&long long v83 = *((void *)this + 315);
  *((void *)&v83 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = vp::vx::io::Graph_Builder::add_node((uint64_t)v94, &v83);
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  *(void *)unsigned __int8 v95 = 0x100000000;
  uint64_t v8 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v95);
  uint64_t v9 = v8[1];
  *(void *)&long long v82 = *v8;
  *((void *)&v82 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = vp::vx::io::Graph_Builder::add_node((uint64_t)v94, &v82);
  if (*((void *)&v82 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
  }
  *(void *)unsigned __int8 v95 = 0x100000001;
  uint64_t v11 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v95);
  uint64_t v12 = v11[1];
  *(void *)&long long v81 = *v11;
  *((void *)&v81 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v13 = vp::vx::io::Graph_Builder::add_node((uint64_t)v94, &v81);
  if (*((void *)&v81 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
  }
  *(void *)unsigned __int8 v95 = 0x100000002;
  unsigned int v14 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v95);
  uint64_t v15 = v14[1];
  *(void *)&long long v80 = *v14;
  *((void *)&v80 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v16 = vp::vx::io::Graph_Builder::add_node((uint64_t)v94, &v80);
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  *(void *)unsigned __int8 v95 = 0x100000003;
  uint64_t v17 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((void *)this + 188, (uint64_t *)v95);
  uint64_t v18 = v17[1];
  *(void *)&long long v79 = *v17;
  *((void *)&v79 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = vp::vx::io::Graph_Builder::add_node((uint64_t)v94, &v79);
  if (*((void *)&v79 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
  }
  if (*((_DWORD *)this + 66) != 3)
  {
    *(void *)unsigned __int8 v95 = 0x100000000;
    uint64_t v20 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v95);
    uint64_t v21 = v20[1];
    *(void *)&long long v78 = *v20;
    *((void *)&v78 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::io::Graph_Builder::add_port((uint64_t)v94, v16, 1, &v78);
    if (*((void *)&v78 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
    }
    *(void *)unsigned __int8 v95 = 0x100000001;
    uint64_t v22 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v95);
    uint64_t v23 = v22[1];
    *(void *)&long long v77 = *v22;
    *((void *)&v77 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::io::Graph_Builder::add_port((uint64_t)v94, v16, 2, &v77);
    if (*((void *)&v77 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
    }
    *(void *)unsigned __int8 v95 = 0x100000002;
    uint64_t v24 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v95);
    uint64_t v25 = v24[1];
    *(void *)&long long v76 = *v24;
    *((void *)&v76 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::io::Graph_Builder::add_port((uint64_t)v94, v16, 3, &v76);
    if (*((void *)&v76 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v76 + 1));
    }
  }
  *(void *)unsigned __int8 v95 = 0x100000003;
  uint64_t v26 = boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v95);
  uint64_t v28 = *(vp::vx::IO_Port_Factory **)v26;
  uint64_t v27 = *(void *)(v26 + 8);
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL is_enabled = (vp *)vp::vx::IO_Port_Factory::get_is_enabled(v28);
  unsigned int v57 = v16;
  unsigned int v58 = v19;
  if (is_enabled)
  {
    log = vp::get_log(is_enabled);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v31 = v13;
      uint64_t v32 = v27;
      unsigned int v33 = v10;
      unsigned int v34 = v7;
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v95);
      uint64_t v36 = HIBYTE(v96);
      uint64_t v37 = *(void *)&v95[8];
      unsigned int v38 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        if ((v36 & 0x80u) == 0) {
          uint64_t v39 = v36;
        }
        else {
          uint64_t v39 = v37;
        }
        uint64_t v40 = *(uint8_t **)v95;
        if (v96 >= 0) {
          uint64_t v40 = v95;
        }
        if (v39) {
          uint64_t v41 = " ";
        }
        else {
          uint64_t v41 = "";
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = v40;
        __int16 v98 = 2080;
        int v99 = v41;
        _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEFAULT, "%s%sspeaker telemetry input port is enabled!", (uint8_t *)buf, 0x16u);
      }
      if (SHIBYTE(v96) < 0) {
        operator delete(*(void **)v95);
      }
      unsigned int v7 = v34;
      unsigned int v10 = v33;
      uint64_t v27 = v32;
      unsigned int v13 = v31;
      unsigned int v16 = v57;
      unsigned int v19 = v58;
    }
    *(void *)&long long v75 = v28;
    *((void *)&v75 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::io::Graph_Builder::add_port((uint64_t)v94, v19, 1, &v75);
    if (*((void *)&v75 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
    }
  }
  *(void *)unsigned __int8 v95 = 0x300000000;
  uint64_t v42 = (void *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((void *)this + 240, (uint64_t *)v95);
  uint64_t v43 = v42[1];
  *(void *)&long long v74 = *v42;
  *((void *)&v74 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v43;
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = v19;
  vp::vx::io::Graph_Builder::add_port((uint64_t)v94, v19 | 0x100000000, 0, &v74);
  if (*((void *)&v74 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
  }
  uint64_t v45 = *((void *)this + 294);
  uint64_t v46 = *((void *)this + 295);
  if (v46)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    *((void *)&v73 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v46;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *((void *)&v73 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  }
  *(void *)&long long v73 = v45;
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v94, v7 | 0x100000000, 0, v10, 0, &v73);
  if (*((void *)&v73 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
  }
  *(void *)&long long v72 = v45;
  *((void *)&v72 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v94, v10 | 0x100000000, 0, v13, 0, &v72);
  if (*((void *)&v72 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
  }
  *(void *)&long long v71 = v45;
  *((void *)&v71 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v94, v13 | 0x100000000, 0, v16, 0, &v71);
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  *(void *)&long long v70 = v45;
  *((void *)&v70 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v94, v16 | 0x100000000, 0, v44, 0, &v70);
  if (*((void *)&v70 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
  }
  char v47 = (uint64_t *)*((void *)this + 65);
  for (char i = (uint64_t *)*((void *)this + 66); v47 != i; v47 += 2)
  {
    uint64_t v50 = *v47;
    unsigned __int8 v49 = (std::__shared_weak_count *)v47[1];
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 184))(v50, 1);
    if (v51)
    {
      uint64_t v68 = v51;
      uint64_t v69 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_node_command((uint64_t)v94, &v68);
      if (v69) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v69);
      }
    }
    uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 192))(v50, 1);
    if (v52)
    {
      uint64_t v66 = v52;
      long long v67 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_node_decorator((uint64_t)v94, &v66);
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
    }
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 200))(v50, 1);
    if (v53)
    {
      uint64_t v64 = v53;
      long long v65 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v94, &v64);
      if (v65) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
    }
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 208))(v50, 1);
    if (v54)
    {
      uint64_t v62 = v54;
      long long v63 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_port_decorator((uint64_t)v94, &v62);
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
    }
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 216))(v50, 1);
    if (v55)
    {
      uint64_t v60 = v55;
      long long v61 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vp::vx::io::Graph_Builder::add_wire_decorator((uint64_t)v94, &v60);
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
    }
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  if (*((unsigned char *)this + 2592))
  {
    vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 2536, v95);
    long long v59 = *(_OWORD *)v95;
    *(void *)unsigned __int8 v95 = 0;
    *(void *)&v95[8] = 0;
    vp::vx::io::Graph_Builder::add_node_command((uint64_t)v94, &v59);
    if (*((void *)&v59 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
    }
    if (*(void *)&v95[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v95[8]);
    }
  }
  long long v56 = *((void *)this + 2);
  if (v56) {
    dispatch_retain(v56);
  }
  vp::vx::io::Graph_Builder::build(v94);
}

void sub_1BB22E9BC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)(v2 - 256));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 744);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    std::__shared_weak_count::__release_weak(v5);
    *a3 = a2;
    a3[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    *a3 = a2;
    a3[1] = 0;
  }
}

void vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"should wire uplink microphone clip data", 39, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v17);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)&v23, (uint64_t)v22);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State(v22);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v17))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)&v18);
    CFTypeRef v23 = &unk_1F14A1F30;
    LOBYTE(v24) = 0;
    uint64_t v25 = &v23;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v18);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v23, (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v22);
    vp::vx::data_flow::State<void>::~State(v22);
    unsigned int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v23);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State((uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::Voice_Processor::make_weak_state_observer(this, &v18);
    uint64_t v9 = v18;
    uint64_t v8 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v10 = operator new(0x20uLL);
    *unsigned int v10 = &unk_1F14A1F78;
    v10[1] = v9;
    unsigned int v10[2] = v8;
    v21[3] = v10;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v21);
    uint64_t v25 = 0;
    uint64_t v11 = (CFTypeRef *)operator new(0x28uLL);
    *uint64_t v11 = &unk_1F1498B58;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v22);
    uint64_t v25 = v11;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v16, (uint64_t)&v23);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](&v23);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v21);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    vp::vx::data_flow::State<void>::auto_release((uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    int v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    CFTypeRef v13 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v23 = v13;
    int v24 = v12;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v23, (uint64_t)&v23);
    if (v23) {
      CFRelease(v23);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v17);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB22EDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_fade_audio_buffers(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"should fade audio buffers", 25, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v16);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v21);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v16))
  {
    vp::vx::Voice_Processor::get_global_configuration(this, (uint64_t)&v17);
    CFTypeRef v22 = &unk_1F14A1EA0;
    LOBYTE(v23) = 0;
    int v24 = &v22;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v17);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::Voice_Processor::make_weak_state_observer(this, &v17);
    uint64_t v8 = v17;
    unsigned int v7 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = operator new(0x20uLL);
    *uint64_t v9 = &unk_1F14A1EE8;
    v9[1] = v8;
    _OWORD v9[2] = v7;
    uint64_t v20[3] = v9;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v20);
    int v24 = 0;
    unsigned int v10 = (CFTypeRef *)operator new(0x28uLL);
    *unsigned int v10 = &unk_1F1498B58;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v21);
    int v24 = v10;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v15, (uint64_t)&v22);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](&v22);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v21);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v20);
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
    vp::vx::data_flow::State<void>::auto_release((uint64_t)v15);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    int v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    CFTypeRef v12 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v22 = v12;
    int v23 = v11;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v22, (uint64_t)&v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v16);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB22F138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_use_internal_reference(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"should use internal reference", 29, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v18);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v23);
    vp::vx::data_flow::State<void>::State((uint64_t)&v24, (uint64_t)v23);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)&v24);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v24);
    vp::vx::data_flow::State<void>::~State(v23);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v18))
  {
    int v7 = *((_DWORD *)this + 66);
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)&v19);
    CFTypeRef v24 = &unk_1F14A1D38;
    int v25 = v7;
    uint64_t v26 = &v24;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v19);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v24, (uint64_t)v23);
    vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    uint64_t v8 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v24);
    vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)&v24);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v24);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    if (*((unsigned char *)this + 360))
    {
      LOBYTE(v23[0]) = 0;
      vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)this + 16), v23, (uint64_t)&v24);
      vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v24);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v24);
    }
    vp::vx::Voice_Processor::make_weak_state_observer(this, &v19);
    uint64_t v10 = v19;
    uint64_t v9 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = operator new(0x20uLL);
    *int v11 = &unk_1F14A1D80;
    v11[1] = v10;
    void v11[2] = v9;
    v22[3] = v11;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v22);
    uint64_t v26 = 0;
    CFTypeRef v12 = (CFTypeRef *)operator new(0x28uLL);
    CFTypeRef *v12 = &unk_1F1498B58;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v12 + 1), (uint64_t)v23);
    uint64_t v26 = v12;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v17, (uint64_t)&v24);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](&v24);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v23);
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::~__value_func[abi:ne180100](v22);
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    vp::vx::data_flow::State<void>::auto_release((uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    int v13 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v24 = v14;
    int v25 = v13;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v24, (uint64_t)&v24);
    if (v24) {
      CFRelease(v24);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v18);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB22F504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_app_bundle_id(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"application bundle ID", 21, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v21);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v26);
    vp::vx::data_flow::State<void>::State((uint64_t)&v29, (uint64_t)v26);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)&v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v29);
    vp::vx::data_flow::State<void>::~State(v26);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v21))
  {
    uint64_t v8 = *((void *)this + 57);
    uint64_t v7 = *((void *)this + 58);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)69>((uint64_t)this + 8, (uint64_t)v23);
    CFTypeRef v29 = &unk_1F14A0C98;
    uint64_t v30 = v8;
    uint64_t v31 = v7;
    uint64_t v32 = &v29;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v29, (uint64_t)v26);
    vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)v26);
    vp::vx::data_flow::State<void>::~State(v26);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v29);
    vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)v23);
    if (*((_DWORD *)this + 66) == 3)
    {
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.FaceTime", 18, 0x8000100u, 0);
      CFStringRef v22 = v9;
      if (!v9)
      {
LABEL_36:
        uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "Could not construct");
      }
    }
    else
    {
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.facetime", 18, 0x8000100u, 0);
      CFStringRef v22 = v9;
      if (!v9) {
        goto LABEL_36;
      }
    }
    if (_os_feature_enabled_impl() && !*((_DWORD *)this + 66))
    {
      CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.mobilephone", 21, 0x8000100u, 0);
      CFStringRef v10 = v15;
      if (!v15)
      {
        uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Could not construct");
      }
      CFRetain(v15);
      char v11 = 0;
    }
    else
    {
      CFStringRef v10 = 0;
      char v11 = 1;
    }
    CFRetain(v9);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)55>((uint64_t)this + 8, (uint64_t)v23);
    if ((v11 & 1) == 0) {
      CFRetain(v10);
    }
    CFRetain(v9);
    if ((v11 & 1) == 0) {
      CFRetain(v10);
    }
    CFRetain(v9);
    CFTypeRef v12 = (CFTypeRef *)operator new(0x20uLL);
    CFTypeRef *v12 = &unk_1F14A0CE0;
    v12[1] = this;
    if ((v11 & 1) == 0) {
      CFRetain(v10);
    }
    _OWORD v12[2] = v10;
    CFRetain(v9);
    void v12[3] = v9;
    uint64_t v32 = v12;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
    int v28 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v29, (uint64_t)v26);
    vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)v26);
    vp::vx::data_flow::State<void>::~State(v26);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v29);
    CFRelease(v9);
    if ((v11 & 1) == 0) {
      CFRelease(v10);
    }
    CFRelease(v9);
    if ((v11 & 1) == 0) {
      CFRelease(v10);
    }
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)v23);
    CFRelease(v9);
    if ((v11 & 1) == 0)
    {
      CFRelease(v10);
      CFRelease(v10);
    }
    CFRelease(v9);
    vp::vx::data_flow::State<void>::~State((uint64_t)v24);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    int v13 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v29 = v14;
    LODWORD(v3std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v13;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v29, (uint64_t)&v29);
    if (v29) {
      CFRelease(v29);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v21);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB22FA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
  {
    __cxa_free_exception(v21);
    applesauce::CF::StringRef::~StringRef(&a16);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a20);
    std::recursive_mutex::unlock(v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a13);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_configuration_context(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  CFTypeRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"configuration context", 21, 0x8000100u, 0);
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &v11);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)&v96);
    vp::vx::data_flow::State<void>::State((uint64_t)&v61, (uint64_t)&v96);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v61);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v61);
    vp::vx::data_flow::State<void>::~State(&v96);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)55>((uint64_t)this + 8, (uint64_t)v58);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)56>((uint64_t)this + 8, (uint64_t)v56);
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"vp_chat_flavor", 14, 0x8000100u, 0);
    if (!cf)
    {
      CFStringRef v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v10, "Could not construct");
    }
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>((uint64_t)this, &cf, (uint64_t)v55);
    CFTypeRef v61 = &unk_1F14A0DD8;
    LOBYTE(id) = 0;
    uint64_t v66 = &v61;
    v60[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v56);
    v60[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v55);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v61, (uint64_t)&v96);
    vp::vx::data_flow::State<void>::State((uint64_t)v59, (uint64_t)&v96);
    vp::vx::data_flow::State<void>::~State(&v96);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v61);
    vp::vx::data_flow::State<void>::State((uint64_t)v57, (uint64_t)v59);
    vp::vx::data_flow::State<void>::~State((uint64_t)v59);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)10>((uint64_t)this + 8, (uint64_t)v53);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)16>((uint64_t)this + 8, (uint64_t)v52);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)17>((uint64_t)this + 8, (uint64_t)v51);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)18>((uint64_t)this + 8, (uint64_t)v50);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)19>((uint64_t)this + 8, (uint64_t)v49);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>((uint64_t)this + 8, (uint64_t)v48);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)36>((uint64_t)this + 8, (uint64_t)v47);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)37>((uint64_t)this + 8, (uint64_t)v46);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)38>((uint64_t)this + 8, (uint64_t)v45);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)41>((uint64_t)this + 8, (uint64_t)v44);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)42>((uint64_t)this + 8, (uint64_t)v43);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)43>((uint64_t)this + 8, (uint64_t)v42);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)44>((uint64_t)this + 8, (uint64_t)v41);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)74>((uint64_t)this + 8, (uint64_t)v40);
    vp::vx::Voice_Processor::get_spatial_head_tracking_enabled(this, (uint64_t)v39);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)77>((uint64_t)this + 8, (uint64_t)v38);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)85>((uint64_t)this + 8, (uint64_t)v37);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)0>((uint64_t)this + 8, (uint64_t)v36);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)1>((uint64_t)this + 8, (uint64_t)v35);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)58>((uint64_t)this + 8, (uint64_t)v34);
    vp::vx::Voice_Processor::get_spatial_mode(this, (uint64_t)v33);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>((uint64_t)this + 8, (uint64_t)v31);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v31, (uint64_t)this + 16, (uint64_t)v32);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)23>((uint64_t)this + 8, (uint64_t)v29);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v29, (uint64_t)this + 16, (uint64_t)v30);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)48>((uint64_t)this + 8, (uint64_t)v27);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v27, (uint64_t)this + 16, (uint64_t)v28);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)49>((uint64_t)this + 8, (uint64_t)v25);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v25, (uint64_t)this + 16, (uint64_t)v26);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>((uint64_t)this + 8, (uint64_t)v23);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v23, (uint64_t)this + 16, (uint64_t)v24);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)66>((uint64_t)this + 8, (uint64_t)v22);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)67>((uint64_t)this + 8, (uint64_t)v21);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)59>((uint64_t)this + 8, (uint64_t)v20);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)86>((uint64_t)this + 8, (uint64_t)v19);
    vp::vx::Voice_Processor::get_other_audio_advanced_ducking_enabled(this, (uint64_t)v18);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)88>((uint64_t)this + 8, (uint64_t)v17);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)89>((uint64_t)this + 8, (uint64_t)v16);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)90>((uint64_t)this + 8, (uint64_t)v15);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)91>((uint64_t)this + 8, (uint64_t)v14);
    __int16 v96 = &unk_1F14A0D28;
    char v97 = 0;
    __int16 v98 = &v96;
    LODWORD(v6boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v58);
    HIDWORD(v6boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v57);
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v53);
    int v63 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v52);
    int v64 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v51);
    int v65 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v50);
    LODWORD(v66) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v49);
    HIDWORD(v66) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v48);
    int v67 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v47);
    int v68 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v46);
    int v69 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v45);
    int v70 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v44);
    int v71 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v43);
    int v72 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v42);
    int v73 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v41);
    int v74 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v40);
    int v75 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v39);
    int v76 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v38);
    int v77 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v37);
    int v78 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v36);
    int v79 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v35);
    int v80 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v34);
    int v81 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v33);
    int v82 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v32);
    int v83 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v30);
    int v84 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v28);
    int v85 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
    int v86 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
    int v87 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    int v88 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
    int v89 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
    int v90 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    int v91 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    int v92 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    int v93 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    int v94 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    int v95 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v96, (uint64_t)v59);
    vp::vx::data_flow::State<void>::State((uint64_t)v60, (uint64_t)v59);
    vp::vx::data_flow::State<void>::~State(v59);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v96);
    vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v60);
    vp::vx::data_flow::State<void>::~State((uint64_t)v60);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v21);
    vp::vx::data_flow::State<void>::~State((uint64_t)v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)v24);
    vp::vx::data_flow::State<void>::~State((uint64_t)v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)v28);
    vp::vx::data_flow::State<void>::~State((uint64_t)v27);
    vp::vx::data_flow::State<void>::~State((uint64_t)v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)v32);
    vp::vx::data_flow::State<void>::~State((uint64_t)v31);
    vp::vx::data_flow::State<void>::~State((uint64_t)v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)v34);
    vp::vx::data_flow::State<void>::~State((uint64_t)v35);
    vp::vx::data_flow::State<void>::~State((uint64_t)v36);
    vp::vx::data_flow::State<void>::~State((uint64_t)v37);
    vp::vx::data_flow::State<void>::~State((uint64_t)v38);
    vp::vx::data_flow::State<void>::~State((uint64_t)v39);
    vp::vx::data_flow::State<void>::~State((uint64_t)v40);
    vp::vx::data_flow::State<void>::~State((uint64_t)v41);
    vp::vx::data_flow::State<void>::~State((uint64_t)v42);
    vp::vx::data_flow::State<void>::~State((uint64_t)v43);
    vp::vx::data_flow::State<void>::~State((uint64_t)v44);
    vp::vx::data_flow::State<void>::~State((uint64_t)v45);
    vp::vx::data_flow::State<void>::~State((uint64_t)v46);
    vp::vx::data_flow::State<void>::~State((uint64_t)v47);
    vp::vx::data_flow::State<void>::~State((uint64_t)v48);
    vp::vx::data_flow::State<void>::~State((uint64_t)v49);
    vp::vx::data_flow::State<void>::~State((uint64_t)v50);
    vp::vx::data_flow::State<void>::~State((uint64_t)v51);
    vp::vx::data_flow::State<void>::~State((uint64_t)v52);
    vp::vx::data_flow::State<void>::~State((uint64_t)v53);
    vp::vx::data_flow::State<void>::~State((uint64_t)v57);
    vp::vx::data_flow::State<void>::~State((uint64_t)v55);
    if (cf) {
      CFRelease(cf);
    }
    vp::vx::data_flow::State<void>::~State((uint64_t)v56);
    vp::vx::data_flow::State<void>::~State((uint64_t)v58);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    CFTypeRef v8 = v11;
    if (v11) {
      CFRetain(v11);
    }
    CFTypeRef v61 = v8;
    int id = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v61, (uint64_t)&v61);
    if (v61) {
      CFRelease(v61);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1BB2303F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x418]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x448]);
  std::recursive_mutex::unlock(v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a13);
  applesauce::CF::StringRef::~StringRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1BB2305C8()
{
}

void vp::vx::Voice_Processor::get_global_configuration(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"global configuration", 20, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v15);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)&v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State(v19);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v15))
  {
    uint64_t v8 = *((void *)this + 59);
    uint64_t v7 = *((void *)this + 60);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context(this, (uint64_t)v16);
    CFStringRef v9 = operator new(0x20uLL);
    *CFStringRef v9 = &unk_1F14A0EB0;
    v9[1] = this;
    _OWORD v9[2] = v8;
    void v9[3] = v7;
    CFStringRef v22 = v9;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    int v10 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    CFTypeRef v11 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v20 = v11;
    int v21 = v10;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v20, (uint64_t)&v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB230838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_preferred_io_cycle_usage(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"preferred I/O cycle usage", 25, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_global_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A0F60;
    LOBYTE(v18) = 0;
    uint64_t v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB230AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_SRC_algorithm(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink SRC algorithm", 20, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A13F8;
    LOBYTE(v18) = 0;
    uint64_t v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB230DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_SRC_algorithm(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"downlink SRC algorithm", 22, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_downlink_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1A48;
    LOBYTE(v18) = 0;
    uint64_t v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23105C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_SRC_quality(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink SRC quality", 18, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1440;
    LOBYTE(v18) = 0;
    uint64_t v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23130C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_SRC_quality(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"downlink SRC quality", 20, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_downlink_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1A90;
    LOBYTE(v18) = 0;
    uint64_t v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB2315BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_wire_storage_capacity(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink wire storage capacity (milliseconds)", 43, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)5>((uint64_t)this + 8, (uint64_t)v14);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)48>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v19 = &unk_1F14A1488;
    LOBYTE(v2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    int v21 = &v19;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    int v18 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v19 = v9;
    int v20 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v19, (uint64_t)&v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_wire_storage_capacity(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"downlink wire storage capacity (milliseconds)", 45, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)6>((uint64_t)this + 8, (uint64_t)v14);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)49>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v19 = &unk_1F14A1AD8;
    LOBYTE(v2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    int v21 = &v19;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    int v18 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v19 = v9;
    int v20 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v19, (uint64_t)&v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB231B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_client_sample_rate(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = "downlink";
  if (!a2) {
    uint64_t v6 = "uplink";
  }
  applesauce::CF::make_StringRef(@"%s client sample rate (Hz)", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v17);
  int v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v21);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v17))
  {
    uint64_t v10 = a1 + 8;
    uint64_t v11 = a1 + 64;
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)48>(v10, (uint64_t)v18);
    if (a2) {
      CFTypeRef v12 = &unk_1F14A0FF0;
    }
    else {
      CFTypeRef v12 = &unk_1F14A0FA8;
    }
    CFTypeRef v22 = v12;
    LOBYTE(v23) = 0;
    CFTypeRef v24 = &v22;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    vp::vx::data_flow::State_Manager::create_state(v11, (uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    int v13 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    int v14 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    CFTypeRef v15 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v22 = v15;
    int v23 = v14;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v22, (uint64_t)&v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v17);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB231DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_client_sample_rate_preference(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"client sample rate preference (Hz)", 34, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_global_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1038;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23209C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_configuration(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink configuration", 20, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v15);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  uint64_t v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)&v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State(v19);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v15))
  {
    uint64_t v8 = *((void *)this + 59);
    uint64_t v7 = *((void *)this + 60);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context(this, (uint64_t)v16);
    CFTypeRef v9 = operator new(0x20uLL);
    *CFTypeRef v9 = &unk_1F14A10E8;
    v9[1] = this;
    _OWORD v9[2] = v8;
    void v9[3] = v7;
    CFTypeRef v22 = v9;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    int v10 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    CFTypeRef v11 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v20 = v11;
    int v21 = v10;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v20, (uint64_t)&v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_configuration(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = "hardware";
  if (a2 == 1) {
    uint64_t v6 = "echo";
  }
  if (a2 == 2) {
    uint64_t v6 = "content";
  }
  applesauce::CF::make_StringRef(@"uplink %s DSP configuration", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v17);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v21);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v17))
  {
    uint64_t v11 = *(void *)(a1 + 472);
    uint64_t v10 = *(void *)(a1 + 480);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v18);
    CFTypeRef v12 = operator new(0x28uLL);
    void *v12 = &unk_1F14A1198;
    v12[1] = a1;
    _OWORD v12[2] = v11;
    void v12[3] = v10;
    *((_DWORD *)v12 + 8) = a2;
    CFTypeRef v24 = v12;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    int v13 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v22 = v14;
    int v23 = v13;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v22, (uint64_t)&v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v17);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  if (cf) {
    CFRelease(cf);
  }
}

{
  const char *v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  CFTypeRef v14;
  CFTypeRef cf;
  unsigned char v16[24];
  unsigned char v17[24];
  unsigned char v18[24];
  unsigned char v19[28];
  int id;
  unsigned char v21[24];
  CFTypeRef v22;
  int v23;
  void *v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 2) {
    uint64_t v6 = "voice mix";
  }
  else {
    uint64_t v6 = off_1E6237B38[a2 - 1];
  }
  applesauce::CF::make_StringRef(@"downlink %s DSP configuration", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v17);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v21);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v17))
  {
    uint64_t v11 = *(void *)(a1 + 472);
    uint64_t v10 = *(void *)(a1 + 480);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v18);
    CFTypeRef v12 = operator new(0x28uLL);
    void *v12 = &unk_1F14A1730;
    v12[1] = a1;
    _OWORD v12[2] = v11;
    void v12[3] = v10;
    *((_DWORD *)v12 + 8) = a2;
    CFTypeRef v24 = v12;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    int v13 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v22 = v14;
    int v23 = v13;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v22, (uint64_t)&v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v17);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_configuration_options(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = "hardware";
  if (a2 == 1) {
    uint64_t v6 = "echo";
  }
  if (a2 == 2) {
    uint64_t v6 = "content";
  }
  applesauce::CF::make_StringRef(@"uplink %s DSP configuration options", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v17);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v21);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v17))
  {
    uint64_t v11 = *(void *)(a1 + 472);
    uint64_t v10 = *(void *)(a1 + 480);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v18);
    CFTypeRef v12 = operator new(0x28uLL);
    void *v12 = &unk_1F14A11E0;
    v12[1] = a1;
    _OWORD v12[2] = v11;
    void v12[3] = v10;
    *((_DWORD *)v12 + 8) = a2;
    CFTypeRef v24 = v12;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    int v13 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v22 = v14;
    int v23 = v13;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v22, (uint64_t)&v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v17);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  if (cf) {
    CFRelease(cf);
  }
}

{
  const char *v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  CFTypeRef v14;
  CFTypeRef cf;
  unsigned char v16[24];
  unsigned char v17[24];
  unsigned char v18[24];
  unsigned char v19[28];
  int id;
  unsigned char v21[24];
  CFTypeRef v22;
  int v23;
  void *v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 2) {
    uint64_t v6 = "voice mix";
  }
  else {
    uint64_t v6 = off_1E6237B38[a2 - 1];
  }
  applesauce::CF::make_StringRef(@"downlink %s DSP configuration options", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v17);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v21);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v17))
  {
    uint64_t v11 = *(void *)(a1 + 472);
    uint64_t v10 = *(void *)(a1 + 480);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v18);
    CFTypeRef v12 = operator new(0x28uLL);
    void *v12 = &unk_1F14A1778;
    v12[1] = a1;
    _OWORD v12[2] = v11;
    void v12[3] = v10;
    *((_DWORD *)v12 + 8) = a2;
    CFTypeRef v24 = v12;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    int v13 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v22 = v14;
    int v23 = v13;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v22, (uint64_t)&v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v17);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB232904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_block_size(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = "hardware";
  if (a2 == 1) {
    uint64_t v6 = "echo";
  }
  if (a2 == 2) {
    uint64_t v6 = "content";
  }
  applesauce::CF::make_StringRef(@"uplink %s DSP block size", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v19);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v30);
    vp::vx::data_flow::State<void>::State((uint64_t)&v37, (uint64_t)&v30);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v19, (uint64_t)&v37);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v37);
    vp::vx::data_flow::State<void>::~State(&v30);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v19))
  {
    if (a2 == 2)
    {
      uint64_t v13 = *(void *)(a1 + 552);
      vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v34);
      vp::vx::Voice_Processor::get_block_size(v29, a1, 1);
      vp::vx::Voice_Processor::get_sample_rate(a1, 2, (uint64_t)v36);
      CFTypeRef v37 = &unk_1F14A1320;
      uint64_t v38 = v13;
      uint64_t v39 = &v37;
      v35[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v34);
      v35[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
      v35[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v36);
      vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v37, (uint64_t)&v30);
      vp::vx::data_flow::State<void>::State((uint64_t)&v25, (uint64_t)&v30);
      vp::vx::data_flow::State<void>::~State(&v30);
      std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v37);
      vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)&v25);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v25);
      vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)&v21);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
      CFTypeRef v14 = (uint64_t *)v36;
    }
    else
    {
      if (a2 == 1)
      {
        int v21 = *(const void **)(a1 + 552);
        CFTypeRef v22 = 0;
        int v23 = 0;
        uint64_t v24 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, *(const void **)(a1 + 496), *(void *)(a1 + 504), (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2);
        vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v35);
        vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v20);
        uint64_t v25 = v21;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 2);
        uint64_t v30 = v25;
        __n128 __p = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v26, (uint64_t)v27, (v27 - (unsigned char *)v26) >> 2);
        uint64_t v39 = 0;
        uint64_t v10 = (CFTypeRef *)operator new(0x28uLL);
        CFTypeRef v12 = v30;
        uint64_t v11 = __p;
        *uint64_t v10 = &unk_1F14A12D8;
        v10[1] = v12;
        void v10[3] = 0;
        void v10[4] = 0;
        unsigned int v10[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10 + 2, v11, (uint64_t)v32, (v32 - (unsigned char *)v11) >> 2);
        uint64_t v39 = v10;
        v36[6] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v35);
        v36[7] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v37, (uint64_t)v34);
        vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)v34);
        vp::vx::data_flow::State<void>::~State(v34);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v37);
        if (__p)
        {
          uint64_t v32 = __p;
          operator delete(__p);
        }
        if (v26)
        {
          uint64_t v27 = v26;
          operator delete(v26);
        }
        vp::vx::data_flow::State<void>::State((uint64_t)v36, (uint64_t)v29);
        vp::vx::data_flow::State<void>::~State((uint64_t)v29);
        vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)v36);
        vp::vx::data_flow::State<void>::~State((uint64_t)v36);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v35);
        if (v22)
        {
          int v23 = v22;
          operator delete(v22);
        }
        goto LABEL_19;
      }
      vp::vx::Voice_Processor::get_uplink_mic_block_size((vp::vx::Voice_Processor *)a1, (uint64_t)v34);
      vp::vx::Voice_Processor::get_uplink_ref_block_size((vp::vx::Voice_Processor *)a1, (uint64_t)v29);
      CFTypeRef v37 = &unk_1F14A1290;
      uint64_t v38 = a1;
      uint64_t v39 = &v37;
      v36[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v34);
      v36[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
      vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v37, (uint64_t)&v30);
      vp::vx::data_flow::State<void>::State((uint64_t)&v25, (uint64_t)&v30);
      vp::vx::data_flow::State<void>::~State(&v30);
      std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v37);
      vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)&v25);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v25);
      vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)&v21);
      CFTypeRef v14 = (uint64_t *)&v21;
    }
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)v34);
LABEL_19:
    vp::vx::data_flow::State<void>::operator=((uint64_t)v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    CFTypeRef v16 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v37 = v16;
    LODWORD(v38) = id;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v37, (uint64_t)&v37);
    if (v37) {
      CFRelease(v37);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v19);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  if (cf) {
    CFRelease(cf);
  }
}

{
  const char *v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  unsigned char *v11;
  CFTypeRef *v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  int v16;
  CFTypeRef v17;
  CFTypeRef cf;
  unsigned char v19[24];
  unsigned char v20[24];
  const void *v21;
  void *v22;
  unsigned char *v23;
  uint64_t v24;
  void v25[3];
  unsigned char v26[24];
  unsigned char v27[24];
  void v28[3];
  unsigned char v29[24];
  const void *v30;
  void *__p;
  unsigned char *v32;
  uint64_t v33;
  unsigned char v34[24];
  uint64_t v35;
  int v36;
  const void *v37;
  void *v38;
  unsigned char *v39;
  uint64_t v40;
  int id;
  int v42;
  int v43;
  int v44;
  CFTypeRef v45;
  uint64_t v46;
  CFTypeRef *v47;
  uint64_t v48;

  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 2) {
    uint64_t v6 = "voice mix";
  }
  else {
    uint64_t v6 = off_1E6237B38[a2 - 1];
  }
  applesauce::CF::make_StringRef(@"downlink %s DSP block size", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v20);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v30);
    vp::vx::data_flow::State<void>::State((uint64_t)&v45, (uint64_t)&v30);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v20, (uint64_t)&v45);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v45);
    vp::vx::data_flow::State<void>::~State(&v30);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v20))
  {
    switch(a2)
    {
      case 1:
        int v21 = *(const void **)(a1 + 560);
        CFTypeRef v22 = 0;
        int v23 = 0;
        uint64_t v24 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, *(const void **)(a1 + 496), *(void *)(a1 + 504), (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2);
        vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)&v35);
        vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v27);
        vp::vx::Voice_Processor::get_sample_rate(a1, 2, (uint64_t)v26);
        vp::vx::Voice_Processor::get_block_size(v25, a1, 2);
        CFTypeRef v37 = v21;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 2);
        uint64_t v30 = v37;
        __n128 __p = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v38, (uint64_t)v39, (v39 - (unsigned char *)v38) >> 2);
        char v47 = 0;
        CFTypeRef v12 = (CFTypeRef *)operator new(0x28uLL);
        CFTypeRef v14 = v30;
        uint64_t v13 = __p;
        const void *v12 = &unk_1F14A1808;
        v12[1] = v14;
        void v12[3] = 0;
        void v12[4] = 0;
        _OWORD v12[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12 + 2, v13, (uint64_t)v32, (v32 - (unsigned char *)v13) >> 2);
        char v47 = v12;
        int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v35);
        uint64_t v42 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
        uint64_t v43 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
        uint64_t v44 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v45, (uint64_t)v34);
        vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)v34);
        vp::vx::data_flow::State<void>::~State(v34);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v45);
        if (__p)
        {
          uint64_t v32 = __p;
          operator delete(__p);
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        vp::vx::data_flow::State<void>::State((uint64_t)v28, (uint64_t)v29);
        vp::vx::data_flow::State<void>::~State((uint64_t)v29);
        vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v28);
        vp::vx::data_flow::State<void>::~State((uint64_t)v28);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v26);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v35);
        if (v22)
        {
          int v23 = v22;
          operator delete(v22);
        }
        break;
      case 2:
        CFTypeRef v15 = *(void *)(a1 + 560);
        vp::vx::Voice_Processor::get_configuration_options(a1, 2, (uint64_t)v34);
        vp::vx::Voice_Processor::get_sample_rate(a1, 3, (uint64_t)v29);
        vp::vx::Voice_Processor::get_block_size(v28, a1, 3);
        uint64_t v45 = &unk_1F14A1850;
        uint64_t v46 = v15;
        char v47 = &v45;
        LODWORD(v35) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v34);
        HIDWORD(v35) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
        uint64_t v36 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v28);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v45, (uint64_t)&v30);
        vp::vx::data_flow::State<void>::State((uint64_t)&v37, (uint64_t)&v30);
        vp::vx::data_flow::State<void>::~State(&v30);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v45);
        vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)&v37);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v37);
        vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)&v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v28);
        vp::vx::data_flow::State<void>::~State((uint64_t)v29);
        uint64_t v11 = v34;
        goto LABEL_16;
      case 3:
        vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)52>(a1 + 8, (uint64_t)v19);
        break;
      default:
        uint64_t v10 = *(void *)(a1 + 560);
        vp::vx::Voice_Processor::get_client_sample_rate(a1, 1, (uint64_t)v29);
        vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v28);
        vp::vx::Voice_Processor::get_block_size(&v35, a1, 1);
        vp::vx::Voice_Processor::get_block_size_is_fixed(a1, 1, (uint64_t)v27);
        vp::vx::Voice_Processor::get_sample_rate(a1, 3, (uint64_t)v26);
        vp::vx::Voice_Processor::get_block_size(v25, a1, 3);
        uint64_t v45 = &unk_1F14A17C0;
        uint64_t v46 = v10;
        char v47 = &v45;
        LODWORD(v37) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
        HIDWORD(v37) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v28);
        LODWORD(v38) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v35);
        HIDWORD(v38) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
        LODWORD(v3boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
        HIDWORD(v3boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v45, (uint64_t)&v30);
        vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)&v30);
        vp::vx::data_flow::State<void>::~State(&v30);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v45);
        vp::vx::data_flow::State<void>::State((uint64_t)v34, (uint64_t)&v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
        vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v34);
        vp::vx::data_flow::State<void>::~State((uint64_t)v34);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v26);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v35);
        vp::vx::data_flow::State<void>::~State((uint64_t)v28);
        uint64_t v11 = v29;
LABEL_16:
        vp::vx::data_flow::State<void>::~State((uint64_t)v11);
        break;
    }
    vp::vx::data_flow::State<void>::operator=((uint64_t)v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    CFTypeRef v16 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
    CFTypeRef v17 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v45 = v17;
    LODWORD(v46) = v16;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v45, (uint64_t)&v45);
    if (v45) {
      CFRelease(v45);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v20);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB232E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
  {
    operator delete(v29);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::get_block_size_is_fixed@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v5 = a2 != 2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v5, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void vp::vx::Voice_Processor::get_sample_rate(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = "hardware";
  if (a2 == 1) {
    uint64_t v6 = "echo";
  }
  if (a2 == 2) {
    uint64_t v6 = "content";
  }
  applesauce::CF::make_StringRef(@"uplink %s DSP sample rate", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v16);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v24);
    vp::vx::data_flow::State<void>::State((uint64_t)&v27, (uint64_t)v24);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)&v27);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v27);
    vp::vx::data_flow::State<void>::~State(v24);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v16))
  {
    if (a2 == 2)
    {
      vp::vx::Voice_Processor::get_client_sample_rate(a1, 0, (uint64_t)v15);
    }
    else
    {
      if (a2 == 1)
      {
        uint64_t v10 = *(void *)(a1 + 552);
        vp::vx::Voice_Processor::get_sample_rate(v21, a1, 0);
        vp::vx::Voice_Processor::get_block_size(v25, a1, 0);
        vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v20);
        vp::vx::Voice_Processor::get_client_sample_rate(a1, 0, (uint64_t)v19);
        vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)67>(a1 + 8, (uint64_t)v18);
        vp::vx::Voice_Processor::get_client_sample_rate_preference((vp::vx::Voice_Processor *)a1, (uint64_t)v17);
        CFTypeRef v27 = &unk_1F14A13B0;
        uint64_t v28 = v10;
        CFTypeRef v29 = &v27;
        v26[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        v26[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
        v26[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
        v26[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
        v26[4] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
        v26[5] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v27, (uint64_t)v24);
        vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v24);
        vp::vx::data_flow::State<void>::~State(v24);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v27);
        vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        uint64_t v11 = v21;
      }
      else
      {
        vp::vx::Voice_Processor::get_uplink_mic_sample_rate((vp::vx::Voice_Processor *)a1, (uint64_t)v22);
        vp::vx::Voice_Processor::get_uplink_ref_sample_rate((vp::vx::Voice_Processor *)a1, (uint64_t)v21);
        CFTypeRef v27 = &unk_1F14A1368;
        uint64_t v28 = a1;
        CFTypeRef v29 = &v27;
        LODWORD(v25[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
        HIDWORD(v25[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v27, (uint64_t)v24);
        vp::vx::data_flow::State<void>::State((uint64_t)v26, (uint64_t)v24);
        vp::vx::data_flow::State<void>::~State(v24);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v27);
        vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v26);
        vp::vx::data_flow::State<void>::~State((uint64_t)v26);
        vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        uint64_t v11 = v22;
      }
      vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    }
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    CFTypeRef v13 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v27 = v13;
    LODWORD(v28) = id;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v27, (uint64_t)&v27);
    if (v27) {
      CFRelease(v27);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v16);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  if (cf) {
    CFRelease(cf);
  }
}

{
  const char *v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  CFTypeRef *v9;
  unsigned char *v10;
  uint64_t v11;
  unsigned char *v12;
  const void *v13;
  void *v14;
  int v15;
  CFTypeRef v16;
  CFTypeRef cf;
  unsigned char v18[24];
  unsigned char v19[24];
  unsigned char v20[24];
  unsigned char v21[24];
  unsigned char v22[24];
  _DWORD v23[6];
  unsigned char v24[24];
  unsigned char v25[24];
  unsigned char v26[24];
  void v27[3];
  int id;
  int v29;
  int v30;
  int v31;
  int v32;
  CFTypeRef v33;
  uint64_t v34;
  CFTypeRef *v35;
  uint64_t v36;

  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 2) {
    uint64_t v6 = "voice mix";
  }
  else {
    uint64_t v6 = off_1E6237B38[a2 - 1];
  }
  applesauce::CF::make_StringRef(@"downlink %s DSP sample rate", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v19);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v26);
    vp::vx::data_flow::State<void>::State((uint64_t)&v33, (uint64_t)v26);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v19, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(v26);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v19))
  {
    switch(a2)
    {
      case 1:
        uint64_t v11 = *(void *)(a1 + 560);
        vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v23);
        vp::vx::Voice_Processor::get_client_sample_rate(a1, 1, (uint64_t)v22);
        vp::vx::Voice_Processor::get_sample_rate(v27, a1, 3);
        vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)67>(a1 + 8, (uint64_t)v21);
        vp::vx::Voice_Processor::get_client_sample_rate_preference((vp::vx::Voice_Processor *)a1, (uint64_t)v20);
        uint64_t v33 = &unk_1F14A1970;
        unsigned int v34 = v11;
        uint64_t v35 = &v33;
        int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
        CFTypeRef v29 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
        uint64_t v30 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
        uint64_t v31 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        uint64_t v32 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v33, (uint64_t)v26);
        vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)v26);
        vp::vx::data_flow::State<void>::~State(v26);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v33);
        vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)v24);
        vp::vx::data_flow::State<void>::~State((uint64_t)v24);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        uint64_t v10 = v27;
        goto LABEL_10;
      case 2:
        vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(a1 + 8, (uint64_t)v24);
        CFTypeRef v13 = &unk_1F14A19B8;
        goto LABEL_13;
      case 3:
        vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(a1 + 8, (uint64_t)v24);
        CFTypeRef v13 = &unk_1F14A1A00;
LABEL_13:
        uint64_t v33 = v13;
        LOBYTE(v34) = 0;
        uint64_t v35 = &v33;
        v23[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v33, (uint64_t)v26);
        vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)v26);
        vp::vx::data_flow::State<void>::~State(v26);
        CFTypeRef v14 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v33);
        vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)&v33);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
        CFTypeRef v12 = v24;
        break;
      default:
        vp::vx::Voice_Processor::get_configuration_options(a1, 0, (uint64_t)v23);
        vp::vx::Voice_Processor::get_client_sample_rate(a1, 1, (uint64_t)v22);
        uint64_t v33 = &unk_1F14A1928;
        LOBYTE(v34) = 0;
        uint64_t v35 = &v33;
        LODWORD(v27[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
        HIDWORD(v27[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v33, (uint64_t)v26);
        vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)v26);
        vp::vx::data_flow::State<void>::~State(v26);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v33);
        vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)v24);
        uint64_t v10 = v24;
LABEL_10:
        vp::vx::data_flow::State<void>::~State((uint64_t)v10);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        CFTypeRef v12 = v23;
        break;
    }
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    CFTypeRef v15 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    CFTypeRef v16 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v33 = v16;
    LODWORD(v34) = v15;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v33, (uint64_t)&v33);
    if (v33) {
      CFRelease(v33);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v19);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a33);
  std::recursive_mutex::unlock(v33);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a15);
  applesauce::CF::StringRef::~StringRef(&a11);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_uplink_mic_ref_sample_time_delta(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink mic-ref sample time delta", 32, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v47);
    vp::vx::data_flow::State<void>::State((uint64_t)&v32, (uint64_t)v47);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v32);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v32);
    vp::vx::data_flow::State<void>::~State(v47);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>((uint64_t)this + 8, (uint64_t)&v32);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)&v32, (uint64_t)this + 16, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v32);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)13>((uint64_t)this + 8, (uint64_t)v28);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)14>((uint64_t)this + 8, (uint64_t)v27);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)15>((uint64_t)this + 8, (uint64_t)v26);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)23>((uint64_t)this + 8, (uint64_t)&v32);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)&v32, (uint64_t)this + 16, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v32);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)28>((uint64_t)this + 8, (uint64_t)v24);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)29>((uint64_t)this + 8, (uint64_t)v23);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)30>((uint64_t)this + 8, (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v23);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v22);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)31>((uint64_t)this + 8, (uint64_t)v19);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)33>((uint64_t)this + 8, (uint64_t)v18);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)32>((uint64_t)this + 8, (uint64_t)v17);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)34>((uint64_t)this + 8, (uint64_t)v16);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)35>((uint64_t)this + 8, (uint64_t)v15);
    uint64_t v7 = *((void *)this + 69);
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v14);
    v47[0] = &unk_1F14A1518;
    v47[1] = v7;
    v47[3] = v47;
    LODWORD(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    HIDWORD(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v28);
    int v34 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
    int v35 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
    int v36 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
    int v37 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
    int v38 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
    int v39 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    int v40 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
    int v41 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
    int v42 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    int v43 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    int v44 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    int v45 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    int v46 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v47, (uint64_t)v31);
    vp::vx::data_flow::State<void>::State((uint64_t)v30, (uint64_t)v31);
    vp::vx::data_flow::State<void>::~State(v31);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v47);
    vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v21);
    vp::vx::data_flow::State<void>::~State((uint64_t)v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)v24);
    vp::vx::data_flow::State<void>::~State((uint64_t)v25);
    vp::vx::data_flow::State<void>::~State((uint64_t)v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)v27);
    vp::vx::data_flow::State<void>::~State((uint64_t)v28);
    vp::vx::data_flow::State<void>::~State((uint64_t)v29);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v32 = v9;
    int id = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v32, (uint64_t)&v32);
    if (v32) {
      CFRelease(v32);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB233888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_mic_ref_delay_milliseconds(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink mic-ref delay (milliseconds)", 35, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_uplink_mic_ref_sample_time_delta(this, (uint64_t)v14);
    vp::vx::Voice_Processor::get_uplink_mic_sample_rate(this, (uint64_t)v13);
    CFTypeRef v19 = &unk_1F14A1560;
    LOBYTE(v2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    int v21 = &v19;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    int v18 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v19 = v8;
    int v20 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v19, (uint64_t)&v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB233BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_ref_audio_ring_buffer_capacity(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink ref audio ring buffer capacity (milliseconds)", 52, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A15A8;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v8;
    int v18 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB233E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_mic_block_size(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink microphone block size (frames)", 37, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v11);
    vp::vx::data_flow::State<void>::State((uint64_t)&v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State(v11);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)9>((uint64_t)this + 8, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v12);
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v12 = v8;
    int v13 = id;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v12, (uint64_t)&v12);
    if (v12) {
      CFRelease(v12);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB234098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_uplink_mic_sample_rate(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink microphone sample rate (Hz)", 34, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A15F0;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v9;
    int v18 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23432C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_ref_block_size(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink reference block size (frames)", 36, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v11);
    vp::vx::data_flow::State<void>::State((uint64_t)&v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State(v11);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)24>((uint64_t)this + 8, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v12);
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v12 = v8;
    int v13 = id;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v12, (uint64_t)&v12);
    if (v12) {
      CFRelease(v12);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB23452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_uplink_ref_sample_rate(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"uplink reference sample rate (Hz)", 33, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)23>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1638;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v9;
    int v18 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB2347C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_configuration(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"downlink configuration", 22, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v15);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)&v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State(v19);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v15))
  {
    uint64_t v8 = *((void *)this + 59);
    uint64_t v7 = *((void *)this + 60);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor::get_configuration_context(this, (uint64_t)v16);
    CFTypeRef v9 = operator new(0x20uLL);
    *CFTypeRef v9 = &unk_1F14A1680;
    v9[1] = this;
    _OWORD v9[2] = v8;
    void v9[3] = v7;
    uint64_t v22 = v9;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    int v10 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    CFTypeRef v11 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v20 = v11;
    int v21 = v10;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v20, (uint64_t)&v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB234A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB234D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB23501C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB235684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    operator delete(v33);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_fft_block_size(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 560);
    CFTypeRef v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v12, *(const void **)(a1 + 496), *(void *)(a1 + 504), (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2);
    vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v10);
    vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v9);
    vp::vx::Voice_Processor::get_block_size(a1, 1, (uint64_t)v8);
    uint64_t v16 = v11;
    __n128 __p = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v12, (uint64_t)v13, (v13 - (unsigned char *)v12) >> 2);
    uint64_t v21 = v16;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, __p, (uint64_t)v18, (v18 - (unsigned char *)__p) >> 2);
    uint64_t v30 = 0;
    BOOL v5 = operator new(0x28uLL);
    uint64_t v7 = v21;
    uint64_t v6 = v22;
    void *v5 = &unk_1F14A1898;
    v5[1] = v7;
    void v5[3] = 0;
    void v5[4] = 0;
    _OWORD v5[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 2, v6, (uint64_t)v23, (v23 - (unsigned char *)v6) >> 2);
    uint64_t v30 = v5;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v10);
    int v27 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v9);
    int v28 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)v29, (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State(v25);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v29);
    if (v22)
    {
      uint64_t v23 = v22;
      operator delete(v22);
    }
    if (__p)
    {
      int v18 = __p;
      operator delete(__p);
    }
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::State((uint64_t)a3, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v8);
    vp::vx::data_flow::State<void>::~State((uint64_t)v9);
    vp::vx::data_flow::State<void>::~State((uint64_t)v10);
    if (v12)
    {
      int v13 = v12;
      operator delete(v12);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    vp::vx::data_flow::State<void>::State((uint64_t)a3);
  }
}

void sub_1BB235A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a2)
  {
    operator delete(v21);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB235F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a20);
  vp::vx::data_flow::State<void>::~State(v27 - 136);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a23);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a26);
  std::recursive_mutex::unlock(v26);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a14);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_block_size_is_fixed(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 2) {
    uint64_t v6 = "voice mix";
  }
  else {
    uint64_t v6 = off_1E6237B38[a2 - 1];
  }
  applesauce::CF::make_StringRef(@"downlink %s DSP block size is fixed", (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v16);
  uint64_t v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  uint64_t v8 = a1 + 128;
  CFTypeRef v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v23);
    vp::vx::data_flow::State<void>::State((uint64_t)&v28, (uint64_t)v23);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)&v28);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v28);
    vp::vx::data_flow::State<void>::~State(v23);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v16))
  {
    switch(a2)
    {
      case 1:
        uint64_t v10 = *(void *)(a1 + 560);
        vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v20);
        vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v19);
        vp::vx::Voice_Processor::get_sample_rate(a1, 2, (uint64_t)v18);
        vp::vx::Voice_Processor::get_block_size(v17, a1, 2);
        CFTypeRef v28 = &unk_1F14A18E0;
        uint64_t v29 = v10;
        uint64_t v30 = &v28;
        int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
        int v25 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
        int v26 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
        int v27 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v28, (uint64_t)v23);
        vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State(v23);
        std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v28);
        vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        uint64_t v11 = (CFTypeRef *)v20;
        break;
      case 3:
        v23[0] = 1;
        goto LABEL_11;
      default:
        v23[0] = 0;
LABEL_11:
        vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), v23, (uint64_t)&v28);
        vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v28);
        uint64_t v11 = &v28;
        break;
    }
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    int v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    CFTypeRef v13 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v28 = v13;
    LODWORD(v2boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = v12;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v28, (uint64_t)&v28);
    if (v28) {
      CFRelease(v28);
    }
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v16);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB2362CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
  {
    vp::vx::data_flow::State<void>::~State((uint64_t)&a20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a23);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a26);
    std::recursive_mutex::unlock(v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a14);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_software_volume_pre_gain_dB(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"downlink software volume pre-gain (dB)", 38, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor::get_downlink_configuration(this, (uint64_t)v14);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)60>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v19 = &unk_1F14A1B20;
    LOBYTE(v2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    uint64_t v21 = &v19;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    int v18 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    int v7 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v19 = v8;
    int v20 = v7;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v19, (uint64_t)&v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB2365E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_spatial_mode(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"spatial mode", 12, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)76>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1B68;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v9;
    int v18 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB236890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_spatial_head_tracking_mode(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"spatial head-tracking mode", 26, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)55>((uint64_t)this + 8, (uint64_t)v14);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)76>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v19 = &unk_1F14A1BB0;
    LOBYTE(v2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
    uint64_t v21 = &v19;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    int v18 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v19, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v19 = v9;
    int v20 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v19, (uint64_t)&v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB236B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_spatial_head_tracking_enabled(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"spatial head-tracking enabled", 29, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)76>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1BF8;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v9;
    int v18 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB236E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_other_audio_advanced_ducking_enabled(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"other audio advanced ducking enabled", 36, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)87>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1C40;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v9;
    int v18 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB2370AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_other_audio_advanced_ducking_level(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"other audio advanced ducking level", 34, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v12);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  uint64_t v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State(v16);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v12))
  {
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)87>((uint64_t)this + 8, (uint64_t)v13);
    CFTypeRef v17 = &unk_1F14A1C88;
    LOBYTE(v18) = 0;
    CFTypeRef v19 = &v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v17, (uint64_t)v16);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State(v16);
    int v7 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v13);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v12, (uint64_t)&v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v17);
    int v8 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v17 = v9;
    int v18 = v8;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v17, (uint64_t)&v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v12);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB237354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_enable_graph_audio_recorders(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  CFTypeRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"enable graph audio recorders", 28, 0x8000100u, 0);
  if (!v33)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v35);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &v33);
  if (v5)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v5 + 6), (uint64_t)v61);
    vp::vx::data_flow::State<void>::State((uint64_t)&v37, (uint64_t)v61);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v35, (uint64_t)&v37);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v37);
    vp::vx::data_flow::State<void>::~State(v61);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v35))
  {
    uint64_t v22 = a2;
    uint64_t v23 = (char *)this + 128;
    CFTypeRef v32 = (std::recursive_mutex *)((char *)this + 184);
    vp::Context::Context((uint64_t)&v37, (uint64_t)this + 264);
    LODWORD(v53) = *((_DWORD *)this + 122);
    BYTE4(v53) = *((unsigned char *)this + 492);
    vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)1>((uint64_t)this + 8, (uint64_t)v36);
    int v31 = (int)v37;
    CFTypeRef v30 = v38;
    __int16 v29 = v39;
    CFTypeRef v28 = v40;
    v60[0] = v41;
    *(void *)((char *)v60 + 7) = *(void *)((char *)&v41 + 7);
    char v27 = HIBYTE(v41);
    CFTypeRef v38 = 0;
    int v40 = 0;
    long long v41 = 0uLL;
    int v26 = v42;
    v59[0] = v43;
    *(void *)((char *)v59 + 7) = *(void *)((char *)&v43 + 7);
    char v25 = HIBYTE(v43);
    int v42 = 0;
    long long v43 = 0uLL;
    uint64_t v24 = v44;
    v58[0] = v45;
    *(void *)((char *)v58 + 7) = *(void *)((char *)&v45 + 7);
    char v6 = HIBYTE(v45);
    int v44 = 0;
    long long v45 = 0uLL;
    __int16 v7 = v46;
    int v8 = __p;
    v57[0] = v48;
    *(void *)((char *)v57 + 7) = *(void *)((char *)&v48 + 7);
    char v9 = HIBYTE(v48);
    __n128 __p = 0;
    long long v48 = 0uLL;
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    char v11 = v52;
    uint64_t v12 = v53;
    CFTypeRef v13 = (char *)operator new(0xD0uLL);
    *(_OWORD *)(v13 + 16boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = *(_OWORD *)((char *)v50 + 9);
    long long v14 = v49;
    *(_OWORD *)(v13 + 15boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v50[0];
    *(void *)CFTypeRef v13 = &unk_1F14A1DC8;
    *((_DWORD *)v13 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v31;
    *((void *)v13 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v30;
    *((_WORD *)v13 + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v29;
    uint64_t v15 = v60[0];
    *((void *)v13 + 4) = v28;
    *((void *)v13 + 5) = v15;
    *(void *)(v13 + 47) = *(void *)((char *)v60 + 7);
    v13[55] = v27;
    uint64_t v16 = v59[0];
    *((void *)v13 + 7) = v26;
    *((void *)v13 + 8) = v16;
    *(void *)(v13 + 7boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = *(void *)((char *)v59 + 7);
    v13[79] = v25;
    uint64_t v17 = v58[0];
    *(void *)(v13 + 95) = *(void *)((char *)v58 + 7);
    *((void *)v13 + 1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v24;
    *((void *)v13 + 1boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v17;
    v13[103] = v6;
    *((_WORD *)v13 + 5boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v7;
    *(void *)(v13 + 127) = *(void *)((char *)v57 + 7);
    uint64_t v18 = v57[0];
    *((void *)v13 + 14) = v8;
    *((void *)v13 + 15) = v18;
    v13[135] = v9;
    *(_OWORD *)(v13 + 136) = v14;
    *((void *)v13 + 23) = v10;
    v13[192] = v11;
    *((void *)v13 + 25) = v12;
    v61[3] = v13;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v36);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v61, (uint64_t)v56);
    vp::vx::data_flow::State<void>::State((uint64_t)v54, (uint64_t)v56);
    vp::vx::data_flow::State<void>::~State(v56);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v61);
    vp::vx::data_flow::State<void>::State((uint64_t)v34, (uint64_t)v54);
    vp::vx::data_flow::State<void>::~State((uint64_t)v54);
    vp::vx::data_flow::State<void>::~State((uint64_t)v36);
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44);
    }
    if (SHIBYTE(v43) < 0) {
      operator delete(v42);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    if (v38) {
      CFRelease(v38);
    }
    vp::vx::data_flow::State<void>::operator=((uint64_t)v35, (uint64_t)v34);
    vp::vx::data_flow::State<void>::~State((uint64_t)v34);
    int v19 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v35);
    CFTypeRef v20 = v33;
    if (v33) {
      CFRetain(v33);
    }
    CFTypeRef v37 = v20;
    LODWORD(v38) = v19;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v23, &v37, (uint64_t)&v37);
    BOOL v4 = v32;
    a2 = v22;
    if (v37) {
      CFRelease(v37);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v35);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v35);
  if (v33) {
    CFRelease(v33);
  }
}

void sub_1BB2377F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::recursive_mutex *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)2>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void vp::vx::Voice_Processor::get_should_connect_to_AUPB(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"connect to AUPB", 15, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  char v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v20, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    char v7 = *((unsigned char *)this + 360);
    vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)0>((uint64_t)this + 8, (uint64_t)v15);
    vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)6>((uint64_t)this + 8, (uint64_t)v14);
    CFTypeRef v20 = &unk_1F14A1E10;
    LOBYTE(v2boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v7;
    uint64_t v22 = &v20;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    int v19 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v20, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    int v8 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    int v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    CFTypeRef v10 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v20 = v10;
    int v21 = v9;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v20, (uint64_t)&v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB237B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_connect_to_RPB(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"connect to RPB", 14, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  BOOL v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  BOOL v5 = (char *)this + 128;
  char v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((void *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v20, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    char v7 = *((unsigned char *)this + 360);
    vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)0>((uint64_t)this + 8, (uint64_t)v15);
    vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)7>((uint64_t)this + 8, (uint64_t)v14);
    CFTypeRef v20 = &unk_1F14A1E58;
    LOBYTE(v2boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v7;
    uint64_t v22 = &v20;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    int v19 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v20, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    int v8 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    int v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    CFTypeRef v10 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v20 = v10;
    int v21 = v9;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((uint64_t)v5, &v20, (uint64_t)&v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB237E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_mic_trim_gains_dsp_property_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  LOBYTE(v17[0]) = 0;
  char v18 = 0;
  vp::Service_Provider::get<vp::services::Mobile_Gestalt,(decltype(nullptr))0>(*((void **)this + 57), __p);
  if (__p[0])
  {
    CFTypeRef cf = 0;
    (*(void (**)(const void **__return_ptr))(*(void *)__p[0] + 16))(v20);
    if (cf) {
      CFRelease(cf);
    }
    if (v20[0])
    {
      applesauce::CF::TypeRef::operator applesauce::CF::DataRef(v20, (applesauce::CF::DataRef *)v19);
      vp::vx::trim_gains_parse_v1(v19, (uint64_t)&v25);
      std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<float>,false>>((uint64_t)v17, &v25);
      if ((_BYTE)v26 && v25.n128_u64[0])
      {
        v25.n128_u64[1] = v25.n128_u64[0];
        operator delete((void *)v25.n128_u64[0]);
      }
      if (v19[0]) {
        CFRelease(v19[0]);
      }
      if (v20[0]) {
        CFRelease(v20[0]);
      }
    }
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, (uint64_t)v17);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)10>((uint64_t)this + 8, (uint64_t)v11);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>((uint64_t)this + 8, (uint64_t)v10);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)20>((uint64_t)this + 8, (uint64_t)v9);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)21>((uint64_t)this + 8, (uint64_t)v8);
  int v5 = v14;
  if (v14)
  {
    long long v7 = *(_OWORD *)__p;
    uint64_t v2 = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
  }
  else
  {
    long long v7 = 0u;
  }
  char v6 = (char *)operator new(0x28uLL);
  *(void *)char v6 = &unk_1F14A1FC0;
  unsigned char v6[8] = 0;
  v6[32] = 0;
  if (v5)
  {
    *(_OWORD *)(v6 + 8) = v7;
    *((void *)v6 + 3) = v2;
    v6[32] = 1;
  }
  int v26 = v6;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v11);
  int v22 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v10);
  int v23 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v9);
  int v24 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v25, (uint64_t)v20);
  vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State(v20);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v25);
  vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  if (v14 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v18)
  {
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
}

void sub_1BB238134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Mobile_Gestalt,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1835496308u>::k_service_type_id, v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    int v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

applesauce::CF::DataRef *applesauce::CF::TypeRef::operator applesauce::CF::DataRef@<X0>(const void **a1@<X0>, applesauce::CF::DataRef *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    CFTypeID v5 = CFGetTypeID(v4);
    if (v5 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
    }
    BOOL v6 = *a1;
    if (v6) {
      CFRetain(v6);
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return applesauce::CF::DataRef::DataRef(a2, v6);
}

void sub_1BB2382F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_ref_port_sensitivity_parameter_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15[4] = *MEMORY[0x1E4F143B8];
  vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*((void **)this + 57), &v9);
  uint64_t v4 = v9;
  if (v9)
  {
    CFTypeID v5 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)36>((uint64_t)this + 8, (uint64_t)v8);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)26>((uint64_t)this + 8, (uint64_t)v7);
    v15[0] = &unk_1F14A2008;
    v15[1] = v4;
    _OWORD v15[2] = v5;
    void v15[3] = v15;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
    int v14 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v15, (uint64_t)cf);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)cf);
    vp::vx::data_flow::State<void>::~State(cf);
    BOOL v6 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v15);
    vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v7);
    vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (!v4)
  {
    cf[0] = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::NumberRef>((vp::vx::Voice_Processor *)((char *)this + 16), cf, (uint64_t)v15);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

void sub_1BB2384A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1634236275u>::k_service_type_id, v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    int v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::NumberRef>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  void v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void vp::vx::Voice_Processor::create_ref_port_volume_limit_curve_dsp_property_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 66)) {
    goto LABEL_2;
  }
  vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*((void **)this + 57), &v10);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>((uint64_t)this + 8, (uint64_t)v9);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)36>((uint64_t)this + 8, (uint64_t)v8);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)26>((uint64_t)this + 8, (uint64_t)v7);
    v17[0] = &unk_1F14A2050;
    v17[1] = v4;
    _OWORD v17[2] = v5;
    void v17[3] = v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v9);
    int v15 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
    int v16 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v17, (uint64_t)cf);
    vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)cf);
    vp::vx::data_flow::State<void>::~State(cf);
    BOOL v6 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v7);
    vp::vx::data_flow::State<void>::~State((uint64_t)v8);
    vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!v4)
  {
LABEL_2:
    cf[0] = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((vp::vx::Voice_Processor *)((char *)this + 16), cf, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

void sub_1BB2387D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  void v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::create_speaker_iv_data_source_ids_dsp_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 8;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>((uint64_t)this + 8, (uint64_t)v8);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)64>((uint64_t)v4, (uint64_t)v7);
  uint64_t v13 = &unk_1F14A2098;
  char v14 = 0;
  int v15 = &v13;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
  int v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v13, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  uint64_t v5 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v5, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::create_speaker_calibration_data_cf_dsp_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 8;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>((uint64_t)this + 8, (uint64_t)v8);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)65>((uint64_t)v4, (uint64_t)v7);
  uint64_t v13 = &unk_1F14A20E0;
  char v14 = 0;
  int v15 = &v13;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
  int v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v13, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  uint64_t v5 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v5, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void vp::vx::Voice_Processor::create_camera_noise_mitigation_is_required_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  vp::Service_Provider::get<vp::services::Core_Media,(decltype(nullptr))0>(*((void **)this + 57), &v6);
  if (v6 && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = v6;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v4 + 32))(&v5, v4);
    CFTypeRef cf = v5;
    CFTypeRef v5 = 0;
    vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification((uint64_t *)this + 2, &cf);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  v9[0] = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)this + 16), v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB238CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Core_Media,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"smrc", v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    int v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

void vp::vx::Voice_Processor::create_personal_audio_HLC_product_id_parameter_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 66)) {
    goto LABEL_2;
  }
  vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*((void **)this + 57), &v10);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>((uint64_t)this + 8, (uint64_t)v9);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)36>((uint64_t)this + 8, (uint64_t)v8);
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)26>((uint64_t)this + 8, (uint64_t)v7);
    v17[0] = &unk_1F14A22A0;
    v17[1] = v4;
    _OWORD v17[2] = v5;
    void v17[3] = v17;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v9);
    int v15 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
    int v16 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v17, (uint64_t)cf);
    vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)cf);
    vp::vx::data_flow::State<void>::~State(cf);
    BOOL v6 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v7);
    vp::vx::data_flow::State<void>::~State((uint64_t)v8);
    vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!v4)
  {
LABEL_2:
    cf[0] = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::NumberRef>((vp::vx::Voice_Processor *)((char *)this + 16), cf, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

void sub_1BB238F90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor::create_metric_reporter_ids_dsp_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)69>((uint64_t)this + 8, (uint64_t)v6);
  uint64_t v10 = &unk_1F14A22E8;
  char v11 = 0;
  int v12 = &v10;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v6);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  uint64_t v4 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

uint64_t vp::vx::Voice_Processor::create_hardware_mix_output_channel_layout_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)53>((uint64_t)this + 8, (uint64_t)v6);
  uint64_t v10 = &unk_1F14A2330;
  char v11 = 0;
  int v12 = &v10;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v6);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  uint64_t v4 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

uint64_t vp::vx::Voice_Processor::create_spatial_head_tracking_mode_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  vp::vx::Voice_Processor::get_spatial_head_tracking_mode(this, (uint64_t)v6);
  uint64_t v10 = &unk_1F14A2378;
  char v11 = 0;
  int v12 = &v10;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v6);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  uint64_t v4 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

uint64_t vp::vx::Voice_Processor::create_spatial_head_tracking_enabled_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  vp::vx::Voice_Processor::get_spatial_head_tracking_enabled(this, (uint64_t)v6);
  uint64_t v10 = &unk_1F14A23C0;
  char v11 = 0;
  int v12 = &v10;
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v6);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  uint64_t v4 = std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void vp::vx::Voice_Processor::create_port_factory(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t v6 = *((void *)a1 + 74);
  vp::vx::Voice_Processor::make_weak_state_observer(a1, &v8);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 16))(v12, v6, a2, &v8);
  uint64_t v7 = v12[0];
  *a3 = v12[0];
  if (v7) {
    operator new();
  }
  a3[1] = 0;
  v12[0] = 0;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>((void *)a1 + 240, &v11, &v10, a3, (uint64_t)v12);
}

void sub_1BB239488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    vp::vx::Voice_Processor::create_port_factory();
  }
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_wire_factory(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)a1 + 75);
  vp::vx::Voice_Processor::make_weak_state_observer(a1, &v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 16))(&v16, v6, a2, &v14);
  uint64_t v7 = v16;
  *a3 = v16;
  if (v7) {
    operator new();
  }
  a3[1] = 0;
  uint64_t v16 = 0;
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a2) {
    vp::vx::Voice_Processor::get_downlink_SRC_algorithm(a1, (uint64_t)v13);
  }
  else {
    vp::vx::Voice_Processor::get_uplink_SRC_algorithm(a1, (uint64_t)v13);
  }
  vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(0, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (a2) {
    vp::vx::Voice_Processor::get_downlink_SRC_quality(a1, (uint64_t)v12);
  }
  else {
    vp::vx::Voice_Processor::get_uplink_SRC_quality(a1, (uint64_t)v12);
  }
  vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(0, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (a2) {
    vp::vx::Voice_Processor::get_downlink_wire_storage_capacity(a1, (uint64_t)v11);
  }
  else {
    vp::vx::Voice_Processor::get_uplink_wire_storage_capacity(a1, (uint64_t)v11);
  }
  vp::vx::IO_Wire_Factory::set_storage_capacity(0, (uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  uint64_t v8 = (void *)((char *)a1 + 2336);
  uint64_t v9 = 2352;
  if (a2) {
    uint64_t v8 = (void *)((char *)a1 + 2352);
  }
  else {
    uint64_t v9 = 2336;
  }
  *(void *)((char *)a1 + vboost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = 0;
  uint64_t v10 = (std::__shared_weak_count *)v8[1];
  v8[1] = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BB239688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  uint64_t v21 = *(void *)(v19 - 56);
  *(void *)(v19 - 56) = 0;
  if (v21) {
    vp::vx::Voice_Processor::create_wire_factory();
  }
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_mic_ref_sync_node_factory(vp::vx::Voice_Processor *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 73);
  vp::vx::Voice_Processor::make_weak_state_observer(this, &v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)v4 + 16))(&v9, v4, &v7);
  uint64_t v5 = v9;
  *a2 = v9;
  if (v5) {
    operator new();
  }
  a2[1] = 0;
  uint64_t v9 = 0;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *((void *)this + 30boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 303);
  *((void *)this + 303) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void vp::vx::Voice_Processor::create_far_end_voice_proc_node_factory(vp::vx::Voice_Processor *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 72);
  vp::vx::Voice_Processor::make_weak_state_observer(this, &v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)v4 + 16))(&v9, v4, &v7);
  uint64_t v5 = v9;
  *a2 = v9;
  if (v5) {
    operator new();
  }
  a2[1] = 0;
  uint64_t v9 = 0;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *((void *)this + 315) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 316);
  *((void *)this + 316) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t vp::vx::Voice_Processor::find_property_state@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  vp::vx::data_flow::State<void>::State((uint64_t)v8);
  vp::vx::Property_Manager::get_property_state(a1 + 968, a2, (uint64_t)v9);
  uint64_t v6 = caulk::expected<vp::vx::data_flow::State<void>,vp::vx::Error_Code>::value((uint64_t)v9);
  vp::vx::data_flow::State<void>::operator=((uint64_t)v8, v6);
  if (v9[24]) {
    vp::vx::data_flow::State<void>::~State(v9);
  }
  vp::vx::data_flow::State<void>::State(a3, v8);
  return vp::vx::data_flow::State<void>::~State(v8);
}

void sub_1BB23994C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    vp::vx::data_flow::State<void>::~State(&a13);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB239924);
}

uint64_t non-virtual thunk to'vp::vx::Voice_Processor::find_property_state@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  return vp::vx::Voice_Processor::find_property_state(a1 - 8, a2, a3);
}

uint64_t vp::vx::Voice_Processor::find_user_defaults_state@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7);
  uint64_t v5 = boost::container::flat_map<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::at(a1 + 856, &v8);
  vp::vx::data_flow::State<void>::operator=((uint64_t)v7, (uint64_t)v5);
  vp::vx::data_flow::State<void>::State(a3, v7);
  return vp::vx::data_flow::State<void>::~State(v7);
}

void sub_1BB2399E8(void *a1)
{
}

uint64_t non-virtual thunk to'vp::vx::Voice_Processor::find_user_defaults_state@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return vp::vx::Voice_Processor::find_user_defaults_state(a1 - 8, a2, a3);
}

void vp::vx::Voice_Processor::observe_global_state_change(uint64_t a1, uint64_t a2, long long *a3)
{
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, a3);
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 184))(a1, a2, &__p);
  if (v9 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v6, a3);
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 192))(a1, a2, &v6);
  if (v7)
  {
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void non-virtual thunk to'vp::vx::Voice_Processor::observe_global_state_change(uint64_t a1, uint64_t a2, long long *a3)
{
}

double vp::vx::Voice_Processor::observe_uplink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  unsigned int v6 = a2;
  char v7 = &v6;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 888, &v6, (uint64_t)&std::piecewise_construct, &v7);
  *(void *)&double result = std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v4 + 3), a3).n128_u64[0];
  return result;
}

double non-virtual thunk to'vp::vx::Voice_Processor::observe_uplink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  return vp::vx::Voice_Processor::observe_uplink_state_change(a1 - 248, a2, a3);
}

double vp::vx::Voice_Processor::observe_downlink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  unsigned int v6 = a2;
  char v7 = &v6;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 928, &v6, (uint64_t)&std::piecewise_construct, &v7);
  *(void *)&double result = std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v4 + 3), a3).n128_u64[0];
  return result;
}

double non-virtual thunk to'vp::vx::Voice_Processor::observe_downlink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  return vp::vx::Voice_Processor::observe_downlink_state_change(a1 - 248, a2, a3);
}

void vp::vx::Voice_Processor::get_dsp_node_parameter_override(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v13 = a2;
  if (a3 == 1885433961)
  {
    vp::vx::Voice_Processor::create_personal_audio_HLC_product_id_parameter_override_state(a1, (uint64_t)v17);
    goto LABEL_5;
  }
  if (a3 == 1684829029)
  {
    vp::vx::Voice_Processor::create_ref_port_sensitivity_parameter_override_state(a1, (uint64_t)v17);
LABEL_5:
    vp::vx::data_flow::State<void>::State(a4, (uint64_t)v17);
    *(_DWORD *)(a4 + 24) = 1;
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    return;
  }
  unsigned int v6 = (uint64_t *)*((void *)a1 + 65);
  char v7 = (uint64_t *)*((void *)a1 + 66);
  if (v6 == v7)
  {
LABEL_26:
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v8 = *v6;
      char v9 = (std::__shared_weak_count *)v6[1];
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        int v12 = 0;
        int v15 = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        int v12 = 0;
        int v15 = 0;
      }
      uint64_t v14 = v8;
      int v16 = a3;
      if (HIDWORD(v13) == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      char v18 = &v14;
      ((void (*)(void *__return_ptr, uint64_t **, uint64_t *))off_1F14A23F8[HIDWORD(v13)])(v17, &v18, &v13);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v17);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v12)
      {
        if (v12 == 2)
        {
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)v11);
          int v10 = 1;
          *(_DWORD *)(a4 + 24) = 1;
        }
        else if (v12 == 1)
        {
          std::__variant_detail::__alt<0ul,applesauce::CF::NumberRef>::__alt[abi:ne180100]<applesauce::CF::NumberRef&>((void *)a4, v11);
          *(_DWORD *)(a4 + 24) = 0;
          int v10 = 1;
        }
        else
        {
          int v10 = 0;
        }
      }
      else
      {
        int v10 = 4;
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if ((v10 | 4) != 4) {
        break;
      }
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_26;
      }
    }
  }
}

void non-virtual thunk to'vp::vx::Voice_Processor::get_dsp_node_parameter_override(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void vp::vx::Voice_Processor::get_dsp_node_property_override(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  if (a3 <= 1936749682)
  {
    if (a3 > 1936225380)
    {
      switch(a3)
      {
        case 1936225381:
          vp::vx::Voice_Processor::create_spatial_head_tracking_enabled_property_override_state(this, (uint64_t)&v30);
          goto LABEL_29;
        case 1936745587:
          vp::vx::Voice_Processor::create_speaker_iv_data_source_ids_dsp_property_override_state(this, (uint64_t)&v30);
          goto LABEL_29;
        case 1936746612:
          vp::vx::Voice_Processor::create_spatial_head_tracking_mode_property_override_state(this, (uint64_t)&v30);
          goto LABEL_29;
      }
    }
    else
    {
      switch(a3)
      {
        case 1685482595:
          vp::vx::Voice_Processor::create_ref_port_volume_limit_curve_dsp_property_override_state(this, (uint64_t)&v30);
          goto LABEL_29;
        case 1751999340:
          vp::vx::Voice_Processor::create_hardware_mix_output_channel_layout_property_override_state(this, (uint64_t)&v30);
          goto LABEL_29;
        case 1919509619:
          vp::vx::Voice_Processor::create_metric_reporter_ids_dsp_property_override_state(this, (uint64_t)&v30);
LABEL_29:
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)&v30);
          *(_DWORD *)(a4 + 24) = 1;
          int v12 = &v30;
LABEL_30:
          vp::vx::data_flow::State<void>::~State((uint64_t)v12);
          return;
      }
    }
    goto LABEL_34;
  }
  if (a3 <= 1953850479)
  {
    if (a3 == 1936749683)
    {
      vp::vx::Voice_Processor::create_speaker_calibration_data_cf_dsp_property_override_state(this, (uint64_t)&v30);
      goto LABEL_29;
    }
    if (a3 != 1953326192)
    {
      if (a3 == 1953654638)
      {
        vp::vx::Voice_Processor::create_mic_trim_gains_dsp_property_override_state(this, (uint64_t)&v30);
        goto LABEL_29;
      }
      goto LABEL_34;
    }
    if (*((char *)this + 335) < 0)
    {
      int v10 = (const UInt8 *)*((void *)this + 39);
      if (!v10)
      {
        CFTypeRef v24 = 0;
        goto LABEL_67;
      }
      CFIndex v11 = *((void *)this + 40);
    }
    else
    {
      int v10 = (const UInt8 *)this + 312;
      CFIndex v11 = *((unsigned __int8 *)this + 335);
    }
    CFTypeRef v24 = CFStringCreateWithBytes(0, v10, v11, 0x8000100u, 0);
    if (!v24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
LABEL_67:
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::StringRef>((applesauce::CF::TypeRef *)&v27, "Value", &v24);
    CFTypeRef v30 = &v27;
    uint64_t v31 = 1;
    *(void *)a4 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v30);
    *(_DWORD *)(a4 + 24) = 0;
    if (cf) {
      CFRelease(cf);
    }
    if (v27) {
      CFRelease(v27);
    }
    CFTypeRef v18 = v24;
    if (!v24) {
      return;
    }
    goto LABEL_63;
  }
  switch(a3)
  {
    case 1953850480:
      if (*((char *)this + 311) < 0)
      {
        uint64_t v8 = (const UInt8 *)*((void *)this + 36);
        if (!v8)
        {
          CFTypeRef v24 = 0;
          goto LABEL_58;
        }
        CFIndex v9 = *((void *)this + 37);
      }
      else
      {
        uint64_t v8 = (const UInt8 *)this + 288;
        CFIndex v9 = *((unsigned __int8 *)this + 311);
      }
      CFTypeRef v24 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v24)
      {
        uint64_t v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v19, "Could not construct");
      }
LABEL_58:
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::StringRef>((applesauce::CF::TypeRef *)&v27, "Value", &v24);
      CFTypeRef v30 = &v27;
      uint64_t v31 = 1;
      *(void *)a4 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v30);
      *(_DWORD *)(a4 + 24) = 0;
      if (cf) {
        CFRelease(cf);
      }
      if (v27) {
        CFRelease(v27);
      }
      CFTypeRef v18 = v24;
      if (!v24) {
        return;
      }
LABEL_63:
      CFRelease(v18);
      return;
    case 1969578611:
      vp::vx::Voice_Processor::get_block_size((uint64_t)this, 1, (uint64_t)v21);
      char v7 = (CFTypeRef *)&unk_1F14A2490;
      goto LABEL_33;
    case 1969582962:
      vp::vx::Voice_Processor::get_sample_rate((uint64_t)this, 1, (uint64_t)v21);
      char v7 = (CFTypeRef *)&unk_1F14A2448;
LABEL_33:
      CFTypeRef v30 = v7;
      LOBYTE(v3boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
      CFTypeRef v32 = &v30;
      int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
      vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v30, (uint64_t)&v27);
      vp::vx::data_flow::State<void>::State((uint64_t)&v24, (uint64_t)&v27);
      vp::vx::data_flow::State<void>::~State(&v27);
      std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v30);
      vp::vx::data_flow::State<void>::State((uint64_t)&v30, (uint64_t)&v24);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v24);
      vp::vx::data_flow::State<void>::State(a4, (uint64_t)&v30);
      *(_DWORD *)(a4 + 24) = 1;
      vp::vx::data_flow::State<void>::~State((uint64_t)&v30);
      int v12 = (CFTypeRef **)v21;
      goto LABEL_30;
  }
LABEL_34:
  uint64_t v13 = *((void *)this + 65);
  uint64_t v14 = *((void *)this + 66);
  if (v13 == v14)
  {
LABEL_54:
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 0;
  }
  else
  {
    while (1)
    {
      int v15 = *(const void **)v13;
      int v16 = *(std::__shared_weak_count **)(v13 + 8);
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        int v29 = 0;
        __n128 v25 = v16;
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        int v29 = 0;
        __n128 v25 = 0;
      }
      CFTypeRef v24 = v15;
      int v26 = a3;
      if (HIDWORD(v22) == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      v21[0] = &v24;
      ((void (*)(CFTypeRef **__return_ptr, void *, uint64_t *))off_1F14A24C8[HIDWORD(v22)])(&v30, v21, &v22);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v27, (uint64_t)&v30);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v29)
      {
        if (v29 == 2)
        {
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)&v27);
          int v17 = 1;
          *(_DWORD *)(a4 + 24) = 1;
        }
        else if (v29 == 1)
        {
          std::__variant_detail::__alt<0ul,applesauce::CF::DictionaryRef>::__alt[abi:ne180100]<applesauce::CF::DictionaryRef&>((void *)a4, &v27);
          *(_DWORD *)(a4 + 24) = 0;
          int v17 = 1;
        }
        else
        {
          int v17 = 0;
        }
      }
      else
      {
        int v17 = 4;
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if ((v17 | 4) != 4) {
        break;
      }
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1BB23A3B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void non-virtual thunk to'vp::vx::Voice_Processor::get_dsp_node_property_override(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

__n128 vp::vx::Voice_Processor::handle_dsp_node_factory_file_path_adjustment_request@<Q0>(std::__fs::filesystem::path *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_) {
    goto LABEL_20;
  }
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  uint64_t v6 = *(void *)(a2 + 632);
  uint64_t v7 = *(void *)(a2 + 640);
  if (!v6 && v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (!v7)
  {
LABEL_14:
    std::__fs::filesystem::operator/[abi:ne180100](this, a2 + 288, (std::__fs::filesystem::path *)a3);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a3, &__ec);
    if (v11)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (v11)
      {
        if (v11 != 255 && !__ec.__val_) {
          return result;
        }
      }
    }
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
LABEL_20:
    __n128 result = *(__n128 *)&this->__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)a3 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
    *(void *)(a3 + 16) = *((void *)&this->__pn_.__r_.__value_.__l + 2);
    this->__pn_.__r_.__value_.__l.__size_ = 0;
    this->__pn_.__r_.__value_.__r.__words[2] = 0;
    this->__pn_.__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  uint64_t v8 = 24 * v7;
  while (1)
  {
    if (!v6) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    std::__fs::filesystem::operator/[abi:ne180100](this, v6, (std::__fs::filesystem::path *)a3);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a3, &__ec);
    if (v11)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (v11)
      {
        if (v11 != 255 && !__ec.__val_) {
          return result;
        }
      }
    }
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    v6 += 24;
    v8 -= 24;
    if (!v8) {
      goto LABEL_14;
    }
  }
}

uint64_t boost::container::vec_iterator<std::__fs::filesystem::path *,false>::operator*(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

double non-virtual thunk to'vp::vx::Voice_Processor::handle_dsp_node_factory_file_path_adjustment_request@<D0>(uint64_t a1@<X0>, std::__fs::filesystem::path *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)&double result = vp::vx::Voice_Processor::handle_dsp_node_factory_file_path_adjustment_request(a2, a1 - 256, a3).n128_u64[0];
  return result;
}

uint64_t ___ZN2vp2vx15Voice_Processor9call_syncENSt3__18functionIFvRS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 48))(v2, *(void *)(a1 + 32));
}

void sub_1BB23A664(void *a1)
{
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

uint64_t ___ZNK2vp2vx15Voice_Processor9call_syncENSt3__18functionIFvRKS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 48))(v2, *(void *)(a1 + 32));
}

void sub_1BB23A6D8(void *a1)
{
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__18functionIFvRKN2vp2vx15Voice_ProcessorEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c53_ZTSNSt3__18functionIFvRKN2vp2vx15Voice_ProcessorEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void vp::vx::Voice_Processor::call_async(void *a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[91];
  uint64_t v5 = (std::__shared_weak_count *)a1[93];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = a1[3];
  if (v6) {
    dispatch_retain(v6);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN2vp2vx15Voice_Processor10call_asyncENSt3__18functionIFvRS1_EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_135;
  block[4] = v4;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  dispatch_async(v6, block);
  if (v6) {
    dispatch_release(v6);
  }
  std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v9);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BB23A834(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ___ZN2vp2vx15Voice_Processor10call_asyncENSt3__18functionIFvRS1_EEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (a1[4])
      {
        uint64_t v5 = a1[9];
        if (!v5) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

uint64_t __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN2vp2vx15Voice_ProcessorEEE48c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void sub_1BB23A930(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN2vp2vx15Voice_ProcessorEEE48c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void vp::vx::Voice_Processor::make_weak_state_manager(vp::vx::Voice_Processor *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (!v2
    || (uint64_t v4 = *((void *)this + 91),
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v2),
        (uint64_t v5 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v4 + 16;
  if (!v4) {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);

  std::__shared_weak_count::__release_weak(v2);
}

void vp::vx::Voice_Processor::make_weak_state_owner(vp::vx::Voice_Processor *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (!v2
    || (uint64_t v4 = *((void *)this + 91),
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v2),
        (uint64_t v5 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v4 + 8;
  if (!v4) {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);

  std::__shared_weak_count::__release_weak(v2);
}

uint64_t vp::vx::Voice_Processor::get_context(vp::vx::Voice_Processor *this)
{
  return (uint64_t)this + 264;
}

void vp::vx::Voice_Processor::begin_initialization(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>, int a3@<W1>)
{
  if (a3 == 1)
  {
    vp::vx::Voice_Processor::begin_downlink_initialization(this, a2);
  }
  else if (!a3)
  {
    vp::vx::Voice_Processor::begin_uplink_initialization(this, a2);
  }
}

void vp::vx::Voice_Processor::end_initialization(vp::vx::Voice_Processor *this@<X0>, unsigned char *a2@<X8>, int a3@<W1>)
{
  if (a3 == 1)
  {
    vp::vx::Voice_Processor::end_downlink_initialization(this, (uint64_t)a2);
  }
  else if (!a3)
  {
    vp::vx::Voice_Processor::end_uplink_initialization(this, a2);
  }
}

void std::__shared_ptr_emplace<vp::vx::Voice_Processor_State_Manager::Observer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A0C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vp::vx::Voice_Processor_State_Manager::Observer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A0C28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void *std::__shared_ptr_emplace<vp::vx::Voice_Processor_State_Manager::Observer>::__on_zero_shared(uint64_t a1)
{
  boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)(a1 + 96));

  return boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)(a1 + 32));
}

uint64_t _ZNSt3__112construct_atB8ne180100IN2vp2vx29Voice_Processor_State_Manager8ObserverEJEPS4_EEPT_S7_DpOT0_(uint64_t a1)
{
  *(_OWORD *)(a1 + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v2 = a1 + 104;
  *(_OWORD *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0u;
  uint64_t v3 = a1 + 40;
  *(void *)a1 = &unk_1F14A08A0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)a1);
  *(void *)(a1 + 8) = default_resource;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = xmmword_1BB872720;
  *(void *)(a1 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v2;
  *(_OWORD *)(a1 + 88) = xmmword_1BB872720;
  return a1;
}

uint64_t *std::shared_ptr<vp::vx::Component>::shared_ptr[abi:ne180100]<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::Component *,vp::Allocator_Delete<vp::vx::Component>,std::allocator<vp::vx::Component>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::Component *,vp::Allocator_Delete<vp::vx::Component>,std::allocator<vp::vx::Component>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void (****)(void))(a1 + 24);
  (**v2)(v2);
  return (*(uint64_t (**)(void, void (***)(void), void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::Component>>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>>((uint64_t)(a1 + 3), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<vp::Allocator<std::shared_ptr<vp::vx::Component>>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::Component>>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<vp::Allocator<std::shared_ptr<vp::vx::Component>>,std::reverse_iterator<std::shared_ptr<vp::vx::Component>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<vp::vx::io::Node_Terminal>>,std::reverse_iterator<std::shared_ptr<vp::vx::io::Node_Terminal>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::Component>>>::deallocate[abi:ne180100](*(void **)(a1 + 32), *(void *)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::Component>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 16 * a3, 8);
}

void *boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(a1[1] + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[3]) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  return a1;
}

void *boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

void *boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(a1[1] + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[3]) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  return a1;
}

void *boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 24));
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,void *> *> *>>::deallocate[abi:ne180100]((void *)(a1 + 16), v2, *(void *)(a1 + 8));
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (void *)(result + 32);
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = v2[3];
      if (v5)
      {
        v2[4] = v5;
        std::allocator_traits<vp::Allocator<unsigned char>>::deallocate[abi:ne180100](v2 + 6, v5, v2[5] - v5);
      }
      uint64_t result = std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,void *>>>::deallocate[abi:ne180100](v3, (uint64_t)v2, 1);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<unsigned int,float>,void *>>>::deallocate[abi:ne180100](a1 + 4, (uint64_t)v2, 1);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,float>,void *> *> *>>::deallocate[abi:ne180100](a1 + 2, v4, a1[1]);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      if (*((unsigned char *)v3 + 48))
      {
        if (*((char *)v3 + 47) < 0) {
          operator delete((void *)v3[3]);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1] + 8;
    do
    {
      --v2;
      uint64_t v3 = vp::vx::data_flow::State<void>::~State(v3) + 32;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 32 * v4, 8);
  }
  return a1;
}

uint64_t caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::~lifetime_guard_base(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v4 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v4);
  }
  if (*(unsigned char *)(a1 + 40)) {
    MEMORY[0x1C185C320](a1 + 24);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void sub_1BB23B428(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1];
    do
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (a1[3]) {
    boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  return a1;
}

void *boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    uint64_t v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::Component>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::~__hash_table(uint64_t *a1)
{
  std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__deallocate_node((uint64_t)a1, a1[3]);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::deallocate[abi:ne180100](a1 + 2, v2, a1[1]);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__deallocate_node(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (void *)(result + 32);
    do
    {
      uint64_t v4 = *(void *)v2;
      std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>::destroy[abi:ne180100]<std::pair<applesauce::CF::StringRef const,unsigned int>>((uint64_t)v3, (CFTypeRef *)(v2 + 16));
      uint64_t result = std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::deallocate[abi:ne180100](v3, v2, 1);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 32 * a3, 8);
}

void std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>::destroy[abi:ne180100]<std::pair<applesauce::CF::StringRef const,unsigned int>>(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

uint64_t std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 8 * a3, 8);
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "vp::vx::io::Error_Code::Bad_Allocation]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Frame_Count]";
      break;
    case 2:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Data]";
      break;
    case 3:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Direction]";
      break;
    case 4:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Sample_Time]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)6,128ul>((int)"vp::vx::io::Error_Code::Bad_Allocation]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  uint64_t result = "vp::vx::io::Error_Code::Bad_Node_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Port_ID]";
      break;
    case 2:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Wire_ID]";
      break;
    case 3:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Terminal_Index]";
      break;
    case 4:
      uint64_t result = "vp::vx::io::Error_Code::Bad_Parameter_ID]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)11,128ul>((int)"vp::vx::io::Error_Code::Bad_Node_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  uint64_t result = "vp::vx::io::Error_Code::Bad_Property_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "vp::vx::io::Error_Code::Operation_Not_Implemented]";
      break;
    case 2:
      uint64_t result = "vp::vx::io::Error_Code::Operation_Not_Supported]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)14]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)15]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)16,128ul>((int)"vp::vx::io::Error_Code::Bad_Property_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  uint64_t result = "(vp::vx::io::Error_Code)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)17]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)18]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)19]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)20]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)21,128ul>((int)"(vp::vx::io::Error_Code)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  uint64_t result = "(vp::vx::io::Error_Code)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)22]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)23]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)24]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)25]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)26,128ul>((int)"(vp::vx::io::Error_Code)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  uint64_t result = "(vp::vx::io::Error_Code)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)27]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)28]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)29]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)30]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)31,128ul>((int)"(vp::vx::io::Error_Code)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  uint64_t result = "(vp::vx::io::Error_Code)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)32]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)33]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)34]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)35]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)36,128ul>((int)"(vp::vx::io::Error_Code)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  uint64_t result = "(vp::vx::io::Error_Code)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)37]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)38]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)39]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)40]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)41,128ul>((int)"(vp::vx::io::Error_Code)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  uint64_t result = "(vp::vx::io::Error_Code)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)42]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)43]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)44]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)45]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)46,128ul>((int)"(vp::vx::io::Error_Code)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  uint64_t result = "(vp::vx::io::Error_Code)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)47]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)48]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)49]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)50]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)51,128ul>((int)"(vp::vx::io::Error_Code)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  uint64_t result = "(vp::vx::io::Error_Code)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)52]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)53]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)54]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)55]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)56,128ul>((int)"(vp::vx::io::Error_Code)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  uint64_t result = "(vp::vx::io::Error_Code)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)57]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)58]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)59]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)60]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)61,128ul>((int)"(vp::vx::io::Error_Code)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  uint64_t result = "(vp::vx::io::Error_Code)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)62]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)63]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)64]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)65]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)66,128ul>((int)"(vp::vx::io::Error_Code)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  uint64_t result = "(vp::vx::io::Error_Code)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)67]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)68]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)69]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)70]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)71,128ul>((int)"(vp::vx::io::Error_Code)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  uint64_t result = "(vp::vx::io::Error_Code)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)72]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)73]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)74]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)75]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)76,128ul>((int)"(vp::vx::io::Error_Code)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  uint64_t result = "(vp::vx::io::Error_Code)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)77]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)78]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)79]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)80]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)81,128ul>((int)"(vp::vx::io::Error_Code)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  uint64_t result = "(vp::vx::io::Error_Code)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)82]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)83]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)84]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)85]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)86,128ul>((int)"(vp::vx::io::Error_Code)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  uint64_t result = "(vp::vx::io::Error_Code)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)87]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)88]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)89]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)90]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)91,128ul>((int)"(vp::vx::io::Error_Code)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  uint64_t result = "(vp::vx::io::Error_Code)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)92]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)93]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)94]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)95]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)96,128ul>((int)"(vp::vx::io::Error_Code)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  uint64_t result = "(vp::vx::io::Error_Code)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)97]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)98]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)99]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)100]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)101,128ul>((int)"(vp::vx::io::Error_Code)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  uint64_t result = "(vp::vx::io::Error_Code)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)102]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)103]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)104]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)105]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)106,128ul>((int)"(vp::vx::io::Error_Code)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  uint64_t result = "(vp::vx::io::Error_Code)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)107]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)108]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)109]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)110]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)111,128ul>((int)"(vp::vx::io::Error_Code)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  uint64_t result = "(vp::vx::io::Error_Code)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)112]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)113]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)114]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)115]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)116,128ul>((int)"(vp::vx::io::Error_Code)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  uint64_t result = "(vp::vx::io::Error_Code)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)117]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)118]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)119]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)120]";
      break;
    default:
      uint64_t result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)121,128ul>((int)"(vp::vx::io::Error_Code)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  uint64_t result = "(vp::vx::io::Error_Code)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "(vp::vx::io::Error_Code)122]";
      break;
    case 2:
      uint64_t result = "(vp::vx::io::Error_Code)123]";
      break;
    case 3:
      uint64_t result = "(vp::vx::io::Error_Code)124]";
      break;
    case 4:
      uint64_t result = "(vp::vx::io::Error_Code)125]";
      break;
    case 5:
      uint64_t result = "(vp::vx::io::Error_Code)126]";
      break;
    case 6:
      uint64_t result = "(vp::vx::io::Error_Code)127]";
      break;
    default:
      if ("(vp::vx::io::Error_Code)121]" == 128) {
        uint64_t result = "(vp::vx::io::Error_Code)128]";
      }
      else {
        uint64_t result = "?";
      }
      break;
  }
  return result;
}

int *caulk::expected<unsigned int,vp::vx::Error_Code>::swap(int *result, int *a2)
{
  char v2 = *((unsigned char *)result + 4);
  int v3 = *((unsigned __int8 *)a2 + 4);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (*((unsigned char *)result + 4))
    {
      if (!*((unsigned char *)a2 + 4))
      {
        int v5 = *a2;
        *a2 = *result;
        char *result = v5;
        *((unsigned char *)result + 4) = 0;
        *((unsigned char *)a2 + 4) = v2;
        return result;
      }
    }
    else if (*((unsigned char *)a2 + 4))
    {
      int v6 = *a2;
      *a2 = *result;
      char *result = v6;
      *((unsigned char *)result + 4) = v3;
      *((unsigned char *)a2 + 4) = 0;
      return result;
    }
  }
  int v7 = *result;
  char *result = *a2;
  *a2 = v7;
  return result;
}

uint64_t caulk::__expected_detail::base<unsigned int,vp::vx::io::Error>::base(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  int v3 = *(unsigned __int8 *)(a2 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (!v3)
  {
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    BOOL v4 = (void **)(a1 + 16);
    *(void *)(a1 + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
    if (*(char *)(a2 + 39) < 0)
    {
      std::basic_string<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::__init_copy_ctor_external(v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(void *)(a2 + 32);
      *(_OWORD *)BOOL v4 = v5;
    }
  }
  return a1;
}

void sub_1BB23C4DC(void *a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

vp::vx::io::Error *caulk::__expected_detail::base<std::unique_ptr<vp::vx::io::Graph>,vp::vx::io::Error>::~base(vp::vx::io::Error *this)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = *(void *)this;
    *(void *)this = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    vp::vx::io::Error::~Error(this);
  }
  return this;
}

void vp::vx::io::Graph_Builder::~Graph_Builder(vp::vx::io::Graph_Builder *this)
{
  BOOL v4 = (uint64_t *)((char *)this + 416);
  std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::~vector((void *)this + 48);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::~vector((void *)this + 44);
  BOOL v4 = (uint64_t *)((char *)this + 312);
  std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::~vector((void *)this + 35);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::~vector((void *)this + 31);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::~vector((void *)this + 27);
  BOOL v4 = (uint64_t *)((char *)this + 176);
  std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = (uint64_t *)((char *)this + 144);
  std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = (uint64_t *)((char *)this + 112);
  std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::~vector((void *)this + 10);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    int v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    int v3 = (std::__shared_weak_count **)(a1[1] + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  }
  return a1;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    int v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    int v3 = (std::__shared_weak_count **)(a1[1] + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  }
  return a1;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    int v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    int v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

uint64_t *std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100](result);
    int v3 = *a1 + 3;
    uint64_t v4 = **a1;
    uint64_t v5 = ((*a1)[2] - v4) >> 4;
    return (uint64_t *)std::allocator_traits<vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::deallocate[abi:ne180100](v3, v4, v5);
  }
  return result;
}

void *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    int v3 = (std::__shared_weak_count **)(a1[1] + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  }
  return a1;
}

const void **std::pair<applesauce::CF::StringRef,unsigned int>::~pair(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A0C98;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A0C98;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A0C98;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A0C98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE7destroyEv(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id) {
    int v6 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  vp::Service_Provider::get<vp::services::Audio_Statistics,(decltype(nullptr))0>(*(void **)(a1 + 8), &v17);
  if (v17)
  {
    int v7 = (void *)*v6;
    uint64_t v8 = (void *)v6[1];
    if ((void *)*v6 != v8)
    {
      long long v9 = 0;
      while (1)
      {
        if (((*(uint64_t (**)(uint64_t, void))(*(void *)v17 + 32))(v17, *v7) & 0xFFFFFFFD) != 0)
        {
          uint64_t v10 = v9;
          goto LABEL_21;
        }
        (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v17 + 40))(&v16);
        if (v16)
        {
          CFTypeRef cf = 0;
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[25]>((const __CFDictionary *)v16, "HostApplicationDisplayID", &cf, &v15);
          uint64_t v10 = v15;
          long long v15 = v9;
          if (v9) {
            CFRelease(v9);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v10)
          {
            int v11 = 0;
            goto LABEL_18;
          }
          long long v9 = 0;
        }
        int v11 = 1;
        uint64_t v10 = v9;
LABEL_18:
        if (v16) {
          CFRelease(v16);
        }
        if (!v11) {
          goto LABEL_24;
        }
LABEL_21:
        ++v7;
        long long v9 = v10;
        if (v7 == v8) {
          goto LABEL_24;
        }
      }
    }
  }
  uint64_t v10 = 0;
LABEL_24:
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v12);
  *((void *)v4 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v4);
  void *result = v10;
  return result;
}

void sub_1BB23CDBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A0CE0;
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A0CE0;
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  int v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1F14A0CE0;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZZNS2_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS2_14Operation_ModeES7_EEEDaOSE_DpRKNS3_5StateIT0_EEEUlDpRKT_E_JSH_S7_EEERNS3_13State_ManagerESE_SP_EUlPPKNS3_5ValueEPSX_E_Li0ELb0EEC2B8ne180100IJRKS12_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSQ_EEENS_15__tuple_indicesIJXspT0_EEEE(v2 + 1, v1);
  return v2;
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A0CE0;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZZNS2_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS2_14Operation_ModeES7_EEEDaOSE_DpRKNS3_5StateIT0_EEEUlDpRKT_E_JSH_S7_EEERNS3_13State_ManagerESE_SP_EUlPPKNS3_5ValueEPSX_E_Li0ELb0EEC2B8ne180100IJRKS12_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSQ_EEENS_15__tuple_indicesIJXspT0_EEEE(a2 + 1, (void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyB8ne180100Ev((uint64_t)a1 + 8);

  operator delete(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  int v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id) {
    int v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[1]);
  int v9 = *v7;
  CFTypeRef v10 = *v8;
  if (*v8) {
    CFRetain(*v8);
  }
  CFTypeRef v11 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_20;
    case 1:
      CFTypeRef v11 = *(CFTypeRef *)(a1 + 16);
      if (v11) {
        CFRetain(*(CFTypeRef *)(a1 + 16));
      }
      goto LABEL_16;
    case 2:
    case 4:
      CFTypeRef v11 = *(CFTypeRef *)(a1 + 24);
      if (v11) {
        CFRetain(*(CFTypeRef *)(a1 + 24));
      }
      goto LABEL_16;
    case 5:
    case 6:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 408) == 1) {
        int v12 = (CFTypeRef *)(a1 + 16);
      }
      else {
        int v12 = (CFTypeRef *)(a1 + 24);
      }
      CFTypeRef v11 = *v12;
      if (*v12) {
        CFRetain(*v12);
      }
      goto LABEL_16;
    default:
LABEL_16:
      if (v10) {
        CFRelease(v10);
      }
      CFTypeRef v10 = v11;
LABEL_20:
      vp::vx::data_flow::Value::~Value(v5);
      *(void *)uint64_t v5 = std::pmr::get_default_resource(v13);
      *((void *)v5 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
      *((void *)v5 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
      uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v5);
      void *result = v10;
      return result;
  }
}

void sub_1BB23D0D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZZNS2_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS2_14Operation_ModeES7_EEEDaOSE_DpRKNS3_5StateIT0_EEEUlDpRKT_E_JSH_S7_EEERNS3_13State_ManagerESE_SP_EUlPPKNS3_5ValueEPSX_E_Li0ELb0EEC2B8ne180100IJRKS12_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSQ_EEENS_15__tuple_indicesIJXspT0_EEEE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[1];
  *a1 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  a1[1] = v4;
  uint64_t v5 = (const void *)a2[2];
  if (v5) {
    CFRetain(v5);
  }
  a1[2] = v5;
  return a1;
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyB8ne180100Ev(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 40);
  CFHashCode v8 = std::hash<applesauce::CF::StringRef>::operator()(a1 + 40, a2);
  CFHashCode v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      CFHashCode v3 = v8;
      if (v8 >= v10) {
        CFHashCode v3 = v8 % v10;
      }
    }
    else
    {
      CFHashCode v3 = (v10 - 1) & v8;
    }
    char v13 = *(uint64_t **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void *)i)
      {
        unint64_t v15 = *(void *)(i + 8);
        if (v15 == v9)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(i + 16), (const __CFString **)a2) == kCFCompareEqualTo)return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 32, 8);
  *(void *)uint64_t i = 0;
  *(void *)(i + 8) = v9;
  *(void *)(i + 16) = *(void *)a3;
  *(void *)a3 = 0;
  *(_DWORD *)(i + 24) = *(_DWORD *)(a3 + 8);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v17 = *(float *)(a1 + 48);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__rehash<true>((uint64_t *)a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        CFHashCode v3 = v9 % v10;
      }
      else {
        CFHashCode v3 = v9;
      }
    }
    else
    {
      CFHashCode v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_38:
    uint64_t *v22 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (uint64_t *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1BB23D438(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__rehash<true>(uint64_t *result, size_t __n)
{
  uint64_t v2 = result;
  if (__n == 1)
  {
    unint64_t v3 = 2;
  }
  else
  {
    unint64_t v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      uint64_t result = (uint64_t *)std::__next_prime(__n);
      unint64_t v3 = (unint64_t)result;
    }
  }
  int8x8_t v4 = (int8x8_t)v2[1];
  if (v3 > *(void *)&v4) {
    goto LABEL_16;
  }
  if (v3 < *(void *)&v4)
  {
    uint64_t result = (uint64_t *)vcvtps_u32_f32((float)(unint64_t)v2[5] / *((float *)v2 + 12));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      uint64_t result = (uint64_t *)std::__next_prime((size_t)result);
    }
    else
    {
      int v6 = (uint64_t *)(1 << -(char)__clz((unint64_t)result - 1));
      if ((unint64_t)result >= 2) {
        uint64_t result = v6;
      }
    }
    if (v3 <= (unint64_t)result) {
      unint64_t v3 = (unint64_t)result;
    }
    if (v3 < *(void *)&v4)
    {
LABEL_16:
      return std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__do_rehash<true>(v2, v3);
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__do_rehash<true>(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t result = (uint64_t *)std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<vp::vx::Property_ID,void *> *> *>::allocate[abi:ne180100]((uint64_t)(result + 2), a2);
    uint64_t v4 = *v2;
    uint64_t *v2 = (uint64_t)result;
    if (v4) {
      uint64_t result = (uint64_t *)std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::deallocate[abi:ne180100](v2 + 2, v4, v2[1]);
    }
    uint64_t v5 = 0;
    v2[1] = a2;
    do
      *(void *)(*v2 + 8 * v5++) = 0;
    while (a2 != v5);
    int v6 = (void *)v2[3];
    if (v6)
    {
      unint64_t v7 = v6[1];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      *(void *)(*v2 + 8 * v7) = v2 + 3;
      unint64_t v10 = (void *)*v6;
      if (*v6)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= a2) {
              v11 %= a2;
            }
          }
          else
          {
            v11 &= a2 - 1;
          }
          if (v11 != v7)
          {
            if (!*(void *)(*v2 + 8 * v11))
            {
              *(void *)(*v2 + 8 * v1boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v6;
              goto LABEL_23;
            }
            *int v6 = *v10;
            *unint64_t v10 = **(void **)(*v2 + 8 * v11);
            **(void **)(*v2 + 8 * v1boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v10;
            unint64_t v10 = v6;
          }
          unint64_t v11 = v7;
LABEL_23:
          int v6 = v10;
          unint64_t v10 = (void *)*v10;
          unint64_t v7 = v11;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v9 = *result;
    void *result = 0;
    if (v9) {
      uint64_t result = (uint64_t *)std::allocator_traits<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::deallocate[abi:ne180100](result + 2, v9, result[1]);
    }
    v2[1] = 0;
  }
  return result;
}

void std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>::destroy[abi:ne180100]<std::pair<applesauce::CF::StringRef const,unsigned int>>(*(void *)a1, (CFTypeRef *)(a2 + 16));
  }
  if (a2)
  {
    uint64_t v4 = *(void **)a1;
    std::allocator_traits<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::deallocate[abi:ne180100](v4, a2, 1);
  }
}

void vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, uint64_t a3@<X8>)
{
  vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(*(void **)(a1 + 456), &v13);
  uint64_t v6 = v13;
  if (v13)
  {
    CFTypeRef v7 = *a2;
    uint64_t v8 = v13;
    if (*a2)
    {
      CFRetain(*a2);
      uint64_t v8 = v13;
    }
    *(void *)&long long cf = v7;
    *((void *)&cf + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v8;
    unint64_t v11 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor_State_Manager::create_state_for_SIGHUP_signal((dispatch_queue_t *)(a1 + 16), (uint64_t)v9);
    vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::StringRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1},unsigned int>(a1 + 16, &cf, (vp::vx::data_flow::State_Transaction *)v9, (uint64_t)v12);
    vp::vx::data_flow::State<void>::State(a3, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v9);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if ((void)cf) {
      CFRelease((CFTypeRef)cf);
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v6)
  {
    *(void *)&long long cf = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), &cf, (uint64_t)v12);
    vp::vx::data_flow::State<void>::State(a3, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    if ((void)cf) {
      CFRelease((CFTypeRef)cf);
    }
  }
}

void sub_1BB23D840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1}::~State((uint64_t)va);
  CFTypeRef v7 = *(std::__shared_weak_count **)(v5 - 56);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 + 48;
  v8[0] = &unk_1F14A0E68;
  v8[1] = 28;
  void v8[3] = v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A0D28;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EE7__cloneEPNS0_6__baseIS1H_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0D28;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EEclEOS1C_OS1D_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id) {
    uint64_t v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = v3[1];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id) {
    uint64_t v8 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v3[2];
  if (v9[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id) {
    unint64_t v10 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = v3[3];
  if (v11[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unint64_t v12 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = v3[4];
  if (v13[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v14 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v13);
  }
  else {
    long long v14 = 0;
  }
  unint64_t v15 = v3[5];
  if (v15[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v123 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v15);
  }
  else {
    uint64_t v123 = 0;
  }
  float v16 = v3[6];
  if (v16[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id) {
    int v121 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
  }
  else {
    int v121 = 0;
  }
  float v17 = v3[7];
  if (v17[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    int v119 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v17);
  }
  else {
    int v119 = 0;
  }
  BOOL v18 = v3[8];
  if (v18[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id) {
    uint64_t v117 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v18);
  }
  else {
    uint64_t v117 = 0;
  }
  unint64_t v19 = v3[9];
  if (v19[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id) {
    int v115 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v19);
  }
  else {
    int v115 = 0;
  }
  unint64_t v20 = v3[10];
  if (v20[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v113 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v20);
  }
  else {
    int v113 = 0;
  }
  size_t v21 = v3[11];
  if (v21[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    v111 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v21);
  }
  else {
    v111 = 0;
  }
  uint64_t v22 = v3[12];
  if (v22[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    BOOL v109 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v22);
  }
  else {
    BOOL v109 = 0;
  }
  unint64_t v23 = v3[13];
  if (v23[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v107 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v23);
  }
  else {
    uint64_t v107 = 0;
  }
  CFTypeRef v24 = v3[14];
  if (v24[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id) {
    __n128 v25 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v24);
  }
  else {
    __n128 v25 = 0;
  }
  int v26 = v3[15];
  if (v26[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    uint32_t v105 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v26);
  }
  else {
    uint32_t v105 = 0;
  }
  CFTypeRef v27 = v3[16];
  if (v27[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    uint64_t v103 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v27);
  }
  else {
    uint64_t v103 = 0;
  }
  CFTypeRef v28 = v3[17];
  if (v28[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    uint64_t v101 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v28);
  }
  else {
    uint64_t v101 = 0;
  }
  int v29 = v3[18];
  if (v29[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    uint64_t v99 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v29);
  }
  else {
    uint64_t v99 = 0;
  }
  CFTypeRef v30 = v3[19];
  if (v30[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    char v97 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v30);
  }
  else {
    char v97 = 0;
  }
  uint64_t v31 = v3[20];
  if (v31[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v95 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v31);
  }
  else {
    int v95 = 0;
  }
  CFTypeRef v32 = v3[21];
  if (v32[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v93 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v32);
  }
  else {
    int v93 = 0;
  }
  uint64_t v33 = v3[22];
  if (v33[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v91 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v33);
  }
  else {
    int v91 = 0;
  }
  int v34 = v3[23];
  if (v34[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v89 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v34);
  }
  else {
    int v89 = 0;
  }
  int v35 = v3[24];
  if (v35[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v87 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v35);
  }
  else {
    int v87 = 0;
  }
  int v36 = v3[25];
  if (v36[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v85 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v36);
  }
  else {
    int v85 = 0;
  }
  CFTypeRef v37 = v3[26];
  if (v37[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v83 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v37);
  }
  else {
    int v83 = 0;
  }
  CFTypeRef v38 = v3[27];
  if (v38[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v81 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v38);
  }
  else {
    int v81 = 0;
  }
  __int16 v39 = v3[28];
  if (v39[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v79 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v39);
  }
  else {
    int v79 = 0;
  }
  int v40 = v3[29];
  if (v40[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v78 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v40);
  }
  else {
    int v78 = 0;
  }
  long long v41 = v3[30];
  if (v41[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v77 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v41);
  }
  else {
    int v77 = 0;
  }
  int v42 = v3[31];
  if (v42[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v76 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v42);
  }
  else {
    int v76 = 0;
  }
  long long v43 = v3[32];
  if (v43[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v75 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v43);
  }
  else {
    int v75 = 0;
  }
  int v44 = v3[33];
  if (v44[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v74 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v44);
  }
  else {
    int v74 = 0;
  }
  long long v45 = v3[34];
  if (v45[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v73 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v45);
  }
  else {
    int v73 = 0;
  }
  __int16 v46 = v3[35];
  if (v46[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v72 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v46);
  }
  else {
    int v72 = 0;
  }
  char v47 = v3[36];
  if (v47[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v71 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v47);
  }
  else {
    int v71 = 0;
  }
  int v48 = *v6;
  int v49 = *v8;
  int v50 = *v10;
  int v51 = *v12;
  int v52 = *v14;
  int v53 = *v123;
  CFTypeRef v54 = *v121;
  if (*v121) {
    CFRetain(*v121);
  }
  int v67 = v53;
  int v68 = v52;
  int v69 = v51;
  int v70 = v50;
  int v122 = v49;
  int v124 = v48;
  uint64_t v55 = v4;
  int v120 = *v119;
  int v118 = *v117;
  int v116 = *v115;
  char v114 = *v113;
  int v112 = *v111;
  int v110 = *v109;
  int v108 = *v107;
  CFTypeRef v56 = *v25;
  if (*v25) {
    CFRetain(*v25);
  }
  char v57 = *v105;
  char v58 = *v103;
  char v59 = *v101;
  char v60 = *v99;
  char v61 = *v97;
  char v62 = *v95;
  char v63 = *v93;
  int v106 = *v91;
  int v104 = *v89;
  int v102 = *v87;
  int v100 = *v85;
  int v98 = *v83;
  int v96 = *v81;
  int v94 = *v79;
  uint64_t v64 = *v78;
  char v92 = *v77;
  char v90 = *v76;
  char v88 = *v75;
  char v86 = *v74;
  int v84 = *v73;
  char v82 = *v72;
  char v80 = *v71;
  vp::vx::data_flow::Value::~Value(v55);
  *(void *)uint64_t v55 = std::pmr::get_default_resource(v65);
  *((void *)v55 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v55 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id;
  uint64_t result = vp::vx::data_flow::Value::allocate_storage(v55);
  *(_DWORD *)uint64_t result = v124;
  *(_DWORD *)(result + 4) = v122;
  *(_DWORD *)(result + 8) = v70;
  *(_DWORD *)(result + 1boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v69;
  *(_DWORD *)(result + 16) = v68;
  *(_DWORD *)(result + 2std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v67;
  *(void *)(result + 24) = v54;
  *(_DWORD *)(result + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v120;
  *(_DWORD *)(result + 36) = v118;
  *(_DWORD *)(result + 4std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v116;
  *(unsigned char *)(result + 44) = v114;
  *(_DWORD *)(result + 48) = v112;
  *(_DWORD *)(result + 5boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v110;
  *(_DWORD *)(result + 56) = v108;
  *(void *)(result + 64) = v56;
  *(unsigned char *)(result + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v57;
  *(unsigned char *)(result + 73) = v58;
  *(unsigned char *)(result + 74) = v59;
  *(unsigned char *)(result + 75) = v60;
  *(unsigned char *)(result + 76) = v61;
  *(unsigned char *)(result + 77) = v62;
  *(unsigned char *)(result + 78) = v63;
  *(_DWORD *)(result + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v106;
  *(_DWORD *)(result + 84) = v104;
  *(_DWORD *)(result + 88) = v102;
  *(_DWORD *)(result + 9boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v100;
  *(_DWORD *)(result + 96) = v98;
  *(_DWORD *)(result + 10std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v96;
  *(_DWORD *)(result + 104) = v94;
  *(void *)(result + 11boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v64;
  *(unsigned char *)(result + 12std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v92;
  *(unsigned char *)(result + 12boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = v90;
  *(unsigned char *)(result + 12boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v88;
  *(unsigned char *)(result + 123) = v86;
  *(_DWORD *)(result + 124) = v84;
  *(unsigned char *)(result + 128) = v82;
  *(unsigned char *)(result + 12boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 9) = v80;
  return result;
}

void sub_1BB23E1A8(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 136, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 136, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::copy_value(uint64_t a1, uint64_t *a2, long long **a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::Configuration_Context,vp::vx::Configuration_Context const&,vp::vx::Configuration_Context*>(*a2, *a3);
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::move_value(uint64_t a1, uint64_t *a2, long long **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  long long v5 = **a3;
  *(void *)(v3 + 16) = *((void *)*a3 + 2);
  *(_OWORD *)uint64_t v3 = v5;
  *(void *)(v3 + 24) = *((void *)v4 + 3);
  *((void *)v4 + 3) = 0;
  long long v6 = v4[2];
  *(_OWORD *)(v3 + 44) = *(long long *)((char *)v4 + 44);
  *(_OWORD *)(v3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v6;
  *(void *)(v3 + 64) = *((void *)v4 + 8);
  *((void *)v4 + 8) = 0;
  __n128 result = *(__n128 *)((char *)v4 + 72);
  long long v8 = *(long long *)((char *)v4 + 88);
  long long v9 = *(long long *)((char *)v4 + 104);
  *(_OWORD *)(v3 + 114) = *(long long *)((char *)v4 + 114);
  *(_OWORD *)(v3 + 104) = v9;
  *(_OWORD *)(v3 + 88) = v8;
  *(__n128 *)(v3 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = result;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::destroy_value(uint64_t a1, uint64_t *a2)
{
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::Configuration_Context::operator==(*a2, *a3);
}

void std::__destroy_at[abi:ne180100]<vp::vx::Configuration_Context,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A0DD8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0DD8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  long long v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id) {
    long long v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    long long v6 = 0;
  }
  CFTypeRef v7 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  int v8 = *v6;
  CFTypeRef v9 = *v7;
  if (!*v7)
  {
    CFTypeRef v16 = 0;
    goto LABEL_21;
  }
  CFRetain(*v7);
  CFTypeRef v16 = v9;
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"Standard", 8, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_26;
  }
  CFComparisonResult v10 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(&v16, (const __CFString **)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v10 == kCFCompareEqualTo)
  {
    int v8 = 0;
    goto LABEL_21;
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"VoiceIsolation", 14, 0x8000100u, 0);
  if (!cf) {
    goto LABEL_25;
  }
  CFComparisonResult v11 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(&v16, (const __CFString **)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v11 == kCFCompareEqualTo)
  {
    int v8 = 2;
    goto LABEL_21;
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"WideSpectrum", 12, 0x8000100u, 0);
  if (!cf)
  {
LABEL_25:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_26:
  }
  CFComparisonResult v12 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(&v16, (const __CFString **)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v12 == kCFCompareEqualTo) {
    int v8 = 1;
  }
LABEL_21:
  if (v16) {
    CFRelease(v16);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v13);
  *((void *)v4 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  __n128 result = (int *)vp::vx::data_flow::Value::allocate_storage(v4);
  int *result = v8;
  return result;
}

void sub_1BB23E5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  __cxa_free_exception(v9);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"sdsu", v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  CFTypeRef v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    int v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::StringRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1},unsigned int>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  long long v10 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)a2 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  *(void *)a2 = 0;
  int v8 = (char *)operator new(0x20uLL);
  *(void *)int v8 = &unk_1F14A0E20;
  *(_OWORD *)(v8 + 8) = v10;
  *((void *)v8 + 3) = v7;
  void v14[3] = v8;
  int id = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v14, (uint64_t)v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State(v13);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v14);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB23E7EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state_for_SIGHUP_signal@<X0>(dispatch_queue_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)(this + 3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)(this + 3)))
  {
    dispatch_source_t v5 = dispatch_source_create(MEMORY[0x1E4F14480], 1uLL, 0, this[1]);
    BOOL v6 = this[2];
    this[2] = v5;
    if (v6) {
      dispatch_release(v6);
    }
    uint64_t v11 = 0;
    CFComparisonResult v12 = &v11;
    uint64_t v13 = 0x4002000000;
    long long v14 = __Block_byref_object_copy__1;
    unint64_t v15 = __Block_byref_object_dispose__1;
    int v10 = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)this, &v10, (uint64_t)v16);
    uint64_t v7 = this[2];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    _OWORD v9[2] = ___ZN2vp2vx29Voice_Processor_State_Manager30create_state_for_SIGHUP_signalEv_block_invoke;
    void v9[3] = &unk_1E6237B18;
    void v9[4] = &v11;
    dispatch_source_set_event_handler(v7, v9);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v4, (uint64_t)(v12 + 5));
    dispatch_resume(this[2]);
    _Block_object_dispose(&v11, 8);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1}::~State(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  void v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A0E20;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (const void *)a1[1];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A0E20;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (const void *)a1[1];
  if (v3) {
    CFRelease(v3);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1F14A0E20;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_15Voice_Processor26create_user_defaults_stateIS7_S7_EENS3_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEEERNS3_13State_ManagerESF_SQ_EUlPPKNS3_5ValueEPSY_E_Li0ELb0EEC2B8ne180100IJRKS13_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSR_EEENS_15__tuple_indicesIJXspT0_EEEE(v2 + 1, v1);
  return v2;
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A0E20;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_15Voice_Processor26create_user_defaults_stateIS7_S7_EENS3_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEEERNS3_13State_ManagerESF_SQ_EUlPPKNS3_5ValueEPSY_E_Li0ELb0EEC2B8ne180100IJRKS13_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSR_EEENS_15__tuple_indicesIJXspT0_EEEE(a2 + 1, a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyEv(uint64_t a1)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyB8ne180100Ev((uint64_t)a1 + 8);

  operator delete(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_S9_EENS5_5StateIT_EEOT0_EUlSH_E_JjEEEDaOSH_DpRKNSG_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESH_SS_EUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOST_(a1 + 8, a2, a3);
}

void *_ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_15Voice_Processor26create_user_defaults_stateIS7_S7_EENS3_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEEERNS3_13State_ManagerESF_SQ_EUlPPKNS3_5ValueEPSY_E_Li0ELb0EEC2B8ne180100IJRKS13_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSR_EEENS_15__tuple_indicesIJXspT0_EEEE(void *a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyB8ne180100Ev(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_S9_EENS5_5StateIT_EEOT0_EUlSH_E_JjEEEDaOSH_DpRKNSG_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESH_SS_EUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOST_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_S5_EENS1_5StateIT_EEOT0_EUlSD_E_JjEEEDaOSD_DpRKNSC_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSD_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2, (applesauce::CF::StringRef *)&v6);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v4);
  *((void *)v3 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v6;
  return result;
}

void sub_1BB23ECD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_S5_EENS1_5StateIT_EEOT0_EUlSD_E_JjEEEDaOSD_DpRKNSC_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSD_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1@<X0>, vp::vx::data_flow::Value **a2@<X1>, applesauce::CF::StringRef *a3@<X8>)
{
  if (*((uint64_t (****)())*a2 + 2) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage(*a2);
  }
  vp::services::User_Defaults::default_app(*(vp::services::User_Defaults **)(a1 + 8), (uint64_t)v5);
  vp::services::User_Defaults::Domain::get<applesauce::CF::StringRef,applesauce::CF::StringRef,(decltype(nullptr))0>((uint64_t)v5, (CFTypeRef *)a1, a3);
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void vp::services::User_Defaults::default_app(vp::services::User_Defaults *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 16))(&cf);
  vp::services::User_Defaults::app(this, &cf, a2);
  if (cf) {
    CFRelease(cf);
  }
}

void vp::services::User_Defaults::Domain::get<applesauce::CF::StringRef,applesauce::CF::StringRef,(decltype(nullptr))0>(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, applesauce::CF::StringRef *a3@<X8>)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v7 = v5;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)a1 + 32))(&cf);
  if (cf)
  {
    applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&cf, a3);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(void *)a3 = 0;
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1BB23EEA0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BB23EE64);
}

double vp::services::User_Defaults::app@<D0>(vp::services::User_Defaults *this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  service_provider = (void *)vp::Service::get_service_provider(this);
  vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(service_provider, &v8);
  uint64_t v6 = *a2;
  if (v6) {
    CFRetain(v6);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v6;
  return result;
}

double __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = vp::vx::data_flow::State<void>::State(a1 + 40, a2 + 40).n128_u64[0];
  return result;
}

uint64_t __Block_byref_object_dispose__1(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 40);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  void v8[2] = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void ___ZN2vp2vx29Voice_Processor_State_Manager30create_state_for_SIGHUP_signalEv_block_invoke(std::pmr *a1)
{
  uint64_t v1 = *(void *)(*((void *)a1 + 4) + 8) + 40;
  uint64_t default_resource = std::pmr::get_default_resource(a1);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value(v1, (vp::vx::data_flow::Value *)v5);
  int v3 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  v5[0] = std::pmr::get_default_resource(v4);
  v5[1] = 0;
  _OWORD v5[2] = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5) = v3 + 1;
  vp::vx::data_flow::State<void>::set_value(v1, (uint64_t)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
}

void sub_1BB23F060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  _Unwind_Resume(a1);
}

void sub_1BB23F074(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BB23F01CLL);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A0E68;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A0E68;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)88>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A0EB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A0EB0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F14A0EB0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0EB0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v4 = *a3;
  CFTypeRef v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
  {
    CFTypeRef v5 = (uint64_t (****)())vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  LOBYTE(__src) = 0;
  BYTE8(__src) = 0;
  uint64_t default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v5);
  int v35 = &v37;
  long long v36 = xmmword_1BB8716B0;
  LODWORD(__p[0]) = 0;
  uint64_t v38 = std::pmr::get_default_resource(default_resource);
  __int16 v39 = &v41;
  long long v40 = xmmword_1BB8716B0;
  boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::assign<vp::vx::Chat_Flavor*>((char *)&v38, (char *)__p, (char *)__p + 4);
  LODWORD(v4boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  BYTE4(v42) |= 1u;
  int v43 = 1065353216;
  CFTypeRef v7 = (vp *)(*(uint64_t (**)(void, uint64_t (****)(), long long *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v6, &__src);
  char v8 = (char)v7;
  if (v7)
  {
    *(_OWORD *)std::string __p = __src;
    unint64_t v23 = default_resource;
    CFTypeRef v24 = &v26;
    long long v25 = xmmword_1BB8716B0;
    boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)&v23, (uint64_t)&default_resource);
    uint64_t v27 = v38;
    CFTypeRef v28 = &v30;
    long long v29 = xmmword_1BB8716B0;
    CFTypeRef v5 = (uint64_t (****)())boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)&v27, (uint64_t)&v38);
    uint64_t v31 = v42;
    int v32 = v43;
  }
  else
  {
    log = vp::get_log(v7);
    CFTypeRef v5 = (uint64_t (****)())os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      uint64_t v11 = (void *)HIBYTE(v23);
      CFComparisonResult v12 = __p[1];
      uint64_t v13 = vp::get_log(log_context_info);
      CFTypeRef v5 = (uint64_t (****)())os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if ((char)v11 >= 0) {
          long long v14 = v11;
        }
        else {
          long long v14 = v12;
        }
        unint64_t v15 = (void **)__p[0];
        if (SHIBYTE(v23) >= 0) {
          unint64_t v15 = __p;
        }
        if (v14) {
          CFTypeRef v16 = " ";
        }
        else {
          CFTypeRef v16 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        long long v45 = v15;
        __int16 v46 = 2080;
        char v47 = v16;
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%s%sfailed to get global configuration", buf, 0x16u);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (*((void *)&v40 + 1)) {
    CFTypeRef v5 = (uint64_t (****)())boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v38, v39);
  }
  if (*((void *)&v36 + 1)) {
    CFTypeRef v5 = (uint64_t (****)())boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&default_resource, v35);
  }
  if ((v8 & 1) == 0)
  {
LABEL_25:
    LOBYTE(__p[0]) = 0;
    LOBYTE(__p[1]) = 0;
    unint64_t v23 = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v5);
    CFTypeRef v24 = &v26;
    long long v25 = xmmword_1BB8716B0;
    LODWORD(__src) = 0;
    uint64_t v27 = std::pmr::get_default_resource(v23);
    CFTypeRef v28 = &v30;
    long long v29 = xmmword_1BB8716B0;
    boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::assign<vp::vx::Chat_Flavor*>((char *)&v27, (char *)&__src, (char *)&__src + 4);
    LODWORD(v3boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
    BYTE4(v31) |= 1u;
    int v32 = 1065353216;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v17);
  *((void *)v4 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Global_Configuration>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v4);
  *(_OWORD *)uint64_t storage = *(_OWORD *)__p;
  *(void *)(storage + 16) = v23;
  *(void *)(storage + 24) = storage + 48;
  *(_OWORD *)(storage + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = xmmword_1BB8716B0;
  boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)(storage + 16), (uint64_t)&v23);
  *(void *)(storage + 56) = v27;
  *(void *)(storage + 64) = storage + 88;
  *(_OWORD *)(storage + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = xmmword_1BB8716B0;
  double result = boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)(storage + 56), (uint64_t)&v27);
  uint64_t v20 = v31;
  uint64_t v21 = *((void *)&v29 + 1);
  *(_DWORD *)(storage + 104) = v32;
  *(void *)(storage + 96) = v20;
  if (v21) {
    double result = boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v27, v28);
  }
  if (*((void *)&v25 + 1)) {
    return boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v23, v24);
  }
  return result;
}

void sub_1BB23F798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 112, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 112, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

vp::vx::Global_Configuration *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::copy_value(uint64_t a1, vp::vx::Global_Configuration **a2, const vp::vx::Global_Configuration **a3)
{
  return vp::vx::Global_Configuration::Global_Configuration(*a2, *a3);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::move_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::Global_Configuration,vp::vx::Global_Configuration,vp::vx::Global_Configuration*>(*a2, *a3);
}

void *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::destroy_value(uint64_t a1, void **a2)
{
  return std::__destroy_at[abi:ne180100]<vp::vx::Global_Configuration,0>(*a2);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::Global_Configuration::operator==(*a2, *a3);
}

void *std::__destroy_at[abi:ne180100]<vp::vx::Global_Configuration,0>(void *result)
{
  uint64_t v1 = result;
  if (result[10]) {
    uint64_t result = boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(result + 7, (void *)result[8]);
  }
  if (v1[5])
  {
    uint64_t v2 = (void *)v1[3];
    return boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(v1 + 2, v2);
  }
  return result;
}

uint64_t vp::vx::Global_Configuration::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a1 + 8) != 0) != (v4 != 0)) {
      return 0;
    }
  }
  else if (*(double *)a1 != *(double *)a2)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 != *(void *)(a2 + 32)) {
    return 0;
  }
  CFTypeRef v7 = *(_DWORD **)(a1 + 24);
  if (v6 && !v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = *(void *)(a2 + 24);
  long long v14 = &v7[v6];
  unint64_t v15 = v7;
  uint64_t v13 = v8;
  uint64_t result = boost::intrusive::algo_equal<boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::intrusive::algo_pred_equal>(&v15, &v14, &v13);
  if (!result) {
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 72);
  if (v10 != *(void *)(a2 + 72)) {
    return 0;
  }
  uint64_t v11 = *(_DWORD **)(a1 + 64);
  if (v10 && !v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = *(void *)(a2 + 64);
  long long v14 = &v11[v10];
  unint64_t v15 = v11;
  uint64_t v13 = v12;
  uint64_t result = boost::intrusive::algo_equal<boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::intrusive::algo_pred_equal>(&v15, &v14, &v13);
  if (result)
  {
    if (*(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
      && ((*(unsigned __int8 *)(a2 + 100) ^ *(unsigned __int8 *)(a1 + 100)) & 1) == 0)
    {
      return *(float *)(a1 + 104) == *(float *)(a2 + 104);
    }
    return 0;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A0F60;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0F60;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + 104);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A0FA8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0FA8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A0FF0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A0FF0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A1038;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1038;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (uint64_t *)vp::vx::data_flow::Value::view_storage(**a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v7);
  *((void *)v3 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v3 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v5;
  result[1] = v6;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 16, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 16, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::copy_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  __n128 result = **a3;
  **a2 = result;
  return result;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::move_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  __n128 result = **a3;
  **a2 = result;
  return result;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::compare_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a2 + 8)) {
    BOOL v3 = *(unsigned char *)(*(void *)a3 + 8) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (*(unsigned char *)(*(void *)a2 + 8) != 0) == (*(unsigned char *)(*(void *)a3 + 8) != 0);
  }
  else {
    return **(double **)a2 == **(double **)a3;
  }
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A10E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A10E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_1F14A10E8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A10E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
LABEL_22:
    LODWORD(v26) = 0;
    WORD2(v26) = 255;
    *((void *)&v26 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 100;
    LOBYTE(v27) = 0;
    BYTE8(v27) = 0;
    v28[0] = 0;
    v28[8] = 0;
    v28[16] = 0;
    unsigned char v28[24] = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    long long v29 = &v30;
    LOBYTE(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    BYTE4(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    BYTE8(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    BYTE12(v3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
    char v33 = 1;
    goto LABEL_25;
  }
  LODWORD(v36) = 0;
  WORD2(v36) = 255;
  *((void *)&v36 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 100;
  LOBYTE(v37) = 0;
  BYTE8(v37) = 0;
  v38[0] = 0;
  char v38[8] = 0;
  v38[16] = 0;
  unsigned char v38[24] = 0;
  long long v40 = 0;
  uint64_t v41 = 0;
  __int16 v39 = &v40;
  LOBYTE(v4boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  BYTE4(v4boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  BYTE8(v4boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  BYTE12(v4boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = 0;
  char v43 = 1;
  uint64_t v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v7 + 24))(v7, v6, &v36);
  if (!v8)
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v12 = v35;
      uint64_t v13 = __p[1];
      long long v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        CFTypeRef v16 = (void **)__p[0];
        if ((v35 & 0x80u) == 0) {
          CFTypeRef v16 = __p;
        }
        if (v15) {
          float v17 = " ";
        }
        else {
          float v17 = "";
        }
        *(_DWORD *)std::string buf = 136315394;
        long long v45 = v16;
        __int16 v46 = 2080;
        char v47 = v17;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%s%sfailed to get uplink configuration", buf, 0x16u);
      }
      if ((char)v35 < 0) {
        operator delete(__p[0]);
      }
    }
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&v39, v40);
    goto LABEL_22;
  }
  long long v26 = v36;
  long long v27 = v37;
  *(_OWORD *)CFTypeRef v28 = *(_OWORD *)v38;
  *(_OWORD *)&v28[9] = *(_OWORD *)&v38[9];
  CFTypeRef v9 = v40;
  long long v29 = v39;
  uint64_t v30 = v40;
  uint64_t v31 = v41;
  if (v41)
  {
    v40[2] = &v30;
    CFTypeRef v9 = 0;
    __int16 v39 = &v40;
    long long v40 = 0;
    uint64_t v41 = 0;
  }
  else
  {
    long long v29 = &v30;
  }
  long long v32 = v42;
  char v33 = v43;
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&v39, v9);
LABEL_25:
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v18);
  *((void *)v4 + boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = 0;
  *((void *)v4 + boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Uplink_Configuration>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v4);
  *(_OWORD *)(storage + 4boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = *(_OWORD *)&v28[9];
  *(_OWORD *)(storage + 16) = v27;
  *(_OWORD *)(storage + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = *(_OWORD *)v28;
  *(_OWORD *)uint64_t storage = v26;
  *(void *)(storage + 64) = v29;
  uint64_t v20 = v30;
  *(void *)(storage + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v30;
  uint64_t v21 = storage + 72;
  uint64_t v22 = v31;
  *(void *)(storage + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v31;
  if (v22)
  {
    unint64_t v23 = 0;
    void v20[2] = v21;
    long long v29 = &v30;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    *(void *)(storage + 64) = v21;
    unint64_t v23 = v30;
  }
  long long v24 = v32;
  *(unsigned char *)(storage + 104) = v33;
  *(_OWORD *)(storage + 88) = v24;
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&v29, v23);
  return result;
}

void sub_1BB2404FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 112, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 112, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::copy_value(uint64_t a1, uint64_t *a2, long long **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  long long v5 = **a3;
  long long v6 = (*a3)[1];
  long long v7 = (*a3)[2];
  *(_OWORD *)(v3 + 4boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = *(long long *)((char *)*a3 + 41);
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v7;
  *(_OWORD *)uint64_t v3 = v5;
  std::map<double,int>::map[abi:ne180100]((uint64_t *)(v3 + 64), (uint64_t)(v4 + 4));
  __n128 result = *(__n128 *)((char *)v4 + 88);
  *(unsigned char *)(v3 + 104) = *((unsigned char *)v4 + 104);
  *(__n128 *)(v3 + 88) = result;
  return result;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::move_value(uint64_t a1, uint64_t *a2, long long **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  long long v5 = **a3;
  long long v6 = (*a3)[1];
  long long v7 = (*a3)[2];
  *(_OWORD *)(v3 + 4boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((void *)this + 1) = *(long long *)((char *)*a3 + 41);
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 3boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v7;
  *(_OWORD *)uint64_t v3 = v5;
  *(void *)(v3 + 64) = *((void *)v4 + 8);
  uint64_t v8 = (void *)v4 + 9;
  uint64_t v9 = *((void *)v4 + 9);
  *(void *)(v3 + 7boost::container::vector<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>,vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::vx::database::v1::syntax::Constraint>>,void>::~vector((void *)this + 2) = v9;
  uint64_t v10 = v3 + 72;
  uint64_t v11 = *((void *)v4 + 10);
  *(void *)(v3 + 8std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *((void *)v4 + 8) = v8;
    *uint64_t v8 = 0;
    *((void *)v4 + 1std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>::reset[abi:ne180100](&a9, 0) = 0;
  }
  else
  {
    *(void *)(v3 + 64) = v10;
  }
  __n128 result = *(__n128 *)((char *)v4 + 88);
  *(unsigned char *)(v3 + 104) = *((unsigned char *)v4 + 104);
  *(__n128 *)(v3 + 88) = result;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::destroy_value(uint64_t a1, uint64_t a2)
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::Uplink_Configuration::operator==(*a2, *a3);
}

uint64_t vp::vx::Uplink_Configuration::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || ((*(_WORD *)(a2 + 4) ^ *(_WORD *)(a1 + 4)) & 0x1FF) != 0
    || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(a2 + 24))
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) != 0) != (*(unsigned char *)(a2 + 24) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(a2 + 40))
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) != 0) != (*(unsigned char *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a2 + 56))
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) != 0) != (*(unsigned char *)(a2 + 56) != 0))
  {
    return 0;
  }
  uint64_t result = std::operator==[abi:ne180100]<double,int,std::less<double>,std::allocator<std::pair<double const,int>>>((void *)(a1 + 64), (double **)(a2 + 64));
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(a1 + 92) && *(unsigned char *)(a2 + 92))
  {
    if (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
LABEL_25:
    if (*(unsigned char *)(a1 + 100) && *(unsigned char *)(a2 + 100))
    {
      if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a1 + 100) != 0) != (*(unsigned char *)(a2 + 100) != 0))
    {
      return 0;
    }
    return *(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104);
  }
  if ((*(unsigned char *)(a1 + 92) != 0) == (*(unsigned char *)(a2 + 92) != 0)) {
    goto LABEL_25;
  }
  return 0;
}

uint64_t std::operator==[abi:ne180100]<double,int,std::less<double>,std::allocator<std::pair<double const,int>>>(void *a1, double **a2)
{
  if ((double *)a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v4 = (double *)*a1;
  uint64_t v2 = (double *)(a1 + 1);
  uint64_t v3 = v4;
  if (v4 == v2) {
    return 1;
  }
  long long v5 = *a2;
  do
  {
    BOOL v6 = v3[4] == v5[4] && *((_DWORD *)v3 + 10) == *((_DWORD *)v5 + 10);
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    uint64_t v8 = (double *)*((void *)v3 + 1);
    uint64_t v9 = v3;
    if (v8)
    {
      do
      {
        uint64_t v3 = v8;
        uint64_t v8 = *(double **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v3 = (double *)*((void *)v9 + 2);
        BOOL v6 = *(void *)v3 == (void)v9;
        uint64_t v9 = v3;
      }
      while (!v6);
    }
    uint64_t v10 = (double *)*((void *)v5 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = *(double **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (double *)*((void *)v5 + 2);
        BOOL v6 = *(void *)v11 == (void)v5;
        long long v5 = v11;
      }
      while (!v6);
    }
    long long v5 = v11;
  }
  while (v3 != v2);
  return v7;
}