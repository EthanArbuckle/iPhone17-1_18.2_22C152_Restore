uint64_t sub_244D69F70(unint64_t **a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(void *)(a2 + 16);
  if (v2 < **a1) {
    **a1 = v2;
  }
  return 0;
}

BOOL sub_244D69F90(uint64_t a1)
{
  sub_244D6A044((uint64_t)v8);
  byte_268EC0288 = *(unsigned char *)a1;
  if (byte_268EC0288)
  {
    uint64_t v2 = *(void *)(a1 + 4);
    dword_268EC0294 = *(_DWORD *)(a1 + 12);
    qword_268EC028C = v2;
  }
  sub_244D6A044((uint64_t)v4);
  if (v8[0] != v4[0]) {
    return 1;
  }
  if (v8[0])
  {
    if (v9 == v5 && v10 == v6) {
      return v11 != v7;
    }
    return 1;
  }
  return 0;
}

void sub_244D6A044(uint64_t a1@<X8>)
{
  if (!byte_268EC0288) {
    goto LABEL_5;
  }
  uint64_t v2 = sub_244CD44AC(&byte_268EC0288);
  int v3 = *(_DWORD *)v2;
  int v4 = *((_DWORD *)v2 + 1);
  int v5 = *((unsigned __int16 *)v2 + 4);
  if (*(_DWORD *)v2 == 500 && v4 == 300)
  {
    if (v5 == 4000)
    {
LABEL_5:
      *(unsigned char *)a1 = 0;
      return;
    }
    int v4 = 300;
  }
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 12) = v5;
}

uint64_t sub_244D6A0B8()
{
  return 0x12C000001F4;
}

uint64_t sub_244D6A0C8(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0) - a3;
  unint64_t v10 = a4;
  do
  {
    if (v9 + v8 >= v10) {
      unsigned int v11 = a2;
    }
    else {
      unsigned int v11 = a1;
    }
    unsigned int v12 = v7;
    v8 += sub_244D68A5C(v11, v7++, 1);
  }
  while (v12 < 4);
  return v8;
}

uint64_t sub_244D6A180()
{
  uint64_t result = qword_268EC0298;
  if (!qword_268EC0298) {
    sub_244E264EC();
  }
  return result;
}

uint64_t sub_244D6A1A4(uint64_t result)
{
  if (result) {
    qword_268EC0298 = result;
  }
  return result;
}

uint64_t sub_244D6A1B4()
{
  uint64_t result = qword_268EC02A0;
  if (!qword_268EC02A0) {
    sub_244E265B4();
  }
  return result;
}

uint64_t sub_244D6A1D8(uint64_t result)
{
  if (result) {
    qword_268EC02A0 = result;
  }
  return result;
}

void sub_244D6A1E8(void *a1@<X8>)
{
  unsigned int v2 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_244CECD5C((char *)&v2, 4uLL, (uint64_t)a1);
  if (!*(_DWORD *)a1)
  {
    srand(v2);
    *(_DWORD *)a1 = 0;
    a1[1] = "src/platform/Entropy.cpp";
    *((_DWORD *)a1 + 4) = 34;
  }
}

void *sub_244D6A250()
{
  return sub_244CB7CA0(&off_26BA16400);
}

BOOL sub_244D6A25C(char *a1, size_t a2, int *a3)
{
  int v3 = *a3;
  unsigned int v4 = *a3 & 0xFF000700;
  if (v4 == 512)
  {
    int v5 = "Not service provisioned";
    if (v3 != 514) {
      int v5 = 0;
    }
    if (v3 == 513) {
      int v6 = "Config not found";
    }
    else {
      int v6 = v5;
    }
    long long v8 = *(_OWORD *)a3;
    uint64_t v9 = *((void *)a3 + 2);
    sub_244CB7C34(a1, a2, "Device Layer", &v8, v6);
  }
  return v4 == 512;
}

const char *sub_244D6A2DC(_DWORD *a1)
{
  if (sub_244CBEE00(a1)) {
    return "IPv6 link-local address";
  }
  if (sub_244CBEDEC(a1)) {
    return "IPv6 unique local address";
  }
  if (sub_244CBEDD8(a1)) {
    return "IPv6 global unicast address";
  }
  return "IPv6 address";
}

uint64_t sub_244D6A348(uint64_t result)
{
  qword_268EC3528 = result;
  return result;
}

uint64_t *sub_244D6A354()
{
  uint64_t result = (uint64_t *)qword_268EC3528;
  if (!qword_268EC3528)
  {
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_268EC0EB0, memory_order_acquire))
    {
      return &qword_268EC02A8;
    }
    else if (__cxa_guard_acquire(&qword_268EC0EB0))
    {
      qword_268EC02A8 = (uint64_t)&unk_26F953730;
      uint64_t v1 = 0xCu;
      do
      {
        *((unsigned char *)&qword_268EC02A8 + v1) = 0;
        v1 += 40;
      }
      while (v1 != 2572);
      xmmword_268EC0CD0 = 0u;
      byte_268EC0CE0 = 0;
      xmmword_268EC0CC0 = 0u;
      xmmword_268EC0CB0 = 0u;
      *(void *)&xmmword_268EC0CD0 = &xmmword_268EC0CC0;
      *((void *)&xmmword_268EC0CC0 + 1) = &xmmword_268EC0CC0;
      byte_268EC0E90 = 0;
      qword_268EC0EA8 = 0;
      xmmword_268EC0CE8 = 0u;
      __cxa_guard_release(&qword_268EC0EB0);
      return &qword_268EC02A8;
    }
    else
    {
      return &qword_268EC02A8;
    }
  }
  return result;
}

BOOL sub_244D6A434(const char *a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  BOOL result = sub_244D77DBC((unsigned int *)&byte_26B0D4370);
  if (!result)
  {
    int v5 = sub_244CC8484(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (a1) {
        int v6 = a1;
      }
      else {
        int v6 = "(null)";
      }
      *(_DWORD *)buf = 136315394;
      long long v8 = v6;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Chip stack locking error at '%s:%d'. Code is unsafe/racy", buf, 0x12u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x1Fu, 1);
    }
    sub_24479F5F0();
  }
  return result;
}

void sub_244D6A574(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_244CB3988((uint64_t)v8);
  sub_244CB39B8((uint64_t)v8, *(void *)a1, *(void *)(a1 + 8));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CB4E58((uint64_t)v8, a4);
  if (!*(_DWORD *)a4) {
    sub_244CB7128(a2, a3, (uint64_t)v8, (uint64_t)a4);
  }
}

uint64_t (***sub_244D6A5F4())()
{
  BOOL result = (uint64_t (***)())qword_268EC0EB8;
  if (!qword_268EC0EB8) {
    return sub_244D6B068();
  }
  return result;
}

uint64_t sub_244D6A608(uint64_t result)
{
  if (result) {
    qword_268EC0EB8 = result;
  }
  return result;
}

void sub_244D6A618()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    unsigned int v2 = "_Init";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x1Fu, 3);
  }
  operator new();
}

uint64_t sub_244D6A7E4(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    a1[9] = 0;
  }
  uint64_t v3 = a1[7];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    a1[7] = 0;
  }
  uint64_t result = a1[8];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    a1[8] = 0;
  }
  return result;
}

void sub_244D6A894(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    sub_244D78A88(v5, a2, a3);
    int v6 = 0;
    int v7 = 94;
  }
  else
  {
    int v7 = 92;
    int v6 = 3;
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a4 + 16) = v7;
}

void sub_244D6A8E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 56))
  {
    sub_244D78E74();
    int v3 = 0;
    int v4 = 101;
  }
  else
  {
    int v4 = 99;
    int v3 = 3;
  }
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v4;
}

uint64_t sub_244D6A93C()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    int v3 = "_IsAdvertisingEnabled";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x1Fu, 3);
  }
  return 0;
}

uint64_t sub_244D6AA10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v5 = "_SetAdvertisingEnabled";
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0x1Fu, 3);
  }
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 113;
  return result;
}

uint64_t sub_244D6AB08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v5 = "_SetAdvertisingMode";
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0x1Fu, 3);
  }
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 119;
  return result;
}

uint64_t sub_244D6AC00()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    int v3 = "_IsAdvertising";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x1Fu, 3);
  }
  return 0;
}

uint64_t sub_244D6ACD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v5 = "_GetDeviceName";
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0x1Fu, 3);
  }
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 131;
  return result;
}

uint64_t sub_244D6ADCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v5 = "_SetDeviceName";
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0x1Fu, 3);
  }
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 137;
  return result;
}

uint64_t sub_244D6AEC4()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    int v3 = "_NumConnections";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x1Fu, 3);
  }
  return 0;
}

uint64_t sub_244D6AF98()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    int v3 = "_OnPlatformEvent";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0x1Fu, 3);
  }
  return result;
}

uint64_t (***sub_244D6B068())()
{
  return &off_26BA16410;
}

void sub_244D6B074(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 150;
}

void sub_244D6B090(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 217;
}

uint64_t sub_244D6B0B0()
{
  return 1;
}

uint64_t sub_244D6B0B8()
{
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_ERROR, "InitiateFactoryReset not implemented", v2, 2u);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result) {
    return sub_244CC4DE0(0x1Fu, 1);
  }
  return result;
}

void sub_244D6B144(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 235;
}

void sub_244D6B164(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 244;
}

void sub_244D6B184(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 253;
}

void sub_244D6B1A4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 262;
}

void sub_244D6B1C4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 271;
}

void sub_244D6B1E4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 280;
}

void sub_244D6B204(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 289;
}

void sub_244D6B224(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 298;
}

void sub_244D6B244(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 307;
}

void sub_244D6B264(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 326;
}

void sub_244D6B284(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 345;
}

void sub_244D6B2A4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 361;
}

void sub_244D6B2C4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 371;
}

void sub_244D6B2E4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 380;
}

void sub_244D6B304(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 389;
}

void sub_244D6B324(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 398;
}

void sub_244D6B344(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 407;
}

void sub_244D6B364(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 416;
}

void sub_244D6B384(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 425;
}

void sub_244D6B3A4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 434;
}

void sub_244D6B3C4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 443;
}

void sub_244D6B3E4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 452;
}

void sub_244D6B404(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 461;
}

void sub_244D6B424(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 470;
}

void sub_244D6B444(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 479;
}

void sub_244D6B468(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v9[0] = a1;
  v9[1] = a2;
  if (a2 == 6)
  {
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0;
    uint64_t v4 = sub_244D6A5F4();
    ((void (*)(uint8_t *__return_ptr))(*v4)[1])(v8);
    if (*(_DWORD *)v8)
    {
      int v5 = 395;
      int v6 = 216;
    }
    else
    {
      int v7 = sub_244CC8484(0x1Fu, "DeviceLayer");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v8 = 0;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Using WiFi MAC for hostname", v8, 2u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0x1Fu, 3);
      }
      sub_2446C1548((uint64_t)v9, 6uLL);
      int v6 = 0;
      int v5 = 392;
    }
  }
  else
  {
    int v5 = 375;
    int v6 = 47;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v5;
}

void sub_244D6B588(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 513;
  *(void *)(a1 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 404;
}

void sub_244D6B5A8(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2 < 4)
  {
    int v4 = 354;
    int v3 = 25;
  }
  else
  {
    int v3 = 0;
    *a1 = 3157553;
    int v4 = 356;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v4;
}

void sub_244D6B5E8(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 1;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 278;
}

void sub_244D6B60C(int *a1@<X1>, uint64_t a2@<X8>)
{
  if (byte_26B0D4308)
  {
    int v4 = *(_DWORD *)sub_244D6C580(&byte_26B0D4308);
    int v5 = 294;
  }
  else
  {
    int v5 = 299;
    int v4 = 750561408;
  }
  *a1 = v4;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = v5;
}

void sub_244D6B678(int a1@<W1>, uint64_t a2@<X8>)
{
  byte_26B0D4308 = 1;
  dword_26B0D430C = a1;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 327;
}

uint64_t sub_244D6B6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 384))(a1, "chip-config", "country-code", a2, a3, a4);
}

uint64_t sub_244D6B6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(void *)a1 + 432))(a1, "chip-factory", "serial-num", a2, a3);
}

uint64_t sub_244D6B72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(void *)a1 + 432))(a1, "chip-factory", "mfg-date", a2, a3);
}

void sub_244D6B76C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(void *)(a1 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 284;
}

uint64_t sub_244D6B78C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(void *)a1 + 408))(a1, "chip-factory", "hardware-ver", a2);
}

uint64_t sub_244D6B7C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(void *)a1 + 408))(a1, "chip-config", "regulatory-location", a2);
}

uint64_t sub_244D6B804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(void *)a1 + 432))(a1, "chip-config", "country-code", a2, a3);
}

void *sub_244D6B844@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = (*(void *(**)(long long *__return_ptr))(*(void *)a1 + 384))(&v10);
  *(_OWORD *)a4 = v10;
  *(void *)(a4 + 16) = v11;
  if (!*(_DWORD *)a4)
  {
    if (a3)
    {
      if (!*a2) {
        return result;
      }
      int v8 = 520;
      int v9 = 30;
    }
    else
    {
      int v8 = 519;
      int v9 = 25;
    }
    *(_DWORD *)a4 = v9;
    *(void *)(a4 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
    *(_DWORD *)(a4 + 16) = v8;
  }
  return result;
}

uint64_t sub_244D6B91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(void *)a1 + 432))(a1, "chip-config", "unique-id", a2, a3);
}

char *sub_244D6B95C@<X0>(unsigned char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_244CE98BC();
  return sub_244CC58A0((char *)&v7, 8, a1, a2, 3u, a3);
}

uint64_t sub_244D6B9B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(void *)a1 + 360))(a1, "chip-config", "fail-safe-armed", a2);
}

uint64_t sub_244D6B9F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(void *)a1 + 400))(a1, "chip-config", "fail-safe-armed", a2);
}

void *sub_244D6BA30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v11 = 0;
  *(void *)a1 = 0;
  uint64_t v4 = sub_244D6A1B4();
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 24))(v4, (char *)&v11 + 2);
  if (!*(_DWORD *)a2)
  {
    *(_WORD *)(a1 + 3) = HIWORD(v11);
    uint64_t v6 = sub_244D6A1B4();
    uint64_t result = (*(void *(**)(long long *__return_ptr))(*(void *)v6 + 40))(&v9);
    *(_OWORD *)a2 = v9;
    *(void *)(a2 + 16) = v10;
    if (!*(_DWORD *)a2)
    {
      *(_WORD *)(a1 + 5) = HIWORD(v11);
      uint64_t v7 = sub_244D6A180();
      uint64_t result = (*(void *(**)(long long *__return_ptr))(*(void *)v7 + 16))(&v9);
      *(_OWORD *)a2 = v9;
      *(void *)(a2 + 16) = v10;
      if (!*(_DWORD *)a2)
      {
        int v8 = BYTE1(v11) & 0xF;
        *(_WORD *)(a1 + 1) = v11 & 0xFFF | (((*(unsigned char *)(a1 + 2) >> 4) & 0xF) << 12);
        *(unsigned char *)(a1 + 2) = v8;
      }
    }
  }
  return result;
}

uint64_t sub_244D6BB58(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "Device Configuration:", (uint8_t *)&buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  uint64_t v3 = sub_244D6A1B4();
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v3 + 72))(v32);
  int v4 = *(_DWORD *)v32;
  long long v30 = v33;
  int v31 = v34;
  int v5 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      p_uint64_t buf = "(not set)";
    }
    else {
      p_uint64_t buf = (const char *)&buf;
    }
    *(_DWORD *)v32 = 136315138;
    *(void *)&long long v33 = p_buf;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "  Serial Number: %s", v32, 0xCu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  *(_WORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v3 + 24))(&buf, v3, v32);
  if (buf) {
    *(_WORD *)v32 = 0;
  }
  uint64_t v7 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    __int16 v26 = 1024;
    int v27 = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "  Vendor Id: %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  *(_WORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v3 + 40))(&buf, v3, v32);
  if (buf) {
    *(_WORD *)v32 = 0;
  }
  int v8 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    __int16 v26 = 1024;
    int v27 = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "  Product Id: %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(void *)v3 + 32))(v32, v3, &buf, 33);
  int v9 = *(_DWORD *)v32;
  long long v30 = v33;
  int v31 = v34;
  uint64_t v10 = sub_244CC8484(0x1Fu, "DeviceLayer");
  int v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v32 = v9;
      long long v33 = v30;
      int v34 = v31;
      unsigned int v12 = sub_244CB7B34((const char **)v32, 1);
      *(_DWORD *)v32 = 136315138;
      *(void *)&long long v33 = v12;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "  Product Name: n/a (%s)", v32, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_DWORD *)v32 = v9;
      long long v33 = v30;
      int v34 = v31;
      sub_244CB7B34((const char **)v32, 1);
      uint64_t v13 = 1;
LABEL_33:
      sub_244CC4DE0(0x1Fu, v13);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v32 = 136315138;
      *(void *)&long long v33 = &buf;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "  Product Name: %s", v32, 0xCu);
    }
    if (sub_244CC4E58(2u))
    {
      uint64_t v13 = 2;
      goto LABEL_33;
    }
  }
  *(_WORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v3 + 88))(&buf, v3, v32);
  if (buf) {
    *(_WORD *)v32 = 0;
  }
  v14 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "  Hardware Version: %u", (uint8_t *)&buf, 8u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  uint64_t v15 = sub_244D6A180();
  uint64_t v16 = v15;
  *(_DWORD *)v32 = 0;
  if (!v15
    || ((*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v15 + 56))(&buf, v15, v32),
        buf))
  {
    *(_DWORD *)v32 = 0;
  }
  v17 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = *(_DWORD *)v32;
    _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_DEFAULT, "  Setup Pin Code (0 for UNKNOWN/ERROR): %u", (uint8_t *)&buf, 8u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  *(_WORD *)v32 = 0;
  if (!v16
    || ((*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v16 + 16))(&buf, v16, v32),
        buf))
  {
    *(_WORD *)v32 = -1;
  }
  v18 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    __int16 v26 = 1024;
    int v27 = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_DEFAULT, "  Setup Discriminator (0xFFFF for UNKNOWN/ERROR): %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  *(_WORD *)v32 = 0;
  __int16 v24 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *, char *, __int16 *))(*(void *)v3 + 80))(&buf, v3, v32, (char *)&v24 + 1, &v24);
  int v19 = buf;
  v20 = sub_244CC8484(0x1Fu, "DeviceLayer");
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    if (v21)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_DEFAULT, "  Manufacturing Date: (not set)", (uint8_t *)&buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
LABEL_62:
    }
      sub_244CC4DE0(0x1Fu, 2);
  }
  else
  {
    if (v21)
    {
      LODWORD(buf) = 67109632;
      HIDWORD(buf) = *(unsigned __int16 *)v32;
      __int16 v26 = 1024;
      int v27 = HIBYTE(v24);
      __int16 v28 = 1024;
      int v29 = v24;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_DEFAULT, "  Manufacturing Date: %04u-%02u-%02u", (uint8_t *)&buf, 0x14u);
    }
    if (sub_244CC4E58(2u)) {
      goto LABEL_62;
    }
  }
  *(_DWORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)a1 + 248))(&buf, a1, v32);
  if (buf) {
    *(_DWORD *)v32 = 0;
  }
  v22 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(_DWORD *)v32;
    __int16 v26 = 1024;
    int v27 = *(_DWORD *)v32;
    _os_log_impl(&dword_2446BD000, v22, OS_LOG_TYPE_DEFAULT, "  Device Type: %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    return sub_244CC4DE0(0x1Fu, 2);
  }
  return result;
}

void sub_244D6C460(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 0xFFFF;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 334;
}

void sub_244D6C484(char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2 < 0xD)
  {
    int v4 = 649;
    int v3 = 25;
  }
  else
  {
    int v3 = 0;
    strcpy(a1, "Test Kitchen");
    int v4 = 651;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v4;
}

void sub_244D6C4D0(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 33;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 341;
}

void sub_244D6C4F4(unsigned char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    int v3 = 0;
    *a1 = 0;
    int v4 = 659;
  }
  else
  {
    int v4 = 657;
    int v3 = 25;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v4;
}

void sub_244D6C528(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 36;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 348;
}

void sub_244D6C54C(unsigned char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    int v3 = 0;
    *a1 = 0;
    int v4 = 667;
  }
  else
  {
    int v4 = 665;
    int v3 = 25;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v4;
}

unsigned char *sub_244D6C580(unsigned char *a1)
{
  if (!*a1) {
    sub_244E24238();
  }
  return a1 + 4;
}

uint64_t *sub_244D6C5A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268EBDF80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268EBDF80))
  {
    byte_268EBDF38 = 0;
    qword_268EBDF30 = (uint64_t)&unk_26F9567C0;
    xmmword_268EBDF68 = 0u;
    unk_268EBDF48 = 0u;
    byte_268EBDF78 = 0;
    xmmword_268EBDF58 = 0u;
    *((void *)&xmmword_268EBDF58 + 1) = &xmmword_268EBDF58;
    *(void *)&xmmword_268EBDF68 = &xmmword_268EBDF58;
    __cxa_guard_release(&qword_268EBDF80);
  }
  return &qword_268EBDF30;
}

uint64_t *sub_244D6C634()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268EBDFD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268EBDFD8))
  {
    byte_268EBDF90 = 0;
    qword_268EBDF88 = (uint64_t)&unk_26F956858;
    xmmword_268EBDFC0 = 0u;
    unk_268EBDFA0 = 0u;
    byte_268EBDFD0 = 0;
    xmmword_268EBDFB0 = 0u;
    *((void *)&xmmword_268EBDFB0 + 1) = &xmmword_268EBDFB0;
    *(void *)&xmmword_268EBDFC0 = &xmmword_268EBDFB0;
    __cxa_guard_release(&qword_268EBDFD8);
  }
  return &qword_268EBDF88;
}

uint64_t sub_244D6C6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = &xmmword_268EC3488;
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    uint64_t v2 = (long long *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    *((void *)v2 + 7) = 0;
    *((void *)v2 + 8) = 0;
    *((void *)v2 + 9) = 0;
  }

  return nullsub_13(v2, a2);
}

uint64_t sub_244D6C71C()
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    v0 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v0[7] = 0;
    v0[8] = 0;
    v0[9] = 0;
  }

  return sub_244D6A93C();
}

uint64_t sub_244D6C774@<X0>(uint64_t a1@<X8>)
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    uint64_t v2 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }

  return sub_244D6AA10(a1);
}

uint64_t sub_244D6C7E4()
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    v0 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v0[7] = 0;
    v0[8] = 0;
    v0[9] = 0;
  }

  return sub_244D6AC00();
}

uint64_t sub_244D6C83C@<X0>(uint64_t a1@<X8>)
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    uint64_t v2 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }

  return sub_244D6AB08(a1);
}

uint64_t sub_244D6C8AC@<X0>(uint64_t a1@<X8>)
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    uint64_t v2 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }

  return sub_244D6ACD4(a1);
}

uint64_t sub_244D6C92C@<X0>(uint64_t a1@<X8>)
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    uint64_t v2 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }

  return sub_244D6ADCC(a1);
}

uint64_t sub_244D6C99C()
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    v0 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v0[7] = 0;
    v0[8] = 0;
    v0[9] = 0;
  }

  return sub_244D6AEC4();
}

const char *sub_244D6C9F4(unsigned int a1)
{
  if (a1 > 2) {
    return "(unknown)";
  }
  else {
    return off_2651A9038[a1];
  }
}

void sub_244D6CA18(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/platform/Darwin/ConnectivityManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 66;
}

double sub_244D6CA34@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 45;
  *(_OWORD *)a1 = xmmword_2651A9008;
  *(void *)(a1 + 16) = 79;
  return result;
}

double sub_244D6CA50@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 45;
  *(_OWORD *)a1 = xmmword_2651A9020;
  *(void *)(a1 + 16) = 123;
  return result;
}

uint64_t sub_244D6CA6C(void *a1)
{
  *a1 = &unk_26F9567C0;
  sub_244D6CBC8(a1 + 3);

  return sub_244D6CB7C((uint64_t)a1);
}

void sub_244D6CAC0(void *a1)
{
  *a1 = &unk_26F9567C0;
  sub_244D6CBC8(a1 + 3);
  sub_244D6CB7C((uint64_t)a1);

  JUMPOUT(0x245695FA0);
}

_DWORD *sub_244D6CB28(uint64_t a1)
{
  return sub_244D6CBF8((unint64_t *)(a1 + 24), a1);
}

void sub_244D6CB34(uint64_t a1, void *a2)
{
}

uint64_t sub_244D6CB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  int v4 = &v3;
  return sub_244CC6478((void *)(a1 + 40), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_244D6CD70);
}

uint64_t sub_244D6CB7C(uint64_t result)
{
  *(void *)double result = &unk_26F956820;
  if ((*(unsigned __int8 *)(result + 8) | 4) != 4) {
    sub_244E26734();
  }
  *(unsigned char *)(result + 8) = 5;
  return result;
}

uint64_t *sub_244D6CBC8(uint64_t *result)
{
  if (!byte_268EC3510)
  {
    if (*result) {
      sub_244E267C4(result);
    }
  }
  return result;
}

_DWORD *sub_244D6CBF8(unint64_t *a1, uint64_t a2)
{
  int v4 = sub_244CC4D84(0x50uLL);
  int v5 = v4;
  if (v4)
  {
    v4[2] = 1;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = a2;
    *((unsigned char *)v4 + 32) = 0;
    *((void *)v4 + 5) = 0;
    *((void *)v4 + 6) = 0;
    v4[14] = -1;
    *(void *)int v4 = &unk_26F953560;
    v4[18] = 0;
    uint64_t v6 = sub_244CC4D84(0x18uLL);
    if (v6)
    {
      *uint64_t v6 = v5;
      v6[1] = a1 + 2;
      v6[2] = 0;
      v6[2] = a1[4];
      *(void *)(a1[4] + 8) = v6;
      a1[4] = (unint64_t)v6;
      unint64_t v7 = a1[1];
      unint64_t v8 = *a1 + 1;
      *a1 = v8;
      if (v8 > v7) {
        a1[1] = v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_244D6CCC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    int v5 = v4;
    *int v4 = 0;
    (*(void (**)(void *))(*(void *)a2 + 40))(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244D6CD70(uint64_t (***a1)(uint64_t), uint64_t a2)
{
  return (**a1)(a2);
}

uint64_t sub_244D6CD80(void *a1)
{
  *a1 = &unk_26F956858;
  sub_244D6CBC8(a1 + 3);

  return sub_244D6CE90((uint64_t)a1);
}

void sub_244D6CDD4(void *a1)
{
  *a1 = &unk_26F956858;
  sub_244D6CBC8(a1 + 3);
  sub_244D6CE90((uint64_t)a1);

  JUMPOUT(0x245695FA0);
}

char *sub_244D6CE3C(uint64_t a1)
{
  return sub_244D6CEDC((unint64_t *)(a1 + 24), a1);
}

void sub_244D6CE48(uint64_t a1, void *a2)
{
}

uint64_t sub_244D6CE50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  int v4 = &v3;
  return sub_244CC6478((void *)(a1 + 40), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_244D6D060);
}

uint64_t sub_244D6CE90(uint64_t result)
{
  *(void *)double result = &unk_26F9568B8;
  if ((*(unsigned __int8 *)(result + 8) | 4) != 4) {
    sub_244E26734();
  }
  *(unsigned char *)(result + 8) = 5;
  return result;
}

char *sub_244D6CEDC(unint64_t *a1, uint64_t a2)
{
  int v4 = (char *)sub_244CC4D84(0x88uLL);
  int v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = 1;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = a2;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *(_OWORD *)(v4 + 73) = 0u;
    v4[89] = 1;
    *((void *)v4 + 12) = 0;
    *((void *)v4 + 13) = 0;
    *(void *)(v4 + 116) = 0xFFFFFFFF00000000;
    *(void *)int v4 = &unk_26F953398;
    uint64_t v6 = sub_244CC4D84(0x18uLL);
    if (v6)
    {
      *uint64_t v6 = v5;
      v6[1] = a1 + 2;
      v6[2] = 0;
      v6[2] = a1[4];
      *(void *)(a1[4] + 8) = v6;
      a1[4] = (unint64_t)v6;
      unint64_t v7 = a1[1];
      unint64_t v8 = *a1 + 1;
      *a1 = v8;
      if (v8 > v7) {
        a1[1] = v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_244D6CFB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    int v5 = v4;
    *int v4 = 0;
    (*(void (**)(void *))(*(void *)a2 + 56))(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244D6D060(uint64_t (***a1)(uint64_t), uint64_t a2)
{
  return (**a1)(a2);
}

__n128 sub_244D6D0E8@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  if (byte_26B0D43D0)
  {
    for (i = (void **)qword_26B0D43B8; i != (void **)qword_26B0D43C0; ++i)
    {
      if (*i == a1)
      {
        if (a3->n128_u32[0])
        {
          unint64_t v9 = a3[1].n128_u64[0];
          __n128 v8 = *a3;
          (*(void (**)(void *, uint64_t, __n128 *))(*(void *)a1 + 16))(a1, a2, &v8);
        }
        else
        {
          (*(void (**)(void *))(*(void *)a1 + 24))(a1);
        }
        goto LABEL_8;
      }
    }
  }
  else
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D224((uint64_t)a1, a1);
LABEL_8:
  __n128 result = *a3;
  *a4 = *a3;
  a4[1].n128_u64[0] = a3[1].n128_u64[0];
  return result;
}

void **sub_244D6D1D8@<X0>(void **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (i = *result; ; ++i)
  {
    if (i == result[1])
    {
      int v4 = 285;
      int v5 = 16;
      goto LABEL_7;
    }
    if (*i == a2) {
      break;
    }
  }
  int v5 = 0;
  int v4 = 281;
LABEL_7:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void sub_244D6D224(uint64_t a1, void *a2)
{
  uint64_t v3 = (_DNSServiceRef_t *)*((void *)a2 + 3);
  if (v3)
  {
    DNSServiceRefDeallocate(v3);
    *((void *)a2 + 3) = 0;
  }
  (**(void (***)(void *))a2)(a2);

  j__free(a2);
}

double sub_244D6D290@<D0>(void *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 v10 = *a2;
  unint64_t v11 = a2[1].n128_u64[0];
  uint64_t v6 = sub_244CB7B34((const char **)&v10, 1);
  __n128 v8 = *a2;
  unint64_t v9 = a2[1].n128_u64[0];
  *(void *)&double result = sub_244D6D0E8(a1, (uint64_t)v6, &v8, a3).n128_u64[0];
  return result;
}

double sub_244D6D308@<D0>(void *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = sub_244D76610(a2);
  sub_244D76850(a2, (uint64_t)&v8);
  *(void *)&double result = sub_244D6D0E8(a1, (uint64_t)v6, &v8, a3).n128_u64[0];
  return result;
}

void ***sub_244D6D36C(void ***a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      sub_244D6D224((uint64_t)a1, *v2);
      uint64_t v3 = v1[1];
      int64_t v4 = (char *)v3 - (char *)(v2 + 1);
      if (v3 != v2 + 1) {
        a1 = (void ***)memmove(v2, v2 + 1, (char *)v3 - (char *)(v2 + 1));
      }
      v1[1] = (void **)((char *)v2 + v4);
    }
    while (v2 != (void **)((char *)v2 + v4));
    uint64_t v2 = *v1;
  }
  if (v2)
  {
    v1[1] = v2;
    operator delete(v2);
  }
  return v1;
}

void sub_244D6D3F4(void **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
    int v9 = 174;
LABEL_28:
    *(_DWORD *)(a3 + 16) = v9;
    return;
  }
  int v5 = (_DNSServiceRef_t *)a2[3];
  if (!v5)
  {
    sub_244D6D224((uint64_t)a1, a2);
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
    int v9 = 178;
    goto LABEL_28;
  }
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  uint64_t v7 = DNSServiceSetDispatchQueue(v5, (dispatch_queue_t)qword_26B0D4398);
  if (!v7)
  {
    unint64_t v10 = (unint64_t)a1[2];
    unint64_t v11 = a1[1];
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v13 = ((char *)v11 - (unsigned char *)*a1) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        abort();
      }
      uint64_t v14 = v10 - (void)*a1;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        v17 = (char *)sub_244CAC704((uint64_t)(a1 + 2), v16);
      }
      else {
        v17 = 0;
      }
      v18 = &v17[8 * v13];
      int v19 = &v17[8 * v16];
      *(void *)v18 = a2;
      unsigned int v12 = v18 + 8;
      BOOL v21 = (char *)*a1;
      v20 = (char *)a1[1];
      if (v20 != *a1)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        v20 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v12;
      a1[2] = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *unint64_t v11 = a2;
      unsigned int v12 = v11 + 1;
    }
    a1[1] = v12;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
    int v9 = 190;
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  sub_244D6D224(v7, a2);

  sub_244D76850(v8, a3);
}

uint64_t sub_244D6D5B8(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v5 = 0;
  while (*(void *)&v3[v5] != a2)
  {
    v5 += 8;
    if (&v3[v5] == v2) {
      return 0;
    }
  }
  uint64_t v7 = &v3[v5];
  uint64_t v8 = &v3[v5 + 8];
  int64_t v9 = v2 - v8;
  if (v2 != v8) {
    memmove(&v3[v5], v8, v2 - v8);
  }
  a1[1] = &v7[v9];
  return 1;
}

void sub_244D6D63C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  int64_t v4 = (unsigned char *)a1[1];
  if ((unsigned char *)*a1 == v4)
  {
LABEL_5:
    int v9 = 16;
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = 0;
    while (*(void **)(v5 + v8) != a2)
    {
      v8 += 8;
      if ((unsigned char *)(v5 + v8) == v4) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = v5 + v8;
    unint64_t v11 = (unsigned char *)(v5 + v8 + 8);
    int64_t v12 = v4 - v11;
    if (v4 != v11) {
      a1 = memmove((void *)(v5 + v8), v11, v4 - v11);
    }
    v7[1] = v10 + v12;
    sub_244D6D224((uint64_t)a1, a2);
    int v9 = 0;
  }
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a3 + 16) = 218;
}

void sub_244D6D6F0(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_12:
    int v12 = 16;
  }
  else
  {
    uint64_t v7 = a1;
    char v8 = 0;
    do
    {
      int v9 = *(void **)v5;
      if (*(_DWORD *)(*(void *)v5 + 8) == a2)
      {
        while (1)
        {
          sub_244D6D224((uint64_t)a1, v9);
          uint64_t v10 = v7[1];
          uint64_t v11 = v10 - (v5 + 8);
          if (v10 != v5 + 8) {
            a1 = memmove((void *)v5, (const void *)(v5 + 8), v10 - (v5 + 8));
          }
          uint64_t v4 = v5 + v11;
          v7[1] = v5 + v11;
          if (v5 == v5 + v11) {
            goto LABEL_11;
          }
          int v9 = *(void **)v5;
          if (*(_DWORD *)(*(void *)v5 + 8) != a2)
          {
            char v8 = 1;
            break;
          }
        }
      }
      v5 += 8;
    }
    while (v5 != v4);
    if ((v8 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    int v12 = 0;
  }
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a3 + 16) = 239;
}

uint64_t sub_244D6D7C0@<X0>(char *__s@<X1>, uint64_t result@<X0>, const char *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  if (*(void *)result != v6)
  {
    uint64_t v11 = result;
    do
    {
      double result = *(void *)v7;
      if (!*(_DWORD *)(*(void *)v7 + 8))
      {
        double result = sub_244D6D864(result, __s, a3);
        if (result)
        {
          int v12 = 0;
          *a4 = *(void *)v7;
          goto LABEL_8;
        }
        uint64_t v6 = *(void *)(v11 + 8);
      }
      v7 += 8;
    }
    while (v7 != v6);
  }
  int v12 = 16;
LABEL_8:
  *(_DWORD *)a5 = v12;
  *(void *)(a5 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a5 + 16) = 303;
  return result;
}

BOOL sub_244D6D864(uint64_t a1, char *__s, const char *a3)
{
  uint64_t v6 = (void *)(a1 + 40);
  size_t v7 = strlen(__s);
  if (*(char *)(a1 + 63) < 0)
  {
    if (v7 == *(void *)(a1 + 48))
    {
      if (v7 == -1) {
        goto LABEL_18;
      }
      uint64_t v6 = (void *)*v6;
      goto LABEL_8;
    }
    return 0;
  }
  if (v7 != *(unsigned __int8 *)(a1 + 63)) {
    return 0;
  }
  if (v7 == -1) {
    goto LABEL_18;
  }
LABEL_8:
  if (memcmp(v6, __s, v7)) {
    return 0;
  }
  int v9 = (void *)(a1 + 64);
  size_t v10 = strlen(a3);
  if (*(char *)(a1 + 87) < 0)
  {
    if (v10 != *(void *)(a1 + 72)) {
      return 0;
    }
    if (v10 == -1) {
      goto LABEL_18;
    }
    int v9 = (void *)*v9;
  }
  else
  {
    if (v10 != *(unsigned __int8 *)(a1 + 87)) {
      return 0;
    }
    if (v10 == -1) {
LABEL_18:
    }
      abort();
  }
  return memcmp(v9, a3, v10) == 0;
}

uint64_t sub_244D6D954(uint64_t **a1, char *__s)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 0;
  }
  while (*(_DWORD *)(*v2 + 8) != 3 || !sub_244D6D9BC(*v2, __s))
  {
    if (++v2 == v3) {
      return 0;
    }
  }
  return *v2;
}

BOOL sub_244D6D9BC(uint64_t a1, char *__s)
{
  uint64_t v4 = (void *)(a1 + 72);
  size_t v5 = strlen(__s);
  if (*(char *)(a1 + 95) < 0)
  {
    if (v5 == *(void *)(a1 + 80))
    {
      if (v5 == -1) {
        goto LABEL_10;
      }
      uint64_t v4 = (void *)*v4;
      return memcmp(v4, __s, v5) == 0;
    }
  }
  else if (v5 == *(unsigned __int8 *)(a1 + 95))
  {
    if (v5 == -1) {
LABEL_10:
    }
      abort();
    return memcmp(v4, __s, v5) == 0;
  }
  return 0;
}

uint64_t sub_244D6DA50(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t result = *v2;
    if (*(_DWORD *)(*v2 + 8) == 2 && *(void *)(result + 16) == a2) {
      return result;
    }
    ++v2;
  }
  return 0;
}

uint64_t sub_244D6DA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26F9568F0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v7 = a1 + 64;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 128) = -1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 32) = a4;
  MEMORY[0x245695E30](a1 + 40);
  MEMORY[0x245695E30](v7, a3);
  return a1;
}

void sub_244D6DB24(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v12 = a2;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Mdns: Register failure (%s)", buf, 0xCu);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0x22u, 1);
  }
  uint64_t v7 = (void (*)(uint64_t, void, void, long long *))a1[4];
  uint64_t v8 = a1[2];
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  v7(v8, 0, 0, &v9);
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D63C(&qword_26B0D43B8, a1, (uint64_t)buf);
}

void sub_244D6DC5C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    sub_2446DA130(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  __n128 v2 = sub_244D7613C(&__p, (uint64_t)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = *(void (**)(uint64_t, void **, void *, int *, __n128))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v13 >= 0) {
    size_t v5 = v12;
  }
  else {
    size_t v5 = (void **)v12[0];
  }
  uint64_t v6 = (void *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v6 = (void *)*v6;
  }
  int v8 = 0;
  long long v9 = "src/platform/Darwin/DnssdContexts.cpp";
  int v10 = 352;
  v3(v4, v5, v6, &v8, v2);
  sub_244D71A6C(a1 + 88, v7);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

uint64_t sub_244D6DD34(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  *(void *)uint64_t result = &unk_26F956920;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(unsigned char *)(result + 72) = 0;
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 40) = a3;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 32) = a4;
  return result;
}

void sub_244D6DD70(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a3 == 116 && *(unsigned char *)(a1 + 72))
  {
    uint64_t v6 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Mdns: Browse canceled", buf, 2u);
    }
    if (sub_244CC4E58(2u))
    {
      uint64_t v7 = 2;
LABEL_11:
      sub_244CC4DE0(0x22u, v7);
    }
  }
  else
  {
    int v8 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v14 = a2;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Mdns: Browse failure (%s)", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      uint64_t v7 = 1;
      goto LABEL_11;
    }
  }
  long long v9 = *(void (**)(uint64_t, void, void, uint64_t, long long *))(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 16);
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  v9(v10, 0, 0, 1, &v11);
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D63C(&qword_26B0D43B8, (void *)a1, (uint64_t)buf);
}

void sub_244D6DF28()
{
  v0 = sub_244CC8484(0x1Bu, "Support");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315650;
    __n128 v2 = "src/platform/Darwin/DnssdContexts.cpp";
    __int16 v3 = 1024;
    int v4 = 391;
    __int16 v5 = 2080;
    uint64_t v6 = "false";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0x1Bu, 1);
  }
  abort();
}

void sub_244D6DFF0(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  __n128 v2 = &unk_268EC3000;
  qword_268EC3538 = a1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  int v4 = (uint64_t *)(a1 + 48);
  if (v3 != v5)
  {
    v37 = (uint64_t *)(a1 + 48);
    do
    {
      sub_244D70814((uint64_t)&v41, v3);
      uint64_t v6 = v39;
      if (v39 >= v40)
      {
        unint64_t v15 = 0x86BCA1AF286BCA1BLL * ((v39 - (unsigned char *)v38) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0x1AF286BCA1AF286) {
          abort();
        }
        if (0xD79435E50D79436 * ((v40 - (unsigned char *)v38) >> 3) > v16) {
          unint64_t v16 = 0xD79435E50D79436 * ((v40 - (unsigned char *)v38) >> 3);
        }
        if (0x86BCA1AF286BCA1BLL * ((v40 - (unsigned char *)v38) >> 3) >= 0xD79435E50D7943) {
          unint64_t v17 = 0x1AF286BCA1AF286;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          v18 = (char *)sub_244D70B70((uint64_t)&v40, v17);
        }
        else {
          v18 = 0;
        }
        int v19 = &v18[8 * ((v39 - (unsigned char *)v38) >> 3)];
        long long v20 = v42;
        *(_OWORD *)int v19 = v41;
        *((_OWORD *)v19 + 1) = v20;
        long long v21 = v43;
        long long v22 = v44;
        long long v23 = *(_OWORD *)v45;
        *(_OWORD *)(v19 + 74) = *(_OWORD *)&v45[10];
        *((_OWORD *)v19 + 3) = v22;
        *((_OWORD *)v19 + 4) = v23;
        *((_OWORD *)v19 + 2) = v21;
        *((_DWORD *)v19 + 23) = v46;
        long long v25 = v48;
        long long v24 = v49;
        long long v26 = v47;
        *((void *)v19 + 18) = v50;
        *((_OWORD *)v19 + 7) = v25;
        *((_OWORD *)v19 + 8) = v24;
        *((_OWORD *)v19 + 6) = v26;
        __int16 v28 = (char *)v38;
        int v27 = v39;
        int v29 = &v18[152 * v15];
        if (v39 != v38)
        {
          do
          {
            long long v30 = *(_OWORD *)(v27 - 152);
            *(_OWORD *)(v29 - 136) = *(_OWORD *)(v27 - 136);
            *(_OWORD *)(v29 - 152) = v30;
            long long v31 = *(_OWORD *)(v27 - 120);
            long long v32 = *(_OWORD *)(v27 - 104);
            long long v33 = *(_OWORD *)(v27 - 88);
            *(_OWORD *)(v29 - 78) = *(_OWORD *)(v27 - 78);
            *(_OWORD *)(v29 - 88) = v33;
            *(_OWORD *)(v29 - 104) = v32;
            *(_OWORD *)(v29 - 120) = v31;
            *((_DWORD *)v29 - 15) = *((_DWORD *)v27 - 15);
            long long v34 = *(_OWORD *)(v27 - 56);
            long long v35 = *(_OWORD *)(v27 - 40);
            long long v36 = *(_OWORD *)(v27 - 24);
            *((void *)v29 - 1) = *((void *)v27 - 1);
            *(_OWORD *)(v29 - 24) = v36;
            *(_OWORD *)(v29 - 40) = v35;
            *(_OWORD *)(v29 - 56) = v34;
            v29 -= 152;
            v27 -= 152;
          }
          while (v27 != v28);
          int v27 = (char *)v38;
        }
        uint64_t v14 = v19 + 152;
        v38 = v29;
        v39 = v19 + 152;
        v40 = &v18[152 * v17];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        long long v7 = v42;
        *(_OWORD *)v39 = v41;
        *((_OWORD *)v6 + 1) = v7;
        long long v8 = v43;
        long long v9 = v44;
        long long v10 = *(_OWORD *)v45;
        *(_OWORD *)(v6 + 74) = *(_OWORD *)&v45[10];
        *((_OWORD *)v6 + 3) = v9;
        *((_OWORD *)v6 + 4) = v10;
        *((_OWORD *)v6 + 2) = v8;
        *((_DWORD *)v6 + 23) = v46;
        long long v11 = v47;
        long long v12 = v48;
        long long v13 = v49;
        *((void *)v6 + 18) = v50;
        *((_OWORD *)v6 + 7) = v12;
        *((_OWORD *)v6 + 8) = v13;
        *((_OWORD *)v6 + 6) = v11;
        uint64_t v14 = v6 + 152;
      }
      v39 = v14;
      if (v52 < 0) {
        operator delete(__p);
      }
      v3 += 176;
    }
    while (v3 != v5);
    __n128 v2 = (void *)&unk_268EC3000;
    int v4 = v37;
  }
  qword_268EC3540 = (uint64_t)&v38;
  (*(void (**)(void))(a1 + 40))(*(void *)(a1 + 16));
  qword_268EC3540 = 0;
  v2[167] = 0;
  sub_244D70A70(v4);
  *(unsigned char *)(a1 + 72) = 1;
  if (v38)
  {
    v39 = (char *)v38;
    operator delete(v38);
  }
}

void sub_244D6E314(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if ((a2 & 2) != 0)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, a3, a4, a5, a6);
    if (a2) {
      return;
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a3, a4, a5, a6);
    if (a2) {
      return;
    }
  }

  sub_244D6DFF0((uint64_t)a1);
}

void sub_244D6E3D4(uint64_t a1, const char *a2, char *a3, char *a4, int a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v10 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    long long v11 = "(null)";
    *(_DWORD *)uint64_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "OnBrowseAdd";
    if (a2) {
      long long v12 = a2;
    }
    else {
      long long v12 = "(null)";
    }
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v12;
    if (a3) {
      long long v13 = a3;
    }
    else {
      long long v13 = "(null)";
    }
    *(_WORD *)&buf[22] = 2080;
    if (a4) {
      long long v11 = a4;
    }
    *(void *)&buf[24] = v13;
    LOWORD(v48) = 2080;
    *(void *)((char *)&v48 + 2) = v11;
    WORD5(v48) = 1024;
    HIDWORD(v48) = a5;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  sub_244D6E73C(a3, a2, *(unsigned char *)(a1 + 32), a5, (uint64_t)buf);
  sub_244D70AC0(&__p, a4);
  long long v44 = v48;
  long long v45 = v49;
  v46[0] = *(_OWORD *)v50;
  *(_OWORD *)((char *)v46 + 10) = *(_OWORD *)&v50[10];
  long long v42 = *(_OWORD *)buf;
  long long v43 = *(_OWORD *)&buf[16];
  int v14 = v51;
  long long v36 = v52;
  long long v37 = v53;
  long long v38 = v54;
  unint64_t v15 = *(void *)(a1 + 64);
  uint64_t v39 = v55;
  *(void *)&v41[7] = *(void *)((char *)&v35 + 7);
  unint64_t v16 = __p;
  *(void *)long long v41 = v35;
  char v17 = HIBYTE(v35);
  long long v35 = 0uLL;
  std::string __p = 0;
  unint64_t v18 = *(void *)(a1 + 56);
  if (v18 >= v15)
  {
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v18 - v20) >> 4);
    if ((unint64_t)(v21 + 1) > 0x1745D1745D1745DLL) {
      abort();
    }
    unint64_t v22 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v15 - v20) >> 4);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= v21 + 1) {
      uint64_t v23 = v21 + 1;
    }
    if (v22 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v24 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v24 = v23;
    }
    v40[4] = a1 + 64;
    long long v25 = (char *)sub_244D70C80(a1 + 64, v24);
    long long v26 = &v25[176 * v21];
    v40[0] = v25;
    v40[1] = v26;
    v40[3] = &v25[176 * v27];
    long long v28 = v45;
    *((_OWORD *)v26 + 2) = v44;
    *((_OWORD *)v26 + 3) = v28;
    *((_OWORD *)v26 + 4) = v46[0];
    *(_OWORD *)(v26 + 74) = *(_OWORD *)((char *)v46 + 10);
    long long v29 = v43;
    *(_OWORD *)long long v26 = v42;
    *((_OWORD *)v26 + 1) = v29;
    *((_DWORD *)v26 + 23) = v14;
    long long v30 = v37;
    *((_OWORD *)v26 + 6) = v36;
    *((_OWORD *)v26 + 7) = v30;
    uint64_t v31 = v39;
    *((_OWORD *)v26 + 8) = v38;
    *((void *)v26 + 18) = v31;
    *((void *)v26 + 19) = v16;
    *((void *)v26 + 20) = *(void *)v41;
    *(void *)(v26 + 167) = *(void *)&v41[7];
    v26[175] = v17;
    v40[2] = v26 + 176;
    sub_244D70BBC((uint64_t *)(a1 + 48), v40);
    uint64_t v32 = *(void *)(a1 + 56);
    sub_244D70CCC((uint64_t)v40);
    int v33 = SHIBYTE(v35);
    *(void *)(a1 + 56) = v32;
    if (v33 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    memmove(*(void **)(a1 + 56), buf, 0x5AuLL);
    *(_DWORD *)(v18 + 92) = v14;
    long long v19 = v37;
    *(_OWORD *)(v18 + 96) = v36;
    *(_OWORD *)(v18 + 112) = v19;
    *(_OWORD *)(v18 + 128) = v38;
    *(void *)(v18 + 144) = v39;
    *(void *)(v18 + 152) = v16;
    *(void *)(v18 + 160) = *(void *)v41;
    *(void *)(v18 + 167) = *(void *)&v41[7];
    *(unsigned char *)(v18 + 175) = v17;
    *(void *)(a1 + 56) = v18 + 176;
  }
}

void sub_244D6E73C(char *__s@<X1>, const char *a2@<X0>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(_WORD *)(a5 + 88) = 0;
  *(unsigned char *)(a5 + 144) = 0;
  long long v7 = (char *)(a5 + 75);
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(unsigned char *)(a5 + 128) = 0;
  *(void *)(a5 + 79) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_DWORD *)(a5 + 148) = 120;
  *(_DWORD *)(a5 + 92) = a4;
  *(unsigned char *)(a5 + 84) = a3;
  sub_244D761F4(__s, (uint64_t)v11);
  int v8 = v12;
  long long v9 = (void *)v11[0];
  if (v12 >= 0) {
    long long v10 = (const char *)v11;
  }
  else {
    long long v10 = (const char *)v11[0];
  }
  strncpy(v7, v10, 9uLL);
  *(unsigned char *)(a5 + 83) = 0;
  strncpy((char *)a5, a2, 0x22uLL);
  *(unsigned char *)(a5 + 33) = 0;
  if (v8 < 0) {
    operator delete(v9);
  }
}

void sub_244D6E7FC(uint64_t a1, const char *a2, const char *a3, char *a4, int a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  long long v10 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      long long v11 = a2;
    }
    else {
      long long v11 = "(null)";
    }
    *(_DWORD *)uint64_t buf = 136316162;
    if (a3) {
      char v12 = a3;
    }
    else {
      char v12 = "(null)";
    }
    *(void *)&uint8_t buf[4] = "OnBrowseRemove";
    __int16 v21 = 2080;
    if (a4) {
      long long v13 = a4;
    }
    else {
      long long v13 = "(null)";
    }
    unint64_t v22 = v11;
    __int16 v23 = 2080;
    unint64_t v24 = v12;
    __int16 v25 = 2080;
    long long v26 = v13;
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  if (a2)
  {
    sub_244D70AC0(buf, a4);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    v17[0] = a2;
    v17[1] = a3;
    int v18 = a5;
    long long v19 = buf;
    if (v14 != v15)
    {
      while (!sub_244D70D5C((uint64_t)v17, v14))
      {
        v14 += 176;
        if (v14 == v15)
        {
          uint64_t v14 = v15;
          goto LABEL_25;
        }
      }
      if (v14 != v15)
      {
        for (uint64_t i = v14 + 176; i != v15; i += 176)
        {
          if (!sub_244D70D5C((uint64_t)v17, i))
          {
            sub_244D70EC8(v14, i);
            v14 += 176;
          }
        }
      }
    }
LABEL_25:
    sub_244D6EA10(a1 + 48, v14, *(void *)(a1 + 56));
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)buf);
    }
  }
}

uint64_t sub_244D6EA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_244D70F64(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 176;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_244D6EA8C(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  *(void *)uint64_t result = &unk_26F956968;
  *(_DWORD *)(result + 8) = 2;
  *(unsigned char *)(result + 32) = a3;
  return result;
}

void sub_244D6EABC(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v11 = a2;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Mdns: Browse failure (%s)", buf, 0xCu);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0x22u, 1);
  }
  uint64_t v7 = a1[2];
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  (*(void (**)(uint64_t, long long *))(*(void *)v7 + 32))(v7, &v8);
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D63C(&qword_26B0D43B8, a1, (uint64_t)buf);
}

void sub_244D6EC08(void *a1)
{
  uint64_t v2 = a1[2];
  int v4 = 0;
  uint64_t v5 = "src/platform/Darwin/DnssdContexts.cpp";
  int v6 = 467;
  (*(void (**)(uint64_t, int *))(*(void *)v2 + 32))(v2, &v4);
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D63C(&qword_26B0D43B8, a1, (uint64_t)&v3);
}

uint64_t sub_244D6ECA8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 2) != 0) {
    return (*(uint64_t (**)(void))(v2 + 40))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 48))();
  }
}

uint64_t sub_244D6ED14(uint64_t a1, const char *a2, char *a3, const char *a4, int a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v10 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = "(null)";
    }
    *(_DWORD *)uint64_t buf = 136316162;
    if (a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = "(null)";
    }
    *(void *)&uint8_t buf[4] = "OnBrowseAdd";
    *(_WORD *)&unsigned char buf[12] = 2080;
    if (a4) {
      long long v13 = a4;
    }
    else {
      long long v13 = "(null)";
    }
    *(void *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = v12;
    LOWORD(v24) = 2080;
    *(void *)((char *)&v24 + 2) = v13;
    WORD5(v24) = 1024;
    HIDWORD(v24) = a5;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  uint64_t v14 = *(void *)(a1 + 16);
  sub_244D6E73C(a3, a2, *(unsigned char *)(a1 + 32), a5, (uint64_t)buf);
  v16[2] = v24;
  v16[3] = v25;
  *(_OWORD *)char v17 = *(_OWORD *)v26;
  *(_OWORD *)&v17[10] = *(_OWORD *)&v26[10];
  v16[0] = *(_OWORD *)buf;
  v16[1] = *(_OWORD *)&buf[16];
  int v18 = v27;
  uint64_t v22 = v31;
  long long v20 = v29;
  long long v21 = v30;
  long long v19 = v28;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v14 + 16))(v14, v16);
}

uint64_t sub_244D6EF0C(uint64_t a1, const char *a2, char *a3, const char *a4, int a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v10 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = "(null)";
    }
    *(_DWORD *)uint64_t buf = 136316162;
    if (a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = "(null)";
    }
    *(void *)&uint8_t buf[4] = "OnBrowseRemove";
    *(_WORD *)&unsigned char buf[12] = 2080;
    if (a4) {
      long long v13 = a4;
    }
    else {
      long long v13 = "(null)";
    }
    *(void *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = v12;
    LOWORD(v24) = 2080;
    *(void *)((char *)&v24 + 2) = v13;
    WORD5(v24) = 1024;
    HIDWORD(v24) = a5;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0x22u, 2);
  }
  if (a2)
  {
    uint64_t v15 = *(void *)(a1 + 16);
    sub_244D6E73C(a3, a2, *(unsigned char *)(a1 + 32), a5, (uint64_t)buf);
    v16[2] = v24;
    v16[3] = v25;
    *(_OWORD *)char v17 = *(_OWORD *)v26;
    *(_OWORD *)&v17[10] = *(_OWORD *)&v26[10];
    v16[0] = *(_OWORD *)buf;
    v16[1] = *(_OWORD *)&buf[16];
    int v18 = v27;
    uint64_t v22 = v31;
    long long v20 = v29;
    long long v21 = v30;
    long long v19 = v28;
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v15 + 24))(v15, v16);
  }
  return result;
}

uint64_t sub_244D6F108(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26F9569B0;
  *(void *)(a1 + 48) = 0;
  uint64_t v9 = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v10 = a1 + 72;
  *(void *)(a1 + 104) = a6;
  *(_WORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1;
  *(unsigned char *)(a1 + 128) = 1;
  *(void *)(a1 + 136) = a1;
  *(unsigned char *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = v9;
  if (a4 == 2) {
    int v11 = 2;
  }
  else {
    int v11 = 3;
  }
  if (a4 == 1) {
    int v11 = 1;
  }
  *(_DWORD *)(a1 + 64) = v11;
  MEMORY[0x245695E30](v10, a5);
  *(_DWORD *)(a1 + 96) = a7;
  return a1;
}

uint64_t sub_244D6F1B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26F9569B0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = a1 + 48;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  *(_DWORD *)(a1 + 8) = 3;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = a1 + 72;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 136) = a1;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  if (a3 == 2) {
    int v9 = 2;
  }
  else {
    int v9 = 3;
  }
  if (a3 == 1) {
    int v9 = 1;
  }
  *(_DWORD *)(a1 + 64) = v9;
  MEMORY[0x245695E30](v8, a4);
  *(_DWORD *)(a1 + 96) = a5;
  return a1;
}

uint64_t sub_244D6F264(uint64_t a1)
{
  *(void *)a1 = &unk_26F9569B0;
  sub_244D6F2C4(a1);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  sub_244D70FC4(a1 + 40, *(void **)(a1 + 48));
  return a1;
}

uint64_t sub_244D6F2C4(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 113))
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_244D6A430(result);
    (*(void (**)(uint64_t, double (*)(uint64_t, char *), uint64_t))(*(void *)v2 + 72))(v2, sub_244D6FBD0, v1);
    uint64_t v3 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = (void *)(v1 + 72);
      if (*(char *)(v1 + 95) < 0) {
        int v4 = (void *)*v4;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v6 = v4;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "SRP resolve timer for %s cancelled; resolve timed out",
        buf,
        0xCu);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x22u, 2);
    }
    *(unsigned char *)(v1 + 113) = 0;
  }
  return result;
}

void sub_244D6F3FC(uint64_t a1)
{
  sub_244D6F264(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244D6F434(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v6 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Mdns: Resolve failure (%s)", buf, 0xCu);
  }
  uint64_t v7 = sub_244CC4E58(1u);
  if (v7) {
    uint64_t v7 = sub_244CC4DE0(0x22u, 1);
  }
  if (byte_26B0D43D0)
  {
    if (qword_26B0D43B8 == qword_26B0D43C0)
    {
LABEL_10:
      int v9 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      while (*(void **)(qword_26B0D43B8 + v8) != a1)
      {
        v8 += 8;
        if (qword_26B0D43B8 + v8 == qword_26B0D43C0) {
          goto LABEL_10;
        }
      }
      uint64_t v10 = qword_26B0D43B8 + v8;
      int v11 = (const void *)(qword_26B0D43B8 + v8 + 8);
      uint64_t v12 = qword_26B0D43C0 - (void)v11;
      if ((const void *)qword_26B0D43C0 != v11) {
        uint64_t v7 = (uint64_t)memmove((void *)(qword_26B0D43B8 + v8), v11, qword_26B0D43C0 - (void)v11);
      }
      qword_26B0D43C0 = v10 + v12;
      int v9 = 1;
    }
  }
  else
  {
    int v9 = 0;
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  long long v13 = (uint64_t (*)(uint64_t, void, uint8_t *, long long *))a1[4];
  if (v13)
  {
    uint64_t v14 = a1[2];
    *(_OWORD *)uint64_t buf = 0uLL;
    long long v15 = *a3;
    uint64_t v16 = *((void *)a3 + 2);
    uint64_t v7 = v13(v14, 0, buf, &v15);
  }
  if (v9)
  {
    if (!byte_26B0D43D0)
    {
      byte_26B0D43D0 = 1;
      qword_26B0D43C0 = 0;
      unk_26B0D43C8 = 0;
      qword_26B0D43B8 = 0;
    }
    sub_244D6D224(v7, a1);
  }
}

void sub_244D6F5F0(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (byte_26B0D43D0)
  {
    if (qword_26B0D43B8 == qword_26B0D43C0)
    {
LABEL_6:
      char v3 = 1;
    }
    else
    {
      uint64_t v2 = 0;
      while (*(void *)(qword_26B0D43B8 + v2) != a1)
      {
        v2 += 8;
        if (qword_26B0D43B8 + v2 == qword_26B0D43C0) {
          goto LABEL_6;
        }
      }
      uint64_t v4 = qword_26B0D43B8 + v2;
      uint64_t v5 = (const void *)(qword_26B0D43B8 + v2 + 8);
      uint64_t v6 = qword_26B0D43C0 - (void)v5;
      if ((const void *)qword_26B0D43C0 != v5) {
        memmove((void *)(qword_26B0D43B8 + v2), v5, qword_26B0D43C0 - (void)v5);
      }
      char v3 = 0;
      qword_26B0D43C0 = v4 + v6;
    }
  }
  else
  {
    char v3 = 1;
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268EC0EC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268EC0EC8))
  {
    dword_268EC0EC0 = if_nametoindex("lo0");
    __cxa_guard_release(&qword_268EC0EC8);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = (void *)(a1 + 48);
  int v9 = dword_268EC0EC0;
  if (dword_268EC0EC0)
  {
    if (v7 == v8) {
      goto LABEL_37;
    }
    do
    {
      BOOL v10 = v7[29] != v7[28] && v9 == *((_DWORD *)v7 + 8);
      if (v10) {
        sub_244D6FAB8((uint64_t *)&v32, (uint64_t)(v7 + 4));
      }
      int v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v7[2];
          BOOL v10 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }
        while (!v10);
      }
      uint64_t v7 = v12;
    }
    while (v12 != v8);
    uint64_t v7 = *(void **)(a1 + 40);
  }
  if (v7 != v8)
  {
    do
    {
      uint64_t v13 = sub_244D71248((uint64_t)v32, (uint64_t)v33, (int *)v7 + 8);
      if ((int *)v13 == v33 && v7[29] != v7[28]) {
        sub_244D6FAB8((uint64_t *)&v32, (uint64_t)(v7 + 4));
      }
      uint64_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          long long v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v15 = (void *)v7[2];
          BOOL v10 = *v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v10);
      }
      uint64_t v7 = v15;
    }
    while (v15 != v8);
  }
LABEL_37:
  uint64_t v16 = v32;
  uint64_t v17 = (uint64_t)v33;
  if (v32 == v33) {
    goto LABEL_53;
  }
  do
  {
    *(void *)uint64_t buf = v16;
    uint64_t v18 = sub_244D71334((uint64_t **)(a1 + 40), (uint64_t)v16, (uint64_t)&unk_244E79D97, (uint64_t *)buf);
    sub_244D71698(v31, v18[28], (v18[29] - v18[28]) >> 4);
    long long v19 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *v16;
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v20;
      _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_DEFAULT, "Mdns: Resolve success on interface %u", buf, 8u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    long long v21 = *(void (**)(uint64_t, uint64_t *, uint64_t *, _DWORD *))(a1 + 32);
    if (v21)
    {
      if (v16 == v33 - 10) {
        int v22 = 0;
      }
      else {
        int v22 = 164;
      }
      uint64_t v23 = *(void *)(a1 + 16);
      v28[0] = v22;
      v28[1] = 0;
      long long v29 = "src/platform/Darwin/DnssdContexts.cpp";
      uint64_t v30 = 655;
      v21(v23, v18 + 9, v31, v28);
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 16);
      *(void *)uint64_t buf = -1;
      if (*(uint64_t *)((char *)v18 + 147) == 0x72657474616D5FLL) {
        sub_244DB228C((uint64_t)(v18 + 9), buf);
      }
      else {
        sub_244DB22F4((uint64_t)(v18 + 9), v31, (uint64_t)buf);
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v24 + 16))(v24, buf);
    }
    v16 += 10;
  }
  while (v16 != (int *)v17);
  if (v33 == v32)
  {
LABEL_53:
    long long v25 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      long long v26 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        long long v26 = (void *)*v26;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_ERROR, "Successfully finalizing resolve for %s without finding any actual IP addresses.", buf, 0xCu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x22u, 1);
    }
  }
  *(void *)uint64_t buf = &v32;
  sub_244BDE050((void ***)buf);
  if ((v3 & 1) == 0)
  {
    if (!byte_26B0D43D0)
    {
      byte_26B0D43D0 = 1;
      qword_26B0D43C0 = 0;
      unk_26B0D43C8 = 0;
      qword_26B0D43B8 = 0;
    }
    sub_244D6D224(v27, (void *)a1);
  }
}

uint64_t sub_244D6FAB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 2;
    if (v12) {
      uint64_t v13 = (char *)sub_244D71170((uint64_t)(a1 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    long long v15 = &v13[40 * v9];
    uint64_t v17 = &v13[40 * v12];
    sub_244D71070(v5, (uint64_t)v15, a2);
    uint64_t v16 = v15 + 40;
    sub_244D710D0(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_244D711B8((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)sub_244D71070((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 40;
  }
  a1[1] = v8;
  return result;
}

double sub_244D6FBD0(uint64_t a1, char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!a2) {
    sub_244E268E8();
  }
  a2[113] = 0;
  char v3 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = a2 + 72;
    if (a2[95] < 0) {
      unint64_t v4 = (void *)*v4;
    }
    buf.n128_u32[0] = 136315138;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "SRP resolve timer for %s expired; completing resolve",
      (uint8_t *)&buf,
      0xCu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  return sub_244D6D308(a2, 0, &buf);
}

void sub_244D6FCD8(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v8 = *a2;
  unint64_t v9 = (uint64_t **)(a1 + 40);
  if ((void *)(a1 + 48) == sub_244D716BC(a1 + 40, (uint64_t)a2))
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
    int v13 = 697;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CBEC08(a3, &v28, a4);
    if (*(_DWORD *)a4) {
      return;
    }
    sub_244CBE8FC(&v28, v36, 0x2Eu);
    unint64_t v10 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)__n128 buf = 136315906;
      *(void *)&uint8_t buf[4] = "OnNewAddress";
      __int16 v30 = 2080;
      uint64_t v31 = v11;
      __int16 v32 = 1024;
      int v33 = v8;
      __int16 v34 = 2080;
      long long v35 = v36;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s instance: %s interface: %u ip: %s", buf, 0x26u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    if (sub_244CBEE00(&v28) && v8 == -1)
    {
      unint64_t v12 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Mdns: Ignoring link-local address with no usable interface", buf, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x22u, 2);
      }
      int v13 = 716;
    }
    else
    {
      *(void *)__n128 buf = a2;
      uint64_t v14 = sub_244D71334(v9, (uint64_t)a2, (uint64_t)&unk_244E79D97, (uint64_t *)buf);
      long long v15 = (_OWORD *)v14[29];
      unint64_t v16 = v14[30];
      if ((unint64_t)v15 >= v16)
      {
        uint64_t v18 = v14[28];
        uint64_t v19 = ((uint64_t)v15 - v18) >> 4;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60) {
          abort();
        }
        uint64_t v21 = v16 - v18;
        if (v21 >> 3 > v20) {
          unint64_t v20 = v21 >> 3;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          uint64_t v23 = (char *)sub_244D7174C((uint64_t)(v14 + 30), v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[16 * v19];
        long long v25 = &v23[16 * v22];
        *(_OWORD *)uint64_t v24 = v28;
        uint64_t v17 = v24 + 16;
        uint64_t v27 = (char *)v14[28];
        long long v26 = (char *)v14[29];
        if (v26 != v27)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v26 - 1);
            v24 -= 16;
            v26 -= 16;
          }
          while (v26 != v27);
          long long v26 = (char *)v14[28];
        }
        v14[28] = v24;
        v14[29] = v17;
        v14[30] = v25;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *long long v15 = v28;
        uint64_t v17 = v15 + 1;
      }
      v14[29] = v17;
      int v13 = 721;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  }
  *(_DWORD *)(a4 + 16) = v13;
}

BOOL sub_244D70000(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = (void *)(a1 + 48);
  if (v1 == (void *)(a1 + 48)) {
    return 0;
  }
  do
  {
    uint64_t v4 = v1[28];
    uint64_t v3 = v1[29];
    BOOL result = v3 != v4;
    if (v3 != v4) {
      break;
    }
    unint64_t v6 = (void *)v1[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        unint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v1[2];
        BOOL v8 = *v7 == (void)v1;
        uint64_t v1 = v7;
      }
      while (!v8);
    }
    uint64_t v1 = v7;
  }
  while (v7 != v2);
  return result;
}

void sub_244D70064(uint64_t a1, int a2, const char *a3, char *a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7, char a8)
{
  uint16_t v9 = a6;
  uint64_t v77 = *MEMORY[0x263EF8340];
  memset(&v50, 0, sizeof(v50));
  if (a6)
  {
    uint64_t v10 = a6;
    uint64_t v11 = MEMORY[0x263EF8318];
    unint64_t v12 = a7;
    while (1)
    {
      unsigned int v15 = *v12;
      uint64_t v14 = (uint64_t)(v12 + 1);
      uint64_t v13 = v15;
      uint64_t v16 = v10 - 1;
      if (v10 - 1 >= (unint64_t)v15) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v10 - 1;
      }
      sub_2446C1098(buf, v14, v17);
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v50.__r_.__value_.__l.__size_;
      }
      if (size) {
        std::string::push_back(&v50, 44);
      }
      uint64_t v19 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        break;
      }
LABEL_25:
      unint64_t v12 = (unsigned __int8 *)(v14 + v17);
      uint64_t v10 = v16 - v17;
      if (v16 == v17) {
        goto LABEL_26;
      }
    }
    unint64_t v20 = *(unsigned char **)buf;
    while (1)
    {
      int v21 = (char)*v20;
      if (v21 < 0)
      {
        int v22 = __maskrune(*v20, 0x500uLL);
        LOBYTE(v21) = *v20;
        if (v22) {
          goto LABEL_20;
        }
      }
      else if ((*(_DWORD *)(v11 + 4 * *v20 + 60) & 0x500) != 0)
      {
        goto LABEL_20;
      }
      if ((v21 & 0x80) != 0)
      {
        int v23 = __maskrune(v21, 0x2000uLL);
        LOBYTE(v21) = *v20;
        if (!v23) {
          goto LABEL_22;
        }
      }
      else if ((*(_DWORD *)(v11 + 4 * v21 + 60) & 0x2000) == 0)
      {
        goto LABEL_22;
      }
LABEL_20:
      if (v21 != 44 && v21 != 92)
      {
        std::string::push_back(&v50, v21);
        goto LABEL_24;
      }
LABEL_22:
      snprintf(__str, 5uLL, "\\x%02x", v21);
      std::string::append(&v50, __str);
LABEL_24:
      ++v20;
      if (!--v19) {
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  uint64_t v24 = sub_244CC8484(0x22u, "Discovery");
  unsigned int v25 = __rev16(a5);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    long long v26 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v26 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__n128 buf = 136316418;
    *(void *)&uint8_t buf[4] = "OnNewInterface";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = a4;
    __int16 v54 = 2080;
    uint64_t v55 = a3;
    __int16 v56 = 1024;
    int v57 = a2;
    __int16 v58 = 1024;
    unsigned int v59 = v25;
    __int16 v60 = 2080;
    v61 = v26;
    _os_log_impl(&dword_2446BD000, v24, OS_LOG_TYPE_DEFAULT, "Mdns : %s hostname:%s fullname:%s interface: %u port: %u TXT:\"%s\"", buf, 0x36u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  char v72 = 0;
  char v73 = 0;
  int v74 = 120;
  uint64_t v71 = 0;
  v70 = 0;
  long long v75 = 0u;
  memset(v76, 0, 33);
  __int16 v68 = v25;
  if (a2 == -1) {
    int v27 = 0;
  }
  else {
    int v27 = a2;
  }
  int v69 = v27;
  sub_244D70AC0(&v49, a4);
  char v28 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  std::string::size_type v29 = v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v30 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v30 = v49.__r_.__value_.__l.__size_;
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &v49;
  }
  else {
    uint64_t v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if (v30 >= 1)
  {
    __int16 v32 = (char *)v31 + v30;
    int v33 = v31;
    do
    {
      __int16 v34 = memchr(v33, 46, v30);
      if (!v34) {
        break;
      }
      if (*v34 == 46)
      {
        if (v34 != v32 && v34 - (unsigned char *)v31 != -1)
        {
          std::string::erase(&v49, v34 - (unsigned char *)v31, 0xFFFFFFFFFFFFFFFFLL);
          char v28 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          std::string::size_type v29 = v49.__r_.__value_.__r.__words[0];
        }
        break;
      }
      int v33 = (std::string *)(v34 + 1);
      int64_t v30 = v32 - (unsigned char *)v33;
    }
    while (v32 - (unsigned char *)v33 >= 1);
  }
  if (v28 >= 0) {
    long long v35 = &v49;
  }
  else {
    long long v35 = (std::string *)v29;
  }
  strncpy(v67, (const char *)v35, 0x29uLL);
  v67[40] = 0;
  strncpy(__str, a3, 0x22uLL);
  __str[33] = 0;
  unsigned int Count = TXTRecordGetCount(v9, a7);
  uint64_t v37 = Count;
  uint64_t v71 = Count;
  v70 = (char *)sub_244CC4D90(0x14uLL, 0x18uLL);
  if (Count)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    while (1)
    {
      uint8_t valueLen = 0;
      value = 0;
      if (TXTRecordGetItemAtIndex(v9, a7, v39, 0x20u, key, &valueLen, (const void **)&value)) {
        break;
      }
      unsigned int v40 = valueLen;
      if (valueLen >= 0x40u)
      {
        unsigned int v40 = 63;
        uint8_t valueLen = 63;
      }
      long long v41 = (char *)v40;
      memcpy(buf, value, v40);
      buf[v40] = 0;
      long long v42 = (char **)&v70[v38];
      *long long v42 = strdup(key);
      v42[1] = strdup(buf);
      v42[2] = v41;
      ++v39;
      v38 += 24;
      if (v37 == v39) {
        goto LABEL_61;
      }
    }
    uint64_t v71 = v39;
  }
LABEL_61:
  MEMORY[0x245695E30](&v76[8], a4);
  *(_DWORD *)key = a2;
  sub_244D70AC0(&v63, a4);
  char v65 = a8;
  sub_244D708A8((uint64_t)buf, (uint64_t)key, (long long *)__str);
  sub_244D71784((uint64_t **)(a1 + 40), (uint64_t)buf, (uint64_t)buf);
  sub_244D70674((uint64_t)&v59);
  if (SHIBYTE(v55) < 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  sub_244D70674((uint64_t)__str);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

double sub_244D70598(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 50) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(unsigned char *)(a1 + 200) = 0;
  return result;
}

BOOL sub_244D705D8(uint64_t a1)
{
  return *(void *)(a1 + 56) != 0;
}

__n128 sub_244D705E8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  __n128 result = *(__n128 *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(__n128 *)(a1 + 176) = result;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 176) = 0;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_244D70674(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 96);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 104);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        long long v5 = (void **)(*(void *)(a1 + 96) + v4);
        free(*v5);
        free(v5[1]);
        v4 += 24;
        --v3;
      }
      while (v3);
      long long v2 = *(void **)(a1 + 96);
    }
    j__free(v2);
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  long long v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(void *)(a1 + 160) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_244D70704(uint64_t a1)
{
  sub_244D709A8(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244D7073C(uint64_t a1)
{
  *(void *)a1 = &unk_26F956920;
  uint64_t v3 = (void **)(a1 + 48);
  sub_244D70A1C(&v3);
  return a1;
}

uint64_t sub_244D70794(uint64_t a1)
{
  *(void *)a1 = &unk_26F956920;
  uint64_t v3 = (void **)(a1 + 48);
  sub_244D70A1C(&v3);
  return MEMORY[0x245695FA0](a1, 0x10A1C4036CF50ECLL);
}

void sub_244D70800()
{
}

uint64_t sub_244D70814(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  uint64_t v10 = a1 + 152;
  if (*(char *)(a2 + 175) < 0)
  {
    sub_2446DA130((unsigned char *)v10, *(void **)(a2 + 152), *(void *)(a2 + 160));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 152);
    *(void *)(v10 + 16) = *(void *)(a2 + 168);
    *(_OWORD *)uint64_t v10 = v11;
  }
  return a1;
}

uint64_t sub_244D708A8(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_2446DA130((unsigned char *)v6, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  long long v8 = *a3;
  *(_OWORD *)(a1 + 56) = a3[1];
  *(_OWORD *)(a1 + 40) = v8;
  long long v9 = a3[2];
  long long v10 = a3[3];
  long long v11 = a3[4];
  *(_OWORD *)(a1 + 114) = *(long long *)((char *)a3 + 74);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 132) = *((_DWORD *)a3 + 23);
  long long v12 = a3[6];
  long long v13 = a3[7];
  uint64_t v14 = *((void *)a3 + 18);
  *(_OWORD *)(a1 + 168) = a3[8];
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = *((void *)a3 + 19);
  *(void *)(a1 + 200) = *((void *)a3 + 20);
  *(void *)(a1 + 208) = *((void *)a3 + 21);
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  long long v15 = a3[11];
  *(void *)(a1 + 232) = *((void *)a3 + 24);
  *(_OWORD *)(a1 + 216) = v15;
  *((void *)a3 + 23) = 0;
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 22) = 0;
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a3 + 200);
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  return a1;
}

uint64_t sub_244D709A8(uint64_t a1)
{
  *(void *)a1 = &unk_26F9568F0;
  uint64_t v2 = a1 + 88;
  sub_244D71984(a1 + 88);
  sub_244D719C8(v2);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_244D70A1C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_244D70A70((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void sub_244D70A70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 176)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_244D70AC0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *sub_244D70B70(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_2447A0110();
  }
  return operator new(152 * a2);
}

uint64_t *sub_244D70BBC(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 176;
      long long v6 = *(_OWORD *)(v3 - 160);
      *(_OWORD *)(v4 - 176) = *(_OWORD *)(v3 - 176);
      *(_OWORD *)(v4 - 160) = v6;
      long long v7 = *(_OWORD *)(v3 - 144);
      long long v8 = *(_OWORD *)(v3 - 128);
      long long v9 = *(_OWORD *)(v3 - 112);
      *(_OWORD *)(v4 - 102) = *(_OWORD *)(v3 - 102);
      *(_OWORD *)(v4 - 128) = v8;
      *(_OWORD *)(v4 - 112) = v9;
      *(_OWORD *)(v4 - 144) = v7;
      *(_DWORD *)(v4 - 84) = *(_DWORD *)(v3 - 84);
      long long v10 = *(_OWORD *)(v3 - 80);
      long long v11 = *(_OWORD *)(v3 - 64);
      long long v12 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = v11;
      *(_OWORD *)(v4 - 48) = v12;
      *(_OWORD *)(v4 - 80) = v10;
      long long v13 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v13;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v3 -= 176;
      v4 -= 176;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v14 = *result;
  *__n128 result = v5;
  a2[1] = v14;
  uint64_t v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  uint64_t v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void *sub_244D70C80(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_2447A0110();
  }
  return operator new(176 * a2);
}

uint64_t sub_244D70CCC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_244D70D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 176;
      *(void *)(a1 + 16) = v2 - 176;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

BOOL sub_244D70D5C(uint64_t a1, uint64_t a2)
{
  if (strcmp(*(const char **)a1, (const char *)a2)) {
    return 0;
  }
  long long v6 = *(const char **)(a1 + 8);
  sub_244D75BA8(a2, &__s1);
  size_t v7 = strlen(v6);
  size_t v8 = v7;
  char v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      return 0;
    }
    if (v7 != -1)
    {
      p_s1 = &__s1;
      goto LABEL_11;
    }
LABEL_38:
    abort();
  }
  if (v7 != __s1.__r_.__value_.__l.__size_)
  {
    BOOL v4 = 0;
LABEL_35:
    operator delete(__s1.__r_.__value_.__l.__data_);
    return v4;
  }
  if (v7 == -1) {
    goto LABEL_38;
  }
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(p_s1, v6, v8) || *(_DWORD *)(a2 + 92) != *(_DWORD *)(a1 + 16)) {
    goto LABEL_31;
  }
LABEL_11:
  long long v11 = *(unsigned __int8 ***)(a1 + 24);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 175);
  if ((v12 & 0x80u) == 0) {
    long long v13 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 175);
  }
  else {
    long long v13 = *(unsigned __int8 **)(a2 + 160);
  }
  uint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
  int v15 = (char)v14;
  if ((char)v14 < 0) {
    uint64_t v14 = v11[1];
  }
  if (v13 == v14)
  {
    uint64_t v16 = (const void **)(a2 + 152);
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 **)(a1 + 24);
    }
    else {
      uint64_t v17 = *v11;
    }
    if ((v12 & 0x80) != 0)
    {
      BOOL v4 = memcmp(*v16, v17, *(void *)(a2 + 160)) == 0;
    }
    else if (*(unsigned char *)(a2 + 175))
    {
      uint64_t v18 = v12 - 1;
      do
      {
        int v20 = *(unsigned __int8 *)v16;
        uint64_t v16 = (const void **)((char *)v16 + 1);
        int v19 = v20;
        int v22 = *v17++;
        int v21 = v22;
        BOOL v24 = v18-- != 0;
        BOOL v4 = v19 == v21;
      }
      while (v19 == v21 && v24);
    }
    else
    {
      BOOL v4 = 1;
    }
  }
  else
  {
LABEL_31:
    BOOL v4 = 0;
  }
  if (v9 < 0) {
    goto LABEL_35;
  }
  return v4;
}

uint64_t sub_244D70EC8(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  uint64_t v11 = a1 + 152;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)v11);
  }
  long long v12 = *(_OWORD *)(a2 + 152);
  *(void *)(v11 + 16) = *(void *)(a2 + 168);
  *(_OWORD *)uint64_t v11 = v12;
  *(unsigned char *)(a2 + 175) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  return a1;
}

uint64_t sub_244D70F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_244D70EC8(a3, v4);
      v4 += 176;
      a3 += 176;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_244D70FC4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_244D70FC4(a1, *a2);
    sub_244D70FC4(a1, a2[1]);
    sub_244D71020((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_244D71020(uint64_t a1)
{
  sub_244D70674(a1 + 40);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

unsigned char *sub_244D71070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  __n128 result = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    __n128 result = sub_2446DA130(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)__n128 result = v6;
  }
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 32);
  return result;
}

uint64_t *sub_244D710D0(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 40;
      v4 -= 40;
      __n128 result = (uint64_t *)sub_244D71070((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_244D71170(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_2447A0110();
  }
  return operator new(40 * a2);
}

uint64_t sub_244D711B8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_244D711F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_244D71248(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    int v5 = *a3;
    int v6 = *((char *)a3 + 31);
    if (v6 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)a3 + 31);
    }
    else {
      uint64_t v7 = *((void *)a3 + 2);
    }
    if (v6 >= 0) {
      uint64_t v8 = (unsigned __int8 *)(a3 + 2);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)*((void *)a3 + 1);
    }
    int v9 = *((unsigned __int8 *)a3 + 32);
    while (1)
    {
      if (*(_DWORD *)v3 == v5)
      {
        uint64_t v10 = *(unsigned __int8 *)(v3 + 31);
        uint64_t v11 = (v10 & 0x80u) == 0 ? *(unsigned __int8 *)(v3 + 31) : *(void *)(v3 + 16);
        if (v11 == v7)
        {
          if ((v10 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v3 + 8), v8, *(void *)(v3 + 16)))
            {
LABEL_21:
              if (*(unsigned __int8 *)(v3 + 32) == v9) {
                return v3;
              }
            }
          }
          else
          {
            if (!*(unsigned char *)(v3 + 31)) {
              goto LABEL_21;
            }
            uint64_t v12 = 0;
            while (*(unsigned __int8 *)(v3 + v12 + 8) == v8[v12])
            {
              if (v10 == ++v12) {
                goto LABEL_21;
              }
            }
          }
        }
      }
      v3 += 40;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void *sub_244D71334(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = sub_244D713E4((uint64_t)a1, &v12, a2);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = operator new(0x118uLL);
    v10[1] = a1 + 1;
    sub_244D715AC((uint64_t)(v7 + 4), *a4);
    char v11 = 1;
    sub_244CB005C(a1, v12, v8, v7);
    v10[0] = 0;
    sub_244D71640((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_244D713E4(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_244D71484(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_244D71484(v7, v9, a3)) {
        break;
      }
      int v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_244D71484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 < *(_DWORD *)a3) {
    return 1;
  }
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  uint64_t v7 = (unsigned __int8 *)(a2 + 8);
  int v6 = *(const void **)(a2 + 8);
  int v8 = *(char *)(a3 + 31);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 31);
  size_t v10 = *(void *)(a2 + 16);
  if ((v9 & 0x80u) == 0) {
    size_t v11 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    size_t v11 = *(void *)(a2 + 16);
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v12 = (const void *)(a2 + 8);
  }
  else {
    uint64_t v12 = *(const void **)(a2 + 8);
  }
  if (v8 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 31);
  }
  else {
    size_t v13 = *(void *)(a3 + 16);
  }
  if (v8 >= 0) {
    uint64_t v14 = (unsigned __int8 *)(a3 + 8);
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)(a3 + 8);
  }
  if (v13 >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v13;
  }
  int v16 = memcmp(v12, v14, v15);
  BOOL v17 = v11 < v13;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (v17) {
    return 1;
  }
  if (v11 != v13) {
    return 0;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(v6, v14, v10)) {
      return 0;
    }
  }
  else if (v9)
  {
    while (*v7 == *v14)
    {
      ++v7;
      ++v14;
      if (!--v9) {
        return *(unsigned __int8 *)(a2 + 32) < *(unsigned __int8 *)(a3 + 32);
      }
    }
    return 0;
  }
  return *(unsigned __int8 *)(a2 + 32) < *(unsigned __int8 *)(a3 + 32);
}

uint64_t sub_244D715AC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_2446DA130((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 74) = 0u;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_OWORD *)(a1 + 99) = 0u;
  *(_DWORD *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 120;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + 240) = 0;
  return a1;
}

void sub_244D71640(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_244D71020((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_244D71698(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3) {
      sub_244E22CF8();
    }
  }
  return result;
}

void *sub_244D716BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  int v6 = (void *)(a1 + 8);
  do
  {
    BOOL v7 = sub_244D71484(v5, (uint64_t)(v3 + 4), a2);
    int v8 = v3 + 1;
    if (!v7)
    {
      int v8 = v3;
      int v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_244D71484(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

void *sub_244D7174C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_2447A0110();
  }
  return operator new(16 * a2);
}

void *sub_244D71784(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_244D713E4((uint64_t)a1, &v11, a2);
  int v6 = (void *)*v5;
  if (!*v5)
  {
    BOOL v7 = v5;
    int v6 = operator new(0x118uLL);
    v9[1] = a1 + 1;
    sub_244D71834((uint64_t)(v6 + 4), a3);
    char v10 = 1;
    sub_244CB005C(a1, v11, v7, v6);
    v9[0] = 0;
    sub_244D71640((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_244D71834(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_2446DA130((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 114) = *(_OWORD *)(a2 + 114);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  long long v10 = *(_OWORD *)(a2 + 136);
  long long v11 = *(_OWORD *)(a2 + 152);
  uint64_t v12 = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(void *)(a1 + 184) = v12;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v13 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v13;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 216) = 0;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  return a1;
}

uint64_t sub_244D71934(uint64_t a1)
{
  sub_244D71984(a1);
  uint64_t v2 = *(unsigned char **)(a1 + 48);
  if (v2) {
    *uint64_t v2 = 0;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_2447E7E54(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_244D71984(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) != -1) {
    sub_244D727E8(a1);
  }
  if (*(void *)a1)
  {
    DNSServiceRefDeallocate(*(DNSServiceRef *)a1);
    *(void *)a1 = 0;
  }
}

std::__shared_weak_count *sub_244D719CC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  MEMORY[0x245695E30](a1 + 16);
  *(_DWORD *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 44) = a3;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v7 = operator new(0x20uLL);
  v7[1] = 0;
  v7[2] = 0;
  *long long v7 = &unk_26F956AA0;
  __n128 result = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  *((unsigned char *)v7 + 24) = 1;
  *(void *)(a1 + 48) = v7 + 3;
  if (result)
  {
    sub_2447E7E54(result);
    if (*(void *)(a1 + 48)) {
      return 0;
    }
    else {
      return (std::__shared_weak_count *)4294901757;
    }
  }
  return result;
}

void sub_244D71A6C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244D71BC4((DNSServiceRef *)a1, a2);
    if (!*(_DWORD *)a2)
    {
      long long v10 = 0;
      long long v11 = 0;
      uint64_t v12 = 0;
      std::string __p = 0;
      long long v8 = 0;
      uint64_t v9 = 0;
      sub_244D71D48(0, *(unsigned __int8 *)(a1 + 44), &v10, &__p, 1);
      uint64_t v4 = (char *)__p;
      long long v5 = v8;
      while (v4 != v5)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_244D725E0(*(_DWORD *)(a1 + 40), 0x1Cu, v4 + 4, 0x10u, a1, (uint64_t)a2);
        if (*(_DWORD *)a2) {
          goto LABEL_9;
        }
        v4 += 20;
      }
      *(_DWORD *)a2 = 0;
      a2[1] = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
      *((_DWORD *)a2 + 4) = 310;
LABEL_9:
      if (__p)
      {
        long long v8 = (char *)__p;
        operator delete(__p);
      }
      if (v10)
      {
        long long v11 = v10;
        operator delete(v10);
      }
    }
  }
  else
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    v6[2] = sub_244D721B8;
    v6[3] = &unk_2651A9050;
    v6[4] = a1;
    sub_244D72050(a1, (uint64_t)v6, (uint64_t)a2);
  }
}

DNSServiceRef *sub_244D71BC4@<X0>(DNSServiceRef *a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (v4)
  {
    DNSServiceRefDeallocate(v4);
    *a1 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __n128 result = sub_244D73108(a1, (uint64_t)a2);
  if (*(_DWORD *)a2)
  {
    long long v6 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      long long v10 = *(_OWORD *)a2;
      uint64_t v11 = a2[2];
      long long v7 = sub_244CB7B34((const char **)&v10, 1);
      *(_DWORD *)__n128 buf = 136315650;
      long long v13 = v7;
      __int16 v14 = 2080;
      size_t v15 = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
      __int16 v16 = 1024;
      int v17 = 434;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    __n128 result = (DNSServiceRef *)sub_244CC4E58(1u);
    if (result)
    {
      long long v8 = *(_OWORD *)a2;
      uint64_t v9 = a2[2];
      sub_244CB7B34((const char **)&v8, 1);
      return (DNSServiceRef *)sub_244CC4DE0(0, 1);
    }
  }
  else
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *((_DWORD *)a2 + 4) = 435;
  }
  return result;
}

uint64_t sub_244D71D48(int a1, int a2, void **a3, void **a4, char a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v47 = 0;
  uint64_t result = getifaddrs(&v47);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v11 = v47;
    if (v47)
    {
      unsigned int v12 = a2 & 0xFFFFFFFD;
      uint64_t v13 = a2 & 0xFE;
      do
      {
        ifa_addr = v11->ifa_addr;
        if (ifa_addr)
        {
          unsigned int ifa_flags = v11->ifa_flags;
          char v16 = (ifa_flags & 8) != 0 ? 0 : a5;
          if ((~ifa_flags & 0x8040) == 0 && (v16 & 1) == 0)
          {
            unsigned int v17 = if_nametoindex(v11->ifa_name);
            unsigned int v18 = v17;
            if (!a1 || v17 == a1)
            {
              if (v12 == 1 && ifa_addr->sa_family == 2)
              {
                uint64_t v19 = v13;
                uint64_t v20 = *(unsigned int *)&ifa_addr->sa_data[2];
                int v22 = (unint64_t *)a3[1];
                unint64_t v21 = (unint64_t)a3[2];
                if ((unint64_t)v22 >= v21)
                {
                  uint64_t v27 = ((char *)v22 - (unsigned char *)*a3) >> 3;
                  if ((unint64_t)(v27 + 1) >> 61) {
                    goto LABEL_55;
                  }
                  uint64_t v28 = v21 - (void)*a3;
                  uint64_t v29 = v28 >> 2;
                  if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
                    uint64_t v29 = v27 + 1;
                  }
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v29;
                  }
                  if (v30) {
                    uint64_t v31 = (char *)sub_244CAC704((uint64_t)(a3 + 2), v30);
                  }
                  else {
                    uint64_t v31 = 0;
                  }
                  uint64_t v37 = &v31[8 * v27];
                  *(void *)uint64_t v37 = v18 | (unint64_t)(v20 << 32);
                  int v23 = v37 + 8;
                  uint64_t v39 = (char *)*a3;
                  uint64_t v38 = (char *)a3[1];
                  uint64_t v13 = v19;
                  if (v38 != *a3)
                  {
                    do
                    {
                      uint64_t v40 = *((void *)v38 - 1);
                      v38 -= 8;
                      *((void *)v37 - 1) = v40;
                      v37 -= 8;
                    }
                    while (v38 != v39);
                    uint64_t v38 = (char *)*a3;
                  }
                  unsigned int v12 = a2 & 0xFFFFFFFD;
                  *a3 = v37;
                  a3[1] = v23;
                  a3[2] = &v31[8 * v30];
                  if (v38) {
                    operator delete(v38);
                  }
                }
                else
                {
                  unint64_t *v22 = v17 | (unint64_t)(v20 << 32);
                  int v23 = v22 + 1;
                  uint64_t v13 = v19;
                  unsigned int v12 = a2 & 0xFFFFFFFD;
                }
                a3[1] = v23;
              }
              else if (v13 == 2 && ifa_addr->sa_family == 30)
              {
                long long v48 = *(_OWORD *)&ifa_addr->sa_data[6];
                unsigned int v25 = (char *)a4[1];
                BOOL v24 = (char *)a4[2];
                if (v25 >= v24)
                {
                  unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)*a4) >> 2);
                  unint64_t v33 = v32 + 1;
                  if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_55:
                  }
                    abort();
                  unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (unsigned char *)*a4) >> 2);
                  if (2 * v34 > v33) {
                    unint64_t v33 = 2 * v34;
                  }
                  if (v34 >= 0x666666666666666) {
                    unint64_t v35 = 0xCCCCCCCCCCCCCCCLL;
                  }
                  else {
                    unint64_t v35 = v33;
                  }
                  if (v35) {
                    uint64_t v36 = (char *)sub_244D73200((uint64_t)(a4 + 2), v35);
                  }
                  else {
                    uint64_t v36 = 0;
                  }
                  long long v41 = &v36[20 * v32];
                  *(_DWORD *)long long v41 = v18;
                  *(_OWORD *)(v41 + 4) = v48;
                  long long v43 = (char *)*a4;
                  long long v42 = (char *)a4[1];
                  long long v44 = v41;
                  if (v42 != *a4)
                  {
                    do
                    {
                      long long v45 = *(_OWORD *)(v42 - 20);
                      *((_DWORD *)v44 - 1) = *((_DWORD *)v42 - 1);
                      *(_OWORD *)(v44 - 20) = v45;
                      v44 -= 20;
                      v42 -= 20;
                    }
                    while (v42 != v43);
                    long long v42 = (char *)*a4;
                  }
                  long long v26 = v41 + 20;
                  *a4 = v44;
                  a4[1] = v41 + 20;
                  a4[2] = &v36[20 * v35];
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(_DWORD *)unsigned int v25 = v17;
                  *(_OWORD *)(v25 + 4) = v48;
                  long long v26 = v25 + 20;
                }
                a4[1] = v26;
              }
            }
          }
        }
        uint64_t v11 = v11->ifa_next;
      }
      while (v11);
      int v46 = v47;
    }
    else
    {
      int v46 = 0;
    }
    return MEMORY[0x245696460](v46);
  }
  return result;
}

void sub_244D72050(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  nw_path_monitor_t v6 = nw_path_monitor_create();
  *(void *)(a1 + 8) = v6;
  if (v6)
  {
    long long v7 = v6;
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    nw_path_monitor_set_queue(v7, (dispatch_queue_t)qword_26B0D4398);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 56);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v10 = *(NSObject **)(a1 + 8);
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1174405120;
    void v11[2] = sub_244D72850;
    v11[3] = &unk_26F956A60;
    v11[5] = a1;
    v11[6] = v8;
    unsigned int v12 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v11[4] = a2;
    nw_path_monitor_set_update_handler(v10, v11);
    nw_path_monitor_start(*(nw_path_monitor_t *)(a1 + 8));
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *(_DWORD *)(a3 + 16) = 392;
    if (v12) {
      sub_2447E7E54(v12);
    }
    if (v9) {
      sub_2447E7E54(v9);
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *(_DWORD *)(a3 + 16) = 340;
  }
}

void sub_244D721B8(uint64_t a1, uint64_t **a2, long long **a3)
{
  long long v5 = *(DNSServiceRef **)(a1 + 32);
  memset(v12, 0, sizeof(v12));
  sub_244D71BC4(v5, v12);
  if (!LODWORD(v12[0]))
  {
    std::string __p = 0;
    long long v10 = 0;
    uint64_t v11 = 0;
    sub_244D73524((char *)&__p, *a2, a2[1], a2[1] - *a2);
    sub_244D72290((uint64_t)v5, (uint32_t **)&__p, 1u);
    if (__p)
    {
      long long v10 = __p;
      operator delete(__p);
    }
    nw_path_monitor_t v6 = 0;
    long long v7 = 0;
    uint64_t v8 = 0;
    sub_244D735C0((char *)&v6, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
    sub_244D72438((uint64_t)v5, (uint32_t **)&v6, 0x1Cu);
    if (v6)
    {
      long long v7 = v6;
      operator delete(v6);
    }
  }
}

uint64_t sub_244D72290(uint64_t result, uint32_t **a2, uint16_t rrtype)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    do
    {
      uint32_t v8 = *v3;
      long long v7 = v3 + 1;
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      uint64_t result = sub_244D725E0(v8, rrtype, v7, 4u, v6, (uint64_t)&v15);
      if (v15)
      {
        uint64_t v9 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          long long v13 = v15;
          uint64_t v14 = v16;
          long long v10 = sub_244CB7B34((const char **)&v13, 1);
          *(_DWORD *)__n128 buf = 136315650;
          unsigned int v18 = v10;
          __int16 v19 = 2080;
          uint64_t v20 = "src/platform/Darwin/DnssdHostNameRegistrar.h";
          __int16 v21 = 1024;
          int v22 = 55;
          _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        uint64_t result = sub_244CC4E58(1u);
        if (result)
        {
          long long v11 = v15;
          uint64_t v12 = v16;
          sub_244CB7B34((const char **)&v11, 1);
          uint64_t result = sub_244CC4DE0(0, 1);
        }
      }
      uint64_t v3 = v7 + 1;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_244D72438(uint64_t result, uint32_t **a2, uint16_t rrtype)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    do
    {
      uint32_t v8 = *v3;
      long long v7 = v3 + 1;
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      uint64_t result = sub_244D725E0(v8, rrtype, v7, 0x10u, v6, (uint64_t)&v15);
      if (v15)
      {
        uint64_t v9 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          long long v13 = v15;
          uint64_t v14 = v16;
          long long v10 = sub_244CB7B34((const char **)&v13, 1);
          *(_DWORD *)__n128 buf = 136315650;
          unsigned int v18 = v10;
          __int16 v19 = 2080;
          uint64_t v20 = "src/platform/Darwin/DnssdHostNameRegistrar.h";
          __int16 v21 = 1024;
          int v22 = 55;
          _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        uint64_t result = sub_244CC4E58(1u);
        if (result)
        {
          long long v11 = v15;
          uint64_t v12 = v16;
          sub_244CB7B34((const char **)&v11, 1);
          uint64_t result = sub_244CC4DE0(0, 1);
        }
      }
      uint64_t v3 = v7 + 4;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_244D725E0@<X0>(uint32_t interfaceIndex@<W1>, uint16_t rrtype@<W2>, void *rdata@<X3>, uint16_t rdlen@<W4>, uint64_t a5@<X0>, uint64_t a6@<X8>)
{
  uint64_t v9 = *(_DNSServiceRef_t **)a5;
  long long v10 = (const char *)(a5 + 16);
  if (*(char *)(a5 + 39) < 0) {
    long long v10 = *(const char **)v10;
  }
  DNSRecordRef RecordRef = 0;
  uint64_t v11 = DNSServiceRegisterRecord(v9, &RecordRef, 0x10u, interfaceIndex, v10, rrtype, 1u, rdlen, rdata, 0, (DNSServiceRegisterRecordReply)sub_244D72664, 0);
  return sub_244D76850(v11, a6);
}

uint64_t sub_244D72664(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 136315394;
    uint64_t v11 = "OnRegisterRecord";
    __int16 v12 = 1024;
    LODWORD(v13) = a3;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Mdns: %s flags: %d", buf, 0x12u);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0x22u, 2);
  }
  if (a4)
  {
    uint32_t v8 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = sub_244D76610(a4);
      *(_DWORD *)__n128 buf = 136315394;
      uint64_t v11 = "OnRegisterRecord";
      __int16 v12 = 2080;
      long long v13 = v9;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "%s (%s)", buf, 0x16u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      sub_244D76610(a4);
      return sub_244CC4DE0(0x22u, 1);
    }
  }
  return result;
}

void sub_244D727E8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    nw_path_monitor_cancel(v2);
    nw_release(*(void **)(a1 + 8));
    *(void *)(a1 + 8) = 0;
  }
}

void sub_244D72820(_DNSServiceRef_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *a1 = 0;
  }
}

void sub_244D72850(uint64_t a1, nw_path_t path)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (**(unsigned char **)(a1 + 48))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    nw_path_status_t status = nw_path_get_status(path);
    long long v5 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (status > nw_path_status_satisfiable) {
        uint64_t v6 = "Unknown";
      }
      else {
        uint64_t v6 = (&off_2651A9098)[status];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "Status: %s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    unsigned int v18 = path;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v50 = 0x4002000000;
    int v51 = sub_244D72DB0;
    long long v52 = sub_244D72DDC;
    long long v53 = 0;
    __int16 v54 = 0;
    uint64_t v55 = 0;
    uint64_t v33 = 0;
    unint64_t v34 = &v33;
    uint64_t v35 = 0x4002000000;
    uint64_t v36 = sub_244D72DF4;
    uint64_t v37 = sub_244D72E20;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    sub_244D71D48(*(_DWORD *)(v3 + 40), *(unsigned __int8 *)(v3 + 44), &v53, &v38, 1);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v30 = 0;
    sub_244D73524((char *)&v30, *(uint64_t **)(*((void *)&buf + 1) + 40), *(uint64_t **)(*((void *)&buf + 1) + 48), (uint64_t)(*(void *)(*((void *)&buf + 1) + 48) - *(void *)(*((void *)&buf + 1) + 40)) >> 3);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    sub_244D735C0((char *)&v27, (long long *)v34[5], (long long *)v34[6], 0xCCCCCCCCCCCCCCCDLL * ((v34[6] - v34[5]) >> 2));
    v48[0] = 0;
    v48[1] = 0;
    long long v47 = v48;
    uint32_t v8 = (unsigned int *)v30;
    long long v7 = v31;
    while (v8 != (unsigned int *)v7)
    {
      sub_244D73468((uint64_t)&v47, v8, v8);
      v8 += 2;
    }
    long long v10 = (unsigned int *)v27;
    uint64_t v9 = v28;
    while (v10 != (unsigned int *)v9)
    {
      sub_244D73468((uint64_t)&v47, v10, v10);
      v10 += 5;
    }
    uint64_t v11 = v47;
    if (v47 != v48)
    {
      do
      {
        uint64_t v12 = *((unsigned int *)v11 + 7);
        *(void *)__int16 v60 = 0;
        uint64_t v61 = 0;
        if_indextoname(v12, v60);
        long long v13 = sub_244CC8484(0x22u, "Discovery");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v56 = 136315394;
          int v57 = v60;
          __int16 v58 = 1024;
          int v59 = v12;
          _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "\t%s (%u)", v56, 0x12u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(0x22u, 2);
        }
        long long v44 = 0;
        long long v45 = 0;
        uint64_t v46 = 0;
        sub_244D73524((char *)&v44, (uint64_t *)v30, v31, ((char *)v31 - (unsigned char *)v30) >> 3);
        std::string __p = 0;
        long long v42 = 0;
        uint64_t v43 = 0;
        sub_244D735C0((char *)&__p, (long long *)v27, v28, 0xCCCCCCCCCCCCCCCDLL * (((char *)v28 - (unsigned char *)v27) >> 2));
        sub_244D73248(v12, (uint64_t)&v44, (uint64_t)&__p);
        if (__p)
        {
          long long v42 = __p;
          operator delete(__p);
        }
        if (v44)
        {
          long long v45 = v44;
          operator delete(v44);
        }
        uint64_t v14 = v11[1];
        if (v14)
        {
          do
          {
            long long v15 = (void **)v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            long long v15 = (void **)v11[2];
            BOOL v16 = *v15 == v11;
            uint64_t v11 = v15;
          }
          while (!v16);
        }
        uint64_t v11 = v15;
      }
      while (v15 != v48);
    }
    sub_244794718((uint64_t)&v47, v48[0]);
    if (v27)
    {
      uint64_t v28 = (long long *)v27;
      operator delete(v27);
    }
    if (v30)
    {
      uint64_t v31 = (uint64_t *)v30;
      operator delete(v30);
    }
    if (nw_path_get_status(v18) == nw_path_status_satisfied)
    {
      enumerate_block[0] = MEMORY[0x263EF8330];
      enumerate_block[1] = 0x40000000;
      enumerate_block[2] = sub_244D72E38;
      enumerate_block[3] = &unk_2651A9078;
      enumerate_block[4] = &buf;
      enumerate_block[5] = &v33;
      enumerate_block[6] = v3;
      nw_path_enumerate_interfaces(v18, enumerate_block);
    }
    uint64_t v17 = *(void *)(a1 + 32);
    BOOL v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    sub_244D73524((char *)&v23, *(uint64_t **)(*((void *)&buf + 1) + 40), *(uint64_t **)(*((void *)&buf + 1) + 48), (uint64_t)(*(void *)(*((void *)&buf + 1) + 48) - *(void *)(*((void *)&buf + 1) + 40)) >> 3);
    __int16 v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    sub_244D735C0((char *)&v20, (long long *)v34[5], (long long *)v34[6], 0xCCCCCCCCCCCCCCCDLL * ((v34[6] - v34[5]) >> 2));
    (*(void (**)(uint64_t, void **, void **))(v17 + 16))(v17, &v23, &v20);
    if (v20)
    {
      __int16 v21 = v20;
      operator delete(v20);
    }
    if (v23)
    {
      BOOL v24 = v23;
      operator delete(v23);
    }
    _Block_object_dispose(&v33, 8);
    if (v38)
    {
      uint64_t v39 = v38;
      operator delete(v38);
    }
    _Block_object_dispose(&buf, 8);
    if (v53)
    {
      __int16 v54 = v53;
      operator delete(v53);
    }
  }
}

void *sub_244D72DB0(void *result, void *a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void sub_244D72DDC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *sub_244D72DF4(void *result, void *a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void sub_244D72E20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t sub_244D72E38(void *a1, nw_interface_t interface)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[6];
  nw_interface_type_t type = nw_interface_get_type(interface);
  if (type <= nw_interface_type_wired && type != nw_interface_type_cellular)
  {
    int v7 = *(_DWORD *)(v4 + 40);
    uint32_t index = nw_interface_get_index(interface);
    if (!v7 || index == v7)
    {
      uint32_t v10 = nw_interface_get_index(interface);
      sub_244D71D48(v10, *(unsigned __int8 *)(v4 + 44), (void **)(*(void *)(a1[4] + 8) + 40), (void **)(*(void *)(a1[5] + 8) + 40), 0);
      uint64_t v11 = *(void *)(a1[4] + 8);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      sub_244D73524((char *)&v22, *(uint64_t **)(v11 + 40), *(uint64_t **)(v11 + 48), (uint64_t)(*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 3);
      uint64_t v12 = *(void *)(a1[5] + 8);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      __int16 v19 = 0;
      sub_244D735C0((char *)&v19, *(long long **)(v12 + 40), *(long long **)(v12 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v12 + 48) - *(void *)(v12 + 40)) >> 2));
      uint64_t v13 = nw_interface_get_index(interface);
      name = nw_interface_get_name(interface);
      nw_interface_type_t v15 = nw_interface_get_type(interface);
      BOOL v16 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (v15 > nw_interface_type_loopback) {
          uint64_t v17 = "Unknown";
        }
        else {
          uint64_t v17 = (&off_2651A90B8)[v15];
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = name;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v17;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "\t%s (%u / %s)", buf, 0x1Cu);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x22u, 2);
      }
      memset(buf, 0, 24);
      sub_244D73524((char *)buf, (uint64_t *)v22, v23, ((char *)v23 - (unsigned char *)v22) >> 3);
      std::string __p = 0;
      long long v26 = 0;
      uint64_t v27 = 0;
      sub_244D735C0((char *)&__p, (long long *)v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (unsigned char *)v19) >> 2));
      sub_244D73248(v13, (uint64_t)buf, (uint64_t)&__p);
      if (__p)
      {
        long long v26 = __p;
        operator delete(__p);
      }
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (v19)
      {
        uint64_t v20 = (long long *)v19;
        operator delete(v19);
      }
      if (v22)
      {
        uint64_t v23 = (uint64_t *)v22;
        operator delete(v22);
      }
    }
  }
  return 1;
}

uint64_t sub_244D730D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_244D730F8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_2447E7E54(v1);
  }
}

DNSServiceRef *sub_244D73108@<X0>(DNSServiceRef *result@<X0>, uint64_t a2@<X8>)
{
  if (*result)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *(_DWORD *)(a2 + 16) = 407;
  }
  else
  {
    uint64_t v3 = result;
    uint64_t Connection = DNSServiceCreateConnection(result);
    if (Connection)
    {
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v6 = *v3;
      if (qword_26B0D43B0 != -1)
      {
        uint32_t v8 = *v3;
        dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
        uint64_t v6 = v8;
      }
      uint64_t v7 = DNSServiceSetDispatchQueue(v6, (dispatch_queue_t)qword_26B0D4398);
      if (v7 && *v3)
      {
        DNSServiceRefDeallocate(*v3);
        *uint64_t v3 = 0;
      }
      uint64_t v5 = a2;
      uint64_t Connection = v7;
    }
    return (DNSServiceRef *)sub_244D76850(Connection, v5);
  }
  return result;
}

void *sub_244D73200(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_2447A0110();
  }
  return operator new(20 * a2);
}

uint64_t sub_244D73248(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v4 = result;
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v6 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v6)
  {
    do
    {
      if (*v5 == v4)
      {
        memset(v11, 0, sizeof(v11));
        inet_ntop(2, v5 + 1, v11, 0x10u);
        uint64_t v7 = sub_244CC8484(0x22u, "Discovery");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          uint64_t v14 = v11;
          _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "\t\t* ipv4: %s", buf, 0xCu);
        }
        uint64_t result = sub_244CC4E58(2u);
        if (result) {
          uint64_t result = sub_244CC4DE0(0x22u, 2);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  uint32_t v8 = *(_DWORD **)a3;
  uint64_t v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v9)
  {
    do
    {
      if (*v8 == v4)
      {
        *(_OWORD *)uint64_t v11 = 0u;
        memset(v12, 0, sizeof(v12));
        inet_ntop(30, v8 + 1, v11, 0x2Eu);
        uint32_t v10 = sub_244CC8484(0x22u, "Discovery");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          uint64_t v14 = v11;
          _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "\t\t* ipv6: %s", buf, 0xCu);
        }
        uint64_t result = sub_244CC4E58(2u);
        if (result) {
          uint64_t result = sub_244CC4DE0(0x22u, 2);
        }
      }
      v8 += 5;
    }
    while (v8 != v9);
  }
  return result;
}

_DWORD *sub_244D73468(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = (void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint32_t v8 = (void *)v5;
        unsigned int v9 = *(_DWORD *)(v5 + 28);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint32_t v8 = (void *)(a1 + 8);
LABEL_10:
    uint32_t v10 = operator new(0x20uLL);
    v10[7] = *a3;
    sub_244CB005C((uint64_t **)a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return v8;
}

char *sub_244D73524(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_244D73580(result, a4);
    unsigned int v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *sub_244D73580(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  uint64_t result = (char *)sub_244CAC704((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *sub_244D735C0(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_244D73628(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 20;
      a2 = (long long *)((char *)a2 + 20);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *sub_244D73628(void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    abort();
  }
  uint64_t result = (char *)sub_244D73200((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void sub_244D73678(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F956AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_244D73698(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F956AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t (*sub_244D736F4@<X0>(uint64_t (*result)(uint64_t, int *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>))(uint64_t, int *)
{
  if (!result)
  {
    int v6 = 490;
LABEL_6:
    int v5 = 47;
    goto LABEL_7;
  }
  if (!a2)
  {
    int v6 = 491;
    goto LABEL_6;
  }
  int v7 = 0;
  long long v8 = "src/platform/Darwin/DnssdImpl.cpp";
  int v9 = 493;
  uint64_t result = (uint64_t (*)(uint64_t, int *))result(a3, &v7);
  int v5 = 0;
  int v6 = 494;
LABEL_7:
  *(_DWORD *)a4 = v5;
  *(void *)(a4 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

void sub_244D73774()
{
  sub_244D73798(v0);
}

void sub_244D73798(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D6F0(&qword_26B0D43B8, 0, (uint64_t)a1);
  if (*(_DWORD *)a1 == 16)
  {
    *(_DWORD *)a1 = 0;
    a1[1] = "src/platform/Darwin/DnssdImpl.cpp";
    *((_DWORD *)a1 + 4) = 529;
  }
}

void sub_244D73828(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v23 = 506;
LABEL_40:
    a4[1].n128_u32[0] = v23;
    return;
  }
  if (*(unsigned __int8 *)(a1 + 84) >= 2u)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v23 = 507;
    goto LABEL_40;
  }
  if (!a2)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v23 = 508;
    goto LABEL_40;
  }
  if (!*(unsigned char *)(a1 + 34))
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v23 = 509;
    goto LABEL_40;
  }
  uint16_t rdlen = 0;
  rdata = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  unint64_t v7 = *(void *)(a1 + 104);
  if (v7 <= 0x40)
  {
    uint64_t v9 = *(void *)(a1 + 96);
    TXTRecordCreate(&v34, 0x40u, &v35);
    if (v7)
    {
      uint32_t v10 = (void *)(v9 + 16);
      while (1)
      {
        if (*v10 > 0xFFuLL)
        {
          int v24 = 119;
          goto LABEL_43;
        }
        if (TXTRecordSetValue(&v34, (const char *)*(v10 - 2), *v10, (const void *)*(v10 - 1))) {
          break;
        }
        v10 += 3;
        if (!--v7) {
          goto LABEL_11;
        }
      }
      int v24 = 122;
      goto LABEL_43;
    }
LABEL_11:
    int Length = TXTRecordGetLength(&v34);
    uint16_t rdlen = Length;
    if (!Length) {
      TXTRecordDeallocate(&v34);
    }
    rdata = (void *)TXTRecordGetBytesPtr(&v34);
    a4->n128_u32[0] = 0;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a4[1].n128_u32[0] = 132;
    sub_244D76128(a1);
    uint32_t v12 = *(_DWORD *)(a1 + 92);
    sub_244D73CFC((char *)(a1 + 34), &__p);
    if (v30 >= 0) {
      uint64_t v13 = (char *)&v29;
    }
    else {
      uint64_t v13 = (char *)v29;
    }
    unsigned int v14 = *(unsigned __int16 *)(a1 + 88);
    char v27 = *(unsigned char *)(a1 + 85);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v16 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136316162;
      if (p_p) {
        uint64_t v17 = (const char *)p_p;
      }
      else {
        uint64_t v17 = "(null)";
      }
      uint64_t v37 = a1;
      if (v13) {
        unsigned int v18 = v13;
      }
      else {
        unsigned int v18 = "(null)";
      }
      __int16 v38 = 2080;
      uint64_t v39 = v17;
      __int16 v40 = 1024;
      unsigned int v41 = v14;
      __int16 v42 = 2080;
      uint64_t v43 = v18;
      __int16 v44 = 1024;
      uint32_t v45 = v12;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "Registering service %s on host %s with port %u and type: %s on interface id: %u", buf, 0x2Cu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    context = 0;
    if (!byte_26B0D43D0)
    {
      byte_26B0D43D0 = 1;
      qword_26B0D43C0 = 0;
      unk_26B0D43C8 = 0;
      qword_26B0D43B8 = 0;
    }
    sub_244D6D7C0(v13, (uint64_t)&qword_26B0D43B8, (const char *)a1, &context, (uint64_t)buf);
    if (*(_DWORD *)buf)
    {
      __int16 v19 = sub_244CC4D84(0x98uLL);
      if (v19)
      {
        context = (DNSServiceRef *)sub_244D6DB20((uint64_t)v19, (uint64_t)v13, a1, a2, a3);
        uint64_t v20 = sub_244D719CC((uint64_t)(context + 11), (uint64_t)p_p, v27, v12);
        uint64_t v21 = context;
        if (!v20)
        {
          uint64_t v22 = (std::__shared_weak_count *)DNSServiceRegister(context + 3, 8u, v12, (const char *)a1, v13, "local.", (const char *)p_p, __rev16(v14), rdlen, rdata, (DNSServiceRegisterReply)sub_244D74A80, context);
          if (!v22)
          {
            if (!byte_26B0D43D0)
            {
              byte_26B0D43D0 = 1;
              qword_26B0D43C0 = 0;
              unk_26B0D43C8 = 0;
              qword_26B0D43B8 = 0;
            }
            sub_244D6D3F4((void **)&qword_26B0D43B8, context, (uint64_t)a4);
            goto LABEL_52;
          }
          uint64_t v20 = v22;
          uint64_t v21 = context;
          context[3] = 0;
        }
        goto LABEL_46;
      }
      a4->n128_u32[0] = 11;
      a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
      int v26 = 196;
    }
    else
    {
      updated = (std::__shared_weak_count *)DNSServiceUpdateRecord(context[3], 0, 8u, rdlen, rdata, 0);
      if (updated)
      {
        uint64_t v20 = updated;
        uint64_t v21 = context;
LABEL_46:
        sub_244D6D308(v21, (uint64_t)v20, a4);
LABEL_52:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v30 < 0) {
          operator delete(v29);
        }
        goto LABEL_56;
      }
      a4->n128_u32[0] = 0;
      a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
      int v26 = 192;
    }
    a4[1].n128_u32[0] = v26;
    goto LABEL_52;
  }
  int v24 = 112;
LABEL_43:
  a4->n128_u32[0] = 47;
  a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
  a4[1].n128_u32[0] = v24;
LABEL_56:
  if (rdlen) {
    TXTRecordDeallocate(&v34);
  }
}

void sub_244D73CFC(char *__s@<X0>, std::string *a2@<X8>)
{
  sub_244D70AC0(&v4, __s);
  std::string::push_back(&v4, 46);
  std::string v5 = v4;
  memset(&v4, 0, sizeof(v4));
  uint64_t v3 = std::string::append(&v5, "local.");
  *a2 = *v3;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_244D73D9C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a1 + 16) = 536;
}

void sub_244D73DB8(char *a1@<X0>, unsigned int a2@<W1>, uint32_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X6>, __n128 *a7@<X8>)
{
  if (!a1)
  {
    a7->n128_u32[0] = 47;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v22 = 543;
LABEL_12:
    a7[1].n128_u32[0] = v22;
    return;
  }
  if (!a4)
  {
    a7->n128_u32[0] = 47;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v22 = 544;
    goto LABEL_12;
  }
  char v9 = a2;
  if (a2 >= 2)
  {
    a7->n128_u32[0] = 47;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v22 = 545;
    goto LABEL_12;
  }
  uint64_t v13 = (char *)__p;
  sub_244D75BB8(a1, a2, (char *)__p);
  uint32_t v14 = *a3;
  int v15 = v24;
  BOOL v16 = (char *)__p[0];
  uint64_t v17 = sub_244CC4D84(0x50uLL);
  if (v17)
  {
    unsigned int v18 = v17;
    if (v15 < 0) {
      uint64_t v13 = v16;
    }
    __int16 v19 = (DNSServiceRef *)sub_244D6DD34((uint64_t)v17, a5, a4, v9);
    a7->n128_u64[0] = 0;
    a7->n128_u64[1] = 0;
    a7[1].n128_u64[0] = 0;
    sub_244D74C00(v19, v14, v13, a7);
    if (a7->n128_u32[0]) {
      goto LABEL_16;
    }
    int v20 = 0;
    *a6 = v18;
    int v21 = 261;
  }
  else
  {
    int v21 = 257;
    int v20 = 11;
  }
  a7->n128_u32[0] = v20;
  a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
  a7[1].n128_u32[0] = v21;
LABEL_16:
  if (v24 < 0) {
    operator delete(__p[0]);
  }
}

void sub_244D73F1C(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D1D8((void **)&qword_26B0D43B8, (uint64_t)a1, (uint64_t)&__p);
  if (__p)
  {
    *(_DWORD *)a2 = 216;
    *(void *)(a2 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    int v4 = 557;
LABEL_33:
    *(_DWORD *)(a2 + 16) = v4;
    return;
  }
  if (a1[2] != 1)
  {
    *(_DWORD *)a2 = 216;
    *(void *)(a2 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    int v4 = 564;
    goto LABEL_33;
  }
  std::string __p = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  if (byte_26B0D43D0)
  {
    uint64_t v5 = qword_26B0D43B8;
    uint64_t v6 = qword_26B0D43C0;
    if (qword_26B0D43B8 != qword_26B0D43C0)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)v5;
        if (*(_DWORD *)(*(void *)v5 + 8) == 3 && *(_DWORD **)(v8 + 104) == a1)
        {
          if (v7 >= v26)
          {
            uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v9 + 1) >> 61) {
              abort();
            }
            unint64_t v10 = (v26 - (unsigned char *)__p) >> 2;
            if (v10 <= v9 + 1) {
              unint64_t v10 = v9 + 1;
            }
            if ((unint64_t)(v26 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v11 = v10;
            }
            if (v11)
            {
              uint32_t v12 = (char *)sub_244CAC704((uint64_t)&v26, v11);
              uint64_t v8 = *(void *)v5;
            }
            else
            {
              uint32_t v12 = 0;
            }
            uint64_t v13 = &v12[8 * v9];
            *(void *)uint64_t v13 = v8;
            unint64_t v7 = v13 + 8;
            int v15 = (char *)__p;
            uint32_t v14 = v25;
            if (v25 != __p)
            {
              do
              {
                uint64_t v16 = *((void *)v14 - 1);
                v14 -= 8;
                *((void *)v13 - 1) = v16;
                v13 -= 8;
              }
              while (v14 != v15);
              uint32_t v14 = (char *)__p;
            }
            std::string __p = v13;
            uint64_t v25 = v7;
            int v26 = &v12[8 * v11];
            if (v14) {
              operator delete(v14);
            }
          }
          else
          {
            *(void *)unint64_t v7 = v8;
            v7 += 8;
          }
          uint64_t v25 = v7;
        }
        v5 += 8;
      }
      while (v5 != v6);
      uint64_t v17 = (void **)__p;
      if (__p != v7)
      {
        do
        {
          unsigned int v18 = *v17++;
          v22.n128_u32[0] = 116;
          v22.n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
          int v23 = 583;
          sub_244D6D290(v18, &v22, &v21);
        }
        while (v17 != (void **)v7);
      }
    }
  }
  else
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  v19.n128_u32[0] = 116;
  v19.n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
  int v20 = 586;
  sub_244D6D290(a1, &v19, &v21);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a2 + 16) = 587;
  if (__p)
  {
    uint64_t v25 = (char *)__p;
    operator delete(__p);
  }
}

void sub_244D7418C(char *a1@<X0>, unsigned int a2@<W1>, uint32_t *a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  if (!a1)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v15 = 593;
LABEL_11:
    a5[1].n128_u32[0] = v15;
    return;
  }
  if (!a4)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v15 = 594;
    goto LABEL_11;
  }
  char v7 = a2;
  if (a2 >= 2)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v15 = 595;
    goto LABEL_11;
  }
  uint64_t v9 = (char *)__p;
  sub_244D75BB8(a1, a2, (char *)__p);
  uint32_t v10 = *a3;
  int v11 = v17;
  uint32_t v12 = (char *)__p[0];
  uint64_t v13 = sub_244CC4D84(0x28uLL);
  if (v13)
  {
    if (v11 < 0) {
      uint64_t v9 = v12;
    }
    uint32_t v14 = (DNSServiceRef *)sub_244D6EA8C((uint64_t)v13, a4, v7);
    sub_244D74C00(v14, v10, v9, a5);
  }
  else
  {
    a5->n128_u32[0] = 11;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a5[1].n128_u32[0] = 267;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_244D742BC(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  uint64_t v3 = (void *)sub_244D6DA50((uint64_t **)&qword_26B0D43B8, a1);
  if (v3)
  {
    sub_244D6D308(v3, 0, a2);
  }
  else
  {
    a2->n128_u32[0] = 216;
    a2->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a2[1].n128_u32[0] = 607;
  }
}

void sub_244D74354(uint64_t a1@<X0>, uint32_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  if (!a1)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v20 = 616;
LABEL_19:
    a5[1].n128_u32[0] = v20;
    return;
  }
  if (*(unsigned __int8 *)(a1 + 84) >= 2u)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v20 = 617;
    goto LABEL_19;
  }
  p_p = &__p;
  sub_244D75BA8(a1, &__p);
  if (qword_268EC3538 && (uint64_t v11 = *(void *)(qword_268EC3540 + 8) - *(void *)qword_268EC3540) != 0)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 / 152;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    uint64_t v14 = *(void *)qword_268EC3540 - 152;
    while (1)
    {
      v14 += 152;
      if (v14 == a1) {
        break;
      }
      v12 += 176;
      if (!--v13) {
        goto LABEL_10;
      }
    }
    uint64_t v23 = *(void *)(qword_268EC3538 + 48) + v12;
    int v15 = (char *)(v23 + 152);
    if (*(char *)(v23 + 175) < 0) {
      int v15 = *(char **)v15;
    }
  }
  else
  {
LABEL_10:
    int v15 = 0;
  }
  uint32_t v16 = *a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  int v17 = *(unsigned __int8 *)(a1 + 85);
  uint64_t v18 = sub_244D6D954((uint64_t **)&qword_26B0D43B8, (char *)a1);
  if (v18) {
    int v19 = *(_DWORD *)(v18 + 96);
  }
  else {
    int v19 = 0;
  }
  __n128 v21 = sub_244CC4D84(0x98uLL);
  if (v21)
  {
    uint64_t v22 = sub_244D6F1B4((uint64_t)v21, a4, a3, v17, a1, qword_268EC3538, v19);
    sub_244D74FB0(v22, v16, (char *)p_p, (const char *)a1, v15, a5);
  }
  else
  {
    a5->n128_u32[0] = 11;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a5[1].n128_u32[0] = 472;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_244D74560(uint64_t a1@<X0>, uint32_t *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  if (!a1)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v13 = 640;
LABEL_11:
    a4[1].n128_u32[0] = v13;
    return;
  }
  if (*(unsigned __int8 *)(a1 + 84) >= 2u)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    int v13 = 641;
    goto LABEL_11;
  }
  p_p = &__p;
  sub_244D75BA8(a1, &__p);
  uint32_t v9 = *a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  int v10 = *(unsigned __int8 *)(a1 + 85);
  uint64_t v11 = sub_244D6D954((uint64_t **)&qword_26B0D43B8, (char *)a1);
  if (v11) {
    int v12 = *(_DWORD *)(v11 + 96);
  }
  else {
    int v12 = 0;
  }
  uint64_t v14 = sub_244CC4D84(0x98uLL);
  if (v14)
  {
    uint64_t v15 = sub_244D6F260((uint64_t)v14, a3, v10, a1, v12);
    sub_244D74FB0(v15, v9, (char *)p_p, (const char *)a1, 0, a4);
  }
  else
  {
    a4->n128_u32[0] = 11;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a4[1].n128_u32[0] = 481;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

_DWORD *sub_244D746CC(char *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf.n128_u32[0] = 136315138;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)a1;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "No longer need resolve for %s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  uint64_t result = (_DWORD *)sub_244D6D954((uint64_t **)&qword_26B0D43B8, a1);
  if (result)
  {
    int v4 = result[24];
    if (v4)
    {
      int v5 = v4 - 1;
      result[24] = v5;
      if (!v5)
      {
        do
        {
          v6.n128_u32[0] = 116;
          v6.n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
          int v7 = 689;
          sub_244D6D290(result, &v6, &buf);
          if (!byte_26B0D43D0)
          {
            byte_26B0D43D0 = 1;
            qword_26B0D43C0 = 0;
            unk_26B0D43C8 = 0;
            qword_26B0D43B8 = 0;
          }
          uint64_t result = (_DWORD *)sub_244D6D954((uint64_t **)&qword_26B0D43B8, a1);
        }
        while (result);
      }
    }
  }
  return result;
}

void sub_244D74850(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint32_t *a4@<X3>, uint64_t a5@<X8>)
{
  v14[0] = a2;
  v14[1] = a3;
  if (!a1)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    *(_DWORD *)(a5 + 16) = 697;
    return;
  }
  uint32_t v6 = *a4;
  sub_244D73CFC(a1, &__p);
  if (sub_244CBED5C((uint64_t)v14))
  {
    rdata[0] = sub_244CBEBFC((uint64_t)v14);
    rdata[1] = v7;
    uint16_t v8 = 28;
    uint16_t v9 = 16;
LABEL_7:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v11 = DNSServiceReconfirmRecord(0, v6, (const char *)p_p, v8, 1u, v9, rdata);
    sub_244D74968((uint64_t)"ChipDnssdReconfirmRecord", v11);
    sub_244D76850(v11, a5);
    goto LABEL_12;
  }
  if (sub_244CBEC68(v14))
  {
    LODWORD(rdata[0]) = sub_244CBEBF4((uint64_t)v14);
    uint16_t v8 = 1;
    uint16_t v9 = 4;
    goto LABEL_7;
  }
  *(_DWORD *)a5 = 47;
  *(void *)(a5 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a5 + 16) = 730;
LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_244D74968(uint64_t result, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = (const char *)result;
    int v4 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if (v3) {
        int v5 = v3;
      }
      else {
        int v5 = "(null)";
      }
      *(_DWORD *)__n128 buf = 136315394;
      uint64_t v7 = v5;
      __int16 v8 = 2080;
      uint16_t v9 = sub_244D76610(a2);
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "%s (%s)", buf, 0x16u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      sub_244D76610(a2);
      return sub_244CC4DE0(0x22u, 1);
    }
  }
  return result;
}

double sub_244D74A80(uint64_t a1, int a2, uint64_t a3, const char *a4, const char *a5, const char *a6, void *a7)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v13 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (a4) {
      uint64_t v14 = a4;
    }
    else {
      uint64_t v14 = "(null)";
    }
    *(_DWORD *)__n128 buf = 136316162;
    if (a5) {
      uint64_t v15 = a5;
    }
    else {
      uint64_t v15 = "(null)";
    }
    int v19 = "OnRegister";
    __int16 v20 = 2080;
    if (a6) {
      uint32_t v16 = a6;
    }
    else {
      uint32_t v16 = "(null)";
    }
    __n128 v21 = v14;
    __int16 v22 = 2080;
    uint64_t v23 = v15;
    __int16 v24 = 2080;
    uint64_t v25 = v16;
    __int16 v26 = 1024;
    int v27 = a2;
    _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "Mdns: %s name: %s, type: %s, domain: %s, flags: %d", buf, 0x30u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  return sub_244D6D308(a7, a3, (__n128 *)buf);
}

void sub_244D74C00(DNSServiceRef *a1@<X0>, uint32_t a2@<W1>, char *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t Connection = DNSServiceCreateConnection(a1 + 3);
  if (Connection)
  {
    a1[3] = 0;
    sub_244D6D308(a1, Connection, a4);
  }
  else
  {
    uint16_t v9 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = "(null)";
      if (a3) {
        uint64_t v10 = a3;
      }
      *(_DWORD *)__n128 buf = 136315138;
      uint64_t v14 = v10;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Browsing for: %s on local domain", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_244D74EA0(a1, a2, a3, "local.", a4);
    if (!a4->n128_u32[0])
    {
      uint64_t v11 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = "(null)";
        if (a3) {
          int v12 = a3;
        }
        *(_DWORD *)__n128 buf = 136315394;
        uint64_t v14 = v12;
        __int16 v15 = 2080;
        uint32_t v16 = "default.service.arpa.";
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Browsing for: %s on %s domain", buf, 0x16u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x22u, 2);
      }
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      sub_244D74EA0(a1, a2, a3, "default.service.arpa.", a4);
      if (!a4->n128_u32[0])
      {
        if (!byte_26B0D43D0)
        {
          byte_26B0D43D0 = 1;
          qword_26B0D43C0 = 0;
          unk_26B0D43C8 = 0;
          qword_26B0D43B8 = 0;
        }
        sub_244D6D3F4((void **)&qword_26B0D43B8, a1, (uint64_t)a4);
      }
    }
  }
}

void sub_244D74EA0(void *context@<X0>, uint32_t interfaceIndex@<W1>, char *regtype@<X2>, char *domain@<X3>, __n128 *a5@<X8>)
{
  DNSServiceRef sdRef = (DNSServiceRef)*((void *)context + 3);
  uint64_t v7 = DNSServiceBrowse(&sdRef, 0x4000u, interfaceIndex, regtype, domain, (DNSServiceBrowseReply)sub_244D74F30, context);
  if (v7)
  {
    sub_244D6D308(context, v7, a5);
  }
  else
  {
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a5[1].n128_u32[0] = 228;
  }
}

void sub_244D74F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a4)
  {
    sub_244D6D308(a8, a4, &v9);
  }
  else
  {
    __int16 v8 = *(void (**)(void))(*(void *)a8 + 32);
    v8();
  }
}

void sub_244D74FB0(uint64_t a1@<X0>, uint32_t a2@<W1>, char *a3@<X2>, const char *a4@<X3>, char *a5@<X4>, __n128 *a6@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v12 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (a3) {
      int v13 = a3;
    }
    else {
      int v13 = "(null)";
    }
    *(_DWORD *)__n128 buf = 136315906;
    if (a4) {
      uint64_t v14 = a4;
    }
    else {
      uint64_t v14 = "(null)";
    }
    int v19 = v13;
    __int16 v20 = 2080;
    if (a5) {
      __int16 v15 = a5;
    }
    else {
      __int16 v15 = "(null)";
    }
    __n128 v21 = v14;
    __int16 v22 = 2080;
    uint64_t v23 = v15;
    __int16 v24 = 1024;
    uint32_t v25 = a2;
    _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Resolve type=%s name=%s domain=%s interface=%u", buf, 0x26u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  uint64_t Connection = DNSServiceCreateConnection((DNSServiceRef *)(a1 + 24));
  if (Connection)
  {
    *(void *)(a1 + 24) = 0;
    sub_244D6D308((void *)a1, Connection, a6);
    return;
  }
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  if (a5)
  {
    sub_244D75220(a2, a3, a5, (void *)(a1 + 136), (DNSServiceRef *)a1, a4, a6);
    unsigned __int32 v17 = a6->n128_u32[0];
    if (a6->n128_u32[0]) {
      return;
    }
  }
  else
  {
    sub_244D75220(a2, a3, "local.", (void *)(a1 + 136), (DNSServiceRef *)a1, a4, a6);
    if (a6->n128_u32[0]) {
      return;
    }
    a6->n128_u64[0] = 0;
    a6->n128_u64[1] = 0;
    a6[1].n128_u64[0] = 0;
    sub_244D75220(a2, a3, "default.service.arpa.", (void *)(a1 + 136), (DNSServiceRef *)a1, a4, a6);
    if (a6->n128_u32[0]) {
      return;
    }
    LOBYTE(v17) = 1;
  }
  *(unsigned char *)(a1 + 112) = v17;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  a6->n128_u64[0] = 0;
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D3F4((void **)&qword_26B0D43B8, (void *)a1, (uint64_t)a6);
  if (!a6->n128_u32[0]) {
    ++*(_DWORD *)(a1 + 96);
  }
}

void sub_244D75220(uint32_t interfaceIndex@<W1>, char *regtype@<X2>, char *domain@<X4>, void *context@<X5>, DNSServiceRef *a5@<X0>, const char *a6@<X3>, __n128 *a7@<X8>)
{
  DNSServiceRef sdRef = a5[3];
  uint64_t v9 = DNSServiceResolve(&sdRef, 0x4000u, interfaceIndex, a6, regtype, domain, (DNSServiceResolveReply)sub_244D752B0, context);
  if (v9)
  {
    sub_244D6D308(a5, v9, a7);
  }
  else
  {
    a7->n128_u32[0] = 0;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a7[1].n128_u32[0] = 395;
  }
}

double sub_244D752B0(uint64_t a1, int a2, int a3, int a4, const char *a5, char *a6, unsigned int a7, unsigned int a8, unsigned __int8 *a9, uint64_t a10)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint32_t v16 = sub_244CC8484(0x22u, "Discovery");
  unsigned int v17 = __rev16(a7);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      uint64_t v18 = a5;
    }
    else {
      uint64_t v18 = "(null)";
    }
    *(_DWORD *)__n128 buf = 136316418;
    *(void *)&uint8_t buf[4] = "OnResolve";
    *(_WORD *)&unsigned char buf[12] = 1024;
    if (a6) {
      int v19 = a6;
    }
    else {
      int v19 = "(null)";
    }
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    __int16 v37 = 2080;
    __int16 v38 = v18;
    __int16 v39 = 2080;
    __int16 v40 = v19;
    __int16 v41 = 1024;
    unsigned int v42 = v17;
    _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "Mdns: %s flags: %d, interface: %u, fullname: %s, hostname: %s, port: %u", buf, 0x32u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  if (!a10)
  {
    uint64_t v31 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_ERROR, "ResolveContextWithType is null", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x22u, 1);
    }
    return result;
  }
  uint64_t v20 = *(void *)a10;
  memset(buf, 0, sizeof(buf));
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D1D8((void **)&qword_26B0D43B8, v20, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    sub_244D74968((uint64_t)"OnResolve", a4);
    if (!a4) {
      sub_244D70064(v20, a3, a5, a6, a7, a8, a9, *(unsigned char *)(a10 + 8));
    }
    if ((a2 & 1) == 0)
    {
      if (!sub_244D705D8(v20))
      {
        uint64_t v32 = (void *)v20;
        uint64_t v33 = 4294901754;
        return sub_244D6D308(v32, v33, (__n128 *)buf);
      }
      __int16 v22 = *(void **)(v20 + 40);
      if (v22 != (void *)(v20 + 48))
      {
        DNSServiceProtocol v23 = *(_DWORD *)(v20 + 64);
        do
        {
          if (!*((unsigned char *)v22 + 272))
          {
            __int16 v24 = (const char *)(v22 + 31);
            if (*((char *)v22 + 271) < 0) {
              __int16 v24 = *(const char **)v24;
            }
            uint32_t v25 = *((_DWORD *)v22 + 8);
            DNSServiceRef sdRef = *(DNSServiceRef *)(v20 + 24);
            if (*((unsigned char *)v22 + 64)) {
              uint64_t v26 = (void *)(v20 + 120);
            }
            else {
              uint64_t v26 = (void *)(v20 + 136);
            }
            uint64_t AddrInfo = DNSServiceGetAddrInfo(&sdRef, 0x4000u, v25, v23, v24, (DNSServiceGetAddrInfoReply)sub_244D75608, v26);
            if (AddrInfo)
            {
              uint64_t v33 = AddrInfo;
              uint64_t v32 = (void *)v20;
              return sub_244D6D308(v32, v33, (__n128 *)buf);
            }
            *((unsigned char *)v22 + 272) = 1;
          }
          uint64_t v28 = (void *)v22[1];
          if (v28)
          {
            do
            {
              uint64_t v29 = v28;
              uint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v29 = (void *)v22[2];
              BOOL v30 = *v29 == (void)v22;
              __int16 v22 = v29;
            }
            while (!v30);
          }
          __int16 v22 = v29;
        }
        while (v29 != (void *)(v20 + 48));
      }
    }
  }
  return result;
}

void sub_244D75608(uint64_t a1, int a2, int a3, int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v14 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      __int16 v15 = a5;
    }
    else {
      __int16 v15 = "(null)";
    }
    *(_DWORD *)__n128 buf = 136315906;
    *(void *)&uint8_t buf[4] = "OnGetAddrInfo";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    __int16 v27 = 2080;
    uint64_t v28 = v15;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "Mdns: %s flags: %d, interface: %u, hostname: %s", buf, 0x22u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  if (!a8)
  {
    uint64_t v20 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_ERROR, "ResolveContextWithType is null", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x22u, 1);
    }
    return;
  }
  uint32_t v16 = *(char **)a8;
  memset(buf, 0, sizeof(buf));
  if (!byte_26B0D43D0)
  {
    byte_26B0D43D0 = 1;
    qword_26B0D43C0 = 0;
    unk_26B0D43C8 = 0;
    qword_26B0D43B8 = 0;
  }
  sub_244D6D1D8((void **)&qword_26B0D43B8, (uint64_t)v16, (uint64_t)buf);
  if (*(_DWORD *)buf) {
    return;
  }
  sub_244D74968((uint64_t)"OnGetAddrInfo", a4);
  if (!a4)
  {
    *(_DWORD *)__n128 buf = a3;
    sub_244D70AC0(&buf[8], a5);
    BYTE6(v28) = *(unsigned char *)(a8 + 8);
    memset(v25, 0, sizeof(v25));
    sub_244D6FCD8((uint64_t)v16, (int *)buf, a6, (uint64_t)v25);
    if (!LODWORD(v25[0]) && *(unsigned char *)(a8 + 8)) {
      v16[112] = 0;
    }
    if (SBYTE5(v28) < 0)
    {
      operator delete(*(void **)&buf[8]);
      if ((a2 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_29:
      if (!v16[112]) {
        sub_244D6F2C4((uint64_t)v16);
      }
      return;
    }
  }
  if (a2) {
    goto LABEL_29;
  }
LABEL_18:
  if (sub_244D70000((uint64_t)v16))
  {
    if (v16[112])
    {
      if (v16[113]) {
        return;
      }
      memset(buf, 0, sizeof(buf));
      sub_244D7599C((uint64_t)v16, v17, v18, (uint64_t)buf);
      if (!*(_DWORD *)buf)
      {
        v16[113] = 1;
        return;
      }
      int v19 = (__n128 *)v25;
    }
    else
    {
      DNSServiceProtocol v23 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        __int16 v24 = v16 + 72;
        if (v16[95] < 0) {
          __int16 v24 = (void *)*v24;
        }
        *(_DWORD *)__n128 buf = 136315138;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_INFO, "No need to start SRP resolve timer for %s; completing resolve",
          buf,
          0xCu);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0x22u, 3);
      }
      int v19 = (__n128 *)buf;
    }
    __n128 v21 = v16;
    uint64_t v22 = 0;
  }
  else
  {
    int v19 = (__n128 *)buf;
    __n128 v21 = v16;
    uint64_t v22 = 4294901754;
  }
  sub_244D6D308(v21, v22, v19);
}

uint64_t sub_244D7599C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = sub_244D7834C(a1, a2, a3);
  if ((result & 0xFF0000) != 0) {
    unsigned __int16 v7 = result;
  }
  else {
    unsigned __int16 v7 = 250;
  }
  if (a1)
  {
    __int16 v8 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)__n128 buf = 67109378;
      int v13 = v7;
      __int16 v14 = 2080;
      __int16 v15 = v9;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Starting timer to wait for %d milliseconds for possible SRP resolve results for %s", buf, 0x12u);
    }
    uint64_t v10 = sub_244CC4E58(2u);
    if (v10) {
      uint64_t v10 = sub_244CC4DE0(0x22u, 2);
    }
    uint64_t v11 = sub_244D6A430(v10);
    return (*(uint64_t (**)(uint64_t, void, double (*)(uint64_t, char *), uint64_t))(*(void *)v11 + 40))(v11, v7, sub_244D6FBD0, a1);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    *(_DWORD *)(a4 + 16) = 90;
  }
  return result;
}

void sub_244D75B20(char *__s@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2)
  {
    sub_244D70AC0(&v6, __s);
    int v4 = "._tcp";
  }
  else
  {
    sub_244D70AC0(&v6, __s);
    int v4 = "._udp";
  }
  int v5 = std::string::append(&v6, v4);
  *a3 = *v5;
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_244D75BA8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void sub_244D75BB8(char *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  v29[2] = *MEMORY[0x263EF8340];
  sub_244D75B20(a1, a2, (std::string *)a3);
  sub_244D70AC0(v27, "._sub.");
  uint64_t v4 = a3[23];
  if ((v4 & 0x80u) == 0) {
    int v5 = a3;
  }
  else {
    int v5 = *(char **)a3;
  }
  unsigned __int8 v6 = v28;
  if ((v28 & 0x80u) == 0) {
    unsigned __int16 v7 = v27;
  }
  else {
    unsigned __int16 v7 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    int64_t v8 = v28;
  }
  else {
    int64_t v8 = (int64_t)v27[1];
  }
  if (v8)
  {
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *((void *)a3 + 1);
    }
    if (v4 >= v8)
    {
      uint64_t v9 = &v5[v4];
      int v10 = *(char *)v7;
      uint64_t v11 = v5;
      do
      {
        uint64_t v12 = v4 - v8;
        if (v12 == -1) {
          break;
        }
        int v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13) {
          break;
        }
        __int16 v14 = v13;
        if (!memcmp(v13, v7, v8))
        {
          if (v14 != v9)
          {
            std::string::size_type v15 = v14 - v5;
            if (v14 - v5 != -1) {
              goto LABEL_21;
            }
          }
          break;
        }
        uint64_t v11 = v14 + 1;
        uint64_t v4 = v9 - (v14 + 1);
      }
      while (v4 >= v8);
    }
  }
  else
  {
    std::string::size_type v15 = 0;
LABEL_21:
    std::string::basic_string(&v25, (const std::string *)a3, v15 + v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
    uint64_t v16 = std::string::append(&v25, ",");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string(&__p, (const std::string *)a3, 0, v15, (std::allocator<char> *)v29);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v26, (const std::string::value_type *)p_p, size);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
    v29[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (a3[23] < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t v23 = v29[0];
    *(void *)a3 = v21;
    *((void *)a3 + 1) = v23;
    *(void *)(a3 + 15) = *(void *)((char *)v29 + 7);
    a3[23] = v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v6 = v28;
  }
  if ((v6 & 0x80) != 0) {
    operator delete(v27[0]);
  }
}

uint64_t sub_244D75DEC(const char *a1, int a2, const char **a3, int a4)
{
  sub_244D75FB4((uint64_t)v14);
  size_t v8 = strlen(a1);
  sub_244D762B8(v14, (uint64_t)a1, v8);
  if (a2) {
    uint64_t v9 = "._tcp";
  }
  else {
    uint64_t v9 = "._udp";
  }
  sub_244D762B8(v14, (uint64_t)v9, 5);
  if (a4 >= 1)
  {
    uint64_t v10 = a4;
    do
    {
      sub_244D762B8(v14, (uint64_t)",", 1);
      uint64_t v11 = *a3++;
      size_t v12 = strlen(v11);
      sub_244D762B8(v14, (uint64_t)v11, v12);
      --v10;
    }
    while (v10);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x245695F40](&v16);
}

uint64_t sub_244D75FB4(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 24;
  uint64_t v3 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  unsigned __int8 v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t sub_244D76128(uint64_t a1)
{
  return sub_244D75DEC((const char *)(a1 + 75), *(unsigned __int8 *)(a1 + 84), *(const char ***)(a1 + 112), *(void *)(a1 + 120));
}

__n128 sub_244D7613C@<Q0>(std::string *__s@<X0>, uint64_t a2@<X8>)
{
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (std::string *)__s->__r_.__value_.__r.__words[0];
    int64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    int64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    uint64_t v5 = __s;
  }
  if (size >= 1)
  {
    unsigned __int8 v6 = (char *)v5 + size;
    unsigned __int16 v7 = v5;
    do
    {
      size_t v8 = memchr(v7, 44, size);
      if (!v8) {
        break;
      }
      if (*v8 == 44)
      {
        if (v8 != v6 && v8 - (unsigned char *)v5 != -1) {
          std::string::erase(__s, v8 - (unsigned char *)v5, 0xFFFFFFFFFFFFFFFFLL);
        }
        break;
      }
      unsigned __int16 v7 = (std::string *)(v8 + 1);
      int64_t size = v6 - (unsigned char *)v7;
    }
    while (v6 - (unsigned char *)v7 >= 1);
  }
  __n128 result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)a2 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&__s->__r_.__value_.__l + 2);
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

std::string *sub_244D761F4@<X0>(char *__s@<X0>, uint64_t a2@<X8>)
{
  __n128 result = (std::string *)sub_244D70AC0((void *)a2, __s);
  char v4 = *(unsigned char *)(a2 + 23);
  if (v4 >= 0) {
    int64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int64_t v5 = *(void *)(a2 + 8);
  }
  if (v4 >= 0) {
    unsigned __int8 v6 = (std::string *)a2;
  }
  else {
    unsigned __int8 v6 = *(std::string **)a2;
  }
  if (v5 >= 1)
  {
    unsigned __int16 v7 = (std::string *)((char *)v6 + v5);
    __n128 result = v6;
    do
    {
      __n128 result = (std::string *)memchr(result, 46, v5);
      if (!result) {
        break;
      }
      if (result->__r_.__value_.__s.__data_[0] == 46)
      {
        if (result != v7 && (char *)result - (char *)v6 != -1)
        {
          return std::string::erase((std::string *)a2, (char *)result - (char *)v6, 0xFFFFFFFFFFFFFFFFLL);
        }
        return result;
      }
      __n128 result = (std::string *)((char *)result + 1);
      int64_t v5 = (char *)v7 - (char *)result;
    }
    while ((char *)v7 - (char *)result >= 1);
  }
  return result;
}

void *sub_244D762B8(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x245695E70](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!sub_244D763FC(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x245695E80](v13);
  return a1;
}

uint64_t sub_244D763FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_244D76568(__p, v12, __c);
      int v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void *sub_244D76568(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

const char *sub_244D76610(int a1)
{
  switch(a1)
  {
    case -65568:
      __n128 result = "kDNSServiceErr_Timeout";
      break;
    case -65567:
      __n128 result = "kDNSServiceErr_PollingMode";
      break;
    case -65566:
      __n128 result = "kDNSServiceErr_NoRouter";
      break;
    case -65565:
      __n128 result = "kDNSServiceErr_NATPortMappingDisabled";
      break;
    case -65564:
      __n128 result = "kDNSServiceErr_NATPortMappingUnsupported";
      break;
    case -65563:
      __n128 result = "kDNSServiceErr_ServiceNotRunning";
      break;
    case -65562:
      __n128 result = "kDNSServiceErr_Transient";
      break;
    case -65561:
      __n128 result = "kDNSServiceErr_BadKey";
      break;
    case -65560:
      __n128 result = "kDNSServiceErr_BadSig";
      break;
    case -65559:
      __n128 result = "kDNSServiceErr_BadTime";
      break;
    case -65558:
      __n128 result = "kDNSServiceErr_DoubleNAT";
      break;
    case -65557:
      __n128 result = "kDNSServiceErr_NATTraversal";
      break;
    case -65556:
      __n128 result = "kDNSServiceErr_NoSuchKey";
      break;
    case -65555:
      __n128 result = "kDNSServiceErr_NoAuth";
      break;
    case -65554:
      __n128 result = "kDNSServiceErr_NoSuchRecord";
      break;
    case -65553:
      __n128 result = "kDNSServiceErr_Refused";
      break;
    case -65552:
      __n128 result = "kDNSServiceErr_BadInterfaceIndex";
      break;
    case -65551:
      __n128 result = "kDNSServiceErr_Incompatible";
      break;
    case -65550:
      __n128 result = "kDNSServiceErr_Firewall";
      break;
    case -65549:
      __n128 result = "kDNSServiceErr_Invalid";
      break;
    case -65548:
      __n128 result = "kDNSServiceErr_NameConflict";
      break;
    case -65547:
      __n128 result = "kDNSServiceErr_AlreadyRegistered";
      break;
    case -65546:
      goto LABEL_5;
    case -65545:
      __n128 result = "kDNSServiceErr_NotInitialized";
      break;
    case -65544:
      __n128 result = "kDNSServiceErr_Unsupported";
      break;
    case -65543:
      __n128 result = "kDNSServiceErr_BadFlags";
      break;
    case -65542:
      __n128 result = "kDNSServiceErr_BadState";
      break;
    case -65541:
      __n128 result = "kDNSServiceErr_BadReference";
      break;
    case -65540:
      __n128 result = "kDNSServiceErr_BadParam";
      break;
    case -65539:
      __n128 result = "kDNSServiceErr_NoMemory";
      break;
    case -65538:
      __n128 result = "kDNSServiceErr_NoSuchName";
      break;
    case -65537:
      __n128 result = "kDNSServiceErr_Unknown";
      break;
    default:
      if (a1) {
LABEL_5:
      }
        __n128 result = "Unknown DNSService error code";
      else {
        __n128 result = "kDNSServiceErr_NoError";
      }
      break;
  }
  return result;
}

uint64_t sub_244D76850@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((int)result > -65540)
  {
    if (result == -65539)
    {
      int v2 = 133;
      __n128 result = 11;
      goto LABEL_11;
    }
    if (!result)
    {
      int v2 = 129;
      goto LABEL_11;
    }
LABEL_8:
    int v2 = 137;
    __n128 result = 172;
    goto LABEL_11;
  }
  if (result == -65555)
  {
    int v2 = 135;
    __n128 result = 179;
    goto LABEL_11;
  }
  if (result != -65548) {
    goto LABEL_8;
  }
  int v2 = 131;
  __n128 result = 180;
LABEL_11:
  *(_DWORD *)a2 = result;
  *(void *)(a2 + 8) = "src/platform/Darwin/MdnsError.cpp";
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_244D768E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = 0;
  sub_244CB7AA8();
  sub_244D6A250();
  sub_244D6A1E8(a2);
  if (*(_DWORD *)a2)
  {
    uint64_t v3 = sub_244CC8484(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__n128 buf = *(_OWORD *)a2;
      uint64_t v22 = a2[2];
      char v4 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)__n128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Entropy initialization failed: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
LABEL_25:
      *(_OWORD *)__n128 buf = *(_OWORD *)a2;
      uint64_t v22 = a2[2];
      sub_244CB7B34((const char **)buf, 1);
      return sub_244CC4DE0(0x1Fu, 1);
    }
  }
  else
  {
    uint64_t v6 = sub_244D6A430();
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 16))(buf);
    *(_OWORD *)a2 = *(_OWORD *)buf;
    a2[2] = v22;
    if (*(_DWORD *)a2)
    {
      size_t v7 = sub_244CC8484(0x1Fu, "DeviceLayer");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)__n128 buf = *(_OWORD *)a2;
        uint64_t v22 = a2[2];
        size_t v8 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)__n128 buf = 136315138;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "SystemLayer initialization failed: %s", buf, 0xCu);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v9 = sub_244D6A5F4();
      ((void (*)(uint8_t *__return_ptr))(*v9)[39])(buf);
      *(_OWORD *)a2 = *(_OWORD *)buf;
      a2[2] = v22;
      if (*(_DWORD *)a2)
      {
        int v10 = sub_244CC8484(0x1Fu, "DeviceLayer");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)__n128 buf = *(_OWORD *)a2;
          uint64_t v22 = a2[2];
          uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)__n128 buf = 136315138;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Configuration Manager initialization failed: %s", buf, 0xCu);
        }
        uint64_t result = sub_244CC4E58(1u);
        if (result) {
          goto LABEL_25;
        }
      }
      else
      {
        int64_t v12 = sub_244D6C5A4();
        uint64_t v13 = sub_244D6A430();
        sub_244D76F64((uint64_t)v12, v13, (uint64_t)buf);
        *(_OWORD *)a2 = *(_OWORD *)buf;
        a2[2] = v22;
        if (*(_DWORD *)a2)
        {
          uint64_t v14 = sub_244CC8484(0x1Fu, "DeviceLayer");
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)__n128 buf = *(_OWORD *)a2;
            uint64_t v22 = a2[2];
            uint64_t v15 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)__n128 buf = 136315138;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "UDP initialization failed: %s", buf, 0xCu);
          }
          uint64_t result = sub_244CC4E58(1u);
          if (result) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v16 = sub_244D6C634();
          uint64_t v17 = sub_244D6A430();
          sub_244D76F64((uint64_t)v16, v17, (uint64_t)buf);
          *(_OWORD *)a2 = *(_OWORD *)buf;
          a2[2] = v22;
          if (!*(_DWORD *)a2)
          {
            if (!byte_268EC34D8)
            {
              byte_268EC34D8 = 1;
              xmmword_268EC3488 = 0u;
              unk_268EC3498 = 0u;
              xmmword_268EC34A8 = 0u;
              unk_268EC34B8 = 0u;
              xmmword_268EC34C8 = 0u;
              uint64_t v20 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
              v20[7] = 0;
              v20[8] = 0;
              v20[9] = 0;
            }
            sub_244D6A618();
          }
          char v18 = sub_244CC8484(0x1Fu, "DeviceLayer");
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)__n128 buf = *(_OWORD *)a2;
            uint64_t v22 = a2[2];
            int v19 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)__n128 buf = 136315138;
            *(void *)&uint8_t buf[4] = v19;
            _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_ERROR, "TCP initialization failed: %s", buf, 0xCu);
          }
          uint64_t result = sub_244CC4E58(1u);
          if (result) {
            goto LABEL_25;
          }
        }
      }
    }
  }
  return result;
}

void *sub_244D76F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_244CBF2B4();
  if (*(unsigned char *)(a1 + 8))
  {
    int v7 = 64;
LABEL_7:
    int v8 = 3;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  if (!result)
  {
    int v7 = 65;
    goto LABEL_7;
  }
  *(void *)(a1 + 16) = a2;
  int v8 = 0;
  if (*(unsigned char *)(a1 + 8) == 1) {
    *(unsigned char *)(a1 + 8) = 2;
  }
  int v7 = 68;
LABEL_8:
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/inet/InetLayer.h";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244D77024()
{
  v0 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_DEFAULT, "Inet Layer shutdown", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  uint64_t v1 = sub_244D6C5A4();
  if (*((unsigned char *)v1 + 8) == 2) {
    *((unsigned char *)v1 + 8) = 0;
  }
  v1[2] = 0;
  int v2 = sub_244D6C634();
  if (*((unsigned char *)v2 + 8) == 2) {
    *((unsigned char *)v2 + 8) = 0;
  }
  v2[2] = 0;
  uint64_t v3 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int64_t v12 = 0;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "BLE Layer shutdown", v12, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x1Fu, 2);
  }
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    int64_t v5 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v5[7] = 0;
    v5[8] = 0;
    v5[9] = 0;
  }
  uint64_t v6 = (_DWORD *)nullsub_13(&xmmword_268EC3488, v4);
  sub_244CBB7BC(v6);
  sub_244D6A7E4(&xmmword_268EC3488);
  int v7 = sub_244CC8484(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "System Layer shutdown", v11, 2u);
  }
  uint64_t v8 = sub_244CC4E58(2u);
  if (v8) {
    uint64_t v8 = sub_244CC4DE0(0x1Fu, 2);
  }
  uint64_t v9 = sub_244D6A430(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
}

void *sub_244D77228@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  *(_OWORD *)a4 = xmmword_2651A90E0;
  *(void *)(a4 + 16) = 161;
  uint64_t v8 = (void *)*result;
  if (*result)
  {
    while (v8[1] != a2 || v8[2] != a3)
    {
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = sub_244CC4D84(0x18uLL);
    if (result)
    {
      *uint64_t result = *v6;
      result[1] = a2;
      result[2] = a3;
      *uint64_t v6 = result;
    }
    else
    {
      *(_DWORD *)a4 = 11;
      *(void *)(a4 + 8) = "src/include/platform/internal/GenericPlatformManagerImpl.ipp";
      *(_DWORD *)(a4 + 16) = 174;
    }
  }
  return result;
}

void *sub_244D772D8(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t result = *a1;
  if (result)
  {
    do
    {
      if (result[1] == a2 && result[2] == a3)
      {
        *uint64_t v3 = *result;
        j__free(result);
      }
      else
      {
        uint64_t v3 = result;
      }
      uint64_t result = (void *)*v3;
    }
    while (*v3);
  }
  return result;
}

void sub_244D77344()
{
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  uint64_t v0 = qword_26B0D4378;
  if (qword_26B0D4378)
  {
    unsigned int v3 = 0;
    uint64_t v1 = sub_244D6A5F4();
    ((void (*)(void *__return_ptr))(*v1)[4])(v2);
    if (!LODWORD(v2[0])) {
      (*(void (**)(uint64_t, void))(*(void *)v0 + 16))(v0, v3);
    }
  }
}

uint64_t sub_244D77410()
{
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  uint64_t result = qword_26B0D4378;
  if (qword_26B0D4378)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_26B0D4378 + 24);
    return v1();
  }
  return result;
}

void sub_244D7749C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __int16 v10 = 0;
  int v9 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v5 = a1 - 16;
  __int16 v8 = 2;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v6 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_244D77DAC;
  block[3] = &unk_2651A9118;
  block[4] = v5;
  dispatch_async(v6, block);
  *(_DWORD *)a4 = 0;
  a4[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *((_DWORD *)a4 + 4) = 142;
}

uint64_t sub_244D77580(uint64_t a1)
{
  return a1 - 16;
}

void sub_244D77588(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v4 = a2[1];
  long long v8 = *a2;
  long long v9 = v4;
  uint64_t v5 = a1 - 16;
  uint64_t v10 = *((void *)a2 + 4);
  uint64_t v6 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_244D77DAC;
  block[3] = &unk_2651A9118;
  block[4] = v5;
  dispatch_async(v6, block);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a3 + 16) = 142;
}

void sub_244D7765C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/include/platform/internal/GenericPlatformManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 275;
}

void sub_244D77678(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/include/platform/internal/GenericPlatformManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 282;
}

uint64_t sub_244D77694(uint64_t ***a1, unsigned __int16 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v4 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  int v5 = *a2;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      (*((void (**)(void))a2 + 1))(*((void *)a2 + 2));
    }
    else if (v5 == 3)
    {
      (*((void (**)(unsigned __int16 *))a2 + 1))(a2 + 8);
    }
    else
    {
      sub_244D77850((uint64_t)a1, (uint64_t)a2);
      if ((__int16)*a2 < 0)
      {
        uint64_t v6 = *a1;
        if (*a1)
        {
          do
          {
            int v7 = *v6;
            ((void (*)(unsigned __int16 *, uint64_t *))v6[1])(a2, v6[2]);
            uint64_t v6 = (uint64_t **)v7;
          }
          while (v7);
        }
      }
    }
  }
  uint64_t result = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  int v9 = result - v4;
  if ((result - v4) >= 0x65)
  {
    uint64_t v10 = sub_244CC8484(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *a2;
      *(_DWORD *)__n128 buf = 67109376;
      int v13 = v9;
      __int16 v14 = 1024;
      int v15 = v11;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Long dispatch time: %u ms, for event type %d", buf, 0xEu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x1Fu, 1);
    }
  }
  return result;
}

uint64_t sub_244D77850(uint64_t a1, uint64_t a2)
{
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    unsigned int v3 = (void *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    v3[7] = 0;
    v3[8] = 0;
    v3[9] = 0;
  }
  sub_244D6AF98();

  return nullsub_13(&unk_268EC3530, a2);
}

uint64_t ***sub_244D778C8(uint64_t ***result, uint64_t a2)
{
  int v2 = *result;
  if (*result)
  {
    do
    {
      int v4 = *v2;
      uint64_t result = (uint64_t ***)((uint64_t (*)(uint64_t, uint64_t *))v2[1])(a2, v2[2]);
      int v2 = (uint64_t **)v4;
    }
    while (v4);
  }
  return result;
}

void sub_244D77908(int a1)
{
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  if (byte_26B0D4388 != a1) {
    byte_26B0D4388 = a1;
  }
}

dispatch_object_t *sub_244D77970(dispatch_object_t *a1)
{
  *(unsigned char *)a1 = 0;
  a1[1] = 0;
  a1[4] = 0;
  int v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unsigned int v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, -15);
  int v4 = dispatch_queue_create("org.csa-iot.matter.workqueue", v3);
  a1[5] = v4;
  *((_DWORD *)a1 + 12) = 0;
  dispatch_queue_set_specific(v4, a1, a1, 0);
  dispatch_suspend(a1[5]);
  return a1;
}

uint64_t sub_244D779EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_244D6A430();
  (*(void (**)(uint64_t, void))(*(void *)v4 + 200))(v4, *(void *)(a1 + 40));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_244D768E0(a1 + 16, a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t result = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    *(void *)(a1 + 32) = result;
    *(_DWORD *)a2 = 0;
    a2[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
    *((_DWORD *)a2 + 4) = 87;
  }
  return result;
}

void sub_244D77AA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = 0;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 48), (unsigned int *)&v3, 1u);
  if (v3)
  {
    int v5 = 94;
    int v4 = 3;
  }
  else
  {
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
    int v4 = 0;
    int v5 = 96;
  }
  *(_DWORD *)a2 = v4;
  *(void *)(a2 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v5;
}

atomic_uint *sub_244D77B0C@<X0>(atomic_uint *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = 1;
  atomic_compare_exchange_strong(result + 12, (unsigned int *)&v3, 2u);
  if (v3 == 1)
  {
    int v4 = result;
    specific = (atomic_uint *)dispatch_get_specific(result);
    uint64_t v6 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263EF8868];
    if (specific == v4) {
      uint64_t v6 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263EF8838];
    }
    uint64_t v7 = *((void *)v4 + 5);
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 0x40000000;
    void v10[2] = sub_244D77C20;
    v10[3] = &unk_2651A90F8;
    v10[4] = v4;
    uint64_t result = (atomic_uint *)v6(v7, v10);
    int v8 = 0;
    int v9 = 118;
  }
  else
  {
    int v9 = 103;
    int v8 = 3;
  }
  *(_DWORD *)a2 = v8;
  *(void *)(a2 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

BOOL sub_244D77BF4(void *a1)
{
  return dispatch_get_specific(a1) == a1;
}

NSObject *sub_244D77C20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_suspend(*(dispatch_object_t *)(v1 + 40));
  atomic_store(0, (unsigned int *)(v1 + 48));
  uint64_t result = *(NSObject **)(v1 + 56);
  if (result)
  {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void sub_244D77C74(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  int v3 = 0;
  *(void *)(a1 + 56) = v2;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 48), (unsigned int *)&v3, 1u);
  if (!v3) {
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
}

void sub_244D77CD8(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = a2[1];
  long long v7 = *a2;
  long long v8 = v4;
  uint64_t v9 = *((void *)a2 + 4);
  int v5 = *(NSObject **)(a1 + 40);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_244D77DAC;
  block[3] = &unk_2651A9118;
  block[4] = a1;
  dispatch_async(v5, block);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a3 + 16) = 142;
}

uint64_t sub_244D77DAC(uint64_t a1)
{
  return sub_244D77694((uint64_t ***)(*(void *)(a1 + 32) + 16), (unsigned __int16 *)(a1 + 40));
}

BOOL sub_244D77DBC(unsigned int *a1)
{
  if (dispatch_get_specific(a1) == a1) {
    return 1;
  }
  unsigned int v2 = atomic_load(a1 + 12);
  return v2 == 0;
}

void sub_244D77E00(uint64_t a1@<X1>, int a2@<W2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = &xmmword_268EC3488;
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    uint64_t v6 = (long long *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
  }
  sub_244D6A894((uint64_t)v6, a1, a2, (uint64_t)a3);
  int v7 = *(_DWORD *)a3;
  if (*(_DWORD *)a3)
  {
    int v8 = 2;
    uint64_t v9 = "dwnpm_ble_scan";
    int v10 = v7;
    char v11 = 3;
    sub_244D7E78C((uint64_t)&v8);
  }
  else
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
    *((_DWORD *)a3 + 4) = 163;
  }
}

void sub_244D77ED0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int v2 = &xmmword_268EC3488;
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    unsigned int v2 = (long long *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    *((void *)v2 + 7) = 0;
    *((void *)v2 + 8) = 0;
    *((void *)v2 + 9) = 0;
  }
  sub_244D6A8E8((uint64_t)v2, (uint64_t)a1);
  int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v4 = 2;
    int v5 = "dwnpm_ble_scan";
    int v6 = v3;
    char v7 = 3;
    sub_244D7E78C((uint64_t)&v4);
  }
  else
  {
    *(_DWORD *)a1 = 0;
    a1[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
    *((_DWORD *)a1 + 4) = 173;
  }
}

std::chrono::steady_clock::time_point sub_244D77F88()
{
  return (std::chrono::steady_clock::time_point)((unint64_t)std::chrono::steady_clock::now().__d_.__rep_ / 0x3E8);
}

std::chrono::steady_clock::time_point sub_244D77FBC()
{
  return (std::chrono::steady_clock::time_point)((unint64_t)std::chrono::steady_clock::now().__d_.__rep_ / 0xF4240);
}

uint64_t sub_244D77FEC@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = gettimeofday(&v7, 0);
  if (result)
  {
    uint64_t v5 = *__error();
    return sub_244CC8788(v5, "src/platform/Darwin/SystemTimeSupport.cpp", 59, a2);
  }
  else
  {
    if (v7.tv_sec > 946684799)
    {
      if (v7.tv_usec < 0)
      {
        *(_DWORD *)a2 = 191;
        *(void *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
        int v6 = 67;
      }
      else
      {
        *a1 = v7.tv_usec + 1000000 * v7.tv_sec;
        *(_DWORD *)a2 = 0;
        *(void *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
        int v6 = 71;
      }
    }
    else
    {
      *(_DWORD *)a2 = 191;
      *(void *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
      int v6 = 63;
    }
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_244D780DC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 40))(a1, &v5);
  *a2 = v5 / 0x3E8;
  return result;
}

uint64_t sub_244D78158@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v9.time_t tv_sec = a1 / 0xF4240;
  v9.tv_usec = a1 % 0xF4240;
  if (!settimeofday(&v9, 0))
  {
    time_t tv_sec = v9.tv_sec;
    localtime_r(&tv_sec, &v7);
    unint64_t v5 = sub_244CC8484(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134219520;
      __darwin_time_t v11 = v9.tv_sec;
      __int16 v12 = 1024;
      int tm_year = v7.tm_year;
      __int16 v14 = 1024;
      int tm_mon = v7.tm_mon;
      __int16 v16 = 1024;
      int tm_mday = v7.tm_mday;
      __int16 v18 = 1024;
      int tm_hour = v7.tm_hour;
      __int16 v20 = 1024;
      int tm_min = v7.tm_min;
      __int16 v22 = 1024;
      int tm_sec = v7.tm_sec;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "Real time clock set to %ld (%04d/%02d/%02d %02d:%02d:%02d UTC)", buf, 0x30u);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x1Fu, 2);
    }
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
    int v4 = 100;
    goto LABEL_9;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 1)
  {
    *(_DWORD *)a2 = 165;
    *(void *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
    int v4 = 89;
LABEL_9:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  int v6 = __error();
  return sub_244CC8788(*v6, "src/platform/Darwin/SystemTimeSupport.cpp", 89, a2);
}

void sub_244D78338()
{
}

uint64_t sub_244D7834C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v3 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], a2, a3);
  unint64_t v5 = objc_msgSend_integerForKey_(v3, v4, @"SRPTimeoutInMSecsOverride");
  if (v5 >> 16)
  {
    int v9 = 0;
    int v8 = 0;
    unsigned int v7 = 0;
  }
  else
  {
    int v6 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 67109120;
      int v12 = v5;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Got a user default value for Dnssd SRP timeout - %d msecs", buf, 8u);
    }

    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    unsigned int v7 = v5 & 0xFF00;
    int v8 = v5;
    int v9 = 0x10000;
  }

  return v8 | v9 | v7;
}

void sub_244D7847C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D784A0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  sub_244D6A434("src/platform/Darwin/BleConnectionDelegateImpl.mm", 100);
  int v8 = *a4;
  int v9 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate NewConnection with discriminator", buf, 2u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  int v10 = qword_268EC3550;
  if (!qword_268EC3550)
  {
    __darwin_time_t v11 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v12 = dispatch_queue_create("org.csa-iot.matter.framework.ble.workqueue", v11);
    uint64_t v13 = (void *)qword_268EC3550;
    qword_268EC3550 = (uint64_t)v12;

    int v10 = qword_268EC3550;
  }
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  void v14[2] = sub_244D78600;
  v14[3] = &unk_2651A9258;
  v14[4] = a1;
  v14[5] = a2;
  v14[6] = a3;
  int v15 = v8;
  dispatch_async(v10, v14);
}

void sub_244D78600(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = a1[4];
  unint64_t v5 = (void *)qword_268EC3548;
  if (qword_268EC3548
    && (char isConnecting = objc_msgSend_isConnecting((void *)qword_268EC3548, a2, a3),
        unint64_t v5 = (void *)qword_268EC3548,
        (isConnecting & 1) == 0))
  {
    objc_msgSend_setBleLayer_((void *)qword_268EC3548, a2, a1[5]);
    objc_msgSend_setAppState_((void *)qword_268EC3548, v20, a1[6]);
    objc_msgSend_setOnConnectionComplete_((void *)qword_268EC3548, v21, *(void *)(v4 + 8));
    objc_msgSend_setOnConnectionError_((void *)qword_268EC3548, v22, *(void *)(v4 + 16));
    uint64_t v23 = qword_268EC3548;
    MEMORY[0x270F9A6D0](v23, sel_updateWithDiscriminator_, a1 + 7);
  }
  else
  {
    objc_msgSend_stop(v5, a2, a3);
    unsigned int v7 = [BleConnection alloc];
    uint64_t v9 = objc_msgSend_initWithDiscriminator_queue_(v7, v8, (uint64_t)(a1 + 7), qword_268EC3550);
    int v10 = (void *)qword_268EC3548;
    qword_268EC3548 = v9;

    objc_msgSend_setBleLayer_((void *)qword_268EC3548, v11, a1[5]);
    objc_msgSend_setAppState_((void *)qword_268EC3548, v12, a1[6]);
    objc_msgSend_setOnConnectionComplete_((void *)qword_268EC3548, v13, *(void *)(v4 + 8));
    objc_msgSend_setOnConnectionError_((void *)qword_268EC3548, v14, *(void *)(v4 + 16));
    uint64_t v17 = objc_msgSend_centralManager((void *)qword_268EC3548, v15, v16);
    id v24 = (id)objc_msgSend_initWithDelegate_queue_(v17, v18, qword_268EC3548, qword_268EC3550);
    objc_msgSend_setCentralManager_((void *)qword_268EC3548, v19, (uint64_t)v24);
  }
}

void sub_244D78740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244D78754(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/platform/Darwin/BleConnectionDelegateImpl.mm", 134);
  int v8 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 134217984;
    std::string::size_type v21 = a4;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate NewConnection with conn obj: %p", buf, 0xCu);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  if (!qword_268EC3550)
  {
    uint64_t v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v10 = dispatch_queue_create("org.csa-iot.matter.framework.ble.workqueue", v9);
    __darwin_time_t v11 = (void *)qword_268EC3550;
    qword_268EC3550 = (uint64_t)v10;
  }
  id v12 = a4;
  uint64_t v13 = qword_268EC3550;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244D78908;
  block[3] = &unk_2651A9280;
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  id v16 = v12;
  uint64_t v17 = a1;
  id v14 = v12;
  dispatch_async(v13, block);
}

void sub_244D78908(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = a1[5];
  if (qword_268EC3548 && !objc_msgSend_isConnecting((void *)qword_268EC3548, a2, a3))
  {
    objc_msgSend_setBleLayer_((void *)qword_268EC3548, v5, a1[7]);
    objc_msgSend_setAppState_((void *)qword_268EC3548, v7, a1[6]);
    objc_msgSend_setOnConnectionComplete_((void *)qword_268EC3548, v8, *(void *)(v4 + 8));
    objc_msgSend_setOnConnectionError_((void *)qword_268EC3548, v9, *(void *)(v4 + 16));
    uint64_t v10 = qword_268EC3548;
    uint64_t v11 = a1[4];
    MEMORY[0x270F9A6D0](v10, sel_updateWithPeripheral_, v11);
  }
  else if (*(void *)(v4 + 16))
  {
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = sub_244D78A40;
    void v12[3] = &unk_26519C3C8;
    uint64_t v6 = a1[6];
    v12[4] = v4;
    v12[5] = v6;
    dispatch_async((dispatch_queue_t)qword_26B0D4398, v12);
  }
}

uint64_t sub_244D78A40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  int v3 = *(uint64_t (**)(uint64_t, int *))(v2 + 16);
  int v5 = 3;
  uint64_t v6 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  int v7 = 150;
  return v3(v1, &v5);
}

void sub_244D78A88(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/platform/Darwin/BleConnectionDelegateImpl.mm", 166);
  int v5 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 == 1) {
      uint64_t v6 = "pre-warm";
    }
    else {
      uint64_t v6 = "default";
    }
    *(_DWORD *)__n128 buf = 136315138;
    id v14 = v6;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate StartScan (%s)", buf, 0xCu);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  int v7 = qword_268EC3550;
  if (!qword_268EC3550)
  {
    int v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v9 = dispatch_queue_create("org.csa-iot.matter.framework.ble.workqueue", v8);
    uint64_t v10 = (void *)qword_268EC3550;
    qword_268EC3550 = (uint64_t)v9;

    int v7 = qword_268EC3550;
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244D78C3C;
  block[3] = &unk_2651A92A0;
  BOOL v12 = a3 == 1;
  void block[4] = a2;
  dispatch_async(v7, block);
}

void sub_244D78C3C(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 40);
  int v5 = (void *)qword_268EC3548;
  if (v4) {
    BOOL v6 = qword_268EC3548 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (qword_268EC3548
      && (char isConnecting = objc_msgSend_isConnecting((void *)qword_268EC3548, a2, a3),
          int v5 = (void *)qword_268EC3548,
          (isConnecting & 1) == 0))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      MEMORY[0x270F9A6D0](v5, sel_updateWithDelegate_prewarm_, v19);
    }
    else
    {
      objc_msgSend_stop(v5, a2, a3);
      int v8 = [BleConnection alloc];
      uint64_t v10 = objc_msgSend_initWithDelegate_prewarm_queue_(v8, v9, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), qword_268EC3550);
      uint64_t v11 = (void *)qword_268EC3548;
      qword_268EC3548 = v10;

      id v14 = objc_msgSend_centralManager((void *)qword_268EC3548, v12, v13);
      id v20 = (id)objc_msgSend_initWithDelegate_queue_(v14, v15, qword_268EC3548, qword_268EC3550);
      objc_msgSend_setCentralManager_((void *)qword_268EC3548, v16, (uint64_t)v20);
    }
  }
  else
  {
    uint64_t v17 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_DEFAULT, "Not starting pre-warm scan, an operation is already in progress", buf, 2u);
    }

    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(2u, 2);
    }
    if (*(void *)(a1 + 32))
    {
      if (qword_26B0D43B0 != -1) {
        dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
      }
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = sub_244D78E4C;
      block[3] = &unk_2651997E0;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async((dispatch_queue_t)qword_26B0D4398, block);
    }
  }
}

void sub_244D78E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D78E4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

void sub_244D78E74()
{
  uint64_t v0 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate StopScan", v1, 2u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  sub_244D78F10((uint64_t)v1);
}

void sub_244D78F10(uint64_t a1@<X8>)
{
  sub_244D6A434("src/platform/Darwin/BleConnectionDelegateImpl.mm", 220);
  if (qword_268EC3550)
  {
    dispatch_async((dispatch_queue_t)qword_268EC3550, &unk_26F956BA0);
    uint64_t v2 = (void *)qword_268EC3550;
    qword_268EC3550 = 0;

    int v3 = 231;
  }
  else
  {
    int v3 = 222;
  }
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  *(_DWORD *)(a1 + 16) = v3;
}

void sub_244D78F88(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate CancelConnection", v3, 2u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  sub_244D78F10(a1);
}

void sub_244D79028(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_stop((void *)qword_268EC3548, a2, a3);
  int v3 = (void *)qword_268EC3548;
  qword_268EC3548 = 0;
}

void sub_244D79198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D79244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D792D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D793DC(uint64_t a1)
{
  uint64_t v2 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate timeout", buf, 2u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  objc_msgSend_stop(*(void **)(a1 + 32), v3, v4);
  int v5 = *(void **)(a1 + 32);
  int v8 = 1037;
  dispatch_queue_t v9 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  int v10 = 302;
  return objc_msgSend_dispatchConnectionError_(v5, v6, (uint64_t)&v8);
}

uint64_t sub_244D79578(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_onConnectionError(*(void **)(a1 + 32), a2, a3);
  if (result)
  {
    int v7 = (uint64_t (*)(uint64_t, long long *))objc_msgSend_onConnectionError(*(void **)(a1 + 32), v5, v6);
    uint64_t v10 = objc_msgSend_appState(*(void **)(a1 + 32), v8, v9);
    long long v11 = *(_OWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    return v7(v10, &v11);
  }
  return result;
}

uint64_t sub_244D79670(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_onConnectionComplete(*(void **)(a1 + 32), a2, a3);
  if (result)
  {
    long long v11 = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend_onConnectionComplete(*(void **)(a1 + 32), v5, v6);
    uint64_t v9 = objc_msgSend_appState(*(void **)(a1 + 32), v7, v8);
    uint64_t v10 = *(void *)(a1 + 40);
    return v11(v9, v10);
  }
  return result;
}

void sub_244D79A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7A124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244D7A2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7A650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_244D7A868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7AB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_244D7AB4C(void *a1)
{
  return sub_244CBC694(*(void *)(a1[4] + 112), a1[5], a1 + 6, a1 + 8);
}

uint64_t sub_244D7AB64(uint64_t a1)
{
  int v7 = 2;
  uint64_t v8 = "dwnpm_ble_write_chr_val_failed";
  int v9 = 1031;
  char v10 = 3;
  sub_244D7E78C((uint64_t)&v7);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 112);
  LODWORD(v5) = 1031;
  *((void *)&v5 + 1) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  int v6 = 509;
  return sub_244CBD200(v3, v2, &v5);
}

void sub_244D7AE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_244D7AE94(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 112);
  long long v5 = (void *)(a1 + 49);
  int v6 = (void *)(a1 + 65);
  if (v2) {
    return sub_244CBCC6C(v4, v3, v5, v6);
  }
  else {
    return sub_244CBD030(v4, v3, v5, v6);
  }
}

uint64_t sub_244D7AEB8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    int v12 = 2;
    uint64_t v13 = "dwnpm_ble_chr_nfy_state_failed";
    int v14 = 1031;
    char v15 = 3;
    sub_244D7E78C((uint64_t)&v12);
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 112);
    int v9 = 1030;
    char v10 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
    int v11 = 539;
    uint64_t v4 = &v9;
  }
  else
  {
    int v12 = 2;
    uint64_t v13 = "dwnpm_ble_chr_nfy_state_failed";
    int v14 = 1029;
    char v15 = 3;
    sub_244D7E78C((uint64_t)&v12);
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 112);
    int v6 = 1029;
    int v7 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
    int v8 = 543;
    uint64_t v4 = &v6;
  }
  return sub_244CBD200(v3, v2, (long long *)v4);
}

void sub_244D7B218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7B268(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  long long v5 = (const void *)objc_msgSend_bytes(v2, v3, v4);
  size_t v8 = objc_msgSend_length(*(void **)(a1 + 32), v6, v7);
  sub_244CC91B0(v5, v8, 0, 0x26u, (uint64_t *)&v19);
  if (v19)
  {
    if (!sub_244CBC368(*(void *)(*(void *)(a1 + 40) + 112), *(void *)(a1 + 48), (void *)(a1 + 56), (void *)(a1 + 72), (uint64_t *)&v19))
    {
      int v9 = sub_244CC8484(2u, "Ble");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Failed at handling incoming BLE data", buf, 2u);
      }

      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(2u, 1);
      }
      *(_DWORD *)__n128 buf = 2;
      id v16 = "dwnpm_ble_upd_chr_val_failed";
      int v17 = 3;
      char v18 = 3;
      sub_244D7E78C((uint64_t)buf);
    }
  }
  else
  {
    char v10 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Failed at allocating buffer for incoming BLE data", buf, 2u);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    *(_DWORD *)__n128 buf = 2;
    id v16 = "dwnpm_ble_upd_chr_val_failed";
    int v17 = 11;
    char v18 = 3;
    sub_244D7E78C((uint64_t)buf);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 112);
    LODWORD(v13) = 11;
    *((void *)&v13 + 1) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
    int v14 = 566;
    sub_244CBD200(v12, v11, &v13);
  }
  if (v19) {
    sub_244CC8A0C(v19);
  }
}

void sub_244D7B450(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(_WORD **)(v1 - 24);
  if (v3) {
    sub_244CC8A0C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_244D7B478(uint64_t a1)
{
  int v7 = 2;
  size_t v8 = "dwnpm_ble_upd_chr_val_failed";
  int v9 = 1032;
  char v10 = 3;
  sub_244D7E78C((uint64_t)&v7);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 112);
  LODWORD(v5) = 1032;
  *((void *)&v5 + 1) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  int v6 = 579;
  return sub_244CBD200(v3, v2, &v5);
}

void sub_244D7B614(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 48))
  {
    sub_244CBB7C4();
    uint64_t v1 = *(void *)(a1 + 32);
  }
  uint64_t v3 = *(NSObject **)(v1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244D7B6A8;
  block[3] = &unk_265193E58;
  void block[4] = v1;
  dispatch_async(v3, block);
}

void sub_244D7B6A8(uint64_t a1, const char *a2)
{
  objc_msgSend_setDelegate_(*(void **)(*(void *)(a1 + 32) + 40), a2, 0);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;

  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 48);
  *(void *)(v5 + 48) = 0;

  int v7 = (void *)qword_268EC3548;
  if (qword_268EC3548 == *(void *)(a1 + 32))
  {
    qword_268EC3548 = 0;
  }
}

void sub_244D7B870(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_244D7B9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D7BA38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

void sub_244D7BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D7BC80(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v6 = *objc_msgSend_bytes(v2, v3, v4);
  return (*(uint64_t (**)(void, void, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), &v6);
}

void sub_244D7BF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7C0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7C71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D7C7C8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v6 = *objc_msgSend_bytes(v2, v3, v4);
  return (*(uint64_t (**)(void, void, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), &v6);
}

uint64_t sub_244D7C830(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 20) + 1;
  *(_DWORD *)(v2 + 20) = v3;
  int v6 = 2;
  int v7 = "dwnpm_ble_peripheral_removed";
  int v8 = v3;
  char v9 = 1;
  sub_244D7E78C((uint64_t)&v6);
  return objc_msgSend_removePeripheralFromCache_(*(void **)(a1 + 32), v4, *(void *)(a1 + 40));
}

void sub_244D7CA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D7CA60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_244D7CB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7CEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7D0F8()
{
}

void sub_244D7D10C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
}

void sub_244D7D148(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_2651A9310;
  *(void *)(a4 + 16) = 44;
  if (a2 && a3)
  {
    long long v48 = objc_msgSend_GetShortestServiceUUID_(MTRUUIDHelper, a1, a2);
    int v6 = (void *)MEMORY[0x263EFEF88];
    int v8 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v7, a3, 16);
    uint64_t v50 = objc_msgSend_UUIDWithData_(v6, v9, (uint64_t)v8);

    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    __int16 v44 = a1;
    objc_msgSend_services(v44, v10, v11);
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v55, v60, 16);
    if (v13)
    {
      uint64_t v47 = *(void *)v56;
      do
      {
        uint64_t v49 = v13;
        for (uint64_t i = 0; i != v49; ++i)
        {
          if (*(void *)v56 != v47) {
            objc_enumerationMutation(obj);
          }
          int v17 = *(void **)(*((void *)&v55 + 1) + 8 * i);
          char v18 = objc_msgSend_UUID(v17, v14, v15);
          std::string::size_type v21 = objc_msgSend_data(v18, v19, v20);
          id v24 = objc_msgSend_data(v48, v22, v23);
          int isEqualToData = objc_msgSend_isEqualToData_(v21, v25, (uint64_t)v24);

          if (isEqualToData)
          {
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            __int16 v27 = objc_msgSend_characteristics(v17, v14, v15);
            uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v51, v59, 16);
            if (v31)
            {
              uint64_t v32 = *(void *)v52;
              while (2)
              {
                for (uint64_t j = 0; j != v31; ++j)
                {
                  if (*(void *)v52 != v32) {
                    objc_enumerationMutation(v27);
                  }
                  TXTRecordRef v34 = *(void **)(*((void *)&v51 + 1) + 8 * j);
                  uint64_t v35 = objc_msgSend_UUID(v34, v29, v30);
                  __int16 v38 = objc_msgSend_data(v35, v36, v37);
                  __int16 v41 = objc_msgSend_data(v50, v39, v40);
                  int v43 = objc_msgSend_isEqualToData_(v38, v42, (uint64_t)v41);

                  if (v43)
                  {
                    *(_DWORD *)a4 = 0;
                    *(void *)(a4 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
                    *(_DWORD *)(a4 + 16) = 58;
                    objc_msgSend_setNotifyValue_forCharacteristic_(v44, v29, 1, v34);
                    goto LABEL_19;
                  }
                }
                uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v29, (uint64_t)&v51, v59, 16);
                if (v31) {
                  continue;
                }
                break;
              }
            }
LABEL_19:
          }
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v55, v60, 16);
      }
      while (v13);
    }
  }
}

void sub_244D7D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244D7D4F0(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_2651A9328;
  *(void *)(a4 + 16) = 72;
  if (a2 && a3)
  {
    long long v48 = objc_msgSend_GetShortestServiceUUID_(MTRUUIDHelper, a1, a2);
    int v6 = (void *)MEMORY[0x263EFEF88];
    int v8 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v7, a3, 16);
    uint64_t v50 = objc_msgSend_UUIDWithData_(v6, v9, (uint64_t)v8);

    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    __int16 v44 = a1;
    objc_msgSend_services(v44, v10, v11);
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v55, v60, 16);
    if (v13)
    {
      uint64_t v47 = *(void *)v56;
      do
      {
        uint64_t v49 = v13;
        for (uint64_t i = 0; i != v49; ++i)
        {
          if (*(void *)v56 != v47) {
            objc_enumerationMutation(obj);
          }
          int v17 = *(void **)(*((void *)&v55 + 1) + 8 * i);
          char v18 = objc_msgSend_UUID(v17, v14, v15);
          std::string::size_type v21 = objc_msgSend_data(v18, v19, v20);
          id v24 = objc_msgSend_data(v48, v22, v23);
          int isEqualToData = objc_msgSend_isEqualToData_(v21, v25, (uint64_t)v24);

          if (isEqualToData)
          {
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            __int16 v27 = objc_msgSend_characteristics(v17, v14, v15);
            uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v51, v59, 16);
            if (v31)
            {
              uint64_t v32 = *(void *)v52;
              while (2)
              {
                for (uint64_t j = 0; j != v31; ++j)
                {
                  if (*(void *)v52 != v32) {
                    objc_enumerationMutation(v27);
                  }
                  TXTRecordRef v34 = *(void **)(*((void *)&v51 + 1) + 8 * j);
                  uint64_t v35 = objc_msgSend_UUID(v34, v29, v30);
                  __int16 v38 = objc_msgSend_data(v35, v36, v37);
                  __int16 v41 = objc_msgSend_data(v50, v39, v40);
                  int v43 = objc_msgSend_isEqualToData_(v38, v42, (uint64_t)v41);

                  if (v43)
                  {
                    *(_DWORD *)a4 = 0;
                    *(void *)(a4 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
                    *(_DWORD *)(a4 + 16) = 86;
                    objc_msgSend_setNotifyValue_forCharacteristic_(v44, v29, 0, v34);
                    goto LABEL_19;
                  }
                }
                uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v29, (uint64_t)&v51, v59, 16);
                if (v31) {
                  continue;
                }
                break;
              }
            }
LABEL_19:
          }
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v55, v60, 16);
      }
      while (v13);
    }
  }
}

void sub_244D7D7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244D7D898(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v7 = a1;
  uint64_t v4 = objc_msgSend_valueForKey_(v7, v3, @"manager");
  int v6 = v4;
  if (v4) {
    objc_msgSend_cancelPeripheralConnection_(v4, v5, (uint64_t)v7);
  }
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
  *(_DWORD *)(a2 + 16) = 106;
}

void sub_244D7D91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D7D93C(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v2 = a2;
  uint64_t v4 = objc_msgSend_valueForKey_(v2, v3, @"mtuLength");
  uint64_t v7 = objc_msgSend_unsignedShortValue(v4, v5, v6);

  int v8 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67109120;
    int v11 = v7;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "ATT MTU = %u", buf, 8u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }

  return v7;
}

void sub_244D7DA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244D7DA70(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
  *(_DWORD *)(a1 + 16) = 123;
}

void sub_244D7DA90(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  *(_OWORD *)a5 = xmmword_2651A9340;
  *(void *)(a5 + 16) = 129;
  if (a2 && a3 && *(void *)a4)
  {
    long long v52 = objc_msgSend_GetShortestServiceUUID_(MTRUUIDHelper, a1, a2);
    int v8 = (void *)MEMORY[0x263EFEF88];
    char v10 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v9, a3, 16);
    long long v54 = objc_msgSend_UUIDWithData_(v8, v11, (uint64_t)v10);

    uint64_t v47 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v12, *(void *)(*(void *)a4 + 8), *(void *)(*(void *)a4 + 24));
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v48 = a1;
    objc_msgSend_services(v48, v13, v14);
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v59, v64, 16);
    if (v16)
    {
      uint64_t v51 = *(void *)v60;
      do
      {
        uint64_t v53 = v16;
        for (uint64_t i = 0; i != v53; ++i)
        {
          if (*(void *)v60 != v51) {
            objc_enumerationMutation(obj);
          }
          uint64_t v20 = *(void **)(*((void *)&v59 + 1) + 8 * i);
          std::string::size_type v21 = objc_msgSend_UUID(v20, v17, v18, v47);
          id v24 = objc_msgSend_data(v21, v22, v23);
          __int16 v27 = objc_msgSend_data(v52, v25, v26);
          int isEqualToData = objc_msgSend_isEqualToData_(v24, v28, (uint64_t)v27);

          if (isEqualToData)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            uint64_t v30 = objc_msgSend_characteristics(v20, v17, v18);
            uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v55, v63, 16);
            if (v34)
            {
              uint64_t v35 = *(void *)v56;
              while (2)
              {
                for (uint64_t j = 0; j != v34; ++j)
                {
                  if (*(void *)v56 != v35) {
                    objc_enumerationMutation(v30);
                  }
                  uint64_t v37 = *(void **)(*((void *)&v55 + 1) + 8 * j);
                  __int16 v38 = objc_msgSend_UUID(v37, v32, v33);
                  __int16 v41 = objc_msgSend_data(v38, v39, v40);
                  __int16 v44 = objc_msgSend_data(v54, v42, v43);
                  int v46 = objc_msgSend_isEqualToData_(v41, v45, (uint64_t)v44);

                  if (v46)
                  {
                    *(_DWORD *)a5 = 0;
                    *(void *)(a5 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
                    *(_DWORD *)(a5 + 16) = 143;
                    objc_msgSend_writeValue_forCharacteristic_type_(v48, v32, (uint64_t)v47, v37, 0);
                    goto LABEL_20;
                  }
                }
                uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v32, (uint64_t)&v55, v63, 16);
                if (v34) {
                  continue;
                }
                break;
              }
            }
LABEL_20:
          }
        }
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v59, v64, 16);
      }
      while (v16);
    }
  }
}

void sub_244D7DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244D7DF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244D7DFA0()
{
  if (qword_268EC0ED0 != -1) {
    dispatch_once(&qword_268EC0ED0, &unk_26F956C98);
  }
  return qword_268EC0ED8;
}

os_log_t sub_244D7DFE4()
{
  os_log_t result = os_log_create("com.csa.matter.signposts", "com.csa.matter.sdk");
  qword_268EC0ED8 = (uint64_t)result;
  return result;
}

void *sub_244D7E014(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *os_log_t result = &unk_26F956CC8;
  result[3] = 0;
  return result;
}

uint64_t sub_244D7E03C(uint64_t a1, long long *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v4 = *((void *)a2 + 2);
    long long v3 = *a2;
    return (*(uint64_t (**)(uint64_t, long long *))(result + 16))(result, &v3);
  }
  return result;
}

uint64_t sub_244D7E080(uint64_t a1)
{
  return a1;
}

void sub_244D7E0AC(uint64_t a1)
{
  sub_24479DFF4((void *)(a1 + 8));

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244D7E0F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)a1 + 48))(a1, "MessageSent", "Messaging");
}

uint64_t sub_244D7E12C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)a1 + 48))(a1, "MessageReceived", "Messaging");
}

uint64_t sub_244D7E160(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)a1 + 48))(a1, "Lookup", "DNSSD");
}

uint64_t sub_244D7E194(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)a1 + 48))(a1, "Node Discovered", "DNSSD");
}

uint64_t sub_244D7E1C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)a1 + 48))(a1, "Discovery Failed", "DNSSD");
}

void *sub_244D7E1FC(void *a1)
{
  uint64_t result = (void *)sub_244D6A434("src/tracing/registry.cpp", 33);
  if (a1[1]) {
    BOOL v3 = a1[2] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    (*(void (**)(void *))(*a1 + 16))(a1);
    return sub_244D7E808(&off_268EBE0A0, a1 + 1);
  }
  return result;
}

void *sub_244D7E290(void *a1)
{
  sub_244D6A434("src/tracing/registry.cpp", 43);
  uint64_t result = a1 + 1;
  if (a1[1]) {
    BOOL v3 = a1[2] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    sub_244D7E854(result);
    uint64_t v4 = *(uint64_t (**)(void *))(*a1 + 24);
    return (void *)v4(a1);
  }
  return result;
}

uint64_t sub_244D7E318(uint64_t result, uint64_t a2)
{
  id v2 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v4 = result;
    do
    {
      if (v2) {
        uint64_t v5 = v2 - 1;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t))*v5 + 4))(v5, v4, a2);
      id v2 = (_UNKNOWN **)v2[1];
    }
    while (v2 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E39C(uint64_t result, uint64_t a2)
{
  id v2 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v4 = result;
    do
    {
      if (v2) {
        uint64_t v5 = v2 - 1;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t))*v5 + 5))(v5, v4, a2);
      id v2 = (_UNKNOWN **)v2[1];
    }
    while (v2 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E420(uint64_t result, uint64_t a2)
{
  id v2 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v4 = result;
    do
    {
      if (v2) {
        uint64_t v5 = v2 - 1;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t))*v5 + 6))(v5, v4, a2);
      id v2 = (_UNKNOWN **)v2[1];
    }
    while (v2 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E4A4(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 7))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E520(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 8))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E59C(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 9))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E618(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 10))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E694(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 11))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E710(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 12))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

uint64_t sub_244D7E78C(uint64_t result)
{
  uint64_t v1 = off_268EBE0A8;
  if (off_268EBE0A8 != &off_268EBE0A0)
  {
    uint64_t v2 = result;
    do
    {
      if (v1) {
        BOOL v3 = v1 - 1;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 13))(v3, v2);
      uint64_t v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_268EBE0A0);
  }
  return result;
}

void *sub_244D7E808(void *result, void *a2)
{
  if (!*result || !result[1]) {
    sub_244E26A68();
  }
  if (*a2 && a2[1]) {
    sub_244E26B20();
  }
  *a2 = *result;
  a2[1] = result;
  *(void *)(*result + 8) = a2;
  *uint64_t result = a2;
  return result;
}

void *sub_244D7E854(void *result)
{
  if (!*result || (uint64_t v1 = result[1]) == 0) {
    sub_244E26BD8();
  }
  *(void *)(*result + 8) = v1;
  *(void *)result[1] = *result;
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

char *sub_244D7E88C@<X0>(char *result@<X0>, size_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 < 0x22)
  {
    int v6 = 33;
    int v5 = 25;
  }
  else
  {
    uint64_t result = (char *)snprintf(result, a2, "%08X%08X-%08X%08X", HIDWORD(a3[1]), a3[1], HIDWORD(*a3), *a3);
    int v5 = 0;
    int v6 = 41;
  }
  *(_DWORD *)a4 = v5;
  *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

const char *sub_244D7E904@<X0>(const char *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[1] = *MEMORY[0x263EF8340];
  if (result)
  {
    if (!a2)
    {
      int v7 = 47;
      *(_DWORD *)a3 = 47;
LABEL_19:
      *(void *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
      goto LABEL_20;
    }
    uint64_t v5 = (uint64_t)result;
    uint64_t result = (const char *)strnlen(result, 0x21uLL);
    if ((unint64_t)result <= 0x20)
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
      int v7 = 58;
    }
    else if (*(unsigned char *)(v5 + 33) && *(unsigned char *)(v5 + 33) != 46)
    {
      *(_DWORD *)a3 = 92;
      *(void *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
      int v7 = 61;
    }
    else
    {
      if (*(unsigned char *)(v5 + 16) == 45)
      {
        uint64_t result = (const char *)sub_244CC5A68(v5, 0x10uLL, (uint64_t)v8, 8);
        if (result)
        {
          a2[1] = bswap64(v8[0]);
          uint64_t result = (const char *)sub_244CC5A68(v5 + 17, 0x10uLL, (uint64_t)v8, 8);
          if (result)
          {
            int v6 = 0;
            *a2 = bswap64(v8[0]);
            int v7 = 80;
LABEL_18:
            *(_DWORD *)a3 = v6;
            goto LABEL_19;
          }
          int v7 = 75;
        }
        else
        {
          int v7 = 69;
        }
        int v6 = 92;
        goto LABEL_18;
      }
      *(_DWORD *)a3 = 92;
      *(void *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
      int v7 = 64;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
    int v7 = 46;
  }
LABEL_20:
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244D7EA90@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a3[1];
  if (((2 * v5) | 1uLL) <= a2)
  {
    if (v5)
    {
      uint64_t v9 = result;
      unint64_t v10 = 0;
      int v11 = 0;
      do
      {
        uint64_t result = snprintf((char *)(v9 + v11), 3uLL, "%02X", *(unsigned __int8 *)(*a3 + v10));
        v11 += result;
        ++v10;
      }
      while (v10 < a3[1]);
    }
    int v7 = 0;
    int v6 = 92;
  }
  else
  {
    int v6 = 85;
    int v7 = 25;
  }
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

char *sub_244D7EB50@<X0>(char *__str@<X0>, size_t __size@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = __str;
  switch(*(unsigned char *)a3)
  {
    case 0:
      __str = 0;
      *int v7 = 0;
      goto LABEL_22;
    case 1:
      if (*(void *)(a3 + 8) >= 0x10uLL)
      {
        *(_DWORD *)a4 = 47;
        *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        int v8 = 104;
        goto LABEL_26;
      }
      __str = (char *)snprintf(__str, __size, "_S%u");
      goto LABEL_22;
    case 2:
      if (*(void *)(a3 + 8) >= 0x1000uLL)
      {
        *(_DWORD *)a4 = 47;
        *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        int v8 = 112;
        goto LABEL_26;
      }
      __str = (char *)snprintf(__str, __size, "_L%u");
      goto LABEL_22;
    case 3:
      if (*(void *)(a3 + 8) >= 0x10000uLL)
      {
        *(_DWORD *)a4 = 47;
        *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        int v8 = 119;
        goto LABEL_26;
      }
      __str = (char *)snprintf(__str, __size, "_V%u");
      goto LABEL_22;
    case 4:
      __str = (char *)snprintf(__str, __size, "_T%u");
      goto LABEL_22;
    case 5:
      __str = (char *)snprintf(__str, __size, "_CM");
      goto LABEL_22;
    case 6:
      __str = (char *)snprintf(__str, __size, "%s");
      goto LABEL_22;
    case 7:
      if (*(void *)(a3 + 8) < 2uLL)
      {
        __str = (char *)snprintf(__str, __size, "_D%u");
LABEL_22:
        if (__size - 1 >= (int)__str) {
          *(_DWORD *)a4 = 0;
        }
        else {
          *(_DWORD *)a4 = 11;
        }
        *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        int v8 = 149;
      }
      else
      {
        *(_DWORD *)a4 = 47;
        *(void *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        int v8 = 132;
      }
LABEL_26:
      *(_DWORD *)(a4 + 16) = v8;
      return __str;
    case 8:
      int v9 = snprintf(__str, __size, "_I");
      unint64_t v10 = &v7[v9];
      unint64_t v11 = __size - v9;
      unint64_t v12 = *(void *)(a3 + 8);
      return sub_244CC597C(v12, v10, v11, 3u, a4);
    default:
      __str = 0;
      goto LABEL_22;
  }
}

uint64_t sub_244D7ED8C@<X0>(uint64_t __str@<X0>, size_t __size@<X1>, long long *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6 = __size;
  int v7 = (const char *)__str;
  if (!*(unsigned char *)a3)
  {
    switch(a4)
    {
      case 1:
        unint64_t v11 = "_matter";
        break;
      case 3:
        unint64_t v11 = "_matterd";
        break;
      case 2:
        unint64_t v11 = "_matterc";
        break;
      default:
        *(_DWORD *)a5 = 45;
        *(void *)(a5 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        int v12 = 171;
        goto LABEL_22;
    }
LABEL_18:
    __str = snprintf((char *)__str, __size, v11, v13, v14);
    if (v6 - 1 >= (int)__str) {
      *(_DWORD *)a5 = 0;
    }
    else {
      *(_DWORD *)a5 = 11;
    }
    *(void *)(a5 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
    int v12 = 199;
    goto LABEL_22;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  __str = (uint64_t)sub_244D7EB50((char *)__str, __size, (uint64_t)&v15, a5);
  if (*(_DWORD *)a5) {
    return __str;
  }
  __str = strlen(v7);
  switch(a4)
  {
    case 1:
      uint64_t v9 = (uint64_t)&v7[__str];
      __int64_t size = v6 - __str;
      unint64_t v10 = "_matter";
      goto LABEL_17;
    case 3:
      uint64_t v9 = (uint64_t)&v7[__str];
      __int64_t size = v6 - __str;
      unint64_t v10 = "_matterd";
      goto LABEL_17;
    case 2:
      uint64_t v9 = (uint64_t)&v7[__str];
      __int64_t size = v6 - __str;
      unint64_t v10 = "_matterc";
LABEL_17:
      uint64_t v13 = "_sub";
      uint64_t v14 = v10;
      unint64_t v11 = ".%s.%s";
      __str = v9;
      goto LABEL_18;
  }
  *(_DWORD *)a5 = 45;
  *(void *)(a5 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  int v12 = 195;
LABEL_22:
  *(_DWORD *)(a5 + 16) = v12;
  return __str;
}

uint64_t sub_244D7EF24@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  size_t v6 = (unsigned char *)*a2;
  a2[1] = *a2;
  if (*((char *)a1 + 23) < 0) {
    unint64_t v7 = a1[1];
  }
  else {
    unint64_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  uint64_t v8 = 0;
  uint64_t result = 1040388;
  while (1)
  {
    if (!v7)
    {
      int v34 = 0;
      int v33 = 158;
      goto LABEL_43;
    }
    if (v7 <= 4) {
      break;
    }
    uint64_t v10 = 5;
    uint64_t v11 = 3;
LABEL_12:
    unsigned int v12 = 0;
    int v13 = *((char *)a1 + 23);
    uint64_t v14 = v10;
    do
    {
      *a3 = 0;
      a3[1] = 0;
      long long v15 = a1;
      a3[2] = 0;
      if (v13 < 0) {
        long long v15 = (uint64_t *)*a1;
      }
      int v16 = *((unsigned __int8 *)v15 + v8 + v14 - 1);
      if ((v16 - 91) < 0xFFFFFFD2)
      {
        int v33 = 83;
LABEL_42:
        int v34 = 143;
        goto LABEL_43;
      }
      uint64_t v17 = (v16 - 45);
      if ((0xFE004uLL >> v17))
      {
        int v33 = 88;
        goto LABEL_42;
      }
      int v18 = byte_244EC2867[v17];
      a3[1] = "src/setup_payload/Base38Decode.cpp";
      *((_DWORD *)a3 + 4) = 91;
      unsigned int v12 = v18 + 38 * v12;
      --v14;
    }
    while (v14);
    uint64_t v19 = 0;
    uint64_t v35 = v10 + v8;
    unint64_t v36 = v7 - v10;
    do
    {
      unsigned int v20 = v12;
      unint64_t v21 = a2[2];
      if ((unint64_t)v6 >= v21)
      {
        unint64_t v22 = *a2;
        uint64_t v23 = &v6[-*a2];
        unint64_t v24 = (unint64_t)(v23 + 1);
        if ((uint64_t)(v23 + 1) < 0) {
          abort();
        }
        unint64_t v25 = v21 - v22;
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v26 = v24;
        }
        if (v26) {
          __int16 v27 = (char *)operator new(v26);
        }
        else {
          __int16 v27 = 0;
        }
        unsigned __int8 v28 = &v23[(void)v27];
        uint64_t v29 = &v23[(void)v27];
        *uint64_t v29 = v20;
        uint64_t v30 = v29 + 1;
        if (v6 != (unsigned char *)v22)
        {
          uint64_t v31 = &v6[~v22];
          do
          {
            char v32 = *--v6;
            (v31--)[(void)v27] = v32;
          }
          while (v6 != (unsigned char *)v22);
          size_t v6 = (unsigned char *)*a2;
          unsigned __int8 v28 = v27;
        }
        *a2 = (unint64_t)v28;
        a2[1] = (unint64_t)v30;
        a2[2] = (unint64_t)&v27[v26];
        if (v6) {
          operator delete(v6);
        }
        size_t v6 = v30;
      }
      else
      {
        *v6++ = v20;
      }
      a2[1] = (unint64_t)v6;
      unsigned int v12 = v20 >> 8;
      ++v19;
    }
    while (v19 != v11);
    uint64_t v8 = v35;
    unint64_t v7 = v36;
    uint64_t result = 1040388;
    if (v20 >= 0x100)
    {
      int v33 = 155;
      int v34 = 47;
      goto LABEL_43;
    }
  }
  if (v7 == 4)
  {
    uint64_t v10 = 4;
    uint64_t v11 = 2;
    goto LABEL_12;
  }
  if (v7 == 2)
  {
    uint64_t v10 = 2;
    uint64_t v11 = 1;
    goto LABEL_12;
  }
  int v33 = 126;
  int v34 = 30;
LABEL_43:
  *(_DWORD *)a3 = v34;
  a3[1] = "src/setup_payload/Base38Decode.cpp";
  *((_DWORD *)a3 + 4) = v33;
  return result;
}

uint64_t sub_244D7F190@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_2651A9358;
  *(void *)(a4 + 16) = 46;
  if (a2)
  {
    unint64_t v4 = a2;
    a2 = 0;
    while (1)
    {
      int v5 = 0;
      unsigned int v6 = 0;
      uint64_t v7 = v4 >= 3 ? 3 : v4;
      uint64_t v8 = (unsigned __int8 *)result;
      uint64_t v9 = v7;
      do
      {
        int v10 = *v8++;
        v6 += v10 << v5;
        v5 += 8;
        --v9;
      }
      while (v9);
      uint64_t v11 = byte_244EC2895[v7 - 1];
      if (a2 + v11 >= a3[1]) {
        break;
      }
      v4 -= v7;
      result += v7;
      if (v11 <= 1) {
        char v12 = 1;
      }
      else {
        char v12 = byte_244EC2895[v7 - 1];
      }
      unsigned __int8 v13 = v12 + a2;
      do
      {
        *(unsigned char *)(*a3 + a2++) = a0123456789abcd_6[v6 % 0x26];
        v6 /= 0x26u;
      }
      while (v13 != a2);
      if (!v4) {
        goto LABEL_17;
      }
    }
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/setup_payload/Base38Encode.cpp";
    *(_DWORD *)(a4 + 16) = 70;
  }
LABEL_17:
  if (a2 >= a3[1])
  {
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/setup_payload/Base38Encode.cpp";
    *(_DWORD *)(a4 + 16) = 90;
  }
  else
  {
    *(unsigned char *)(*a3 + a2) = 0;
    return sub_244CEB124((uint64_t)a3, a2);
  }
  return result;
}

unint64_t sub_244D7F2C0(unint64_t a1)
{
  return 5 * (a1 / 3) + 2 * (a1 % 3) + 1;
}

uint64_t sub_244D7F2F0@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 20) && (sub_244D8235C(a1, 0) & 1) == 0)
  {
    uint64_t v9 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Failed encoding invalid payload", v43, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x20u, 1);
    }
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    int v8 = 113;
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1 + 6) || *(unsigned char *)(a1 + 21))
  {
    if ((unint64_t)a2[1] > 0xB)
    {
      int v41 = 0;
      goto LABEL_20;
    }
LABEL_8:
    unsigned int v6 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Failed encoding payload to buffer", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x20u, 1);
    }
    *(_DWORD *)a3 = 25;
    *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    int v8 = 123;
    goto LABEL_18;
  }
  if ((unint64_t)a2[1] < 0x16) {
    goto LABEL_8;
  }
  int v41 = 1;
LABEL_20:
  BOOL v10 = *(unsigned __int8 *)(a1 + 6) != 0;
  if (*(unsigned char *)(a1 + 12)) {
    unsigned int v11 = *(unsigned __int16 *)(a1 + 10);
  }
  else {
    unsigned int v11 = HIBYTE(*(unsigned __int16 *)(a1 + 10));
  }
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v13 = (v11 >> 2) & 3 | (4 * v10);
  *(void *)a3 = 0;
  uint64_t v14 = (char *)sub_244D7F6F8(a2, 0, 2uLL);
  int v16 = v15;
  uint64_t result = snprintf(v14, v15, "%0*u", v15 - 1, v13);
  *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
  *(_DWORD *)(a3 + 16) = 93;
  if ((int)result >= v16) {
    int v17 = 25;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)a3 = v17;
  if ((int)result < v16)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    int v18 = (char *)sub_244D7F6F8(a2, 1uLL, 6uLL);
    int v20 = v19;
    uint64_t result = snprintf(v18, v19, "%0*u", v19 - 1, v12 & 0x3FFF | ((v11 & 3) << 14));
    *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    *(_DWORD *)(a3 + 16) = 93;
    int v21 = (int)result >= v20 ? 25 : 0;
    *(_DWORD *)a3 = v21;
    if ((int)result < v20)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      unint64_t v22 = (char *)sub_244D7F6F8(a2, 6uLL, 5uLL);
      int v24 = v23;
      uint64_t result = snprintf(v22, v23, "%0*u", v23 - 1, (v12 >> 14) & 0x1FFF);
      *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
      *(_DWORD *)(a3 + 16) = 93;
      int v25 = (int)result >= v24 ? 25 : 0;
      *(_DWORD *)a3 = v25;
      if ((int)result < v24)
      {
        if (v41)
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          size_t v26 = (char *)sub_244D7F6F8(a2, 0xAuLL, 6uLL);
          int v28 = v27;
          uint64_t result = snprintf(v26, v27, "%0*u", v27 - 1, *(unsigned __int16 *)(a1 + 2));
          *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
          *(_DWORD *)(a3 + 16) = 93;
          if ((int)result >= v28) {
            int v29 = 25;
          }
          else {
            int v29 = 0;
          }
          *(_DWORD *)a3 = v29;
          if ((int)result >= v28) {
            return result;
          }
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          uint64_t v30 = (char *)sub_244D7F6F8(a2, 0xFuLL, 6uLL);
          int v32 = v31;
          uint64_t result = snprintf(v30, v31, "%0*u", v31 - 1, *(unsigned __int16 *)(a1 + 4));
          *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
          *(_DWORD *)(a3 + 16) = 93;
          int v33 = (int)result >= v32 ? 25 : 0;
          *(_DWORD *)a3 = v33;
          if ((int)result >= v32) {
            return result;
          }
          unint64_t v34 = 20;
        }
        else
        {
          unint64_t v34 = 10;
        }
        unsigned __int8 v35 = sub_244CC8268(*a2);
        int v36 = sub_244CC8368(v35);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = 0;
        uint64_t v37 = (char *)sub_244D7F6F8(a2, v34, 2uLL);
        int v39 = v38;
        uint64_t result = snprintf(v37, v38, "%0*u", v38 - 1, v36);
        *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
        *(_DWORD *)(a3 + 16) = 93;
        if ((int)result >= v39) {
          int v40 = 25;
        }
        else {
          int v40 = 0;
        }
        *(_DWORD *)a3 = v40;
        if ((int)result < v39)
        {
          uint64_t result = sub_244CEB124((uint64_t)a2, v34 | 1);
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
          int v8 = 157;
LABEL_18:
          *(_DWORD *)(a3 + 16) = v8;
        }
      }
    }
  }
  return result;
}

uint64_t sub_244D7F6F8(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4) {
    sub_244E25960();
  }
  if (v5 < a3) {
    sub_244E25A08();
  }
  sub_244D7F7F0(&v7, *a1 + a2, a3);
  return v7;
}

uint64_t sub_244D7F744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v8[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  v8[0] = 0;
  *(void *)((char *)v8 + 6) = 0;
  v6[0] = (const char *)&v7;
  v6[1] = (const char *)22;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244D7F2F0(a1, v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = MEMORY[0x245695E30](a2, &v7);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    *((_DWORD *)a3 + 4) = 169;
  }
  return result;
}

void *sub_244D7F7F0(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3) {
      sub_244E24D70();
    }
  }
  return result;
}

void sub_244D7F814(std::string *__str@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = __str;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (size < 2) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size <= 1)
    {
LABEL_3:
      uint64_t v7 = sub_244CC8484(0x20u, "SetupPayload");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v8 = v4->__r_.__value_.__l.__size_;
        }
        else {
          LODWORD(v8) = HIBYTE(v4->__r_.__value_.__r.__words[2]);
        }
        LODWORD(__stra.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__stra.__r_.__value_.__r.__words[0]) = v8;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Failed decoding base10. Input was empty. %u", (uint8_t *)&__stra, 8u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0x20u, 1);
      }
      *(_DWORD *)a3 = 30;
      *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
      *(_DWORD *)(a3 + 16) = 39;
      return;
    }
  }
  std::string::basic_string(&__stra, __str, 0, size - 1, (std::allocator<char> *)&v14);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v10 = v4;
    BOOL v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    std::string::size_type v9 = v10->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type v9 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  }
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_stra = &__stra;
  }
  else {
    p_stra = (std::string *)__stra.__r_.__value_.__r.__words[0];
  }
  if (sub_244CC8390(v4->__r_.__value_.__s.__data_[v9 - 1], (char *)p_stra))
  {
    std::string::operator=(a2, &__stra);
    int v12 = 0;
    int v13 = 49;
  }
  else
  {
    int v13 = 46;
    int v12 = 19;
  }
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  *(_DWORD *)(a3 + 16) = v13;
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_244D7F9EC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2) {
    uint64_t v4 = 20;
  }
  else {
    uint64_t v4 = 10;
  }
  uint64_t v5 = *(unsigned __int8 *)(result + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(result + 8);
  }
  if (v5 == v4)
  {
    int v6 = 0;
    int v7 = 61;
  }
  else
  {
    uint64_t v8 = result;
    std::string::size_type v9 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v10) = *(unsigned __int8 *)(v8 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v8 + 8);
      }
      *(_DWORD *)__n128 buf = 67109376;
      int v12 = v10;
      __int16 v13 = 1024;
      int v14 = v4;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Failed decoding base10. Input length %u was not expected length %u", buf, 0xEu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x20u, 1);
    }
    int v7 = 59;
    int v6 = 30;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244D7FB4C@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = *(char *)(result + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    int v6 = (char *)result;
  }
  else {
    int v6 = *(char **)result;
  }
  if (v5) {
    uint64_t v7 = *(void *)(result + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(result + 23);
  }
  if (v7)
  {
    int v8 = 0;
    while (1)
    {
      unsigned int v9 = *v6;
      if ((v9 & 0x80000000) != 0 || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v9 + 60) & 0x400) == 0) {
        break;
      }
      int v8 = v9 + 10 * v8 - 48;
      ++v6;
      if (!--v7) {
        goto LABEL_19;
      }
    }
    uint64_t v10 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 67109120;
      unsigned int v14 = v9;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Failed decoding base10. Character was invalid %c", buf, 8u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x20u, 1);
    }
    int v11 = 72;
    int v12 = 143;
  }
  else
  {
    int v8 = 0;
LABEL_19:
    int v12 = 0;
    *a2 = v8;
    int v11 = 78;
  }
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_244D7FCA8(std::string *__str@<X0>, std::string::size_type __n@<X3>, std::string::size_type *a3@<X1>, int *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if (size >= __n && *a3 + __n <= size)
  {
    std::string::basic_string(&buf, __str, *a3, __n, (std::allocator<char> *)&v13);
    *a3 += __n;
    sub_244D7FB4C((uint64_t)&buf, a4, a5);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v11 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v12) = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) != 0) {
        std::string::size_type v12 = __str->__r_.__value_.__l.__size_;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Failed decoding base10. Input was too short. %u", (uint8_t *)&buf, 8u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x20u, 1);
    }
    *(_DWORD *)a5 = 30;
    *(void *)(a5 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
    *(_DWORD *)(a5 + 16) = 89;
  }
}

void sub_244D7FE48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  char v22 = 0;
  __int16 v25 = 0;
  char v26 = 0;
  int v27 = 0;
  int v23 = 0;
  __int16 v24 = 0;
  int v28 = v29;
  v29[0] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v29[1] = 0;
  uint64_t v30 = v31;
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a1 + 23) < 0) {
    sub_2446DA130(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_244D7F814(&__p, &__str, (uint64_t)buf);
  int v5 = *(_DWORD *)buf;
  long long v32 = v19;
  int v33 = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5)
  {
    *(_DWORD *)a3 = v5;
LABEL_12:
    *(_OWORD *)(a3 + 4) = v32;
    *(_DWORD *)(a3 + 20) = v33;
    goto LABEL_13;
  }
  uint64_t v15 = 0;
  std::string::size_type v16 = 0;
  int v14 = 0;
  sub_244D7FCA8(&__str, 1uLL, &v16, (int *)&v15 + 1, (uint64_t)buf);
  int v6 = *(_DWORD *)buf;
  long long v32 = v19;
  int v33 = v20;
  if (*(_DWORD *)buf) {
    goto LABEL_11;
  }
  sub_244D7FCA8(&__str, 5uLL, &v16, (int *)&v15, (uint64_t)buf);
  int v6 = *(_DWORD *)buf;
  long long v32 = v19;
  int v33 = v20;
  if (*(_DWORD *)buf
    || (sub_244D7FCA8(&__str, 4uLL, &v16, &v14, (uint64_t)buf), int v6 = *(_DWORD *)buf, v32 = v19, v33 = v20, *(_DWORD *)buf))
  {
LABEL_11:
    *(_DWORD *)a3 = v6;
    goto LABEL_12;
  }
  char v7 = BYTE4(v15);
  if ((HIDWORD(v15) & 0xFFFFFFFE) != 8)
  {
    sub_244D7F9EC((uint64_t)&__str, (HIDWORD(v15) >> 2) & 1, (uint64_t)buf);
    int v6 = *(_DWORD *)buf;
    long long v32 = v19;
    int v33 = v20;
    if (*(_DWORD *)buf) {
      goto LABEL_11;
    }
    unsigned __int16 v9 = v15;
    int v10 = v15 & 0x3FFF | ((v14 & 0x1FFF) << 14);
    if (!v10)
    {
      int v11 = sub_244CC8484(0x20u, "SetupPayload");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Failed decoding base10. SetUpPINCode was 0.", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0x20u, 1);
      }
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
      int v8 = 159;
      goto LABEL_18;
    }
    if ((v7 & 4) != 0)
    {
      unsigned int v13 = 0;
      sub_244D7FCA8(&__str, 5uLL, &v16, (int *)&v13, (uint64_t)buf);
      int v6 = *(_DWORD *)buf;
      long long v32 = v19;
      int v33 = v20;
      if (*(_DWORD *)buf) {
        goto LABEL_11;
      }
      unsigned int v12 = 0;
      sub_244D7FCA8(&__str, 5uLL, &v16, (int *)&v12, (uint64_t)buf);
      int v6 = *(_DWORD *)buf;
      long long v32 = v19;
      int v33 = v20;
      if (*(_DWORD *)buf) {
        goto LABEL_11;
      }
      if (v13 >= 0x10000)
      {
        *(_DWORD *)a3 = 143;
        *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
        int v8 = 183;
        goto LABEL_18;
      }
      *(_WORD *)(a2 + 2) = v13;
      if (v12 >= 0x10000)
      {
        *(_DWORD *)a3 = 143;
        *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
        int v8 = 188;
        goto LABEL_18;
      }
      *(_WORD *)(a2 + 4) = v12;
    }
    *(unsigned char *)(a2 + 6) = (v7 & 4) >> 1;
    *(_DWORD *)(a2 + 16) = v10;
    sub_244BDC244(a2 + 10, (4 * (v7 & 3)) | (v9 >> 14));
    *(_DWORD *)a3 = 0;
    goto LABEL_12;
  }
  *(_DWORD *)a3 = 47;
  *(void *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  int v8 = 133;
LABEL_18:
  *(_DWORD *)(a3 + 16) = v8;
LABEL_13:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2447E6298((uint64_t)&v30, v31[0]);
  sub_2447E6298((uint64_t)&v28, v29[0]);
}

void sub_244D80214(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9370;
  *(void *)(a3 + 16) = 79;
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3 == 2)
  {
    sub_244CB69F4();
  }
  else if (v3 == 1)
  {
    int v6 = *(char **)(a2 + 8);
    int v4 = (char *)(a2 + 8);
    int v5 = v6;
    if (v4[23] < 0) {
      int v4 = v5;
    }
    sub_244CB6C20(v4, a1, a3);
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    *(_DWORD *)(a3 + 16) = 91;
  }
}

void sub_244D8027C(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9388;
  *(void *)(a3 + 16) = 99;
  switch(*(_DWORD *)(a2 + 4))
  {
    case 1:
    case 2:
      sub_244D80214(a1, a2, a3);
      break;
    case 3:
      sub_244CB69FC();
      break;
    case 4:
    case 5:
      sub_244CB68CC();
      break;
    default:
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
      *(_DWORD *)(a3 + 16) = 119;
      break;
  }
}

void sub_244D80314(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int a3@<W3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  sub_244D825B8(a1, &v33);
  sub_244D82D20(a1, &v31);
  if (v33 == v34 && v31 == v32)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    int v21 = 130;
    goto LABEL_26;
  }
  sub_244CB62B8((uint64_t)v29);
  sub_244CB62E0((uint64_t)v29, a2, a3);
  sub_244CB62B8((uint64_t)v28);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_244CB72B4(v29, 256, 21, (uint64_t)v28, a5);
  if (*(_DWORD *)a5) {
    goto LABEL_27;
  }
  uint64_t v10 = v34;
  if (v33 == v34)
  {
LABEL_13:
    uint64_t v15 = v32;
    if (v31 != v32)
    {
      std::string::size_type v16 = (long long *)(v31 + 8);
      do
      {
        uint64_t v17 = (uint64_t)v16 - 8;
        uint64_t v22 = *((void *)v16 - 1);
        if (*((char *)v16 + 23) < 0)
        {
          sub_2446DA130(&__p, *(void **)v16, *((void *)v16 + 1));
        }
        else
        {
          long long v18 = *v16;
          uint64_t v24 = *((void *)v16 + 2);
          long long __p = v18;
        }
        int v25 = *((_DWORD *)v16 + 6);
        long long v19 = v16[2];
        uint64_t v27 = *((void *)v16 + 6);
        long long v26 = v19;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)a5 = 0;
        sub_244D8027C(v28, (uint64_t)&v22, a5);
        int v20 = *(_DWORD *)a5;
        if (SHIBYTE(v24) < 0) {
          operator delete((void *)__p);
        }
        if (v20) {
          goto LABEL_27;
        }
        v16 += 4;
      }
      while (v17 + 64 != v15);
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    sub_244CB746C((uint64_t)v29, (uint64_t)v28, a5);
    if (*(_DWORD *)a5) {
      goto LABEL_27;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    sub_244CB6414((uint64_t)v29, a5);
    if (*(_DWORD *)a5) {
      goto LABEL_27;
    }
    *a4 = v30;
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    int v21 = 155;
LABEL_26:
    *(_DWORD *)(a5 + 16) = v21;
    goto LABEL_27;
  }
  int v11 = (long long *)(v33 + 8);
  while (1)
  {
    uint64_t v12 = (uint64_t)v11 - 8;
    uint64_t v22 = *((void *)v11 - 1);
    if (*((char *)v11 + 23) < 0)
    {
      sub_2446DA130(&__p, *(void **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v13 = *v11;
      uint64_t v24 = *((void *)v11 + 2);
      long long __p = v13;
    }
    int v25 = *((_DWORD *)v11 + 6);
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    sub_244D80214(v28, (uint64_t)&v22, a5);
    int v14 = *(_DWORD *)a5;
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
    if (v14) {
      break;
    }
    int v11 = (long long *)((char *)v11 + 40);
    if (v12 + 40 == v10) {
      goto LABEL_13;
    }
  }
LABEL_27:
  v29[0] = (void **)&v31;
  sub_244D80D6C(v29);
  v29[0] = (void **)&v33;
  sub_244BDE050(v29);
}

void sub_244D805C4(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244D805D0(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v20 = 0;
  if (!a1[72] && (sub_244D82274(a1, 0) & 1) == 0)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    *(_DWORD *)(a5 + 16) = 275;
    return;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_244D80314((uint64_t)a1, (uint64_t)a3, a4, &v20, a5);
  if (!*(_DWORD *)a5)
  {
    uint64_t v10 = v20;
    size_t v11 = v20 + 11;
    if (v20 == -11)
    {
      long long v13 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
      uint64_t v12 = (char *)operator new(v20 + 11);
      long long v13 = &v12[v11];
      bzero(v12, v11);
    }
    sub_24479476C(v19, (uint64_t)v12, v13 - v12);
    unint64_t v14 = sub_244D7F2C0(v13 - v12);
    size_t v15 = v14 + 3;
    if (v14 == -3)
    {
      std::string::size_type v16 = 0;
      uint64_t v17 = 0;
      goto LABEL_13;
    }
    if ((v15 & 0x8000000000000000) == 0)
    {
      std::string::size_type v16 = (char *)operator new(v14 + 3);
      uint64_t v17 = &v16[v15];
      bzero(v16, v15);
LABEL_13:
      sub_244D7F7F0(v18, (uint64_t)v16, v17 - v16);
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      sub_244D8090C(v19[0], a1, v18, (size_t)v19[1], a3, v10, (void *)a5);
      if (!*(_DWORD *)a5)
      {
        MEMORY[0x245695E30](a2, v18[0]);
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
        *(_DWORD *)(a5 + 16) = 286;
      }
      if (v16) {
        operator delete(v16);
      }
      if (v12) {
        operator delete(v12);
      }
      return;
    }
LABEL_20:
    abort();
  }
}

void sub_244D80788(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244D825B8((uint64_t)a1, &v18);
  uint64_t v6 = v18;
  if (v18 == v19)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      if (*(_DWORD *)(v6 + 4) == 1)
      {
        uint64_t v8 = *(unsigned __int8 *)(v6 + 31);
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(v6 + 16);
        }
        uint64_t v9 = v8 + 10;
      }
      else
      {
        uint64_t v9 = 10;
      }
      v7 += v9;
      v6 += 40;
    }
    while (v6 != v19);
  }
  sub_244D82D20((uint64_t)a1, (uint64_t *)v17);
  for (uint64_t i = v17[0]; i != v17[1]; i += 8)
  {
    if (*((_DWORD *)i + 1) == 1)
    {
      size_t v11 = (void *)*((unsigned __int8 *)i + 31);
      if ((char)v11 < 0) {
        size_t v11 = i[2];
      }
      uint64_t v12 = (uint64_t)v11 + 10;
    }
    else
    {
      uint64_t v12 = 10;
    }
    v7 += v12;
  }
  size_t v13 = v7 + 6;
  if (HIDWORD(v13))
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    int v16 = 262;
LABEL_24:
    *(_DWORD *)(a3 + 16) = v16;
    goto LABEL_25;
  }
  unint64_t v14 = (unsigned __int8 *)sub_244CC4D84(v13);
  if (!v14)
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    int v16 = 265;
    goto LABEL_24;
  }
  size_t v15 = v14;
  sub_244D805D0(a1, a2, v14, v13, a3);
  j__free(v15);
LABEL_25:
  uint64_t v20 = v17;
  sub_244D80D6C((void ***)&v20);
  v17[0] = (void **)&v18;
  sub_244BDE050(v17);
}

void sub_244D8090C(void *a1@<X2>, unsigned __int8 *a2@<X0>, uint64_t *a3@<X1>, size_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  bzero(a1, a4);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  uint64_t v23 = 0;
  unint64_t v14 = 8 * a6 + 88;
  if (v14 > 8 * a4)
  {
    *(_DWORD *)a7 = 25;
    int v15 = 163;
LABEL_3:
    a7[1] = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
LABEL_4:
    *((_DWORD *)a7 + 4) = v15;
    return;
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, *a2, 3, 0x58uLL, (uint64_t)a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, *((unsigned __int16 *)a2 + 1), 16, 0x58uLL, (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, *((unsigned __int16 *)a2 + 2), 16, 0x58uLL, (uint64_t)a7);
      if (!*(_DWORD *)a7)
      {
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
        sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, a2[6], 2, 0x58uLL, (uint64_t)a7);
        if (!*(_DWORD *)a7)
        {
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
          unint64_t v16 = a2[7] ? *sub_244D80D48(a2 + 7) : 0;
          sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, v16, 8, 0x58uLL, (uint64_t)a7);
          if (!*(_DWORD *)a7)
          {
            unint64_t v17 = 0;
            *a7 = 0;
            a7[1] = 0;
            a7[2] = 0;
            if (!a2[12]) {
              unint64_t v17 = sub_244BDC1A4(a2 + 10);
            }
            sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, v17, 12, 0x58uLL, (uint64_t)a7);
            if (!*(_DWORD *)a7)
            {
              *a7 = 0;
              a7[1] = 0;
              a7[2] = 0;
              sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, *((unsigned int *)a2 + 4), 27, 0x58uLL, (uint64_t)a7);
              if (!*(_DWORD *)a7)
              {
                *a7 = 0;
                a7[1] = 0;
                a7[2] = 0;
                if ((unint64_t)(v23 + 4) >= 0x59)
                {
                  *(_DWORD *)a7 = 47;
                  int v15 = 48;
                  goto LABEL_3;
                }
                v23 += 4;
                if (a6)
                {
                  while (1)
                  {
                    unsigned int v18 = *a5++;
                    a7[1] = 0;
                    a7[2] = 0;
                    *a7 = 0;
                    sub_244D80CB8((uint64_t)a1, (unint64_t *)&v23, v18, 8, v14, (uint64_t)a7);
                    if (*(_DWORD *)a7) {
                      break;
                    }
                    if (!--a6) {
                      goto LABEL_23;
                    }
                  }
                }
                else
                {
LABEL_23:
                  *(_OWORD *)a7 = xmmword_2651A93A0;
                  a7[2] = 198;
                  unint64_t v19 = a3[1];
                  if (v19 <= 3)
                  {
                    *(_DWORD *)a7 = 25;
                    a7[1] = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
                    int v15 = 203;
                    goto LABEL_4;
                  }
                  uint64_t v23 = sub_244D7F6F8(a3, 3uLL, v19 - 3);
                  uint64_t v24 = v20;
                  uint64_t v21 = *a3;
                  *(unsigned char *)(v21 + 2) = 58;
                  *(_WORD *)uint64_t v21 = 21581;
                  sub_2446C1098(v22, (uint64_t)a1, a4);
                  sub_244D7F190(v22[0], v22[1], &v23, (uint64_t)a7);
                  sub_244CEB124((uint64_t)a3, v24 + 3);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_244D80C08(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (sub_244D82274(a1, 0))
  {
    sub_244D8090C(v6, a1, a2, 0xBuLL, 0, 0, (void *)a3);
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    *(_DWORD *)(a3 + 16) = 292;
  }
}

uint64_t sub_244D80CB8@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *a2 + a4;
  if (v7 > a5)
  {
    int v8 = 48;
LABEL_10:
    int v10 = 47;
    goto LABEL_11;
  }
  if ((1 << a4) <= a3)
  {
    int v8 = 49;
    goto LABEL_10;
  }
  *a2 = v7;
  if (a3)
  {
    do
    {
      if (a3) {
        *(unsigned char *)(result + (v6 >> 3)) |= 1 << (v6 & 7);
      }
      ++v6;
      BOOL v9 = a3 > 1;
      a3 >>= 1;
    }
    while (v9);
  }
  int v10 = 0;
  int v8 = 63;
LABEL_11:
  *(_DWORD *)a6 = v10;
  *(void *)(a6 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
  *(_DWORD *)(a6 + 16) = v8;
  return result;
}

unsigned char *sub_244D80D48(unsigned char *a1)
{
  if (!*a1) {
    sub_244E26EA8();
  }
  return a1 + 1;
}

void sub_244D80D6C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_244D80DC0((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_244D80DC0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

void sub_244D80E10(std::string *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  while (1)
  {
    unsigned int v6 = sub_244CB3B68(a2);
    if (v6 <= 0xC && ((1 << v6) & 0x1011) != 0) {
      break;
    }
LABEL_27:
    sub_244CB4E58(a2, &v18);
    int v12 = HIDWORD(v18);
    int v14 = v20;
    int v13 = HIDWORD(v20);
    if (v18)
    {
      if (v18 == 33) {
        int v15 = 0;
      }
      else {
        int v15 = v18;
      }
      if (v18 == 33) {
        unint64_t v16 = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      }
      else {
        unint64_t v16 = (const char *)__p;
      }
      if (v18 == 33) {
        int v14 = 230;
      }
      *(_DWORD *)a3 = v15;
      *(_DWORD *)(a3 + 4) = v12;
      *(void *)(a3 + 8) = v16;
      *(_DWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 20) = v13;
      return;
    }
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >= 0x100)
  {
    *(_DWORD *)a3 = 36;
    *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v17 = 197;
    goto LABEL_38;
  }
  int v8 = (char)v7;
  int v9 = v6 == 12;
  if ((v6 & 0xFFFFFFFB) != 0)
  {
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    long long __p = 0;
    uint64_t v20 = 0;
    int v22 = 0;
    uint64_t v21 = 0;
    LOBYTE(v18) = v8;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_244D8112C(a2, (uint64_t)&v18, v9, a3);
    if (*(_DWORD *)a3) {
      goto LABEL_39;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244D824CC(a1, (char *)&v18, a3);
    goto LABEL_24;
  }
  int v9 = sub_244D82D00((uint64_t)a1, v7);
  if (v8 < 0) {
    goto LABEL_9;
  }
LABEL_6:
  long long __p = 0;
  uint64_t v20 = 0;
  int v22 = 0;
  uint64_t v21 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  LOBYTE(v18) = v8;
  *(_OWORD *)a3 = xmmword_2651A93B8;
  *(void *)(a3 + 16) = 158;
  if ((v9 - 1) <= 1)
  {
    sub_244D8112C(a2, (uint64_t)&v18, v9, a3);
    goto LABEL_22;
  }
  if (v9 != 5)
  {
    if (v9 == 4)
    {
      LODWORD(v28) = 0;
      uint64_t v27 = 0;
      long long v26 = 0uLL;
      sub_244CB3FB0(a2, &v28, (uint64_t)&v26);
      if (!v26)
      {
        HIDWORD(v18) = 4;
        uint64_t v24 = v28;
        LODWORD(v26) = 0;
        *((void *)&v26 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
        int v10 = 120;
        goto LABEL_20;
      }
      goto LABEL_21;
    }
    if (v9 == 3)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      long long v26 = 0uLL;
      sub_244CB3CF0(a2, &v28, (uint64_t)&v26);
      if (!v26)
      {
        HIDWORD(v18) = 3;
        uint64_t v23 = v28;
        LODWORD(v26) = 0;
        *((void *)&v26 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
        int v10 = 109;
LABEL_20:
        LODWORD(v27) = v10;
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v17 = 178;
LABEL_38:
    *(_DWORD *)(a3 + 16) = v17;
    return;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  long long v26 = 0uLL;
  sub_244CB3EFC(a2, &v28, (uint64_t)&v26);
  if (!v26)
  {
    HIDWORD(v18) = 5;
    uint64_t v25 = v28;
    LODWORD(v26) = 0;
    *((void *)&v26 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v10 = 131;
    goto LABEL_20;
  }
LABEL_21:
  *(_OWORD *)a3 = v26;
  *(void *)(a3 + 16) = v27;
LABEL_22:
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244D82858(a1, (char *)&v18, a3);
LABEL_24:
    int v11 = *(_DWORD *)a3;
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
    if (v11) {
      return;
    }
    goto LABEL_27;
  }
LABEL_39:
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_244D8112C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_2651A93D0;
  *(void *)(a4 + 16) = 137;
  if (a3 == 2)
  {
    LODWORD(v8) = 0;
    uint64_t v11 = 0;
    long long __dst = 0uLL;
    sub_244CB3E0C(a1, &v8, (uint64_t)&__dst);
    if (!__dst)
    {
      *(_DWORD *)(a2 + 4) = 2;
      *(_DWORD *)(a2 + 32) = v8;
      LODWORD(__dst) = 0;
      *((void *)&__dst + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      LODWORD(v11) = 98;
    }
    *(_OWORD *)a4 = __dst;
    uint64_t v7 = v11;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    long long v12 = 0uLL;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    sub_244CB5C04(a1, &v12, &v8);
    if (!v8)
    {
      *(_DWORD *)(a2 + 4) = 1;
      sub_244D821CC(&__dst, (void *)v12, *((size_t *)&v12 + 1));
      unsigned int v6 = (void **)(a2 + 8);
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)unsigned int v6 = __dst;
      *(void *)(a2 + 24) = v11;
      LODWORD(v8) = 0;
      *((void *)&v8 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      LODWORD(v9) = 87;
    }
    *(_OWORD *)a4 = v8;
    uint64_t v7 = v9;
LABEL_11:
    *(void *)(a4 + 16) = v7;
    return;
  }
  *(_DWORD *)a4 = 47;
  *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
  *(_DWORD *)(a4 + 16) = 149;
}

void sub_244D81280(std::string *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (HIDWORD(a3))
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v8 = 241;
    goto LABEL_9;
  }
  sub_244CB3988((uint64_t)v20);
  sub_244CB39B8((uint64_t)v20, a2, a3);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB4E58((uint64_t)v20, (void *)a4);
  if (*(_DWORD *)a4) {
    return;
  }
  if (sub_244CB3B68((uint64_t)v20) != 21)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v8 = 249;
    goto LABEL_9;
  }
  sub_244CB3988((uint64_t)v18);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (sub_244CB3B68((uint64_t)v20) != 21)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v8 = 69;
    goto LABEL_9;
  }
  if (v21 != 256)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v8 = 70;
    goto LABEL_9;
  }
  if (sub_244CB3BE0((uint64_t)v20))
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v8 = 71;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB5C00((uint64_t)v20, (uint64_t)v18, a4);
  if (!*(_DWORD *)a4)
  {
    if (v19 != 21)
    {
      *(_DWORD *)a4 = 47;
      *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      int v8 = 75;
      goto LABEL_9;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB4E58((uint64_t)v18, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      sub_244D80E10(a1, (uint64_t)v18, (uint64_t)v14);
      int v9 = v14[0];
      int v10 = v14[1];
      uint64_t v11 = v15;
      int v12 = v16;
      int v13 = v17;
      if (v14[0] == 33)
      {
        int v9 = 0;
        uint64_t v11 = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
        int v12 = 259;
      }
      *(_DWORD *)a4 = v9;
      *(_DWORD *)(a4 + 4) = v10;
      *(void *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 16) = v12;
      *(_DWORD *)(a4 + 20) = v13;
    }
  }
}

void sub_244D81478(std::string *a1@<X1>, const void **a2@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5 = 8 * ((unsigned char *)a2[1] - (unsigned char *)*a2) - *a3 + 7;
  if (v5 == 7 || 8 * ((unsigned char *)a2[1] - (unsigned char *)*a2) - *a3 >= 0xFFFFFFFFFFFFFFF9)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v6 = 270;
LABEL_16:
    *(_DWORD *)(a4 + 16) = v6;
    return;
  }
  unint64_t v10 = v5 >> 3;
  uint64_t v11 = sub_244CC4D84(v5 >> 3);
  if (!v11)
  {
    *(_DWORD *)a4 = 11;
    *(void *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v6 = 273;
    goto LABEL_16;
  }
  int v12 = v11;
  int v19 = a1;
  uint64_t v13 = 0;
  if (v10 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v10;
  }
  do
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    int v16 = *a2;
    int v15 = a2[1];
    size_t v17 = v15 - (unsigned char *)*a2;
    if (v15 == *a2)
    {
      sub_244D81620((uint64_t)&v21, a3, &v24, 8, (uint64_t)v20);
    }
    else
    {
      if (v15 - (unsigned char *)*a2 < 0) {
        abort();
      }
      uint64_t v18 = (char *)operator new(v15 - (unsigned char *)*a2);
      uint64_t v21 = v18;
      uint64_t v23 = &v18[v17];
      memmove(v18, v16, v17);
      int v22 = &v18[v17];
      sub_244D81620((uint64_t)&v21, a3, &v24, 8, (uint64_t)v20);
      int v22 = v18;
      operator delete(v18);
    }
    v12[v13++] = v24;
  }
  while (v14 != v13);
  sub_244D81280(v19, (uint64_t)v12, v10, a4);

  j__free(v12);
}

uint64_t sub_244D81620@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = a4;
  uint64_t v7 = (_DWORD *)result;
  uint64_t v24 = *MEMORY[0x263EF8340];
  *a3 = 0;
  unint64_t v9 = *a2;
  unint64_t v10 = *a2 + a4;
  if (v10 <= 8 * (*(void *)(result + 8) - *(void *)result))
  {
    if (a4)
    {
      uint64_t v16 = 0;
      for (uint64_t i = 0; i != a4; ++i)
      {
        if ((*(unsigned __int8 *)(*(void *)result + ((v9 + i) >> 3)) >> ((v9 + i) & 7)))
        {
          v16 |= (1 << i);
          *a3 = v16;
        }
      }
      unint64_t v10 = *a2 + a4;
    }
    int v15 = 0;
    *a2 = v10;
    int v14 = 63;
  }
  else
  {
    uint64_t v11 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = *a2;
      int v13 = v7[2] - *v7;
      *(_DWORD *)std::string buf = 67109632;
      int v19 = v12;
      __int16 v20 = 1024;
      int v21 = v5;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Error parsing QR code. startIndex %u numberOfBitsToLoad %u buf_len %u ", buf, 0x14u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x20u, 1);
    }
    int v14 = 50;
    int v15 = 47;
  }
  *(_DWORD *)a5 = v15;
  *(void *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
  *(_DWORD *)(a5 + 16) = v14;
  return result;
}

void sub_244D817D0(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  memset(&__str, 0, sizeof(__str));
  long long __p = 0;
  unsigned int v42 = 0;
  uint64_t v43 = 0;
  int v3 = (unint64_t *)sub_244CAC704((uint64_t)&v43, 1uLL);
  int v5 = (char *)&v3[v4];
  *int v3 = 0;
  int v6 = v3 + 1;
  int v8 = (char *)__p;
  uint64_t v7 = v42;
  if (v42 != __p)
  {
    do
    {
      unint64_t v9 = *((void *)v7 - 1);
      v7 -= 8;
      *--int v3 = v9;
    }
    while (v7 != v8);
    uint64_t v7 = (char *)__p;
  }
  long long __p = v3;
  unsigned int v42 = (char *)v6;
  uint64_t v43 = v5;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v10 = 0;
  unsigned int v42 = (char *)v6;
  while (1)
  {
    unint64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
      unint64_t size = a1->__r_.__value_.__l.__size_;
    }
    if (v10 >= size) {
      break;
    }
    unint64_t v12 = a1;
    if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
      unint64_t v12 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    }
    int v13 = v12->__r_.__value_.__s.__data_[v10++];
    if (v13 == 37)
    {
      if (v6 >= (unint64_t *)v43)
      {
        uint64_t v14 = ((char *)v6 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          abort();
        }
        unint64_t v15 = (v43 - (unsigned char *)__p) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v43 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          size_t v17 = (char *)sub_244CAC704((uint64_t)&v43, v16);
        }
        else {
          size_t v17 = 0;
        }
        uint64_t v18 = &v17[8 * v14];
        *(void *)uint64_t v18 = v10;
        int v6 = (unint64_t *)(v18 + 8);
        __int16 v20 = (char *)__p;
        int v19 = v42;
        if (v42 != __p)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          int v19 = (char *)__p;
        }
        long long __p = v18;
        unsigned int v42 = (char *)v6;
        uint64_t v43 = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *v6++ = v10;
      }
      unsigned int v42 = (char *)v6;
    }
  }
  __int16 v22 = __p;
  uint64_t v23 = (char *)v6 - (unsigned char *)__p;
  if (v6 != __p)
  {
    unint64_t v24 = 0;
    unint64_t v25 = v23 >> 3;
    do
    {
      std::string::size_type v26 = v22[v24];
      if (v24 == v25 - 1 || (uint64_t v27 = v22[v24 + 1]) == 0) {
        std::string::size_type v28 = -1;
      }
      else {
        std::string::size_type v28 = v27 + ~v26;
      }
      std::string::basic_string(&v40, a1, v26, v28, (std::allocator<char> *)&v45);
      int v29 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
      unsigned int v30 = (void *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v31 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v31 = v40.__r_.__value_.__l.__size_;
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v40;
      }
      else {
        uint64_t v32 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if (v31 >= 3)
      {
        uint64_t v33 = (std::string *)((char *)v32 + v31);
        int64_t v34 = v31;
        unsigned __int8 v35 = v32;
        do
        {
          int v36 = (std::string *)memchr(v35, 77, v34 - 2);
          if (!v36) {
            break;
          }
          if (LOWORD(v36->__r_.__value_.__l.__data_) == 21581 && v36->__r_.__value_.__s.__data_[2] == 58)
          {
            if (v36 == v33 || v36 != v32 || (unint64_t)v31 < 4) {
              break;
            }
            std::string::operator=(&__str, &v40);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            goto LABEL_57;
          }
          unsigned __int8 v35 = (std::string *)((char *)&v36->__r_.__value_.__l.__data_ + 1);
          int64_t v34 = (char *)v33 - (char *)v35;
        }
        while ((char *)v33 - (char *)v35 >= 3);
      }
      if (v29 < 0) {
        operator delete(v30);
      }
      ++v24;
      __int16 v22 = __p;
      unint64_t v25 = (v42 - (unsigned char *)__p) >> 3;
    }
    while (v24 < v25);
  }
LABEL_57:
  std::string::size_type v38 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v38 = __str.__r_.__value_.__l.__size_;
  }
  if (v38)
  {
    std::string::basic_string(a2, &__str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v40);
  }
  else
  {
    *a2 = __str;
    memset(&__str, 0, sizeof(__str));
  }
  if (__p)
  {
    unsigned int v42 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_244D81AF8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  v63 = 0;
  char v64 = 0;
  uint64_t v65 = 0;
  unint64_t v62 = 0;
  if (*(char *)(a1 + 23) < 0) {
    sub_2446DA130(&__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __dst = *(std::string *)a1;
  }
  sub_244D817D0(&__dst, &v60);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v60.__r_.__value_.__s + 23))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      std::string __p = v60;
      goto LABEL_11;
    }
LABEL_17:
    *(_DWORD *)a3 = 47;
    a3[1] = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v9 = 331;
LABEL_18:
    *((_DWORD *)a3 + 4) = v9;
    goto LABEL_56;
  }
  std::string::size_type size = v60.__r_.__value_.__l.__size_;
  if (!v60.__r_.__value_.__l.__size_) {
    goto LABEL_17;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2446DA130(&__p, v60.__r_.__value_.__l.__data_, size);
LABEL_11:
  sub_244D7EF24((uint64_t *)&__p, (unint64_t *)&v63, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  uint64_t v61 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v56 = 0;
  long long v57 = 0;
  long long v55 = 0;
  int v6 = v63;
  size_t v7 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v55, &v62, &v61, 3, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    int v8 = (char *)operator new(v64 - v63);
    long long v55 = v8;
    long long v57 = &v8[v7];
    memmove(v8, v6, v7);
    long long v56 = &v8[v7];
    sub_244D81620((uint64_t)&v55, &v62, &v61, 3, (uint64_t)a3);
    long long v56 = v8;
    operator delete(v8);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  *(unsigned char *)a2 = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v53 = 0;
  long long v54 = 0;
  long long v52 = 0;
  unint64_t v10 = v63;
  size_t v11 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v52, &v62, &v61, 16, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    unint64_t v12 = (char *)operator new(v64 - v63);
    long long v52 = v12;
    long long v54 = &v12[v11];
    memmove(v12, v10, v11);
    uint64_t v53 = &v12[v11];
    sub_244D81620((uint64_t)&v52, &v62, &v61, 16, (uint64_t)a3);
    uint64_t v53 = v12;
    operator delete(v12);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  *(_WORD *)(a2 + 2) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  int v13 = v63;
  size_t v14 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v49, &v62, &v61, 16, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    unint64_t v15 = (char *)operator new(v64 - v63);
    uint64_t v49 = v15;
    uint64_t v51 = &v15[v14];
    memmove(v15, v13, v14);
    uint64_t v50 = &v15[v14];
    sub_244D81620((uint64_t)&v49, &v62, &v61, 16, (uint64_t)a3);
    operator delete(v15);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  *(_WORD *)(a2 + 4) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v47 = 0;
  long long v48 = 0;
  int v46 = 0;
  unint64_t v16 = v63;
  size_t v17 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v46, &v62, &v61, 2, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    uint64_t v18 = (char *)operator new(v64 - v63);
    int v46 = v18;
    long long v48 = &v18[v17];
    memmove(v18, v16, v17);
    uint64_t v47 = &v18[v17];
    sub_244D81620((uint64_t)&v46, &v62, &v61, 2, (uint64_t)a3);
    operator delete(v18);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  *(unsigned char *)(a2 + 6) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __int16 v44 = 0;
  char v45 = 0;
  uint64_t v43 = 0;
  int v19 = v63;
  size_t v20 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v43, &v62, &v61, 8, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    uint64_t v21 = (char *)operator new(v64 - v63);
    uint64_t v43 = v21;
    char v45 = &v21[v20];
    memmove(v21, v19, v20);
    __int16 v44 = &v21[v20];
    sub_244D81620((uint64_t)&v43, &v62, &v61, 8, (uint64_t)a3);
    operator delete(v21);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  char v22 = v61;
  *(unsigned char *)(a2 + 7) = 1;
  *(unsigned char *)(a2 + 8) = v22;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int v41 = 0;
  unsigned int v42 = 0;
  std::string v40 = 0;
  uint64_t v23 = v63;
  size_t v24 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v40, &v62, &v61, 12, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    unint64_t v25 = (char *)operator new(v64 - v63);
    std::string v40 = v25;
    unsigned int v42 = &v25[v24];
    memmove(v25, v23, v24);
    int v41 = &v25[v24];
    sub_244D81620((uint64_t)&v40, &v62, &v61, 12, (uint64_t)a3);
    operator delete(v25);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  sub_244B93A14(a2 + 10, (unsigned __int16)v61);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::size_type v38 = 0;
  int v39 = 0;
  uint64_t v37 = 0;
  std::string::size_type v26 = v63;
  size_t v27 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v37, &v62, &v61, 27, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0) {
      goto LABEL_68;
    }
    std::string::size_type v28 = (char *)operator new(v64 - v63);
    uint64_t v37 = v28;
    int v39 = &v28[v27];
    memmove(v28, v26, v27);
    std::string::size_type v38 = &v28[v27];
    sub_244D81620((uint64_t)&v37, &v62, &v61, 27, (uint64_t)a3);
    operator delete(v28);
  }
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  *(_DWORD *)(a2 + 16) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unsigned __int8 v35 = 0;
  int v36 = 0;
  int64_t v34 = 0;
  int v29 = v63;
  size_t v30 = v64 - v63;
  if (v64 == v63)
  {
    sub_244D81620((uint64_t)&v34, &v62, &v61, 4, (uint64_t)a3);
    goto LABEL_55;
  }
  if (v64 - v63 < 0) {
LABEL_68:
  }
    abort();
  int64_t v31 = (char *)operator new(v64 - v63);
  int64_t v34 = v31;
  int v36 = &v31[v30];
  memmove(v31, v29, v30);
  unsigned __int8 v35 = &v31[v30];
  sub_244D81620((uint64_t)&v34, &v62, &v61, 4, (uint64_t)a3);
  operator delete(v31);
LABEL_55:
  if (*(_DWORD *)a3) {
    goto LABEL_56;
  }
  int v32 = v61;
  if (v61)
  {
    uint64_t v33 = sub_244CC8484(0x20u, "SetupPayload");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v67 = v32;
      _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_ERROR, "Payload padding bits are not all 0: 0x%x", buf, 8u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x20u, 1);
    }
    *(_DWORD *)a3 = 47;
    a3[1] = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    int v9 = 370;
    goto LABEL_18;
  }
  sub_244D81478((std::string *)a2, (const void **)&v63, &v62, (uint64_t)a3);
LABEL_56:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (v63)
  {
    char v64 = v63;
    operator delete(v63);
  }
}

void *sub_244D821CC(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    int v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t sub_244D82274(unsigned __int8 *a1, int a2)
{
  if (*a1 > 7u) {
    return 0;
  }
  if (a1[6] > 2u) {
    return 0;
  }
  if (a1[12]) {
    return 0;
  }
  uint64_t v4 = a1 + 7;
  if (!a1[7] || !a2 && *sub_244D80D48(v4) > 0xFu) {
    return 0;
  }

  return sub_244D822F8((uint64_t)a1);
}

uint64_t sub_244D822F8(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    return 0;
  }
  uint64_t result = sub_244D82360(*(_DWORD *)(a1 + 16));
  if (result)
  {
    if (*(_WORD *)(a1 + 2))
    {
      if (*(unsigned __int16 *)(a1 + 2) > 0xFFF4u) {
        return 0;
      }
      return *(_WORD *)(a1 + 4) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_244D82360(unsigned int a1)
{
  int32x4_t v1 = vdupq_n_s32(a1);
  unsigned __int8 v2 = vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_244EC28C0), (int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_244EC28D0))));
  BOOL v4 = a1 == 87654321 || a1 - 99999999 < 0xFA0A1F02;
  return (v2 & 1 | (a1 == 12345678) | v4) == 0;
}

BOOL sub_244D823D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
      && *((unsigned __int16 *)a1 + 2) == *((unsigned __int16 *)a2 + 2)
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && (!a1[7] || a1[8] == a2[8])
      && a1[12] == a2[12]
      && *((unsigned __int16 *)a1 + 5) == *((unsigned __int16 *)a2 + 5)
      && *((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4);
}

void sub_244D82470(std::string *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v4[0] = a2;
  int v5 = 1;
  int v8 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unsigned char *)(a3 + 23) = 0;
  *(unsigned char *)a3 = 0;
  sub_244D824CC(a1, v4, a4);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

std::string *sub_244D824CC@<X0>(std::string *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 < 0)
  {
    int v8 = a2;
    uint64_t v7 = sub_244D833C4((uint64_t **)&result[1], (unsigned __int8 *)a2, (uint64_t)&unk_244E79D97, &v8);
    v7[5] = *(uint64_t **)a2;
    uint64_t result = std::string::operator=((std::string *)v7 + 2, (const std::string *)(a2 + 8));
    int v5 = 0;
    *((_DWORD *)v7 + 18) = *((_DWORD *)a2 + 8);
    int v4 = 244;
  }
  else
  {
    int v4 = 241;
    int v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void sub_244D8256C(std::string *a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v4[0] = a2;
  int v5 = 2;
  int v9 = a3;
  sub_244D824CC(a1, v4, a4);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
}

uint64_t sub_244D825B8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned __int8 v2 = *(void **)(result + 24);
  int v3 = (void *)(result + 32);
  if (v2 != (void *)(result + 32))
  {
    do
    {
      uint64_t result = sub_244D8263C(a2, (uint64_t)(v2 + 5));
      int v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          unsigned __int8 v2 = v6;
        }
        while (!v7);
      }
      unsigned __int8 v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t sub_244D8263C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 2;
    if (v12) {
      int v13 = (char *)sub_244D71170((uint64_t)(a1 + 2), v12);
    }
    else {
      int v13 = 0;
    }
    size_t v14 = v13;
    unint64_t v15 = &v13[40 * v9];
    size_t v17 = &v13[40 * v12];
    sub_244D83224(v5, (uint64_t)v15, a2);
    unint64_t v16 = v15 + 40;
    sub_244D83284(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_244D711B8((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)sub_244D83224((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 40;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_244D82754@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v12 = a2;
  uint64_t v5 = result + 32;
  uint64_t v4 = *(void *)(result + 32);
  if (!v4) {
    goto LABEL_12;
  }
  result += 24;
  uint64_t v6 = v5;
  do
  {
    unsigned int v7 = *(unsigned __int8 *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = (uint64_t *)v4;
    }
    else {
      unint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v5 && *(unsigned __int8 *)(v6 + 32) <= a2)
  {
    uint64_t result = sub_244D83318(result, &v12);
    int v11 = 0;
    int v10 = 158;
  }
  else
  {
LABEL_12:
    int v10 = 155;
    int v11 = 16;
  }
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

void sub_244D827F4(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v3[0] = 0;
  int v4 = 1;
  int v7 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  sub_244D82858(a1, v3, a3);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

std::string *sub_244D82858@<X0>(std::string *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 < 0)
  {
    int v8 = 249;
    int v6 = 47;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v5 = sub_244D83494((uint64_t **)&result[2], (unsigned __int8 *)a2, (uint64_t)&unk_244E79D97, &v9);
    v5[5] = *(uint64_t **)a2;
    uint64_t result = std::string::operator=((std::string *)v5 + 2, (const std::string *)(a2 + 8));
    int v6 = 0;
    *((_DWORD *)v5 + 18) = *((_DWORD *)a2 + 8);
    long long v7 = *(_OWORD *)(a2 + 40);
    v5[12] = (uint64_t *)*((void *)a2 + 7);
    *((_OWORD *)v5 + 5) = v7;
    int v8 = 252;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_244D82908(std::string *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::string __p = 0;
  uint64_t v6 = 0;
  int v8 = 0;
  uint64_t v7 = 0;
  v3[0] = 0;
  int v4 = 4;
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  uint64_t v11 = 0;
  sub_244D82858(a1, v3, a3);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void sub_244D82960(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  int v11 = 0;
  unint64_t __val = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244D82A54(a1, 0, (uint64_t)v8, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_11;
  }
  if (v9 == 4)
  {
    std::to_string(&v7, __val);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    int v5 = 0;
    *(std::string *)a2 = v7;
  }
  else
  {
    if (v9 != 1)
    {
      int v6 = 196;
      int v5 = 47;
      goto LABEL_10;
    }
    std::string::operator=((std::string *)a2, &__p);
    int v5 = 0;
  }
  int v6 = 183;
LABEL_10:
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = 0;
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

std::string *sub_244D82A54@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string v7 = *(std::string **)(a1 + 56);
  uint64_t result = (std::string *)(a1 + 56);
  int v6 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  int v9 = result;
  do
  {
    unsigned int v10 = v6[1].__r_.__value_.__s.__data_[8];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      p_std::string::size_type size = (std::string **)v6;
    }
    else {
      p_std::string::size_type size = (std::string **)&v6->__r_.__value_.__l.__size_;
    }
    if (v11) {
      int v9 = v6;
    }
    int v6 = *p_size;
  }
  while (*p_size);
  if (v9 != result && v9[1].__r_.__value_.__s.__data_[8] <= a2)
  {
    *(void *)a3 = *((void *)&v9[1].__r_.__value_.__l + 2);
    uint64_t result = std::string::operator=((std::string *)(a3 + 8), v9 + 2);
    int v14 = 0;
    *(_DWORD *)(a3 + 32) = v9[3].__r_.__value_.__l.__data_;
    long long v15 = *(_OWORD *)&v9[3].__r_.__value_.__r.__words[1];
    *(void *)(a3 + 56) = v9[4].__r_.__value_.__l.__data_;
    *(_OWORD *)(a3 + 40) = v15;
    int v13 = 269;
  }
  else
  {
LABEL_12:
    int v13 = 267;
    int v14 = 16;
  }
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_244D82B10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = result + 56;
  int v3 = *(void **)(result + 56);
  if (!v3) {
    goto LABEL_6;
  }
  result += 48;
  do
  {
    int v5 = v3;
    int v3 = (void *)*v3;
  }
  while (v3);
  if (v5 == (void *)v4 || *((unsigned char *)v5 + 32))
  {
LABEL_6:
    int v6 = 205;
    int v7 = 16;
  }
  else
  {
    uint64_t result = sub_244D83318(result, byte_244EC28E0);
    int v7 = 0;
    int v6 = 208;
  }
  *(_DWORD *)a2 = v7;
  *(void *)(a2 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

char *sub_244D82B90@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = 0;
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = sub_244CECD5C(a1, 4uLL, (uint64_t)a2);
    if (*(_DWORD *)a2) {
      return result;
    }
    unsigned int v6 = *(_DWORD *)a1 % 0x5F5E0FEu + 1;
    *(_DWORD *)a1 = v6;
    uint64_t result = (char *)sub_244D82360(v6);
    if (result)
    {
      int v9 = 0;
      int v8 = 228;
      goto LABEL_8;
    }
    if (v4++ >= 9)
    {
      int v8 = 236;
      int v9 = 172;
LABEL_8:
      *(_DWORD *)a2 = v9;
      a2[1] = "src/setup_payload/SetupPayload.cpp";
      *((_DWORD *)a2 + 4) = v8;
      return result;
    }
  }
}

std::string *sub_244D82C54@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *(std::string **)(a1 + 32);
  uint64_t result = (std::string *)(a1 + 32);
  unsigned int v6 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  int v9 = result;
  do
  {
    unsigned int v10 = v6[1].__r_.__value_.__s.__data_[8];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      p_std::string::size_type size = (std::string **)v6;
    }
    else {
      p_std::string::size_type size = (std::string **)&v6->__r_.__value_.__l.__size_;
    }
    if (v11) {
      int v9 = v6;
    }
    unsigned int v6 = *p_size;
  }
  while (*p_size);
  if (v9 != result && v9[1].__r_.__value_.__s.__data_[8] <= a2)
  {
    *(void *)a3 = *((void *)&v9[1].__r_.__value_.__l + 2);
    uint64_t result = std::string::operator=((std::string *)(a3 + 8), v9 + 2);
    int v14 = 0;
    *(_DWORD *)(a3 + 32) = v9[3].__r_.__value_.__l.__data_;
    int v13 = 261;
  }
  else
  {
LABEL_12:
    int v13 = 258;
    int v14 = 16;
  }
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_244D82D00(uint64_t a1, int a2)
{
  if ((a2 & 0x80u) == 0) {
    return 4 * (a2 == 0);
  }
  else {
    return 2;
  }
}

void sub_244D82D20(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned __int8 v2 = *(void **)(a1 + 48);
  int v3 = (void *)(a1 + 56);
  if (v2 != (void *)(a1 + 56))
  {
    do
    {
      sub_244D82DA4(a2, (uint64_t)(v2 + 5));
      int v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          unsigned int v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unsigned int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          unsigned __int8 v2 = v6;
        }
        while (!v7);
      }
      unsigned __int8 v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_244D82DA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v8 = (uint64_t)(v6 - *a1) >> 6;
    if ((unint64_t)(v8 + 1) >> 58) {
      abort();
    }
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 5;
    if (v9 >> 5 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    size_t v17 = a1 + 2;
    if (v11) {
      uint64_t v12 = (char *)sub_244D8367C((uint64_t)(a1 + 2), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = v12;
    int v14 = &v12[64 * v8];
    unint64_t v16 = &v12[64 * v11];
    sub_244D83568(v5, (uint64_t)v14, a2);
    long long v15 = v14 + 64;
    sub_244D835D8(a1, &v13);
    unint64_t v7 = a1[1];
    sub_244D836B4((uint64_t)&v13);
  }
  else
  {
    sub_244D83568((uint64_t)(a1 + 2), v6, a2);
    unint64_t v7 = v6 + 64;
  }
  a1[1] = v7;
}

BOOL sub_244D82E9C(uint64_t a1, unsigned __int8 *a2)
{
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  if (!sub_244D823D0((unsigned __int8 *)a1, a2)) {
    goto LABEL_58;
  }
  sub_244D825B8((uint64_t)a2, (uint64_t *)__p);
  sub_244D83744((uint64_t *)&v40);
  long long v40 = *(_OWORD *)__p;
  uint64_t v41 = v29;
  __p[1] = 0;
  uint64_t v29 = 0;
  __p[0] = 0;
  unsigned __int8 v35 = __p;
  sub_244BDE050(&v35);
  unint64_t v4 = (unsigned __int8 *)*((void *)&v40 + 1);
  uint64_t v5 = (unsigned __int8 *)v40;
  if (*(void *)(a1 + 40) != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v40 + 1) - v40) >> 3)) {
    goto LABEL_58;
  }
  if ((void)v40 != *((void *)&v40 + 1))
  {
    while (1)
    {
      __p[1] = 0;
      uint64_t v29 = 0;
      int v31 = 0;
      uint64_t v30 = 0;
      unsigned __int8 v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      sub_244D82C54(a1, *v5, (uint64_t)__p, (uint64_t)&v35);
      if (v35) {
        break;
      }
      uint64_t v6 = HIBYTE(v30);
      int v7 = SHIBYTE(v30);
      if (*((_DWORD *)v5 + 1) != HIDWORD(__p[0])) {
        goto LABEL_56;
      }
      uint64_t v8 = v5[31];
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = v5[31];
      }
      else {
        uint64_t v9 = *((void *)v5 + 2);
      }
      if (v30 < 0) {
        uint64_t v6 = v29;
      }
      if (v9 != v6) {
        goto LABEL_56;
      }
      uint64_t v10 = __p[1];
      if (v30 >= 0) {
        unint64_t v11 = &__p[1];
      }
      else {
        unint64_t v11 = (void **)__p[1];
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*((const void **)v5 + 1), v11, *((void *)v5 + 2))) {
          goto LABEL_56;
        }
      }
      else if (v5[31])
      {
        uint64_t v12 = 0;
        while (v5[v12 + 8] == *((unsigned __int8 *)v11 + v12))
        {
          if (v8 == ++v12) {
            goto LABEL_22;
          }
        }
LABEL_56:
        if ((v7 & 0x80) != 0) {
          goto LABEL_57;
        }
        goto LABEL_58;
      }
LABEL_22:
      int v13 = *((_DWORD *)v5 + 8);
      int v14 = v31;
      if (v7 < 0) {
        operator delete(v10);
      }
      if (v13 != v14) {
        goto LABEL_58;
      }
      v5 += 40;
      if (v5 == v4) {
        goto LABEL_26;
      }
    }
    LOBYTE(v7) = HIBYTE(v30);
    goto LABEL_56;
  }
LABEL_26:
  sub_244D82D20((uint64_t)a2, (uint64_t *)__p);
  sub_244D83780((uint64_t *)&v38);
  long long v38 = *(_OWORD *)__p;
  uint64_t v39 = v29;
  __p[1] = 0;
  uint64_t v29 = 0;
  __p[0] = 0;
  unsigned __int8 v35 = __p;
  sub_244D80D6C(&v35);
  long long v15 = (unsigned __int8 *)*((void *)&v38 + 1);
  unint64_t v16 = (unsigned __int8 *)v38;
  if (*(void *)(a1 + 64) != (uint64_t)(*((void *)&v38 + 1) - v38) >> 6) {
    goto LABEL_58;
  }
  if ((void)v38 == *((void *)&v38 + 1))
  {
    BOOL v26 = 1;
    goto LABEL_59;
  }
  while (1)
  {
    __p[1] = 0;
    uint64_t v29 = 0;
    int v31 = 0;
    uint64_t v30 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    unsigned __int8 v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    sub_244D82A54(a1, *v16, (uint64_t)__p, (uint64_t)&v35);
    if (v35)
    {
      LOBYTE(v18) = HIBYTE(v30);
      goto LABEL_61;
    }
    uint64_t v17 = HIBYTE(v30);
    int v18 = SHIBYTE(v30);
    if (*((_DWORD *)v16 + 1) != HIDWORD(__p[0])) {
      goto LABEL_61;
    }
    uint64_t v19 = v16[31];
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = v16[31];
    }
    else {
      uint64_t v20 = *((void *)v16 + 2);
    }
    if (v30 < 0) {
      uint64_t v17 = v29;
    }
    if (v20 != v17) {
      goto LABEL_61;
    }
    uint64_t v21 = __p[1];
    char v22 = v30 >= 0 ? &__p[1] : (void **)__p[1];
    if ((v19 & 0x80) == 0) {
      break;
    }
    if (memcmp(*((const void **)v16 + 1), v22, *((void *)v16 + 2))) {
      goto LABEL_61;
    }
LABEL_46:
    if (*((_DWORD *)v16 + 8) != v31 || *((void *)v16 + 5) != v32 || *((void *)v16 + 6) != v33) {
      goto LABEL_61;
    }
    uint64_t v24 = *((void *)v16 + 7);
    uint64_t v25 = v34;
    BOOL v26 = v24 == v34;
    if (v18 < 0) {
      operator delete(v21);
    }
    if (v24 == v25)
    {
      v16 += 64;
      if (v16 != v15) {
        continue;
      }
    }
    goto LABEL_59;
  }
  if (!v16[31]) {
    goto LABEL_46;
  }
  uint64_t v23 = 0;
  while (v16[v23 + 8] == *((unsigned __int8 *)v22 + v23))
  {
    if (v19 == ++v23) {
      goto LABEL_46;
    }
  }
LABEL_61:
  if ((v18 & 0x80) != 0) {
LABEL_57:
  }
    operator delete(__p[1]);
LABEL_58:
  BOOL v26 = 0;
LABEL_59:
  __p[0] = &v38;
  sub_244D80D6C((void ***)__p);
  __p[0] = &v40;
  sub_244BDE050((void ***)__p);
  return v26;
}

unsigned char *sub_244D83224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    uint64_t result = sub_2446DA130(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t result = v6;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  return result;
}

uint64_t *sub_244D83284(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      long long v8 = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *uint64_t result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_244D83318(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int8 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int8 *)(v4 + 32)) {
    return 0;
  }
  sub_244D83380((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_244D83380(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_244CAFA00(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t **sub_244D833C4(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x50uLL);
    v11[32] = **a4;
    *((void *)v11 + 9) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_2446DA06C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_244D83494(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x68uLL);
    v11[32] = **a4;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_2446DA06C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

__n128 sub_244D83568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  unsigned int v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_2446DA130(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)unsigned int v5 = v6;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  __n128 result = *(__n128 *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t *sub_244D835D8(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      long long v8 = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v8;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      long long v9 = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v9;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *__n128 result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_244D8367C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_2447A0110();
  }
  return operator new(a2 << 6);
}

uint64_t sub_244D836B4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_244D836EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_244D83744(uint64_t *a1)
{
  if (*a1)
  {
    sub_244BDE0A4(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_244D83780(uint64_t *a1)
{
  if (*a1)
  {
    sub_244D80DC0(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double sub_244D837BC(uint64_t a1)
{
  *(unsigned char *)(a1 + 1) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_244D837D4(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 8);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), a1 + 24);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  sub_244CED784(a1 + 40, 16);
  sub_244CED784(a1 + 24, 16);
  sub_244CED784(a1 + 8, 16);
  return a1;
}

uint64_t sub_244D83884@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  if (*(unsigned char *)(result + 1))
  {
    *(_DWORD *)a7 = 3;
    *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    int v8 = 71;
LABEL_3:
    *(_DWORD *)(a7 + 16) = v8;
    return result;
  }
  char v9 = a6;
  uint64_t v11 = result;
  uint64_t v12 = "SessionKeysg/gcc";
  if (a5 == 1) {
    uint64_t v12 = "SessionResumptionKeysSessionKeysg/gcc";
  }
  uint64_t v13 = 11;
  if (a5 == 1) {
    uint64_t v13 = 21;
  }
  v16[0] = v12;
  v16[1] = v13;
  if (a6) {
    uint64_t v14 = result + 24;
  }
  else {
    uint64_t v14 = result + 8;
  }
  if (a6) {
    uint64_t v15 = result + 8;
  }
  else {
    uint64_t v15 = result + 24;
  }
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a3, a4, v16, v14, v15, result + 40);
  if (!*(_DWORD *)a7)
  {
    *(unsigned char *)(v11 + 1) = 1;
    *(unsigned char *)uint64_t v11 = v9;
    *(void *)(v11 + 56) = a2;
    *(_DWORD *)a7 = 0;
    *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    int v8 = 90;
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_244D8399C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  if (*(unsigned char *)(result + 1))
  {
    *(_DWORD *)a7 = 3;
    *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    int v8 = 96;
LABEL_3:
    *(_DWORD *)(a7 + 16) = v8;
    return result;
  }
  char v9 = a6;
  uint64_t v11 = result;
  uint64_t v12 = "SessionKeysg/gcc";
  if (a5 == 1) {
    uint64_t v12 = "SessionResumptionKeysSessionKeysg/gcc";
  }
  uint64_t v13 = 11;
  if (a5 == 1) {
    uint64_t v13 = 21;
  }
  v16[0] = v12;
  v16[1] = v13;
  if (a6) {
    uint64_t v14 = result + 24;
  }
  else {
    uint64_t v14 = result + 8;
  }
  if (a6) {
    uint64_t v15 = result + 8;
  }
  else {
    uint64_t v15 = result + 24;
  }
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a3, a4, v16, v14, v15, result + 40);
  if (!*(_DWORD *)a7)
  {
    *(unsigned char *)(v11 + 1) = 1;
    *(unsigned char *)uint64_t v11 = v9;
    *(void *)(v11 + 56) = a2;
    *(_DWORD *)a7 = 0;
    *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    int v8 = 115;
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_244D83AB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 1))
  {
    *(_DWORD *)a8 = 3;
    *(void *)(a8 + 8) = "src/transport/CryptoContext.cpp";
    *(_DWORD *)(a8 + 16) = 123;
  }
  else
  {
    uint64_t v13 = result;
    uint64_t v16 = 0;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    *(void *)a8 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a3 + 32))(a3, a4, v15);
    if (!*(_DWORD *)a8)
    {
      v14[0] = v15;
      v14[1] = v16;
      sub_244D83884(v13, a2, (uint64_t)v14, a5, a6, a7, a8);
    }
    return sub_244CED784(v15, 32);
  }
  return result;
}

void *sub_244D83BE0@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1;
  long long v11 = xmmword_244EC28F0;
  if (!a1) {
    *(void *)&long long v11 = 0;
  }
  sub_244CC5784(&v10, a2);
  sub_244CC57A8(&v10, a3, 4);
  double result = sub_244CC57A8(&v10, a4, 8);
  if ((unint64_t)v11 >= *((void *)&v11 + 1)) {
    int v9 = 0;
  }
  else {
    int v9 = 11;
  }
  *(_DWORD *)a5 = v9;
  *(void *)(a5 + 8) = "src/transport/CryptoContext.cpp";
  *(_DWORD *)(a5 + 16) = 165;
  return result;
}

void *sub_244D83C80@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1;
  long long v9 = xmmword_244EC28F0;
  if (!a1) {
    *(void *)&long long v9 = 0;
  }
  uint64_t v5 = (const void *)(a3 + 5);
  sub_244CC5818(&v8, a2, 2);
  double result = sub_244CC572C(&v8, v5, 0xBuLL);
  if ((unint64_t)v9 >= *((void *)&v9 + 1)) {
    int v7 = 0;
  }
  else {
    int v7 = 11;
  }
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = "src/transport/CryptoContext.cpp";
  *(_DWORD *)(a4 + 16) = 175;
  return result;
}

uint64_t sub_244D83D14@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, void *a4@<X8>)
{
  unsigned int v8 = *a3;
  uint64_t result = sub_244DB5E1C(a1);
  if (v8 >= result)
  {
    unsigned __int16 v12 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    uint64_t result = (uint64_t)sub_244DB652C(a1, a2, *a3, &v12, (uint64_t)a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*a3 >= v12)
    {
      int v11 = 0;
      *a3 = v12;
      int v10 = 191;
    }
    else
    {
      int v10 = 187;
      int v11 = 47;
    }
    *(_DWORD *)a4 = v11;
    a4[1] = "src/transport/CryptoContext.cpp";
  }
  else
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/transport/CryptoContext.cpp";
    int v10 = 180;
  }
  *((_DWORD *)a4 + 4) = v10;
  return result;
}

void sub_244D83DEC(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, void *a8@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  BOOL v9 = (*(unsigned __int16 *)(a6 + 44) | *(unsigned __int8 *)(a6 + 46)) == 0;
  BOOL v10 = (*(unsigned __int16 *)(a6 + 44) | *(unsigned __int8 *)(a6 + 46)) != 0;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        unsigned __int16 v26 = 128;
        *a8 = 0;
        a8[1] = 0;
        a8[2] = 0;
        sub_244D83D14((unsigned char *)a6, (uint64_t)v28, &v26, a8);
        if (*(_DWORD *)a8) {
          return;
        }
        uint64_t v17 = 16 * v10;
        if (*(void *)(a1 + 64))
        {
          sub_2446C1098(v25, (uint64_t)a2, a3);
          sub_24479476C(v24, (uint64_t)a4, a3);
          v23[0] = &v27;
          v23[1] = v17;
          a8[1] = 0;
          a8[2] = 0;
          *a8 = 0;
          uint64_t v18 = *(void *)(a1 + 64);
          v22[0] = v28;
          v22[1] = v26;
          v21[0] = a5;
          v21[1] = 13;
          (*(void (**)(uint64_t, void *, void *, void *, void *, void *))(*(void *)v18 + 24))(v18, v25, v22, v21, v23, v24);
        }
        else
        {
          if (!*(unsigned char *)(a1 + 1))
          {
            int v19 = 222;
            int v20 = 59;
LABEL_17:
            *(_DWORD *)a8 = v20;
            a8[1] = "src/transport/CryptoContext.cpp";
            goto LABEL_18;
          }
          *a8 = 0;
          a8[1] = 0;
          a8[2] = 0;
          sub_244CEBEAC(a2, a3, a1 + 8, a5, 0xDuLL, a4, (uint64_t)a8, (char *)&v27, v17);
        }
        if (*(_DWORD *)a8) {
          return;
        }
        int v20 = 0;
        if (!v9) {
          *a7 = v27;
        }
        int v19 = 229;
        goto LABEL_17;
      }
      *(_DWORD *)a8 = 47;
      a8[1] = "src/transport/CryptoContext.cpp";
      int v19 = 204;
    }
    else
    {
      *(_DWORD *)a8 = 47;
      a8[1] = "src/transport/CryptoContext.cpp";
      int v19 = 203;
    }
  }
  else
  {
    *(_DWORD *)a8 = 47;
    a8[1] = "src/transport/CryptoContext.cpp";
    int v19 = 202;
  }
LABEL_18:
  *((_DWORD *)a8 + 4) = v19;
}

void sub_244D84030(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  BOOL v9 = (*(unsigned __int16 *)(a6 + 44) | *(unsigned __int8 *)(a6 + 46)) != 0;
  unsigned __int16 v24 = 128;
  if (!a2)
  {
    int v17 = 240;
LABEL_10:
    int v18 = 47;
LABEL_11:
    *(_DWORD *)a8 = v18;
    *(void *)(a8 + 8) = "src/transport/CryptoContext.cpp";
    *(_DWORD *)(a8 + 16) = v17;
    return;
  }
  if (!a3)
  {
    int v17 = 241;
    goto LABEL_10;
  }
  if (!a4)
  {
    int v17 = 242;
    goto LABEL_10;
  }
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  sub_244D83D14((unsigned char *)a6, (uint64_t)v25, &v24, (void *)a8);
  if (*(_DWORD *)a8) {
    return;
  }
  uint64_t v16 = 16 * v9;
  if (*(void *)(a1 + 64))
  {
    sub_2446C1098(&v23, (uint64_t)a2, a3);
    sub_24479476C(&v22, (uint64_t)a4, a3);
    sub_2446C1098(&v21, a7, v16);
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 64) + 32))(&v19);
    *(_OWORD *)a8 = v19;
    *(void *)(a8 + 16) = v20;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1))
    {
      int v17 = 257;
      int v18 = 59;
      goto LABEL_11;
    }
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    sub_244CEC134(a2, a3, a7, v16, a1 + 24, a5, a8, 13, a4);
  }
  if (!*(_DWORD *)a8)
  {
    int v18 = 0;
    int v17 = 261;
    goto LABEL_11;
  }
}

uint64_t sub_244D84244@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t v10 = result;
        if (*(void *)(result + 64))
        {
          sub_2446C1098(v17, a2, a3);
          sub_24479476C(v16, a4, a3);
          sub_244D83C80((uint64_t)v18, *(unsigned __int16 *)(a5 + 44), a6, (uint64_t)v15);
          uint64_t v13 = *(void *)(v10 + 64);
          v15[0] = v18;
          v15[1] = 13;
          return (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v13 + 40))(v13, v17, v15, v16);
        }
        *(_DWORD *)a7 = 59;
        *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        int v14 = 272;
      }
      else
      {
        *(_DWORD *)a7 = 47;
        *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        int v14 = 269;
      }
    }
    else
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
      int v14 = 268;
    }
  }
  else
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    int v14 = 267;
  }
  *(_DWORD *)(a7 + 16) = v14;
  return result;
}

uint64_t sub_244D843B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t v10 = result;
        if (*(void *)(result + 64))
        {
          sub_2446C1098(v17, a2, a3);
          sub_24479476C(v16, a4, a3);
          sub_244D83C80((uint64_t)v18, *(unsigned __int16 *)(a5 + 44), a6, (uint64_t)v15);
          uint64_t v13 = *(void *)(v10 + 64);
          v15[0] = v18;
          v15[1] = 13;
          return (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v13 + 48))(v13, v17, v15, v16);
        }
        *(_DWORD *)a7 = 59;
        *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        int v14 = 290;
      }
      else
      {
        *(_DWORD *)a7 = 47;
        *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        int v14 = 287;
      }
    }
    else
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
      int v14 = 286;
    }
  }
  else
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    int v14 = 285;
  }
  *(_DWORD *)(a7 + 16) = v14;
  return result;
}

uint64_t sub_244D8452C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  int v6 = 36;
  LODWORD(v7) = 47;
  if (a2 && a3)
  {
    uint64_t v8 = result + 496;
    uint64_t v9 = 16;
    while (1)
    {
      if (!*(unsigned char *)(v8 - 496))
      {
        *(unsigned char *)(v8 - 496) = a2;
        LODWORD(v7) = 0;
        if (a4)
        {
          *(void *)(v8 - 8) = a3;
          *a5 = v8;
          uint64_t v10 = (unsigned char *)(v8 - 495);
        }
        else
        {
          *(void *)(v8 - 488) = a3;
          *a5 = v8 - 480;
          uint64_t v10 = (unsigned char *)(v8 - 494);
        }
        ++*v10;
        int v6 = 58;
        goto LABEL_21;
      }
      if (*(unsigned __int8 *)(v8 - 496) == a2) {
        break;
      }
      v8 += 552;
      if (!--v9)
      {
        int v6 = 111;
        LODWORD(v7) = 9;
        goto LABEL_21;
      }
    }
    uint64_t v11 = 0;
    if (a4)
    {
      while (1)
      {
        uint64_t v12 = v8 + v11;
        uint64_t v7 = *(void *)(v8 + v11 - 8);
        if (!v7)
        {
          *(void *)(v12 - 8) = a3;
          *a5 = v12;
          ++*(unsigned char *)(v8 - 495);
          int v6 = 74;
          goto LABEL_21;
        }
        if (v7 == a3) {
          break;
        }
        v11 += 32;
        int v6 = 106;
        LODWORD(v7) = 9;
        if (v11 == 64) {
          goto LABEL_21;
        }
      }
      LODWORD(v7) = 0;
      *a5 = v8 + v11;
      int v6 = 80;
    }
    else
    {
      while (1)
      {
        uint64_t v13 = (uint64_t *)(v8 + v11 - 488);
        uint64_t v7 = *v13;
        if (!*v13)
        {
          *uint64_t v13 = a3;
          *a5 = v8 + v11 - 480;
          ++*(unsigned char *)(v8 - 494);
          int v6 = 95;
          goto LABEL_21;
        }
        if (v7 == a3) {
          break;
        }
        v11 += 32;
        int v6 = 106;
        LODWORD(v7) = 9;
        if (v11 == 480) {
          goto LABEL_21;
        }
      }
      LODWORD(v7) = 0;
      *a5 = v8 + v11 - 480;
      int v6 = 101;
    }
  }
LABEL_21:
  *(_DWORD *)a6 = v7;
  *(void *)(a6 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
  *(_DWORD *)(a6 + 16) = v6;
  return result;
}

void sub_244D8469C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (!a2 || !a3)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    *(_DWORD *)(a5 + 16) = 122;
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (unsigned __int8 *)a1;
  while (*v8 != a2)
  {
    ++v7;
    v8 += 552;
    if (v7 == 16) {
      goto LABEL_17;
    }
  }
  if (a4)
  {
    if (sub_244D847B0(a1, (void *)v8 + 61, a3, 2u))
    {
      --v8[1];
      int v9 = 135;
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 216;
    int v9 = 117;
    goto LABEL_18;
  }
  if (!sub_244D847B0(a1, (void *)v8 + 1, a3, 0xFu)) {
    goto LABEL_17;
  }
  --v8[2];
  int v9 = 144;
LABEL_13:
  if (!v8[2] && !v8[1]) {
    sub_244D8483C(a1, v7);
  }
  int v10 = 0;
LABEL_18:
  *(_DWORD *)a5 = v10;
  *(_DWORD *)(a5 + 4) = 0;
  *(void *)(a5 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
  *(_DWORD *)(a5 + 16) = v9;
  *(_DWORD *)(a5 + 20) = 0;
}

BOOL sub_244D847B0(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  if (*a2 != a3)
  {
    unint64_t v4 = 0;
    int v6 = a2;
    while (a4 - 1 != v4)
    {
      uint64_t v7 = v6[4];
      v6 += 4;
      ++v4;
      if (v7 == a3)
      {
        BOOL v5 = v4 < a4;
        goto LABEL_8;
      }
    }
    return 0;
  }
  unint64_t v4 = 0;
  BOOL v5 = 1;
  int v6 = a2;
LABEL_8:
  *int v6 = 0;
  LODWORD(a2[4 * v4 + 1]) = 0;
  sub_244D849EC(a1, (uint64_t)a2, a4);
  return v5;
}

void sub_244D8483C(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0xF)
  {
    unint64_t v4 = (char *)(a1 + 552 * a2);
    BOOL v5 = v4 + 8;
    int v6 = v4 + 488;
    bzero(v4, 0x228uLL);
    do
    {
      *(void *)BOOL v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      v5 += 32;
    }
    while (v5 != v6);
    do
    {
      *(void *)int v6 = 0;
      *((_DWORD *)v6 + 2) = 0;
      v6 += 32;
    }
    while (v6 != v4 + 552);
    if (a2 <= 0xE)
    {
      for (unsigned int i = 15; ; --i)
      {
        unsigned int v8 = i;
        int v9 = (unsigned char *)(a1 + 552 * i);
        if (*v9) {
          break;
        }
        if (v8 - 1 <= a2) {
          return;
        }
      }
      memcpy(v4, v9, 0x228uLL);
      uint64_t v10 = a1 + 552 * v8;
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v10 + 488;
      bzero(v9, 0x228uLL);
      do
      {
        *(void *)uint64_t v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        v11 += 32;
      }
      while (v11 != v12);
      do
      {
        *(void *)uint64_t v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        v12 += 32;
      }
      while ((unsigned char *)v12 != v9 + 552);
    }
  }
}

void sub_244D8494C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    for (unsigned int i = (unsigned __int8 *)a1; *i != a2; i += 552)
    {
      if (++v4 == 16)
      {
        *(_OWORD *)a3 = xmmword_2651A93E8;
        *(void *)(a3 + 16) = 166;
        return;
      }
    }
    sub_244D8483C(a1, v4);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    int v6 = 178;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    int v6 = 170;
  }
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_244D849EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2 && a3)
  {
    for (unint64_t i = 0; i != a3; ++i)
    {
      uint64_t v4 = (_OWORD *)(a2 + 32 * i);
      if (!*(void *)v4)
      {
        uint64_t v5 = a2 + 32 * a3;
        uint64_t v6 = a3;
        while (--v6 > i)
        {
          uint64_t v7 = (_OWORD *)(v5 - 32);
          uint64_t v8 = *(void *)(v5 - 32);
          v5 -= 32;
          if (v8)
          {
            long long v9 = v7[1];
            *uint64_t v4 = *v7;
            v4[1] = v9;
            *uint64_t v7 = 0uLL;
            v7[1] = 0uLL;
            break;
          }
        }
      }
    }
  }
}

void *sub_244D84A50(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  sub_244D84A88(a1, a2, (uint64_t)v4);
  return a1;
}

void *sub_244D84A88@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    *(_DWORD *)(a3 + 16) = 270;
    return result;
  }
  uint64_t v4 = result;
  result[1] = a2;
  unsigned __int16 v15 = 4;
  int v14 = 0;
  long long v16 = *(_OWORD *)"g/gcc";
  long long v17 = unk_244EC2930;
  char v18 = 0;
  uint64_t result = (*(void *(**)(int *__return_ptr, uint64_t, long long *, int *, unsigned __int16 *))(*(void *)a2 + 16))(&v11, a2, &v16, &v14, &v15);
  int v5 = v11;
  long long v19 = v12;
  int v20 = v13;
  if (v11)
  {
    if (v11 != 160) {
      goto LABEL_10;
    }
    int v6 = (sub_244CE98FC() & 0xFFFFFFF) + 1;
  }
  else
  {
    int v6 = v14;
  }
  *((_DWORD *)v4 + 1) = v6;
  uint64_t v7 = v4[1];
  long long v16 = *(_OWORD *)"g/gdc";
  long long v17 = unk_244EC2952;
  char v18 = 0;
  uint64_t result = (*(void *(**)(int *__return_ptr))(*(void *)v7 + 16))(&v11);
  int v5 = v11;
  long long v19 = v12;
  int v20 = v13;
  if (v11)
  {
    if (v11 == 160)
    {
      int v8 = (sub_244CE98FC() & 0xFFFFFFF) + 1;
      goto LABEL_12;
    }
LABEL_10:
    *(_DWORD *)a3 = v5;
    *(_OWORD *)(a3 + 4) = v19;
    *(_DWORD *)(a3 + 20) = v20;
    return result;
  }
  int v8 = v14;
LABEL_12:
  *(_DWORD *)uint64_t v4 = v8;
  int v14 = *((_DWORD *)v4 + 1) + 1000;
  unsigned __int16 v15 = 4;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v9 = v4[1];
  long long v16 = *(_OWORD *)"g/gcc";
  long long v17 = unk_244EC2930;
  char v18 = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, long long *, int *, uint64_t))(*(void *)v9 + 24))(v9, &v16, &v14, 4);
  if (!*(_DWORD *)a3)
  {
    int v14 = *(_DWORD *)v4 + 1000;
    uint64_t v10 = v4[1];
    long long v16 = *(_OWORD *)"g/gdc";
    long long v17 = unk_244EC2952;
    char v18 = 0;
    return (void *)(*(uint64_t (**)(uint64_t, long long *, int *, void))(*(void *)v10 + 24))(v10, &v16, &v14, v15);
  }
  return result;
}

uint64_t sub_244D84D00(uint64_t a1, int a2)
{
  uint64_t v2 = 4;
  if (!a2) {
    uint64_t v2 = 0;
  }
  return *(unsigned int *)(a1 + v2);
}

uint64_t sub_244D84D14@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v11 = 0;
  __int16 v10 = 4;
  long long v12 = 0u;
  long long v13 = 0u;
  if (a2)
  {
    int v5 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)(a1 + 4) = v5;
    int v6 = "g/gcc";
  }
  else
  {
    int v5 = *(_DWORD *)a1 + 1;
    *(_DWORD *)a1 = v5;
    int v6 = "g/gdc";
  }
  long long v7 = *((_OWORD *)v6 + 1);
  long long v12 = *(_OWORD *)v6;
  long long v13 = v7;
  char v14 = 0;
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, int *, __int16 *))(*(void *)result + 16))(result, &v12, &v11, &v10);
    if (*(_DWORD *)a3) {
      return result;
    }
    if (v11 == v5)
    {
      int v11 = v5 + 1000;
      return (*(uint64_t (**)(void, long long *, int *, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), &v12, &v11, 4);
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/transport/GroupPeerMessageCounter.cpp";
    int v9 = 354;
  }
  else
  {
    *(_DWORD *)a3 = 160;
    a3[1] = "src/transport/GroupPeerMessageCounter.cpp";
    int v9 = 345;
  }
  *((_DWORD *)a3 + 4) = v9;
  return result;
}

void sub_244D84E94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!*a5)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    int v7 = 42;
    goto LABEL_5;
  }
  if (*(void *)*a5)
  {
    *(_DWORD *)a6 = 24;
    *(void *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    int v7 = 43;
LABEL_5:
    *(_DWORD *)(a6 + 16) = v7;
    return;
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  sub_244DB6938(a3, (void **)a5, (void *)a6);
  if (!*(_DWORD *)a6)
  {
    long long v13 = *(char **)(*a5 + 8);
    size_t v12 = *(void *)(*a5 + 16);
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    sub_244D83DEC(a1, v13, v12, v13, a2, a4, &v16, (void *)a6);
    if (!*(_DWORD *)a6)
    {
      unsigned __int16 v15 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      unint64_t v14 = sub_244CC8B50(*a5);
      sub_244DB6A98(&v16, a4, &v13[v12], v14, &v15, a6);
      if (!*(_DWORD *)a6)
      {
        sub_244CC8AE4(*a5, v12 + v15, 0);
        *(_DWORD *)a6 = 0;
        *(void *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
        int v7 = 58;
        goto LABEL_5;
      }
    }
  }
}

void sub_244D8501C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a5;
  if (!*a5)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    int v11 = 64;
    goto LABEL_5;
  }
  unint64_t v9 = *(void *)(v7 + 24);
  BOOL v10 = (*(unsigned __int16 *)(a4 + 44) | *(unsigned __int8 *)(a4 + 46)) != 0;
  if (v9 < 16 * (unint64_t)((*(unsigned __int16 *)(a4 + 44) | *(unsigned __int8 *)(a4 + 46)) != 0))
  {
    *(_DWORD *)a6 = 24;
    *(void *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    int v11 = 80;
LABEL_5:
    *(_DWORD *)(a6 + 16) = v11;
    return;
  }
  long long v16 = *(char **)(v7 + 8);
  uint64_t v17 = 16 * ((*(unsigned __int16 *)(a4 + 44) | *(unsigned __int8 *)(a4 + 46)) != 0);
  unsigned __int16 v21 = 0;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  unint64_t v18 = v9 - v17;
  sub_244DB6A30(&v22, a4, &v16[v9 - v17], 16 * v10, &v21, a6);
  if (!*(_DWORD *)a6)
  {
    if (v21 == v17)
    {
      sub_244CC8AE4(*a5, v18, 0);
      long long v19 = *(char **)(*a5 + 8);
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      sub_244D84030(a1, v16, v18, v19, a2, a4, (uint64_t)&v22, a6);
      if (*(_DWORD *)a6) {
        return;
      }
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      sub_244DB64B0(a3, (void **)a5, (void *)a6);
      if (*(_DWORD *)a6) {
        return;
      }
      int v20 = 0;
      int v11 = 94;
    }
    else
    {
      int v11 = 85;
      int v20 = 172;
    }
    *(_DWORD *)a6 = v20;
    *(void *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    goto LABEL_5;
  }
}

void sub_244D851E4(uint64_t a1)
{
}

uint64_t sub_244D851F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int16 a6, uint64_t *a7)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 56) != 1) {
    sub_244E27298();
  }
  int v7 = *(unsigned __int8 *)(a3 + 8);
  if (v7 != *(unsigned __int8 *)(a2 + 8)) {
    sub_244E271F8();
  }
  int v9 = *(unsigned __int8 *)(a1 + 57);
  if (v9 == 2)
  {
    if (!*(unsigned char *)(a3 + 8)) {
      sub_244E270B8();
    }
    if ((unint64_t)(*(void *)a3 - 1) > 0xFFFFFFEFFFFFFFFELL
      || (unint64_t)(*(void *)a2 - 1) >= 0xFFFFFFEFFFFFFFFFLL)
    {
      sub_244E27158();
    }
  }
  else if (v9 == 1 && v7 != 0)
  {
    sub_244E27018();
  }
  *(void *)(a1 + 72) = *(void *)a3;
  *(void *)(a1 + 64) = *(void *)a2;
  *(void *)(a1 + 80) = a4;
  *(_DWORD *)(a1 + 88) = a5;
  *(_WORD *)(a1 + 94) = a6;
  uint64_t v11 = *a7;
  *(_WORD *)(a1 + 152) = *((_WORD *)a7 + 4);
  *(void *)(a1 + 144) = v11;
  LODWORD(v11) = *((unsigned __int8 *)a7 + 12);
  *(unsigned char *)(a1 + 156) = v11;
  if (v11) {
    *(_WORD *)(a1 + 158) = *((_WORD *)a7 + 7);
  }
  int v12 = *((unsigned __int8 *)a7 + 16);
  *(unsigned char *)(a1 + 160) = v12;
  if (v12) {
    *(_WORD *)(a1 + 162) = *((_WORD *)a7 + 9);
  }
  int v13 = *((unsigned __int8 *)a7 + 20);
  *(unsigned char *)(a1 + 164) = v13;
  if (v13) {
    *(_DWORD *)(a1 + 168) = *((_DWORD *)a7 + 6);
  }
  *(_WORD *)(a1 + 172) = *((_WORD *)a7 + 14);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a3 + 8);
  sub_244D8542C(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_244D854DC(a1, 2);
  if (*(unsigned char *)(a1 + 57) == 2) {
    sub_244D856A0(*(void *)(a1 + 48), a1);
  }
  unint64_t v14 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = *(unsigned __int8 *)(a1 + 57);
    int v16 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = v15;
    __int16 v22 = 1024;
    int v23 = v16;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "SecureSession[%p]: Activated - Type:%d LSID:%d", buf, 0x18u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(1u, 3);
  }
  return result;
}

uint64_t sub_244D8542C(uint64_t a1)
{
  *(void *)(a1 + 136) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  uint64_t result = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  *(void *)(a1 + 128) = result;
  if (*(unsigned char *)(a1 + 56) == 3)
  {
    return sub_244D854DC(a1, 2);
  }
  return result;
}

uint64_t sub_244D854DC(uint64_t result, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(result + 56) != a2)
  {
    char v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if ((*(unsigned char *)(v3 + 56) - 1) > 3u) {
        int v5 = "???";
      }
      else {
        int v5 = off_2651A9400[(char)(*(unsigned char *)(v3 + 56) - 1)];
      }
      int v6 = *(unsigned __int16 *)(v3 + 92);
      if ((v2 - 1) > 3u) {
        int v7 = "???";
      }
      else {
        int v7 = off_2651A9400[(char)(v2 - 1)];
      }
      *(_DWORD *)std::string buf = 134218754;
      uint64_t v9 = v3;
      __int16 v10 = 1024;
      int v11 = v6;
      __int16 v12 = 2080;
      int v13 = v5;
      __int16 v14 = 2080;
      int v15 = v7;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "SecureSession[%p, LSID:%d]: State change '%s' --> '%s'", buf, 0x26u);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0xBu, 2);
    }
    *(unsigned char *)(v3 + 56) = v2;
  }
  return result;
}

uint64_t sub_244D856A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (*(unsigned char *)(a2 + 57) != 2) {
    sub_244E27338();
  }
  uint64_t v4 = &v3;
  return sub_244CC6478((void *)(a1 + 24), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_244D85FD8);
}

const char *sub_244D856F4(uint64_t a1, char a2)
{
  if ((a2 - 1) > 3u) {
    return "???";
  }
  else {
    return off_2651A9400[(char)(a2 - 1)];
  }
}

uint64_t sub_244D85724(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v2 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 57);
    int v4 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v8 = a1;
    __int16 v9 = 1024;
    int v10 = v3;
    __int16 v11 = 1024;
    int v12 = v4;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "SecureSession[%p]: MarkAsDefunct Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v5 = *(unsigned __int8 *)(a1 + 56);
  if (v5 == 2)
  {
    sub_244D854DC(a1, 3);
  }
  else if (v5 == 1)
  {
    sub_244E273D8();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

uint64_t sub_244D8588C(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v2 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *((unsigned __int8 *)a1 + 57);
    int v4 = *((unsigned __int16 *)a1 + 46);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v8 = a1;
    __int16 v9 = 1024;
    int v10 = v3;
    __int16 v11 = 1024;
    int v12 = v4;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "SecureSession[%p]: MarkForEviction Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  (*(void (**)(void *))(*a1 + 24))(a1);
  int v5 = *((unsigned __int8 *)a1 + 56);
  if ((v5 - 2) < 2)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
LABEL_8:
    sub_244D854DC((uint64_t)a1, 4);
    sub_244D85A28(a1);
    return (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  }
  if (v5 == 1) {
    goto LABEL_8;
  }
  return (*(uint64_t (**)(void *))(*a1 + 32))(a1);
}

uint64_t sub_244D85A28(void *a1)
{
  (*(void (**)(void *))(*a1 + 24))(a1);
  while (1)
  {
    char v2 = (void *)a1[2];
    if (v2 == a1 + 1) {
      break;
    }
    if (v2) {
      int v3 = v2 - 1;
    }
    else {
      int v3 = 0;
    }
    (*(void (**)(void *))(*v3 + 16))(v3);
  }
  int v4 = *(uint64_t (**)(void *))(*a1 + 32);

  return v4(a1);
}

uint64_t sub_244D85AE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 21) = 0;
  unint64_t v3 = *(void *)(result + 72);
  if (v3 - 1 <= 0xFFFFFFEFFFFFFFFELL)
  {
    *(unsigned char *)(a2 + 1) = 64;
    uint64_t v4 = *(void *)(result + 80);
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 88);
LABEL_7:
    *(unsigned char *)a2 = *(unsigned char *)(result + 24);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 104))(result);
    *(unsigned char *)(a2 + 28) = result;
    return result;
  }
  if (HIDWORD(v3) != 4294967291) {
    sub_244E27478();
  }
  if (*(unsigned char *)(result + 177) && *(unsigned char *)(result + 176) == 1)
  {
    *(unsigned char *)(a2 + 1) = 32;
    *(void *)(a2 + 8) = v3;
    goto LABEL_7;
  }
  return result;
}

BOOL sub_244D85BA4(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 57);
  return v1 == 1 || v1 == 2 && *(unsigned char *)(a1 + 58);
}

_WORD *sub_244D85BD0(uint64_t a1)
{
  return sub_244D85BD8((_WORD *)(a1 + 40));
}

_WORD *sub_244D85BD8(_WORD *a1)
{
  int v1 = (unsigned __int16)*a1;
  if (v1 == 0xFFFF) {
    sub_244E24B8C();
  }
  *a1 = v1 + 1;
  return a1 - 20;
}

void sub_244D85C08(uint64_t a1)
{
}

void sub_244D85C10(uint64_t a1)
{
  if (!*(_WORD *)a1) {
    sub_244E24A4C();
  }
  __int16 v1 = *(_WORD *)a1 - 1;
  *(_WORD *)a1 = v1;
  if (!v1)
  {
    char v2 = (void (***)(void))(a1 - 40);
    uint64_t v3 = *(void *)(a1 + 8) + 8;
    sub_244D85F28(v3, v2);
  }
}

uint64_t sub_244D85C64(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 8;
  uint64_t v3 = *(void *)(result + 16);
  if (v3 != result + 8)
  {
    do
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (v3) {
        uint64_t v6 = v3 - 8;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2);
      uint64_t v3 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

void sub_244D85CE4(uint64_t a1)
{
  sub_244D861BC(a1);

  JUMPOUT(0x245695FA0);
}

BOOL sub_244D85D1C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 56) == 2;
}

uint64_t sub_244D85D2C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_244D85D3C(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

BOOL sub_244D85D4C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 112);
  return v1 == 1 || v1 == 4;
}

BOOL sub_244D85D60(uint64_t a1)
{
  return *(unsigned char *)(a1 + 112) == 3;
}

uint64_t sub_244D85D70(uint64_t a1)
{
  return a1 + 144;
}

uint64_t sub_244D85D78(void *a1)
{
  unint64_t v2 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0) - a1[17];
  unint64_t v3 = *(unsigned __int16 *)((*(uint64_t (**)(void *))(*a1 + 88))(a1) + 8);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  uint64_t v5 = (unsigned int *)(v4 + 4);
  if (v2 >= v3) {
    uint64_t v5 = (unsigned int *)v4;
  }
  return *v5;
}

uint64_t sub_244D85E3C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 112);
  switch(v1)
  {
    case 3:
      return 30000;
    case 2:
      return 15000;
    case 1:
      return sub_244D6A0C8(*(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 136), *(unsigned __int16 *)(a1 + 152));
  }
  return 0;
}

uint64_t sub_244D85E84(uint64_t a1, unsigned int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 112);
  if (v2 == 3) {
    return 30000;
  }
  if (v2 == 2) {
    return 15000;
  }
  if (v2 != 1) {
    return 0;
  }
  sub_244D6A044((uint64_t)v9);
  unint64_t v4 = sub_244D6A0B8();
  if (v9[0])
  {
    int v7 = sub_2446DC5A0(v9);
    LODWORD(v4) = *(_DWORD *)v7;
    LODWORD(v6) = *((_DWORD *)v7 + 1);
    unsigned __int16 v5 = *((_WORD *)v7 + 4);
  }
  else
  {
    unint64_t v6 = HIDWORD(v4);
  }
  return sub_244D6A0C8(v6, v4, a2, v5);
}

void sub_244D85F28(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    unint64_t v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26074();
    }
    unsigned __int16 v5 = v4;
    *unint64_t v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244D85FDC(uint64_t **a1, uint64_t a2)
{
  if (**a1 != a2)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    if (*(unsigned char *)(a2 + 57) == 2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
      char v6 = v5;
      if (v4 == (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 48))(**a1)
        && v6 == v7
        && sub_244B2B7E8(a2 + 80, **a1 + 80))
      {
        uint64_t v8 = **a1;
        uint64_t v13 = v8;
        (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9 != a2 + 8)
        {
          do
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v9) {
              uint64_t v11 = v9 - 8;
            }
            else {
              uint64_t v11 = 0;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 24))(v11, &v13);
            uint64_t v9 = v10;
          }
          while (v10 != a2 + 8);
          uint64_t v8 = v13;
        }
        (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  return 0;
}

uint64_t sub_244D861BC(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F956DB0;
  int v2 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 57);
    int v4 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v7 = a1;
    __int16 v8 = 1024;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "SecureSession[%p]: Released - Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  *(_DWORD *)(a1 + 264) = 0;
  sub_244D83880(a1 + 176);
  *(void *)a1 = &unk_26F956E98;
  sub_244D86300((void *)(a1 + 8));
  return a1;
}

void *sub_244D86300(void *a1)
{
  if ((void *)a1[1] != a1) {
    sub_244E27518();
  }
  sub_244D7E854(a1);

  return sub_24479DFF4(a1);
}

unint64_t *sub_244D86348@<X0>(unint64_t *result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, __int16 a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  uint64_t v17 = a6;
  int v18 = a7;
  char v16 = a2;
  __int16 v15 = a3;
  uint64_t v13 = a5;
  uint64_t v14 = a4;
  __int16 v12 = a8;
  if ((a2 != 2 || a5 && a4 && a10)
    && (uint64_t result = (unint64_t *)sub_244D86410(result + 1, (uint64_t)result, &v16, &v15, &v14, &v13, (uint64_t)&v17, &v12, &a10, a11)) != 0)
  {
    *(unsigned char *)a9 = 1;
    *(void *)(a9 + 8) = result;
    return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 24))(result);
  }
  else
  {
    *(unsigned char *)a9 = 0;
  }
  return result;
}

void *sub_244D86410(unint64_t *a1, uint64_t a2, char *a3, __int16 *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, __int16 *a8, char *a9, uint64_t a10)
{
  int v18 = sub_244CC4D84(0x120uLL);
  uint64_t v19 = v18;
  if (v18)
  {
    sub_244D87354((uint64_t)v18, a2, *a3, *a4, *a5, *a6, *(void *)a7, *(_DWORD *)(a7 + 8), *a8, *a9, a10);
    __int16 v20 = sub_244CC4D84(0x18uLL);
    if (v20)
    {
      void *v20 = v19;
      v20[1] = a1 + 2;
      v20[2] = 0;
      v20[2] = a1[4];
      *(void *)(a1[4] + 8) = v20;
      a1[4] = (unint64_t)v20;
      unint64_t v21 = a1[1];
      unint64_t v22 = *a1 + 1;
      *a1 = v22;
      if (v22 > v21) {
        a1[1] = v22;
      }
    }
    else
    {
      return 0;
    }
  }
  return v19;
}

uint64_t sub_244D86510@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  char v16 = a2;
  v14[0] = 0;
  uint64_t result = sub_244D86694(a1, (uint64_t)v13);
  if (!v13[0]) {
    goto LABEL_9;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = (__int16 *)sub_2447A4DF0(v13);
  if (v8 > 0x3E7)
  {
    uint64_t result = (uint64_t)sub_244D86834();
    if (result) {
      goto LABEL_4;
    }
LABEL_9:
    *a5 = 0;
    return result;
  }
  uint64_t result = (uint64_t)sub_244D86784((unint64_t *)(a1 + 8), a1, &v16, v9);
  if (!result) {
    goto LABEL_9;
  }
LABEL_4:
  v11[0] = 1;
  uint64_t v12 = result;
  (*(void (**)(uint64_t))(*(void *)result + 24))(result);
  sub_244CD11CC((uint64_t)v14, v11);
  if (v11[0]) {
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  if (*(__int16 *)sub_2447A4DF0(v13) == -1) {
    __int16 v10 = 1;
  }
  else {
    __int16 v10 = *(_WORD *)sub_2447A4DF0(v13) + 1;
  }
  *(_WORD *)(a1 + 64) = v10;
  uint64_t result = sub_244D872C8((uint64_t)a5, v14);
  if (v14[0]) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  }
  return result;
}

uint64_t sub_244D86694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (void *)(a1 + 24);
  unsigned int v5 = -64;
  while (1)
  {
    __int16 v6 = v5 + *(_WORD *)(a1 + 64);
    __int16 v15 = v6 + 64;
    __int16 v7 = -64 - v6;
    uint64_t v8 = (v7 & 0xFFC0) != 0 ? 0 : 1 << v7;
    uint64_t v14 = v8;
    v16[0] = &v15;
    v16[1] = &v14;
    uint64_t result = sub_244CC6478(v4, (uint64_t)v16, (unsigned int (*)(uint64_t))sub_244D87990);
    unint64_t v10 = v14;
    if (v14 != -1) {
      break;
    }
    v5 += 64;
    if (v5 >> 6 > 0x3FE)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  __int16 v11 = 0;
  if (v14)
  {
    do
    {
      char v12 = v10;
      v10 >>= 1;
      ++v11;
    }
    while ((v12 & 2) != 0);
  }
  __int16 v13 = v15 + v11;
  *(unsigned char *)a2 = 1;
  *(_WORD *)(a2 + 2) = v13;
  return result;
}

void *sub_244D86784(unint64_t *a1, uint64_t a2, char *a3, __int16 *a4)
{
  uint64_t v8 = sub_244CC4D84(0x120uLL);
  int v9 = v8;
  if (v8)
  {
    sub_244D8762C((uint64_t)v8, a2, *a3, *a4);
    unint64_t v10 = sub_244CC4D84(0x18uLL);
    if (v10)
    {
      *unint64_t v10 = v9;
      v10[1] = a1 + 2;
      void v10[2] = 0;
      void v10[2] = a1[4];
      *(void *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      unint64_t v11 = a1[1];
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11) {
        a1[1] = v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void *sub_244D86834()
{
  uint64_t v0 = (unsigned char *)MEMORY[0x270FA5388]();
  uint64_t v69 = *MEMORY[0x263EF8340];
  __int16 v50 = v1;
  char v49 = v2;
  if (*v0) {
    sub_244E27820();
  }
  int v4 = v3;
  int v5 = v2;
  unsigned int v6 = v1;
  __int16 v7 = v0;
  unsigned char *v0 = 1;
  uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    unsigned int v66 = v6;
    __int16 v67 = 1024;
    v68[0] = v5;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Evicting a slot for session with LSID: %d, type: %u", buf, 0xEu);
  }
  if (sub_244CC4E58(2u))
  {
    uint64_t v43 = v6;
    sub_244CC4DE0(0xBu, 2);
  }
  char v45 = (unint64_t *)(v7 + 8);
  if (*((void *)v7 + 1) >= 0x3E9uLL) {
    sub_244E27708();
  }
  int v48 = 0;
  *(void *)uint64_t v51 = &v48;
  *(void *)&v51[8] = buf;
  *(void *)&v51[16] = v7;
  uint64_t v9 = sub_244CC6478((void *)v7 + 3, (uint64_t)v51, (unsigned int (*)(uint64_t))sub_244D8785C);
  uint64_t v10 = *((void *)v7 + 1);
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  v46[0] = buf;
  v46[1] = v10;
  _OWORD v46[2] = v11;
  char v47 = v12;
  sub_244D86E78(v9, v46);
  __int16 v13 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "Sorted sessions for eviction...", v51, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xBu, 2);
  }
  unint64_t v14 = *v45;
  __int16 v15 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_INFO, "Sorted Eviction Candidates (ranked from best candidate to worst):", v51, 2u);
  }
  __int16 v44 = v7;
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  if (!v14) {
LABEL_30:
  }
    sub_244E277B8();
  uint64_t v16 = 0;
  uint64_t v17 = 16 * v14;
  uint64_t v18 = "SecureChannel";
  do
  {
    uint64_t v19 = sub_244CC8484(0xBu, v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      __int16 v20 = (uint64_t *)&buf[v16];
      uint64_t v21 = *(void *)&buf[v16];
      (*(void (**)(uint64_t))(*(void *)v21 + 48))(v21);
      unint64_t v22 = v18;
      int v24 = v23;
      unint64_t v31 = (unint64_t)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v20 + 48))(*v20, v23, v25, v26, v27, v28, v29, v30, v43) >> 32;
      int v32 = (*(uint64_t (**)(void))(**(void **)&buf[v16] + 48))();
      uint64_t v33 = sub_244D856F4(*v20, *(unsigned char *)(*v20 + 56));
      int v34 = *(unsigned __int16 *)((char *)&v67 + v16);
      int v35 = LOWORD(v68[(unint64_t)v16 / 4]);
      uint64_t v36 = *(void *)(*(void *)&buf[v16] + 128);
      *(_DWORD *)uint64_t v51 = 134220034;
      *(void *)&v51[4] = v16 >> 4;
      *(_WORD *)&v51[12] = 2048;
      *(void *)&v51[14] = v21;
      *(_WORD *)&v51[22] = 1024;
      int v52 = v24;
      uint64_t v18 = v22;
      __int16 v53 = 1024;
      int v54 = v31;
      __int16 v55 = 1024;
      int v56 = v32;
      __int16 v57 = 2080;
      long long v58 = v33;
      __int16 v59 = 1024;
      int v60 = v34;
      __int16 v61 = 1024;
      int v62 = v35;
      __int16 v63 = 2048;
      uint64_t v64 = v36;
      _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_INFO, "\t%ld: [%p] -- Peer: [%u:%08X%08X] State: '%s', NumMatchingOnFabric: %d NumMatchingOnPeer: %d ActivityTime: %lu", v51, 0x48u);
    }
    if (sub_244CC4E58(3u))
    {
      (*(void (**)(void))(**(void **)&buf[v16] + 48))(*(void *)&buf[v16]);
      (*(uint64_t (**)(void))(**(void **)&buf[v16] + 48))();
      (*(void (**)(void))(**(void **)&buf[v16] + 48))();
      sub_244D856F4(*(void *)&buf[v16], *(unsigned char *)(*(void *)&buf[v16] + 56));
      uint64_t v43 = v16 >> 4;
      sub_244CC4DE0(0xBu, 3);
    }
    v16 += 16;
  }
  while (v17 != v16);
  uint64_t v37 = 0;
  while (1)
  {
    if (*(unsigned char *)(*(void *)&buf[v37] + 56) != 4)
    {
      long long v38 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = *(void *)&buf[v37];
        *(_DWORD *)uint64_t v51 = 134217984;
        *(void *)&v51[4] = v39;
        _os_log_impl(&dword_2446BD000, v38, OS_LOG_TYPE_DEFAULT, "Candidate Session[%p] - Attempting to evict...", v51, 0xCu);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0xBu, 2);
      }
      unint64_t v40 = *v45;
      sub_244D8588C(*(void **)&buf[v37]);
      if (*v45 < v40) {
        break;
      }
    }
    v37 += 16;
    if (v17 == v37) {
      goto LABEL_30;
    }
  }
  uint64_t v41 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl(&dword_2446BD000, v41, OS_LOG_TYPE_DEFAULT, "Successfully evicted a session!", v51, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xBu, 2);
  }
  uint64_t result = sub_244D86784(v45, (uint64_t)v44, &v49, &v50);
  *__int16 v44 = 0;
  return result;
}

void sub_244D86E78(uint64_t a1, void *a2)
{
  unint64_t v35 = a2[1];
  if (v35 < 2) {
    return;
  }
  int v2 = a2;
  uint64_t v3 = *a2;
  int v4 = 2;
  for (uint64_t i = 1; i != v35; ++i)
  {
    unsigned int v6 = (uint64_t *)(v3 + 16 * i);
    uint64_t v7 = *v6;
    unsigned int v8 = *((unsigned __int16 *)v6 + 4);
    unsigned int v39 = *((unsigned __int16 *)v6 + 5);
    int v9 = *((_DWORD *)v6 + 3);
    int v10 = i;
    if ((int)i < 1) {
      goto LABEL_39;
    }
    int v36 = *((_DWORD *)v6 + 3);
    uint64_t v11 = (_OWORD *)(v3 + 16 * i);
    uint64_t v37 = i;
    int v10 = i;
    int v38 = v4;
    uint64_t v40 = *v6;
    unsigned int v41 = *((unsigned __int16 *)v6 + 4);
    while (1)
    {
      uint64_t v12 = (v10 - 1);
      __int16 v13 = (unsigned __int16 *)(v3 + 16 * v12);
      unsigned int v14 = v13[4];
      BOOL v15 = v8 > v14;
      if (v8 != v14) {
        goto LABEL_33;
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
      unsigned __int8 v17 = v16;
      int v18 = *((unsigned __int8 *)v2 + 24);
      uint64_t v19 = v2;
      BOOL v20 = v18 == v16;
      unsigned int v42 = (unsigned __int16 *)(v3 + 16 * v12);
      (*(void (**)(void))(**(void **)v13 + 48))();
      int v22 = *((unsigned __int8 *)v19 + 24);
      if (v20 != (v22 == v21)) {
        break;
      }
      uint64_t v23 = v3 + 16 * v12;
      unsigned int v25 = *(unsigned __int16 *)(v23 + 10);
      int v24 = (_WORD *)(v23 + 10);
      BOOL v15 = v39 > v25;
      if (v39 != v25)
      {
        int v2 = v19;
        uint64_t v7 = v40;
        unsigned int v8 = v41;
        __int16 v13 = (unsigned __int16 *)(v3 + 16 * v12);
        goto LABEL_33;
      }
      uint64_t v7 = v40;
      unsigned int v27 = 0;
      int v2 = v19;
      if ((*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40) == v19[2])
      {
        __int16 v13 = v42;
        if (*((unsigned __int8 *)v19 + 24) == v26)
        {
          unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40) ^ 1;
          if (v39) {
            unsigned int v27 = 1;
          }
          else {
            unsigned int v27 = v28;
          }
        }
      }
      else
      {
        __int16 v13 = v42;
      }
      uint64_t v29 = (*(uint64_t (**)(void))(**(void **)v13 + 48))();
      unsigned int v31 = 0;
      if (v29 == v19[2] && *((unsigned __int8 *)v19 + 24) == v30)
      {
        unsigned int v31 = (*(uint64_t (**)(void))(**(void **)v13 + 40))() ^ 1;
        if (*v24) {
          unsigned int v31 = 1;
        }
      }
      BOOL v15 = v27 > v31;
      if (v27 != v31)
      {
        unsigned int v8 = v41;
LABEL_33:
        if (!v15) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      if (*(unsigned char *)(v40 + 56) == 3) {
        unsigned int v32 = 2;
      }
      else {
        unsigned int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
      }
      if (*(unsigned char *)(*(void *)v13 + 56) == 3) {
        unsigned int v33 = 2;
      }
      else {
        unsigned int v33 = (*(uint64_t (**)(void))(**(void **)v13 + 40))(*(void *)v13);
      }
      unsigned int v8 = v41;
      BOOL v15 = v32 > v33;
      if (v32 != v33) {
        goto LABEL_33;
      }
      if (*(void *)(v40 + 128) >= *(void *)(*(void *)v13 + 128)) {
        goto LABEL_37;
      }
LABEL_35:
      *v11-- = *(_OWORD *)v13;
      --v4;
      --v10;
      if (v4 <= 1)
      {
        int v10 = 0;
LABEL_37:
        int v4 = v38;
        uint64_t i = v37;
        goto LABEL_38;
      }
    }
    if (v18 == v17)
    {
      int v2 = v19;
      uint64_t v7 = v40;
      unsigned int v8 = v41;
      __int16 v13 = (unsigned __int16 *)(v3 + 16 * v12);
      if (v22 == v21) {
        goto LABEL_37;
      }
      goto LABEL_35;
    }
    int v2 = v19;
    int v4 = v38;
    uint64_t i = v37;
    uint64_t v7 = v40;
    LOWORD(v8) = v41;
LABEL_38:
    int v9 = v36;
LABEL_39:
    uint64_t v34 = v3 + 16 * v10;
    *(void *)uint64_t v34 = v7;
    *(_WORD *)(v34 + 8) = v8;
    *(_WORD *)(v34 + 10) = v39;
    *(_DWORD *)(v34 + 12) = v9;
    ++v4;
  }
}

uint64_t sub_244D87230@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v7 = a2;
  uint64_t v6 = 0;
  v8[0] = &v7;
  v8[1] = &v6;
  sub_244CC6478((void *)(a1 + 24), (uint64_t)v8, (unsigned int (*)(uint64_t))sub_244D87964);
  uint64_t result = v6;
  if (v6)
  {
    *(void *)(a3 + 8) = v6;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *(unsigned char *)a3 = v5;
  return result;
}

uint64_t sub_244D872C8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)(a1 + 8) = v5;
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    (*(void (**)(void))(**((void **)a2 + 1) + 32))(*((void *)a2 + 1));
    *a2 = 0;
  }
  return a1;
}

uint64_t sub_244D87354(uint64_t a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, char a10, uint64_t a11)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)a1 = &unk_26F956DB0;
  *(void *)(a1 + 48) = a2;
  *(unsigned char *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 57) = a3;
  *(unsigned char *)(a1 + 58) = 0;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = a6;
  *(void *)(a1 + 80) = a7;
  *(_DWORD *)(a1 + 88) = a8;
  *(_WORD *)(a1 + 92) = a4;
  *(_WORD *)(a1 + 94) = a9;
  *(_OWORD *)(a1 + 96) = xmmword_268EC34EC;
  *(unsigned char *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 114) = 5540;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  *(void *)(a1 + 136) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  int v12 = *(_DWORD *)(a11 + 8);
  *(void *)(a1 + 144) = *(void *)a11;
  *(_DWORD *)(a1 + 152) = v12;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 172) = 1;
  sub_244D837BC(a1 + 176);
  *(void *)(a1 + 248) = &unk_26F956F28;
  *(_DWORD *)(a1 + 256) = sub_244CE98FC() & 0xFFFFFFF;
  *(_DWORD *)(a1 + 264) = 0;
  sub_244D854DC(a1, 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(unsigned char *)(a1 + 24) = a10;
  __int16 v13 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = *(unsigned __int8 *)(a1 + 57);
    int v15 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v18 = a1;
    __int16 v19 = 1024;
    int v20 = v14;
    __int16 v21 = 1024;
    int v22 = v15;
    _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_INFO, "SecureSession[%p]: Allocated for Test Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  return a1;
}

void sub_244D875D4()
{
}

uint64_t sub_244D875E8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(result + 8);
  if (v3 == -1)
  {
    int v6 = 97;
    int v4 = 125;
  }
  else
  {
    int v4 = 0;
    int v5 = v3 + 1;
    *(_DWORD *)(result + 8) = v5;
    *a2 = v5;
    int v6 = 101;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/transport/MessageCounter.h";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244D8762C(uint64_t a1, uint64_t a2, char a3, __int16 a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)a1 = &unk_26F956DB0;
  *(void *)(a1 + 48) = a2;
  *(unsigned char *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 57) = a3;
  *(unsigned char *)(a1 + 58) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 92) = a4;
  *(_WORD *)(a1 + 94) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_268EC34EC;
  *(unsigned char *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 114) = 5540;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  *(void *)(a1 + 136) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  *(void *)(a1 + 144) = sub_244D6A0B8();
  *(_DWORD *)(a1 + 152) = v5;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 172) = 1;
  sub_244D837BC(a1 + 176);
  *(void *)(a1 + 248) = &unk_26F956F28;
  *(_DWORD *)(a1 + 256) = sub_244CE98FC() & 0xFFFFFFF;
  *(_DWORD *)(a1 + 264) = 0;
  int v6 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = *(unsigned __int8 *)(a1 + 57);
    int v8 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v11 = a1;
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "SecureSession[%p]: Allocated Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  return a1;
}

uint64_t sub_244D8785C(unsigned int **a1, uint64_t a2)
{
  int v3 = a1[2];
  *(void *)&a1[1][4 * **a1] = a2;
  LOWORD(a1[1][4 * **a1 + 2]) = 0;
  HIWORD(a1[1][4 * **a1 + 2]) = 0;
  int v4 = a1[1];
  int v5 = **a1;
  uint64_t v7 = a2;
  int v8 = v5;
  int v9 = v4;
  sub_244CC6478((void *)v3 + 3, (uint64_t)&v7, (unsigned int (*)(uint64_t))sub_244D878FC);
  ++**a1;
  return 0;
}

uint64_t sub_244D878FC(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != a2 && *(unsigned __int8 *)(*(void *)a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 8);
    ++*(_WORD *)(v2 + 8);
    if (*(void *)(*(void *)a1 + 72) == *(void *)(a2 + 72))
    {
      uint64_t v3 = *(void *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 8);
      ++*(_WORD *)(v3 + 10);
    }
  }
  return 0;
}

uint64_t sub_244D87964(unsigned __int16 **a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 92) != **a1) {
    return 0;
  }
  *(void *)a1[1] = a2;
  return 1;
}

BOOL sub_244D87990(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2 = *(_WORD *)(a2 + 92) - **(_WORD **)a1;
  if (v2 <= 0x3Fu) {
    **(void **)(a1 + 8) |= 1 << v2;
  }
  return **(void **)(a1 + 8) == -1;
}

uint64_t sub_244D879D8(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 2) {
    sub_244E27888();
  }
  return a1;
}

uint64_t sub_244D87A2C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 2) {
    sub_244E2792C();
  }
  return a1;
}

uint64_t sub_244D87A80(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 1) {
    sub_244E279CC();
  }
  return a1;
}

uint64_t sub_244D87AD4(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 3) {
    sub_244E27A6C();
  }
  return a1;
}

uint64_t sub_244D87B28(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 3) {
    sub_244E27B0C();
  }
  return a1;
}

uint64_t sub_244D87B7C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 4) {
    sub_244E27BAC();
  }
  return a1;
}

uint64_t sub_244D87BD0(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 4) {
    sub_244E27C4C();
  }
  return a1;
}

uint64_t sub_244D87C24(uint64_t a1, int a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 3
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 4)
  {
    return 0;
  }
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + a2;
  uint64_t v6 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  return v5 + (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v6);
}

const char *sub_244D87DEC(void *a1)
{
  unsigned __int8 v1 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))(*a1) - 1;
  if (v1 > 3u) {
    return "?";
  }
  else {
    return off_2651A9420[(char)v1];
  }
}

uint64_t sub_244D87E54(uint64_t a1)
{
  *(void *)a1 = &unk_26F956F80;
  sub_244D87ED0((void *)a1);
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
  }
  sub_24479DFF4((void *)(a1 + 8));
  return a1;
}

void *sub_244D87ED0(void *result)
{
  unsigned __int8 v1 = result + 3;
  if (*((unsigned char *)result + 24))
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = (uint64_t *)sub_244D88084((unsigned char *)result + 24);
    uint64_t result = sub_244D88424(*v3, v2);
    if (*(unsigned char *)(v2 + 24)) {
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(v2 + 32) + 32))(*(void *)(v2 + 32));
    }
    *unsigned __int8 v1 = 0;
  }
  return result;
}

void sub_244D87F48(uint64_t a1)
{
  sub_244D87E54(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244D87F80(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F956F80;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v3 = (unsigned char *)(a1 + 24);
  sub_244D87FF4(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*v3)
  {
    int v4 = (uint64_t *)sub_244D88084(v3);
    sub_244D880A8(*v4, a1);
  }
  return a1;
}

uint64_t sub_244D87FF4(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)a1) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  int v4 = *a2;
  *(unsigned char *)a1 = v4;
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)(a1 + 8) = v5;
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  return a1;
}

unsigned char *sub_244D88084(unsigned char *a1)
{
  if (!*a1) {
    sub_244E2206C();
  }
  return a1 + 8;
}

void *sub_244D880A8(uint64_t a1, uint64_t a2)
{
  sub_244D6A434("src/transport/Session.h", 223);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = (void *)(a2 + 8);
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    sub_244E27D8C();
  }

  return sub_244D7E808((void *)(a1 + 8), v6);
}

uint64_t sub_244D8810C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F956F80;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v4 = (unsigned char *)(a1 + 24);
  sub_244D87FF4(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*v4)
  {
    uint64_t v5 = (uint64_t *)sub_244D88084(v4);
    sub_244D880A8(*v5, a1);
  }
  sub_244D87ED0((void *)a2);
  return a1;
}

uint64_t sub_244D88198(uint64_t a1, uint64_t a2)
{
  sub_244D87ED0((void *)a1);
  sub_244D87FF4(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = (uint64_t *)sub_244D88084((unsigned char *)(a1 + 24));
    sub_244D880A8(*v4, a1);
  }
  return a1;
}

uint64_t sub_244D881F0(uint64_t a1, uint64_t a2)
{
  sub_244D87ED0((void *)a1);
  sub_244D87FF4(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = (uint64_t *)sub_244D88084((unsigned char *)(a1 + 24));
    sub_244D880A8(*v4, a1);
  }
  sub_244D87ED0((void *)a2);
  return a1;
}

uint64_t sub_244D88258(void *a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 16))() != 2 || *(unsigned char *)(sub_244D879D8(*a2) + 56) != 1) {
    return 0;
  }
  sub_244D882DC((uint64_t)a1, a2);
  return 1;
}

void *sub_244D882DC(uint64_t a1, uint64_t *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v3 = a1 + 24;
  if (v4) {
    sub_244E27E2C();
  }
  sub_244D88398(v3, a2);
  uint64_t v6 = *a2;

  return sub_244D880A8(v6, a1);
}

uint64_t sub_244D88328(void *a1, uint64_t *a2)
{
  sub_244D87ED0(a1);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 40))();
  if (v4) {
    sub_244D882DC((uint64_t)a1, a2);
  }
  return v4;
}

uint64_t sub_244D88398(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)a1) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  *(unsigned char *)a1 = 1;
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = *a2;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return a1 + 8;
}

void *sub_244D88424(uint64_t a1, uint64_t a2)
{
  sub_244D6A434("src/transport/Session.h", 230);
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = (void *)(a2 + 8);
  uint64_t v6 = (void *)(a1 + 8);
  do
    uint64_t v6 = (void *)v6[1];
  while (v6 != v5 && v6 != v4);
  if (v6 == v4) {
    sub_244E27ECC();
  }

  return sub_244D7E854(v5);
}

uint64_t sub_244D88494(void *a1, uint64_t *a2)
{
  sub_244D87ED0(a1);

  return sub_244D88328(a1, a2);
}

uint64_t sub_244D884D4(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v7 = 0;
  char v8 = 0;
  char v9 = 0;
  char v10 = 0;
  int v11 = 0;
  char v12 = 0;
  __int16 v6 = 0;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  sub_244DB5FC4((uint64_t)&v7, *(void *)(*(void *)a1 + 8), *(void *)(*(void *)a1 + 24), &v6, (uint64_t)&v4);
  if (!v4) {
    return v7;
  }
  unsigned __int8 v1 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)std::string buf = v4;
    uint64_t v14 = v5;
    uint64_t v2 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v2;
    _os_log_impl(&dword_2446BD000, v1, OS_LOG_TYPE_ERROR, "Failed to decode EncryptedPacketBufferHandle header with error: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)std::string buf = v4;
    uint64_t v14 = v5;
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(1u, 1);
    return 0;
  }
  return result;
}

double sub_244D88628(uint64_t a1)
{
  *(void *)a1 = &unk_26F956FE0;
  *(void *)(a1 + 8) = &unk_26F957028;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = a1 + 64;
  *(void *)(a1 + 80) = a1 + 64;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 136) = a1 + 128;
  *(void *)(a1 + 144) = a1 + 128;
  *(_WORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 264) = &unk_26F9570B0;
  *(_DWORD *)(a1 + 272) = 0;
  return result;
}

void *sub_244D886E4(void *a1)
{
  *a1 = &unk_26F956FE0;
  a1[1] = &unk_26F957028;
  sub_244D88778((uint64_t)a1);
  sub_244CC6478(a1 + 16, (uint64_t)(a1 + 14), (unsigned int (*)(uint64_t))sub_244D8D5B8);
  sub_244D8D5D4(a1 + 14);
  sub_244D8D5D4(a1 + 6);
  return a1;
}

uint64_t sub_244D88778(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    sub_244DA1B70(v2, a1 + 8);
    *(void *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 176) = 0;
  uint64_t result = sub_244CC6478((void *)(a1 + 128), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_244D8E2E4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  return result;
}

void *sub_244D887E4(uint64_t a1)
{
  return sub_244D886E4((void *)(a1 - 8));
}

void sub_244D887EC(void *a1)
{
  sub_244D886E4(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244D88824(uint64_t a1)
{
  sub_244D886E4((void *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244D88860@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  if (*(_DWORD *)(result + 176))
  {
    int v9 = 129;
    int v10 = 3;
LABEL_13:
    *(_DWORD *)a8 = v10;
    *(void *)(a8 + 8) = "src/transport/SessionManager.cpp";
    *(_DWORD *)(a8 + 16) = v9;
    return result;
  }
  if (!a3)
  {
    int v9 = 130;
LABEL_12:
    int v10 = 47;
    goto LABEL_13;
  }
  if (!a5)
  {
    int v9 = 131;
    goto LABEL_12;
  }
  if (!a6)
  {
    int v9 = 132;
    goto LABEL_12;
  }
  uint64_t v17 = result;
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  uint64_t result = sub_244DA1B10(a6, result + 8, a8);
  if (!*(_DWORD *)a8)
  {
    *(_DWORD *)(v17 + 176) = 1;
    *(void *)(v17 + 248) = a3;
    *(void *)(v17 + 256) = a4;
    *(void *)(v17 + 24) = a2;
    *(void *)(v17 + 32) = a6;
    *(void *)(v17 + 40) = a7;
    *(_WORD *)(v17 + 168) = sub_244CE993C();
    *(_DWORD *)(v17 + 272) = sub_244CE98FC() & 0xFFFFFFF;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    *(void *)a8 = 0;
    uint64_t result = (uint64_t)sub_244D84A88((void *)(v17 + 184), a5, a8);
    if (!*(_DWORD *)a8)
    {
      int v10 = 0;
      *(void *)(*(void *)(v17 + 248) + 8) = v17;
      *(void *)(v17 + 208) = 0;
      *(void *)(v17 + 216) = 0;
      int v9 = 155;
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t sub_244D88980(uint64_t a1)
{
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_244D8E2E4);
}

void sub_244D889B8(uint64_t a1, int a2)
{
  if (!byte_268EC3160)
  {
    *((unsigned char *)&unk_268EC0EE0 + 8832) = 1;
    sub_244D8DF4C((char *)&unk_268EC0EE0);
  }
  sub_244D8494C((uint64_t)&unk_268EC0EE0, a2, (uint64_t)v3);
}

void sub_244D88A18(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, _WORD **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  char v12 = sub_244D7DFA0();
  int v13 = &off_244E79000;
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "SessionManager";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "PrepareMessage";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  int v14 = 0;
  unsigned int v67 = 0;
  char v68 = 0;
  char v70 = 0;
  char v72 = 0;
  int v74 = 0;
  char v75 = 0;
  if (!*((_WORD *)a3 + 2))
  {
    int v14 = 0;
    if (!*((_WORD *)a3 + 3) && *a3 <= 1u)
    {
      char v75 = 64;
      int v14 = 1;
    }
  }
  int v15 = (*(uint64_t (**)(void))(*(void *)*a2 + 80))();
  unint64_t v16 = *(void *)(*a4 + 16);
  if (v15)
  {
    if (v16 >= 0xF98F)
    {
      *(_DWORD *)a6 = 4;
      *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
      int v17 = 211;
LABEL_34:
      *(_DWORD *)(a6 + 16) = v17;
      goto LABEL_35;
    }
  }
  else if (v16 >= 0x49B)
  {
    *(_DWORD *)a6 = 4;
    *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
    int v17 = 215;
    goto LABEL_34;
  }
  long long v63 = xmmword_268EC34EC;
  int v18 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  switch(v18)
  {
    case 1:
      __int16 v61 = a5;
      LODWORD(v91) = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)(a1 + 264) + 24))(a1 + 264, &v91);
      if (*(_DWORD *)a6) {
        goto LABEL_42;
      }
      unsigned int v67 = v91;
      uint64_t v33 = sub_244D87A80(*a2);
      uint64_t v34 = v33;
      LODWORD(v35) = *(_DWORD *)(v33 + 56);
      if (v35 == 1)
      {
        uint64_t v40 = *(void *)(v33 + 48);
        char v70 = 1;
        uint64_t v71 = v40;
      }
      else
      {
        if (v35) {
          goto LABEL_41;
        }
        unint64_t v35 = *(void *)(v33 + 48);
        char v68 = 1;
        unint64_t v69 = v35;
        LOBYTE(v35) = 4;
      }
      HIBYTE(v74) |= v35;
LABEL_41:
      uint64_t v41 = sub_244D87A80(*a2);
      long long v63 = *(_OWORD *)(v41 + 64);
      int v42 = *(_DWORD *)(v41 + 84);
      int v64 = *(_DWORD *)(v41 + 80);
      int v65 = v42;
      uint64_t v66 = *(void *)(v41 + 88);
      *(_DWORD *)std::string buf = 2;
      *(void *)&uint8_t buf[8] = a3;
      *(void *)&uint8_t buf[16] = &v67;
      sub_2446C1098(v77, *(void *)(*a4 + 8), *(void *)(*a4 + 16));
      sub_244D7E520((uint64_t)buf);
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      sub_244DB6938((uint64_t)a3, (void **)a4, (void *)a6);
      if (!*(_DWORD *)a6)
      {
        int v43 = *(_DWORD *)(v34 + 56);
        if (v43)
        {
          if (v43 == 1)
          {
            unint64_t v44 = 0;
            unint64_t v58 = *(void *)(v34 + 48);
          }
          else
          {
            unint64_t v44 = 0;
            unint64_t v58 = 0;
          }
        }
        else
        {
          unint64_t v58 = 0;
          unint64_t v44 = *(void *)(v34 + 48);
        }
        int v13 = &off_244E79000;
        int v32 = 0;
        unint64_t v25 = v44;
        break;
      }
LABEL_42:
      int v13 = &off_244E79000;
      goto LABEL_35;
    case 2:
      uint64_t v36 = sub_244D879D8(*a2);
      if (!v36)
      {
        *(_DWORD *)a6 = 72;
        *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
        int v17 = 277;
        goto LABEL_34;
      }
      uint64_t v37 = v36;
      v89[0] = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      (*(void (**)(void))(*(void *)(v36 + 248) + 24))();
      if (*(_DWORD *)a6) {
        goto LABEL_68;
      }
      unsigned int v67 = v89[0];
      LOWORD(v74) = *(_WORD *)(v37 + 94);
      BYTE2(v74) = 0;
      v75 &= 0xFCu;
      long long v63 = *(_OWORD *)(v37 + 96);
      int v38 = *(_DWORD *)(v37 + 116);
      int v64 = *(_DWORD *)(v37 + 112);
      int v65 = v38;
      uint64_t v66 = *(void *)(v37 + 120);
      *(_DWORD *)std::string buf = 1;
      *(void *)&uint8_t buf[8] = a3;
      *(void *)&uint8_t buf[16] = &v67;
      sub_2446C1098(v77, *(void *)(*a4 + 8), *(void *)(*a4 + 16));
      sub_244D7E520((uint64_t)buf);
      unint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 56))(v37);
      sub_244D83BE0((uint64_t)&v91, v75, v89[0], v25, (uint64_t)buf);
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      sub_244D84E94(v37 + 176, (uint64_t)&v91, (uint64_t)a3, (uint64_t)&v67, a4, a6);
      if (*(_DWORD *)a6) {
        goto LABEL_68;
      }
      __int16 v61 = a5;
      unint64_t v58 = *(void *)(v37 + 72);
      int v32 = *(unsigned __int8 *)(v37 + 24);
      int v13 = &off_244E79000;
      break;
    case 4:
      uint64_t v59 = a1;
      __int16 v61 = a5;
      uint64_t v19 = sub_244D87B7C(*a2);
      uint64_t v20 = sub_244DAC8EC();
      if (!v20)
      {
        *(_DWORD *)a6 = 172;
        *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
        int v17 = 231;
        goto LABEL_34;
      }
      uint64_t v57 = v20;
      uint64_t v21 = sub_244D9EA90(*(void *)(v59 + 32), *(unsigned __int8 *)(v19 + 24));
      if (!v21)
      {
        *(_DWORD *)a6 = 47;
        *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
        int v17 = 234;
        goto LABEL_34;
      }
      int v22 = (unint64_t *)v21;
      __int16 v23 = *(_WORD *)(v19 + 44);
      char v72 = 1;
      __int16 v73 = v23;
      HIBYTE(v74) |= 2u;
      unsigned int v67 = sub_244D84D00(v59 + 184, v14);
      sub_244D84D14(v59 + 184, v14, buf);
      BYTE2(v74) = 1;
      char v24 = v75;
      char v75 = v75 & 0xFC | 1;
      unint64_t v25 = *v22;
      char v68 = 1;
      unint64_t v69 = v25;
      char v26 = HIBYTE(v74);
      HIBYTE(v74) |= 4u;
      if ((v26 & 2) == 0 || (v24 & 0x40) != 0)
      {
        *(_DWORD *)a6 = 172;
        *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
        *(_DWORD *)(a6 + 16) = 245;
        goto LABEL_68;
      }
      unint64_t v27 = v22[1];
      unsigned int v28 = *(unsigned __int16 *)(v19 + 44);
      *(void *)std::string buf = (v27 >> 8) | 0xFD00000000000000;
      *(void *)&long long v63 = sub_244CBF060(5, 64, (uint64_t *)buf, v28 | (v27 << 24));
      *((void *)&v63 + 1) = v29;
      LOBYTE(v64) = 1;
      HIWORD(v64) = 5540;
      int v65 = 0;
      uint64_t v66 = 0;
      *(_DWORD *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = a3;
      *(void *)&uint8_t buf[16] = &v67;
      sub_2446C1098(v77, *(void *)(*a4 + 8), *(void *)(*a4 + 16));
      sub_244D7E520((uint64_t)buf);
      unsigned __int8 v30 = (uint64_t (***)(void))(*(uint64_t (**)(uint64_t, void, void))(*(void *)v57 + 224))(v57, *(unsigned __int8 *)(v19 + 24), *(unsigned __int16 *)(v19 + 44));
      int v13 = &off_244E79000;
      if (!v30)
      {
        *(_DWORD *)a6 = 172;
        *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
        *(_DWORD *)(a6 + 16) = 258;
        goto LABEL_35;
      }
      unsigned int v31 = v30;
      LOWORD(v74) = (**v30)(v30);
      sub_244D83BE0((uint64_t)v89, v75, v67, v25, (uint64_t)buf);
      long long v91 = 0uLL;
      *(void *)&long long v92 = 0;
      *(_OWORD *)&uint8_t buf[8] = 0u;
      *(_OWORD *)uint64_t v77 = 0u;
      v81 = 0;
      *(void *)v82 = v31;
      sub_244D84E94((uint64_t)buf, (uint64_t)v89, (uint64_t)a3, (uint64_t)&v67, a4, (uint64_t)&v91);
      sub_244D83880((uint64_t)buf);
      (*v31)[7](v31);
      *(_OWORD *)a6 = v91;
      *(void *)(a6 + 16) = v92;
      if (*(_DWORD *)a6) {
        goto LABEL_35;
      }
      unint64_t v58 = *(unsigned __int16 *)(v19 + 44) | 0xFFFFFFFFFFFF0000;
      int v32 = *(unsigned __int8 *)(v19 + 24);
      a1 = v59;
      break;
    default:
      *(_DWORD *)a6 = 172;
      *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
      int v17 = 348;
      goto LABEL_34;
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  sub_244DB66F4(&v67, (void **)a4, (void *)a6);
  if (*(_DWORD *)a6) {
    goto LABEL_35;
  }
  if (v32)
  {
    uint64_t v45 = *(void *)(a1 + 32);
    if (v45 && (uint64_t v46 = sub_244D9EA90(v45, v32)) != 0) {
      int v47 = *(unsigned __int16 *)(v46 + 16);
    }
    else {
      int v47 = 0;
    }
  }
  else
  {
    int v47 = 0;
  }
  int v60 = sub_244DD7C4C(*((unsigned int *)a3 + 1));
  int v48 = sub_244DD7C84(*((unsigned int *)a3 + 1), *a3);
  __str[0] = 0;
  if (a3[12])
  {
    char v49 = sub_2446F12CC(a3 + 12);
    snprintf(__str, 0x14uLL, " (Ack:%u)", *(_DWORD *)v49);
  }
  long long v93 = 0u;
  memset(v94, 0, sizeof(v94));
  long long v91 = 0u;
  long long v92 = 0u;
  sub_244CDC098((uint64_t)&v63, (char *)&v91, 0x4CuLL);
  snprintf(v90, 8uLL, "%04X:%02X", *((unsigned __int16 *)a3 + 3), *a3);
  uint64_t v50 = 105;
  if ((a3[8] & 1) == 0) {
    uint64_t v50 = 114;
  }
  snprintf(v62, 7uLL, "%u%c", *((unsigned __int16 *)a3 + 1), v50);
  snprintf((char *)v89, 0x37uLL, "from %08X%08X to %u:%08X%08X [%04X]", HIDWORD(v25), v25, v32, HIDWORD(v58), v58, v47);
  uint64_t v51 = sub_244CC8484(5u, "ExchangeManager");
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    int v52 = ((uint64_t (*)(uint64_t))loc_244D87D38)(*a2);
    unsigned int v53 = v67;
    int v54 = sub_244D87DEC(a2);
    uint64_t v55 = *(void *)(*a4 + 16);
    *(_DWORD *)std::string buf = 136317698;
    *(void *)&uint8_t buf[4] = v62;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v52;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v53;
    *(_WORD *)uint64_t v77 = 2080;
    *(void *)&v77[2] = __str;
    *(_WORD *)&v77[10] = 2080;
    *(void *)&v77[12] = v54;
    __int16 v78 = 2080;
    v79 = (char *)v89;
    __int16 v80 = 2080;
    v81 = &v91;
    *(_WORD *)v82 = 2080;
    *(void *)&v82[2] = v90;
    __int16 v83 = 2080;
    v84 = v60;
    __int16 v85 = 2080;
    v86 = v48;
    __int16 v87 = 1024;
    int v88 = v55;
    _os_log_impl(&dword_2446BD000, v51, OS_LOG_TYPE_DEFAULT, "<<< [E:%s S:%u M:%u%s] (%s) Msg TX %s [%s] --- Type %s (%s:%s) (B:%u)", buf, 0x64u);
  }
  if (sub_244CC4E58(2u))
  {
    ((void (*)(uint64_t))loc_244D87D38)(*a2);
    sub_244D87DEC(a2);
    sub_244CC4DE0(5u, 2);
  }
  int v56 = (void *)*a4;
  *a4 = 0;
  if (*v61) {
    sub_244CC8A0C(*v61);
  }
  std::string *v61 = v56;
  *(_DWORD *)a6 = 0;
  *(void *)(a6 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a6 + 16) = 414;
LABEL_68:
  int v13 = &off_244E79000;
LABEL_35:
  unsigned int v39 = sub_244D7DFA0();
  if (os_signpost_enabled(v39))
  {
    *(_DWORD *)std::string buf = *((void *)v13 + 426);
    *(void *)&uint8_t buf[4] = "SessionManager";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "PrepareMessage";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v39, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244D89520(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 176) != 1)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
    int v15 = 420;
    goto LABEL_55;
  }
  if (!*a3)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
    int v15 = 421;
    goto LABEL_55;
  }
  long long v38 = xmmword_268EC34EC;
  char v39 = 0;
  __int16 v40 = 5540;
  int v41 = 0;
  uint64_t v42 = 0;
  int v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  if (v8 == 1)
  {
    uint64_t v16 = sub_244D87A80(*a2);
    *(void *)(v16 + 96) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    int v14 = (long long *)(v16 + 64);
  }
  else
  {
    if (v8 != 2)
    {
      if (v8 == 4)
      {
        uint64_t v9 = sub_244D87B7C(*a2);
        uint64_t v10 = sub_244D9EA90(*(void *)(a1 + 32), *(unsigned __int8 *)(v9 + 24));
        if (v10)
        {
          unint64_t v11 = *(void *)(v10 + 8);
          unsigned int v12 = *(unsigned __int16 *)(v9 + 44);
          *(void *)int v43 = (v11 >> 8) | 0xFD00000000000000;
          *(void *)&long long v38 = sub_244CBF060(5, 64, (uint64_t *)v43, v12 | (v11 << 24));
          *((void *)&v38 + 1) = v13;
          char v39 = 1;
          __int16 v40 = 5540;
          int v41 = 0;
          int v14 = &v38;
          uint64_t v42 = 0;
          goto LABEL_12;
        }
        *(_DWORD *)a4 = 47;
        *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
        int v15 = 432;
      }
      else
      {
        *(_DWORD *)a4 = 172;
        *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
        int v15 = 455;
      }
LABEL_55:
      *(_DWORD *)(a4 + 16) = v15;
      return;
    }
    uint64_t v17 = sub_244D879D8(*a2);
    *(void *)(v17 + 128) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    int v14 = (long long *)(v17 + 96);
  }
LABEL_12:
  sub_244CC8F2C(*a3);
  int v18 = (uint64_t *)*a3;
  uint64_t v37 = v18;
  if (!v18)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
    int v19 = 459;
    goto LABEL_17;
  }
  if (*v18)
  {
    *(_DWORD *)a4 = 24;
    *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
    int v19 = 460;
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 16))() != 4)
  {
LABEL_65:
    uint64_t v30 = *(void *)(a1 + 248);
    if (v30)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244D8ED3C(v30);
      if (*(_DWORD *)a4)
      {
        long long v45 = 0u;
        memset(v46, 0, sizeof(v46));
        *(_OWORD *)int v43 = 0u;
        long long v44 = 0u;
        sub_244CDC098((uint64_t)v14, (char *)v43, 0x4CuLL);
        unsigned int v31 = sub_244CC8484(1u, "Inet");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)std::string buf = *(_OWORD *)a4;
          *(void *)&uint8_t buf[16] = *(void *)(a4 + 16);
          int v32 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v43;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v32;
          _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_ERROR, "SendMessage() to %s failed: %s", buf, 0x16u);
        }
        if (sub_244CC4E58(1u))
        {
          *(_OWORD *)std::string buf = *(_OWORD *)a4;
          *(void *)&uint8_t buf[16] = *(void *)(a4 + 16);
          sub_244CB7B34((const char **)buf, 1);
          sub_244CC4DE0(1u, 1);
        }
      }
      goto LABEL_18;
    }
    uint64_t v33 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v43 = 0;
      _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_ERROR, "The transport manager is not initialized. Unable to send the message", v43, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(1u, 1);
    }
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
    int v19 = 530;
LABEL_17:
    *(_DWORD *)(a4 + 16) = v19;
    goto LABEL_18;
  }
  sub_244CBF650((uint64_t)v43);
  int v36 = 0;
  if (!sub_244CBF6B4((uint64_t)v43))
  {
LABEL_60:
    uint64_t v29 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_ERROR, "No valid Interface found.. Sending to the default one.. ", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(1u, 1);
    }
    sub_244CBF65C(v43);
    goto LABEL_65;
  }
  char v20 = 0;
  do
  {
    sub_244CBF774((uint64_t *)v43, v47, 0x10uLL, (uint64_t)buf);
    if (!sub_244CBF950((uint64_t)v43)) {
      continue;
    }
    if (!sub_244CBF844((uint64_t)v43)) {
      continue;
    }
    sub_244CBF720((if_nameindex *)v43, buf);
    int v36 = *(_DWORD *)buf;
    sub_244CBFE98((uint64_t)&v36, &v35, (uint64_t)buf);
    if (*(_DWORD *)buf) {
      continue;
    }
    uint64_t v21 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v47;
      _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_INFO, "Interface %s has a link local address", buf, 0xCu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(1u, 3);
    }
    sub_244CC9234(&v37, &v34);
    if (!v34)
    {
      char v22 = 0;
      *(_DWORD *)a4 = 47;
      *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
      int v23 = 483;
      goto LABEL_34;
    }
    if (!*(void *)v34)
    {
      int v41 = v36;
      uint64_t v24 = *(void *)(a1 + 248);
      if (!v24) {
        goto LABEL_53;
      }
      sub_244D8ED3C(v24);
      int v25 = *(_DWORD *)buf;
      char v26 = sub_244CC8484(1u, "Inet");
      unint64_t v27 = v26;
      if (v25)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v47;
          _os_log_impl(&dword_2446BD000, v27, OS_LOG_TYPE_ERROR, "Failed to send Multicast message on interface %s", buf, 0xCu);
        }
        char v22 = 1;
        if (!sub_244CC4E58(1u)) {
          goto LABEL_52;
        }
        uint64_t v28 = 1;
      }
      else
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v47;
          _os_log_impl(&dword_2446BD000, v27, OS_LOG_TYPE_INFO, "Successfully send Multicast message on interface %s", buf, 0xCu);
        }
        if (!sub_244CC4E58(3u))
        {
LABEL_53:
          int v14 = &v38;
          char v22 = 1;
          goto LABEL_35;
        }
        char v22 = 1;
        uint64_t v28 = 3;
      }
      sub_244CC4DE0(1u, v28);
LABEL_52:
      int v14 = &v38;
      goto LABEL_35;
    }
    char v22 = 0;
    *(_DWORD *)a4 = 24;
    *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
    int v23 = 484;
LABEL_34:
    *(_DWORD *)(a4 + 16) = v23;
LABEL_35:
    if (v34) {
      sub_244CC8A0C(v34);
    }
    if ((v22 & 1) == 0) {
      goto LABEL_59;
    }
    char v20 = 1;
  }
  while ((sub_244CBF6B4((uint64_t)v43) & 1) != 0);
  if ((v20 & 1) == 0) {
    goto LABEL_60;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a4 + 16) = 509;
LABEL_59:
  sub_244CBF65C(v43);
LABEL_18:
  if (v37) {
    sub_244CC8A0C(v37);
  }
}

uint64_t sub_244D89CC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v4 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unint64_t v5 = *a2;
    unint64_t v6 = HIDWORD(*a2);
    int v7 = *((unsigned __int8 *)a2 + 8);
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v11) = 1024;
    *(_DWORD *)((char *)&v11 + 2) = v5;
    HIWORD(v11) = 1024;
    int v12 = v7;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "Expiring all sessions for node <%08X%08X, %d>!!", buf, 0x14u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  *(void *)std::string buf = a2;
  unint64_t v11 = &v9;
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244D8DFDC);
}

uint64_t sub_244D89DEC(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  char v4 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "Expiring all sessions for fabric 0x%x!!", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  char v7 = a2;
  *(void *)std::string buf = &v7;
  char v9 = &v6;
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244D8E050);
}

uint64_t sub_244D89EF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v6 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    unint64_t v7 = *a2;
    unint64_t v8 = HIDWORD(*a2);
    int v9 = *((unsigned __int8 *)a2 + 8);
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v8;
    __int16 v17 = 1024;
    int v18 = v7;
    __int16 v19 = 1024;
    int v20 = v9;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "Expiring all sessions to peer <%08X%08X, %d> that are on the same logical fabric!!", buf, 0x14u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  *(void *)std::string buf = &unk_26F954540;
  uint64_t result = sub_244D9EA90(*(void *)(a1 + 32), *((unsigned __int8 *)a2 + 8));
  uint64_t v14 = result;
  if (result)
  {
    memset(v13, 0, sizeof(v13));
    sub_244D9E2F8(result, (uint64_t)buf, (uint64_t)v13);
    if (LODWORD(v13[0])) {
      sub_244E2835C();
    }
    v15[0] = a1;
    v15[1] = v13;
    v15[2] = buf;
    void v15[3] = &v14;
    v15[4] = a2;
    v15[5] = &v12;
    uint64_t result = sub_244CC6478((void *)(a1 + 128), (uint64_t)v15, (unsigned int (*)(uint64_t))sub_244D8E084);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/transport/SessionManager.h";
    int v11 = 294;
  }
  else
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/transport/SessionManager.h";
    int v11 = 261;
  }
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_244D8A0C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v6 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "Expiring all sessions on the same logical fabric as fabric 0x%x!!", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  *(void *)std::string buf = &unk_26F954540;
  uint64_t result = sub_244D9EA90(*(void *)(a1 + 32), a2);
  uint64_t v11 = result;
  if (result)
  {
    memset(v10, 0, sizeof(v10));
    sub_244D9E2F8(result, (uint64_t)buf, (uint64_t)v10);
    if (LODWORD(v10[0])) {
      sub_244E283FC();
    }
    v12[0] = a1;
    v12[1] = v10;
    v12[2] = buf;
    void v12[3] = &v11;
    v12[4] = &v9;
    uint64_t result = sub_244CC6478((void *)(a1 + 128), (uint64_t)v12, (unsigned int (*)(uint64_t))sub_244D8E1A8);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/transport/SessionManager.h";
    int v8 = 345;
  }
  else
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/transport/SessionManager.h";
    int v8 = 313;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_244D8A268(uint64_t a1)
{
  char v2 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Expiring all PASE sessions", v4, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_244D8E2B8);
}

uint64_t sub_244D8A314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_244D8E304);
}

uint64_t sub_244D8A350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_244D8E3E8);
}

uint64_t sub_244D8A38C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(_DWORD *)(result + 176) == 1) {
    return sub_244D86510(result + 104, a2, *a3, a3[1], a4);
  }
  *a4 = 0;
  return result;
}

uint64_t sub_244D8A3B0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, __int16 a5@<W4>, char a6@<W5>, long long *a7@<X6>, int a8@<W7>, void *a9@<X8>)
{
  int v18 = (unint64_t *)(a1 + 104);
  sub_244D6A044((uint64_t)&v31);
  unint64_t v27 = (const char *)sub_244D6A0B8();
  LODWORD(v28) = v19;
  if ((_BYTE)v31) {
    int v20 = (const char **)sub_2446DC5A0(&v31);
  }
  else {
    int v20 = &v27;
  }
  uint64_t result = (uint64_t)sub_244D86348(v18, 1, a3, 0, a4, 0, 0, a5, (uint64_t)v29, a6, (uint64_t)v20);
  if (v29[0])
  {
    char v22 = (uint64_t *)sub_24479DC08(v29);
    uint64_t v23 = sub_244D879D8(*v22);
    long long v24 = *a7;
    *(_DWORD *)(v23 + 112) = *((_DWORD *)a7 + 4);
    *(_OWORD *)(v23 + 96) = v24;
    *(_DWORD *)(v23 + 116) = *((_DWORD *)a7 + 5);
    *(void *)(v23 + 120) = *((void *)a7 + 3);
    unint64_t v27 = "Test secret for key derivation.";
    uint64_t v28 = 32;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t result = sub_244D83884(v23 + 176, v25, (uint64_t)&v27, (uint64_t)&v31, 0, a8, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      *(_DWORD *)(v23 + 264) = 2;
      *(void *)(v23 + 272) = 0;
      *(void *)(v23 + 280) = 0;
      uint64_t v31 = v23 + 280;
      LODWORD(v32) = 0;
      sub_244CE389C(&v31, 0x20uLL);
      char v26 = (uint64_t *)sub_24479DC08(v29);
      uint64_t result = sub_244D88328(a2, v26);
      *(_DWORD *)a9 = 0;
      a9[1] = "src/transport/SessionManager.cpp";
      *((_DWORD *)a9 + 4) = 632;
    }
    if (v29[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v30 + 32))(v30);
    }
  }
  else
  {
    *(_DWORD *)a9 = 11;
    a9[1] = "src/transport/SessionManager.cpp";
    *((_DWORD *)a9 + 4) = 622;
  }
  return result;
}

uint64_t sub_244D8A598@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, long long *a8@<X7>, void *a9@<X8>, unsigned __int8 a10, uint64_t a11)
{
  int v18 = (unint64_t *)(a1 + 104);
  uint64_t v19 = *(void *)a11;
  int v20 = *(_DWORD *)(a11 + 8);
  sub_244D6A044((uint64_t)&v35);
  uint64_t v31 = (const char *)sub_244D6A0B8();
  LODWORD(v32) = v21;
  if ((_BYTE)v35) {
    char v22 = (const char **)sub_2446DC5A0(&v35);
  }
  else {
    char v22 = &v31;
  }
  uint64_t result = (uint64_t)sub_244D86348(v18, 2, a3, a5, a6, v19, v20, a4, (uint64_t)v33, a7, (uint64_t)v22);
  if (v33[0])
  {
    long long v24 = (uint64_t *)sub_24479DC08(v33);
    uint64_t v25 = sub_244D879D8(*v24);
    long long v26 = *a8;
    *(_DWORD *)(v25 + 112) = *((_DWORD *)a8 + 4);
    *(_OWORD *)(v25 + 96) = v26;
    *(_DWORD *)(v25 + 116) = *((_DWORD *)a8 + 5);
    *(void *)(v25 + 120) = *((void *)a8 + 3);
    uint64_t v31 = "Test secret for key derivation.";
    uint64_t v32 = 32;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t result = sub_244D83884(v25 + 176, v27, (uint64_t)&v31, (uint64_t)&v35, 0, a10, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      *(_DWORD *)(v25 + 264) = 2;
      *(void *)(v25 + 272) = 0;
      *(void *)(v25 + 280) = 0;
      uint64_t v35 = v25 + 280;
      LODWORD(v36) = 0;
      sub_244CE389C(&v35, 0x20uLL);
      uint64_t v28 = (uint64_t *)sub_24479DC08(v33);
      uint64_t result = sub_244D88328(a2, v28);
      *(_DWORD *)a9 = 0;
      a9[1] = "src/transport/SessionManager.cpp";
      *((_DWORD *)a9 + 4) = 653;
    }
    if (v33[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v34 + 32))(v34);
    }
  }
  else
  {
    *(_DWORD *)a9 = 11;
    a9[1] = "src/transport/SessionManager.cpp";
    *((_DWORD *)a9 + 4) = 643;
  }
  return result;
}

void sub_244D8A794(uint64_t a1, long long *a2, uint64_t **a3, const char **a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v12 = 0;
  char v13 = 0;
  char v14 = 0;
  char v15 = 0;
  int v16 = 0;
  char v17 = 0;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  sub_244DB5F6C((uint64_t)&v12, (uint64_t)a3, (uint64_t)&v10);
  if (v10)
  {
    int v8 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)std::string buf = v10;
      uint64_t v19 = v11;
      char v9 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Failed to decode packet header: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)std::string buf = v10;
      uint64_t v19 = v11;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(1u, 1);
    }
  }
  else if ((_WORD)v16 || BYTE2(v16))
  {
    if (BYTE2(v16) == 1) {
      sub_244D8A93C(a1, (uint64_t)&v12, (uint64_t)a2, a3);
    }
    else {
      sub_244D8B3D0(a1, (uint64_t)&v12, a2, (uint64_t *)a3, a4);
    }
  }
  else
  {
    sub_244D8BD10(a1, (uint64_t)&v12, (uint64_t)a2, a3, (uint64_t *)a4);
  }
}

void sub_244D8A93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "SessionManager";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Group Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v56[0] = 0;
  __int16 v57 = 0;
  char v60 = 0;
  char v59 = 16;
  int v58 = -1;
  int v52 = 0;
  v53[0] = 0;
  v53[16] = 0;
  v53[32] = 0;
  int v54 = 0;
  unsigned __int8 v55 = 0;
  uint64_t v51 = 0;
  uint64_t v9 = sub_244DAC8EC();
  if (!v9) {
    goto LABEL_17;
  }
  long long v69 = xmmword_2651A9444;
  int v70 = 0;
  int v10 = *(unsigned __int8 *)(a2 + 47);
  if ((v10 & 2) == 0) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(a2 + 46) != 1
    || ((~v10 & 5) != 0 || (*(unsigned char *)(a2 + 48) & 0x40) == 0) && ((~v10 & 6) != 0 || (*(unsigned char *)(a2 + 48) & 0x40) != 0))
  {
    char v15 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Invalid condition found in packet header", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  unsigned __int16 v47 = 0;
  uint64_t v50 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 216))(v9, *(unsigned __int16 *)(a2 + 44));
  if (!v11)
  {
    char v17 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Failed to retrieve Groups iterator. Discarding everything", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v12 = v11;
  unint64_t v13 = (*a4)[3];
  BOOL v14 = (*(unsigned __int16 *)(a2 + 44) | *(unsigned __int8 *)(a2 + 46)) != 0;
  if (v13 < 16 * (unint64_t)((*(unsigned __int16 *)(a2 + 44) | *(unsigned __int8 *)(a2 + 46)) != 0)
    || (uint64_t v18 = (*a4)[1],
        uint64_t v19 = 16 * ((*(unsigned __int16 *)(a2 + 44) | *(unsigned __int8 *)(a2 + 46)) != 0),
        unsigned __int16 v46 = 0,
        memset(buf, 0, sizeof(buf)),
        sub_244DB6A30(&v68, a2, (_OWORD *)(v18 + v13 - v19), 16 * v14, &v46, (uint64_t)buf),
        *(_DWORD *)buf)
    || v46 != v19)
  {
LABEL_12:
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(uint64_t, unsigned __int16 *))(*(void *)v12 + 24))(v12, &v47))
  {
LABEL_40:
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v23 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_ERROR, "Failed to decrypt group message. Discarding everything", buf, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  while (1)
  {
    *(_OWORD *)&uint8_t buf[8] = 0u;
    long long v62 = 0u;
    uint64_t v66 = 0;
    uint64_t v67 = v50;
    sub_244CC9234(a4, v39);
    if (v51) {
      sub_244CC8A0C(v51);
    }
    uint64_t v51 = *(uint64_t **)v39;
    if (!*(void *)v39)
    {
      long long v24 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)char v39 = 0;
        _os_log_impl(&dword_2446BD000, v24, OS_LOG_TYPE_ERROR, "Failed to clone Groupcast message buffer. Discarding.", v39, 2u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_48;
      }
LABEL_47:
      sub_244CC4DE0(1u, 1);
LABEL_48:
      sub_244D83880((uint64_t)buf);
      goto LABEL_12;
    }
    unsigned int v20 = *(unsigned __int8 *)(a2 + 48);
    BOOL v21 = sub_244D8D1C4(a2, (uint64_t)&v52, (uint64_t)v56, v20 >> 7, (uint64_t *)&v51, (uint64_t)&v68, &v47);
    BOOL v22 = v21;
    if ((v20 & 0x80) != 0 && !v21)
    {
      sub_244CC9234(a4, v39);
      if (v51) {
        sub_244CC8A0C(v51);
      }
      uint64_t v51 = *(uint64_t **)v39;
      if (!*(void *)v39)
      {
        uint64_t v28 = sub_244CC8484(1u, "Inet");
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)char v39 = 0;
          _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "Failed to clone Groupcast message buffer. Discarding.", v39, 2u);
        }
        if (!sub_244CC4E58(1u)) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
      BOOL v22 = sub_244D8D1C4(a2, (uint64_t)&v52, (uint64_t)v56, 0, (uint64_t *)&v51, (uint64_t)&v68, &v47);
    }
    sub_244D83880((uint64_t)buf);
    if (v22) {
      break;
    }
    if (!(*(unsigned int (**)(uint64_t, unsigned __int16 *))(*(void *)v12 + 24))(v12, &v47)) {
      goto LABEL_40;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
  if (*a4) {
    sub_244CC8A0C(*a4);
  }
  *a4 = v51;
  uint64_t v51 = 0;
  if (BYTE2(v54) == 1 && (~HIBYTE(v54) & 5) == 0 && (v55 & 0x40) != 0) {
    goto LABEL_17;
  }
  if ((v59 & 4) != 0)
  {
    uint64_t v29 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_ERROR, "Unexpected ACK requested for group message", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v45 = 0;
  if (!byte_268EC3160)
  {
    *((unsigned char *)&unk_268EC0EE0 + 8832) = 1;
    sub_244D8DF4C((char *)&unk_268EC0EE0);
  }
  int v25 = v48;
  long long v26 = (uint64_t *)sub_2446F7170(v53);
  sub_244D8452C((uint64_t)&unk_268EC0EE0, v25, *v26, (v55 >> 6) & 1, &v45, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    if (v49)
    {
      uint64_t v30 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_2446BD000, v30, OS_LOG_TYPE_ERROR, "Received Group Msg with key policy Cache and Sync, but MCSP is not implemented", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    sub_244D8D39C(v45, v52, (uint64_t)buf);
    long long v69 = *(_OWORD *)&buf[4];
    int v31 = *(_DWORD *)buf;
    int v70 = *(_DWORD *)&buf[20];
    if (!*(_DWORD *)buf)
    {
      sub_244D8D6B4(v45, v52);
      if (*(void *)(a1 + 232))
      {
        unsigned __int16 v34 = v47;
        unsigned __int8 v35 = v48;
        uint64_t v36 = *(void *)sub_2446F7170(v53);
        *(void *)&uint8_t buf[8] = &buf[8];
        *(void *)&uint8_t buf[16] = &buf[8];
        *((void *)&v62 + 1) = 0;
        int v63 = 0;
        *(void *)std::string buf = &unk_26F9570F8;
        unsigned __int16 v64 = v34;
        uint64_t v65 = v36;
        LOBYTE(v62) = v35;
        *(_DWORD *)char v39 = 0;
        __int16 v40 = v56;
        int v41 = &v52;
        uint64_t v42 = buf;
        uint64_t v43 = a3;
        sub_2446C1098(&v44, (*a4)[1], (*a4)[2]);
        sub_244D7E59C((uint64_t)v39);
        uint64_t v37 = *(void *)(a1 + 232);
        *(void *)char v39 = buf;
        (*(void (**)(uint8_t *))(*(void *)buf + 24))(buf);
        (*(void (**)(uint64_t, int *, unsigned char *, uint8_t *, uint64_t, uint64_t **))(*(void *)v37 + 16))(v37, &v52, v56, v39, 1, a4);
        (*(void (**)(void))(**(void **)v39 + 32))(*(void *)v39);
        sub_244D8DED8((uint64_t)buf);
      }
      else
      {
        long long v38 = sub_244CC8484(1u, "Inet");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_2446BD000, v38, OS_LOG_TYPE_ERROR, "Received GROUP message was not processed.", buf, 2u);
        }
        if (sub_244CC4E58(1u)) {
          goto LABEL_16;
        }
      }
      goto LABEL_17;
    }
    uint64_t v32 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)&uint8_t buf[4] = v69;
      *(_DWORD *)std::string buf = v31;
      *(_DWORD *)&buf[20] = v70;
      uint64_t v33 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_ERROR, "Message counter verify failed, err = %s", buf, 0xCu);
    }
    if (!sub_244CC4E58(1u)) {
      goto LABEL_17;
    }
    *(_OWORD *)&uint8_t buf[4] = v69;
    *(_DWORD *)std::string buf = v31;
    *(_DWORD *)&buf[20] = v70;
    sub_244CB7B34((const char **)buf, 1);
LABEL_16:
    sub_244CC4DE0(1u, 1);
    goto LABEL_17;
  }
  uint64_t v27 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_2446BD000, v27, OS_LOG_TYPE_ERROR, "Group Counter Tables full or invalid NodeId/FabricIndex after decryption of message, dropping everything", buf, 2u);
  }
  if (sub_244CC4E58(1u)) {
    goto LABEL_16;
  }
LABEL_17:
  if (v51) {
    sub_244CC8A0C(v51);
  }
  int v16 = sub_244D7DFA0();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "SessionManager";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Group Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244D8B3D0(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, const char **a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)std::string buf = 136315394;
    long long v62 = "SessionManager";
    __int16 v63 = 2080;
    unsigned __int16 v64 = "Secure Unicast Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*((unsigned char *)a3 + 16) != 3 || *a5)
  {
    sub_244D87230(a1 + 104, *(_WORD *)(a2 + 44), (uint64_t)v53);
    if (v53[0])
    {
      uint64_t v11 = (uint64_t *)sub_24479DC08(v53);
      uint64_t v12 = sub_244D879D8(*v11);
      long long v49 = *a3;
      int v13 = *((_DWORD *)a3 + 5);
      int v50 = *((_DWORD *)a3 + 4);
      int v51 = v13;
      uint64_t v52 = *((void *)a3 + 3);
      if (!sub_244CBEE00(&v49)) {
        int v51 = 0;
      }
      if (!sub_244D8DC7C(v12 + 96, (uint64_t)&v49))
      {
        *(_OWORD *)(v12 + 96) = v49;
        int v14 = v51;
        *(_DWORD *)(v12 + 112) = v50;
        *(_DWORD *)(v12 + 116) = v14;
        *(void *)(v12 + 120) = v52;
      }
      if (*((unsigned char *)a3 + 16) == 3)
      {
        char v15 = *(const char **)(v12 + 32);
        int v16 = *a5;
        if (v15)
        {
          if (v15 != v16)
          {
            char v17 = sub_244CC8484(1u, "Inet");
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              uint64_t v18 = *a5;
              *(_DWORD *)std::string buf = 134217984;
              long long v62 = v18;
              _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Data received over wrong connection %p. Dropping it!", buf, 0xCu);
            }
            if (!sub_244CC4E58(1u)) {
              goto LABEL_38;
            }
            goto LABEL_37;
          }
        }
        else
        {
          *(void *)(v12 + 32) = v16;
        }
      }
      v44[0] = 0;
      unsigned __int16 v45 = 0;
      char v48 = 0;
      char v47 = 16;
      int v46 = -1;
      if (*(char *)(a2 + 48) < 0)
      {
        uint64_t v23 = sub_244CC8484(1u, "Inet");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_ERROR, "Dropping secure unicast message with privacy flag set", buf, 2u);
        }
        if (!sub_244CC4E58(1u)) {
          goto LABEL_38;
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 0;
        BYTE4(v62) = 0;
        char v65 = 0;
        char v66 = 0;
        int v67 = 0;
        char v68 = 0;
        long long v55 = 0uLL;
        int v56 = 0;
        sub_244DB6248((uint64_t)buf, (void **)a4, &v55);
        if (v55) {
          goto LABEL_38;
        }
        if (*a4)
        {
          if (*(unsigned char *)(v12 + 56) == 3
            || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) & 1) != 0
            || *(unsigned char *)(v12 + 56) == 4)
          {
            if (*(unsigned char *)(v12 + 57) == 2) {
              unint64_t v22 = *(void *)(v12 + 72);
            }
            else {
              unint64_t v22 = 0;
            }
            sub_244D83BE0((uint64_t)v60, v68, *(unsigned int *)buf, v22, (uint64_t)&v55);
            sub_244D8501C(v12 + 176, (uint64_t)v60, (uint64_t)v44, (uint64_t)buf, a4, (uint64_t)&v55);
            if (v55)
            {
              long long v26 = sub_244CC8484(1u, "Inet");
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v55) = 0;
                _os_log_impl(&dword_2446BD000, v26, OS_LOG_TYPE_ERROR, "Secure transport received message, but failed to decode/authenticate it, discarding", (uint8_t *)&v55, 2u);
              }
              if (!sub_244CC4E58(1u)) {
                goto LABEL_38;
              }
              goto LABEL_37;
            }
            sub_244D8D118((_DWORD *)(v12 + 264), *(unsigned int *)buf, (uint64_t)&v55);
            unsigned int v27 = v55;
            if (!v55)
            {
              sub_244D8542C(v12);
              sub_244D8D170(v12 + 264, *(unsigned int *)buf);
              uint64_t v30 = 1;
LABEL_69:
              if (*(void *)(a1 + 232))
              {
                LODWORD(v55) = 1;
                *((void *)&v55 + 1) = v44;
                int v56 = buf;
                uint64_t v57 = v12;
                int v58 = a3;
                sub_2446C1098(v59, *(void *)(*a4 + 8), *(void *)(*a4 + 16));
                sub_244D7E59C((uint64_t)&v55);
                if (*(unsigned char *)(v12 + 57) == 2)
                {
                  int v33 = *(unsigned __int8 *)(v12 + 24);
                  char v34 = v33 == sub_244DA256C(*(void *)(a1 + 32));
                  sub_244D8D19C(v12, v34);
                }
                uint64_t v35 = *(void *)(a1 + 232);
                uint64_t v36 = sub_24479DC08(v53);
                (*(void (**)(uint64_t, uint8_t *, unsigned char *, unsigned char *, uint64_t, uint64_t *))(*(void *)v35 + 16))(v35, buf, v44, v36, v30, a4);
                goto LABEL_38;
              }
              uint64_t v43 = sub_244CC8484(1u, "Inet");
              if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v55) = 0;
                _os_log_impl(&dword_2446BD000, v43, OS_LOG_TYPE_ERROR, "Received SECURED message was not processed.", (uint8_t *)&v55, 2u);
              }
              if (!sub_244CC4E58(1u)) {
                goto LABEL_38;
              }
              goto LABEL_37;
            }
            if (v55 == 196)
            {
              uint64_t v28 = sub_244CC8484(1u, "Inet");
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                if (v47) {
                  int v29 = 114;
                }
                else {
                  int v29 = 105;
                }
                LODWORD(v55) = 67109632;
                DWORD1(v55) = *(_DWORD *)buf;
                WORD4(v55) = 1024;
                *(_DWORD *)((char *)&v55 + 10) = v45;
                HIWORD(v55) = 1024;
                LODWORD(v56) = v29;
                _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_INFO, "Received a duplicate message with MessageCounter:%u on exchange %u%c", (uint8_t *)&v55, 0x14u);
              }
              if (sub_244CC4E58(3u)) {
                sub_244CC4DE0(1u, 3);
              }
              sub_244D8542C(v12);
              if ((v47 & 4) == 0) {
                goto LABEL_38;
              }
              uint64_t v30 = 0;
              goto LABEL_69;
            }
            unsigned int v37 = DWORD1(v55);
            uint64_t v38 = *((void *)&v55 + 1);
            unsigned int v39 = v56;
            unsigned int v40 = HIDWORD(v56);
            int v41 = sub_244CC8484(1u, "Inet");
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              *(void *)&long long v55 = __PAIR64__(v37, v27);
              *((void *)&v55 + 1) = v38;
              int v56 = (uint8_t *)__PAIR64__(v40, v39);
              uint64_t v42 = sub_244CB7B34((const char **)&v55, 1);
              LODWORD(v55) = 136315138;
              *(void *)((char *)&v55 + 4) = v42;
              _os_log_impl(&dword_2446BD000, v41, OS_LOG_TYPE_ERROR, "Message counter verify failed, err = %s", (uint8_t *)&v55, 0xCu);
            }
            if (!sub_244CC4E58(1u)) {
              goto LABEL_38;
            }
            *(void *)&long long v55 = __PAIR64__(v37, v27);
            *((void *)&v55 + 1) = v38;
            int v56 = (uint8_t *)__PAIR64__(v40, v39);
            sub_244CB7B34((const char **)&v55, 1);
          }
          else
          {
            int v31 = sub_244CC8484(1u, "Inet");
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              uint64_t v32 = sub_244D856F4(v12, *(unsigned char *)(v12 + 56));
              LODWORD(v55) = 136315138;
              *(void *)((char *)&v55 + 4) = v32;
              _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_ERROR, "Secure transport received message on a session in an invalid state (state = '%s')", (uint8_t *)&v55, 0xCu);
            }
            if (!sub_244CC4E58(1u)) {
              goto LABEL_38;
            }
            sub_244D856F4(v12, *(unsigned char *)(v12 + 56));
          }
        }
        else
        {
          int v25 = sub_244CC8484(1u, "Inet");
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v55) = 0;
            _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_ERROR, "Secure transport received Unicast NULL packet, discarding", (uint8_t *)&v55, 2u);
          }
          if (!sub_244CC4E58(1u)) {
            goto LABEL_38;
          }
        }
      }
    }
    else
    {
      uint64_t v19 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = *(unsigned __int16 *)(a2 + 44);
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v62) = v20;
        _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "Data received on an unknown session (LSID=%d). Dropping it!", buf, 8u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_38;
      }
    }
LABEL_37:
    sub_244CC4DE0(1u, 1);
LABEL_38:
    if (v53[0]) {
      (*(void (**)(uint64_t))(*(void *)v54 + 32))(v54);
    }
    goto LABEL_40;
  }
  BOOL v21 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_ERROR, "Connection object is missing for received message.", buf, 2u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(1u, 1);
  }
LABEL_40:
  long long v24 = sub_244D7DFA0();
  if (os_signpost_enabled(v24))
  {
    *(_DWORD *)std::string buf = 136315394;
    long long v62 = "SessionManager";
    __int16 v63 = 2080;
    unsigned __int16 v64 = "Secure Unicast Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244D8BD10(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t *a5)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)std::string buf = 136315394;
    char v65 = "SessionManager";
    __int16 v66 = 2080;
    *(void *)int v67 = "Unauthenticated Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(unsigned char *)(a3 + 16) == 3 && !*a5)
  {
    uint64_t v12 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Connection object is missing for received message.", buf, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v13 = 1;
LABEL_18:
    sub_244CC4DE0(1u, v13);
    goto LABEL_19;
  }
  if (*(char *)(a2 + 48) < 0)
  {
    uint64_t v11 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Dropping unauthenticated message with privacy flag set", buf, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  *(_DWORD *)std::string buf = 0;
  BYTE4(v65) = 0;
  char v68 = 0;
  char v70 = 0;
  int v71 = 0;
  char v72 = 0;
  long long v60 = 0uLL;
  *(void *)&long long v61 = 0;
  sub_244DB6248((uint64_t)buf, a4, &v60);
  if (v60) {
    goto LABEL_19;
  }
  v58[0] = BYTE4(v65);
  if (BYTE4(v65))
  {
    uint64_t v59 = *(void *)&v67[2];
    v56[0] = v68;
    if (v68)
    {
      uint64_t v57 = v69;
      goto LABEL_30;
    }
    v54[0] = 0;
    uint64_t v23 = *(void *)sub_24479DC08(v58);
    *(void *)&long long v50 = sub_244D6A0B8();
    DWORD2(v50) = v24;
    sub_244D8CEAC((unint64_t *)(a1 + 48), v23, (uint64_t)&v50, (long long *)a3, (uint64_t)&v60);
    sub_244CD11CC((uint64_t)v54, (unsigned __int8 *)&v60);
    if ((_BYTE)v60) {
      (*(void (**)(void))(**((void **)&v60 + 1) + 32))(*((void *)&v60 + 1));
    }
    if (!v54[0])
    {
      unsigned int v37 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v60) = 0;
        _os_log_impl(&dword_2446BD000, v37, OS_LOG_TYPE_ERROR, "UnauthenticatedSession exhausted", (uint8_t *)&v60, 2u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_86;
      }
LABEL_84:
      uint64_t v19 = 1;
LABEL_85:
      sub_244CC4DE0(1u, v19);
LABEL_86:
      if (v54[0]) {
        (*(void (**)(uint64_t))(*(void *)v55 + 32))(v55);
      }
      goto LABEL_19;
    }
LABEL_37:
    int v25 = (uint64_t *)sub_24479DC08(v54);
    uint64_t v26 = sub_244D87A80(*v25);
    long long v50 = *(_OWORD *)a3;
    int v27 = *(_DWORD *)(a3 + 20);
    int v51 = *(_DWORD *)(a3 + 16);
    int v52 = v27;
    uint64_t v53 = *(void *)(a3 + 24);
    if (sub_244CBEE00(&v50))
    {
      int v28 = v52;
    }
    else
    {
      int v28 = 0;
      int v52 = 0;
    }
    *(_OWORD *)(v26 + 64) = v50;
    *(_DWORD *)(v26 + 80) = v51;
    *(_DWORD *)(v26 + 84) = v28;
    *(void *)(v26 + 88) = v53;
    if (*(unsigned char *)(a3 + 16) == 3)
    {
      uint64_t v29 = *(void *)(v26 + 32);
      uint64_t v30 = *a5;
      if (v29)
      {
        if (v29 != v30)
        {
          int v31 = sub_244CC8484(1u, "Inet");
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *a5;
            LODWORD(v60) = 134217984;
            *(void *)((char *)&v60 + 4) = v32;
            _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_ERROR, "Data received over wrong connection %p. Dropping it!", (uint8_t *)&v60, 0xCu);
          }
          if (!sub_244CC4E58(1u)) {
            goto LABEL_86;
          }
          goto LABEL_84;
        }
      }
      else
      {
        *(void *)(v26 + 32) = v30;
      }
    }
    *(void *)(v26 + 104) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    *(void *)(v26 + 96) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    v45[0] = 0;
    unsigned __int16 v46 = 0;
    char v49 = 0;
    char v48 = 16;
    int v47 = -1;
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    sub_244DB64B0((uint64_t)v45, a4, &v60);
    if (v60) {
      goto LABEL_86;
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    sub_244D8D040(v26 + 144, *(int *)buf, (uint64_t)&v42);
    if (v42 == 196)
    {
      uint64_t v38 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        if (v48) {
          int v39 = 114;
        }
        else {
          int v39 = 105;
        }
        LODWORD(v60) = 67109632;
        DWORD1(v60) = *(_DWORD *)buf;
        WORD4(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 10) = v46;
        HIWORD(v60) = 1024;
        LODWORD(v61) = v39;
        _os_log_impl(&dword_2446BD000, v38, OS_LOG_TYPE_INFO, "Received a duplicate message with MessageCounter:%u on exchange %u%c", (uint8_t *)&v60, 0x14u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(1u, 3);
      }
      uint64_t v40 = 0;
      LODWORD(v42) = 0;
      uint64_t v43 = "src/transport/SessionManager.cpp";
      LODWORD(v44) = 887;
    }
    else
    {
      sub_244D8D6B4(v26 + 144, *(int *)buf);
      uint64_t v40 = 1;
    }
    if (*(void *)(a1 + 232))
    {
      LODWORD(v60) = 2;
      *((void *)&v60 + 1) = v45;
      *(void *)&long long v61 = buf;
      *((void *)&v61 + 1) = v26;
      uint64_t v62 = a3;
      sub_2446C1098(v63, (*a4)[1], (*a4)[2]);
      sub_244D7E59C((uint64_t)&v60);
      (*(void (**)(void, uint8_t *, unsigned char *, uint64_t *, uint64_t, void **))(**(void **)(a1 + 232) + 16))(*(void *)(a1 + 232), buf, v45, v25, v40, a4);
      goto LABEL_86;
    }
    int v41 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v60) = 0;
      _os_log_impl(&dword_2446BD000, v41, OS_LOG_TYPE_ERROR, "Received UNSECURED message was not processed.", (uint8_t *)&v60, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  v56[0] = v68;
  if (v68)
  {
    uint64_t v57 = v69;
    v54[0] = 0;
    char v15 = (uint64_t *)sub_24479DC08(v56);
    sub_244D8CFA0(a1 + 48, *v15, a3, (uint64_t)&v60);
    sub_244CD11CC((uint64_t)v54, (unsigned __int8 *)&v60);
    if ((_BYTE)v60) {
      (*(void (**)(void))(**((void **)&v60 + 1) + 32))(*((void *)&v60 + 1));
    }
    if (!v54[0])
    {
      int v16 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *((_DWORD *)sub_24479DC08(v56) + 1);
        uint64_t v18 = *(void *)sub_24479DC08(v56);
        LODWORD(v60) = 67109376;
        DWORD1(v60) = v17;
        WORD4(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 10) = v18;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "Received unknown unsecure packet for initiator 0x%08X%08X", (uint8_t *)&v60, 0xEu);
      }
      if (!sub_244CC4E58(2u)) {
        goto LABEL_86;
      }
      sub_24479DC08(v56);
      sub_24479DC08(v56);
      uint64_t v19 = 2;
      goto LABEL_85;
    }
    goto LABEL_37;
  }
LABEL_30:
  int v20 = sub_244CC8484(1u, "Inet");
  if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_55;
  }
  if (v58[0])
  {
    unsigned int v21 = *((_DWORD *)sub_2446F7170(v58) + 1);
    if (v58[0])
    {
      unint64_t v22 = (uint64_t *)sub_2446F7170(v58);
      goto LABEL_49;
    }
  }
  else
  {
    unsigned int v21 = 0;
  }
  unint64_t v22 = &qword_244EC2A70;
LABEL_49:
  int v33 = *(_DWORD *)v22;
  if (!v56[0])
  {
    int v34 = 0;
    goto LABEL_53;
  }
  int v34 = *((_DWORD *)sub_2446F7170(v56) + 1);
  if (!v56[0])
  {
LABEL_53:
    uint64_t v35 = &qword_244EC2A70;
    goto LABEL_54;
  }
  uint64_t v35 = (uint64_t *)sub_2446F7170(v56);
LABEL_54:
  uint64_t v36 = *v35;
  *(void *)&long long v60 = __PAIR64__(v21, 67109888);
  WORD4(v60) = 1024;
  *(_DWORD *)((char *)&v60 + 10) = v33;
  HIWORD(v60) = 1024;
  LODWORD(v61) = v34;
  WORD2(v61) = 1024;
  *(_DWORD *)((char *)&v61 + 6) = v36;
  _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_DEFAULT, "Received malformed unsecure packet with source 0x%08X%08X destination 0x%08X%08X", (uint8_t *)&v60, 0x1Au);
LABEL_55:
  if (sub_244CC4E58(2u))
  {
    if (v58[0])
    {
      sub_2446F7170(v58);
      if (v58[0]) {
        sub_2446F7170(v58);
      }
    }
    if (v56[0])
    {
      sub_2446F7170(v56);
      if (v56[0]) {
        sub_2446F7170(v56);
      }
    }
    uint64_t v13 = 2;
    goto LABEL_18;
  }
LABEL_19:
  int v14 = sub_244D7DFA0();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)std::string buf = 136315394;
    char v65 = "SessionManager";
    __int16 v66 = 2080;
    *(void *)int v67 = "Unauthenticated Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244D8C708(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    sub_244CDC098(a2 + 8, __str, 0x4CuLL);
    uint64_t v3 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      unint64_t v7 = __str;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "Received TCP connection request from %s.", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    uint64_t v4 = *(void *)(a2 + 56);
    if (v4)
    {
      char v5 = *(void (**)(uint64_t))(v4 + 8);
      if (v5) {
        v5(a2);
      }
    }
  }
}

uint64_t sub_244D8C810(uint64_t result, uint64_t a2, long long *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a2 + 56);
    if (v5)
    {
      char v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 16);
      if (v6)
      {
        long long v8 = *a3;
        uint64_t v9 = *((void *)a3 + 2);
        return v6(a2, &v8);
      }
      else
      {
        sub_244CDC098(a2 + 8, __str, 0x4CuLL);
        unint64_t v7 = sub_244CC8484(1u, "Inet");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v11 = __str;
          _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "TCP Connection established with peer %s, but no registered handler. Disconnecting.", buf, 0xCu);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(1u, 2);
        }
        return sub_244D8C98C(v4, a2);
      }
    }
    else
    {
      return sub_244D8C98C(result, a2);
    }
  }
  return result;
}

uint64_t sub_244D8C98C(uint64_t result, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 248))
    {
      sub_244CDC098(a2 + 8, __str, 0x4CuLL);
      uint64_t v4 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = __str;
        _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Disconnecting TCP connection from peer at %s.", (uint8_t *)&buf, 0xCu);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(1u, 2);
      }
      sub_244D8EDB4(*(void *)(v2 + 248));
      int v5 = 0;
      char v6 = "src/transport/SessionManager.cpp";
      int v7 = 784;
      uint64_t v8 = a2;
      *(void *)&long long buf = &v8;
      *((void *)&buf + 1) = v2;
      uint64_t v11 = &v5;
      return sub_244CC6478((void *)(v2 + 128), (uint64_t)&buf, (unsigned int (*)(uint64_t))sub_244D8EB84);
    }
  }
  return result;
}

uint64_t sub_244D8CAEC(uint64_t result, uint64_t a2, long long *a3)
{
  if (a2)
  {
    long long v9 = *a3;
    uint64_t v10 = *((void *)a3 + 2);
    uint64_t v11 = a2;
    v12[0] = &v11;
    v12[1] = result;
    v12[2] = &v9;
    uint64_t result = sub_244CC6478((void *)(result + 128), (uint64_t)v12, (unsigned int (*)(uint64_t))sub_244D8EB84);
    uint64_t v5 = *(void *)(a2 + 56);
    if (v5)
    {
      char v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 24);
      if (v6)
      {
        long long v7 = *a3;
        uint64_t v8 = *((void *)a3 + 2);
        return v6(a2, &v7);
      }
    }
  }
  return result;
}

uint64_t sub_244D8CB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  v5[0] = &v4;
  v5[1] = a1;
  v5[2] = a3;
  return sub_244CC6478((void *)(a1 + 128), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244D8EB84);
}

uint64_t sub_244D8CBCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  sub_244CDC098(a2, __str, 0x4CuLL);
  uint64_t v5 = *(void *)(a1 + 248);
  char v6 = sub_244CC8484(1u, "Inet");
  long long v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v10 = __str;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Connecting over TCP with peer at %s.", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    return sub_244D8ED64(*(void *)(a1 + 248));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v10 = __str;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "The transport manager is not initialized. Unable to connect to peer at %s.", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(1u, 1);
    }
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/transport/SessionManager.cpp";
    *(_DWORD *)(a3 + 16) = 759;
  }
  return result;
}

uint64_t sub_244D8CD84@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 248))
  {
    uint64_t v4 = result;
    sub_244CDC098(a2, __str, 0x4CuLL);
    uint64_t v5 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v7 = __str;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "Disconnecting TCP connection from peer at %s.", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    uint64_t result = sub_244D8ED8C(*(void *)(v4 + 248));
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a3 + 16) = 772;
  return result;
}

void *sub_244D8CEAC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  int v13 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  v14[0] = (uint64_t)&v13;
  v14[1] = (uint64_t)&v12;
  void v14[2] = (uint64_t)a4;
  v14[3] = (uint64_t)&v11;
  sub_244CC6478(a1 + 2, (uint64_t)v14, (unsigned int (*)(uint64_t))sub_244D8E484);
  uint64_t result = v11;
  if (v11)
  {
    *(unsigned char *)a5 = 1;
  }
  else
  {
    LODWORD(v12) = 1;
    v14[0] = a2;
    uint64_t result = sub_244D8E4D8(a1, (int *)&v12, v14, a4, a3, (uint64_t)a1);
    if (!result)
    {
      *(unsigned char *)a5 = 0;
      return result;
    }
    *(unsigned char *)a5 = 1;
  }
  *(void *)(a5 + 8) = result;
  return (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
}

uint64_t sub_244D8CFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v9 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = a2;
  v10[0] = &v9;
  v10[1] = &v8;
  void v10[2] = a3;
  void v10[3] = &v7;
  sub_244CC6478((void *)(a1 + 16), (uint64_t)v10, (unsigned int (*)(uint64_t))sub_244D8E484);
  uint64_t result = v7;
  if (v7)
  {
    *(void *)(a4 + 8) = v7;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  *(unsigned char *)a4 = v6;
  return result;
}

void sub_244D8D040(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)a1 == 2)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if (a2 == v5 || a2 - v5 < 0)
    {
      if (v5 == a2) {
        int v6 = 2;
      }
      else {
        int v6 = (v5 - a2) < 0x21;
      }
    }
    else
    {
      int v6 = 3;
    }
    sub_244D8D604(a1, v6, a2, a3);
  }
  else
  {
    if (*(_DWORD *)a1) {
      sub_244E2849C();
    }
    *(_DWORD *)a1 = 2;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    uint64_t v7 = a1 + 16;
    int v8 = 0;
    sub_244CE389C(&v7, 0x20uLL);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 165;
  }
}

_DWORD *sub_244D8D118@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*result == 2)
  {
    unsigned int v4 = result[2];
    BOOL v5 = v4 >= a2;
    if (v4 == a2) {
      int v6 = 2;
    }
    else {
      int v6 = v4 - a2 < 0x21;
    }
    if (v5) {
      int v7 = v6;
    }
    else {
      int v7 = 3;
    }
    return (_DWORD *)sub_244D8DCE0((uint64_t)result, v7, a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 142;
  }
  return result;
}

void sub_244D8D170(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  BOOL v4 = v3 >= a2;
  if (v3 == a2) {
    int v5 = 2;
  }
  else {
    int v5 = v3 - a2 < 0x21;
  }
  if (v4) {
    int v6 = v5;
  }
  else {
    int v6 = 3;
  }
  sub_244D8D6EC(a1, v6, a2);
}

uint64_t sub_244D8D19C(uint64_t result, char a2)
{
  if (*(unsigned char *)(result + 57) != 2) {
    sub_244E2853C();
  }
  *(unsigned char *)(result + 58) = a2;
  return result;
}

BOOL sub_244D8D1C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, unsigned __int16 *a7)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v11 = *((void *)a7 + 1);
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  uint64_t v28 = v11;
  if (a4)
  {
    uint64_t v12 = 12;
    if ((*(unsigned char *)(a1 + 47) & 4) == 0) {
      uint64_t v12 = 4;
    }
    uint64_t v13 = v12 + 8;
    uint64_t v14 = v12 | *(unsigned char *)(a1 + 47) & 2;
    uint64_t v15 = (*(unsigned char *)(a1 + 47) & 1) != 0 ? v13 : v14;
    sub_244D843B8((uint64_t)v24, *(void *)(*a5 + 8) + 4, v15, *(void *)(*a5 + 8) + 4, a1, a6, (uint64_t)v22);
    if (*(_DWORD *)v22) {
      goto LABEL_15;
    }
  }
  sub_244DB6248(a2, (void **)a5, v22);
  if (*(_DWORD *)v22)
  {
    int v16 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Failed to decode Groupcast packet header. Discarding.", v22, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(1u, 1);
    }
    goto LABEL_15;
  }
  if (*(unsigned __int16 *)sub_2446D1880((unsigned char *)(a2 + 40)) != *a7)
  {
LABEL_15:
    BOOL v20 = 0;
    goto LABEL_16;
  }
  char v17 = *(unsigned char *)(a2 + 48);
  unsigned int v18 = *(_DWORD *)a2;
  uint64_t v19 = (unint64_t *)sub_2446F7170((unsigned char *)(a2 + 8));
  sub_244D83BE0((uint64_t)v23, v17, v18, *v19, (uint64_t)v22);
  sub_244D8501C((uint64_t)v24, (uint64_t)v23, a3, a2, a5, (uint64_t)v22);
  BOOL v20 = *(_DWORD *)v22 == 0;
LABEL_16:
  sub_244D83880((uint64_t)v24);
  return v20;
}

void sub_244D8D39C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)a1 == 2)
  {
    sub_244D8DD90((_DWORD *)a1, a2, a3);
  }
  else
  {
    if (*(_DWORD *)a1) {
      sub_244E285DC();
    }
    *(_DWORD *)a1 = 2;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    uint64_t v4 = a1 + 16;
    int v5 = 0;
    sub_244CE389C(&v4, 0x20uLL);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 118;
  }
}

uint64_t sub_244D8D444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  v11[0] = a2;
  v11[1] = a3;
  char v10 = a5;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v12[0] = v11;
  v12[1] = a4;
  v12[2] = &v9;
  void v12[3] = &v8;
  v12[4] = &v10;
  sub_244CC6478((void *)(a1 + 128), (uint64_t)v12, (unsigned int (*)(uint64_t))sub_244D8EA70);
  if (v10 == 2)
  {
    uint64_t result = v9;
    if (v9) {
      goto LABEL_7;
    }
  }
  else if (v10 != 1)
  {
    uint64_t result = v9;
    if (!v9) {
      goto LABEL_8;
    }
LABEL_7:
    *(unsigned char *)a6 = 1;
    *(void *)(a6 + 8) = result;
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  uint64_t result = v8;
  if (v8) {
    goto LABEL_7;
  }
LABEL_8:
  *(unsigned char *)a6 = 0;
  return result;
}

uint64_t sub_244D8D518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  v8[0] = &v6;
  v8[1] = &v7;
  uint64_t result = sub_244CC6478((void *)(a1 + 128), (uint64_t)v8, (unsigned int (*)(uint64_t))sub_244D8ECA8);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a4 + 16) = 1381;
  return result;
}

void sub_244D8D584(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_244D8D58C@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v3;
  *a2 = v3;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/transport/MessageCounter.h";
  *(_DWORD *)(a3 + 16) = 71;
  return result;
}

uint64_t sub_244D8D5B8(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t *sub_244D8D5D4(uint64_t *result)
{
  if (!byte_268EC3510)
  {
    if (*result) {
      sub_244E28720(result);
    }
  }
  return result;
}

uint64_t sub_244D8D604@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 1)
  {
    unsigned int v5 = *(_DWORD *)(result + 8) + ~a3;
    if (v5 >= 0x20) {
      abort();
    }
    if ((*(void *)(result + 16) >> v5))
    {
      *(_DWORD *)a4 = 196;
      *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      int v4 = 308;
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      int v4 = 310;
    }
  }
  else if (a2 == 2)
  {
    *(_DWORD *)a4 = 196;
    *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    int v4 = 303;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    int v4 = 316;
  }
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

void sub_244D8D6B4(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (a2 == v3 || a2 - v3 < 0)
  {
    if (v3 == a2) {
      int v4 = 2;
    }
    else {
      int v4 = (v3 - a2) < 0x21;
    }
  }
  else
  {
    int v4 = 3;
  }
  sub_244D8D6EC(a1, v4, a2);
}

void sub_244D8D6EC(uint64_t a1, int a2, int a3)
{
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      unsigned int v3 = *(_DWORD *)(a1 + 8) + ~a3;
      if (v3 < 0x20)
      {
        *(void *)(a1 + 16) |= 1 << v3;
        return;
      }
LABEL_10:
      abort();
    }
    int v4 = *(_DWORD *)(a1 + 8);
    int v5 = a3 - v4;
    *(_DWORD *)(a1 + 8) = a3;
    if ((a3 - v4) < 0x21)
    {
      uint64_t v6 = (void *)(a1 + 16);
      sub_244D8D7B0(a1 + 16, (a3 - v4));
      if ((v5 - 1) >= 0x20) {
        goto LABEL_10;
      }
      *v6 |= 1 << (v5 - 1);
    }
    else
    {
      uint64_t v7 = a1 + 16;
      int v8 = 0;
      sub_244CE389C(&v7, 0x20uLL);
    }
  }
}

uint64_t sub_244D8D7B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x20) {
    unint64_t v3 = 32;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v3)
  {
    uint64_t v10 = a1;
    int v11 = 0;
    uint64_t v8 = a1;
    int v9 = 32 - v3;
    uint64_t v6 = a1;
    int v7 = 32;
    sub_244D8D9CC((uint64_t)&v10, (uint64_t)&v8, (uint64_t)&v6, (uint64_t)v5);
    uint64_t v16 = a1;
    int v17 = 0;
    sub_244CE389C(&v16, v3);
  }
  else
  {
    uint64_t v16 = a1;
    int v17 = 0;
    uint64_t v14 = a1;
    int v15 = 32;
    uint64_t v12 = a1;
    int v13 = 32;
    sub_244D8D864((unsigned int *)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)v5);
  }
  return a1;
}

unsigned int *sub_244D8D864@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *(unsigned int *)(a2 + 8);
  unint64_t v7 = v6 + 8 * (*(void *)a2 - *(void *)result);
  uint64_t v8 = result[2];
  uint64_t v9 = v7 - v8;
  if ((uint64_t)(v7 - v8) >= 1)
  {
    if (v6)
    {
      if (v9 >= v6) {
        uint64_t v11 = *(unsigned int *)(a2 + 8);
      }
      else {
        uint64_t v11 = v7 - v8;
      }
      v9 -= v11;
      unint64_t v12 = (-1 << (v6 - v11)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      unint64_t v13 = **(void **)a2 & v12;
      **(void **)a3 &= ~v12;
      **(void **)a3 |= v13;
      *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) - (_BYTE)v11) & 0x3F;
    }
    if (v9 >= 0) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = v9 + 63;
    }
    uint64_t v15 = v14 >> 6;
    *(void *)a3 -= 8 * (v14 >> 6);
    uint64_t v16 = (const void *)(*(void *)a2 - 8 * (v14 >> 6));
    *(void *)a2 = v16;
    if ((unint64_t)(v9 + 63) >= 0x7F) {
      uint64_t result = (unsigned int *)memmove(*(void **)a3, v16, 8 * v15);
    }
    if (v9 - (v15 << 6) >= 1)
    {
      uint64_t v17 = -1 << (((_BYTE)v15 << 6) - v9);
      unsigned int v18 = (void *)(*(void *)a2 - 8);
      *(void *)a2 = v18;
      uint64_t v19 = *v18 & v17;
      BOOL v20 = *(void **)a3;
      *(void *)a3 -= 8;
      *(v20 - 1) &= ~v17;
      **(void **)a3 |= v19;
      *(_DWORD *)(a3 + 8) = -(int)v9 & 0x3F;
    }
  }
  *(void *)a4 = *(void *)a3;
  *(_DWORD *)(a4 + 8) = *(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_244D8D9CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(result + 8);
  uint64_t v6 = v4 + 8 * (*(void *)a2 - *(void *)result) - v5;
  if (v6 >= 1)
  {
    if (v4)
    {
      if (v6 >= v4) {
        uint64_t v7 = *(unsigned int *)(a2 + 8);
      }
      else {
        uint64_t v7 = v4 + 8 * (*(void *)a2 - *(void *)result) - v5;
      }
      v6 -= v7;
      unint64_t v8 = (-1 << (v4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v4) & **(void **)a2;
      unint64_t v9 = *(unsigned int *)(a3 + 8);
      if (v7 >= v9) {
        uint64_t v10 = *(unsigned int *)(a3 + 8);
      }
      else {
        uint64_t v10 = v7;
      }
      if (v10)
      {
        **(void **)a3 &= ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9));
        unsigned int v11 = *(_DWORD *)(a3 + 8);
        unsigned int v12 = *(_DWORD *)(a2 + 8);
        unint64_t v13 = v8 >> (v12 - v11);
        BOOL v14 = v11 > v12;
        unint64_t v15 = v8 << (v11 - v12);
        if (!v14) {
          unint64_t v15 = v13;
        }
        **(void **)a3 |= v15;
        *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) - (_BYTE)v10) & 0x3F;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        uint64_t v16 = *(void **)a3;
        *(void *)a3 -= 8;
        *(_DWORD *)(a3 + 8) = -(int)v7 & 0x3F;
        *(v16 - 1) &= ~(-1 << -(char)v7);
        int v17 = *(_DWORD *)(a2 + 8) - v7 - v10;
        *(_DWORD *)(a2 + 8) = v17;
        **(void **)a3 |= v8 << (*(_DWORD *)(a3 + 8) - v17);
      }
    }
    if (v6 < 64)
    {
      uint64_t v24 = v6;
    }
    else
    {
      int v18 = *(_DWORD *)(a3 + 8);
      char v19 = 64 - v18;
      unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      do
      {
        unsigned int v21 = (unint64_t *)(*(void *)a2 - 8);
        *(void *)a2 = v21;
        unint64_t v22 = *v21;
        **(void **)a3 &= ~v20;
        **(void **)a3 |= v22 >> v19;
        uint64_t v23 = *(void **)a3;
        *(void *)a3 -= 8;
        *(v23 - 1) &= v20;
        **(void **)a3 |= v22 << *(_DWORD *)(a3 + 8);
        uint64_t v24 = v6 - 64;
        BOOL v14 = (unint64_t)v6 > 0x7F;
        v6 -= 64;
      }
      while (v14);
    }
    if (v24 >= 1)
    {
      long long v25 = (void *)(*(void *)a2 - 8);
      *(void *)a2 = v25;
      unint64_t v26 = *v25 & (-1 << -(char)v24);
      unint64_t v27 = *(unsigned int *)(a3 + 8);
      if (v24 >= v27) {
        uint64_t v28 = *(unsigned int *)(a3 + 8);
      }
      else {
        uint64_t v28 = v24;
      }
      **(void **)a3 &= ~((-1 << (v27 - v28)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v27));
      **(void **)a3 |= v26 >> -*(unsigned char *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) - (_BYTE)v28) & 0x3F;
      int v29 = v24 - v28;
      if (v24 - v28 >= 1)
      {
        uint64_t v30 = *(void **)a3;
        *(void *)a3 -= 8;
        int v31 = -v29;
        *(_DWORD *)(a3 + 8) = v31 & 0x3F;
        *(v30 - 1) &= ~(-1 << v31);
        **(void **)a3 |= v26 << (v24 + *(_DWORD *)(a3 + 8));
      }
    }
  }
  *(void *)a4 = *(void *)a3;
  *(_DWORD *)(a4 + 8) = *(_DWORD *)(a3 + 8);
  return result;
}

BOOL sub_244D8DC7C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
    return 0;
  }
  BOOL result = sub_244CBEB38((_DWORD *)a1, (_DWORD *)a2);
  if (!result) {
    return result;
  }
  return *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

uint64_t sub_244D8DCE0@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 1)
  {
    unsigned int v5 = *(_DWORD *)(result + 8) + ~a3;
    if (v5 >= 0x20) {
      abort();
    }
    if ((*(void *)(result + 16) >> v5))
    {
      *(_DWORD *)a4 = 196;
      *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      int v4 = 283;
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      int v4 = 285;
    }
  }
  else if (a2 == 3)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    int v4 = 278;
  }
  else
  {
    *(_DWORD *)a4 = 196;
    *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    int v4 = 289;
  }
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

_DWORD *sub_244D8DD90@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*result == 2)
  {
    int v4 = result[2];
    if (a2 == v4 || a2 - v4 < 0)
    {
      if (v4 == a2) {
        int v5 = 2;
      }
      else {
        int v5 = (v4 - a2) < 0x21;
      }
    }
    else
    {
      int v5 = 3;
    }
    return (_DWORD *)sub_244D8DCE0((uint64_t)result, v5, a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 104;
  }
  return result;
}

void sub_244D8DDF4(uint64_t a1)
{
  sub_244D8DED8(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244D8DE2C()
{
  return 3;
}

_DWORD *sub_244D8DE34(uint64_t a1)
{
  return sub_244D8DE84((_DWORD *)(a1 + 40));
}

_DWORD *sub_244D8DE3C(uint64_t a1)
{
  return sub_244D8DEB0((_DWORD *)(a1 + 40));
}

uint64_t sub_244D8DE44(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_244D8DE54()
{
  return 0;
}

uint64_t sub_244D8DE60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 21) = 0;
  *(unsigned char *)(a2 + 1) = 0x80;
  *(void *)(a2 + 8) = *(unsigned __int16 *)(result + 44) | 0xFFFFFFFFFFFF0000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)a2 = *(unsigned char *)(result + 24);
  return result;
}

_DWORD *sub_244D8DE84(_DWORD *a1)
{
  if (*a1 == -1) {
    sub_244E287C8();
  }
  ++*a1;
  return a1 - 10;
}

_DWORD *sub_244D8DEB0(_DWORD *result)
{
  if (!*result) {
    sub_244E25008();
  }
  --*result;
  return result;
}

uint64_t sub_244D8DED8(uint64_t a1)
{
  *(void *)a1 = &unk_26F9570F8;
  sub_244D85A28((void *)a1);
  if (*(_DWORD *)(a1 + 40)) {
    sub_244E2886C();
  }
  *(void *)a1 = &unk_26F956E98;
  sub_244D86300((void *)(a1 + 8));
  return a1;
}

void sub_244D8DF4C(char *a1)
{
  bzero(a1, 0x2280uLL);
  for (uint64_t i = 0; i != 16; ++i)
  {
    unint64_t v3 = &a1[552 * i];
    *(_WORD *)unint64_t v3 = 0;
    v3[2] = 0;
    int v4 = v3 + 8;
    int v5 = v3 + 488;
    do
    {
      *(void *)int v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    uint64_t v6 = v3 + 552;
    do
    {
      *(void *)int v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      v5 += 32;
    }
    while (v5 != v6);
  }
}

uint64_t sub_244D8DFDC(uint64_t a1, void *a2)
{
  if ((*(uint64_t (**)(void *))(*a2 + 48))(a2) == **(void **)a1
    && *(unsigned __int8 *)(*(void *)a1 + 8) == v4)
  {
    sub_244D8588C(a2);
  }
  return 0;
}

uint64_t sub_244D8E050(unsigned __int8 **a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 24) == **a1) {
    sub_244D8588C((void *)a2);
  }
  return 0;
}

uint64_t sub_244D8E084(uint64_t *a1, uint64_t a2)
{
  v13[10] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  v13[0] = &unk_26F954540;
  if (*(unsigned char *)(a2 + 57) == 2)
  {
    int v4 = *(unsigned __int8 *)(a2 + 24);
    if (v4)
    {
      uint64_t v6 = sub_244D9EA90(*(void *)(v2 + 32), v4);
      if (!v6) {
        sub_244E289AC();
      }
      uint64_t v7 = v6;
      sub_244D9E2F8(v6, (uint64_t)v13, (uint64_t)&v11);
      uint64_t v8 = a1[1];
      long long v9 = v11;
      *(void *)(v8 + 16) = v12;
      *(_OWORD *)uint64_t v8 = v9;
      if (*(_DWORD *)a1[1]) {
        sub_244E28A4C();
      }
      if (sub_244B9221C((uint64_t)v13, a1[2])
        && *(void *)(*(void *)a1[3] + 8) == *(void *)(v7 + 8)
        && *(void *)(a2 + 72) == *(void *)a1[4])
      {
        sub_244D8588C((void *)a2);
      }
    }
  }
  return 0;
}

uint64_t sub_244D8E1A8(uint64_t *a1, uint64_t a2)
{
  v13[10] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  v13[0] = &unk_26F954540;
  if (*(unsigned char *)(a2 + 57) == 2)
  {
    int v4 = *(unsigned __int8 *)(a2 + 24);
    if (v4)
    {
      uint64_t v6 = sub_244D9EA90(*(void *)(v2 + 32), v4);
      if (!v6) {
        sub_244E28AEC();
      }
      uint64_t v7 = v6;
      sub_244D9E2F8(v6, (uint64_t)v13, (uint64_t)&v11);
      uint64_t v8 = a1[1];
      long long v9 = v11;
      *(void *)(v8 + 16) = v12;
      *(_OWORD *)uint64_t v8 = v9;
      if (*(_DWORD *)a1[1]) {
        sub_244E28B8C();
      }
      if (sub_244B9221C((uint64_t)v13, a1[2]) && *(void *)(*(void *)a1[3] + 8) == *(void *)(v7 + 8)) {
        sub_244D8588C((void *)a2);
      }
    }
  }
  return 0;
}

uint64_t sub_244D8E2B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 57) == 1) {
    sub_244D8588C((void *)a2);
  }
  return 0;
}

uint64_t sub_244D8E2E4(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_244D8E304(void *a1, unsigned char *a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a2 + 40))(a2))
  {
    if ((*(uint64_t (**)(unsigned char *))(*(void *)a2 + 48))(a2) == *(void *)*a1
      && *(unsigned __int8 *)(*a1 + 8) == v4)
    {
      int v5 = (unsigned char *)a1[1];
      if (!*v5 || *sub_244D8E3C4(v5) == a2[57]) {
        sub_244D85724((uint64_t)a2);
      }
    }
  }
  return 0;
}

unsigned char *sub_244D8E3C4(unsigned char *a1)
{
  if (!*a1) {
    sub_244E21FC8();
  }
  return a1 + 1;
}

uint64_t sub_244D8E3E8(void *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) == *(void *)*a1
    && *(unsigned __int8 *)(*a1 + 8) == v4
    && *(unsigned char *)(a2 + 57) == 2)
  {
    int v5 = (long long *)a1[1];
    long long v6 = *v5;
    *(_DWORD *)(a2 + 112) = *((_DWORD *)v5 + 4);
    *(_OWORD *)(a2 + 96) = v6;
    *(_DWORD *)(a2 + 116) = *((_DWORD *)v5 + 5);
    *(void *)(a2 + 120) = *((void *)v5 + 3);
  }
  return 0;
}

uint64_t sub_244D8E484(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 56) != **(_DWORD **)a1
    || *(void *)(a2 + 48) != **(void **)(a1 + 8)
    || *(unsigned __int8 *)(a2 + 80) != *(unsigned __int8 *)(*(void *)(a1 + 16) + 16))
  {
    return 0;
  }
  **(void **)(a1 + 24) = a2;
  return 1;
}

void *sub_244D8E4D8(unint64_t *a1, int *a2, uint64_t *a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_244CC4D84(0xB0uLL);
  unint64_t v13 = v12;
  if (v12)
  {
    sub_244D8E5BC((uint64_t)v12, *a2, *a3, a4, a5);
    *unint64_t v13 = &unk_26F9571D0;
    v13[21] = a6;
    BOOL v14 = sub_244CC4D84(0x18uLL);
    if (v14)
    {
      void *v14 = v13;
      v14[1] = a1 + 2;
      void v14[2] = 0;
      void v14[2] = a1[4];
      *(void *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      unint64_t v15 = a1[1];
      unint64_t v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15) {
        a1[1] = v16;
      }
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

uint64_t sub_244D8E5BC(uint64_t a1, int a2, uint64_t a3, long long *a4, uint64_t a5)
{
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)a1 = &unk_26F9572C8;
  *(void *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = a2;
  long long v7 = *a4;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)a4 + 5);
  *(void *)(a1 + 88) = *((void *)a4 + 3);
  *(void *)(a1 + 96) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  *(void *)(a1 + 104) = 0;
  int v8 = *(_DWORD *)(a5 + 8);
  *(void *)(a1 + 112) = *(void *)a5;
  *(_DWORD *)(a1 + 120) = v8;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_244D8E69C(uint64_t a1)
{
  sub_244D8E8EC(a1);

  JUMPOUT(0x245695FA0);
}

int *sub_244D8E6D4(uint64_t a1)
{
  return sub_244D8E95C((int *)(a1 + 40));
}

uint64_t sub_244D8E6DC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56)) {
    return *(void *)(a1 + 48);
  }
  else {
    return 0;
  }
}

double sub_244D8E6F8@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_244D8E704(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 80);
  return v1 == 1 || v1 == 4;
}

BOOL sub_244D8E718(uint64_t a1)
{
  return *(unsigned char *)(a1 + 80) == 3;
}

uint64_t sub_244D8E728(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_244D8E730(void *a1)
{
  unint64_t v2 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0) - a1[13];
  unint64_t v3 = *(unsigned __int16 *)((*(uint64_t (**)(void *))(*a1 + 88))(a1) + 8);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  int v5 = (unsigned int *)(v4 + 4);
  if (v2 >= v3) {
    int v5 = (unsigned int *)v4;
  }
  return *v5;
}

uint64_t sub_244D8E7F4(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 80);
  switch(v1)
  {
    case 3:
      return 30000;
    case 2:
      return 15000;
    case 1:
      return sub_244D6A0C8(*(_DWORD *)(a1 + 116), *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 104), *(unsigned __int16 *)(a1 + 120));
  }
  return 0;
}

uint64_t sub_244D8E83C(uint64_t a1, unsigned int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 == 3) {
    return 30000;
  }
  if (v2 == 2) {
    return 15000;
  }
  if (v2 != 1) {
    return 0;
  }
  sub_244D6A044((uint64_t)v9);
  unint64_t v4 = sub_244D6A0B8();
  if (v9[0])
  {
    long long v7 = sub_2446DC5A0(v9);
    LODWORD(v4) = *(_DWORD *)v7;
    LODWORD(v6) = *((_DWORD *)v7 + 1);
    unsigned __int16 v5 = *((_WORD *)v7 + 4);
  }
  else
  {
    unint64_t v6 = HIDWORD(v4);
  }
  return sub_244D6A0C8(v6, v4, a2, v5);
}

void sub_244D8E8E0(uint64_t a1)
{
}

uint64_t sub_244D8E8EC(uint64_t a1)
{
  *(void *)a1 = &unk_26F9572C8;
  if (*(_DWORD *)(a1 + 40)) {
    sub_244E28C2C();
  }
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)a1 = &unk_26F956E98;
  sub_244D86300((void *)(a1 + 8));
  return a1;
}

int *sub_244D8E95C(int *result)
{
  if (!*result) {
    sub_244E25008();
  }
  int v1 = *result - 1;
  *double result = v1;
  if (!v1)
  {
    int v2 = *(uint64_t (**)(void))(*((void *)result - 5) + 128);
    return (int *)v2();
  }
  return result;
}

void sub_244D8E9C0(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    unint64_t v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E2867C();
    }
    unsigned __int16 v5 = v4;
    *unint64_t v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244D8EA70(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) == **(void **)a1
      && *(unsigned __int8 *)(*(void *)a1 + 8) == v4)
    {
      unsigned __int16 v5 = *(unsigned char **)(a1 + 8);
      if (!*v5 || *sub_244D8E3C4(v5) == *(unsigned char *)(a2 + 57))
      {
        if (**(unsigned __int8 **)(a1 + 32) - 1 <= 1)
        {
          uint64_t v6 = *(void *)(a1 + 24);
          if (!*(void *)v6 || *(void *)(*(void *)v6 + 128) < *(void *)(a2 + 128))
          {
            if (*(void *)(a2 + 32)) {
              *(void *)uint64_t v6 = a2;
            }
          }
        }
        uint64_t v7 = *(void *)(a1 + 16);
        if (!*(void *)v7 || *(void *)(*(void *)v7 + 128) < *(void *)(a2 + 128)) {
          *(void *)uint64_t v7 = a2;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_244D8EB84(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((*(unsigned int (**)(void *))(*a2 + 40))(a2) && a2[4] == **(void **)a1)
  {
    long long v11 = a2;
    (*(void (**)(void *))(*a2 + 24))(a2);
    uint64_t v5 = *(void *)(v4 + 240);
    if (v5)
    {
      uint64_t v6 = *(long long **)(a1 + 16);
      long long v7 = *v6;
      uint64_t v10 = *((void *)v6 + 2);
      long long v9 = v7;
      (*(void (**)(uint64_t, void **, long long *))(*(void *)v5 + 16))(v5, &v11, &v9);
    }
    a2[4] = 0;
    sub_244D8588C(a2);
    (*(void (**)(void *))(*v11 + 32))(v11);
  }
  return 0;
}

uint64_t sub_244D8ECA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (**(void (***)(void, uint64_t *))a1)(**(void **)(a1 + 8), &v4);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  return 0;
}

uint64_t sub_244D8ED3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t sub_244D8ED64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t sub_244D8ED8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t sub_244D8EDB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

uint64_t sub_244D8EDDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 16))
  {
    int v4 = 53;
    int v5 = 3;
  }
  else
  {
    *(void *)(result + 16) = a2;
    *(void *)(a2 + 8) = result;
    uint64_t v6 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long v7 = 0;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "TransportMgr initialized", v7, 2u);
    }
    double result = sub_244CC4E58(3u);
    if (result) {
      double result = sub_244CC4DE0(1u, 3);
    }
    int v5 = 0;
    int v4 = 59;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/transport/TransportMgrBase.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_244D8EEA4(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_244D8EEAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_244D8EED4(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/transport/TransportMgrBase.cpp", 78);
  if (**a3)
  {
    sub_244CDC098(a2, __str, 0x4CuLL);
    uint64_t v6 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v12 = __str;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "message from %s dropped due to lower layers not ensuring a single packet buffer.", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(1u, 1);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      long long v9 = *(uint64_t (**)(void))(*(void *)v8 + 16);
      return v9();
    }
    else
    {
      sub_244CDC098(a2, __str, 0x4CuLL);
      uint64_t v10 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v12 = __str;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "message from %s is dropped since no corresponding handler is set in TransportMgr.", buf, 0xCu);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        return sub_244CC4DE0(1u, 1);
      }
    }
  }
  return result;
}

uint64_t sub_244D8F0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 40))();
  }
  uint64_t result = *(void *)(*(void *)a2 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t sub_244D8F144(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    long long v6 = *a3;
    uint64_t v7 = *((void *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 24))(v3, a2, &v6);
  }
  else
  {
    uint64_t result = *(void *)(*(void *)a2 + 16);
    if (result)
    {
      int v5 = *(uint64_t (**)(void))(*(void *)result + 56);
      return v5();
    }
  }
  return result;
}

uint64_t sub_244D8F1EC(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    long long v6 = *a3;
    uint64_t v7 = *((void *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 32))(v3, a2, &v6);
  }
  else
  {
    uint64_t result = *(void *)(*(void *)a2 + 16);
    if (result)
    {
      int v5 = *(uint64_t (**)(void))(*(void *)result + 56);
      return v5();
    }
  }
  return result;
}

void sub_244D8F294()
{
}

uint64_t sub_244D8F2A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)result)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/access/AccessControl.cpp";
    int v5 = 200;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v5;
    return result;
  }
  uint64_t v8 = (void *)result;
  long long v9 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "AccessControl: initializing", v10, 2u);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0xDu, 2);
  }
  if (!a2)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/access/AccessControl.cpp";
    int v5 = 204;
    goto LABEL_3;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (!*(_DWORD *)a4)
  {
    *uint64_t v8 = a2;
    v8[1] = a3;
  }
  return result;
}

void *sub_244D8F3DC(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v2 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "AccessControl: finishing", v3, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)*v1 + 32))();
    *int v1 = 0;
  }
  return result;
}

uint64_t sub_244D8F4A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unsigned __int8 v19 = a3;
  uint64_t result = *a1;
  if (!result)
  {
    *(_DWORD *)a6 = 3;
    a6[1] = "src/access/AccessControl.cpp";
    int v12 = 226;
    goto LABEL_7;
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr))(*(void *)result + 72))(a6);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)*a1 + 40))(*a1, &v17);
    if (!*(_DWORD *)a6)
    {
      if (v18 + 1 > v17)
      {
        *(_DWORD *)a6 = 25;
        a6[1] = "src/access/AccessControl.cpp";
        int v12 = 233;
LABEL_7:
        *((_DWORD *)a6 + 4) = v12;
        return result;
      }
      uint64_t result = sub_244D8F6AC(result, a5);
      if ((result & 1) == 0)
      {
        *(_DWORD *)a6 = 47;
        a6[1] = "src/access/AccessControl.cpp";
        int v12 = 235;
        goto LABEL_7;
      }
      uint64_t v16 = 0;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unsigned __int8 *))(*(void *)*a1 + 96))(*a1, &v16, a5, &v19);
      if (!*(_DWORD *)a6)
      {
        uint64_t v13 = v16;
        if (a4) {
          *a4 = v16;
        }
        uint64_t v14 = (void *)a1[2];
        if (v14)
        {
          uint64_t v15 = v19;
          do
          {
            uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v14 + 16))(v14, a2, v15, v13, a5, 1);
            uint64_t v14 = (void *)v14[1];
          }
          while (v14);
        }
        *(_DWORD *)a6 = 0;
        a6[1] = "src/access/AccessControl.cpp";
        int v12 = 246;
        goto LABEL_7;
      }
    }
  }
  return result;
}

BOOL sub_244D8F6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  (*(void (**)(uint8_t *__return_ptr))(**(void **)a2 + 24))(buf);
  int v3 = *(_DWORD *)buf;
  long long v8 = *(_OWORD *)v11;
  int v9 = *(_DWORD *)&v11[16];
  if (*(_DWORD *)buf) {
    goto LABEL_6;
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)a2 + 32))(buf);
  int v3 = *(_DWORD *)buf;
  long long v8 = *(_OWORD *)v11;
  int v9 = *(_DWORD *)&v11[16];
  if (*(_DWORD *)buf) {
    goto LABEL_6;
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)a2 + 40))(buf);
  int v3 = *(_DWORD *)buf;
  long long v8 = *(_OWORD *)v11;
  int v9 = *(_DWORD *)&v11[16];
  if (*(_DWORD *)buf) {
    goto LABEL_6;
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)a2 + 72))(buf);
  int v3 = *(_DWORD *)buf;
  long long v8 = *(_OWORD *)v11;
  int v9 = *(_DWORD *)&v11[16];
  if (*(_DWORD *)buf
    || ((*(void (**)(uint8_t *__return_ptr))(**(void **)a2 + 112))(buf),
        int v3 = *(_DWORD *)buf,
        long long v8 = *(_OWORD *)v11,
        int v9 = *(_DWORD *)&v11[16],
        *(_DWORD *)buf))
  {
LABEL_6:
    int v4 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = v3;
      *(_OWORD *)long long v11 = v8;
      *(_DWORD *)&uint8_t v11[16] = v9;
      int v5 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315394;
      *(void *)long long v11 = "unexpected error";
      *(_WORD *)&unsigned __int8 v11[8] = 2080;
      *(void *)&v11[10] = v5;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "AccessControl: %s %s", buf, 0x16u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result)
    {
      *(_DWORD *)long long buf = v3;
      *(_OWORD *)long long v11 = v8;
      *(_DWORD *)&uint8_t v11[16] = v9;
      sub_244CB7B34((const char **)buf, 1);
LABEL_10:
      sub_244CC4DE0(0xDu, 1);
      return 0;
    }
  }
  else
  {
    uint64_t v7 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)long long v11 = "invalid fabric index";
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "AccessControl: %s", buf, 0xCu);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result) {
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_244D8FC0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = *(void **)(result + 16); i; uint64_t i = (void *)i[1])
    BOOL result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*i + 16))(i, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_244D8FC98@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unsigned __int8 v15 = a3;
  if (*(void *)result)
  {
    uint64_t v10 = (void *)result;
    BOOL result = sub_244D8F6AC(result, a5);
    if (result)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *))(*(void *)*v10 + 112))(*v10, a4, a5, &v15);
      if (*(_DWORD *)a6) {
        return result;
      }
      long long v11 = (void *)v10[2];
      if (v11)
      {
        uint64_t v12 = v15;
        do
        {
          BOOL result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 16))(v11, a2, v12, a4, a5, 3);
          long long v11 = (void *)v11[1];
        }
        while (v11);
      }
      int v13 = 0;
      int v14 = 256;
    }
    else
    {
      int v14 = 253;
      int v13 = 47;
    }
  }
  else
  {
    int v14 = 252;
    int v13 = 3;
  }
  *(_DWORD *)a6 = v13;
  a6[1] = "src/access/AccessControl.cpp";
  *((_DWORD *)a6 + 4) = v14;
  return result;
}

void *sub_244D8FDC4@<X0>(void *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v17[0] = a3;
  if (*result)
  {
    long long v8 = result;
    if (!byte_268EC3560)
    {
      byte_268EC3560 = 1;
      qword_268EC3558 = (uint64_t)&unk_26F9573C8;
    }
    uint64_t v16 = &qword_268EC3558;
    if (result[2] && (v17[1] = a3, uint64_t v9 = *result, *v8))
    {
      uint64_t v10 = &v16;
      (*(void (**)(void *__return_ptr))(*(void *)v9 + 104))(v15);
      if (LODWORD(v15[0])) {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    (*(void (**)(void, uint64_t, unsigned char *))(*(void *)*v8 + 120))(*v8, a4, v17);
    if (!*(_DWORD *)a5)
    {
      if (v10)
      {
        long long v11 = *v10;
        if (!byte_268EC3560)
        {
          byte_268EC3560 = 1;
          qword_268EC3558 = (uint64_t)&unk_26F9573C8;
        }
        if (v11 == &qword_268EC3558) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = v10;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v13 = (void *)v8[2];
      if (v13)
      {
        uint64_t v14 = v17[0];
        do
        {
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t))(*v13 + 16))(v13, a2, v14, a4, v12, 2);
          int v13 = (void *)v13[1];
        }
        while (v13);
      }
      *(_DWORD *)a5 = 0;
      a5[1] = "src/access/AccessControl.cpp";
      *((_DWORD *)a5 + 4) = 278;
    }
    return (void *)(*(uint64_t (**)(uint64_t *))(*v16 + 16))(v16);
  }
  else
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/access/AccessControl.cpp";
    *((_DWORD *)a5 + 4) = 261;
  }
  return result;
}

void *sub_244D8FFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL result = (void *)(a1 + 16);
  uint64_t v3 = v4;
  if (v4)
  {
    while (v3 != a2)
    {
      uint64_t v5 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3)
      {
        BOOL result = (void *)(v5 + 8);
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *BOOL result = a2;
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

void *sub_244D9001C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL result = (void *)(a1 + 16);
  uint64_t v3 = v4;
  if (v4 == a2)
  {
LABEL_5:
    *BOOL result = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    while (v3)
    {
      uint64_t v5 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == a2)
      {
        BOOL result = (void *)(v5 + 8);
        goto LABEL_5;
      }
    }
  }
  return result;
}

void *sub_244D90050@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  if (*a1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return (void *)sub_244D90084(a1, a2, a3, a4, a5);
  }
  else
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/access/AccessControl.cpp";
    *((_DWORD *)a5 + 4) = 338;
  }
  return a1;
}

uint64_t sub_244D90084@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr))(*(void *)*a1 + 136))(a5);
  if (!*(_DWORD *)a5) {
    return result;
  }
  if (*(_DWORD *)a5 != 45)
  {
    long long v11 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)a5 == 165) {
        uint64_t v12 = "denied";
      }
      else {
        uint64_t v12 = "error";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "AccessControl: %s (delegate)", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      return sub_244CC4DE0(0xDu, 2);
    }
    return result;
  }
  if (*(unsigned char *)(a2 + 1) == 32)
  {
    *(_DWORD *)a5 = 0;
    a5[1] = "src/access/AccessControl.cpp";
    *((_DWORD *)a5 + 4) = 398;
    return result;
  }
  if (!byte_268EC3570)
  {
    byte_268EC3570 = 1;
    qword_268EC3568 = (uint64_t)&unk_26F957480;
  }
  uint64_t v28 = &qword_268EC3568;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (!*a1)
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/access/AccessControl.h";
    *((_DWORD *)a5 + 4) = 626;
    return (*(uint64_t (**)(uint64_t *))(*v28 + 16))(v28);
  }
  (*(void (**)(void, uint64_t **, uint64_t))(*(void *)*a1 + 128))(*a1, &v28, a2);
  if (*(_DWORD *)a5) {
    return (*(uint64_t (**)(uint64_t *))(*v28 + 16))(v28);
  }
  if (!byte_268EC3560)
  {
    byte_268EC3560 = 1;
    qword_268EC3558 = (uint64_t)&unk_26F9573C8;
  }
  unint64_t v27 = &qword_268EC3558;
  while (1)
  {
    (*(void (**)(unsigned char *__return_ptr))(*v28 + 24))(buf);
    if (*(_DWORD *)buf) {
      break;
    }
    unsigned __int8 v26 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    (*(void (**)(uint64_t *, unsigned __int8 *))(*v27 + 24))(v27, &v26);
    if (*(_DWORD *)a5) {
      goto LABEL_87;
    }
    if (v26 != 64 && v26 != 128)
    {
      *(_DWORD *)a5 = 3;
      a5[1] = "src/access/AccessControl.cpp";
      int v22 = 410;
      goto LABEL_86;
    }
    if (v26 == *(unsigned __int8 *)(a2 + 1))
    {
      int v13 = 1;
      char v25 = 1;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      (*(void (**)(uint64_t *, char *))(*v27 + 40))(v27, &v25);
      if (!*(_DWORD *)a5)
      {
        int v13 = 8;
        switch(v25)
        {
          case 1:
            if (a4 == 1) {
              goto LABEL_39;
            }
            break;
          case 2:
            if ((a4 - 1) < 2u) {
              goto LABEL_39;
            }
            break;
          case 3:
          case 5:
          case 6:
          case 7:
            break;
          case 4:
            if (a4 == 1 || a4 == 4) {
              goto LABEL_39;
            }
            break;
          case 8:
            if (a4 <= 8)
            {
              int v14 = 1 << a4;
              int v15 = 274;
              goto LABEL_38;
            }
            break;
          default:
            if (v25 == 16 && a4 <= 0x10)
            {
              int v14 = 1 << a4;
              int v15 = 65814;
LABEL_38:
              if ((v14 & v15) != 0)
              {
LABEL_39:
                unint64_t v24 = 0;
                a5[1] = 0;
                a5[2] = 0;
                *a5 = 0;
                (*(void (**)(uint64_t *, unint64_t *))(*v27 + 72))(v27, &v24);
                if (!*(_DWORD *)a5)
                {
                  if (v24)
                  {
                    uint64_t v16 = 0;
                    while (1)
                    {
                      *(void *)long long buf = 0;
                      a5[1] = 0;
                      a5[2] = 0;
                      *a5 = 0;
                      (*(void (**)(uint64_t *, uint64_t, unsigned char *))(*v27 + 80))(v27, v16, buf);
                      if (*(_DWORD *)a5) {
                        break;
                      }
                      if ((unint64_t)(*(void *)buf - 1) > 0xFFFFFFEFFFFFFFFELL)
                      {
                        if (*(unsigned int *)&buf[4] == 4294967293)
                        {
                          if (v26 != 64)
                          {
                            *(_DWORD *)a5 = 3;
                            a5[1] = "src/access/AccessControl.cpp";
                            int v13 = 1;
                            int v20 = 443;
                            goto LABEL_78;
                          }
                          uint64_t v17 = 0;
                          while (1)
                          {
                            unsigned int v18 = *(_DWORD *)(a2 + 16 + v17);
                            if (v18)
                            {
                              if ((unsigned __int16)(*(_WORD *)buf - 1) < (unsigned __int16)v18
                                && HIWORD(v18) == *(unsigned __int16 *)&buf[2])
                              {
                                goto LABEL_59;
                              }
                            }
                            v17 += 4;
                            if (v17 == 12) {
                              goto LABEL_57;
                            }
                          }
                        }
                        if (*(void *)buf < 0xFFFFFFFFFFFF0000)
                        {
                          *(_DWORD *)a5 = 3;
                          a5[1] = "src/access/AccessControl.cpp";
                          int v13 = 1;
                          int v20 = 462;
                          goto LABEL_78;
                        }
                        if (v26 != 128)
                        {
                          *(_DWORD *)a5 = 3;
                          a5[1] = "src/access/AccessControl.cpp";
                          int v13 = 1;
                          int v20 = 452;
                          goto LABEL_78;
                        }
                      }
                      else if (v26 != 64)
                      {
                        *(_DWORD *)a5 = 3;
                        a5[1] = "src/access/AccessControl.cpp";
                        int v13 = 1;
                        int v20 = 434;
                        goto LABEL_78;
                      }
                      if (*(void *)buf == *(void *)(a2 + 8)) {
                        goto LABEL_59;
                      }
LABEL_57:
                      if (++v16 >= v24) {
                        goto LABEL_71;
                      }
                    }
                  }
                  else
                  {
LABEL_59:
                    unint64_t v23 = 0;
                    a5[1] = 0;
                    a5[2] = 0;
                    *a5 = 0;
                    (*(void (**)(uint64_t *, unint64_t *))(*v27 + 112))(v27, &v23);
                    if (!*(_DWORD *)a5)
                    {
                      if (!v23)
                      {
LABEL_74:
                        *(_DWORD *)a5 = 0;
                        a5[1] = "src/access/AccessControl.cpp";
                        int v13 = 1;
                        int v20 = 507;
LABEL_78:
                        *((_DWORD *)a5 + 4) = v20;
                        break;
                      }
                      uint64_t v19 = 0;
                      while (1)
                      {
                        *(_DWORD *)long long buf = 0;
                        a5[1] = 0;
                        a5[2] = 0;
                        *a5 = 0;
                        (*(void (**)(uint64_t *, uint64_t, unsigned char *))(*v27 + 120))(v27, v19, buf);
                        if (*(_DWORD *)a5) {
                          break;
                        }
                        if (((buf[0] & 1) == 0 || *(_DWORD *)&buf[4] == *(_DWORD *)a3)
                          && ((buf[0] & 2) == 0 || *(unsigned __int16 *)&buf[8] == *(unsigned __int16 *)(a3 + 4))
                          && ((buf[0] & 4) == 0
                           || (*(unsigned int (**)(void, void, void))(*(void *)a1[1] + 16))(a1[1], v30, *(unsigned __int16 *)(a3 + 4))))
                        {
                          goto LABEL_74;
                        }
                        if (++v19 >= v23) {
                          goto LABEL_71;
                        }
                      }
                    }
                  }
                }
                int v13 = 1;
              }
            }
            break;
        }
      }
    }
    else
    {
LABEL_71:
      int v13 = 8;
    }
    if (v13 != 8) {
      goto LABEL_87;
    }
  }
  unsigned int v21 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_DEFAULT, "AccessControl: denied", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xDu, 2);
  }
  *(_DWORD *)a5 = 165;
  a5[1] = "src/access/AccessControl.cpp";
  int v22 = 512;
LABEL_86:
  *((_DWORD *)a5 + 4) = v22;
LABEL_87:
  (*(void (**)(uint64_t *))(*v27 + 16))(v27);
  return (*(uint64_t (**)(uint64_t *))(*v28 + 16))(v28);
}

uint64_t *sub_244D908A4()
{
  uint64_t result = (uint64_t *)qword_268EC3168;
  if (!qword_268EC3168)
  {
    uint64_t result = &qword_268EC3170;
    if (!byte_268EC3188)
    {
      byte_268EC3188 = 1;
      qword_268EC3178 = 0;
      unk_268EC3180 = 0;
      qword_268EC3170 = 0;
    }
  }
  return result;
}

uint64_t sub_244D908D8(uint64_t a1)
{
  uint64_t v2 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "AccessControl: setting", v4, 2u);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0xDu, 2);
  }
  qword_268EC3168 = a1;
  return result;
}

void sub_244D90970()
{
  qword_268EC3168 = 0;
}

void sub_244D9097C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 88;
}

void sub_244D9099C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 89;
}

void sub_244D909BC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 90;
}

void sub_244D909DC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 93;
}

void sub_244D909FC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 94;
}

void sub_244D90A1C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 95;
}

void sub_244D90A3C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 98;
}

void sub_244D90A5C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 99;
}

void sub_244D90A7C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 100;
}

void sub_244D90A9C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 101;
}

void sub_244D90ABC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 102;
}

void sub_244D90ADC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 105;
}

void sub_244D90AFC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 106;
}

void sub_244D90B1C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 107;
}

void sub_244D90B3C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 108;
}

void sub_244D90B5C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 109;
}

void sub_244D90B7C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 10;
  *(void *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 261;
}

uint64_t sub_244D90B9C(uint64_t result)
{
  *(_DWORD *)(result + 7) = 0;
  *(void *)uint64_t result = 0;
  return result;
}

uint64_t sub_244D90BA8(uint64_t a1)
{
  return a1;
}

void sub_244D90BD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)a1)
    {
      sub_244D90CE0(a1);
      j__free(*(void **)a1);
      *(void *)a1 = 0;
    }
  }
}

void sub_244D90C14(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9458;
  *(void *)(a3 + 16) = 68;
  if (a2)
  {
    char v5 = a2;
    long long v6 = sub_244CC4D84(424 * a2);
    *(void *)a1 = v6;
    if (v6)
    {
      *(unsigned char *)(a1 + 9) = v5;
      *(unsigned char *)(a1 + 10) = 1;
      sub_244D90CE0(a1);
      return;
    }
    int v7 = 72;
    int v8 = 11;
  }
  else
  {
    int v7 = 70;
    int v8 = 47;
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v7;

  sub_244D90BD0(a1);
}

void sub_244D90CE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      sub_244D90DA8(*(void *)a1 + v2);
      ++v3;
      v2 += 424;
    }
    while (v3 < *(unsigned __int8 *)(a1 + 9));
  }
  *(unsigned char *)(a1 + 8) = 0;
}

void sub_244D90D3C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_2651A9470;
  *(void *)(a4 + 16) = 90;
  if (a2)
  {
    if (a3)
    {
      *(void *)a1 = a2;
      *(unsigned char *)(a1 + 9) = a3;
      *(unsigned char *)(a1 + 10) = 0;
      sub_244D90CE0(a1);
      return;
    }
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
    int v4 = 93;
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
    int v4 = 92;
  }
  *(_DWORD *)(a4 + 16) = v4;
}

double sub_244D90DA8(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  for (uint64_t i = 16; i != 176; i += 32)
  {
    uint64_t v2 = a1 + i;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 23) = 0;
    *(void *)(v2 + 16) = 0;
  }
  for (uint64_t j = 0; j != 160; j += 32)
  {
    uint64_t v4 = a1 + 176 + j;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 23) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(void *)(a1 + 336) = &unk_244EC2D00;
  *(void *)(a1 + 344) = &unk_244EC2D00;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = &unk_244EC2D00;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_244EC2D00;
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

void sub_244D90E1C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  sub_244CB3988((uint64_t)v10);
  sub_244CB39B8((uint64_t)v10, a2, a3);
  sub_244D90E90(a1, (uint64_t)v10, a4, a5);
}

void sub_244D90E90(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v13);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244D973EC(a2, (uint64_t)v13, a3, a4);
  if (!*(_DWORD *)a4)
  {
    if ((~v13[187] & 0x18) != 0)
    {
      int v12 = 144;
      int v11 = 80;
    }
    else if (v13[186] == 513)
    {
      LODWORD(v8) = *(unsigned __int8 *)(a1 + 8);
      if (*(unsigned char *)(a1 + 8))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        while (!sub_244D91000((uint64_t)v13, *(void *)a1 + v9))
        {
          ++v10;
          unint64_t v8 = *(unsigned __int8 *)(a1 + 8);
          v9 += 424;
          if (v10 >= v8) {
            goto LABEL_8;
          }
        }
        int v11 = 0;
        int v12 = 155;
      }
      else
      {
LABEL_8:
        if (v8 >= *(unsigned __int8 *)(a1 + 9))
        {
          int v12 = 160;
          int v11 = 11;
        }
        else
        {
          memcpy((void *)(*(void *)a1 + 424 * v8), v13, 0x1A8uLL);
          int v11 = 0;
          ++*(unsigned char *)(a1 + 8);
          int v12 = 165;
        }
      }
    }
    else
    {
      int v12 = 147;
      int v11 = 23;
    }
    *(_DWORD *)a4 = v11;
    a4[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a4 + 4) = v12;
  }
}

BOOL sub_244D91000(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_244D91EAC(a1 + 16, a2 + 16);
  if (result)
  {
    BOOL result = sub_244D91EAC(a1 + 176, a2 + 176);
    if (result)
    {
      char v5 = *(uint64_t **)(a2 + 336);
      long long v6 = *(uint64_t **)(a1 + 336);
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      uint64_t v9 = *v5;
      uint64_t v10 = v5[1];
      uint64_t v11 = *((unsigned int *)v6 + 4);
      uint64_t v12 = *((unsigned int *)v5 + 4);
      if (v7 != v9 || v8 != v10 || v11 != v12) {
        return 0;
      }
      int v15 = *(uint64_t **)(a2 + 344);
      uint64_t v16 = *(uint64_t **)(a1 + 344);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v19 = *v15;
      uint64_t v20 = v15[1];
      uint64_t v21 = *((unsigned int *)v16 + 4);
      uint64_t v22 = *((unsigned int *)v15 + 4);
      BOOL v23 = v17 == v19 && v18 == v20;
      BOOL v24 = v23 && v21 == v22;
      return v24
          && *(_DWORD *)(a1 + 352) == *(_DWORD *)(a2 + 352)
          && *(_DWORD *)(a1 + 356) == *(_DWORD *)(a2 + 356)
          && !memcmp(*(const void **)(a1 + 360), *(const void **)(a2 + 360), 0x41uLL)
          && *(unsigned __int16 *)(a1 + 368) == *(unsigned __int16 *)(a2 + 368)
          && *(unsigned __int16 *)(a1 + 370) == *(unsigned __int16 *)(a2 + 370)
          && *(unsigned __int16 *)(a1 + 372) == *(unsigned __int16 *)(a2 + 372)
          && *(unsigned __int16 *)(a1 + 374) == *(unsigned __int16 *)(a2 + 374)
          && *(unsigned __int16 *)(a1 + 376) == *(unsigned __int16 *)(a2 + 376)
          && *(unsigned __int8 *)(a1 + 378) == *(unsigned __int8 *)(a2 + 378)
          && *(unsigned __int8 *)(a1 + 379) == *(unsigned __int8 *)(a2 + 379)
          && !memcmp(*(const void **)(a1 + 384), *(const void **)(a2 + 384), 0x40uLL)
          && *(void *)(a1 + 392) == *(void *)(a2 + 392)
          && *(void *)(a1 + 400) == *(void *)(a2 + 400)
          && *(void *)(a1 + 408) == *(void *)(a2 + 408)
          && *(void *)(a1 + 416) == *(void *)(a2 + 416);
    }
  }
  return result;
}

uint64_t sub_244D91178@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 8) && *(void *)result)
  {
    int v2 = 0;
    --*(unsigned char *)(result + 8);
    int v3 = 176;
  }
  else
  {
    int v3 = 171;
    int v2 = 172;
  }
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_244D911BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 8);
  if (!*((unsigned char *)a1 + 8)) {
    return 0;
  }
  uint64_t result = *a1;
  uint64_t v4 = *a2;
  while (1)
  {
    char v5 = *(uint64_t **)(result + 336);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = *((unsigned int *)v5 + 4);
    BOOL v9 = v6 == *(void *)v4 && v7 == *(void *)(v4 + 8);
    if (v9 && v8 == *(_DWORD *)(v4 + 16)) {
      break;
    }
    result += 424;
    if (!--v2) {
      return 0;
    }
  }
  return result;
}

BOOL sub_244D91204(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (*(void *)a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)a1 + 424;
  do
  {
    unint64_t v5 = v3 + 1;
    if (v2 - 1 == v3) {
      break;
    }
    ++v3;
    BOOL v6 = v4 == a2;
    v4 += 424;
  }
  while (!v6);
  return v5 < v2;
}

void sub_244D91260(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    goto LABEL_9;
  }
  if (*(void *)a1 == a2) {
    goto LABEL_8;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)a1 + 424;
  do
  {
    unint64_t v7 = v5 + 1;
    if (v4 - 1 == v5) {
      break;
    }
    ++v5;
    BOOL v8 = v6 == a2;
    v6 += 424;
  }
  while (!v8);
  if (v7 < v4)
  {
LABEL_8:
    *(void *)(a3 + 16) = 0;
    sub_244D912D4(a1, a2, a3, 0, a4);
  }
  else
  {
LABEL_9:
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a4 + 16) = 208;
  }
}

double sub_244D912D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *(_OWORD *)a5 = xmmword_2651A9488;
  *(void *)(a5 + 16) = 254;
  uint64_t v37 = 0;
  unsigned __int8 v36 = 0;
  uint64_t v10 = a2 + 16;
  sub_244D91C04(a2 + 16, &v36, a5);
  if (!*(_DWORD *)a5)
  {
    __int16 v12 = *(_WORD *)(a2 + 374);
    if ((v12 & 0x20) != 0)
    {
      *(_DWORD *)a5 = 77;
      *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
      int v13 = 262;
      goto LABEL_7;
    }
    if (a4)
    {
      if ((v12 & 0x80) == 0)
      {
        *(_DWORD *)a5 = 77;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 268;
LABEL_7:
        *(_DWORD *)(a5 + 16) = v13;
        return result;
      }
      if ((v12 & 2) == 0 || (*(_WORD *)(a2 + 376) & 0x20) == 0)
      {
        *(_DWORD *)a5 = 77;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 272;
        goto LABEL_7;
      }
      if (v36 - 1 >= 2)
      {
        *(_DWORD *)a5 = 157;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 275;
        goto LABEL_7;
      }
      if ((v12 & 0x40) != 0 && (int)a4 - 1 > *(unsigned __int8 *)(a2 + 379))
      {
        *(_DWORD *)a5 = 75;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 286;
        goto LABEL_7;
      }
    }
    else
    {
      if (*(_WORD *)(a3 + 24)
        && ((v12 & 2) == 0 || (*(unsigned __int16 *)(a3 + 24) & ~*(unsigned __int16 *)(a2 + 376)) != 0))
      {
        *(_DWORD *)a5 = 77;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 299;
        goto LABEL_7;
      }
      if (*(unsigned char *)(a3 + 26)
        && ((v12 & 4) == 0 || (*(unsigned __int8 *)(a3 + 26) & ~*(unsigned __int8 *)(a2 + 378)) != 0))
      {
        *(_DWORD *)a5 = 77;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 308;
        goto LABEL_7;
      }
      if (*(unsigned char *)(a3 + 27) && v36 != *(unsigned __int8 *)(a3 + 27))
      {
        *(_DWORD *)a5 = 157;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 314;
        goto LABEL_7;
      }
    }
    if (*(void *)a3 == 1)
    {
      if (*(_DWORD *)(a2 + 356) && *(_DWORD *)sub_244D91E40((void *)a3) > *(_DWORD *)(a2 + 356))
      {
        uint64_t v18 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          int v19 = *(_DWORD *)(a2 + 356);
          int v20 = *(_DWORD *)sub_244D91E40((void *)a3);
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v20;
          _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_INFO, "Certificate's mNotAfterTime (%u) is before last known good time (%u)", buf, 0xEu);
        }
        if (sub_244CC4E58(3u))
        {
          sub_244D91E40((void *)a3);
          sub_244CC4DE0(0xBu, 3);
        }
        uint64_t v17 = 4;
      }
      else
      {
        uint64_t v17 = 3;
      }
    }
    else if (*(void *)a3)
    {
      uint64_t v17 = 5;
    }
    else if (*(_DWORD *)sub_244D91E1C((void *)a3) >= *(_DWORD *)(a2 + 352))
    {
      if (*(_DWORD *)(a2 + 356) && *(_DWORD *)sub_244D91E1C((void *)a3) > *(_DWORD *)(a2 + 356))
      {
        uint64_t v21 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          int v22 = *(_DWORD *)(a2 + 356);
          int v23 = *(_DWORD *)sub_244D91E1C((void *)a3);
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v23;
          _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_INFO, "Certificate's mNotAfterTime (%u) is before current time (%u)", buf, 0xEu);
        }
        if (sub_244CC4E58(3u))
        {
          sub_244D91E1C((void *)a3);
          sub_244CC4DE0(0xBu, 3);
        }
        uint64_t v17 = 2;
      }
      else
      {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v14 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = *(_DWORD *)(a2 + 352);
        int v16 = *(_DWORD *)sub_244D91E1C((void *)a3);
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v15;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v16;
        _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "Certificate's mNotBeforeTime (%u) is after current time (%u)", buf, 0xEu);
      }
      if (sub_244CC4E58(3u))
      {
        sub_244D91E1C((void *)a3);
        sub_244CC4DE0(0xBu, 3);
      }
      uint64_t v17 = 1;
    }
    uint64_t v24 = *(void *)(a3 + 32);
    if (!v24)
    {
      int v13 = 1464;
      int v25 = 79;
      switch((int)v17)
      {
        case 0:
        case 3:
        case 4:
        case 5:
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
          *(_DWORD *)(a5 + 16) = 1461;
          goto LABEL_58;
        case 1:
          break;
        case 2:
          int v13 = 1467;
          int v25 = 78;
          break;
        default:
          int v13 = 1470;
          int v25 = 172;
          break;
      }
      *(_DWORD *)a5 = v25;
      *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, a2, a4, v17);
    if (!*(_DWORD *)a5)
    {
LABEL_58:
      if ((*(_WORD *)(a2 + 374) & 0x100) != 0)
      {
        *(void *)(a3 + 16) = a2;
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        int v13 = 386;
      }
      else
      {
        if (!sub_244D91EAC(a2 + 176, v10)) {
          goto LABEL_67;
        }
        unsigned __int8 v26 = *(uint64_t **)(a2 + 336);
        unint64_t v27 = *(uint64_t **)(a2 + 344);
        uint64_t v28 = *v27;
        uint64_t v29 = v27[1];
        uint64_t v30 = *v26;
        uint64_t v31 = v26[1];
        uint64_t v32 = *((unsigned int *)v27 + 4);
        uint64_t v33 = *((unsigned int *)v26 + 4);
        BOOL v34 = v28 == v30 && v29 == v31;
        if (v34 && v32 == v33)
        {
          *(_DWORD *)a5 = 87;
          *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
          int v13 = 396;
        }
        else
        {
LABEL_67:
          if (*(unsigned __int8 *)(a1 + 8) <= a4)
          {
            *(_DWORD *)a5 = 76;
            *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
            int v13 = 402;
          }
          else
          {
            sub_244D9196C(buf, a1, a2 + 176, a2 + 344, a3, (a4 + 1), &v37);
            double result = *(double *)buf;
            *(_OWORD *)a5 = *(_OWORD *)buf;
            *(void *)(a5 + 16) = v39;
            if (!*(_DWORD *)a5)
            {
              sub_244D91AB8(a2, v37, (uint64_t)buf);
              double result = *(double *)buf;
              *(_OWORD *)a5 = *(_OWORD *)buf;
              *(void *)(a5 + 16) = v39;
              return result;
            }
            *(_DWORD *)a5 = 74;
            *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
            int v13 = 409;
          }
        }
      }
      goto LABEL_7;
    }
  }
  return result;
}

void sub_244D9195C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)(a4 + 16) = 0;
  sub_244D9196C(a1, a2, a3, a4, 0, a5, a6);
}

void sub_244D9196C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  *a6 = 0;
  if (a5) {
    int v8 = 74;
  }
  else {
    int v8 = 83;
  }
  *(_DWORD *)a7 = v8;
  *(void *)(a7 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a7 + 16) = 429;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = *(void *)a1 + v14;
      if (sub_244D91EAC(v17 + 16, a2))
      {
        uint64_t v18 = *(uint64_t **)(v17 + 336);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        uint64_t v21 = *((unsigned int *)v18 + 4);
        BOOL v22 = v19 == **(void **)a3 && v20 == *(void *)(*(void *)a3 + 8);
        if (v22 && v21 == *(_DWORD *)(*(void *)a3 + 16))
        {
          sub_244D912D4(a1, v17, a4, a5, a7);
          if (!*(_DWORD *)a7) {
            break;
          }
        }
      }
      ++v15;
      v14 += 424;
      if (v15 >= *(unsigned __int8 *)(a1 + 8)) {
        return;
      }
    }
    *a6 = v16 + v14;
  }
}

uint64_t sub_244D91A8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result && a2) {
    return sub_244D91AB8(result, a2, a3);
  }
  *(_DWORD *)a3 = 47;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = 225;
  return result;
}

uint64_t sub_244D91AB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((*(_WORD *)(result + 374) & 0x200) == 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v4 = 231;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v4;
    return result;
  }
  if (*(_WORD *)(result + 372) != 513)
  {
    *(_DWORD *)a3 = 23;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v4 = 232;
    goto LABEL_8;
  }
  uint64_t v14 = 64;
  unint64_t v15 = &unk_26F954540;
  uint64_t v5 = *(long long **)(result + 384);
  long long v6 = v5[3];
  long long v8 = *v5;
  long long v7 = v5[1];
  v13[2] = v5[2];
  void v13[3] = v6;
  v13[0] = v8;
  v13[1] = v7;
  BOOL v9 = *(long long **)(a2 + 360);
  long long v16 = *v9;
  long long v11 = v9[2];
  long long v10 = v9[3];
  char v12 = *((unsigned char *)v9 + 64);
  long long v17 = v9[1];
  long long v18 = v11;
  char v20 = v12;
  long long v19 = v10;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CED0CC((uint64_t)&v15, result + 392, 32, (uint64_t)v13, a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 249;
  }
  return sub_244CED784(v13, 64);
}

uint64_t sub_244D91C04@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = 0;
  uint64_t v7 = 24;
  while (*(_WORD *)(result + v7))
  {
    ++v6;
    v7 += 32;
    if (v6 == 5) {
      goto LABEL_13;
    }
  }
  LOBYTE(v8) = v6;
  if (v6 == 1)
  {
    if (*(_WORD *)(result + 24) == 769 && !*(unsigned char *)(result + 26))
    {
      double result = sub_244D920E4(result, (uint64_t)&off_2651A94A0);
      if (result)
      {
        int v9 = 616;
        LOBYTE(v8) = 5;
        goto LABEL_38;
      }
    }
    uint64_t v6 = 1;
LABEL_13:
    *a2 = 0;
    goto LABEL_14;
  }
  *a2 = 0;
  if (!(_BYTE)v6)
  {
LABEL_37:
    int v9 = 673;
LABEL_38:
    int v13 = 0;
    *a2 = v8;
    goto LABEL_49;
  }
LABEL_14:
  char v10 = 0;
  char v11 = 0;
  int v8 = 0;
  uint64_t v12 = v4 + 16;
  while (2)
  {
    switch(*(_WORD *)(v12 + 8))
    {
      case 0x311:
        if (v8)
        {
          int v9 = 637;
          goto LABEL_48;
        }
        if ((unint64_t)(*(void *)v12 - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          int v8 = 3;
          goto LABEL_31;
        }
        int v9 = 638;
        int v13 = 92;
        break;
      case 0x312:
        if (!v8)
        {
          int v8 = 4;
          goto LABEL_31;
        }
        int v9 = 643;
        goto LABEL_48;
      case 0x313:
        if (v8)
        {
          int v9 = 631;
          goto LABEL_48;
        }
        int v8 = 2;
        goto LABEL_31;
      case 0x314:
        if (v8)
        {
          int v9 = 625;
          goto LABEL_48;
        }
        int v8 = 1;
        goto LABEL_31;
      case 0x315:
        if (v11)
        {
          int v9 = 650;
          goto LABEL_48;
        }
        if (!*(void *)v12)
        {
          int v9 = 651;
          goto LABEL_48;
        }
        char v11 = 1;
        goto LABEL_31;
      case 0x316:
        if (HIDWORD(*(void *)v12))
        {
          int v9 = 656;
          goto LABEL_48;
        }
        if (!(unsigned __int16)*(void *)v12)
        {
          int v9 = 657;
          goto LABEL_48;
        }
        char v10 = 1;
LABEL_31:
        v12 += 32;
        if (--v6) {
          continue;
        }
        if (v8 != 3)
        {
          if (v10)
          {
            int v9 = 668;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
        if (v11)
        {
          int v9 = 673;
          LOBYTE(v8) = 3;
          goto LABEL_38;
        }
        int v9 = 664;
LABEL_48:
        int v13 = 89;
        break;
      default:
        goto LABEL_31;
    }
    break;
  }
LABEL_49:
  *(_DWORD *)a3 = v13;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void *sub_244D91E1C(void *a1)
{
  if (*a1) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244D91E40(void *a1)
{
  if (*a1 != 1) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void sub_244D91E68(signed int a1@<W2>, uint64_t a2@<X8>)
{
  if (a1 > 5)
  {
    int v3 = 1470;
    int v2 = 172;
  }
  else
  {
    int v2 = dword_244EC2D44[a1];
    int v3 = dword_244EC2D5C[a1];
  }
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

BOOL sub_244D91EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = (unsigned __int16 *)(a1 + 24);
  while (1)
  {
    int v6 = *v5;
    v5 += 16;
    if (!v6) {
      break;
    }
    if (++v4 == 5) {
      goto LABEL_6;
    }
  }
  LODWORD(v4) = v4;
  if (!(_BYTE)v4) {
    return 0;
  }
LABEL_6:
  uint64_t v7 = 0;
  int v8 = (unsigned __int16 *)(a2 + 24);
  while (1)
  {
    int v9 = *v8;
    v8 += 16;
    if (!v9) {
      break;
    }
    if (++v7 == 5) {
      goto LABEL_11;
    }
  }
  LODWORD(v7) = v7;
LABEL_11:
  if (v4 != v7) {
    return 0;
  }
  uint64_t v10 = v4 - 1;
  do
  {
    BOOL result = sub_244D92088(v3, v2);
    BOOL v13 = v10-- != 0;
    if (!result) {
      break;
    }
    v3 += 32;
    v2 += 32;
  }
  while (v13);
  return result;
}

uint64_t sub_244D91F6C(uint64_t result)
{
  uint64_t v1 = 0;
  *(void *)BOOL result = 0;
  *(void *)(result + 8) = 0;
  do
  {
    uint64_t v2 = result + v1;
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
    *(_WORD *)(v2 + 40) = 0;
    v1 += 32;
  }
  while (v1 != 160);
  for (uint64_t i = 16; i != 176; i += 32)
  {
    uint64_t v4 = result + i;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 23) = 0;
    *(void *)(v4 + 16) = 0;
  }
  for (uint64_t j = 0; j != 160; j += 32)
  {
    uint64_t v6 = result + j;
    *(void *)(v6 + 176) = 0;
    *(void *)(v6 + 184) = 0;
    *(_WORD *)(v6 + 200) = 0;
  }
  for (uint64_t k = 176; k != 336; k += 32)
  {
    uint64_t v8 = result + k;
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 23) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(void *)(result + 336) = &unk_244EC2D00;
  *(void *)(result + 344) = &unk_244EC2D00;
  *(void *)(result + 360) = &unk_244EC2D00;
  *(_DWORD *)(result + 374) = 0;
  *(unsigned char *)(result + 378) = 0;
  *(void *)(result + 384) = &unk_244EC2D00;
  return result;
}

uint64_t sub_244D9200C(uint64_t result)
{
  for (uint64_t i = 0; i != 160; i += 32)
  {
    uint64_t v2 = result + i;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 24) = 0;
  }
  for (uint64_t j = 0; j != 160; j += 32)
  {
    uint64_t v4 = result + j;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 23) = 0;
    *(void *)(v4 + 16) = 0;
  }
  return result;
}

uint64_t sub_244D9204C(uint64_t result)
{
  for (uint64_t i = 0; i != 160; i += 32)
  {
    uint64_t v2 = result + i;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 23) = 0;
    *(void *)(v2 + 16) = 0;
  }
  return result;
}

uint64_t sub_244D92070(uint64_t result)
{
  *(void *)BOOL result = -1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

BOOL sub_244D92088(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 24);
  if (*(_WORD *)(a1 + 24)) {
    BOOL v3 = v2 == 0xFFFF;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3 || v2 != *(unsigned __int16 *)(a2 + 24) || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a2 + 26)) {
    return 0;
  }
  if ((v2 - 785) > 5) {
    return sub_244D920E4(a1, a2);
  }
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL sub_244D920E4(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)(a2 + 8)) {
    return 0;
  }
  if (v2) {
    return memcmp(*(const void **)a1, *(const void **)a2, v2) == 0;
  }
  return 1;
}

uint64_t sub_244D92130(uint64_t a1)
{
  uint64_t v1 = 0;
  size_t v2 = (unsigned __int16 *)(a1 + 24);
  do
  {
    int v3 = *v2;
    v2 += 16;
    if (!v3) {
      break;
    }
    ++v1;
  }
  while (v1 != 5);
  return v1;
}

uint64_t sub_244D92154@<X0>(uint64_t result@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = (unsigned char *)(result + 26);
  while (*((_WORD *)v5 - 1))
  {
    ++v4;
    v5 += 32;
    if (v4 == 5) {
      goto LABEL_10;
    }
  }
  if (v4 > 4u)
  {
LABEL_10:
    int v6 = 560;
    int v7 = 11;
    goto LABEL_14;
  }
  if ((a2 - 785) > 5)
  {
    int v6 = 561;
  }
  else
  {
    if (a2 != 790 || !HIDWORD(a3))
    {
      int v7 = 0;
      *((_WORD *)v5 - 1) = a2;
      *(void *)(v5 - 10) = a3;
      int v6 = 572;
      *uint64_t v5 = 0;
      goto LABEL_14;
    }
    int v6 = 565;
  }
  int v7 = 47;
LABEL_14:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t sub_244D921EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_244B2B8BC(a2);
  if (result)
  {
    uint64_t v7 = 0;
    while (1)
    {
      unint64_t v8 = *(unsigned int *)(a2 + v7);
      if (v8)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        uint64_t result = sub_244D92154(a1, 790, v8, (uint64_t)a3);
        if (*(_DWORD *)a3) {
          break;
        }
      }
      v7 += 4;
      if (v7 == 12)
      {
        int v9 = 0;
        int v10 = 587;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v10 = 577;
    int v9 = 47;
LABEL_8:
    *(_DWORD *)a3 = v9;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = v10;
  }
  return result;
}

uint64_t sub_244D92288@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = result + 24;
  while (*(_WORD *)v7)
  {
    ++v6;
    v7 += 32;
    if (v6 == 5) {
      goto LABEL_8;
    }
  }
  if (v6 > 4u)
  {
LABEL_8:
    int v8 = 594;
    int v9 = 11;
    goto LABEL_9;
  }
  if ((a2 - 785) < 6)
  {
    int v8 = 595;
LABEL_13:
    int v9 = 47;
    goto LABEL_9;
  }
  if (!a2)
  {
    int v8 = 596;
    goto LABEL_13;
  }
  int v9 = 0;
  *(_WORD *)uint64_t v7 = a2;
  *(void *)(v7 - 24) = a3;
  *(void *)(v7 - 16) = a4;
  int v8 = 602;
  *(unsigned char *)(v7 + 2) = a5;
LABEL_9:
  *(_DWORD *)a6 = v9;
  *(void *)(a6 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a6 + 16) = v8;
  return result;
}

uint64_t sub_244D92314@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned __int16 *)(result + 24);
  while (1)
  {
    int v5 = *v4;
    v4 += 16;
    if (!v5) {
      break;
    }
    if (--v3 == -5)
    {
      *a2 = 0;
      uint64_t v6 = 5;
      goto LABEL_7;
    }
  }
  *a2 = 0;
  if (!v3)
  {
LABEL_17:
    int v12 = 701;
    goto LABEL_18;
  }
  uint64_t v6 = -v3;
LABEL_7:
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = -v6;
  while (2)
  {
    int v10 = (unsigned __int16 *)(result + 24 + 32 * v7++);
    while (*v10 - 785 > 3)
    {
      ++v7;
      v10 += 16;
      if (v9 + v7 == 1)
      {
        if ((v8 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    if ((v8 & 1) == 0)
    {
      *a2 = *((void *)v10 - 1);
      char v8 = 1;
      if (v9 + v7) {
        continue;
      }
LABEL_16:
      int v11 = 0;
      int v12 = 702;
      goto LABEL_19;
    }
    break;
  }
  int v12 = 691;
LABEL_18:
  int v11 = 89;
LABEL_19:
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v12;
  return result;
}

uint64_t sub_244D923DC@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned __int16 *)(result + 24);
  while (1)
  {
    int v5 = *v4;
    v4 += 16;
    if (!v5) {
      break;
    }
    if (--v3 == -5)
    {
      *a2 = 0;
      uint64_t v6 = 5;
      goto LABEL_7;
    }
  }
  *a2 = 0;
  if (!v3)
  {
    int v13 = 726;
LABEL_22:
    int v12 = 89;
    goto LABEL_23;
  }
  uint64_t v6 = -v3;
LABEL_7:
  uint64_t v7 = 0;
  char v8 = (unsigned __int16 *)(result + 24);
  uint64_t v9 = (unsigned __int16 *)(result + 24);
  do
  {
    int v10 = *v9;
    v9 += 16;
    if (v10 == 789)
    {
      if (v7)
      {
        int v13 = 717;
        goto LABEL_22;
      }
      uint64_t v7 = *((void *)v8 - 1);
      if (!v7)
      {
        int v13 = 718;
        goto LABEL_22;
      }
      *a2 = v7;
    }
    char v8 = v9;
    --v6;
  }
  while (v6);
  BOOL v11 = v7 == 0;
  if (v7) {
    int v12 = 0;
  }
  else {
    int v12 = 89;
  }
  if (v11) {
    int v13 = 726;
  }
  else {
    int v13 = 727;
  }
LABEL_23:
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

void sub_244D9248C(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = 0;
  char v8 = (unsigned __int16 *)(a1 + 24);
  while (1)
  {
    int v9 = *v8;
    v8 += 16;
    if (!v9) {
      break;
    }
    if (++v7 == 5)
    {
      LODWORD(v10) = 5;
      goto LABEL_6;
    }
  }
  LODWORD(v10) = v7;
LABEL_6:
  int v13 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CB7594(a2, a3, 23, &v13, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (v10)
    {
      uint64_t v10 = v10;
      uint64_t v11 = a1 + 26;
      while (1)
      {
        int v12 = *(unsigned __int16 *)(v11 - 2);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        if ((v12 - 785) > 5) {
          sub_244CB6D80(a2, *(char **)(v11 - 26), *(void *)(v11 - 18), (uint64_t)a4);
        }
        else {
          sub_244CB68CC();
        }
        if (*(_DWORD *)a4) {
          break;
        }
        v11 += 32;
        if (!--v10) {
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      sub_244CB7708((uint64_t)a2, v13, (uint64_t)a4);
    }
  }
}

double sub_244D925A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_244CB3B68(a2) != 23)
  {
    *(_DWORD *)a3 = 38;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v13 = 768;
    goto LABEL_27;
  }
  int v17 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244CB4C90(a2, &v17, a3);
  while (!*(_DWORD *)a3)
  {
    sub_244CB4E58(a2, v15);
    double result = *(double *)&v15[4];
    long long v18 = *(_OWORD *)&v15[4];
    int v19 = v16;
    if (*(_DWORD *)v15)
    {
      if (*(_DWORD *)v15 != 33)
      {
        *(_DWORD *)a3 = *(_DWORD *)v15;
        double result = *(double *)&v18;
        *(_OWORD *)(a3 + 4) = v18;
        *(_DWORD *)(a3 + 20) = v19;
        return result;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CB4D00(a2, v17, a3);
      if (*(_DWORD *)a3) {
        return result;
      }
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      int v13 = 835;
LABEL_27:
      *(_DWORD *)(a3 + 16) = v13;
      return result;
    }
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7 >= 0x100)
    {
      *(_DWORD *)a3 = 36;
      *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      int v13 = 778;
      goto LABEL_27;
    }
    int v8 = v7 & 0x7F | 0x300;
    if ((v7 & 0x7F) - 17 > 4)
    {
      if (v8 != 790)
      {
        *(void *)unint64_t v15 = 0;
        *(void *)&v15[8] = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = 0;
        sub_244CB41F0(a2, v15, (void *)a3);
        if (*(_DWORD *)a3) {
          return result;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244D92288(a1, v7 & 0x7F | 0x300, *(uint64_t *)v15, *(uint64_t *)&v15[8], (v7 & 0x80) != 0, a3);
        continue;
      }
      *(_DWORD *)unint64_t v15 = 0;
      if ((v7 & 0x80) != 0)
      {
        int v13 = 816;
        goto LABEL_36;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CB3FB0(a2, v15, a3);
      if (*(_DWORD *)a3) {
        return result;
      }
      unint64_t v9 = *(unsigned int *)v15;
      if (!*(_WORD *)v15)
      {
        int v13 = 820;
LABEL_38:
        int v14 = 47;
LABEL_39:
        *(_DWORD *)a3 = v14;
        *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
        goto LABEL_27;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v10 = a3;
      uint64_t v11 = a1;
      int v12 = 790;
    }
    else
    {
      *(void *)unint64_t v15 = 0;
      if ((v7 & 0x80) != 0)
      {
        int v13 = 800;
LABEL_36:
        int v14 = 36;
        goto LABEL_39;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CB3EFC(a2, v15, a3);
      if (*(_DWORD *)a3) {
        return result;
      }
      if (v8 == 785)
      {
        unint64_t v9 = *(void *)v15;
        if ((unint64_t)(*(void *)v15 - 1) >= 0xFFFFFFEFFFFFFFFFLL)
        {
          int v13 = 804;
          int v14 = 92;
          goto LABEL_39;
        }
      }
      else if (v8 == 789)
      {
        unint64_t v9 = *(void *)v15;
        if (!*(void *)v15)
        {
          int v13 = 808;
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v9 = *(void *)v15;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v10 = a3;
      uint64_t v11 = a1;
      int v12 = v7 & 0x7F | 0x300;
    }
    sub_244D92154(v11, v12, v9, v10);
  }
  return result;
}

void *sub_244D92898@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unsigned __int16 *)(a1 + 24);
  while (1)
  {
    int v8 = *v7;
    v7 += 16;
    if (!v8) {
      break;
    }
    if (++v6 == 5)
    {
      unsigned int v9 = 5;
      goto LABEL_6;
    }
  }
  unsigned int v9 = v6;
LABEL_6:
  double result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v18);
  int v11 = v18;
  long long v22 = v19;
  int v23 = v20;
  if (!v18)
  {
    if (v9)
    {
      uint64_t v12 = v9;
      uint64_t v13 = a1 + 16;
      while (1)
      {
        double result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x11u, (uint64_t)&v18);
        int v11 = v18;
        long long v22 = v19;
        int v23 = v20;
        if (v18) {
          break;
        }
        int v14 = *(unsigned __int16 *)(v13 + 8);
        if ((v14 - 785) > 4)
        {
          if (v14 == 790)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            unint64_t v15 = v21;
            double result = sub_244CC59E8(*(_DWORD *)v13, v21, 0x10uLL, 1u, a3);
            if (*(_DWORD *)a3) {
              return result;
            }
            unsigned int v16 = 12;
            unint64_t v17 = 8;
          }
          else
          {
            unint64_t v15 = *(unsigned char **)(v13 - 16);
            unint64_t v17 = *(void *)(v13 - 8);
            if (v14 == 784) {
              unsigned int v16 = 22;
            }
            else {
              unsigned int v16 = *(unsigned char *)(v13 + 10) ? 19 : 12;
            }
          }
        }
        else
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          unint64_t v15 = v21;
          double result = sub_244CC597C(*(void *)v13, v21, 0x10uLL, 1u, a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          unsigned int v16 = 12;
          unint64_t v17 = 16;
        }
        double result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v18);
        int v11 = v18;
        long long v22 = v19;
        int v23 = v20;
        if (v18) {
          break;
        }
        double result = sub_244CE9F1C(a2, v14, (uint64_t)&v18);
        int v11 = v18;
        long long v22 = v19;
        int v23 = v20;
        if (v18) {
          break;
        }
        if (v17 >= 0x10000)
        {
          *(_DWORD *)a3 = 80;
          *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
          *(_DWORD *)(a3 + 16) = 893;
          return result;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        double result = sub_244CEB53C(a2, v16, v15, (unsigned __int16)v17, (void *)a3);
        if (*(_DWORD *)a3) {
          return result;
        }
        double result = sub_244CEBC2C(&v18, a2);
        int v11 = v18;
        long long v22 = v19;
        int v23 = v20;
        if (v18) {
          break;
        }
        double result = sub_244CEBC2C(&v18, a2);
        int v11 = v18;
        long long v22 = v19;
        int v23 = v20;
        if (v18) {
          break;
        }
        v13 += 32;
        if (!--v12) {
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      double result = sub_244CEBC2C(&v18, a2);
      int v11 = v18;
      long long v22 = v19;
      int v23 = v20;
    }
  }
  *(_DWORD *)a3 = v11;
  *(_OWORD *)(a3 + 4) = v22;
  *(_DWORD *)(a3 + 20) = v23;
  return result;
}

void *sub_244D92B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
  unint64_t v14 = v30;
  if (v30) {
    goto LABEL_2;
  }
  if (*(unsigned char *)a2 || *(unsigned char *)(a2 + 1) != 16)
  {
    LODWORD(v13) = 915;
    LODWORD(v14) = 773;
    goto LABEL_53;
  }
  double result = (void *)sub_244CEA1B4(a2, (uint64_t)&v30);
  unint64_t v14 = v30;
  if (v30)
  {
LABEL_2:
    unint64_t v15 = v31;
    uint64_t v13 = v32;
    goto LABEL_54;
  }
  LODWORD(v4) = 920;
  LODWORD(v5) = 773;
  LODWORD(v7) = 773;
  LODWORD(v8) = 773;
  LODWORD(v6) = 923;
  LODWORD(v3) = 928;
  unsigned int v16 = "src/credentials/CHIPCert.cpp";
  while (1)
  {
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    if (v30)
    {
      double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
      unint64_t v14 = v30;
      uint64_t v13 = v32;
      if (v30)
      {
        if (v30 == 768)
        {
          double result = sub_244CEA2B0(&v30, a2);
          unint64_t v14 = v30;
          goto LABEL_2;
        }
        goto LABEL_66;
      }
      LODWORD(v14) = 773;
      int v23 = 998;
LABEL_75:
      LODWORD(v13) = v23;
LABEL_53:
      unint64_t v15 = "src/credentials/CHIPCert.cpp";
      goto LABEL_54;
    }
    if (*(unsigned char *)a2) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = *(unsigned char *)(a2 + 1) == 17;
    }
    if (!v17)
    {
      unint64_t v15 = "src/credentials/CHIPCert.cpp";
      unint64_t v14 = v8;
      uint64_t v13 = v4;
      goto LABEL_54;
    }
    double result = (void *)sub_244CEA1B4(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30) {
      goto LABEL_2;
    }
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30) {
      goto LABEL_2;
    }
    if (*(unsigned char *)a2 || *(unsigned char *)(a2 + 1) != 16)
    {
      unint64_t v15 = "src/credentials/CHIPCert.cpp";
      unint64_t v14 = v5;
      uint64_t v13 = v6;
      goto LABEL_54;
    }
    double result = (void *)sub_244CEA1B4(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30) {
      goto LABEL_2;
    }
    unsigned __int16 v29 = 0;
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30) {
      break;
    }
    if (*(unsigned char *)a2 || *(unsigned char *)(a2 + 1) != 6)
    {
      unint64_t v14 = v7;
      goto LABEL_70;
    }
    double result = sub_244CE9E70(a2, &v29, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30) {
      break;
    }
    double result = (void *)sub_244CE9DE8(v29);
    if (result != 768)
    {
      *(_DWORD *)a3 = 773;
      *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      int v26 = 929;
      goto LABEL_82;
    }
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30) {
      break;
    }
    if (*(unsigned char *)a2 || (unsigned int v18 = *(unsigned __int8 *)(a2 + 1), v18 > 0x16) || ((1 << v18) & 0x481000) == 0)
    {
      *(_DWORD *)a3 = 774;
      *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      int v26 = 940;
      goto LABEL_82;
    }
    int v19 = v29;
    if (v18 != 12 && (unsigned __int16)(v29 - 785) <= 5u)
    {
      *(_DWORD *)a3 = 773;
      *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      int v26 = 945;
      goto LABEL_82;
    }
    if ((unsigned __int16)(v29 - 785) > 4u)
    {
      if (v29 != 790)
      {
        char v22 = v18 == 19;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_24479476C(v28, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16));
        double result = (void *)sub_244D92288(a1, v19, v28[0], v28[1], v22, a3);
        goto LABEL_45;
      }
      LODWORD(v30) = 0;
      double result = (void *)sub_244CC5BBC(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16), &v30);
      if (result != (void *)4)
      {
        int v26 = 974;
        goto LABEL_78;
      }
      unint64_t v21 = v30;
      if (!(_WORD)v30)
      {
        int v26 = 976;
        goto LABEL_80;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      int v20 = v29;
    }
    else
    {
      unint64_t v30 = 0;
      double result = (void *)sub_244CC5B34(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16), &v30);
      if (result != (void *)8)
      {
        int v26 = 955;
LABEL_78:
        int v27 = 773;
        goto LABEL_81;
      }
      int v20 = v29;
      if (v29 == 785)
      {
        unint64_t v21 = v30;
        if (v30 - 1 >= 0xFFFFFFEFFFFFFFFFLL)
        {
          int v26 = 959;
          int v27 = 92;
          goto LABEL_81;
        }
      }
      else if (v29 == 789)
      {
        unint64_t v21 = v30;
        if (!v30)
        {
          int v26 = 963;
LABEL_80:
          int v27 = 89;
LABEL_81:
          *(_DWORD *)a3 = v27;
          *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
LABEL_82:
          *(_DWORD *)(a3 + 16) = v26;
          return result;
        }
      }
      else
      {
        unint64_t v21 = v30;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    double result = (void *)sub_244D92154(a1, v20, v21, a3);
LABEL_45:
    if (*(_DWORD *)a3) {
      return result;
    }
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30 != 768)
    {
      uint64_t v13 = v32;
      if (!v30)
      {
        LODWORD(v14) = 773;
        int v23 = 988;
        goto LABEL_75;
      }
      goto LABEL_66;
    }
    double result = sub_244CEA2B0(&v30, a2);
    unint64_t v14 = v30;
    if (v30) {
      goto LABEL_2;
    }
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    if (v30 != 768)
    {
      if (!v30)
      {
        *(_DWORD *)a3 = 774;
        *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
        int v26 = 992;
        goto LABEL_82;
      }
      uint64_t v24 = v31;
      uint64_t v25 = v32;
      *(void *)a3 = v30;
      *(void *)(a3 + 8) = v24;
      *(void *)(a3 + 16) = v25;
      return result;
    }
    double result = (void *)sub_244CE9FA8(a2, (uint64_t)&v30);
    unint64_t v14 = v30;
    if (v30 != 768)
    {
      uint64_t v13 = v32;
      if (!v30)
      {
        LODWORD(v14) = 773;
        int v23 = 995;
        goto LABEL_75;
      }
LABEL_66:
      unint64_t v15 = v31;
      goto LABEL_54;
    }
    double result = sub_244CEA2B0(&v30, a2);
    unint64_t v14 = v30;
    unint64_t v15 = v31;
    uint64_t v13 = v32;
    if (v30) {
      goto LABEL_54;
    }
  }
  unsigned int v16 = v31;
  uint64_t v3 = v32;
LABEL_70:
  unint64_t v15 = v16;
  uint64_t v13 = v3;
LABEL_54:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_244D930C8@<X0>(unsigned __int8 *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A94B0;
  *(void *)(a3 + 16) = 1023;
  uint64_t result = *(unsigned __int16 *)a1;
  unsigned int v7 = a1[2];
  int v8 = a1[3];
  int v9 = a1[4];
  int v10 = a1[5];
  int v11 = a1[6];
  BOOL v14 = result == 9999 && v7 == 12 && v8 == 31 && v9 == 23;
  if (v14 && v10 == 59 && v11 == 59)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t result = sub_244CC7D20(result, v7, v8, v9, v10, v11, a2);
    if ((result & 1) == 0)
    {
      *(_DWORD *)a3 = 774;
      *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      *(_DWORD *)(a3 + 16) = 1054;
    }
  }
  return result;
}

BOOL sub_244D93174@<W0>(BOOL result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result)
  {
    uint64_t result = sub_244CC7DBC(result, (_WORD *)a2, (unsigned char *)(a2 + 2), (unsigned char *)(a2 + 3), (unsigned char *)(a2 + 4), (unsigned char *)(a2 + 5), (unsigned char *)(a2 + 6));
  }
  else
  {
    *(_WORD *)a2 = 9999;
    *(_DWORD *)(a2 + 2) = 991371020;
    *(unsigned char *)(a2 + 6) = 59;
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = 1091;
  return result;
}

void sub_244D931E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v10);
  unsigned int v7 = v10;
  __int16 v9 = 1;
  sub_244D90DA8((uint64_t)v10);
  char v8 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244D90E1C((uint64_t)&v7, *(void *)a1, *(void *)(a1 + 8), 1, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244D933B0((uint64_t)v10, 1, a2);
    if (!*(_DWORD *)a2)
    {
      if (sub_244D91EAC((uint64_t)&v11, (uint64_t)&v12))
      {
        if (*(void *)v13 == *(void *)v14
          && *(void *)(v13 + 8) == *(void *)(v14 + 8)
          && *(_DWORD *)(v13 + 16) == (unint64_t)*(unsigned int *)(v14 + 16))
        {
          if ((v15 & 0x80) != 0)
          {
            if ((v15 & 0x40) != 0 && v17 >= 2u)
            {
              *(_DWORD *)a2 = 77;
              a2[1] = "src/credentials/CHIPCert.cpp";
              int v6 = 1124;
            }
            else
            {
              if ((v16 & 0x20) != 0)
              {
                sub_244D91AB8((uint64_t)v10, (uint64_t)v10, (uint64_t)a2);
                goto LABEL_14;
              }
              *(_DWORD *)a2 = 77;
              a2[1] = "src/credentials/CHIPCert.cpp";
              int v6 = 1127;
            }
          }
          else
          {
            *(_DWORD *)a2 = 77;
            a2[1] = "src/credentials/CHIPCert.cpp";
            int v6 = 1121;
          }
        }
        else
        {
          *(_DWORD *)a2 = 157;
          a2[1] = "src/credentials/CHIPCert.cpp";
          int v6 = 1119;
        }
      }
      else
      {
        *(_DWORD *)a2 = 157;
        a2[1] = "src/credentials/CHIPCert.cpp";
        int v6 = 1117;
      }
      *((_DWORD *)a2 + 4) = v6;
    }
  }
LABEL_14:
  sub_244D90BD0((uint64_t)&v7);
}

uint64_t sub_244D933B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unsigned __int8 v8 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244D91C04(a1 + 16, &v8, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (v8 == a2) {
      int v6 = 0;
    }
    else {
      int v6 = 157;
    }
    if (v8 == a2) {
      int v7 = 1099;
    }
    else {
      int v7 = 1098;
    }
    *(_DWORD *)a3 = v6;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = v7;
  }
  return result;
}

unsigned char *sub_244D93428@<X0>(char *a1@<X2>, unsigned char *result@<X0>, uint64_t a3@<X1>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    if (a1)
    {
      BOOL v7 = *result == 0;
      if (*result) {
        unsigned __int8 v8 = result;
      }
      else {
        unsigned __int8 v8 = result + 1;
      }
      size_t v9 = a3 - v7;
      uint64_t v10 = a4 - (a3 - v7);
      if (a4 >= (unint64_t)(a3 - v7))
      {
        if (!v9 || *v8)
        {
          bzero(a1, a4 - (a3 - v7));
          uint64_t result = memcpy(&a1[v10], v8, v9);
          int v12 = 0;
          int v11 = 1157;
          goto LABEL_11;
        }
        int v11 = 1151;
      }
      else
      {
        int v11 = 1147;
      }
    }
    else
    {
      int v11 = 1135;
    }
  }
  else
  {
    int v11 = 1134;
  }
  int v12 = 47;
LABEL_11:
  *(_DWORD *)a5 = v12;
  *(void *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_244D934F0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = a2[1];
  if (v4 <= 0x48)
  {
    *(_DWORD *)a3 = 25;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v8 = 1162;
  }
  else
  {
    uint64_t v6 = result;
    sub_244CEB170((uint64_t)v9, *a2, v4);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = (uint64_t)sub_244D935A8(v6, v9, a3);
    if (*(_DWORD *)a3) {
      return result;
    }
    unint64_t v7 = sub_244CEB194(v9);
    uint64_t result = sub_2446C1548((uint64_t)a2, v7);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v8 = 1169;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void *sub_244D935A8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v13);
  int v7 = v13;
  long long v16 = v14;
  int v17 = v15;
  if (v13) {
    goto LABEL_2;
  }
  *(void *)int v8 = &v13;
  *(void *)&v8[8] = 33;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244CE84D0(&v10, a1);
  uint64_t v11 = v10;
  uint64_t v12 = 32;
  uint64_t result = sub_244CE6958(&v11, (uint64_t *)v8, a3);
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = sub_244CEB28C(a2, 0, 2u, 0, *(const void **)v8, *(unsigned __int16 *)&v8[8], (void *)a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)int v8 = &v13;
      *(void *)&v8[8] = 33;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      sub_244CE84D0(&v10, a1 + 32);
      uint64_t v11 = v10;
      uint64_t v12 = 32;
      uint64_t result = sub_244CE6958(&v11, (uint64_t *)v8, a3);
      if (!*(_DWORD *)a3)
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        uint64_t result = sub_244CEB28C(a2, 0, 2u, 0, *(const void **)v8, *(unsigned __int16 *)&v8[8], (void *)a3);
        if (!*(_DWORD *)a3)
        {
          uint64_t result = sub_244CEBC2C(v8, a2);
          int v7 = *(_DWORD *)v8;
          long long v16 = *(_OWORD *)&v8[4];
          int v17 = v9;
LABEL_2:
          *(_DWORD *)a3 = v7;
          *(_OWORD *)(a3 + 4) = v16;
          *(_DWORD *)(a3 + 20) = v17;
        }
      }
    }
  }
  return result;
}

void *sub_244D9375C@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (result[13] == 97)
  {
    unint64_t v5 = result;
    sub_2446CD4B0(&v13, (uint64_t)result);
    sub_244CE84D0(&v12, (uint64_t)v5 + 65);
    sub_244CEB170((uint64_t)v11, *a2, a2[1]);
    uint64_t result = (void *)sub_244CEBC20((uint64_t)v11, 0, 0x10u, (uint64_t)&v8);
    int v6 = v8;
    long long v14 = v9;
    int v15 = v10;
    if (v8) {
      goto LABEL_9;
    }
    uint64_t result = sub_244CEB1B0(v11, 1uLL, (uint64_t)&v8);
    int v6 = v8;
    long long v14 = v9;
    int v15 = v10;
    if (v8) {
      goto LABEL_9;
    }
    uint64_t result = sub_244CEB554(v11, v12, 0x20u, &v8);
    int v6 = v8;
    long long v14 = v9;
    int v15 = v10;
    if (v8) {
      goto LABEL_9;
    }
    uint64_t result = (void *)sub_244CEBC20((uint64_t)v11, 128, 0, (uint64_t)&v8);
    int v6 = v8;
    long long v14 = v9;
    int v15 = v10;
    if (v8) {
      goto LABEL_9;
    }
    uint64_t result = sub_244CE9F1C(v11, 1025, (uint64_t)&v8);
    int v6 = v8;
    long long v14 = v9;
    int v15 = v10;
    if (v8) {
      goto LABEL_9;
    }
    uint64_t result = sub_244CEBC2C(&v8, v11);
    int v6 = v8;
    long long v14 = v9;
    int v15 = v10;
    if (v8 || (result = (void *)sub_244CEBC20((uint64_t)v11, 128, 1u, (uint64_t)&v8), int v6 = v8, v14 = v9, v15 = v10, v8))
    {
LABEL_9:
      *(_DWORD *)a3 = v6;
      *(_OWORD *)(a3 + 4) = v14;
      *(_DWORD *)(a3 + 20) = v15;
      return result;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = sub_244CEB850(v11, 0, v13, 0x41u, (void *)a3);
    if (!*(_DWORD *)a3)
    {
      uint64_t result = sub_244CEBC2C(&v8, v11);
      int v6 = v8;
      long long v14 = v9;
      int v15 = v10;
      if (!v8)
      {
        uint64_t result = sub_244CEBC2C(&v8, v11);
        int v6 = v8;
        long long v14 = v9;
        int v15 = v10;
        if (!v8)
        {
          unint64_t v7 = sub_244CEB194(v11);
          uint64_t result = (void *)sub_2446C1548((uint64_t)a2, v7);
          int v6 = 0;
        }
      }
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 1207;
  }
  return result;
}

uint64_t sub_244D939D8@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = 1248;
  int v5 = 47;
  if (a2 && a3)
  {
    unint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = result + 16;
    uint64_t v12 = (unsigned __int16 *)(result + 40);
    while (1)
    {
      uint64_t v13 = 0;
      long long v14 = v12;
      do
      {
        unsigned int v15 = *v14;
        v14 += 16;
        uint64_t result = v15;
        if (!v15) {
          break;
        }
        ++v13;
      }
      while (v13 != 5);
      if (v6 >= v13) {
        break;
      }
      uint64_t v16 = v11 + 32 * v6;
      int v17 = *(unsigned __int16 *)(v16 + 24);
      if (v17 == 789)
      {
        uint64_t v9 = *(void *)(v16 + 16);
        int v8 = 1;
      }
      else if (v17 == 785)
      {
        uint64_t v10 = *(void *)(v11 + 32 * v6 + 16);
        int v7 = 1;
      }
      ++v6;
    }
    if (v7 & v8)
    {
      int v5 = 0;
      *a2 = v10;
      *a3 = v9;
      int v4 = 1276;
    }
    else
    {
      int v4 = 1271;
      int v5 = 216;
    }
  }
  *(_DWORD *)a4 = v5;
  *(void *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

void sub_244D93A9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, unint64_t *a6@<X5>, void *a7@<X6>, void *a8@<X8>)
{
  v24[9] = *MEMORY[0x263EF8340];
  v17[0] = a1;
  v17[1] = a2;
  v16[0] = a3;
  v16[1] = a4;
  int v23 = &unk_26F954540;
  __src = &unk_244EC2D00;
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  sub_244D93C10((uint64_t)v17, &__src, a8);
  if (!*(_DWORD *)a8)
  {
    unsigned char v17[2] = &unk_26F954540;
    long long v18 = *(_OWORD *)__src;
    long long v13 = *((_OWORD *)__src + 2);
    long long v12 = *((_OWORD *)__src + 3);
    char v14 = *((unsigned char *)__src + 64);
    long long v19 = *((_OWORD *)__src + 1);
    long long v20 = v13;
    char v22 = v14;
    long long v21 = v12;
    memmove(v24, __src, 0x41uLL);
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    sub_244D93CC0((uint64_t)v16, a7, a6, a8);
    if (!*(_DWORD *)a8)
    {
      *a8 = 0;
      a8[1] = 0;
      a8[2] = 0;
      sub_244CE72D0((uint64_t)&v23, *a6, a5, a8);
      if (!*(_DWORD *)a8)
      {
        *(_DWORD *)a8 = 0;
        a8[1] = "src/credentials/CHIPCert.cpp";
        *((_DWORD *)a8 + 4) = 1288;
      }
    }
  }
}

void sub_244D93C10(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  v6[53] = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6[45];
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1379;
  }
}

void sub_244D93CC0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v8[53] = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v8, 0, a4);
  if (!*(_DWORD *)a4) {
    sub_244D939D8((uint64_t)v8, a2, a3, (uint64_t)a4);
  }
}

void sub_244D93D70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  unint64_t v8 = 0;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  sub_244D93A9C(a1, a2, a3, a4, a5, &v8, a6, a7);
  if (!*(_DWORD *)a7)
  {
    *(_DWORD *)a7 = 0;
    a7[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a7 + 4) = 1296;
  }
}

uint64_t sub_244D93DD0@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = 0;
    int v5 = (unsigned __int16 *)(result + 40);
    do
    {
      int v6 = *v5;
      v5 += 16;
      if (!v6) {
        break;
      }
      ++v4;
    }
    while (v4 != 5);
    if (v3 >= v4) {
      break;
    }
    uint64_t v7 = result + 16 + 32 * v3++;
    if (*(_WORD *)(v7 + 24) == 789)
    {
      int v8 = 0;
      *a2 = *(void *)(v7 + 16);
      int v9 = 1308;
      goto LABEL_9;
    }
  }
  int v9 = 1312;
  int v8 = 216;
LABEL_9:
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void sub_244D93E48(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v9);
  int v6 = v9;
  __int16 v8 = 1;
  sub_244D90DA8((uint64_t)v9);
  char v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244D90E1C((uint64_t)&v6, *(void *)a1, *(void *)(a1 + 8), 0, a3);
  if (!*(_DWORD *)a3) {
    sub_244D93F14((uint64_t)v9, a2, a3);
  }
  sub_244D90BD0((uint64_t)&v6);
}

uint64_t sub_244D93F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v16 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v6 = a1 + 16;
  uint64_t result = sub_244D91C04(a1 + 16, &v16, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (v16 == 3)
    {
      unint64_t v8 = 0;
      unsigned __int8 v9 = 0;
      while (1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = (unsigned __int16 *)(a1 + 40);
        do
        {
          int v12 = *v11;
          v11 += 16;
          if (!v12) {
            break;
          }
          ++v10;
        }
        while (v10 != 5);
        if (v8 >= v10) {
          break;
        }
        if (*(_WORD *)(v6 + 32 * v8 + 24) == 790)
        {
          if (v9 == 3)
          {
            *(_DWORD *)a3 = 25;
            a3[1] = "src/credentials/CHIPCert.cpp";
            int v15 = 1344;
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v6 + 32 * v8 + 16);
          if (HIDWORD(v13))
          {
            *(_DWORD *)a3 = 47;
            a3[1] = "src/credentials/CHIPCert.cpp";
            int v15 = 1345;
            goto LABEL_21;
          }
          uint64_t v14 = v9++;
          *(_DWORD *)(a2 + 4 * v14) = v13;
        }
        ++v8;
      }
      if (v9 <= 2u) {
        bzero((void *)(a2 + 4 * v9), 12 - 4 * v9);
      }
      uint64_t result = sub_244B2B8BC(a2);
      if (result)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/credentials/CHIPCert.cpp";
        int v15 = 1357;
      }
      else
      {
        *(_DWORD *)a3 = 89;
        a3[1] = "src/credentials/CHIPCert.cpp";
        int v15 = 1355;
      }
    }
    else
    {
      *(_DWORD *)a3 = 47;
      a3[1] = "src/credentials/CHIPCert.cpp";
      int v15 = 1333;
    }
LABEL_21:
    *((_DWORD *)a3 + 4) = v15;
  }
  return result;
}

void sub_244D9409C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  v6[53] = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3) {
    sub_244D93DD0((uint64_t)v6, a2, (uint64_t)a3);
  }
}

void sub_244D9413C(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6[88];
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1387;
  }
}

void sub_244D941EC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v8, 0, a3);
  if (!*(_DWORD *)a3)
  {
    if ((v9 & 0x10) != 0)
    {
      int v7 = 0;
      *a2 = v8[42];
      int v6 = 1396;
    }
    else
    {
      int v6 = 1394;
      int v7 = 216;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = v6;
  }
}

double sub_244D942B4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v12, 0, a3);
  if (!*(_DWORD *)a3)
  {
    long long v7 = v20;
    a2[6] = v19;
    a2[7] = v7;
    long long v8 = v22;
    a2[8] = v21;
    a2[9] = v8;
    long long v9 = v16;
    a2[2] = v15;
    a2[3] = v9;
    long long v10 = v18;
    a2[4] = v17;
    a2[5] = v10;
    double result = *(double *)&v13;
    long long v11 = v14;
    *a2 = v13;
    a2[1] = v11;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1404;
  }
  return result;
}

uint64_t *sub_244D94384@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result[1];
  if (HIDWORD(v4))
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 1412;
    return result;
  }
  sub_244CE9F70((uint64_t)&v10, *result, v4);
  double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
  uint64_t v7 = v9[0];
  if (!LODWORD(v9[0]))
  {
    if (v10 || v11 != 16)
    {
      LODWORD(v6) = 1417;
      LODWORD(v7) = 773;
      long long v8 = "src/credentials/CHIPCert.cpp";
      goto LABEL_31;
    }
    double result = (uint64_t *)sub_244CEA1B4((uint64_t)&v10, (uint64_t)v9);
    uint64_t v7 = v9[0];
    if (!LODWORD(v9[0]))
    {
      double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
      uint64_t v7 = v9[0];
      if (!LODWORD(v9[0]))
      {
        LODWORD(v6) = 1421;
        LODWORD(v7) = 773;
        long long v8 = "src/credentials/CHIPCert.cpp";
        if (v10 || v11 != 16) {
          goto LABEL_31;
        }
        double result = (uint64_t *)sub_244CEA1B4((uint64_t)&v10, (uint64_t)v9);
        uint64_t v7 = v9[0];
        if (!LODWORD(v9[0]))
        {
          double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
          uint64_t v7 = v9[0];
          if (!LODWORD(v9[0]))
          {
            LODWORD(v6) = 1424;
            LODWORD(v7) = 773;
            long long v8 = "src/credentials/CHIPCert.cpp";
            if (v10 != 128 || v11) {
              goto LABEL_31;
            }
            double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
            uint64_t v7 = v9[0];
            if (!LODWORD(v9[0]))
            {
              LODWORD(v6) = 1427;
              LODWORD(v7) = 773;
              long long v8 = "src/credentials/CHIPCert.cpp";
              if (v10 || v11 != 2) {
                goto LABEL_31;
              }
              double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
              uint64_t v7 = v9[0];
              if (!LODWORD(v9[0]))
              {
                LODWORD(v6) = 1430;
                LODWORD(v7) = 773;
                long long v8 = "src/credentials/CHIPCert.cpp";
                if (v10 || v11 != 16) {
                  goto LABEL_31;
                }
                double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
                uint64_t v7 = v9[0];
                if (!LODWORD(v9[0]))
                {
                  LODWORD(v6) = 1433;
                  LODWORD(v7) = 773;
                  long long v8 = "src/credentials/CHIPCert.cpp";
                  if (v10 || v11 != 16) {
                    goto LABEL_31;
                  }
                  double result = (uint64_t *)sub_244CE9FA8((uint64_t)&v10, (uint64_t)v9);
                  uint64_t v7 = v9[0];
                  if (!LODWORD(v9[0]))
                  {
                    LODWORD(v6) = 1436;
                    LODWORD(v7) = 773;
                    long long v8 = "src/credentials/CHIPCert.cpp";
                    if (v10 || v11 != 16) {
                      goto LABEL_31;
                    }
                    *(void *)a3 = 0;
                    *(void *)(a3 + 8) = 0;
                    *(void *)(a3 + 16) = 0;
                    double result = sub_244D92B84(a2, (uint64_t)&v10, a3);
                    if (*(_DWORD *)a3) {
                      return result;
                    }
                    double result = sub_244CEA2B0(v9, &v10);
                    uint64_t v7 = v9[0];
                    if (!LODWORD(v9[0]))
                    {
                      double result = sub_244CEA2B0(v9, &v10);
                      uint64_t v7 = v9[0];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  long long v8 = (const char *)v9[1];
  uint64_t v6 = v9[2];
LABEL_31:
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244D94660(uint64_t result)
{
  for (uint64_t i = 0; i != 160; i += 32)
  {
    uint64_t v2 = result + i;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 23) = 0;
    *(void *)(v2 + 16) = 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result + 24;
  while (*(_WORD *)v4)
  {
    ++v3;
    v4 += 32;
    if (v3 == 5) {
      goto LABEL_6;
    }
  }
  if (v3 >= 5u) {
LABEL_6:
  }
    sub_244E28D5C();
  *(_WORD *)uint64_t v4 = 769;
  *(void *)(v4 - 24) = "*";
  *(void *)(v4 - 16) = 1;
  *(unsigned char *)(v4 + 2) = 0;
  return result;
}

void sub_244D946E0(uint64_t a1@<X0>, void *a2@<X8>)
{
  v4[53] = *MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v4, 1, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244D947A0((uint64_t)v4, a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/credentials/CHIPCert.cpp";
      *((_DWORD *)a2 + 4) = 1518;
    }
  }
}

uint64_t sub_244D947A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_244D933B0(a1, 5, a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t result = sub_244D920E4(a1, (uint64_t)&xmmword_2651A94C8);
    if (!result)
    {
      int v5 = 1494;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 352) != 1)
    {
      int v5 = 1495;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 356))
    {
      int v5 = 1496;
LABEL_8:
      int v6 = 157;
LABEL_9:
      *(_DWORD *)a2 = v6;
      a2[1] = "src/credentials/CHIPCert.cpp";
      *((_DWORD *)a2 + 4) = v5;
      return result;
    }
    uint64_t result = sub_244D91EAC(a1 + 176, a1 + 16);
    if (!result)
    {
      int v5 = 1497;
      goto LABEL_8;
    }
    __int16 v7 = *(_WORD *)(a1 + 374);
    if ((v7 & 0x81) != 1)
    {
      int v5 = 1501;
      goto LABEL_8;
    }
    int v5 = 1504;
    int v6 = 157;
    if ((v7 & 2) == 0) {
      goto LABEL_9;
    }
    if (*(_WORD *)(a1 + 376) != 1) {
      goto LABEL_9;
    }
    int v5 = 1507;
    if ((v7 & 4) == 0 || *(unsigned char *)(a1 + 378) != 3) {
      goto LABEL_9;
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = sub_244D91AB8(a1, a1, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      int v6 = 0;
      int v5 = 1510;
      goto LABEL_9;
    }
  }
  return result;
}

void sub_244D948BC(uint64_t a1@<X0>, __n128 *a2@<X1>, void *a3@<X8>)
{
  v7[8] = *(char **)MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v6, 1, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244D947A0((uint64_t)v6, a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244D949A4(v7, a2, a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/credentials/CHIPCert.cpp";
        *((_DWORD *)a3 + 4) = 1527;
      }
    }
  }
}

__n128 sub_244D949A4@<Q0>(char **a1@<X0>, __n128 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CEC354(*a1, 0x41uLL, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    __n128 result = v6;
    a2[1].n128_u32[0] = v7;
    *a2 = result;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1487;
  }
  return result;
}

void sub_244D94A48(uint64_t a1@<X0>, __n128 *a2@<X1>, void *a3@<X8>)
{
  v7[8] = *(char **)MEMORY[0x263EF8340];
  sub_244D91F6C((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D97378(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244D933B0((uint64_t)v6, 5, a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244D949A4(v7, a2, a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/credentials/CHIPCert.cpp";
        *((_DWORD *)a3 + 4) = 1536;
      }
    }
  }
}

uint64_t sub_244D94B34@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v14 = 1568;
LABEL_15:
    *(_DWORD *)(a3 + 16) = v14;
    return result;
  }
  if (HIDWORD(v4))
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v14 = 1569;
    goto LABEL_15;
  }
  uint64_t v6 = result;
  uint64_t v20 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  unsigned __int32 v7 = sub_244CC4D84(0xF4uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    sub_244CEB170((uint64_t)v16, (uint64_t)v7, 244);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    sub_244DA466C(v9, (unsigned __int8 *)v16, a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v10 = sub_244CEB194(v16);
      (*(void (**)(uint64_t, void *, uint64_t, char *))(*(void *)v6 + 24))(v6, v8, v10, v19);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
        *(_DWORD *)(a3 + 16) = 1552;
      }
    }
    j__free(v8);
    if (*(_DWORD *)a3) {
      return sub_244CED784(v19, 64);
    }
    sub_244CB62B8((uint64_t)v16);
    double v11 = sub_244CB62E0((uint64_t)v16, *(void *)a2, *(void *)(a2 + 8));
    uint64_t v12 = (*(uint64_t (**)(uint64_t, double))(*(void *)v6 + 40))(v6, v11);
    sub_2446CD4B0(&v15, v12 + 8);
    int v18 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_244CB7594(v16, 256, 21, &v18, a3);
    if (*(_DWORD *)a3) {
      return sub_244CED784(v19, 64);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB6ADC((char *)v16, v15, 0x41uLL, a3);
    if (*(_DWORD *)a3) {
      return sub_244CED784(v19, 64);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB6ADC((char *)v16, v19, 0x40uLL, a3);
    if (*(_DWORD *)a3) {
      return sub_244CED784(v19, 64);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB7708((uint64_t)v16, v18, a3);
    if (*(_DWORD *)a3) {
      return sub_244CED784(v19, 64);
    }
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 1563;
    sub_2446C1548(a2, v17);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v13 = 1582;
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    int v13 = 1543;
  }
  *(_DWORD *)(a3 + 16) = v13;
  return sub_244CED784(v19, 64);
}

unsigned char *sub_244D94E64@<X0>(unsigned char *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*result || (uint64_t v6 = (uint64_t)result, result[1] != 3))
  {
    LODWORD(a5) = 402;
    LODWORD(a4) = 773;
LABEL_7:
    uint64_t v8 = "src/credentials/CHIPCertFromX509.cpp";
    goto LABEL_8;
  }
  __n128 result = sub_244CEA378(result, (uint64_t)v19);
  a4 = *(double *)v19;
  if (LODWORD(v19[0])) {
    goto LABEL_5;
  }
  __n128 result = (unsigned char *)sub_244CE9FA8(v6, (uint64_t)v19);
  a4 = *(double *)v19;
  if (LODWORD(v19[0])) {
    goto LABEL_5;
  }
  LODWORD(a5) = 405;
  LODWORD(a4) = 773;
  uint64_t v8 = "src/credentials/CHIPCertFromX509.cpp";
  if (*(unsigned char *)v6 || *(unsigned char *)(v6 + 1) != 16) {
    goto LABEL_8;
  }
  __n128 result = (unsigned char *)sub_244CEA1B4(v6, (uint64_t)v19);
  a4 = *(double *)v19;
  if (LODWORD(v19[0]) || (__n128 result = (unsigned char *)sub_244CE9FA8(v6, (uint64_t)v19), a4 = *(double *)v19, LODWORD(v19[0])))
  {
LABEL_5:
    uint64_t v8 = (const char *)v19[1];
    a5 = *(double *)&v19[2];
LABEL_8:
    *(double *)a3 = a4;
    *(void *)(a3 + 8) = v8;
    *(double *)(a3 + 16) = a5;
    return result;
  }
  LODWORD(a5) = 408;
  LODWORD(a4) = 773;
  uint64_t v8 = "src/credentials/CHIPCertFromX509.cpp";
  if (*(unsigned char *)v6 || *(unsigned char *)(v6 + 1) != 2) {
    goto LABEL_8;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_2446C1098(v18, *(void *)(v6 + 8), *(unsigned int *)(v6 + 16));
  __n128 result = sub_244D93428((char *)v19, v18[0], (uint64_t)v18[1], 0x20u, a3);
  if (!*(_DWORD *)a3)
  {
    __n128 result = (unsigned char *)sub_244CE9FA8(v6, (uint64_t)&v15);
    a4 = v15;
    if (LODWORD(v15))
    {
LABEL_18:
      uint64_t v8 = v16;
      a5 = v17;
      goto LABEL_8;
    }
    LODWORD(a5) = 413;
    LODWORD(a4) = 773;
    uint64_t v8 = "src/credentials/CHIPCertFromX509.cpp";
    if (*(unsigned char *)v6 || *(unsigned char *)(v6 + 1) != 2) {
      goto LABEL_8;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_2446C1098(v14, *(void *)(v6 + 8), *(unsigned int *)(v6 + 16));
    __n128 result = sub_244D93428(v20, v14[0], (uint64_t)v14[1], 0x20u, a3);
    if (!*(_DWORD *)a3)
    {
      __n128 result = (unsigned char *)sub_244CE9FA8(v6, (uint64_t)&v15);
      double v9 = v17;
      a4 = v15;
      if (LODWORD(v15))
      {
        if (LODWORD(v15) != 768) {
          goto LABEL_32;
        }
        __n128 result = sub_244CEA2B0(&v15, v6);
        if (LODWORD(v15))
        {
          a4 = v15;
          goto LABEL_18;
        }
        __n128 result = (unsigned char *)sub_244CE9FA8(v6, (uint64_t)&v15);
        double v9 = v17;
        a4 = v15;
        if (LODWORD(v15))
        {
          if (LODWORD(v15) == 768)
          {
            __n128 result = sub_244CEA2B0(&v15, v6);
            a4 = v15;
            double v11 = v16;
            a5 = v17;
            double v12 = v17;
            int v13 = HIDWORD(v15);
            if (LODWORD(v15))
            {
              uint64_t v8 = v16;
              goto LABEL_8;
            }
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            __n128 result = sub_244CB6B18(a2, (char *)v19, 0x40u, a3);
            if (!*(_DWORD *)a3)
            {
              a5 = v12;
              HIDWORD(a4) = v13;
              LODWORD(a4) = 0;
              uint64_t v8 = v11;
              goto LABEL_8;
            }
            return result;
          }
LABEL_32:
          uint64_t v8 = v16;
          a5 = v9;
          goto LABEL_8;
        }
        LODWORD(a4) = 773;
        int v10 = 419;
      }
      else
      {
        LODWORD(a4) = 773;
        int v10 = 417;
      }
      a5 = COERCE_DOUBLE(__PAIR64__(HIDWORD(v9), v10));
      goto LABEL_7;
    }
  }
  return result;
}

__n64 sub_244D95190@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  result.n64_f64[0] = sub_244CB62B8((uint64_t)v20);
  if (!a2)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/credentials/CHIPCertFromX509.cpp";
    int v11 = 559;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v11;
    return result;
  }
  if (HIDWORD(a2))
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/credentials/CHIPCertFromX509.cpp";
    int v11 = 560;
    goto LABEL_9;
  }
  sub_244CE9F70((uint64_t)v22, a1, a2);
  sub_244CB62E0((uint64_t)v20, *(void *)a3, *(void *)(a3 + 8));
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v30 = 0;
  __int16 v29 = 0;
  int v28 = 0;
  sub_244CB7594(v20, 256, 21, &v28, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  unsigned __int32 v12 = 773;
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16)
  {
    LODWORD(v9) = 438;
LABEL_77:
    result.n64_u32[0] = v12;
LABEL_78:
    int v10 = "src/credentials/CHIPCertFromX509.cpp";
    goto LABEL_6;
  }
  sub_244CEA1B4((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  LODWORD(v9) = 442;
  result.n64_u32[0] = 773;
  int v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16) {
    goto LABEL_6;
  }
  sub_244CEA1B4((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  LODWORD(v9) = 445;
  result.n64_u32[0] = 773;
  int v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) != 128 || BYTE1(v22[0])) {
    goto LABEL_6;
  }
  sub_244CEA1B4((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  LODWORD(v9) = 448;
  result.n64_u32[0] = 773;
  int v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 2) {
    goto LABEL_6;
  }
  sub_244CEA3F0(v22, &v30, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  if (v30 != 2)
  {
    int v18 = 451;
    goto LABEL_80;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  int v14 = v25;
  int v13 = HIDWORD(v25);
  int v15 = HIDWORD(v27);
  if (!v25)
  {
    result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
    result.n64_u32[1] = HIDWORD(v25);
    LODWORD(v9) = vdup_n_s32(0x1C5u).u32[0];
    HIDWORD(v9) = HIDWORD(v27);
    int v10 = "src/credentials/CHIPCertFromX509.cpp";
    goto LABEL_6;
  }
  if (v25 != 768) {
    goto LABEL_95;
  }
  sub_244CEA2B0(&v25, v22);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  LODWORD(v9) = 457;
  result.n64_u32[0] = 773;
  int v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 2) {
    goto LABEL_6;
  }
  sub_244CB6B18((char *)v20, (char *)v22[1], v23, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  LODWORD(v9) = 463;
  result.n64_u32[0] = 773;
  int v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16) {
    goto LABEL_6;
  }
  sub_244CEA1B4((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  LODWORD(v9) = 466;
  result.n64_u32[0] = 773;
  int v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 6) {
    goto LABEL_6;
  }
  sub_244CE9E70((uint64_t)v22, &v29, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  if (v29 != 513)
  {
    int v18 = 468;
    goto LABEL_80;
  }
  sub_244CB68B8();
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  int v14 = v25;
  int v13 = HIDWORD(v25);
  int v15 = HIDWORD(v27);
  if (!v25)
  {
    result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
    result.n64_u32[1] = HIDWORD(v25);
    unsigned int v19 = 473;
    goto LABEL_84;
  }
  if (v25 != 768) {
    goto LABEL_95;
  }
  sub_244CEA2B0(&v25, v22);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244D95A2C((uint64_t)v22, (char *)v20, 3, &v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244D95AAC(v22, &v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244D95A2C((uint64_t)v22, (char *)v20, 6, &v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244D95D50((uint64_t)v22, (char *)v20, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if (v25) {
    goto LABEL_5;
  }
  sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
  int v14 = v25;
  if (v25)
  {
LABEL_52:
    int v13 = HIDWORD(v25);
    long long v16 = v26;
    int v17 = LODWORD(v27);
    int v15 = HIDWORD(v27);
    if (v14 != 768) {
      goto LABEL_96;
    }
    sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
    int v14 = v25;
    int v13 = HIDWORD(v25);
    int v15 = HIDWORD(v27);
    if (v25)
    {
      if (v25 != 768) {
        goto LABEL_95;
      }
      sub_244CEA2B0(&v25, v22);
      result.n64_u64[0] = v25;
      if (v25) {
        goto LABEL_5;
      }
      sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if (v25) {
        goto LABEL_5;
      }
      LODWORD(v9) = 528;
      result.n64_u32[0] = 773;
      int v10 = "src/credentials/CHIPCertFromX509.cpp";
      if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16) {
        goto LABEL_6;
      }
      sub_244CEA1B4((uint64_t)v22, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if (v25) {
        goto LABEL_5;
      }
      __int16 v24 = 0;
      sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if (v25) {
        goto LABEL_5;
      }
      LODWORD(v9) = 533;
      result.n64_u32[0] = 773;
      int v10 = "src/credentials/CHIPCertFromX509.cpp";
      if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 6) {
        goto LABEL_6;
      }
      sub_244CE9E70((uint64_t)v22, &v24, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if (v25) {
        goto LABEL_5;
      }
      if (v24 == v29)
      {
        sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
        int v14 = v25;
        int v13 = HIDWORD(v25);
        int v15 = HIDWORD(v27);
        if (v25)
        {
          if (v25 != 768) {
            goto LABEL_95;
          }
          sub_244CEA2B0(&v25, v22);
          result.n64_u64[0] = v25;
          if (v25) {
            goto LABEL_5;
          }
          sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
          result.n64_u64[0] = v25;
          if (v25) {
            goto LABEL_5;
          }
          LODWORD(v9) = 541;
          result.n64_u32[0] = 773;
          int v10 = "src/credentials/CHIPCertFromX509.cpp";
          if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 3) {
            goto LABEL_6;
          }
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244D94E64(v22, (char *)v20, a4, result.n64_f64[0], v9);
          if (*(_DWORD *)a4) {
            return result;
          }
          sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
          int v14 = v25;
          int v13 = HIDWORD(v25);
          int v15 = HIDWORD(v27);
          if (v25)
          {
            if (v25 == 768)
            {
              sub_244CEA2B0(&v25, v22);
              result.n64_u64[0] = v25;
              if (!v25)
              {
                sub_244CB7708((uint64_t)v20, v28, (uint64_t)&v25);
                int v14 = v25;
                int v13 = HIDWORD(v25);
                long long v16 = v26;
                int v17 = LODWORD(v27);
                int v15 = HIDWORD(v27);
                goto LABEL_96;
              }
LABEL_5:
              int v10 = v26;
              double v9 = v27;
LABEL_6:
              *(double *)a4 = result.n64_f64[0];
              *(void *)(a4 + 8) = v10;
              *(double *)(a4 + 16) = v9;
              return result;
            }
LABEL_95:
            long long v16 = v26;
            int v17 = LODWORD(v27);
LABEL_96:
            *(_DWORD *)a4 = v14;
            *(_DWORD *)(a4 + 4) = v13;
            *(void *)(a4 + 8) = v16;
            *(_DWORD *)(a4 + 16) = v17;
            *(_DWORD *)(a4 + 20) = v15;
            if (v14) {
              return result;
            }
            goto LABEL_97;
          }
          result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
          result.n64_u32[1] = HIDWORD(v25);
          unsigned int v19 = 545;
        }
        else
        {
          result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
          result.n64_u32[1] = HIDWORD(v25);
          unsigned int v19 = 538;
        }
        goto LABEL_84;
      }
      int v18 = 536;
      goto LABEL_80;
    }
    result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
    result.n64_u32[1] = HIDWORD(v25);
    unsigned int v19 = 524;
LABEL_84:
    LODWORD(v9) = vdup_n_s32(v19).u32[0];
    HIDWORD(v9) = v15;
    goto LABEL_78;
  }
  if (LOBYTE(v22[0]) == 128)
  {
    switch(BYTE1(v22[0]))
    {
      case 1u:
        int v18 = 496;
        break;
      case 2u:
        int v18 = 503;
        break;
      case 3u:
        sub_244CEA1B4((uint64_t)v22, (uint64_t)&v25);
        result.n64_u64[0] = v25;
        if (v25) {
          goto LABEL_5;
        }
        sub_244D96210((unsigned __int8 *)v22, (char *)v20, (uint64_t)&v25);
        result.n64_u64[0] = v25;
        if (v25) {
          goto LABEL_5;
        }
        sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
        int v14 = v25;
        int v13 = HIDWORD(v25);
        int v15 = HIDWORD(v27);
        if (!v25)
        {
          result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
          result.n64_u32[1] = HIDWORD(v25);
          unsigned int v19 = 514;
          goto LABEL_84;
        }
        if (v25 != 768) {
          goto LABEL_95;
        }
        sub_244CEA2B0(&v25, v22);
        result.n64_u64[0] = v25;
        if (v25) {
          goto LABEL_5;
        }
        sub_244CE9FA8((uint64_t)v22, (uint64_t)&v25);
        int v14 = v25;
        goto LABEL_52;
      default:
        goto LABEL_97;
    }
LABEL_80:
    LODWORD(v9) = v18;
    unsigned __int32 v12 = 774;
    goto LABEL_77;
  }
LABEL_97:
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  result.n64_f64[0] = sub_244CB6414((uint64_t)v20, a4);
  if (!*(_DWORD *)a4)
  {
    sub_2446C1548(a3, v21);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/credentials/CHIPCertFromX509.cpp";
    int v11 = 572;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_244D95A2C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_244D9200C((uint64_t)v10);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244D92B84((uint64_t)v10, a1, (uint64_t)a4);
  if (!*(_DWORD *)a4) {
    sub_244D9248C((uint64_t)v10, a2, a3, a4);
  }
  return nullsub_13(v10, v8);
}

void sub_244D95AAC(unsigned char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = 0;
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v9) {
    goto LABEL_2;
  }
  uint64_t v6 = 0x3F0000003FLL;
  if (*a1 || a1[1] != 16) {
    goto LABEL_8;
  }
  sub_244CEA1B4((uint64_t)a1, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v9) {
    goto LABEL_2;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v9) {
    goto LABEL_2;
  }
  uint64_t v6 = 0x4100000041;
  if (*a1)
  {
LABEL_8:
    LODWORD(v4) = 773;
    goto LABEL_9;
  }
  int v7 = a1[1];
  if (v7 == 24)
  {
    sub_244CEA6AC((uint64_t)a1, (uint64_t)v13, (uint64_t)&v9);
  }
  else
  {
    if (v7 != 23) {
      goto LABEL_8;
    }
    sub_244CEA5B8((uint64_t)a1, (uint64_t)v13, (uint64_t)&v9);
  }
  uint64_t v4 = v9;
  int v5 = v10;
  uint64_t v6 = v11;
  if (v9) {
    goto LABEL_10;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244D930C8(v13, (_DWORD *)&v12 + 1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_244CE9FA8((uint64_t)a1, (uint64_t)&v9);
    uint64_t v4 = v9;
    if (!v9)
    {
      uint64_t v6 = 0x4400000044;
      if (*a1) {
        goto LABEL_8;
      }
      int v8 = a1[1];
      if (v8 == 24)
      {
        sub_244CEA6AC((uint64_t)a1, (uint64_t)v13, (uint64_t)&v9);
      }
      else
      {
        if (v8 != 23)
        {
          LODWORD(v4) = 773;
          int v5 = "src/credentials/CHIPCertFromX509.cpp";
          goto LABEL_10;
        }
        sub_244CEA5B8((uint64_t)a1, (uint64_t)v13, (uint64_t)&v9);
      }
      uint64_t v4 = v9;
      int v5 = v10;
      uint64_t v6 = v11;
      if (v9)
      {
LABEL_10:
        *a2 = v4;
        a2[1] = v5;
        a2[2] = v6;
        return;
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244D930C8(v13, &v12, (uint64_t)a2);
      if (!*(_DWORD *)a2)
      {
        if ((v12 - 1) < HIDWORD(v12))
        {
          *(_DWORD *)a2 = 773;
          a2[1] = "src/credentials/CHIPCertFromX509.cpp";
          *((_DWORD *)a2 + 4) = 74;
          return;
        }
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_244CB694C();
        if (!*(_DWORD *)a2)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          sub_244CB694C();
          if (!*(_DWORD *)a2)
          {
            sub_244CE9FA8((uint64_t)a1, (uint64_t)&v9);
            uint64_t v4 = v9;
            uint64_t v6 = v11;
            if (v9)
            {
              if (v9 != 768)
              {
                int v5 = v10;
                goto LABEL_10;
              }
              sub_244CEA2B0(&v9, a1);
              uint64_t v4 = v9;
              goto LABEL_2;
            }
            LODWORD(v4) = 773;
            LODWORD(v6) = 80;
LABEL_9:
            int v5 = "src/credentials/CHIPCertFromX509.cpp";
            goto LABEL_10;
          }
        }
      }
      return;
    }
LABEL_2:
    int v5 = v10;
    uint64_t v6 = v11;
    goto LABEL_10;
  }
}

double sub_244D95D50@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v13 = 0;
  sub_244CE9FA8(a1, (uint64_t)&v11);
  double result = *(double *)&v11;
  *(_OWORD *)a3 = v11;
  *(void *)(a3 + 16) = v12;
  if (!*(_DWORD *)a3)
  {
    if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 1) != 16)
    {
      *(_DWORD *)a3 = 773;
      *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
      int v7 = 92;
      goto LABEL_19;
    }
    sub_244CEA1B4(a1, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)a3 = v11;
    *(void *)(a3 + 16) = v12;
    if (!*(_DWORD *)a3)
    {
      sub_244CE9FA8(a1, (uint64_t)&v11);
      double result = *(double *)&v11;
      *(_OWORD *)a3 = v11;
      *(void *)(a3 + 16) = v12;
      if (!*(_DWORD *)a3)
      {
        if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 1) != 16)
        {
          *(_DWORD *)a3 = 773;
          *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
          int v7 = 96;
          goto LABEL_19;
        }
        sub_244CEA1B4(a1, (uint64_t)&v11);
        double result = *(double *)&v11;
        *(_OWORD *)a3 = v11;
        *(void *)(a3 + 16) = v12;
        if (!*(_DWORD *)a3)
        {
          sub_244CE9FA8(a1, (uint64_t)&v11);
          double result = *(double *)&v11;
          *(_OWORD *)a3 = v11;
          *(void *)(a3 + 16) = v12;
          if (!*(_DWORD *)a3)
          {
            if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 1) != 6)
            {
              *(_DWORD *)a3 = 773;
              *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
              int v7 = 99;
              goto LABEL_19;
            }
            sub_244CE9E70(a1, (_WORD *)&v13 + 1, (uint64_t)&v11);
            double result = *(double *)&v11;
            *(_OWORD *)a3 = v11;
            *(void *)(a3 + 16) = v12;
            if (*(_DWORD *)a3) {
              return result;
            }
            if (HIWORD(v13) != 257)
            {
              *(_DWORD *)a3 = 774;
              *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
              int v7 = 102;
              goto LABEL_19;
            }
            sub_244CB68B8();
            double result = *(double *)&v11;
            *(_OWORD *)a3 = v11;
            *(void *)(a3 + 16) = v12;
            if (!*(_DWORD *)a3)
            {
              sub_244CE9FA8(a1, (uint64_t)&v11);
              double result = *(double *)&v11;
              *(_OWORD *)a3 = v11;
              *(void *)(a3 + 16) = v12;
              if (!*(_DWORD *)a3)
              {
                if (*(unsigned char *)a1)
                {
LABEL_17:
                  *(_DWORD *)a3 = 773;
                  *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                  int v7 = 123;
LABEL_19:
                  *(_DWORD *)(a3 + 16) = v7;
                  return result;
                }
                int v8 = *(unsigned __int8 *)(a1 + 1);
                if (v8 == 5)
                {
                  *(_DWORD *)a3 = 774;
                  *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                  int v7 = 120;
                  goto LABEL_19;
                }
                if (v8 != 6)
                {
                  if (v8 == 16)
                  {
                    *(_DWORD *)a3 = 774;
                    *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                    int v7 = 116;
                    goto LABEL_19;
                  }
                  goto LABEL_17;
                }
                sub_244CE9E70(a1, &v13, (uint64_t)&v11);
                double result = *(double *)&v11;
                *(_OWORD *)a3 = v11;
                *(void *)(a3 + 16) = v12;
                if (!*(_DWORD *)a3)
                {
                  if (sub_244CE9DE8((unsigned __int16)v13) != 1024)
                  {
                    *(_DWORD *)a3 = 774;
                    *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                    int v7 = 128;
                    goto LABEL_19;
                  }
                  sub_244CB68B8();
                  double result = *(double *)&v11;
                  *(_OWORD *)a3 = v11;
                  *(void *)(a3 + 16) = v12;
                  if (!*(_DWORD *)a3)
                  {
                    sub_244CE9FA8(a1, (uint64_t)&v11);
                    double result = *(double *)&v11;
                    *(_OWORD *)a3 = v11;
                    *(void *)(a3 + 16) = v12;
                    if (*(_DWORD *)a3 == 768)
                    {
                      *(_DWORD *)a3 = 0;
                      *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                      *(_DWORD *)(a3 + 16) = 133;
                      sub_244CEA2B0(&v11, a1);
                      double result = *(double *)&v11;
                      *(_OWORD *)a3 = v11;
                      *(void *)(a3 + 16) = v12;
                      if (!*(_DWORD *)a3)
                      {
                        sub_244CE9FA8(a1, (uint64_t)&v11);
                        double result = *(double *)&v11;
                        *(_OWORD *)a3 = v11;
                        *(void *)(a3 + 16) = v12;
                        if (!*(_DWORD *)a3)
                        {
                          if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 1) != 3)
                          {
                            *(_DWORD *)a3 = 773;
                            *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                            int v7 = 136;
                            goto LABEL_19;
                          }
                          int v9 = *(_DWORD *)(a1 + 16);
                          if (!v9)
                          {
                            *(_DWORD *)a3 = 773;
                            *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                            int v7 = 139;
                            goto LABEL_19;
                          }
                          int v10 = *(unsigned char **)(a1 + 8);
                          if (*v10)
                          {
                            *(_DWORD *)a3 = 773;
                            *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                            int v7 = 142;
                            goto LABEL_19;
                          }
                          sub_244CB6B18(a2, v10 + 1, v9 - 1, (uint64_t)&v11);
                          double result = *(double *)&v11;
                          *(_OWORD *)a3 = v11;
                          *(void *)(a3 + 16) = v12;
                          if (!*(_DWORD *)a3)
                          {
                            sub_244CE9FA8(a1, (uint64_t)&v11);
                            double result = *(double *)&v11;
                            *(_OWORD *)a3 = v11;
                            *(void *)(a3 + 16) = v12;
                            if (*(_DWORD *)a3 == 768)
                            {
                              *(_DWORD *)a3 = 0;
                              *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                              *(_DWORD *)(a3 + 16) = 149;
                              sub_244CEA2B0(&v11, a1);
                              double result = *(double *)&v11;
                              *(_OWORD *)a3 = v11;
                              *(void *)(a3 + 16) = v12;
                              return result;
                            }
                            if (!*(_DWORD *)a3)
                            {
                              *(_DWORD *)a3 = 773;
                              *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                              int v7 = 149;
                              goto LABEL_19;
                            }
                          }
                        }
                      }
                    }
                    else if (!*(_DWORD *)a3)
                    {
                      *(_DWORD *)a3 = 773;
                      *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                      int v7 = 133;
                      goto LABEL_19;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_244D96210(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v18 = 0;
  sub_244CB7594(a2, 10, 23, &v18, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
    *(_OWORD *)a3 = v21;
    *(void *)(a3 + 16) = v22;
    if (!*(_DWORD *)a3)
    {
      if (*a1 || a1[1] != 16)
      {
        *(_DWORD *)a3 = 773;
        *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
        int v17 = 374;
      }
      else
      {
        sub_244CEA1B4((uint64_t)a1, (uint64_t)&v21);
        *(_OWORD *)a3 = v21;
        *(void *)(a3 + 16) = v22;
        if (*(_DWORD *)a3) {
          return;
        }
        uint64_t v6 = "src/credentials/CHIPCertFromX509.cpp";
        while (1)
        {
          sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
          *(_OWORD *)a3 = v21;
          *(void *)(a3 + 16) = v22;
          if (*(_DWORD *)a3) {
            break;
          }
          int v27 = 0;
          unsigned __int16 v26 = 0;
          BOOL v25 = 0;
          __int16 v24 = 0;
          unsigned int v23 = 0;
          sub_244CEA32C((uint64_t)a1, &v24, &v23, (uint64_t)&v21);
          int v7 = v21;
          int v8 = DWORD1(v21);
          int v9 = HIDWORD(v22);
          if (v21) {
            goto LABEL_119;
          }
          int v10 = 168;
          int v7 = 773;
          if (*a1 || a1[1] != 16) {
            goto LABEL_148;
          }
          sub_244CEA1B4((uint64_t)a1, (uint64_t)&v21);
          int v7 = v21;
          if (v21) {
            goto LABEL_120;
          }
          sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
          int v7 = v21;
          int v8 = DWORD1(v21);
          int v9 = HIDWORD(v22);
          if (v21) {
            goto LABEL_119;
          }
          int v10 = 171;
          int v7 = 773;
          if (*a1 || a1[1] != 6) {
            goto LABEL_148;
          }
          sub_244CE9E70((uint64_t)a1, &v26, (uint64_t)&v21);
          int v7 = v21;
          int v8 = DWORD1(v21);
          int v9 = HIDWORD(v22);
          if (v21) {
            goto LABEL_119;
          }
          if (v26 != 0xFFFF && sub_244CE9DE8(v26) != 1280)
          {
            int v10 = 176;
            goto LABEL_147;
          }
          sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
          int v7 = v21;
          int v8 = DWORD1(v21);
          int v9 = HIDWORD(v22);
          if (v21) {
            goto LABEL_119;
          }
          if (*a1) {
            goto LABEL_125;
          }
          int v11 = a1[1];
          if (v11 == 1)
          {
            sub_244CEA524((uint64_t)a1, &v25, (uint64_t)&v21);
            int v7 = v21;
            int v8 = DWORD1(v21);
            int v9 = HIDWORD(v22);
            if (v21) {
              goto LABEL_119;
            }
            if (!v25)
            {
              int v10 = 185;
LABEL_147:
              int v7 = 773;
LABEL_148:
              *(_DWORD *)a3 = v7;
              *(_DWORD *)(a3 + 4) = v8;
              *(void *)(a3 + 8) = v6;
              *(_DWORD *)(a3 + 16) = v10;
              *(_DWORD *)(a3 + 20) = v9;
              return;
            }
            sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
            int v7 = v21;
            int v8 = DWORD1(v21);
            int v9 = HIDWORD(v22);
            if (v21) {
              goto LABEL_119;
            }
            if (*a1)
            {
LABEL_125:
              int v10 = 194;
              goto LABEL_147;
            }
            int v11 = a1[1];
          }
          if (v11 != 4) {
            goto LABEL_125;
          }
          sub_244CEA378(a1, (uint64_t)&v21);
          int v7 = v21;
          int v8 = DWORD1(v21);
          int v9 = HIDWORD(v22);
          if (v21) {
            goto LABEL_119;
          }
          switch(v26)
          {
            case 0x501u:
              if (!v25)
              {
                int v10 = 264;
                goto LABEL_147;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21) {
                goto LABEL_119;
              }
              int v10 = 267;
              int v7 = 773;
              if (*a1 || a1[1] != 16) {
                goto LABEL_148;
              }
              sub_244CEA1B4((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              BOOL v20 = 0;
              unint64_t v19 = -1;
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              if (!v21 && !*a1)
              {
                int v12 = a1[1];
                if (v12 == 1)
                {
                  sub_244CEA524((uint64_t)a1, &v20, (uint64_t)&v21);
                  int v7 = v21;
                  int v8 = DWORD1(v21);
                  int v9 = HIDWORD(v22);
                  if (v21) {
                    goto LABEL_119;
                  }
                  if (!v20)
                  {
                    int v10 = 279;
                    goto LABEL_147;
                  }
                  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
                  int v12 = a1[1];
                  BOOL v13 = (v21 | *a1) == 0;
                }
                else
                {
                  BOOL v13 = 1;
                }
                if (v13 && v12 == 2)
                {
                  sub_244CEA3F0(a1, &v19, (uint64_t)&v21);
                  int v7 = v21;
                  int v8 = DWORD1(v21);
                  int v9 = HIDWORD(v22);
                  if (v21) {
                    goto LABEL_119;
                  }
                  if (v19 > 0xFF)
                  {
                    int v10 = 290;
                    goto LABEL_147;
                  }
                  if (!v20)
                  {
                    int v10 = 293;
                    goto LABEL_147;
                  }
                }
              }
              sub_244CB7594(a2, 1, 21, &v27, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CB65C8();
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              if (v19 != -1)
              {
                sub_244CB68B8();
                int v7 = v21;
                if (v21) {
                  goto LABEL_120;
                }
              }
              sub_244CB7708((uint64_t)a2, v27, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v14 = v21;
              if (v21 == 768) {
                goto LABEL_101;
              }
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (!v21)
              {
                int v10 = 313;
                goto LABEL_147;
              }
              goto LABEL_109;
            case 0x502u:
              if (!v25)
              {
                int v10 = 240;
                goto LABEL_147;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21) {
                goto LABEL_119;
              }
              int v10 = 243;
              int v7 = 773;
              if (*a1 || a1[1] != 3) {
                goto LABEL_148;
              }
              LODWORD(v19) = 0;
              sub_244CEA7A0((uint64_t)a1, (unsigned int *)&v19, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21) {
                goto LABEL_119;
              }
              if (WORD1(v19))
              {
                int v10 = 248;
                goto LABEL_147;
              }
              if ((v19 & 0xFF00) != 0)
              {
                int v10 = 256;
                goto LABEL_147;
              }
              sub_244CB694C();
LABEL_102:
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v14 = v21;
              if (v21 != 768)
              {
                int v8 = DWORD1(v21);
                int v9 = HIDWORD(v22);
                if (!v21)
                {
                  int v10 = 357;
                  goto LABEL_147;
                }
LABEL_109:
                uint64_t v15 = *((void *)&v21 + 1);
                int v16 = v22;
                goto LABEL_112;
              }
              sub_244CEA2B0(&v21, a1);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v14 = v21;
              if (v21 != 768)
              {
                int v8 = DWORD1(v21);
                int v9 = HIDWORD(v22);
                if (!v21)
                {
                  int v10 = 359;
                  goto LABEL_147;
                }
                goto LABEL_109;
              }
              sub_244CEA2B0(&v21, a1);
              int v14 = v21;
LABEL_111:
              int v8 = DWORD1(v21);
              uint64_t v15 = *((void *)&v21 + 1);
              int v16 = v22;
              int v9 = HIDWORD(v22);
LABEL_112:
              *(_DWORD *)a3 = v14;
              *(_DWORD *)(a3 + 4) = v8;
              *(void *)(a3 + 8) = v15;
              *(_DWORD *)(a3 + 16) = v16;
              *(_DWORD *)(a3 + 20) = v9;
              if (v14) {
                return;
              }
              break;
            case 0x503u:
              if (!v25)
              {
                int v10 = 318;
                goto LABEL_147;
              }
              sub_244CB7594(a2, 3, 22, &v27, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21) {
                goto LABEL_119;
              }
              int v10 = 324;
              int v7 = 773;
              if (*a1 || a1[1] != 16) {
                goto LABEL_148;
              }
              sub_244CEA1B4((uint64_t)a1, (uint64_t)&v21);
              while (1)
              {
                int v7 = v21;
                if (v21) {
                  goto LABEL_120;
                }
                sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
                int v14 = v21;
                if (v21) {
                  break;
                }
                LOWORD(v19) = 0;
                sub_244CE9E70((uint64_t)a1, &v19, (uint64_t)&v21);
                int v7 = v21;
                int v8 = DWORD1(v21);
                int v9 = HIDWORD(v22);
                if (v21) {
                  goto LABEL_119;
                }
                if ((unsigned __int16)v19 == 0xFFFF)
                {
                  int v10 = 332;
                  int v7 = 774;
                  goto LABEL_148;
                }
                if (sub_244CE9DE8((unsigned __int16)v19) != 1536)
                {
                  int v10 = 333;
                  goto LABEL_147;
                }
                sub_244CB68B8();
              }
              if (v21 != 768) {
                goto LABEL_111;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v14 = v21;
              if (v21 != 768)
              {
                int v8 = DWORD1(v21);
                int v9 = HIDWORD(v22);
                if (!v21)
                {
                  int v10 = 343;
                  goto LABEL_147;
                }
                goto LABEL_109;
              }
              sub_244CEA2B0(&v21, a1);
              int v7 = v21;
              if (v21)
              {
LABEL_120:
                int v8 = DWORD1(v21);
                uint64_t v6 = (const char *)*((void *)&v21 + 1);
                int v10 = v22;
                int v9 = HIDWORD(v22);
                goto LABEL_148;
              }
              sub_244CB7708((uint64_t)a2, v27, (uint64_t)&v21);
              goto LABEL_102;
            case 0x504u:
              if (v25)
              {
                int v10 = 226;
                goto LABEL_147;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21) {
                goto LABEL_119;
              }
              int v10 = 230;
              int v7 = 773;
              if (*a1 || a1[1] != 4) {
                goto LABEL_148;
              }
              if (*((_DWORD *)a1 + 4) != 20)
              {
                int v10 = 232;
                goto LABEL_147;
              }
              sub_244CB6B18(a2, *((char **)a1 + 1), 0x14u, (uint64_t)&v21);
              goto LABEL_102;
            case 0x505u:
              if (v25)
              {
                int v10 = 199;
                goto LABEL_147;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21) {
                goto LABEL_119;
              }
              int v10 = 202;
              int v7 = 773;
              if (*a1 || a1[1] != 16) {
                goto LABEL_148;
              }
              sub_244CEA1B4((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v7 = v21;
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (v21)
              {
LABEL_119:
                uint64_t v6 = (const char *)*((void *)&v21 + 1);
                int v10 = v22;
                goto LABEL_148;
              }
              int v10 = 210;
              int v7 = 773;
              if (*a1 != 128 || a1[1]) {
                goto LABEL_148;
              }
              if (a1[20])
              {
                int v10 = 212;
                goto LABEL_147;
              }
              if (*((_DWORD *)a1 + 4) != 20)
              {
                int v10 = 213;
                goto LABEL_147;
              }
              sub_244CB6B18(a2, *((char **)a1 + 1), 0x14u, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              if (v21 != 768)
              {
                int v8 = DWORD1(v21);
                int v9 = HIDWORD(v22);
                int v10 = 219;
                goto LABEL_147;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              int v14 = v21;
              if (v21 == 768)
              {
LABEL_101:
                sub_244CEA2B0(&v21, a1);
                goto LABEL_102;
              }
              int v8 = DWORD1(v21);
              int v9 = HIDWORD(v22);
              if (!v21)
              {
                int v10 = 221;
                goto LABEL_147;
              }
              goto LABEL_109;
            default:
              sub_244CB6B18(a2, v24, v23, (uint64_t)&v21);
              int v7 = v21;
              if (v21) {
                goto LABEL_120;
              }
              sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
              goto LABEL_102;
          }
        }
        if (*(_DWORD *)a3 != 768) {
          return;
        }
        sub_244CE9FA8((uint64_t)a1, (uint64_t)&v21);
        *(_OWORD *)a3 = v21;
        *(void *)(a3 + 16) = v22;
        if (*(_DWORD *)a3 == 768)
        {
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
          *(_DWORD *)(a3 + 16) = 387;
          sub_244CEA2B0(&v21, a1);
          *(_OWORD *)a3 = v21;
          *(void *)(a3 + 16) = v22;
          if (!*(_DWORD *)a3)
          {
            sub_244CB7708((uint64_t)a2, v18, (uint64_t)&v21);
            *(_OWORD *)a3 = v21;
            *(void *)(a3 + 16) = v22;
          }
          return;
        }
        if (*(_DWORD *)a3) {
          return;
        }
        *(_DWORD *)a3 = 773;
        *(void *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
        int v17 = 387;
      }
      *(_DWORD *)(a3 + 16) = v17;
    }
  }
}

uint64_t sub_244D96BFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v13);
  sub_244D90FFC(v14, v8);
  sub_244CB39B8((uint64_t)v13, a1, a2);
  sub_244CEB170((uint64_t)v12, *a3, a3[1]);
  sub_244D90DA8((uint64_t)v14);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244D96CFC((uint64_t)v13, v12, (unsigned __int8 *)v12, (uint64_t)v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    unint64_t v10 = sub_244CEB194(v12);
    sub_2446C1548((uint64_t)a3, v10);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/credentials/CHIPCertToX509.cpp";
    *((_DWORD *)a4 + 4) = 655;
  }
  return nullsub_13(v14, v9);
}

__n128 sub_244D96CFC@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (sub_244CB3B68(a1) != -1
    || (*(void *)a5 = 0,
        *(void *)(a5 + 8) = 0,
        *(void *)(a5 + 16) = 0,
        sub_244CB4E58(a1, (void *)a5),
        !*(_DWORD *)a5))
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    sub_244CB5530(a1, 21, 256, a5);
    if (!*(_DWORD *)a5)
    {
      int v24 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      sub_244CB4C90(a1, &v24, a5);
      if (!*(_DWORD *)a5)
      {
        int v11 = (_OWORD *)(a5 + 4);
        sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)v30);
        int v12 = *(_DWORD *)v30;
        long long v28 = *(_OWORD *)&v30[4];
        int v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30)
        {
LABEL_5:
          *(_DWORD *)a5 = v12;
          result.n128_u64[0] = v28;
          *int v11 = v28;
          int v13 = v29;
LABEL_6:
          *(_DWORD *)(a5 + 20) = v13;
          return result;
        }
        sub_244CB4E58(a1, v30);
        if (*(void *)(a1 + 16) == 9)
        {
          long long v26 = 0uLL;
          uint64_t v27 = 0;
          sub_244CB5530(a1, 16, 9, (uint64_t)&v26);
          if (!v26)
          {
            long long v26 = 0uLL;
            int v14 = (_OWORD **)(a4 + 360);
            uint64_t v27 = 0;
            sub_244D977C0(a1, (void *)(a4 + 360), &v26);
            if (!v26)
            {
              *(_OWORD *)a4 = xmmword_2651A94C8;
              *(_WORD *)(a4 + 372) = 513;
              sub_244D94660(a4 + 176);
              *(void *)(a4 + 352) = 1;
              sub_244D94660(a4 + 16);
              *(_DWORD *)(a4 + 368) = 16843777;
              __int16 v15 = *(_WORD *)(a4 + 374);
              *(_WORD *)(a4 + 376) = 1;
              *(_WORD *)(a4 + 374) = v15 | 7;
              *(unsigned char *)(a4 + 378) = 3;
              if (*(void *)a3)
              {
                long long v26 = 0uLL;
                uint64_t v27 = 0;
                *(void *)uint64_t v30 = &unk_26F954540;
                int v16 = *v14;
                *(_OWORD *)&v30[8] = **v14;
                long long v18 = v16[2];
                long long v17 = v16[3];
                char v19 = *((unsigned char *)v16 + 64);
                long long v31 = v16[1];
                long long v32 = v18;
                char v34 = v19;
                long long v33 = v17;
                sub_244DA466C((uint64_t)v30, a3, (uint64_t)&v26);
              }
            }
          }
        }
        else
        {
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)v30);
          int v20 = *(_DWORD *)v30;
          long long v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30) {
            goto LABEL_26;
          }
          sub_244CEBC20((uint64_t)a3, 128, 0, (uint64_t)v30);
          int v20 = *(_DWORD *)v30;
          long long v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30) {
            goto LABEL_26;
          }
          sub_244CEB1B0(a3, 2uLL, (uint64_t)v30);
          int v20 = *(_DWORD *)v30;
          long long v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30) {
            goto LABEL_26;
          }
          sub_244CEBC2C(v30, a3);
          int v20 = *(_DWORD *)v30;
          long long v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30) {
            goto LABEL_26;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244CB5530(a1, 16, 1, a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          result.n128_f64[0] = sub_244CB40C8(a1, (_OWORD *)a4, (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244CEB28C(a3, 0, 2u, 0, *(const void **)a4, *(unsigned __int16 *)(a4 + 8), (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)v30);
          int v20 = *(_DWORD *)v30;
          long long v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30) {
            goto LABEL_26;
          }
          unsigned __int8 v25 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          *(void *)a5 = 0;
          sub_244CB54B4(a1, 2, (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244CB3E8C(a1, &v25, a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          int v21 = v25 | 0x200;
          *(_WORD *)(a4 + 372) = v25 | 0x200;
          sub_244CE9F1C(a3, v21, (uint64_t)v30);
          int v20 = *(_DWORD *)v30;
          long long v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30
            || (sub_244CEBC2C(v30, a3),
                int v20 = *(_DWORD *)v30,
                long long v26 = *(_OWORD *)&v30[4],
                LODWORD(v27) = *(_DWORD *)&v30[20],
                *(_DWORD *)v30))
          {
LABEL_26:
            *(_DWORD *)a5 = v20;
            result.n128_u64[0] = v26;
            *int v11 = v26;
            int v13 = v27;
            goto LABEL_6;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244CB55E4(a1, 23, 3, (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244D975D0(a1, a3, a4 + 176, (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244D97860(a1, a3, a4, a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244CB55E4(a1, 23, 6, (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244D975D0(a1, a3, a4 + 16, (void *)a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244D97A84(a1, a3, a4, a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244D97D48(a1, a3, a4, a5);
          if (*(_DWORD *)a5) {
            return result;
          }
          sub_244CEBC2C(v30, a3);
          int v22 = *(_DWORD *)v30;
          int v23 = *(_DWORD *)&v30[20];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          __n128 result = *(__n128 *)&v30[4];
          long long v26 = *(_OWORD *)&v30[4];
          *(_DWORD *)a5 = *(_DWORD *)v30;
          *int v11 = result;
          *(_DWORD *)(a5 + 20) = v23;
          if (v22) {
            return result;
          }
        }
        sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)v30);
        int v12 = *(_DWORD *)v30;
        long long v28 = *(_OWORD *)&v30[4];
        int v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30) {
          goto LABEL_5;
        }
        sub_244CE9F1C(a2, *(unsigned __int16 *)(a4 + 372), (uint64_t)v30);
        int v12 = *(_DWORD *)v30;
        long long v28 = *(_OWORD *)&v30[4];
        int v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30) {
          goto LABEL_5;
        }
        sub_244CEBC2C(v30, a2);
        int v12 = *(_DWORD *)v30;
        long long v28 = *(_OWORD *)&v30[4];
        int v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30) {
          goto LABEL_5;
        }
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        sub_244D97654(a1, a2, a4, a5);
        if (!*(_DWORD *)a5)
        {
          sub_244CEBC2C(v30, a2);
          int v12 = *(_DWORD *)v30;
          long long v28 = *(_OWORD *)&v30[4];
          int v29 = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30) {
            goto LABEL_5;
          }
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          result.n128_f64[0] = sub_244CB4DC8(a1, a5);
          if (!*(_DWORD *)a5)
          {
            *(void *)a5 = 0;
            *(void *)(a5 + 8) = 0;
            *(void *)(a5 + 16) = 0;
            sub_244CB4D00(a1, v24, a5);
            int v12 = *(_DWORD *)a5;
            if (!*(_DWORD *)a5) {
              goto LABEL_5;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_244D97378(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  sub_244CB3988((uint64_t)v10);
  sub_244CB39B8((uint64_t)v10, a1, a2);
  sub_244D973EC((uint64_t)v10, a3, a4, a5);
}

void sub_244D973EC(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  sub_244CEB184((uint64_t)v13);
  sub_244D90DA8(a2);
  if ((a3 & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244D96CFC(a1, v13, (unsigned __int8 *)v13, a2, (uint64_t)a4);
    if (*(_DWORD *)a4) {
      return;
    }
    goto LABEL_3;
  }
  uint64_t v9 = (char *)sub_244CC4D84(0x20FuLL);
  if (!v9)
  {
    *(_DWORD *)a4 = 11;
    a4[1] = "src/credentials/CHIPCertToX509.cpp";
    int v8 = 678;
LABEL_12:
    *((_DWORD *)a4 + 4) = v8;
    return;
  }
  unint64_t v10 = v9;
  sub_244CEB170((uint64_t)v12, (uint64_t)v9, 527);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244D96CFC(a1, v13, (unsigned __int8 *)v12, a2, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (*(_WORD *)(a2 + 372) == 513)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      size_t v11 = sub_244CEB194(v12);
      sub_244CEC354(v10, v11, (_DWORD *)(a2 + 392), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *(_WORD *)(a2 + 374) |= 0x200u;
        j__free(v10);
LABEL_3:
        if ((a3 & 2) != 0) {
          *(_WORD *)(a2 + 374) |= 0x100u;
        }
        *(_DWORD *)a4 = 0;
        a4[1] = "src/credentials/CHIPCertToX509.cpp";
        int v8 = 700;
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)a4 = 23;
      a4[1] = "src/credentials/CHIPCertToX509.cpp";
      *((_DWORD *)a4 + 4) = 685;
    }
  }
  j__free(v10);
}

void sub_244D97574(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CEB184((uint64_t)v6);
  sub_244D9204C(a2);
  sub_244D975D0(a1, v6, a2, a3);
}

void sub_244D975D0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244D925A8(a3, a1, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244D92898(a3, a2, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/credentials/CHIPCertToX509.cpp";
      *((_DWORD *)a4 + 4) = 53;
    }
  }
}

void sub_244D97654(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB55E4(a1, 16, 11, (void *)a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    int v8 = (uint64_t *)(a3 + 384);
    *(void *)(a4 + 16) = 0;
    sub_244D98D1C(a1, v8, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
      *(_DWORD *)(a4 + 16) = 446;
      if (*a2)
      {
        sub_244CEBD90(a2, 0, 3u, 1, &v10);
        int v9 = v10;
        long long v13 = v11;
        int v14 = v12;
        if (v10)
        {
LABEL_5:
          *(_DWORD *)a4 = v9;
          *(_OWORD *)(a4 + 4) = v13;
          *(_DWORD *)(a4 + 20) = v14;
          return;
        }
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244D935A8(*v8, a2, a4);
        if (!*(_DWORD *)a4)
        {
          sub_244CEBC2C(&v10, a2);
          int v9 = v10;
          long long v13 = v11;
          int v14 = v12;
          goto LABEL_5;
        }
      }
      else
      {
        *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
        *(_DWORD *)(a4 + 16) = 456;
      }
    }
  }
}

uint64_t sub_244D977C0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244CB4170(a1, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = sub_244CB3BE0(a1);
    if (result == 65)
    {
      uint64_t result = (uint64_t)sub_2446CD4B0(&v9, v10);
      int v7 = 0;
      *a2 = v9;
      int v8 = 476;
    }
    else
    {
      int v8 = 474;
      int v7 = 43;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void sub_244D97860(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v11);
  int v8 = v11;
  long long v15 = v12;
  int v16 = v13;
  if (v11) {
    goto LABEL_2;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB54B4(a1, 4, (void *)a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    uint64_t v9 = (_DWORD *)(a3 + 352);
    *(void *)(a4 + 16) = 0;
    sub_244CB3FB0(a1, (_DWORD *)(a3 + 352), a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244D93174(*v9, (uint64_t)v14, a4);
      if (!*(_DWORD *)a4)
      {
        sub_244CEBA3C(a2, v14, &v11);
        int v8 = v11;
        long long v15 = v12;
        int v16 = v13;
        if (!v11)
        {
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244CB54B4(a1, 5, (void *)a4);
          if (*(_DWORD *)a4) {
            return;
          }
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          uint64_t v10 = (_DWORD *)(a3 + 356);
          *(void *)(a4 + 16) = 0;
          sub_244CB3FB0(a1, v10, a4);
          if (*(_DWORD *)a4) {
            return;
          }
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244D93174(*v10, (uint64_t)v14, a4);
          if (*(_DWORD *)a4) {
            return;
          }
          sub_244CEBA3C(a2, v14, &v11);
          int v8 = v11;
          long long v15 = v12;
          int v16 = v13;
          if (!v11)
          {
            if ((*v10 - 1) < *v9)
            {
              *(_DWORD *)a4 = 80;
              *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
              *(_DWORD *)(a4 + 16) = 76;
              return;
            }
            sub_244CEBC2C(&v11, a2);
            int v8 = v11;
            long long v15 = v12;
            int v16 = v13;
          }
        }
LABEL_2:
        *(_DWORD *)a4 = v8;
        *(_OWORD *)(a4 + 4) = v15;
        *(_DWORD *)(a4 + 20) = v16;
      }
    }
  }
}

void sub_244D97A84(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB54B4(a1, 7, (void *)a4);
  if (*(_DWORD *)a4) {
    return;
  }
  __int16 v16 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_244CB3E8C(a1, (unsigned char *)&v16 + 1, a4);
  if (*(_DWORD *)a4) {
    return;
  }
  int v8 = HIBYTE(v16) | 0x100;
  *(_WORD *)(a3 + 370) = HIBYTE(v16) | 0x100;
  if (v8 != 257)
  {
    *(_DWORD *)a4 = 80;
    *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
    int v11 = 94;
LABEL_14:
    *(_DWORD *)(a4 + 16) = v11;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB54B4(a1, 8, (void *)a4);
  if (*(_DWORD *)a4) {
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB3E8C(a1, &v16, a4);
  if (*(_DWORD *)a4) {
    return;
  }
  int v9 = v16 | 0x400;
  *(_WORD *)(a3 + 368) = v16 | 0x400;
  if (v9 != 1025)
  {
    *(_DWORD *)a4 = 81;
    *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
    int v11 = 100;
    goto LABEL_14;
  }
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v13);
  int v10 = v13;
  long long v17 = v14;
  int v18 = v15;
  if (v13) {
    goto LABEL_12;
  }
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v13);
  int v10 = v13;
  long long v17 = v14;
  int v18 = v15;
  if (v13) {
    goto LABEL_12;
  }
  sub_244CE9F1C(a2, *(unsigned __int16 *)(a3 + 370), (uint64_t)&v13);
  int v10 = v13;
  long long v17 = v14;
  int v18 = v15;
  if (v13) {
    goto LABEL_12;
  }
  sub_244CE9F1C(a2, *(unsigned __int16 *)(a3 + 368), (uint64_t)&v13);
  int v10 = v13;
  long long v17 = v14;
  int v18 = v15;
  if (v13) {
    goto LABEL_12;
  }
  sub_244CEBC2C(&v13, a2);
  int v10 = v13;
  long long v17 = v14;
  int v18 = v15;
  if (v13) {
    goto LABEL_12;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB55E4(a1, 16, 9, (void *)a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    long long v12 = (const void **)(a3 + 360);
    *(void *)(a4 + 16) = 0;
    sub_244D977C0(a1, v12, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244CEB850(a2, 0, *v12, 0x41u, (void *)a4);
      if (!*(_DWORD *)a4)
      {
        sub_244CEBC2C(&v13, a2);
        int v10 = v13;
        long long v17 = v14;
        int v18 = v15;
LABEL_12:
        *(_DWORD *)a4 = v10;
        *(_OWORD *)(a4 + 4) = v17;
        *(_DWORD *)(a4 + 20) = v18;
      }
    }
  }
}

void sub_244D97D48(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB55E4(a1, 23, 10, (void *)a4);
  if (*(_DWORD *)a4) {
    return;
  }
  int v30 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_244CB4C90(a1, &v30, a4);
  if (*(_DWORD *)a4) {
    return;
  }
  int v11 = (long long *)(a4 + 4);
  sub_244CEBC20((uint64_t)a2, 128, 3u, (uint64_t)&v36);
  int v12 = v36;
  long long v40 = v37;
  int v41 = v38;
  if (v36) {
    goto LABEL_5;
  }
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v36);
  int v12 = v36;
  HIDWORD(v13) = DWORD1(v37);
  long long v40 = v37;
  int v41 = v38;
  if (v36) {
    goto LABEL_5;
  }
  LODWORD(v13) = 308;
  uint64_t v28 = v13;
  LODWORD(v5) = 773;
  LODWORD(v6) = 773;
  LODWORD(v4) = 313;
  long long v14 = "src/credentials/CHIPCertToX509.cpp";
  while (1)
  {
    sub_244CB4E58(a1, &v36);
    int v12 = v36;
    long long v40 = v37;
    int v41 = v38;
    if (v36) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    long long v42 = xmmword_2651A94DC;
    int v43 = 0;
    unint64_t v15 = *(void *)(a1 + 16);
    if (v15 > 0xFF)
    {
      int v25 = 349;
      int v26 = 36;
LABEL_60:
      *(_DWORD *)a4 = v26;
      *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
LABEL_70:
      *(_DWORD *)(a4 + 16) = v25;
      return;
    }
    if (v15 != 6)
    {
      sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v36);
      int v17 = v36;
      long long v42 = v37;
      int v43 = v38;
      if (!v36)
      {
        sub_244CE9F1C(a2, (unsigned __int16)v15 | 0x500, (uint64_t)&v36);
        int v17 = v36;
        long long v42 = v37;
        int v43 = v38;
        if (!v36)
        {
          unsigned int v22 = v15 - 1;
          if (v22 > 2 || (sub_244CEB320(a2, 1, &v36), int v17 = v36, v42 = v37, v43 = v38, !v36))
          {
            sub_244CEBD90(a2, 0, 4u, 0, &v36);
            int v17 = v36;
            long long v42 = v37;
            int v43 = v38;
            if (!v36)
            {
              switch(v22)
              {
                case 0u:
                  *(void *)a4 = 0;
                  *(void *)(a4 + 8) = 0;
                  *(void *)(a4 + 16) = 0;
                  sub_244D98788(a1, a2, a3, a4);
                  break;
                case 1u:
                  *(void *)a4 = 0;
                  *(void *)(a4 + 8) = 0;
                  *(void *)(a4 + 16) = 0;
                  sub_244D9865C(a1, a2, a3, a4);
                  break;
                case 2u:
                  *(void *)a4 = 0;
                  *(void *)(a4 + 8) = 0;
                  *(void *)(a4 + 16) = 0;
                  sub_244D98A44(a1, a2, a3, a4);
                  break;
                case 3u:
                  *(void *)a4 = 0;
                  *(void *)(a4 + 8) = 0;
                  *(void *)(a4 + 16) = 0;
                  sub_244D9859C(a1, a2, a3, (void *)a4);
                  break;
                case 4u:
                  *(void *)a4 = 0;
                  *(void *)(a4 + 8) = 0;
                  *(void *)(a4 + 16) = 0;
                  sub_244D9844C(a1, a2, a3, a4);
                  break;
                default:
                  int v25 = 399;
                  int v26 = 80;
                  goto LABEL_60;
              }
              if (*(_DWORD *)a4) {
                return;
              }
              sub_244CEBC2C(&v36, a2);
              int v17 = v36;
              long long v42 = v37;
              int v43 = v38;
              if (!v36)
              {
                sub_244CEBC2C(&v36, a2);
                int v17 = v36;
                long long v42 = v37;
                int v43 = v38;
              }
            }
          }
        }
      }
LABEL_43:
      *(_DWORD *)a4 = v17;
      *int v11 = v42;
      *(_DWORD *)(a4 + 20) = v43;
      goto LABEL_44;
    }
    long long v39 = 0uLL;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB5530(a1, 16, 6, a4);
    if (*(_DWORD *)a4) {
      return;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB40C8(a1, &v39, (void *)a4);
    if (*(_DWORD *)a4) {
      return;
    }
    sub_244CE9F70((uint64_t)&v36, v39, *((uint64_t *)&v39 + 1));
    sub_244CE9FA8((uint64_t)&v36, (uint64_t)&v33);
    uint64_t v16 = v33;
    if (v33)
    {
LABEL_61:
      int v23 = v34;
LABEL_62:
      uint64_t v27 = v35;
      goto LABEL_66;
    }
    if ((_BYTE)v36 || BYTE1(v36) != 16)
    {
      int v23 = "src/credentials/CHIPCertToX509.cpp";
      uint64_t v16 = v6;
      uint64_t v27 = v28;
      goto LABEL_66;
    }
    sub_244CEA1B4((uint64_t)&v36, (uint64_t)&v33);
    uint64_t v16 = v33;
    if (v33) {
      goto LABEL_61;
    }
    __int16 v32 = 0;
    BOOL v31 = 0;
    sub_244CE9FA8((uint64_t)&v36, (uint64_t)&v33);
    uint64_t v16 = v33;
    if (v33)
    {
LABEL_58:
      long long v14 = v34;
      uint64_t v4 = v35;
      goto LABEL_65;
    }
    if ((_BYTE)v36 || BYTE1(v36) != 6)
    {
      uint64_t v16 = v5;
LABEL_65:
      int v23 = v14;
      uint64_t v27 = v4;
LABEL_66:
      *(void *)a4 = v16;
      *(void *)(a4 + 8) = v23;
      *(void *)(a4 + 16) = v27;
      return;
    }
    sub_244CE9E70((uint64_t)&v36, &v32, (uint64_t)&v33);
    uint64_t v16 = v33;
    if (v33) {
      goto LABEL_58;
    }
    if (v32 != -1)
    {
      *(_DWORD *)a4 = 774;
      *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
      int v25 = 315;
      goto LABEL_70;
    }
    sub_244CE9FA8((uint64_t)&v36, (uint64_t)&v33);
    uint64_t v16 = v33;
    if (v33) {
      goto LABEL_58;
    }
    if (!(_BYTE)v36 && BYTE1(v36) == 1)
    {
      sub_244CEA524((uint64_t)&v36, &v31, (uint64_t)&v33);
      uint64_t v16 = v33;
      if (v33) {
        goto LABEL_58;
      }
      if (v31) {
        *(_WORD *)(a3 + 374) |= 0x20u;
      }
      sub_244CE9FA8((uint64_t)&v36, (uint64_t)&v33);
      uint64_t v16 = v33;
      if (v33) {
        goto LABEL_58;
      }
    }
    sub_244CE9FA8((uint64_t)&v36, (uint64_t)&v33);
    int v17 = v33;
    if (v33 == 768)
    {
      sub_244CEA2B0(&v33, &v36);
      uint64_t v16 = v33;
      int v23 = v34;
      if (v33) {
        goto LABEL_62;
      }
      unsigned __int16 v24 = WORD4(v39);
      if (*((void *)&v39 + 1) >= 0x10000uLL)
      {
        *(_DWORD *)a4 = 773;
        *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
        int v25 = 333;
        goto LABEL_70;
      }
      int v29 = HIDWORD(v33);
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244CEBB8C(v24, a2, (const void *)v39, a4);
      int v17 = *(_DWORD *)a4;
      if (*(_DWORD *)a4) {
        return;
      }
      *(_DWORD *)(a4 + 4) = v29;
      *(void *)(a4 + 8) = v23;
      goto LABEL_43;
    }
    int v18 = HIDWORD(v33);
    int v19 = HIDWORD(v35);
    if (!v33)
    {
      LODWORD(v16) = vdup_n_s32(0x305u).u32[0];
      HIDWORD(v16) = HIDWORD(v33);
      LODWORD(v27) = vdup_n_s32(0x14Bu).u32[0];
      HIDWORD(v27) = HIDWORD(v35);
      int v23 = "src/credentials/CHIPCertToX509.cpp";
      goto LABEL_66;
    }
    int v20 = v34;
    int v21 = v35;
    *(_DWORD *)a4 = v33;
    *(_DWORD *)(a4 + 4) = v18;
    *(void *)(a4 + 8) = v20;
    *(_DWORD *)(a4 + 16) = v21;
    *(_DWORD *)(a4 + 20) = v19;
LABEL_44:
    if (v17) {
      return;
    }
  }
  if (v36 == 33)
  {
    sub_244CEBC2C(&v36, a2);
    int v12 = v36;
    long long v40 = v37;
    int v41 = v38;
    if (!v36)
    {
      sub_244CEBC2C(&v36, a2);
      int v12 = v36;
      long long v40 = v37;
      int v41 = v38;
      if (!v36)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB4D00(a1, v30, a4);
        int v12 = *(_DWORD *)a4;
        if (*(_DWORD *)a4) {
          return;
        }
      }
    }
  }
LABEL_5:
  *(_DWORD *)a4 = v12;
  *int v11 = v40;
  *(_DWORD *)(a4 + 20) = v41;
}

void *sub_244D9844C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_WORD *)(a3 + 374) |= 0x10u;
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v11);
  int v9 = v11;
  long long v14 = v12;
  int v15 = v13;
  if (v11) {
    goto LABEL_2;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = (void *)sub_244CB5530(a1, 16, 5, a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    int v10 = (const void **)(a3 + 344);
    *(void *)(a4 + 16) = 0;
    uint64_t result = (void *)sub_244D98C5C(a1, v10, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t result = sub_244CEB56C(a2, 128, 0, *v10, 0x14u, (void *)a4);
      if (!*(_DWORD *)a4)
      {
        uint64_t result = sub_244CEBC2C(&v11, a2);
        int v9 = v11;
        long long v14 = v12;
        int v15 = v13;
LABEL_2:
        *(_DWORD *)a4 = v9;
        *(_OWORD *)(a4 + 4) = v14;
        *(_DWORD *)(a4 + 20) = v15;
      }
    }
  }
  return result;
}

uint64_t sub_244D9859C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_WORD *)(a3 + 374) |= 8u;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t result = sub_244CB5530(a1, 16, 4, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    int v9 = (const void **)(a3 + 336);
    a4[2] = 0;
    uint64_t result = sub_244D98C5C(a1, v9, a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t result = (uint64_t)sub_244CEB554(a2, *v9, 0x14u, a4);
      if (!*(_DWORD *)a4)
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "src/credentials/CHIPCertToX509.cpp";
        *((_DWORD *)a4 + 4) = 182;
      }
    }
  }
  return result;
}

uint64_t sub_244D9865C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(_WORD *)(a3 + 374) |= 2u;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t result = sub_244CB5424(a1, 2, a4);
  if (!*(_DWORD *)a4)
  {
    unsigned __int16 v14 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    uint64_t result = sub_244CB3F40(a1, &v14, a4);
    if (!*(_DWORD *)a4)
    {
      unsigned __int16 v9 = v14;
      if (v14 > 0xFFu)
      {
        *(_DWORD *)a4 = 80;
        *(void *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
        *(_DWORD *)(a4 + 16) = 202;
      }
      else
      {
        uint64_t result = (uint64_t)sub_244CEB67C(a2, v14, (uint64_t)&v11);
        int v10 = v11;
        long long v15 = v12;
        int v16 = v13;
        if (!v11) {
          *(_WORD *)(a3 + 376) = v9;
        }
        *(_DWORD *)a4 = v10;
        *(_OWORD *)(a4 + 4) = v15;
        *(_DWORD *)(a4 + 20) = v16;
      }
    }
  }
  return result;
}

double sub_244D98788@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v15 = 0;
  *(_WORD *)(a3 + 374) |= 1u;
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v12);
  int v8 = v12;
  long long v16 = v13;
  int v17 = v14;
  if (v12) {
    goto LABEL_2;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB5530(a1, 21, 1, a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB4C90(a1, &v15, a4);
    if (!*(_DWORD *)a4)
    {
      char v11 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      sub_244CB54B4(a1, 1, (void *)a4);
      if (!*(_DWORD *)a4)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB3C0C(a1, &v11, a4);
        if (!*(_DWORD *)a4)
        {
          if (v11)
          {
            sub_244CEB320(a2, 1, &v12);
            int v8 = v12;
            long long v16 = v13;
            int v17 = v14;
            if (v12) {
              goto LABEL_2;
            }
            *(_WORD *)(a3 + 374) |= 0x80u;
          }
          sub_244CB4E58(a1, &v12);
          int v10 = v12;
          long long v16 = v13;
          int v17 = v14;
          if (!v12 || v12 == 33)
          {
            if (*(void *)(a1 + 16) != 2) {
              goto LABEL_17;
            }
            *(void *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(void *)(a4 + 16) = 0;
            sub_244CB3E8C(a1, (unsigned char *)(a3 + 379), a4);
            if (*(_DWORD *)a4) {
              return result;
            }
            sub_244CEB1B0(a2, *(unsigned __int8 *)(a3 + 379), (uint64_t)&v12);
            int v8 = v12;
            long long v16 = v13;
            int v17 = v14;
            if (v12) {
              goto LABEL_2;
            }
            *(_WORD *)(a3 + 374) |= 0x40u;
            sub_244CB4E58(a1, &v12);
            int v10 = v12;
            long long v16 = v13;
            int v17 = v14;
            if (v12 == 33)
            {
LABEL_17:
              *(void *)a4 = 0;
              *(void *)(a4 + 8) = 0;
              *(void *)(a4 + 16) = 0;
              double result = sub_244CB4DC8(a1, a4);
              if (*(_DWORD *)a4) {
                return result;
              }
              *(void *)a4 = 0;
              *(void *)(a4 + 8) = 0;
              *(void *)(a4 + 16) = 0;
              sub_244CB4D00(a1, v15, a4);
              if (*(_DWORD *)a4) {
                return result;
              }
              sub_244CEBC2C(&v12, a2);
              int v8 = v12;
              long long v16 = v13;
              int v17 = v14;
LABEL_2:
              *(_DWORD *)a4 = v8;
              double result = *(double *)&v16;
              *(_OWORD *)(a4 + 4) = v16;
              *(_DWORD *)(a4 + 20) = v17;
              return result;
            }
          }
          *(_DWORD *)a4 = v10;
          double result = *(double *)&v16;
          *(_OWORD *)(a4 + 4) = v16;
          *(_DWORD *)(a4 + 20) = v17;
        }
      }
    }
  }
  return result;
}

double sub_244D98A44@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v14 = 0;
  *(_WORD *)(a3 + 374) |= 4u;
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v11);
  int v8 = v11;
  long long v15 = v12;
  int v16 = v13;
  if (v11) {
    goto LABEL_2;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB5530(a1, 22, 3, a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB4C90(a1, &v14, a4);
    if (!*(_DWORD *)a4)
    {
      while (1)
      {
        sub_244CB54B4(a1, 256, &v11);
        long long v15 = v12;
        int v16 = v13;
        if (v11) {
          break;
        }
        unsigned __int8 v10 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        sub_244CB3E8C(a1, &v10, a4);
        if (*(_DWORD *)a4) {
          return result;
        }
        sub_244CE9F1C(a2, v10 | 0x600, (uint64_t)&v11);
        int v8 = v11;
        long long v15 = v12;
        int v16 = v13;
        if (v11) {
          goto LABEL_2;
        }
        *(unsigned char *)(a3 + 378) |= 1 << (v10 - 1);
      }
      if (v11 == 33)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB4D00(a1, v14, a4);
        if (!*(_DWORD *)a4)
        {
          sub_244CEBC2C(&v11, a2);
          int v8 = v11;
          long long v15 = v12;
          int v16 = v13;
LABEL_2:
          *(_DWORD *)a4 = v8;
          double result = *(double *)&v15;
          *(_OWORD *)(a4 + 4) = v15;
          *(_DWORD *)(a4 + 20) = v16;
        }
      }
      else
      {
        *(_DWORD *)a4 = v11;
        double result = *(double *)&v15;
        *(_OWORD *)(a4 + 4) = v15;
        *(_DWORD *)(a4 + 20) = v16;
      }
    }
  }
  return result;
}

uint64_t sub_244D98C5C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244CB4170(a1, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = sub_244CB3BE0(a1);
    if (result == 20)
    {
      uint64_t result = (uint64_t)sub_244D98CFC(&v9, v10);
      int v7 = 0;
      *a2 = v9;
      int v8 = 476;
    }
    else
    {
      int v8 = 474;
      int v7 = 43;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void *sub_244D98CFC(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  if (!a2) {
    sub_244E28E04();
  }
  return result;
}

uint64_t sub_244D98D1C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244CB4170(a1, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = sub_244CB3BE0(a1);
    if (result == 64)
    {
      uint64_t result = (uint64_t)sub_244D98CFC(&v9, v10);
      int v7 = 0;
      *a2 = v9;
      int v8 = 476;
    }
    else
    {
      int v8 = 474;
      int v7 = 43;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void sub_244D98DBC(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB62B8((uint64_t)v12);
  uint64_t v11 = 0;
  sub_244CB62E0((uint64_t)v12, *(void *)a2, *(void *)(a2 + 8));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB7594(v12, 256, 21, (_DWORD *)&v11 + 1, (uint64_t)a3);
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB6904();
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB6904();
  if (*(_DWORD *)a3) {
    return;
  }
  if (!a1[204])
  {
    int v10 = 78;
    goto LABEL_34;
  }
  if (a1[204] > 0x64u)
  {
    int v10 = 79;
    goto LABEL_34;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB7594(v12, 2, 22, &v11, (uint64_t)a3);
  if (*(_DWORD *)a3) {
    return;
  }
  if (!a1[204])
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB7708((uint64_t)v12, v11, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB694C();
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB6C20(a1 + 212, (char *)v12, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB68B8();
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB6904();
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB6904();
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB68B8();
    if (*(_DWORD *)a3) {
      return;
    }
    if (a1[244])
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB6904();
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB6904();
      if (*(_DWORD *)a3) {
        return;
      }
    }
    if (!a1[445])
    {
LABEL_29:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB7708((uint64_t)v12, SHIDWORD(v11), (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB6414((uint64_t)v12, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      sub_2446C1548(a2, v13);
      int v9 = 0;
      int v10 = 117;
LABEL_35:
      *(_DWORD *)a3 = v9;
      a3[1] = "src/credentials/CertificationDeclaration.cpp";
      *((_DWORD *)a3 + 4) = v10;
      return;
    }
    if (a1[445] <= 0xAu)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB7594(v12, 11, 22, &v11, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      if (a1[445])
      {
        unint64_t v7 = 0;
        int v8 = a1 + 245;
        do
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB6ADC((char *)v12, v8, 0x14uLL, (uint64_t)a3);
          if (*(_DWORD *)a3) {
            return;
          }
          ++v7;
          v8 += 20;
        }
        while (v7 < a1[445]);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB7708((uint64_t)v12, v11, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      goto LABEL_29;
    }
    int v10 = 101;
LABEL_34:
    int v9 = 47;
    goto LABEL_35;
  }
  uint64_t v6 = 0;
  while (1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB6904();
    if (*(_DWORD *)a3) {
      break;
    }
    if (++v6 >= (unint64_t)a1[204]) {
      goto LABEL_11;
    }
  }
}

double sub_244D9916C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  double result = sub_244CB3988((uint64_t)v16);
  unint64_t v7 = a1[1];
  if (v7 >= 0x317)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v10 = 126;
    goto LABEL_16;
  }
  uint64_t v15 = 0;
  sub_244CB39B8((uint64_t)v16, *a1, v7);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v16, 21, 256, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4C90((uint64_t)v16, (_DWORD *)&v15 + 1, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 0, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v16, (_WORD *)a2, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 1, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v16, (_WORD *)(a2 + 2), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v16, 22, 2, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4C90((uint64_t)v16, &v15, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(unsigned char *)(a2 + 204) = 0;
  while (1)
  {
    sub_244CB54B4((uint64_t)v16, 256, &v12);
    unsigned int v8 = v12;
    double result = *(double *)&v13;
    long long v18 = v13;
    int v19 = v14;
    if (v12) {
      break;
    }
    uint64_t v9 = *(unsigned __int8 *)(a2 + 204);
    if (v9 >= 0x64)
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      int v10 = 146;
      goto LABEL_16;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a2 + 204) = v9 + 1;
    sub_244CB3F40((uint64_t)v16, (_WORD *)(a2 + 2 * v9 + 4), a3);
    if (*(_DWORD *)a3) {
      return result;
    }
  }
  if (v12 != 33) {
    goto LABEL_64;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4D00((uint64_t)v16, v15, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 3, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3FB0((uint64_t)v16, (_DWORD *)(a2 + 208), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v16, 12, 4, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB46D0((uint64_t)v16, (char *)(a2 + 212), 0x14uLL, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  if (strlen((const char *)(a2 + 212)) != 19)
  {
    *(_DWORD *)a3 = 35;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v10 = 157;
    goto LABEL_16;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 5, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3E8C((uint64_t)v16, (unsigned char *)(a2 + 232), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 6, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v16, (_WORD *)(a2 + 234), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 7, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v16, (_WORD *)(a2 + 236), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 8, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3E8C((uint64_t)v16, (unsigned char *)(a2 + 238), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(unsigned char *)(a2 + 244) = 0;
  sub_244CB54B4((uint64_t)v16, 9, &v12);
  unsigned int v8 = v12;
  double result = *(double *)&v13;
  long long v18 = v13;
  int v19 = v14;
  if (v12) {
    goto LABEL_34;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v16, (_WORD *)(a2 + 240), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v16, 10, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v16, (_WORD *)(a2 + 242), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(unsigned char *)(a2 + 244) = 1;
  sub_244CB4E58((uint64_t)v16, &v12);
  unsigned int v8 = v12;
  double result = *(double *)&v13;
  long long v18 = v13;
  int v19 = v14;
  if (v12)
  {
LABEL_34:
    if (v8 == 33)
    {
      if (v17 != 10)
      {
LABEL_61:
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CB4D00((uint64_t)v16, SHIDWORD(v15), a3);
        if (*(_DWORD *)a3) {
          return result;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        double result = sub_244CB4DC8((uint64_t)v16, a3);
        if (*(_DWORD *)a3) {
          return result;
        }
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
        int v10 = 214;
LABEL_16:
        *(_DWORD *)(a3 + 16) = v10;
        return result;
      }
LABEL_54:
      *(_DWORD *)a3 = 35;
      *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      int v10 = 186;
      goto LABEL_16;
    }
    if (v8 != 43) {
      goto LABEL_64;
    }
  }
  if (v17 == 10) {
    goto LABEL_54;
  }
  if (v17 != 11)
  {
LABEL_59:
    if (v8 <= 0x2B && ((1 << v8) & 0x80200000001) != 0) {
      goto LABEL_61;
    }
LABEL_64:
    *(_DWORD *)a3 = v8;
    double result = *(double *)&v18;
    *(_OWORD *)(a3 + 4) = v18;
    *(_DWORD *)(a3 + 20) = v19;
    return result;
  }
  if (sub_244CB3B68((uint64_t)v16) != 22)
  {
    *(_DWORD *)a3 = 43;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v10 = 190;
    goto LABEL_16;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4C90((uint64_t)v16, &v15, a3);
  if (!*(_DWORD *)a3)
  {
    *(unsigned char *)(a2 + 445) = 0;
    while (1)
    {
      sub_244CB55E4((uint64_t)v16, 16, 256, &v12);
      unsigned int v8 = v12;
      long long v18 = v13;
      int v19 = v14;
      if (v12) {
        break;
      }
      if (sub_244CB3BE0((uint64_t)v16) != 20)
      {
        *(_DWORD *)a3 = 43;
        *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
        int v10 = 197;
        goto LABEL_16;
      }
      unsigned int v11 = *(unsigned __int8 *)(a2 + 445);
      if (v11 >= 0xA)
      {
        *(_DWORD *)a3 = 47;
        *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
        int v10 = 198;
        goto LABEL_16;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a2 + 445) = v11 + 1;
      sub_244CB44B4((uint64_t)v16, (char *)(a2 + 20 * v11 + 245), 0x14uLL, a3);
      if (*(_DWORD *)a3) {
        return result;
      }
    }
    if (v12 != 33) {
      goto LABEL_64;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB4D00((uint64_t)v16, v15, a3);
    if (!*(_DWORD *)a3)
    {
      sub_244CB4E58((uint64_t)v16, &v12);
      unsigned int v8 = v12;
      long long v18 = v13;
      int v19 = v14;
      goto LABEL_59;
    }
  }
  return result;
}

double sub_244D9988C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  double result = sub_244CB3988((uint64_t)v14);
  unint64_t v7 = a1[1];
  if (v7 >= 0x317)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v9 = 224;
LABEL_37:
    *(_DWORD *)(a3 + 16) = v9;
    return result;
  }
  uint64_t v13 = 0;
  sub_244CB39B8((uint64_t)v14, *a1, v7);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v14, 21, 256, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4C90((uint64_t)v14, (_DWORD *)&v13 + 1, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 0, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v14, (_WORD *)a2, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 1, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v14, (_WORD *)(a2 + 2), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v14, 22, 2, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4C90((uint64_t)v14, &v13, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  do
  {
    sub_244CB55E4((uint64_t)v14, 4, 256, &v10);
    unsigned int v8 = v10;
    long long v16 = v11;
    int v17 = v12;
  }
  while (!v10);
  if (v10 != 33)
  {
LABEL_56:
    *(_DWORD *)a3 = v8;
    double result = *(double *)&v16;
    *(_OWORD *)(a3 + 4) = v16;
    *(_DWORD *)(a3 + 20) = v17;
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4D00((uint64_t)v14, v13, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 3, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3FB0((uint64_t)v14, (_DWORD *)(a2 + 4), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v14, 12, 4, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB46D0((uint64_t)v14, (char *)(a2 + 22), 0x14uLL, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  if (strlen((const char *)(a2 + 22)) != 19)
  {
    *(_DWORD *)a3 = 35;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v9 = 254;
    goto LABEL_37;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 5, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3E8C((uint64_t)v14, (unsigned char *)(a2 + 8), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 6, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v14, (_WORD *)(a2 + 10), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 7, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v14, (_WORD *)(a2 + 12), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 8, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3E8C((uint64_t)v14, (unsigned char *)(a2 + 14), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(unsigned char *)(a2 + 20) = 0;
  sub_244CB54B4((uint64_t)v14, 9, &v10);
  unsigned int v8 = v10;
  double result = *(double *)&v11;
  long long v16 = v11;
  int v17 = v12;
  if (v10) {
    goto LABEL_27;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v14, (_WORD *)(a2 + 16), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB54B4((uint64_t)v14, 10, (void *)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB3F40((uint64_t)v14, (_WORD *)(a2 + 18), a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(unsigned char *)(a2 + 20) = 1;
  sub_244CB4E58((uint64_t)v14, &v10);
  unsigned int v8 = v10;
  double result = *(double *)&v11;
  long long v16 = v11;
  int v17 = v12;
  if (v10)
  {
LABEL_27:
    if (v8 == 33)
    {
      if (v15 != 10) {
        goto LABEL_53;
      }
      goto LABEL_46;
    }
    if (v8 != 43) {
      goto LABEL_56;
    }
  }
  if (v15 == 10)
  {
LABEL_46:
    *(_DWORD *)a3 = 35;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v9 = 283;
    goto LABEL_37;
  }
  if (v15 != 11) {
    goto LABEL_51;
  }
  if (sub_244CB3B68((uint64_t)v14) != 22)
  {
    *(_DWORD *)a3 = 43;
    *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    int v9 = 287;
    goto LABEL_37;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4C90((uint64_t)v14, &v13, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  while (1)
  {
    sub_244CB55E4((uint64_t)v14, 16, 256, &v10);
    unsigned int v8 = v10;
    long long v16 = v11;
    int v17 = v12;
    if (v10) {
      break;
    }
    if (sub_244CB3BE0((uint64_t)v14) != 20)
    {
      *(_DWORD *)a3 = 43;
      *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      int v9 = 293;
      goto LABEL_37;
    }
  }
  if (v10 != 33) {
    goto LABEL_56;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4D00((uint64_t)v14, v13, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  *(unsigned char *)(a2 + 21) = 1;
  sub_244CB4E58((uint64_t)v14, &v10);
  unsigned int v8 = v10;
  long long v16 = v11;
  int v17 = v12;
LABEL_51:
  if (v8 > 0x2B || ((1 << v8) & 0x80200000001) == 0) {
    goto LABEL_56;
  }
LABEL_53:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4D00((uint64_t)v14, SHIDWORD(v13), a3);
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    double result = sub_244CB4DC8((uint64_t)v14, a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      int v9 = 311;
      goto LABEL_37;
    }
  }
  return result;
}

BOOL sub_244D99EF0(uint64_t a1, uint64_t a2, int a3)
{
  sub_244D99F64(a1, a2, 2, v8);
  if (LODWORD(v8[0])) {
    return 0;
  }
  unsigned __int16 v7 = 0;
  do
  {
    sub_244D9A068(a1, &v7, v8);
    BOOL result = LODWORD(v8[0]) == 0;
    if (LODWORD(v8[0])) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v7 == a3;
    }
  }
  while (!v6);
  return result;
}

void sub_244D99F64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_244CB39B8(a1, *(void *)a2, *(void *)(a2 + 8));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CB55E4(a1, 21, 256, a4);
  if (!*(_DWORD *)a4)
  {
    uint64_t v8 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    sub_244CB4C90(a1, (_DWORD *)&v8 + 1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      while (1)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_244CB4E58(a1, a4);
        if (*(_DWORD *)a4) {
          break;
        }
        sub_244CB5530(a1, 22, a3, (uint64_t)v7);
        if (!v7[0])
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          sub_244CB4C90(a1, &v8, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "src/credentials/CertificationDeclaration.cpp";
            *((_DWORD *)a4 + 4) = 346;
          }
          return;
        }
      }
    }
  }
}

void sub_244D9A068(uint64_t a1@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a1, 256, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB3F40(a1, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/credentials/CertificationDeclaration.cpp";
      *((_DWORD *)a3 + 4) = 353;
    }
  }
}

uint64_t sub_244D9A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_244D99F64(a1, a2, 11, v8);
  if (!LODWORD(v8[0]))
  {
    long long __s2 = 0uLL;
    while (1)
    {
      sub_244D9A174(a1, &__s2, v8);
      if (LODWORD(v8[0])) {
        break;
      }
      size_t v6 = *(void *)(a3 + 8);
      if (v6 == *((void *)&__s2 + 1) && (!v6 || !memcmp(*(const void **)a3, (const void *)__s2, v6))) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_244D9A174(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a1, 256, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB40C8(a1, a2, a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/credentials/CertificationDeclaration.cpp";
      *((_DWORD *)a3 + 4) = 375;
    }
  }
}

void *sub_244D9A1F4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if ((unint64_t)a4[1] >= 0xFFFFFFFF) {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v10 = a4[1];
  }
  sub_244CEB170((uint64_t)v15, *a4, v10);
  BOOL result = (void *)sub_244CEBC20((uint64_t)v15, 0, 0x10u, (uint64_t)&v16);
  int v12 = v16;
  long long v20 = v17;
  int v21 = v18;
  if (v16) {
    goto LABEL_5;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  BOOL result = sub_244CEB524(v15, &unk_244EC2D74, 9u, (void *)a5);
  if (!*(_DWORD *)a5)
  {
    BOOL result = (void *)sub_244CEBC20((uint64_t)v15, 128, 0, (uint64_t)&v16);
    int v12 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_5;
    }
    BOOL result = (void *)sub_244CEBC20((uint64_t)v15, 0, 0x10u, (uint64_t)&v16);
    int v12 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_5;
    }
    BOOL result = sub_244CEB1B0(v15, 3uLL, (uint64_t)&v16);
    int v12 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_5;
    }
    BOOL result = (void *)sub_244CEBC20((uint64_t)v15, 0, 0x11u, (uint64_t)&v16);
    int v12 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_5;
    }
    BOOL result = (void *)sub_244CEBC20((uint64_t)v15, 0, 0x10u, (uint64_t)&v16);
    int v12 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_5;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    BOOL result = sub_244CEB524(v15, &unk_244EC2D7D, 9u, (void *)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    BOOL result = sub_244CEBC2C(&v16, v15);
    int v12 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16 || (result = sub_244CEBC2C(&v16, v15), int v12 = v16, v20 = v17, v21 = v18, v16))
    {
LABEL_5:
      *(_DWORD *)a5 = v12;
      *(_OWORD *)(a5 + 4) = v20;
      *(_DWORD *)(a5 + 20) = v21;
      return result;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    BOOL result = sub_244D9A570((uint64_t)a1, v15, a5);
    if (!*(_DWORD *)a5)
    {
      uint64_t v19 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      (*(void (**)(uint64_t, void, void, int *))(*(void *)a3 + 24))(a3, *a1, a1[1], &v16);
      if (*(_DWORD *)a5)
      {
        return (void *)sub_244CED784(&v16, 64);
      }
      else
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        sub_244D9A6D8(a2, (uint64_t)&v16, v15, a5);
        int v13 = *(_DWORD *)a5;
        BOOL result = (void *)sub_244CED784(&v16, 64);
        if (!v13)
        {
          BOOL result = sub_244CEBC2C(&v16, v15);
          int v12 = v16;
          long long v20 = v17;
          int v21 = v18;
          if (!v16)
          {
            BOOL result = sub_244CEBC2C(&v16, v15);
            int v12 = v16;
            long long v20 = v17;
            int v21 = v18;
            if (!v16)
            {
              BOOL result = sub_244CEBC2C(&v16, v15);
              int v12 = v16;
              long long v20 = v17;
              int v21 = v18;
              if (!v16)
              {
                unint64_t v14 = sub_244CEB194(v15);
                BOOL result = (void *)sub_2446C1548((uint64_t)a4, v14);
                int v12 = 0;
              }
            }
          }
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

void *sub_244D9A570@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  BOOL result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_2;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  BOOL result = sub_244CEB524(a2, &unk_244EC2D86, 9u, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    BOOL result = (void *)sub_244CEBC20((uint64_t)a2, 128, 0, (uint64_t)&v8);
    int v7 = v8;
    long long v11 = v9;
    int v12 = v10;
    if (!v8)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      BOOL result = sub_244CEB554(a2, *(const void **)a1, *(unsigned __int16 *)(a1 + 8), (void *)a3);
      if (*(_DWORD *)a3) {
        return result;
      }
      BOOL result = sub_244CEBC2C(&v8, a2);
      int v7 = v8;
      long long v11 = v9;
      int v12 = v10;
      if (!v8)
      {
        BOOL result = sub_244CEBC2C(&v8, a2);
        int v7 = v8;
        long long v11 = v9;
        int v12 = v10;
      }
    }
LABEL_2:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v11;
    *(_DWORD *)(a3 + 20) = v12;
  }
  return result;
}

void *sub_244D9A6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL result = (void *)sub_244CEBC20((uint64_t)a3, 0, 0x11u, (uint64_t)&v11);
  int v9 = v11;
  long long v14 = v12;
  int v15 = v13;
  if (v11) {
    goto LABEL_4;
  }
  BOOL result = (void *)sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)&v11);
  int v9 = v11;
  long long v14 = v12;
  int v15 = v13;
  if (v11) {
    goto LABEL_4;
  }
  BOOL result = sub_244CEB1B0(a3, 3uLL, (uint64_t)&v11);
  int v9 = v11;
  long long v14 = v12;
  int v15 = v13;
  if (v11) {
    goto LABEL_4;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  BOOL result = sub_244CEB56C(a3, 128, 0, *(const void **)a1, *(unsigned __int16 *)(a1 + 8), (void *)a4);
  if (!*(_DWORD *)a4)
  {
    BOOL result = (void *)sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)&v11);
    int v9 = v11;
    long long v14 = v12;
    int v15 = v13;
    if (v11) {
      goto LABEL_4;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    BOOL result = sub_244CEB524(a3, &unk_244EC2D7D, 9u, (void *)a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    BOOL result = sub_244CEBC2C(&v11, a3);
    int v9 = v11;
    long long v14 = v12;
    int v15 = v13;
    if (v11) {
      goto LABEL_4;
    }
    BOOL result = (void *)sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)&v11);
    int v9 = v11;
    long long v14 = v12;
    int v15 = v13;
    if (v11) {
      goto LABEL_4;
    }
    BOOL result = sub_244CE9F1C(a3, 513, (uint64_t)&v11);
    int v9 = v11;
    long long v14 = v12;
    int v15 = v13;
    if (v11) {
      goto LABEL_4;
    }
    BOOL result = sub_244CEBC2C(&v11, a3);
    int v9 = v11;
    long long v14 = v12;
    int v15 = v13;
    if (v11 || (result = sub_244CEBD90(a3, 0, 4u, 0, &v11), int v9 = v11, v14 = v12, v15 = v13, v11))
    {
LABEL_4:
      *(_DWORD *)a4 = v9;
      *(_OWORD *)(a4 + 4) = v14;
      *(_DWORD *)(a4 + 20) = v15;
      return result;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244D98CFC(&v10, a2);
    BOOL result = sub_244D935A8(v10, a3, a4);
    if (!*(_DWORD *)a4)
    {
      BOOL result = sub_244CEBC2C(&v11, a3);
      int v9 = v11;
      long long v14 = v12;
      int v15 = v13;
      if (!v11)
      {
        BOOL result = sub_244CEBC2C(&v11, a3);
        int v9 = v11;
        long long v14 = v12;
        int v15 = v13;
        if (!v11)
        {
          BOOL result = sub_244CEBC2C(&v11, a3);
          int v9 = v11;
          long long v14 = v12;
          int v15 = v13;
        }
      }
      goto LABEL_4;
    }
  }
  return result;
}

void sub_244D9A9B8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  v7[10] = *MEMORY[0x263EF8340];
  v7[0] = &unk_26F954540;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  sub_244CEF4D0(a2, (uint64_t)v7, (uint64_t)a4);
  if (!a4->n128_u32[0]) {
    sub_244D9AA74(a1, (uint64_t)v7, a3, a4);
  }
}

void *sub_244D9AA74@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((unint64_t)a1[1] >= 0xFFFFFFFF) {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v7 = a1[1];
  }
  sub_244CE9F70((uint64_t)&v18, *a1, v7);
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  if ((_BYTE)v18 || BYTE1(v18) != 16)
  {
    LODWORD(v9) = 635;
    LODWORD(v10) = 773;
    int v11 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_20;
  }
  BOOL result = (void *)sub_244CEA1B4((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 637;
  LODWORD(v10) = 773;
  int v11 = "src/credentials/CertificationDeclaration.cpp";
  if ((_BYTE)v18 || BYTE1(v18) != 6) {
    goto LABEL_20;
  }
  BOOL result = sub_2446C1098(&v21, v19, v20);
  if (v22 != (const char *)9
    || (*(void *)v21 == 0x7010DF78648862ALL ? (BOOL v12 = *(unsigned char *)(v21 + 8) == 2) : (BOOL v12 = 0), !v12))
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    int v13 = 643;
LABEL_18:
    a4[1].n128_u32[0] = v13;
    return result;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 646;
  LODWORD(v10) = 773;
  if (v18 != 128 || BYTE1(v18)) {
    goto LABEL_20;
  }
  BOOL result = (void *)sub_244CEA1B4((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 648;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 16) {
    goto LABEL_20;
  }
  BOOL result = (void *)sub_244CEA1B4((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  uint64_t v17 = 0;
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 652;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 2) {
    goto LABEL_20;
  }
  BOOL result = sub_244CEA3F0(&v18, &v17, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  if (v17 != 3)
  {
    LODWORD(v9) = 655;
    LODWORD(v10) = 774;
    goto LABEL_20;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 658;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 17) {
    goto LABEL_20;
  }
  BOOL result = (void *)sub_244CEA1B4((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 660;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 16) {
    goto LABEL_20;
  }
  BOOL result = (void *)sub_244CEA1B4((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  LODWORD(v9) = 662;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 6) {
    goto LABEL_20;
  }
  BOOL result = sub_2446C1098(&v21, v19, v20);
  if (v22 != (const char *)9
    || (*(void *)v21 == 0x204036501488660 ? (BOOL v14 = *(unsigned char *)(v21 + 8) == 1) : (BOOL v14 = 0), !v14))
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    int v13 = 665;
    goto LABEL_18;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  unint64_t v9 = v23;
  if (!v21)
  {
    LODWORD(v10) = 773;
    int v15 = 667;
    goto LABEL_64;
  }
  if (v21 != 768) {
    goto LABEL_75;
  }
  BOOL result = sub_244CEA2B0(&v21, &v18);
  unint64_t v10 = v21;
  if (v21) {
    goto LABEL_5;
  }
  BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
  unint64_t v10 = v21;
  unint64_t v9 = v23;
  if (!v21)
  {
    LODWORD(v10) = 773;
    int v15 = 669;
    goto LABEL_64;
  }
  if (v21 != 768) {
    goto LABEL_75;
  }
  BOOL result = sub_244CEA2B0(&v21, &v18);
  unint64_t v10 = v21;
  if (v21)
  {
LABEL_5:
    int v11 = v22;
    unint64_t v9 = v23;
LABEL_20:
    a4->n128_u64[0] = v10;
    a4->n128_u64[1] = (unint64_t)v11;
    a4[1].n128_u64[0] = v9;
    return result;
  }
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  BOOL result = sub_244D9B078((unsigned __int8 *)&v18, (_OWORD *)a3, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    uint64_t v24 = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    sub_244D9B308((unsigned __int8 *)&v18, &v16, (uint64_t)&v21, a4);
    if (a4->n128_u32[0]) {
      return (void *)sub_244CED784(&v21, 64);
    }
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_244CECFEC(*(char **)a3, *(void *)(a3 + 8), a2, (uint64_t)&v21, a4);
    if (a4->n128_u32[0]) {
      return (void *)sub_244CED784(&v21, 64);
    }
    sub_244CED784(&v21, 64);
    BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
    unint64_t v10 = v21;
    unint64_t v9 = v23;
    if (!v21)
    {
      LODWORD(v10) = 773;
      int v15 = 682;
      goto LABEL_64;
    }
    if (v21 != 768) {
      goto LABEL_75;
    }
    BOOL result = sub_244CEA2B0(&v21, &v18);
    unint64_t v10 = v21;
    if (!v21)
    {
      BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
      unint64_t v10 = v21;
      unint64_t v9 = v23;
      if (!v21)
      {
        LODWORD(v10) = 773;
        int v15 = 684;
        goto LABEL_64;
      }
      if (v21 != 768) {
        goto LABEL_75;
      }
      BOOL result = sub_244CEA2B0(&v21, &v18);
      unint64_t v10 = v21;
      if (!v21)
      {
        BOOL result = (void *)sub_244CE9FA8((uint64_t)&v18, (uint64_t)&v21);
        unint64_t v10 = v21;
        unint64_t v9 = v23;
        if (v21)
        {
          if (v21 == 768)
          {
            BOOL result = sub_244CEA2B0(&v21, &v18);
            unint64_t v10 = v21;
            goto LABEL_5;
          }
LABEL_75:
          int v11 = v22;
          goto LABEL_20;
        }
        LODWORD(v10) = 773;
        int v15 = 686;
LABEL_64:
        LODWORD(v9) = v15;
        goto LABEL_20;
      }
    }
    goto LABEL_5;
  }
  return result;
}

void *sub_244D9B078@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = (void *)sub_244CE9FA8((uint64_t)a1, (uint64_t)&v12);
  uint64_t v8 = v12;
  if (!v12)
  {
    if (*a1 || a1[1] != 16)
    {
      LODWORD(v7) = 417;
      LODWORD(v8) = 773;
      unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
      goto LABEL_16;
    }
    BOOL result = (void *)sub_244CEA1B4((uint64_t)a1, (uint64_t)&v12);
    uint64_t v8 = v12;
    if (!v12)
    {
      BOOL result = (void *)sub_244CE9FA8((uint64_t)a1, (uint64_t)&v12);
      uint64_t v8 = v12;
      if (!v12)
      {
        LODWORD(v7) = 420;
        LODWORD(v8) = 773;
        unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
        if (*a1 || a1[1] != 6) {
          goto LABEL_16;
        }
        BOOL result = sub_2446C1098(&v12, *((void *)a1 + 1), *((unsigned int *)a1 + 4));
        if (*((void *)&v12 + 1) != 9
          || (*(void *)v12 == 0x7010DF78648862ALL ? (BOOL v10 = *(unsigned char *)(v12 + 8) == 1) : (BOOL v10 = 0), !v10))
        {
          *(_DWORD *)a3 = 774;
          *(void *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
          *(_DWORD *)(a3 + 16) = 422;
          return result;
        }
        BOOL result = (void *)sub_244CE9FA8((uint64_t)a1, (uint64_t)&v12);
        uint64_t v8 = v12;
        if (!v12)
        {
          LODWORD(v7) = 425;
          LODWORD(v8) = 773;
          if (*a1 != 128 || a1[1]) {
            goto LABEL_16;
          }
          BOOL result = (void *)sub_244CEA1B4((uint64_t)a1, (uint64_t)&v12);
          uint64_t v8 = v12;
          if (!v12)
          {
            BOOL result = (void *)sub_244CE9FA8((uint64_t)a1, (uint64_t)&v12);
            uint64_t v8 = v12;
            if (!v12)
            {
              LODWORD(v7) = 428;
              LODWORD(v8) = 773;
              if (*a1 || a1[1] != 4) {
                goto LABEL_16;
              }
              sub_2446C1098(&v12, *((void *)a1 + 1), *((unsigned int *)a1 + 4));
              *a2 = v12;
              BOOL result = (void *)sub_244CE9FA8((uint64_t)a1, (uint64_t)&v12);
              uint64_t v8 = v12;
              uint64_t v7 = v13;
              if (!v12)
              {
                LODWORD(v8) = 773;
                int v11 = 431;
                goto LABEL_33;
              }
              if (v12 != 768) {
                goto LABEL_31;
              }
              BOOL result = sub_244CEA2B0(&v12, a1);
              uint64_t v8 = v12;
              if (!v12)
              {
                BOOL result = (void *)sub_244CE9FA8((uint64_t)a1, (uint64_t)&v12);
                uint64_t v8 = v12;
                uint64_t v7 = v13;
                if (v12)
                {
                  if (v12 == 768)
                  {
                    BOOL result = sub_244CEA2B0(&v12, a1);
                    uint64_t v8 = v12;
                    goto LABEL_2;
                  }
LABEL_31:
                  unint64_t v9 = (const char *)*((void *)&v12 + 1);
                  goto LABEL_16;
                }
                LODWORD(v8) = 773;
                int v11 = 433;
LABEL_33:
                LODWORD(v7) = v11;
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
  }
LABEL_2:
  unint64_t v9 = (const char *)*((void *)&v12 + 1);
  uint64_t v7 = v13;
LABEL_16:
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7;
  return result;
}

double sub_244D9B308@<D0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  int v11 = 773;
  if (*a1 || a1[1] != 17)
  {
    LODWORD(v8) = 503;
LABEL_33:
    LODWORD(result) = v11;
LABEL_34:
    BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_35;
  }
  sub_244CEA1B4((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 505;
  LODWORD(result) = 773;
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 16) {
    goto LABEL_35;
  }
  sub_244CEA1B4((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  v15[0] = 0;
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 510;
  LODWORD(result) = 773;
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 2) {
    goto LABEL_35;
  }
  sub_244CEA3F0(a1, v15, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  if (v15[0] != 3)
  {
    LODWORD(v8) = 513;
    int v11 = 774;
    goto LABEL_33;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 517;
  LODWORD(result) = 773;
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 != 128 || a1[1]) {
    goto LABEL_35;
  }
  sub_2446C1098(&v16, *((void *)a1 + 1), *((unsigned int *)a1 + 4));
  *a2 = v16;
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 521;
  LODWORD(result) = 773;
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 16) {
    goto LABEL_35;
  }
  sub_244CEA1B4((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 523;
  LODWORD(result) = 773;
  if (*a1) {
    goto LABEL_51;
  }
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (a1[1] != 6) {
    goto LABEL_35;
  }
  sub_2446C1098(&v16, *((void *)a1 + 1), *((unsigned int *)a1 + 4));
  if (*((void *)&v16 + 1) != 9
    || (*(void *)v16 == 0x204036501488660 ? (BOOL v12 = *(unsigned char *)(v16 + 8) == 1) : (BOOL v12 = 0), !v12))
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    int v13 = 525;
LABEL_31:
    a4[1].n128_u32[0] = v13;
    return result;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  unint64_t v8 = v17;
  if (!v16)
  {
    LODWORD(result) = 773;
    int v14 = 527;
LABEL_53:
    LODWORD(v8) = v14;
    goto LABEL_34;
  }
  if (v16 != 768) {
    goto LABEL_68;
  }
  sub_244CEA2B0(&v16, a1);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 530;
  LODWORD(result) = 773;
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 16) {
    goto LABEL_35;
  }
  sub_244CEA1B4((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 532;
  LODWORD(result) = 773;
  if (*a1)
  {
LABEL_51:
    BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_35;
  }
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (a1[1] != 6) {
    goto LABEL_35;
  }
  sub_2446C1098(&v16, *((void *)a1 + 1), *((unsigned int *)a1 + 4));
  if (*((void *)&v16 + 1) != 8 || *(void *)v16 != 0x203043DCE48862ALL)
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    int v13 = 535;
    goto LABEL_31;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  unint64_t v8 = v17;
  if (!v16)
  {
    LODWORD(result) = 773;
    int v14 = 537;
    goto LABEL_53;
  }
  if (v16 != 768) {
    goto LABEL_68;
  }
  sub_244CEA2B0(&v16, a1);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
  double result = *(double *)&v16;
  if (v16) {
    goto LABEL_2;
  }
  LODWORD(v8) = 540;
  LODWORD(result) = 773;
  BOOL v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 4) {
    goto LABEL_35;
  }
  sub_24479476C(&v16, a3, 64);
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  sub_2446C1098(v15, *((void *)a1 + 1), *((unsigned int *)a1 + 4));
  double result = sub_244CE6DB4(32, v15, (uint64_t *)&v16, a4);
  if (!a4->n128_u32[0])
  {
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    if (*((void *)&v16 + 1) >= 0x41uLL)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.h";
      int v13 = 289;
      goto LABEL_31;
    }
    *(void *)(a3 + 64) = *((void *)&v16 + 1);
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.h";
    a4[1].n128_u32[0] = 291;
    sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
    double result = *(double *)&v16;
    unint64_t v8 = v17;
    if (v16)
    {
      if (v16 != 768) {
        goto LABEL_68;
      }
      sub_244CEA2B0(&v16, a1);
      double result = *(double *)&v16;
      if (v16)
      {
LABEL_2:
        BOOL v10 = (const char *)*((void *)&v16 + 1);
        unint64_t v8 = v17;
LABEL_35:
        a4->n128_f64[0] = result;
        a4->n128_u64[1] = (unint64_t)v10;
        a4[1].n128_u64[0] = v8;
        return result;
      }
      sub_244CE9FA8((uint64_t)a1, (uint64_t)&v16);
      double result = *(double *)&v16;
      unint64_t v8 = v17;
      if (v16)
      {
        if (v16 == 768)
        {
          sub_244CEA2B0(&v16, a1);
          double result = *(double *)&v16;
          goto LABEL_2;
        }
LABEL_68:
        BOOL v10 = (const char *)*((void *)&v16 + 1);
        goto LABEL_35;
      }
      LODWORD(result) = 773;
      int v14 = 549;
    }
    else
    {
      LODWORD(result) = 773;
      int v14 = 547;
    }
    goto LABEL_53;
  }
  return result;
}

void *sub_244D9B8E8@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((unint64_t)a1[1] >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = a1[1];
  }
  sub_244CE9F70((uint64_t)&v12, *a1, v5);
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  if (v12 || v13 != 16)
  {
    LODWORD(v7) = 701;
    LODWORD(v8) = 773;
LABEL_32:
    unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_33;
  }
  double result = (void *)sub_244CEA1B4((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  LODWORD(v7) = 708;
  LODWORD(v8) = 773;
  unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v12 != 128 || v13) {
    goto LABEL_33;
  }
  double result = (void *)sub_244CEA1B4((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  LODWORD(v7) = 710;
  LODWORD(v8) = 773;
  unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v12 || v13 != 16) {
    goto LABEL_33;
  }
  double result = (void *)sub_244CEA1B4((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  uint64_t v17 = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  sub_244D9B308(&v12, a2, (uint64_t)&v14, a3);
  unsigned __int32 v10 = a3->n128_u32[0];
  double result = (void *)sub_244CED784(&v14, 64);
  if (v10) {
    return result;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  unint64_t v7 = v16;
  if (!v14)
  {
    LODWORD(v8) = 773;
    int v11 = 725;
LABEL_37:
    LODWORD(v7) = v11;
    goto LABEL_32;
  }
  if (v14 != 768) {
    goto LABEL_35;
  }
  double result = sub_244CEA2B0(&v14, &v12);
  unint64_t v8 = v14;
  if (v14) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
  unint64_t v8 = v14;
  unint64_t v7 = v16;
  if (!v14)
  {
    LODWORD(v8) = 773;
    int v11 = 727;
    goto LABEL_37;
  }
  if (v14 != 768) {
    goto LABEL_35;
  }
  double result = sub_244CEA2B0(&v14, &v12);
  unint64_t v8 = v14;
  if (!v14)
  {
    double result = (void *)sub_244CE9FA8((uint64_t)&v12, (uint64_t)&v14);
    unint64_t v8 = v14;
    unint64_t v7 = v16;
    if (v14)
    {
      if (v14 == 768)
      {
        double result = sub_244CEA2B0(&v14, &v12);
        unint64_t v8 = v14;
        goto LABEL_5;
      }
LABEL_35:
      unint64_t v9 = v15;
      goto LABEL_33;
    }
    LODWORD(v8) = 773;
    int v11 = 729;
    goto LABEL_37;
  }
LABEL_5:
  unint64_t v9 = v15;
  unint64_t v7 = v16;
LABEL_33:
  a3->n128_u64[0] = v8;
  a3->n128_u64[1] = (unint64_t)v9;
  a3[1].n128_u64[0] = v7;
  return result;
}

void *sub_244D9BC0C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  if ((unint64_t)a1[1] >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = a1[1];
  }
  sub_244CE9F70((uint64_t)&v14, *a1, v5);
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  if (v14 || v15 != 16)
  {
    LODWORD(v7) = 744;
    LODWORD(v8) = 773;
LABEL_32:
    unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_33;
  }
  double result = (void *)sub_244CEA1B4((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  LODWORD(v7) = 751;
  LODWORD(v8) = 773;
  unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v14 != 128 || v15) {
    goto LABEL_33;
  }
  double result = (void *)sub_244CEA1B4((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  LODWORD(v7) = 753;
  LODWORD(v8) = 773;
  unint64_t v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v14 || v15 != 16) {
    goto LABEL_33;
  }
  double result = (void *)sub_244CEA1B4((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double result = sub_244D9B078(&v14, a2, (uint64_t)a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  uint64_t v7 = v13;
  if (!v11)
  {
    LODWORD(v8) = 773;
    int v10 = 767;
LABEL_37:
    LODWORD(v7) = v10;
    goto LABEL_32;
  }
  if (v11 != 768) {
    goto LABEL_35;
  }
  double result = sub_244CEA2B0(&v11, &v14);
  uint64_t v8 = v11;
  if (v11) {
    goto LABEL_5;
  }
  double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
  uint64_t v8 = v11;
  uint64_t v7 = v13;
  if (!v11)
  {
    LODWORD(v8) = 773;
    int v10 = 769;
    goto LABEL_37;
  }
  if (v11 != 768) {
    goto LABEL_35;
  }
  double result = sub_244CEA2B0(&v11, &v14);
  uint64_t v8 = v11;
  if (!v11)
  {
    double result = (void *)sub_244CE9FA8((uint64_t)&v14, (uint64_t)&v11);
    uint64_t v8 = v11;
    uint64_t v7 = v13;
    if (v11)
    {
      if (v11 == 768)
      {
        double result = sub_244CEA2B0(&v11, &v14);
        uint64_t v8 = v11;
        goto LABEL_5;
      }
LABEL_35:
      unint64_t v9 = v12;
      goto LABEL_33;
    }
    LODWORD(v8) = 773;
    int v10 = 771;
    goto LABEL_37;
  }
LABEL_5:
  unint64_t v9 = v12;
  uint64_t v7 = v13;
LABEL_33:
  *a3 = v8;
  a3[1] = v9;
  a3[2] = v7;
  return result;
}

double sub_244D9BEF0@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v12);
  int v11 = 21;
  sub_244CB39B8((uint64_t)v12, *(void *)a1, *(void *)(a1 + 8));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v12, 21, 256, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB4C90((uint64_t)v12, &v11, a3);
    if (!*(_DWORD *)a3)
    {
      uint64_t v7 = 0;
      while (1)
      {
        sub_244CB4E58((uint64_t)v12, &v8);
        double result = *(double *)&v9;
        long long v14 = v9;
        int v15 = v10;
        if (v8) {
          break;
        }
        if (v13) {
          ++v7;
        }
      }
      if (v8 == 33)
      {
        *a2 = v7;
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
        *(_DWORD *)(a3 + 16) = 70;
      }
      else
      {
        *(_DWORD *)a3 = v8;
        double result = *(double *)&v14;
        *(_OWORD *)(a3 + 4) = v14;
        *(_DWORD *)(a3 + 20) = v15;
      }
    }
  }
  return result;
}

void sub_244D9C03C(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v24);
  int v23 = 21;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  sub_244CB39B8((uint64_t)v24, *(void *)a1, *(void *)(a1 + 8));
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  sub_244CB55E4((uint64_t)v24, 21, 256, (void *)a7);
  if (*(_DWORD *)a7) {
    return;
  }
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  sub_244CB4C90((uint64_t)v24, &v23, a7);
  if (*(_DWORD *)a7) {
    return;
  }
  unsigned int v14 = 0;
  uint64_t v20 = 0;
  int v19 = 0;
  uint64_t v18 = a6;
  while (2)
  {
    for (char i = BYTE4(v20); ; char i = 1)
    {
LABEL_5:
      unsigned int v16 = v14;
LABEL_6:
      sub_244CB4E58((uint64_t)v24, v21);
      long long v26 = *(_OWORD *)&v21[4];
      int v27 = v22;
      if (*(_DWORD *)v21)
      {
        if (*(_DWORD *)v21 != 33)
        {
          *(_DWORD *)a7 = *(_DWORD *)v21;
          *(_OWORD *)(a7 + 4) = v26;
          *(_DWORD *)(a7 + 20) = v27;
          return;
        }
LABEL_21:
        if (v20 & v19 & HIDWORD(v20))
        {
          *(void *)unint64_t v21 = 0;
          *(void *)(a7 + 8) = 0;
          *(void *)(a7 + 16) = 0;
          *(void *)a7 = 0;
          sub_244D9BEF0(a1, v21, a7);
          if (*(_DWORD *)a7) {
            return;
          }
          *(void *)a7 = 0;
          *(void *)(a7 + 8) = 0;
          *(void *)(a7 + 16) = 0;
          sub_244D9C374(v18, (_OWORD *)a1, *(uint64_t *)v21, (void *)a7);
          if (*(_DWORD *)a7) {
            return;
          }
          *(_DWORD *)a7 = 0;
          *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
          int v17 = 150;
        }
        else
        {
          *(_DWORD *)a7 = 61;
          *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
          int v17 = 145;
        }
LABEL_28:
        *(_DWORD *)(a7 + 16) = v17;
        return;
      }
      unsigned int v14 = v25;
      if (v25 > 0xFF) {
        goto LABEL_21;
      }
      if (i) {
        break;
      }
      if (v25 != 1)
      {
        *(_DWORD *)a7 = 43;
        *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
        int v17 = 108;
        goto LABEL_28;
      }
LABEL_14:
      *(void *)a7 = 0;
      *(void *)(a7 + 8) = 0;
      *(void *)(a7 + 16) = 0;
      sub_244CB5C08((uint64_t)v24, a2, (void *)a7);
      LODWORD(v20) = 1;
      if (*(_DWORD *)a7) {
        return;
      }
    }
    if (v16 >= v25)
    {
      *(_DWORD *)a7 = 43;
      *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      int v17 = 114;
      goto LABEL_28;
    }
    char i = 1;
    unsigned int v16 = v25;
    switch((int)v25)
    {
      case 1:
        goto LABEL_14;
      case 2:
        *(void *)a7 = 0;
        *(void *)(a7 + 8) = 0;
        *(void *)(a7 + 16) = 0;
        sub_244CB5C08((uint64_t)v24, a3, (void *)a7);
        int v19 = 1;
        if (!*(_DWORD *)a7) {
          goto LABEL_5;
        }
        break;
      case 3:
        *(void *)a7 = 0;
        *(void *)(a7 + 8) = 0;
        *(void *)(a7 + 16) = 0;
        sub_244CB3FB0((uint64_t)v24, a4, a7);
        HIDWORD(v20) = 1;
        if (!*(_DWORD *)a7) {
          continue;
        }
        break;
      case 4:
        *(void *)a7 = 0;
        *(void *)(a7 + 8) = 0;
        *(void *)(a7 + 16) = 0;
        sub_244CB5C08((uint64_t)v24, (_OWORD *)a5, (void *)a7);
        unsigned int v16 = v14;
        if (!*(_DWORD *)a7) {
          goto LABEL_6;
        }
        break;
      default:
        goto LABEL_6;
    }
    break;
  }
}

void sub_244D9C374(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = a3;
  *(_OWORD *)(a1 + 8) = *a2;
  uint64_t v6 = a1 + 32;
  sub_244CB39B8(a1 + 32, *(void *)(a1 + 8), *(void *)(a1 + 16));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CB55E4(v6, *(_DWORD *)(a1 + 104), 256, a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB4C90(v6, (_DWORD *)(a1 + 104), (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      while (1)
      {
        long long v7 = 0uLL;
        uint64_t v8 = 0;
        sub_244CB4E58(v6, &v7);
        if (v7 == 33) {
          break;
        }
        *(_OWORD *)a4 = v7;
        a4[2] = v8;
        if (*(_DWORD *)a4) {
          return;
        }
        if (*(void *)(a1 + 48) > 0xFFuLL) {
          goto LABEL_8;
        }
      }
      *(unsigned char *)(a1 + 26) = 1;
LABEL_8:
      *(_WORD *)(a1 + 24) = 257;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/credentials/DeviceAttestationVendorReserved.h";
      *((_DWORD *)a4 + 4) = 74;
    }
  }
}

double sub_244D9C484@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double result = sub_244CB62B8((uint64_t)v20);
  if (!*(void *)(a1 + 8)) {
    goto LABEL_4;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13 != 32)
  {
    if (v13)
    {
      *(_DWORD *)a6 = 47;
      *(void *)(a6 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      int v14 = 162;
      goto LABEL_17;
    }
LABEL_4:
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
    int v14 = 161;
LABEL_17:
    *(_DWORD *)(a6 + 16) = v14;
    return result;
  }
  sub_244CB62E0((uint64_t)v20, *(void *)a5, *(unsigned int *)(a5 + 8));
  int v19 = -1;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = 0;
  sub_244CB7594(v20, 256, 21, &v19, a6);
  if (!*(_DWORD *)a6)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    sub_244CB6ADC((char *)v20, *(char **)a1, *(void *)(a1 + 8), a6);
    if (!*(_DWORD *)a6)
    {
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      sub_244CB6ADC((char *)v20, *(char **)a2, *(void *)(a2 + 8), a6);
      if (!*(_DWORD *)a6)
      {
        *(void *)a6 = 0;
        *(void *)(a6 + 8) = 0;
        *(void *)(a6 + 16) = 0;
        sub_244CB694C();
        if (!*(_DWORD *)a6)
        {
          unint64_t v15 = *(void *)(a3 + 8);
          if (!v15
            || (*(void *)a6 = 0,
                *(void *)(a6 + 8) = 0,
                *(void *)(a6 + 16) = 0,
                sub_244CB6ADC((char *)v20, *(char **)a3, v15, a6),
                !*(_DWORD *)a6))
          {
            sub_244D9CC58(a4);
            a4[3] = 0;
            while (1)
            {
              unint64_t v16 = a4[3];
              if (v16 >= a4[2]) {
                break;
              }
              uint64_t v17 = *a4;
              a4[3] = v16 + 1;
              if (!v17) {
                break;
              }
              *(void *)a6 = 0;
              *(void *)(a6 + 8) = 0;
              *(void *)(a6 + 16) = 0;
              sub_244CB6ADC((char *)v20, *(char **)(v17 + 24 * v16 + 8), *(void *)(v17 + 24 * v16 + 16), a6);
              if (*(_DWORD *)a6) {
                return result;
              }
            }
            *(void *)a6 = 0;
            *(void *)(a6 + 8) = 0;
            *(void *)(a6 + 16) = 0;
            sub_244CB7708((uint64_t)v20, v19, a6);
            if (!*(_DWORD *)a6)
            {
              *(void *)a6 = 0;
              *(void *)(a6 + 8) = 0;
              *(void *)(a6 + 16) = 0;
              double result = sub_244CB6414((uint64_t)v20, a6);
              if (!*(_DWORD *)a6)
              {
                *(void *)a5 = sub_244CDAEA0((void *)a5, 0, v21);
                *(void *)(a5 + 8) = v18;
                if (v18 >= 0x385)
                {
                  *(_DWORD *)a6 = 4;
                  *(void *)(a6 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                  int v14 = 186;
                }
                else
                {
                  *(_DWORD *)a6 = 0;
                  *(void *)(a6 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                  int v14 = 188;
                }
                goto LABEL_17;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_244D9C708(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_244CB62B8((uint64_t)v21);
  if (!*(void *)(a1 + 8)) {
    goto LABEL_4;
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14 != 32)
  {
    if (v14)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      int v15 = 199;
      goto LABEL_19;
    }
LABEL_4:
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
    int v15 = 198;
LABEL_19:
    *(_DWORD *)(a7 + 16) = v15;
    return;
  }
  sub_244CB62E0((uint64_t)v21, *(void *)a6, *(unsigned int *)(a6 + 8));
  int v20 = -1;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  sub_244CB7594(v21, 256, 21, &v20, a7);
  if (!*(_DWORD *)a7)
  {
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    sub_244CB6ADC((char *)v21, *(char **)a1, *(void *)(a1 + 8), a7);
    if (!*(_DWORD *)a7)
    {
      *(void *)a7 = 0;
      *(void *)(a7 + 8) = 0;
      *(void *)(a7 + 16) = 0;
      sub_244CB6ADC((char *)v21, *(char **)a2, *(void *)(a2 + 8), a7);
      if (!*(_DWORD *)a7)
      {
        unint64_t v16 = *(void *)(a3 + 8);
        if (!v16
          || (*(void *)a7 = 0,
              *(void *)(a7 + 8) = 0,
              *(void *)(a7 + 16) = 0,
              sub_244CB6ADC((char *)v21, *(char **)a3, v16, a7),
              !*(_DWORD *)a7))
        {
          unint64_t v17 = *(void *)(a4 + 8);
          if (!v17
            || (*(void *)a7 = 0,
                *(void *)(a7 + 8) = 0,
                *(void *)(a7 + 16) = 0,
                sub_244CB6ADC((char *)v21, *(char **)a4, v17, a7),
                !*(_DWORD *)a7))
          {
            unint64_t v18 = *(void *)(a5 + 8);
            if (!v18
              || (*(void *)a7 = 0,
                  *(void *)(a7 + 8) = 0,
                  *(void *)(a7 + 16) = 0,
                  sub_244CB6ADC((char *)v21, *(char **)a5, v18, a7),
                  !*(_DWORD *)a7))
            {
              *(void *)a7 = 0;
              *(void *)(a7 + 8) = 0;
              *(void *)(a7 + 16) = 0;
              sub_244CB7708((uint64_t)v21, v20, a7);
              if (!*(_DWORD *)a7)
              {
                *(void *)a7 = 0;
                *(void *)(a7 + 8) = 0;
                *(void *)(a7 + 16) = 0;
                sub_244CB6414((uint64_t)v21, a7);
                if (!*(_DWORD *)a7)
                {
                  *(void *)a6 = sub_244CDAEA0((void *)a6, 0, v22);
                  *(void *)(a6 + 8) = v19;
                  if (v19 >= 0x385)
                  {
                    *(_DWORD *)a7 = 4;
                    *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                    int v15 = 223;
                  }
                  else
                  {
                    *(_DWORD *)a7 = 0;
                    *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                    int v15 = 225;
                  }
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_244D9C950(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v25);
  int v24 = 21;
  *a6 = 0;
  a6[1] = 0;
  *a5 = 0;
  a5[1] = 0;
  *a4 = 0;
  a4[1] = 0;
  sub_244CB39B8((uint64_t)v25, *(void *)a1, *(void *)(a1 + 8));
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  sub_244CB55E4((uint64_t)v25, 21, 256, (void *)a7);
  if (!*(_DWORD *)a7)
  {
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    sub_244CB4C90((uint64_t)v25, &v24, a7);
    if (!*(_DWORD *)a7)
    {
      unsigned int v14 = 0;
      uint64_t v20 = 0;
      while (2)
      {
        for (char i = BYTE4(v20); ; char i = 1)
        {
          unsigned int v16 = v14;
LABEL_6:
          sub_244CB4E58((uint64_t)v25, &v21);
          long long v27 = v22;
          int v28 = v23;
          if (v21)
          {
            if (v21 != 33)
            {
              *(_DWORD *)a7 = v21;
              *(_OWORD *)(a7 + 4) = v27;
              *(_DWORD *)(a7 + 20) = v28;
              return;
            }
LABEL_22:
            if (v20 & HIDWORD(v20))
            {
              *(_DWORD *)a7 = 0;
              *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
              int v19 = 302;
            }
            else
            {
              *(_DWORD *)a7 = 61;
              *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
              int v19 = 300;
            }
            goto LABEL_28;
          }
          unsigned int v14 = v26;
          if (v26 > 0xFF) {
            goto LABEL_22;
          }
          if (i) {
            break;
          }
          if (v26 != 1)
          {
            *(_DWORD *)a7 = 43;
            *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
            int v19 = 262;
            goto LABEL_28;
          }
LABEL_17:
          *(void *)a7 = 0;
          *(void *)(a7 + 8) = 0;
          *(void *)(a7 + 16) = 0;
          sub_244CB5C08((uint64_t)v25, a2, (void *)a7);
          LODWORD(v20) = 1;
          if (*(_DWORD *)a7) {
            return;
          }
        }
        if (v16 < v26)
        {
          switch((int)v26)
          {
            case 1:
              goto LABEL_17;
            case 2:
              *(void *)a7 = 0;
              *(void *)(a7 + 8) = 0;
              *(void *)(a7 + 16) = 0;
              sub_244CB5C08((uint64_t)v25, a3, (void *)a7);
              HIDWORD(v20) = 1;
              if (!*(_DWORD *)a7) {
                continue;
              }
              return;
            case 3:
              *(void *)a7 = 0;
              *(void *)(a7 + 8) = 0;
              *(void *)(a7 + 16) = 0;
              unint64_t v17 = (void *)a7;
              unint64_t v18 = a4;
              goto LABEL_14;
            case 4:
              *(void *)a7 = 0;
              *(void *)(a7 + 8) = 0;
              *(void *)(a7 + 16) = 0;
              unint64_t v17 = (void *)a7;
              unint64_t v18 = a5;
              goto LABEL_14;
            case 5:
              *(void *)a7 = 0;
              *(void *)(a7 + 8) = 0;
              *(void *)(a7 + 16) = 0;
              unint64_t v17 = (void *)a7;
              unint64_t v18 = a6;
LABEL_14:
              sub_244CB40C8((uint64_t)v25, v18, v17);
              char i = 1;
              unsigned int v16 = v14;
              if (*(_DWORD *)a7) {
                return;
              }
              goto LABEL_6;
            default:
              *(_DWORD *)a7 = 35;
              *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
              int v19 = 293;
              goto LABEL_28;
          }
        }
        break;
      }
      *(_DWORD *)a7 = 43;
      *(void *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      int v19 = 268;
LABEL_28:
      *(_DWORD *)(a7 + 16) = v19;
    }
  }
}

uint64_t *sub_244D9CC58(uint64_t *result)
{
  unint64_t v1 = result[2];
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    uint64_t v4 = 2;
    uint64_t v5 = 4;
    do
    {
      uint64_t v6 = *result;
      long long v7 = (unsigned __int16 *)(*result + v2);
      unsigned int v8 = -1;
      unint64_t v9 = v3;
      do
      {
        unsigned int v11 = *v7;
        v7 += 12;
        unsigned int v10 = v11;
        if (v8 >= v11) {
          unsigned int v8 = v10;
        }
        ++v9;
      }
      while (v9 < v1);
      if (v3 >= v1) {
        goto LABEL_23;
      }
      unsigned __int8 v12 = (unsigned __int16 *)(v6 + v4);
      unsigned int v13 = -1;
      unint64_t v14 = v1;
      do
      {
        if (v8 == *(v12 - 1) && v13 >= *v12) {
          unsigned int v13 = *v12;
        }
        v12 += 12;
        --v14;
      }
      while (v3 != v14);
      if (v3 >= v1)
      {
LABEL_23:
        uint64_t v16 = -1;
      }
      else
      {
        int v15 = (unsigned int *)(v6 + v5);
        uint64_t v16 = -1;
        unint64_t v17 = -1;
        uint64_t v18 = v3;
        do
        {
          if (v8 == *((unsigned __int16 *)v15 - 2) && v13 == *((unsigned __int16 *)v15 - 1))
          {
            unint64_t v19 = *v15;
            BOOL v20 = v17 > v19;
            if (v17 >= v19) {
              unint64_t v17 = *v15;
            }
            if (v20) {
              uint64_t v16 = v18;
            }
          }
          v15 += 6;
          ++v18;
        }
        while (v1 != v18);
      }
      if (v16 != v3)
      {
        int v21 = (long long *)(v6 + 24 * v3);
        uint64_t v22 = *((void *)v21 + 2);
        long long v23 = *v21;
        uint64_t v24 = 3 * v16;
        unint64_t v25 = (long long *)(v6 + 24 * v16);
        uint64_t v26 = *((void *)v25 + 2);
        *int v21 = *v25;
        *((void *)v21 + 2) = v26;
        uint64_t v27 = *result + 8 * v24;
        *(_OWORD *)uint64_t v27 = v23;
        *(void *)(v27 + 16) = v22;
        unint64_t v1 = result[2];
      }
      ++v3;
      v2 += 24;
      v4 += 24;
      v5 += 24;
    }
    while (v3 < v1);
  }
  return result;
}

void sub_244D9CD94(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244D9CE88(a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    sub_2446D80B8(a1);
    *(void *)a1 = *(void *)(a2 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 16) = *(void *)a2;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 48);
    long long v6 = *(_OWORD *)(a2 + 64);
    long long v7 = *(_OWORD *)(a2 + 80);
    long long v8 = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 48) = v6;
    *(_WORD *)(a1 + 138) = *(_WORD *)(a2 + 120);
    *(unsigned char *)(a1 + 141) = *(unsigned char *)(a2 + 123);
    uint64_t v9 = *(void *)(a2 + 24);
    if (!v9) {
      goto LABEL_7;
    }
    int v10 = *(unsigned __int8 *)(a2 + 122);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10) {
      sub_244D9CF00(a1, v9, (uint64_t)a3);
    }
    else {
      sub_244D9CFA8(a1, v9, (uint64_t)a3);
    }
    if (!*(_DWORD *)a3)
    {
LABEL_7:
      *(_DWORD *)a3 = 0;
      a3[1] = "src/credentials/FabricTable.cpp";
      *((_DWORD *)a3 + 4) = 141;
    }
  }
}

uint64_t sub_244D9CE88@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(result + 32) && *(unsigned char *)(result + 16))
  {
    if ((unint64_t)(*(void *)(result + 8) - 1) >= 0xFFFFFFEFFFFFFFFFLL)
    {
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 8) = "src/credentials/FabricTable.h";
      int v2 = 133;
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = "src/credentials/FabricTable.h";
      int v2 = 136;
    }
  }
  else
  {
    *(_DWORD *)a2 = 47;
    *(void *)(a2 + 8) = "src/credentials/FabricTable.h";
    int v2 = 132;
  }
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

void sub_244D9CF00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 140))
    {
      long long v6 = *(void (****)(void))(a1 + 144);
      if (v6)
      {
        (**v6)(*(void *)(a1 + 144));
        j__free(v6);
      }
    }
    int v7 = 0;
    *(unsigned char *)(a1 + 140) = 1;
    *(void *)(a1 + 144) = a2;
    int v8 = 312;
  }
  else
  {
    int v8 = 303;
    int v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

uint64_t sub_244D9CFA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a3 + 16) = 281;
    return result;
  }
  uint64_t v4 = result;
  uint64_t v8 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 56))(a2, v7);
  if (!*(_DWORD *)a3)
  {
    if (*(unsigned char *)(v4 + 140))
    {
      *(void *)(v4 + 144) = 0;
      *(unsigned char *)(v4 + 140) = 0;
    }
    else
    {
      long long v6 = *(void **)(v4 + 144);
      if (v6)
      {
LABEL_9:
        (*(void (**)(void *, unsigned char *))(*v6 + 64))(v6, v7);
        return sub_244CED784(v7, 97);
      }
    }
    uint64_t v5 = sub_244CC4D84(0x260uLL);
    if (!v5)
    {
      *(void *)(v4 + 144) = 0;
      *(_DWORD *)a3 = 11;
      *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      *(_DWORD *)(a3 + 16) = 297;
      return sub_244CED784(v7, 97);
    }
    long long v6 = v5;
    bzero(v5 + 2, 0x250uLL);
    *long long v6 = &unk_26F954330;
    v6[1] = &unk_26F954540;
    *(void *)(v4 + 144) = v6;
    goto LABEL_9;
  }
  return sub_244CED784(v7, 97);
}

void sub_244D9D154(uint64_t a1, uint64_t a2)
{
  sub_2446D80B8(a1);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 138) = *(_WORD *)(a2 + 138);
  *(unsigned char *)(a1 + 141) = *(unsigned char *)(a2 + 141);
  int v7 = (const void *)sub_244B87CFC(a2);
  uint64_t v9 = (unsigned char *)(a1 + 104);
  if (v8)
  {
    if (v8 >= 0x20) {
      size_t v10 = 32;
    }
    else {
      size_t v10 = v8;
    }
    memcpy((void *)(a1 + 104), v7, v10);
    v9 += v10;
  }
  *uint64_t v9 = 0;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 140) = 0;

  sub_2446D80B8(a2);
}

char *sub_244D9D238@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = result + 104;
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    long long v6 = *(const void **)a2;
    if (v5 >= 0x20) {
      size_t v7 = 32;
    }
    else {
      size_t v7 = v5;
    }
    double result = (char *)memcpy(result + 104, v6, v7);
    v4 += v7;
  }
  *long long v4 = 0;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 252;
  return result;
}

void sub_244D9D2A8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v10);
  sub_244CB62E0((uint64_t)v10, (uint64_t)v13, 0x2CuLL);
  int v9 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB7594(v10, 256, 21, &v9, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      size_t v6 = strlen((const char *)(a1 + 104));
      sub_24479476C(v12, a1 + 104, v6);
      sub_244CB6D80((char *)v10, v12[0], (unint64_t)v12[1], (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB7708((uint64_t)v10, v9, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          unsigned __int16 v7 = v11;
          if (v11 >= 0x10000)
          {
            *(_DWORD *)a3 = 25;
            a3[1] = "src/credentials/FabricTable.cpp";
            int v8 = 184;
          }
          else
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CA2E90("f/%x/m", (uint64_t)v12, *(unsigned __int8 *)(a1 + 137));
            (*(void (**)(uint64_t, char **, unsigned char *, void))(*(void *)a2 + 24))(a2, v12, v13, v7);
            if (*(_DWORD *)a3) {
              return;
            }
            *(_DWORD *)a3 = 0;
            a3[1] = "src/credentials/FabricTable.cpp";
            int v8 = 191;
          }
          *((_DWORD *)a3 + 4) = v8;
        }
      }
    }
  }
}

void sub_244D9D474(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v21[6] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 137) = a3;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_244D93CC0(a5, (void *)a1, (void *)(a1 + 8), a6);
  if (!*(_DWORD *)a6)
  {
    v21[0] = &unk_244EC2D00;
    a6[1] = 0;
    a6[2] = 0;
    *a6 = 0;
    sub_244D93C10(a4, v21, a6);
    if (!*(_DWORD *)a6)
    {
      uint64_t v10 = v21[0];
      *(_OWORD *)(a1 + 32) = *(_OWORD *)v21[0];
      long long v12 = *(_OWORD *)(v10 + 32);
      long long v11 = *(_OWORD *)(v10 + 48);
      long long v13 = *(_OWORD *)(v10 + 16);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(v10 + 64);
      *(_OWORD *)(a1 + 64) = v12;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v13;
      v20[0] = (uint64_t)&__src;
      v20[1] = 8;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      sub_244CE718C(a1 + 24, *(void *)(a1 + 8), v20, (uint64_t)a6);
      if (!*(_DWORD *)a6)
      {
        *(void *)(a1 + 16) = bswap64(__src);
        unsigned __int16 v18 = 44;
        a6[1] = 0;
        a6[2] = 0;
        *a6 = 0;
        sub_244CA2E90("f/%x/m", (uint64_t)v20, *(unsigned __int8 *)(a1 + 137));
        (*(void (**)(uint64_t, uint64_t *, void *, unsigned __int16 *))(*(void *)a2 + 16))(a2, v20, v21, &v18);
        if (!*(_DWORD *)a6)
        {
          sub_244CB3988((uint64_t)v20);
          sub_244CB39B8((uint64_t)v20, (uint64_t)v21, v18);
          *a6 = 0;
          a6[1] = 0;
          a6[2] = 0;
          sub_244CB55E4((uint64_t)v20, 21, 256, a6);
          if (!*(_DWORD *)a6)
          {
            int v17 = 0;
            a6[1] = 0;
            a6[2] = 0;
            *a6 = 0;
            sub_244CB4C90((uint64_t)v20, &v17, (uint64_t)a6);
            if (!*(_DWORD *)a6)
            {
              *a6 = 0;
              a6[1] = 0;
              a6[2] = 0;
              sub_244CB54B4((uint64_t)v20, 0, a6);
              if (!*(_DWORD *)a6)
              {
                *a6 = 0;
                a6[1] = 0;
                a6[2] = 0;
                sub_24484B11C((uint64_t)v20, (_WORD *)(a1 + 138), a6);
                if (!*(_DWORD *)a6)
                {
                  *a6 = 0;
                  a6[1] = 0;
                  a6[2] = 0;
                  sub_244CB54B4((uint64_t)v20, 1, a6);
                  if (!*(_DWORD *)a6)
                  {
                    long long __src = 0uLL;
                    a6[1] = 0;
                    a6[2] = 0;
                    *a6 = 0;
                    sub_244CB41F0((uint64_t)v20, &__src, a6);
                    if (!*(_DWORD *)a6)
                    {
                      uint64_t v14 = *((void *)&__src + 1);
                      if (*((void *)&__src + 1) >= 0x21uLL)
                      {
                        *(_DWORD *)a6 = 25;
                        a6[1] = "src/credentials/FabricTable.cpp";
                        int v16 = 236;
                        goto LABEL_18;
                      }
                      int v15 = (unsigned char *)(a1 + 104);
                      if (*((void *)&__src + 1))
                      {
                        memcpy(v15, (const void *)__src, *((size_t *)&__src + 1));
                        v15 += v14;
                      }
                      *int v15 = 0;
                      a6[1] = 0;
                      a6[2] = 0;
                      *a6 = 0;
                      sub_244CB4D00((uint64_t)v20, v17, (uint64_t)a6);
                      if (!*(_DWORD *)a6)
                      {
                        *a6 = 0;
                        a6[1] = 0;
                        a6[2] = 0;
                        sub_244CB4DC8((uint64_t)v20, (uint64_t)a6);
                        if (!*(_DWORD *)a6)
                        {
                          *(_DWORD *)a6 = 0;
                          a6[1] = "src/credentials/FabricTable.cpp";
                          int v16 = 245;
LABEL_18:
                          *((_DWORD *)a6 + 4) = v16;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_244D9D778@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 - 1 >= 0xFE)
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v7 = 257;
LABEL_11:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  uint64_t v4 = *(void *)(result + 2584);
  if (!v4)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v7 = 258;
    goto LABEL_11;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CA2E90("f/%x/m", (uint64_t)buf, a2);
  double result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v4 + 32))(v4, buf);
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 == 160)
    {
      size_t v6 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Warning: metadata not found during delete of fabric 0x%x", buf, 8u);
      }
      double result = sub_244CC4E58(1u);
      if (result) {
        return sub_244CC4DE0(0x11u, 1);
      }
    }
    else
    {
      int v8 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = *(_OWORD *)a3;
        *(void *)&uint8_t buf[16] = *(void *)(a3 + 16);
        int v9 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = a2;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v9;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Error deleting metadata for fabric fabric 0x%x: %s", buf, 0x12u);
      }
      double result = sub_244CC4E58(1u);
      if (result)
      {
        *(_OWORD *)long long buf = *(_OWORD *)a3;
        *(void *)&uint8_t buf[16] = *(void *)(a3 + 16);
        sub_244CB7B34((const char **)buf, 1);
        return sub_244CC4DE0(0x11u, 1);
      }
    }
  }
  return result;
}

void sub_244D9D9A8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t *a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  BOOL v20 = sub_244D7DFA0();
  if (os_signpost_enabled(v20))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    __int16 v31 = 2080;
    __int16 v32 = "ValidateIncomingNOCChain";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(void *)long long buf = -1;
  __int16 v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  sub_244D92070((uint64_t)buf);
  v33 |= 1u;
  v34 |= 1u;
  uint64_t v35 = a5;
  int v21 = sub_244CC8484(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v36 = 0;
    _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_DEFAULT, "Validating NOC chain", v36, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x11u, 2);
  }
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  sub_244D9DD94(a1, a2, a3, (uint64_t)buf, a6, a7, a8, a10, (uint64_t)&v28, a11);
  if (v28)
  {
    if (v28 != 92)
    {
      LODWORD(v28) = 80;
      *((void *)&v28 + 1) = "src/credentials/FabricTable.cpp";
      LODWORD(v29) = 351;
    }
    uint64_t v22 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)int v36 = v28;
      uint64_t v37 = v29;
      long long v23 = sub_244CB7B34((const char **)v36, 1);
      *(_DWORD *)int v36 = 136315138;
      *(void *)&v36[4] = v23;
      _os_log_impl(&dword_2446BD000, v22, OS_LOG_TYPE_ERROR, "Failed NOC chain validation: %s", v36, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)int v36 = v28;
      uint64_t v37 = v29;
      sub_244CB7B34((const char **)v36, 1);
      sub_244CC4DE0(0x11u, 1);
    }
  }
  *(_OWORD *)a9 = v28;
  *(void *)(a9 + 16) = v29;
  if (!*(_DWORD *)a9)
  {
    if (!a4 || *a7 == a4)
    {
      uint64_t v26 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v36 = 0;
        _os_log_impl(&dword_2446BD000, v26, OS_LOG_TYPE_DEFAULT, "NOC chain validation successful", v36, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x11u, 2);
      }
      int v25 = 0;
      int v24 = 366;
    }
    else
    {
      int v24 = 362;
      int v25 = 80;
    }
    *(_DWORD *)a9 = v25;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a9 + 16) = v24;
  }
  uint64_t v27 = sub_244D7DFA0();
  if (os_signpost_enabled(v27))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    __int16 v31 = 2080;
    __int16 v32 = "ValidateIncomingNOCChain";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v27, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_244D9DD94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, unint64_t *a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  sub_244D90B9C((uint64_t)&v40);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  sub_244D90C14((uint64_t)&v40, 3u, a9);
  if (*(_DWORD *)a9) {
    return sub_244D90BA8((uint64_t)&v40);
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  sub_244D90E1C((uint64_t)&v40, *(void *)a3, *(void *)(a3 + 8), 2, (void *)a9);
  if (*(_DWORD *)a9) {
    return sub_244D90BA8((uint64_t)&v40);
  }
  unint64_t v20 = a2[1];
  if (v20)
  {
    *(void *)a9 = 0;
    *(void *)(a9 + 8) = 0;
    *(void *)(a9 + 16) = 0;
    sub_244D90E1C((uint64_t)&v40, *a2, v20, 1, (void *)a9);
    if (*(_DWORD *)a9) {
      return sub_244D90BA8((uint64_t)&v40);
    }
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  sub_244D90E1C((uint64_t)&v40, *(void *)a1, *(void *)(a1 + 8), 1, (void *)a9);
  if (*(_DWORD *)a9) {
    return sub_244D90BA8((uint64_t)&v40);
  }
  uint64_t v21 = v41;
  if (v41)
  {
    uint64_t v21 = v40 + 424 * (v41 - 1);
    uint64_t v22 = v21 + 16;
  }
  else
  {
    uint64_t v22 = 16;
  }
  uint64_t v39 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  *(void *)a9 = 0;
  sub_244D9195C((uint64_t)&v40, v22, v21 + 336, a4, &v39, a9);
  if (*(_DWORD *)a9) {
    return sub_244D90BA8((uint64_t)&v40);
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  sub_244D939D8(v40 + 424 * (v41 - 1), a7, a6, a9);
  if (*(_DWORD *)a9) {
    return sub_244D90BA8((uint64_t)&v40);
  }
  uint64_t v38 = 0;
  if (a2[1])
  {
    sub_244D93DD0(v40 + 424, &v38, (uint64_t)v42);
    int v23 = *(_DWORD *)v42;
    long long v48 = *(_OWORD *)&v42[4];
    int v49 = *(_DWORD *)&v42[20];
    if (*(_DWORD *)v42 != 216)
    {
      if (*(_DWORD *)v42) {
        goto LABEL_19;
      }
      if (v38 != *a6)
      {
        *(_DWORD *)a9 = 198;
        *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
        int v35 = 439;
        goto LABEL_27;
      }
    }
  }
  unint64_t v37 = 0;
  sub_244D93DD0(v40, &v37, (uint64_t)v42);
  int v23 = *(_DWORD *)v42;
  long long v48 = *(_OWORD *)&v42[4];
  int v49 = *(_DWORD *)&v42[20];
  if (*(_DWORD *)v42)
  {
    if (*(_DWORD *)v42 == 216)
    {
      unint64_t v24 = *a6;
      goto LABEL_21;
    }
LABEL_19:
    *(_DWORD *)a9 = v23;
    *(_OWORD *)(a9 + 4) = v48;
    *(_DWORD *)(a9 + 20) = v49;
    return sub_244D90BA8((uint64_t)&v40);
  }
  unint64_t v24 = v37;
  if (v37 != *a6)
  {
    *(_DWORD *)a9 = 89;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v35 = 452;
LABEL_27:
    *(_DWORD *)(a9 + 16) = v35;
    return sub_244D90BA8((uint64_t)&v40);
  }
LABEL_21:
  v36[0] = (uint64_t)&v47;
  v36[1] = 8;
  *(void *)long long v42 = &unk_26F954540;
  uint64_t v25 = *(void *)(v40 + 360);
  *(_OWORD *)&v42[8] = *(_OWORD *)v25;
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v27 = *(_OWORD *)(v25 + 32);
  long long v28 = *(_OWORD *)(v25 + 48);
  char v46 = *(unsigned char *)(v25 + 64);
  long long v44 = v27;
  long long v45 = v28;
  long long v43 = v26;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  *(void *)a9 = 0;
  sub_244CE718C((uint64_t)v42, v24, v36, a9);
  if (!*(_DWORD *)a9)
  {
    *a5 = bswap64(v47);
    if (a10)
    {
      long long v29 = *(_OWORD *)&v42[8];
      *(_OWORD *)(a10 + 24) = v43;
      long long v30 = v45;
      *(_OWORD *)(a10 + 40) = v44;
      *(_OWORD *)(a10 + 56) = v30;
      *(unsigned char *)(a10 + 72) = v46;
      *(_OWORD *)(a10 + 8) = v29;
    }
    uint64_t v31 = *(void *)(v40 + 424 * (v41 - 1) + 360);
    *(_OWORD *)(a8 + 8) = *(_OWORD *)v31;
    long long v33 = *(_OWORD *)(v31 + 32);
    long long v32 = *(_OWORD *)(v31 + 48);
    char v34 = *(unsigned char *)(v31 + 64);
    *(_OWORD *)(a8 + 24) = *(_OWORD *)(v31 + 16);
    *(unsigned char *)(a8 + 72) = v34;
    *(_OWORD *)(a8 + 56) = v32;
    *(_OWORD *)(a8 + 40) = v33;
    *(_DWORD *)a9 = 0;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v35 = 480;
    goto LABEL_27;
  }
  return sub_244D90BA8((uint64_t)&v40);
}

void sub_244D9E144(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    int v13 = 136315394;
    uint64_t v14 = "Fabric";
    __int16 v15 = 2080;
    int v16 = "SignWithOpKeypair";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
  uint64_t v11 = *(void *)(a1 + 144);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2, a3, a4);
  }
  else
  {
    *(_DWORD *)a5 = 16;
    *(void *)(a5 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a5 + 16) = 372;
  }
  long long v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    int v13 = 136315394;
    uint64_t v14 = "Fabric";
    __int16 v15 = 2080;
    int v16 = "SignWithOpKeypair";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
}

void sub_244D9E2F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  size_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    int v13 = 136315394;
    uint64_t v14 = "Fabric";
    __int16 v15 = 2080;
    int v16 = "FetchRootPubKey";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
  if (*(unsigned char *)(a1 + 137) && (unint64_t)(*(void *)a1 - 1) <= 0xFFFFFFEFFFFFFFFELL)
  {
    int v7 = 0;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 32);
    long long v8 = *(_OWORD *)(a1 + 48);
    long long v9 = *(_OWORD *)(a1 + 64);
    long long v10 = *(_OWORD *)(a1 + 80);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 96);
    *(_OWORD *)(a2 + 56) = v10;
    *(_OWORD *)(a2 + 40) = v9;
    *(_OWORD *)(a2 + 24) = v8;
    int v11 = 382;
  }
  else
  {
    int v11 = 380;
    int v7 = 16;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  long long v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    int v13 = 136315394;
    uint64_t v14 = "Fabric";
    __int16 v15 = 2080;
    int v16 = "FetchRootPubKey";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
}

void sub_244D9E4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t *a7@<X6>, void *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v20 = sub_244D7DFA0();
  if (os_signpost_enabled(v20))
  {
    *(_DWORD *)long long buf = 136315394;
    long long v26 = "Fabric";
    __int16 v27 = 2080;
    long long v28 = "VerifyCredentials";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244D6A434("src/credentials/FabricTable.cpp", 391);
  int v23 = buf;
  uint64_t v24 = 400;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  sub_244D9E6A4(a1, a2, (uint64_t)&v23, (uint64_t)a9);
  if (!*(_DWORD *)a9)
  {
    sub_2446C1098(v22, (uint64_t)v23, v24);
    sub_244D9DD94(a3, a4, (uint64_t)v22, a5, a6, a7, a8, a10, (uint64_t)a9, a11);
  }
  uint64_t v21 = sub_244D7DFA0();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)long long buf = 136315394;
    long long v26 = "Fabric";
    __int16 v27 = 2080;
    long long v28 = "VerifyCredentials";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244D9E6A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    int v11 = 136315394;
    long long v12 = "Fabric";
    __int16 v13 = 2080;
    uint64_t v14 = "FetchRootCert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 2600);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v9 + 96))(v9, a2, 0, a3);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = 609;
  }
  long long v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    int v11 = 136315394;
    long long v12 = "Fabric";
    __int16 v13 = 2080;
    uint64_t v14 = "FetchRootCert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

uint64_t *sub_244D9E84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244D9E854(a1, a2, a3, 0);
}

uint64_t *sub_244D9E854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[10] = *MEMORY[0x263EF8340];
  v15[0] = &unk_26F954540;
  if (*(unsigned char *)(a1 + 2569)
    && (unint64_t)(*(void *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0)
  {
    long long v8 = (uint64_t *)(a1 + 2432);
    sub_244D9E2F8(a1 + 2432, (uint64_t)v15, (uint64_t)v14);
    uint64_t v9 = a4;
    if (a4)
    {
      if (!v14[0]) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = *v8;
      if (!v14[0])
      {
LABEL_8:
        if (sub_244B9221C(a2, (uint64_t)v15) && *(void *)(a1 + 2440) == a3 && v9 == *v8) {
          return v8;
        }
      }
    }
  }
  uint64_t v10 = 0;
  while (1)
  {
    int v11 = (uint64_t *)(a1 + v10);
    uint64_t v12 = a4;
    if (!a4) {
      uint64_t v12 = *v11;
    }
    if (*((unsigned char *)v11 + 137))
    {
      if ((unint64_t)(*v11 - 1) <= 0xFFFFFFEFFFFFFFFELL)
      {
        sub_244D9E2F8(a1 + v10, (uint64_t)v15, (uint64_t)v14);
        if (!v14[0] && sub_244B9221C(a2, (uint64_t)v15) && *(void *)(a1 + v10 + 8) == a3 && v12 == *v11) {
          break;
        }
      }
    }
    v10 += 152;
    if (v10 == 2432) {
      return 0;
    }
  }
  return (uint64_t *)(a1 + v10);
}

uint64_t sub_244D9EA0C(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 2569)
    && (unint64_t)(*(void *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0
    && *(unsigned __int8 *)(a1 + 2569) == a2)
  {
    return a1 + 2432;
  }
  for (uint64_t i = 0; i != 2432; i += 152)
  {
    if (*(unsigned char *)(a1 + i + 137))
    {
      if (*(unsigned __int8 *)(a1 + i + 137) == a2
        && (unint64_t)(*(void *)(a1 + i) - 1) < 0xFFFFFFEFFFFFFFFFLL)
      {
        return a1 + i;
      }
    }
  }
  return 0;
}

uint64_t sub_244D9EA90(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 2569)
    && (unint64_t)(*(void *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0
    && *(unsigned __int8 *)(a1 + 2569) == a2)
  {
    return a1 + 2432;
  }
  uint64_t v3 = 0;
  while (1)
  {
    if (*(unsigned char *)(a1 + v3 + 137))
    {
      if (*(unsigned __int8 *)(a1 + v3 + 137) == a2
        && (unint64_t)(*(void *)(a1 + v3) - 1) < 0xFFFFFFEFFFFFFFFFLL)
      {
        break;
      }
    }
    v3 += 152;
    if (v3 == 2432) {
      return 0;
    }
  }
  return a1 + v3;
}

uint64_t sub_244D9EB18(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2569)
    && (unint64_t)(*(void *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0
    && *(void *)(a1 + 2448) == a2)
  {
    return a1 + 2432;
  }
  uint64_t v3 = 0;
  while (1)
  {
    if (*(unsigned char *)(a1 + v3 + 137))
    {
      if ((unint64_t)(*(void *)(a1 + v3) - 1) <= 0xFFFFFFEFFFFFFFFELL)
      {
        uint64_t v2 = a1 + v3;
        if (*(void *)(a1 + v3 + 16) == a2) {
          break;
        }
      }
    }
    v3 += 152;
    if (v3 == 2432) {
      return 0;
    }
  }
  return v2;
}

void sub_244D9EBAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    int v10 = 136315394;
    int v11 = "Fabric";
    __int16 v12 = 2080;
    __int16 v13 = "FetchPendingNonFabricAssociatedRootCert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  if (*(void *)(a1 + 2600))
  {
    __int16 v7 = *(_WORD *)(a1 + 2644);
    if ((v7 & 2) != 0)
    {
      if ((v7 & 8) == 0)
      {
        sub_244D9E6A4(a1, *(unsigned __int8 *)(a1 + 2616), a2, a3);
        goto LABEL_11;
      }
      *(_DWORD *)a3 = 216;
      *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      int v8 = 626;
    }
    else
    {
      *(_DWORD *)a3 = 216;
      *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      int v8 = 619;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v8 = 616;
  }
  *(_DWORD *)(a3 + 16) = v8;
LABEL_11:
  uint64_t v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    int v10 = 136315394;
    int v11 = "Fabric";
    __int16 v12 = 2080;
    __int16 v13 = "FetchPendingNonFabricAssociatedRootCert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

void sub_244D9ED74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)__int16 v12 = 136315394;
    *(void *)&v12[4] = "Fabric";
    *(_WORD *)&v12[12] = 2080;
    *(void *)&void v12[14] = "FetchICACert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", v12, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 2600);
  if (v9)
  {
    memset(v12, 0, sizeof(v12));
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v9 + 96))(v12);
    if (*(_DWORD *)v12 != 216
      || !(*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2600) + 32))(*(void *)(a1 + 2600), a2, 2))
    {
      *(_OWORD *)a4 = *(_OWORD *)v12;
      *(void *)(a4 + 16) = *(void *)&v12[16];
      goto LABEL_10;
    }
    sub_2446C1548(a3, 0);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    int v10 = 644;
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    int v10 = 635;
  }
  *(_DWORD *)(a4 + 16) = v10;
LABEL_10:
  int v11 = sub_244D7DFA0();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)__int16 v12 = 136315394;
    *(void *)&v12[4] = "Fabric";
    *(_WORD *)&v12[12] = 2080;
    *(void *)&void v12[14] = "FetchICACert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", v12, 0x16u);
  }
}

void sub_244D9EF98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    int v11 = 136315394;
    __int16 v12 = "Fabric";
    __int16 v13 = 2080;
    uint64_t v14 = "FetchNOCCert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 2600);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 96))(v9, a2, 2, a3);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = 655;
  }
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    int v11 = 136315394;
    __int16 v12 = "Fabric";
    __int16 v13 = 2080;
    uint64_t v14 = "FetchNOCCert";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_244D9F140(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    int v11 = 136315394;
    __int16 v12 = "Fabric";
    __int16 v13 = 2080;
    uint64_t v14 = "FetchRootPubkey";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v9 = sub_244D9EA90(a1, a2);
  if (v9)
  {
    sub_244D9E2F8(v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 113;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = 663;
  }
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    int v11 = 136315394;
    __int16 v12 = "Fabric";
    __int16 v13 = 2080;
    uint64_t v14 = "FetchRootPubkey";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_244D9F2C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  __int16 v7 = &v9;
  uint64_t v8 = 400;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244D9EF98(a1, a2, (uint64_t)&v7, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2446C1098(v6, (uint64_t)v7, v8);
    sub_244D93E48((uint64_t)v6, a3, a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/credentials/FabricTable.cpp";
      *((_DWORD *)a4 + 4) = 673;
    }
  }
}

void sub_244D9F394(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 2584);
  if (v4)
  {
    if (!a2) {
      sub_244E290AC();
    }
    int v5 = *(unsigned __int8 *)(a2 + 137);
    if ((v5 - 1) > 0xFD)
    {
      int v8 = 682;
      int v7 = 172;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244D9D2A8(a2, v4, a3);
      if (*(_DWORD *)a3) {
        return;
      }
      size_t v6 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v10 = v5;
        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Metadata for Fabric 0x%x persisted to storage.", buf, 8u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x11u, 2);
      }
      int v7 = 0;
      int v8 = 689;
    }
  }
  else
  {
    int v8 = 678;
    int v7 = 3;
  }
  *(_DWORD *)a3 = v7;
  a3[1] = "src/credentials/FabricTable.cpp";
  *((_DWORD *)a3 + 4) = v8;
}

void sub_244D9F4DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 2584))
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    int v8 = 694;
    goto LABEL_14;
  }
  if (*(unsigned char *)(a2 + 137) && (unint64_t)(*(void *)a2 - 1) <= 0xFFFFFFEFFFFFFFFELL)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    int v8 = 695;
LABEL_14:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  uint64_t v25 = &v37;
  uint64_t v26 = 400;
  int v23 = &v36;
  uint64_t v24 = 400;
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_244D9EF98(a1, a3, (uint64_t)&v25, (uint64_t)&v21);
  if (!v21)
  {
    sub_244D9E6A4(a1, a3, (uint64_t)&v23, (uint64_t)buf);
    long long v21 = *(_OWORD *)buf;
    uint64_t v22 = *(void *)&buf[16];
    if (!*(_DWORD *)buf)
    {
      uint64_t v9 = *(void *)(a1 + 2584);
      sub_2446C1098(v20, (uint64_t)v23, v24);
      sub_2446C1098(v19, (uint64_t)v25, v26);
      sub_244D9D474(a2, v9, a3, (uint64_t)v20, (uint64_t)v19, buf);
      long long v21 = *(_OWORD *)buf;
      uint64_t v22 = *(void *)&buf[16];
      if (!*(_DWORD *)buf)
      {
        __int16 v12 = sub_244CC8484(0x11u, "FabricProvisioning");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(unsigned __int8 *)(a2 + 137);
          uint64_t v15 = *(void *)(a2 + 8);
          uint64_t v14 = *(void *)(a2 + 16);
          uint64_t v16 = *(void *)a2;
          uint64_t v17 = HIDWORD(*(void *)a2);
          int v18 = *(unsigned __int16 *)(a2 + 138);
          *(_DWORD *)long long buf = 67110912;
          *(_DWORD *)&uint8_t buf[4] = v13;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = HIDWORD(v14);
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v14;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&unsigned char buf[22] = HIDWORD(v15);
          __int16 v28 = 1024;
          int v29 = v15;
          __int16 v30 = 1024;
          int v31 = v17;
          __int16 v32 = 1024;
          int v33 = v16;
          __int16 v34 = 1024;
          int v35 = v18;
          _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Fabric index 0x%x was retrieved from storage. Compressed FabricId 0x%08X%08X, FabricId 0x%08X%08X, NodeId 0x%08X%08X, VendorId 0x%04X", buf, 0x32u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(0x11u, 2);
        }
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
        int v8 = 730;
        goto LABEL_14;
      }
    }
  }
  int v10 = sub_244CC8484(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = v21;
    *(void *)&uint8_t buf[16] = v22;
    uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v11;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Failed to load Fabric (0x%x): %s", buf, 0x12u);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = v21;
    *(void *)&uint8_t buf[16] = v22;
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0x11u, 1);
  }
  sub_2446D80B8(a2);
  *(_OWORD *)a4 = v21;
  *(void *)(a4 + 16) = v22;
}

uint64_t sub_244D9F850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, long long **a4@<X4>, unsigned char *a5@<X5>, uint64_t a6@<X8>)
{
  return sub_244D9F86C(a1, 0, a2, a3, a4, a5, a6);
}

uint64_t sub_244D9F86C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, long long **a5@<X5>, unsigned char *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!a6)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a7 + 16) = 78;
    return result;
  }
  __int16 v12 = (unsigned __int8 *)result;
  v32[0] = &unk_26F954330;
  v32[1] = &unk_26F954540;
  char v33 = 0;
  uint64_t v31 = 0;
  int v13 = a5[1];
  if (v13)
  {
    if (v13 != (long long *)97)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/credentials/FabricTable.cpp";
      *(_DWORD *)(a7 + 16) = 88;
      goto LABEL_13;
    }
    uint64_t v14 = *a5;
    long long v15 = **a5;
    long long v16 = (*a5)[2];
    v29[1] = (*a5)[1];
    v29[2] = v16;
    v29[0] = v15;
    long long v17 = v14[3];
    long long v18 = v14[4];
    long long v19 = v14[5];
    char v30 = *((unsigned char *)v14 + 96);
    v29[4] = v18;
    v29[5] = v19;
    void v29[3] = v17;
    uint64_t v31 = 97;
    unint64_t v20 = v32;
    sub_244CEDB94((uint64_t)v32, (uint64_t)v29, (uint64_t)&v26);
    uint64_t v21 = v26;
    if (v26) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v20 = 0;
  }
  sub_244DA26F4(v12, (uint64_t)&v26);
  uint64_t v21 = v26;
  if (v26)
  {
LABEL_9:
    uint64_t v25 = v21;
    uint64_t v22 = v27;
    uint64_t v23 = v28;
    goto LABEL_10;
  }
  sub_244DA2B84((uint64_t)v12, a4, a3, 65521, (uint64_t)v20, 0, 0, a6, (uint64_t)&v26);
  uint64_t v24 = v26;
  uint64_t v22 = v27;
  uint64_t v23 = v28;
  if (!v26 && (a2 & 1) == 0)
  {
    sub_244DA3634(v12, (uint64_t)&v26);
    uint64_t v24 = v26;
    uint64_t v22 = v27;
    uint64_t v23 = v28;
  }
  if (!v24)
  {
    LODWORD(v24) = 0;
    goto LABEL_11;
  }
  uint64_t v25 = v24;
LABEL_10:
  sub_244DA0B38((uint64_t)v12);
  uint64_t v24 = v25;
LABEL_11:
  *(void *)a7 = v24;
  *(void *)(a7 + 8) = v22;
  *(void *)(a7 + 16) = v23;
LABEL_13:
  sub_244CED784(v29, 97);
  return sub_244CEDE70((uint64_t)v32);
}

uint64_t sub_244D9FABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, long long **a4@<X4>, unsigned char *a5@<X5>, uint64_t a6@<X8>)
{
  return sub_244D9F86C(a1, 1, a2, a3, a4, a5, a6);
}

void sub_244D9FAD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    int v10 = 136315394;
    uint64_t v11 = "Fabric";
    __int16 v12 = 2080;
    int v13 = "NotifyFabricUpdated";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  int v7 = *(void **)(a1 + 2608);
  if (v7)
  {
    do
    {
      int v8 = (void *)v7[1];
      (*(void (**)(void *, uint64_t, uint64_t))(*v7 + 40))(v7, a1, a2);
      int v7 = v8;
    }
    while (v8);
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 788;
  uint64_t v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    int v10 = 136315394;
    uint64_t v11 = "Fabric";
    __int16 v12 = 2080;
    int v13 = "NotifyFabricUpdated";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

void sub_244D9FC74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    int v10 = 136315394;
    uint64_t v11 = "Fabric";
    __int16 v12 = 2080;
    int v13 = "NotifyFabricCommitted";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  int v7 = *(void **)(a1 + 2608);
  if (v7)
  {
    do
    {
      int v8 = (void *)v7[1];
      (*(void (**)(void *, uint64_t, uint64_t))(*v7 + 32))(v7, a1, a2);
      int v7 = v8;
    }
    while (v8);
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 804;
  uint64_t v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    int v10 = 136315394;
    uint64_t v11 = "Fabric";
    __int16 v12 = 2080;
    int v13 = "NotifyFabricCommitted";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

void sub_244D9FE10(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, __int16 a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  char v64 = 0;
  uint64_t v65 = 0;
  unint64_t v66 = 0;
  int v67 = &unk_26F954540;
  int v68 = 0xFFFF;
  if (a3)
  {
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = a1 + v15;
      if (!*(unsigned char *)(a1 + v15 + 137) || (unint64_t)(*(void *)v16 - 1) >= 0xFFFFFFEFFFFFFFFFLL) {
        break;
      }
      v15 += 152;
      if (v15 == 2432)
      {
        *(_DWORD *)a8 = 11;
        *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
        int v17 = 833;
        goto LABEL_20;
      }
    }
    char v49 = a5;
    int v50 = a7;
    unint64_t v48 = 0;
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    LOWORD(v68) = a6;
    char v64 = a2;
  }
  else
  {
    uint64_t v18 = sub_244D9EA90(a1, a2);
    if (!v18)
    {
      *(_DWORD *)a8 = 172;
      *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
      int v17 = 842;
      goto LABEL_20;
    }
    uint64_t v19 = v18;
    char v49 = a5;
    int v50 = a7;
    uint64_t v16 = a1 + 2432;
    sub_2446D80B8(a1 + 2432);
    LOWORD(v68) = *(_WORD *)(v19 + 138);
    char v64 = a2;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = sub_244B87CFC(v19);
    unint64_t v48 = v22;
  }
  uint64_t v57 = &unk_26F9574C0;
  unsigned int v58 = 0;
  v61[0] = &unk_26F954540;
  uint64_t v23 = sub_244CC4D84(0x190uLL);
  if (!v23)
  {
    *(_DWORD *)a8 = 11;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    int v17 = 864;
    goto LABEL_20;
  }
  uint64_t v24 = v23;
  int v47 = a3;
  uint64_t v25 = sub_244CC4D84(0x190uLL);
  if (!v25)
  {
    *(_DWORD *)a8 = 11;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a8 + 16) = 865;
    j__free(v24);
    return;
  }
  uint64_t v26 = v25;
  long long __src = (void *)v21;
  uint64_t v27 = sub_244CC4D84(0x190uLL);
  if (v27)
  {
    uint64_t v28 = v27;
    sub_24479476C(buf, (uint64_t)v24, 400);
    sub_24479476C(&v51, (uint64_t)v26, 400);
    sub_24479476C(v56, (uint64_t)v28, 400);
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    sub_244D9EF98(a1, a2, (uint64_t)buf, a8);
    if (*(_DWORD *)a8) {
      goto LABEL_16;
    }
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    sub_244D9ED74(a1, a2, (uint64_t)&v51, a8);
    if (*(_DWORD *)a8
      || (*(void *)a8 = 0,
          *(void *)(a8 + 8) = 0,
          *(void *)(a8 + 16) = 0,
          sub_244D9E6A4(a1, a2, (uint64_t)v56, a8),
          *(_DWORD *)a8))
    {
LABEL_16:
      BOOL v29 = 1;
    }
    else
    {
      *(void *)a8 = 0;
      *(void *)(a8 + 8) = 0;
      *(void *)(a8 + 16) = 0;
      sub_2446C1098(v55, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      sub_2446C1098(v54, v51, *((uint64_t *)&v51 + 1));
      sub_2446C1098(v53, v56[0], v56[1]);
      sub_244D9D9A8((uint64_t)v55, v54, (uint64_t)v53, v20, (uint64_t)&v57, &v62, &v66, &v63, a8, (uint64_t)v61, (uint64_t)&v67);
      BOOL v29 = *(_DWORD *)a8 != 0;
    }
    j__free(v28);
  }
  else
  {
    *(_DWORD *)a8 = 11;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a8 + 16) = 866;
    BOOL v29 = 1;
  }
  j__free(v26);
  j__free(v24);
  if (v29) {
    return;
  }
  if (a4)
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
    if (sub_244B9221C(v30, (uint64_t)v61))
    {
      uint64_t v65 = a4;
      BYTE2(v68) = v49;
      goto LABEL_28;
    }
    *(_DWORD *)a8 = 197;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    int v17 = 886;
LABEL_20:
    *(_DWORD *)(a8 + 16) = v17;
    return;
  }
  uint64_t v40 = *(void *)(a1 + 2592);
  if (!v40)
  {
    *(_DWORD *)a8 = 3;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    int v17 = 905;
    goto LABEL_20;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v40 + 16))(v40))
  {
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    (*(void (**)(void, uint64_t, void *))(**(void **)(a1 + 2592) + 40))(*(void *)(a1 + 2592), a2, v61);
    if (*(_DWORD *)a8) {
      return;
    }
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2592) + 24))(*(void *)(a1 + 2592), a2) & 1) == 0)
  {
    *(_DWORD *)a8 = 16;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    int v17 = 900;
    goto LABEL_20;
  }
LABEL_28:
  HIBYTE(v68) = v50 == 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  *(void *)a8 = 0;
  sub_244D9CD94(v16, (uint64_t)&v62, (void *)a8);
  if (!*(_DWORD *)a8)
  {
    uint64_t v31 = (unsigned char *)(v16 + 104);
    if (v48)
    {
      if (v48 >= 0x20) {
        size_t v32 = 32;
      }
      else {
        size_t v32 = v48;
      }
      memcpy((void *)(v16 + 104), __src, v32);
      v31 += v32;
    }
    *uint64_t v31 = 0;
    char v33 = sub_244CC8484(0x11u, "FabricProvisioning");
    BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    if (v47)
    {
      if (v34)
      {
        int v35 = *(unsigned __int8 *)(v16 + 137);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v35;
        _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_DEFAULT, "Added new fabric at index: 0x%x", buf, 8u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x11u, 2);
      }
      char v36 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v37 = *(void *)(v16 + 16);
        uint64_t v38 = *(void *)v16;
        uint64_t v39 = HIDWORD(*(void *)v16);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = HIDWORD(v37);
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v37;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v60[0]) = v39;
        WORD2(v60[0]) = 1024;
        *(_DWORD *)((char *)v60 + 6) = v38;
        _os_log_impl(&dword_2446BD000, v36, OS_LOG_TYPE_DEFAULT, "Assigned compressed fabric ID: 0x%08X%08X, node ID: 0x%08X%08X", buf, 0x1Au);
      }
      if (!sub_244CC4E58(2u)) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v34)
      {
        int v41 = *(unsigned __int8 *)(v16 + 137);
        uint64_t v42 = *(void *)v16;
        uint64_t v43 = HIDWORD(*(void *)v16);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v43;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v60[0]) = v42;
        _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_DEFAULT, "Updated fabric at index: 0x%x, Node ID: 0x%08X%08X", buf, 0x14u);
      }
      if (!sub_244CC4E58(2u)) {
        goto LABEL_56;
      }
    }
    sub_244CC4DE0(0x11u, 2);
LABEL_56:
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    sub_244DAF4AC(a1 + 2624, v58, (uint64_t)&v51);
    if (v51)
    {
      long long v44 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v51;
        v60[0] = v52;
        long long v45 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v45;
        _os_log_impl(&dword_2446BD000, v44, OS_LOG_TYPE_ERROR, "Failed to update pending Last Known Good Time: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v51;
        v60[0] = v52;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0x11u, 1);
      }
    }
    if (v47) {
      ++*(unsigned char *)(a1 + 2642);
    }
    *(_DWORD *)a8 = 0;
    *(void *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    int v17 = 948;
    goto LABEL_20;
  }
}

void sub_244DA0608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Delete";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(void *)(a1 + 2584))
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v13 = 954;
LABEL_36:
    *(_DWORD *)(a3 + 16) = v13;
    goto LABEL_37;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v13 = 955;
    goto LABEL_36;
  }
  uint64_t v9 = *(void **)(a1 + 2608);
  if (v9)
  {
    do
    {
      int v10 = (void *)v9[1];
      (*(void (**)(void *, uint64_t, uint64_t))(*v9 + 16))(v9, a1, a2);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = sub_244D9EA0C(a1, a2);
  uint64_t v12 = v11;
  if (v11 == a1 + 2432)
  {
    sub_244DA0B38(a1);
    uint64_t v12 = sub_244D9EA0C(a1, a2);
    if (!v12) {
      goto LABEL_15;
    }
  }
  else if (!v11)
  {
    goto LABEL_15;
  }
  if (*(unsigned char *)(v12 + 137))
  {
    BOOL v14 = (unint64_t)(*(void *)v12 - 1) < 0xFFFFFFEFFFFFFFFFLL;
    goto LABEL_16;
  }
LABEL_15:
  BOOL v14 = 0;
LABEL_16:
  memset(buf, 0, sizeof(buf));
  sub_244D9D778(a1, a2, (uint64_t)buf);
  uint64_t v15 = *(void *)(a1 + 2592);
  if (!v15)
  {
    uint64_t v3 = 981;
    goto LABEL_20;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v15 + 72))(v28);
  if (*(_DWORD *)v28 == 113)
  {
    LODWORD(v3) = 989;
LABEL_20:
    uint64_t v27 = 0;
    uint64_t v26 = "src/credentials/FabricTable.cpp";
    goto LABEL_22;
  }
  uint64_t v27 = *(void *)v28;
  uint64_t v26 = v29;
  uint64_t v3 = v30;
LABEL_22:
  uint64_t v16 = *(void *)(a1 + 2600);
  int v17 = "src/credentials/FabricTable.cpp";
  if (!v16)
  {
    uint64_t v4 = 993;
    uint64_t v18 = 0;
    if (v14) {
      goto LABEL_27;
    }
    goto LABEL_35;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v16 + 72))(v28);
  uint64_t v18 = *(void *)v28;
  if (*(_DWORD *)v28 != 113)
  {
    int v17 = v29;
    uint64_t v4 = v30;
    if (v14) {
      goto LABEL_27;
    }
LABEL_35:
    *(_DWORD *)a3 = 216;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v13 = 1009;
    goto LABEL_36;
  }
  LODWORD(v4) = 1001;
  uint64_t v18 = 0;
  if (!v14) {
    goto LABEL_35;
  }
LABEL_27:
  uint64_t v25 = v18;
  sub_2446D80B8(v12);
  if (!*(unsigned char *)(a1 + 2640))
  {
    *(unsigned char *)(a1 + 2640) = 1;
    *(unsigned char *)(a1 + 2641) = a2;
  }
  sub_244DA0CE4(a1, v28);
  if (*(unsigned char *)(a1 + 2642))
  {
    --*(unsigned char *)(a1 + 2642);
    uint64_t v19 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v28 = 67109120;
      *(_DWORD *)&v28[4] = a2;
      _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_DEFAULT, "Fabric (0x%x) deleted.", v28, 8u);
    }
    if (sub_244CC4E58(2u))
    {
      uint64_t v20 = 2;
LABEL_44:
      sub_244CC4DE0(0x11u, v20);
    }
  }
  else
  {
    unint64_t v22 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_2446BD000, v22, OS_LOG_TYPE_ERROR, "Trying to delete a fabric, but the current fabric count is already 0", v28, 2u);
    }
    if (sub_244CC4E58(1u))
    {
      uint64_t v20 = 1;
      goto LABEL_44;
    }
  }
  uint64_t v23 = *(void **)(a1 + 2608);
  if (v23)
  {
    do
    {
      uint64_t v24 = (void *)v23[1];
      (*(void (**)(void *, uint64_t, uint64_t))(*v23 + 24))(v23, a1, a2);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = v27;
    *(void *)(a3 + 8) = v26;
    *(void *)(a3 + 16) = v3;
    if (!v27)
    {
      *(void *)a3 = v25;
      *(void *)(a3 + 8) = v17;
      *(void *)(a3 + 16) = v4;
      if (!v25)
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
        int v13 = 1058;
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  uint64_t v21 = sub_244D7DFA0();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Delete";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244DA0B38(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244D7DFA0();
  if (os_signpost_enabled(v2))
  {
    int v6 = 136315394;
    int v7 = "Fabric";
    __int16 v8 = 2080;
    uint64_t v9 = "RevertPendingFabricData";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v6, 0x16u);
  }
  sub_244DA2FE4(a1);
  uint64_t v3 = *(void *)(a1 + 2592);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2600);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
  }
  sub_244DAF778(a1 + 2624, &v6);
  *(_WORD *)(a1 + 2644) = 0;
  *(unsigned char *)(a1 + 2616) = 0;
  int v5 = sub_244D7DFA0();
  if (os_signpost_enabled(v5))
  {
    int v6 = 136315394;
    int v7 = "Fabric";
    __int16 v8 = 2080;
    uint64_t v9 = "RevertPendingFabricData";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t sub_244DA0CE4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v13);
  sub_244CB62E0((uint64_t)v13, (uint64_t)v18, 0x2CuLL);
  int v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = (uint64_t)sub_244CB7594(v13, 256, 21, &v12, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    if (*(unsigned char *)(a1 + 2640))
    {
      sub_2446F9190((unsigned char *)(a1 + 2640));
      sub_244CB68B8();
    }
    else
    {
      sub_244CB710C();
    }
    int v11 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    uint64_t result = (uint64_t)sub_244CB7594(v13, 1, 22, &v11, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      sub_2446D8144((void *)a1, (uint64_t)&v15);
      if ((void)v16 != *((void *)&v16 + 1))
      {
        if (v16 != __PAIR128__(16, 16)) {
          goto LABEL_15;
        }
        uint64_t v5 = v15;
LABEL_9:
        if (v5 != a1)
        {
LABEL_15:
          sub_2446D26A0((uint64_t *)&v15);
          sub_244CB68B8();
          unint64_t v10 = v16;
          uint64_t v5 = v15;
          while (1)
          {
            if (v10 < *((void *)&v16 + 1)) {
              *(void *)&long long v16 = ++v10;
            }
            if (v10 == *((void *)&v16 + 1)) {
              break;
            }
            if (*(unsigned char *)(v15 + 152 * v10 + 137)
              && (unint64_t)(*(void *)(v15 + 152 * v10) - 1) < 0xFFFFFFEFFFFFFFFFLL)
            {
              if (*((void *)&v16 + 1) == 16 && v10 == 16) {
                goto LABEL_9;
              }
              goto LABEL_15;
            }
          }
        }
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t result = sub_244CB7708((uint64_t)v13, v11, (uint64_t)a2);
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        uint64_t result = sub_244CB7708((uint64_t)v13, v12, (uint64_t)a2);
        if (!*(_DWORD *)a2)
        {
          unsigned __int16 v6 = v14;
          if (HIWORD(v14))
          {
            int v9 = 1348;
            int v8 = 25;
          }
          else
          {
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            uint64_t v7 = *(void *)(a1 + 2584);
            long long v15 = *(_OWORD *)"g/fidx";
            long long v16 = unk_244EC2DDC;
            char v17 = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, long long *, unsigned char *, void))(*(void *)v7 + 24))(v7, &v15, v18, v6);
            if (*(_DWORD *)a2) {
              return result;
            }
            int v8 = 0;
            int v9 = 1353;
          }
          *(_DWORD *)a2 = v8;
          a2[1] = "src/credentials/FabricTable.cpp";
          *((_DWORD *)a2 + 4) = v9;
        }
      }
    }
  }
  return result;
}

void sub_244DA0F60(void *a1)
{
  sub_244DA0B38((uint64_t)a1);
  sub_2446D8144(a1, (uint64_t)v7);
  if (v8 != v9)
  {
    BOOL v2 = v9 == 16 && v8 == 16;
    if (!v2 || v7[0] != (void)a1)
    {
LABEL_9:
      uint64_t v4 = sub_2446D26A0(v7);
      sub_244DA0608((uint64_t)a1, *(unsigned __int8 *)(v4 + 137), (uint64_t)v6);
      unint64_t v5 = v8;
      while (1)
      {
        if (v5 < v9) {
          uint64_t v8 = ++v5;
        }
        if (v5 == v9) {
          break;
        }
        if (*(unsigned char *)(v7[0] + 152 * v5 + 137)
          && (unint64_t)(*(void *)(v7[0] + 152 * v5) - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          if (v9 != 16 || v5 != 16 || (void *)v7[0] != a1) {
            goto LABEL_9;
          }
          return;
        }
      }
    }
  }
}

void sub_244DA1038(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!*a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v10 = 1075;
LABEL_32:
    *(_DWORD *)(a3 + 16) = v10;
    return;
  }
  if (!a2[2])
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    int v10 = 1076;
    goto LABEL_32;
  }
  *(void *)(a1 + 2584) = *a2;
  *(void *)(a1 + 2592) = a2[1];
  *(void *)(a1 + 2600) = a2[2];
  unint64_t v5 = sub_244CC8484(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_INFO, "Initializing FabricTable from persistent storage", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x11u, 3);
  }
  uint64_t v6 = 0;
  *(unsigned char *)(a1 + 2642) = 0;
  do
  {
    sub_2446D80B8(a1 + v6);
    v6 += 152;
  }
  while (v6 != 2432);
  *(_WORD *)(a1 + 2640) = 257;
  sub_244DAF008(a1 + 2624, *(void *)(a1 + 2584), (uint64_t)buf);
  unsigned __int16 v17 = 44;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v7 = *(void *)(a1 + 2584);
  *(_OWORD *)long long buf = *(_OWORD *)"g/fidx";
  long long v19 = unk_244EC2DDC;
  char v20 = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)v7 + 16))(&v15);
  if (v15 == 160) {
    goto LABEL_10;
  }
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v16;
  if (!*(_DWORD *)a3)
  {
    sub_244CB3988((uint64_t)buf);
    sub_244CB39B8((uint64_t)buf, (uint64_t)v21, v17);
    sub_244DA14B8((unsigned __int8 *)a1, (uint64_t)buf, (uint64_t)v22);
    long long v15 = *(_OWORD *)v22;
    uint64_t v16 = v23;
    if (*(_DWORD *)v22)
    {
      int v11 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)unint64_t v22 = v15;
        uint64_t v23 = v16;
        int v12 = sub_244CB7B34((const char **)v22, 1);
        *(_DWORD *)unint64_t v22 = 136315138;
        *(void *)&v22[4] = v12;
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Error loading fabric table: %s, we are in a bad state!", v22, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)unint64_t v22 = v15;
        uint64_t v23 = v16;
        sub_244CB7B34((const char **)v22, 1);
        sub_244CC4DE0(0x11u, 1);
      }
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
    if (!*(_DWORD *)a3)
    {
LABEL_10:
      *(_WORD *)unint64_t v22 = 0;
      sub_244DA1778(a1, v22, buf);
      long long v15 = *(_OWORD *)buf;
      uint64_t v16 = v19;
      if (*(_DWORD *)buf != 160)
      {
        if (*(_DWORD *)buf)
        {
          int v13 = sub_244CC8484(0x11u, "FabricProvisioning");
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)long long buf = v15;
            *(void *)&long long v19 = v16;
            unsigned int v14 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v14;
            _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Error loading Table commit marker: %s, hope for the best!", buf, 0xCu);
          }
          if (sub_244CC4E58(1u))
          {
            *(_OWORD *)long long buf = v15;
            *(void *)&long long v19 = v16;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0x11u, 1);
          }
        }
        else
        {
          uint64_t v8 = sub_244CC8484(0x11u, "FabricProvisioning");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v22[0];
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v22[1];
            _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Found a FabricTable aborted commit for index 0x%x (isAddition: %d), removing!", buf, 0xEu);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0x11u, 1);
          }
          uint64_t v9 = v22[0];
          *(unsigned char *)(a1 + 2617) = v22[0];
          sub_244DA0608(a1, v9, (uint64_t)buf);
        }
      }
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      int v10 = 1144;
      goto LABEL_32;
    }
  }
}

void sub_244DA14B8(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4(a2, 21, 256, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    int v13 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_244CB4C90(a2, &v13, a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CB54B4(a2, 0, (void *)a3);
      if (!*(_DWORD *)a3)
      {
        if (sub_244CB3B68(a2) == 20)
        {
          a1[2640] = 0;
        }
        else
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *((_WORD *)a1 + 1320) = 1;
          sub_244CB3E8C(a2, a1 + 2641, a3);
          if (*(_DWORD *)a3) {
            return;
          }
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CB55E4(a2, 22, 1, (void *)a3);
        if (!*(_DWORD *)a3)
        {
          int v12 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(void *)a3 = 0;
          sub_244CB4C90(a2, &v12, a3);
          if (!*(_DWORD *)a3)
          {
            while (1)
            {
              sub_244CB4E58(a2, &v9);
              long long v14 = v10;
              int v15 = v11;
              if (v9) {
                break;
              }
              unint64_t v6 = a1[2642];
              if (v6 >= 0x10)
              {
                *(_DWORD *)a3 = 11;
                *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
                int v7 = 1397;
                goto LABEL_22;
              }
              unsigned __int8 v8 = 0;
              *(void *)(a3 + 8) = 0;
              *(void *)(a3 + 16) = 0;
              *(void *)a3 = 0;
              sub_244CB3E8C(a2, &v8, a3);
              if (*(_DWORD *)a3) {
                return;
              }
              sub_244D9F4DC((uint64_t)a1, (uint64_t)&a1[152 * v6], v8, (uint64_t)&v9);
              long long v14 = v10;
              int v15 = v11;
              if (!v9) {
                ++a1[2642];
              }
            }
            if (v9 != 33)
            {
              *(_DWORD *)a3 = v9;
              *(_OWORD *)(a3 + 4) = v14;
              *(_DWORD *)(a3 + 20) = v15;
              return;
            }
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            sub_244CB4D00(a2, v12, a3);
            if (!*(_DWORD *)a3)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              *(void *)(a3 + 16) = 0;
              sub_244CB4D00(a2, v13, a3);
              if (!*(_DWORD *)a3)
              {
                *(void *)a3 = 0;
                *(void *)(a3 + 8) = 0;
                *(void *)(a3 + 16) = 0;
                sub_244CB4DC8(a2, a3);
                if (!*(_DWORD *)a3)
                {
                  sub_244DA1FB4(a1);
                  *(_DWORD *)a3 = 0;
                  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
                  int v7 = 1429;
LABEL_22:
                  *(_DWORD *)(a3 + 16) = v7;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_244DA1778(uint64_t a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned __int16 v7 = 36;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v5 = *(void *)(a1 + 2584);
  v8[0] = *(_OWORD *)"g/fs/c";
  v8[1] = unk_244EC2DFE;
  char v9 = 0;
  (*(void (**)(void *__return_ptr))(*(void *)v5 + 16))(a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CB3988((uint64_t)v8);
    sub_244CB39B8((uint64_t)v8, (uint64_t)v10, v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB55E4((uint64_t)v8, 21, 256, a3);
    if (!*(_DWORD *)a3)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90((uint64_t)v8, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4((uint64_t)v8, 0, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB3E8C((uint64_t)v8, a2, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB54B4((uint64_t)v8, 1, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB3C0C((uint64_t)v8, a2 + 1, (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *(_DWORD *)a3 = 0;
                a3[1] = "src/credentials/FabricTable.cpp";
                *((_DWORD *)a3 + 4) = 1497;
              }
            }
          }
        }
      }
    }
  }
}

void sub_244DA192C(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CC8484(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Forgetting fabric 0x%x", buf, 8u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x11u, 2);
  }
  uint64_t v5 = sub_244D9EA0C(a1, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_244DA0B38(a1);
    sub_2446D80B8(v6);
  }
}

void sub_244DA1A2C(uint64_t a1)
{
  if (*(void *)(a1 + 2584))
  {
    BOOL v2 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "Shutting down FabricTable", v6, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x11u, 2);
    }
    uint64_t v3 = *(void *)(a1 + 2608);
    if (v3)
    {
      do
      {
        uint64_t v4 = *(void *)(v3 + 8);
        *(void *)(v3 + 8) = 0;
        uint64_t v3 = v4;
      }
      while (v4);
    }
    sub_244DA0B38(a1);
    for (uint64_t i = 0; i != 2432; i += 152)
      sub_2446D80B8(a1 + i);
    *(void *)(a1 + 2584) = 0;
  }
}

uint64_t sub_244DA1B00(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 2617);
  *(unsigned char *)(a1 + 2617) = 0;
  return v1;
}

uint64_t sub_244DA1B10@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 2608);
    if (v3)
    {
      uint64_t v4 = *(void *)(result + 2608);
      while (v4 != a2)
      {
        uint64_t v4 = *(void *)(v4 + 8);
        if (!v4) {
          goto LABEL_6;
        }
      }
      int v5 = 0;
      int v6 = 1200;
    }
    else
    {
LABEL_6:
      int v5 = 0;
      *(void *)(a2 + 8) = v3;
      *(void *)(result + 2608) = a2;
      int v6 = 1205;
    }
  }
  else
  {
    int v6 = 1195;
    int v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244DA1B70(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 2608);
    if (v2 == a2)
    {
      *(void *)(result + 2608) = *(void *)(a2 + 8);
    }
    else
    {
      while (v2)
      {
        uint64_t v3 = v2;
        uint64_t v2 = *(void *)(v2 + 8);
        if (v2 == a2)
        {
          *(void *)(v3 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = 0;
          return result;
        }
      }
    }
  }
  return result;
}

double sub_244DA1BB0@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int *a3@<X8>)
{
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  while (1)
  {
    uint64_t v7 = a1 + v5;
    uint64_t v8 = *(unsigned __int8 *)(a1 + v5 + 137);
    if (*(unsigned char *)(a1 + v5 + 137))
    {
      if ((unint64_t)(*(void *)v7 - 1) <= 0xFFFFFFEFFFFFFFFELL) {
        break;
      }
    }
LABEL_11:
    v5 += 152;
    if (v5 == 2432)
    {
LABEL_24:
      sub_244DAF280(a1 + 2624, a2, v6, (uint64_t)buf);
      int v9 = *(_DWORD *)buf;
      long long v29 = v27;
      int v30 = v28;
LABEL_25:
      if (v9)
      {
LABEL_26:
        uint64_t v16 = sub_244CC8484(0x11u, "FabricProvisioning");
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = v9;
          long long v27 = v29;
          int v28 = v30;
          unsigned __int16 v17 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&long long v27 = v17;
          _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Failed to update Known Good Time: %s", buf, 0xCu);
        }
        if (sub_244CC4E58(1u))
        {
          *(_DWORD *)long long buf = v9;
          long long v27 = v29;
          int v28 = v30;
          sub_244CB7B34((const char **)buf, 1);
          sub_244CC4DE0(0x11u, 1);
        }
      }
      *a3 = v9;
      double result = *(double *)&v29;
      *(_OWORD *)(a3 + 1) = v29;
      a3[5] = v30;
      return result;
    }
  }
  uint64_t v24 = buf;
  uint64_t v25 = 400;
  sub_244D9E6A4(a1, v8, (uint64_t)&v24, (uint64_t)&v21);
  int v9 = v21;
  long long v29 = v22;
  int v30 = v23;
  if (v21) {
    goto LABEL_26;
  }
  sub_2446C1098(v19, (uint64_t)v24, v25);
  sub_244D9413C((uint64_t)v19, &v20, &v21);
  int v9 = v21;
  long long v29 = v22;
  int v30 = v23;
  if (v21) {
    goto LABEL_26;
  }
  if (v6 <= v20) {
    unsigned int v6 = v20;
  }
  uint64_t v24 = buf;
  uint64_t v25 = 400;
  sub_244D9ED74(a1, *(unsigned __int8 *)(v7 + 137), (uint64_t)&v24, (uint64_t)&v21);
  int v9 = v21;
  double result = *(double *)&v22;
  long long v29 = v22;
  int v30 = v23;
  if (v21)
  {
LABEL_9:
    int v11 = 8;
    goto LABEL_10;
  }
  uint64_t v12 = v25;
  if (!v25)
  {
LABEL_18:
    uint64_t v24 = buf;
    uint64_t v25 = 400;
    sub_244D9EF98(a1, *(unsigned __int8 *)(v7 + 137), (uint64_t)&v24, (uint64_t)&v21);
    int v9 = v21;
    double result = *(double *)&v22;
    long long v29 = v22;
    int v30 = v23;
    if (!v21)
    {
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      sub_2446C1098(&v21, (uint64_t)v24, v25);
      sub_244D9413C((uint64_t)&v21, v19, a3);
      int v13 = *a3;
      unsigned int v14 = v19[0];
      if (v6 > LODWORD(v19[0])) {
        unsigned int v14 = v6;
      }
      BOOL v15 = v13 == 0;
      int v11 = v13 != 0;
      if (v15) {
        unsigned int v6 = v14;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  sub_2446C1098(&v21, (uint64_t)v24, v12);
  sub_244D9413C((uint64_t)&v21, v19, a3);
  if (!*a3)
  {
    if (v6 <= LODWORD(v19[0])) {
      unsigned int v6 = v19[0];
    }
    goto LABEL_18;
  }
  int v11 = 1;
LABEL_10:
  switch(v11)
  {
    case 0:
    case 3:
      goto LABEL_11;
    case 2:
      goto LABEL_24;
    case 8:
      goto LABEL_25;
    default:
      return result;
  }
  return result;
}

unsigned __int8 *sub_244DA1F20(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 2640);
  int v3 = *sub_24479DC2C((unsigned char *)(a1 + 2640));
  if (v3 == 254) {
    unsigned __int8 v4 = 1;
  }
  else {
    unsigned __int8 v4 = v3 + 1;
  }
  while (1)
  {
    double result = sub_24479DC2C(v2);
    if (*result == v4)
    {
      *uint64_t v2 = 0;
      return result;
    }
    double result = (unsigned __int8 *)sub_244D9EA90(a1, v4);
    if (!result) {
      break;
    }
    if (v4 == 254) {
      unsigned __int8 v4 = 1;
    }
    else {
      ++v4;
    }
  }
  *(unsigned char *)(a1 + 2640) = 1;
  *(unsigned char *)(a1 + 2641) = v4;
  return result;
}

unsigned __int8 *sub_244DA1FB4(unsigned __int8 *result)
{
  if (!result[2640])
  {
    uint64_t v1 = (uint64_t)result;
    if (result[2642] <= 0xFDu)
    {
      *((_WORD *)result + 1320) = 257;
      double result = (unsigned __int8 *)sub_244D9EA90((uint64_t)result, 1);
      if (result)
      {
        return sub_244DA1F20(v1);
      }
    }
  }
  return result;
}

uint64_t sub_244DA2020(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2592);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 104);
    return v2();
  }
  else
  {
    unsigned __int8 v4 = sub_244CC4D84(0x260uLL);
    uint64_t v5 = v4;
    if (v4)
    {
      bzero(v4 + 2, 0x250uLL);
      *uint64_t v5 = &unk_26F954330;
      v5[1] = &unk_26F954540;
    }
    return (uint64_t)v5;
  }
}

void sub_244DA20DC(uint64_t a1, void (***a2)(void))
{
  uint64_t v3 = *(void *)(a1 + 2592);
  if (v3)
  {
    unsigned __int8 v4 = *(void (**)(void))(*(void *)v3 + 112);
    v4();
  }
  else if (a2)
  {
    (**a2)(a2);
    j__free(a2);
  }
}

void sub_244DA2190(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v6);
  sub_244CB62E0((uint64_t)v6, (uint64_t)v10, 0x24uLL);
  int v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB7594(v6, 256, 21, &v5, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB68B8();
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CB65C8();
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_244CB7708((uint64_t)v6, v5, (uint64_t)a2);
        if (!*(_DWORD *)a2)
        {
          if (v7 >= 0x10000)
          {
            *(_DWORD *)a2 = 25;
            a2[1] = "src/credentials/FabricTable.cpp";
            *((_DWORD *)a2 + 4) = 1467;
          }
          else
          {
            uint64_t v4 = *(void *)(a1 + 2584);
            v8[0] = *(_OWORD *)"g/fs/c";
            v8[1] = unk_244EC2DFE;
            char v9 = 0;
            (*(void (**)(uint64_t, _OWORD *, unsigned char *, void))(*(void *)v4 + 24))(v4, v8, v10, (unsigned __int16)v7);
          }
        }
      }
    }
  }
}

void *sub_244DA2318(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 2584);
  long long v4 = *(_OWORD *)"g/fs/c";
  long long v5 = unk_244EC2DFE;
  char v6 = 0;
  return (*(void *(**)(void *__return_ptr))(*(void *)v1 + 32))(v3);
}

uint64_t sub_244DA23A4(uint64_t a1, int a2)
{
  uint64_t result = sub_244D9EA90(a1, a2);
  if (result)
  {
    if (*(void *)(result + 144))
    {
      return 1;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 2592);
      if (result)
      {
        long long v4 = *(uint64_t (**)(void))(*(void *)result + 24);
        return v4();
      }
    }
  }
  return result;
}

void sub_244DA2424(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v12 = sub_244D9EA90(a1, a2);
  if (!v12)
  {
    *(_DWORD *)a6 = 16;
    *(void *)(a6 + 8) = "src/credentials/FabricTable.cpp";
    int v13 = 1526;
LABEL_10:
    *(_DWORD *)(a6 + 16) = v13;
    return;
  }
  if (!*(void *)(v12 + 144))
  {
    uint64_t v14 = *(void *)(a1 + 2592);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v14 + 96))(v14, a2, v15, a5);
      return;
    }
    *(_DWORD *)a6 = 16;
    *(void *)(a6 + 8) = "src/credentials/FabricTable.cpp";
    int v13 = 1538;
    goto LABEL_10;
  }

  sub_244D9E144(v12, a3, a4, a5, a6);
}

uint64_t sub_244DA2534(uint64_t a1, BOOL *a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 2644);
  if ((v2 & 0x10) != 0) {
    *a2 = (v2 & 0x20) != 0;
  }
  return (v2 >> 4) & 1;
}

uint64_t sub_244DA254C(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 2616)) {
    BOOL v2 = *(unsigned __int8 *)(a1 + 2616) == a2;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = v2;
  if (v2) {
    *(unsigned char *)(a1 + 2616) = a2;
  }
  return v3;
}

uint64_t sub_244DA256C(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 2644) & 8) != 0) {
    return *(unsigned __int8 *)(a1 + 2616);
  }
  else {
    return 0;
  }
}

unsigned __int8 *sub_244DA2584@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*((void *)result + 324))
  {
    int v8 = 1580;
LABEL_9:
    int v9 = 3;
LABEL_10:
    *(_DWORD *)a4 = v9;
    *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = v8;
    return result;
  }
  long long v5 = result;
  if (*((_WORD *)result + 1322))
  {
    int v8 = 1584;
    goto LABEL_9;
  }
  if (*(void *)(a3 + 8) < 0xFFuLL)
  {
    int v8 = 1585;
    int v9 = 25;
    goto LABEL_10;
  }
  uint64_t result = sub_244DA1FB4(result);
  if (*a2)
  {
    if ((*((_WORD *)v5 + 1322) & 2) != 0)
    {
      int v8 = 1593;
      goto LABEL_9;
    }
    uint64_t result = sub_24479DC2C(a2);
    __int16 v7 = *((_WORD *)v5 + 1322) | 0x20;
  }
  else
  {
    if (!v5[2640])
    {
      int v8 = 1608;
      int v9 = 11;
      goto LABEL_10;
    }
    uint64_t result = sub_24479DC2C(v5 + 2640);
    __int16 v7 = *((_WORD *)v5 + 1322) & 0xFFDF;
  }
  int v10 = *result;
  *((_WORD *)v5 + 1322) = v7;
  if ((v10 - 1) > 0xFDu)
  {
    int v8 = 1611;
    int v9 = 113;
    goto LABEL_10;
  }
  if (v5[2616] && v5[2616] != v10)
  {
    int v8 = 1612;
    goto LABEL_9;
  }
  v5[2616] = v10;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)v5 + 324) + 32))(*((void *)v5 + 324));
  if (!*(_DWORD *)a4)
  {
    int v9 = 0;
    *((_WORD *)v5 + 1322) |= 0x10u;
    int v8 = 1616;
    goto LABEL_10;
  }
  return result;
}

unsigned __int8 *sub_244DA26F4@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  if (!*((void *)result + 325))
  {
    int v4 = 1621;
    goto LABEL_5;
  }
  uint64_t v3 = result;
  if ((*((_WORD *)result + 1322) & 0xE) != 0)
  {
    int v4 = 1626;
LABEL_5:
    int v5 = 3;
LABEL_6:
    *(_DWORD *)a2 = v5;
    *(void *)(a2 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  uint64_t result = sub_244DA1FB4(result);
  if (!v3[2640])
  {
    int v4 = 1638;
    int v5 = 11;
    goto LABEL_6;
  }
  uint64_t result = sub_24479DC2C(v3 + 2640);
  int v6 = *result;
  if ((v6 - 1) > 0xFDu)
  {
    int v4 = 1641;
    int v5 = 113;
    goto LABEL_6;
  }
  if (v3[2616] && v3[2616] != v6)
  {
    int v4 = 1642;
    goto LABEL_5;
  }
  v3[2616] = v6;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)v3 + 325) + 40))(*((void *)v3 + 325));
  if (!*(_DWORD *)a2)
  {
    int v5 = 0;
    *((_WORD *)v3 + 1322) |= 3u;
    int v4 = 1647;
    goto LABEL_6;
  }
  return result;
}

void sub_244DA2814(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    __int16 v28 = 2080;
    long long v29 = "FindExistingFabricByNocChaining";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  uint64_t v26 = 0;
  *(void *)long long buf = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244D93CC0(a3, buf, &v26, a5);
  if (!*(_DWORD *)a5)
  {
    int v30 = &unk_26F954540;
    unsigned int v20 = buf;
    uint64_t v21 = 400;
    uint64_t v25 = &unk_244EC2D00;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_244D9E6A4((uint64_t)a1, a2, (uint64_t)&v20, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_2446C1098(v24, (uint64_t)v20, v21);
      sub_244D93C10((uint64_t)v24, &v25, a5);
      if (!*(_DWORD *)a5)
      {
        long long v31 = *v25;
        long long v12 = v25[2];
        long long v11 = v25[3];
        char v13 = *((unsigned char *)v25 + 64);
        long long v32 = v25[1];
        char v35 = v13;
        long long v34 = v11;
        long long v33 = v12;
        sub_2446D8144(a1, (uint64_t)&v20);
        if (v22 == v23) {
          goto LABEL_11;
        }
        if (v23 == 16 && v22 == 16)
        {
          uint64_t v14 = (uint64_t)v20;
LABEL_10:
          if ((void *)v14 == a1)
          {
LABEL_11:
            *a4 = 0;
            *(_DWORD *)a5 = 0;
            a5[1] = "src/credentials/FabricTable.cpp";
            int v15 = 1692;
LABEL_12:
            *((_DWORD *)a5 + 4) = v15;
            goto LABEL_13;
          }
        }
LABEL_16:
        uint64_t v17 = sub_2446D26A0((uint64_t *)&v20);
        if (*(void *)(v17 + 8) != v26)
        {
LABEL_19:
          unint64_t v19 = v22;
          uint64_t v14 = (uint64_t)v20;
          while (1)
          {
            if (v19 < v23) {
              uint64_t v22 = ++v19;
            }
            if (v19 == v23) {
              goto LABEL_11;
            }
            if (v20[152 * v19 + 137] && (unint64_t)(*(void *)&v20[152 * v19] - 1) < 0xFFFFFFEFFFFFFFFFLL)
            {
              if (v23 == 16 && v19 == 16) {
                goto LABEL_10;
              }
              goto LABEL_16;
            }
          }
        }
        uint64_t v18 = v17;
        *(void *)long long buf = &unk_26F954540;
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        sub_244D9F140((uint64_t)a1, *(unsigned __int8 *)(v17 + 137), (uint64_t)buf, (uint64_t)a5);
        if (!*(_DWORD *)a5)
        {
          if (sub_244B9221C((uint64_t)buf, (uint64_t)&v30))
          {
            *a4 = *(unsigned char *)(v18 + 137);
            *(_DWORD *)a5 = 0;
            a5[1] = "src/credentials/FabricTable.cpp";
            int v15 = 1685;
            goto LABEL_12;
          }
          goto LABEL_19;
        }
      }
    }
  }
LABEL_13:
  uint64_t v16 = sub_244D7DFA0();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    __int16 v28 = 2080;
    long long v29 = "FindExistingFabricByNocChaining";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244DA2B84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, unsigned char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v18 = sub_244D7DFA0();
  if (os_signpost_enabled(v18))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "AddNewPendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(void *)(a1 + 2600))
  {
    *(_DWORD *)a9 = 3;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v20 = 1700;
    goto LABEL_20;
  }
  if (!a8)
  {
    *(_DWORD *)a9 = 47;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v20 = 1701;
    goto LABEL_20;
  }
  __int16 v19 = *(_WORD *)(a1 + 2644);
  if ((v19 & 2) == 0)
  {
    *(_DWORD *)a9 = 3;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v20 = 1705;
LABEL_20:
    *(_DWORD *)(a9 + 16) = v20;
    goto LABEL_21;
  }
  if ((v19 & 4) != 0)
  {
    *(_DWORD *)a9 = 3;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v20 = 1707;
    goto LABEL_20;
  }
  sub_244DA1FB4((unsigned __int8 *)a1);
  if (!*(unsigned char *)(a1 + 2640))
  {
    *(_DWORD *)a9 = 11;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v20 = 1718;
    goto LABEL_20;
  }
  uint64_t v21 = *sub_24479DC2C((unsigned char *)(a1 + 2640));
  if ((v21 - 1) >= 0xFEu)
  {
    *(_DWORD *)a9 = 113;
    *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    int v20 = 1723;
    goto LABEL_20;
  }
  if (!a5)
  {
    uint64_t v23 = *(void *)(a1 + 2592);
    if (!v23)
    {
      *(_DWORD *)a9 = 16;
      *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      int v20 = 1729;
      goto LABEL_20;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, v21) & 1) == 0
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 2592) + 16))(*(void *)(a1 + 2592)) & 1) == 0)
    {
      *(_DWORD *)a9 = 16;
      *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      int v20 = 1733;
      goto LABEL_20;
    }
  }
  if ((*(_WORD *)(a1 + 2644) & 0x40) == 0)
  {
    buf[0] = 0;
    *(void *)(a9 + 8) = 0;
    *(void *)(a9 + 16) = 0;
    *(void *)a9 = 0;
    sub_244DA2814((void *)a1, v21, a2, buf, (void *)a9);
    if (*(_DWORD *)a9) {
      goto LABEL_21;
    }
    if (buf[0])
    {
      *(_DWORD *)a9 = 126;
      *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      int v20 = 1741;
      goto LABEL_20;
    }
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2600) + 48))(*(void *)(a1 + 2600), v21, a2, a3);
  if (!*(_DWORD *)a9)
  {
    if (*(unsigned char *)(a1 + 2616) && *(unsigned __int8 *)(a1 + 2616) != v21)
    {
      *(_DWORD *)a9 = 3;
      *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      int v20 = 1746;
      goto LABEL_20;
    }
    *(unsigned char *)(a1 + 2616) = v21;
    memset(buf, 0, sizeof(buf));
    sub_244D9FE10(a1, v21, 1, a5, a6, a4, a7, (uint64_t)buf);
    if (!*(_DWORD *)buf)
    {
      *(_WORD *)(a1 + 2644) |= 9u;
      *a8 = v21;
      sub_244D9FAD8(a1, v21, (uint64_t)v24);
      *(_DWORD *)a9 = 0;
      *(void *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      int v20 = 1764;
      goto LABEL_20;
    }
    sub_244DA2FE4(a1);
    *(_OWORD *)a9 = *(_OWORD *)buf;
    *(void *)(a9 + 16) = *(void *)&buf[16];
  }
LABEL_21:
  uint64_t v22 = sub_244D7DFA0();
  if (os_signpost_enabled(v22))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "AddNewPendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244DA2FE4(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  BOOL v2 = sub_244D7DFA0();
  if (os_signpost_enabled(v2))
  {
    *(_DWORD *)long long buf = 136315394;
    int v9 = "Fabric";
    __int16 v10 = 2080;
    long long v11 = "RevertPendingOpCertsExceptRoot";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_2446D80B8(a1 + 2432);
  if (*(_WORD *)(a1 + 2644))
  {
    uint64_t v3 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(unsigned __int8 *)(a1 + 2616);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v9) = v4;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Reverting pending fabric data for fabric 0x%x", buf, 8u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x11u, 1);
    }
  }
  uint64_t v5 = *(void *)(a1 + 2600);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
  }
  __int16 v6 = *(_WORD *)(a1 + 2644);
  if ((v6 & 8) != 0)
  {
    sub_244DA0608(buf, a1, *(unsigned __int8 *)(a1 + 2616));
    __int16 v6 = *(_WORD *)(a1 + 2644);
  }
  *(_WORD *)(a1 + 2644) = v6 & 0xFFF3;
  if ((v6 & 2) == 0) {
    *(unsigned char *)(a1 + 2616) = 0;
  }
  __int16 v7 = sub_244D7DFA0();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)long long buf = 136315394;
    int v9 = "Fabric";
    __int16 v10 = 2080;
    long long v11 = "RevertPendingOpCertsExceptRoot";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244DA3204(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, void *a8@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v16 = sub_244D7DFA0();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "UpdatePendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(void *)(a1 + 2600))
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1772;
    goto LABEL_26;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a8 = 47;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1773;
    goto LABEL_26;
  }
  if (!a5)
  {
    uint64_t v20 = *(void *)(a1 + 2592);
    if (!v20)
    {
      *(_DWORD *)a8 = 16;
      a8[1] = "src/credentials/FabricTable.cpp";
      int v19 = 1779;
      goto LABEL_26;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 24))(v20, a2) & 1) == 0
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 2592) + 16))(*(void *)(a1 + 2592)) & 1) == 0)
    {
      *(_DWORD *)a8 = 16;
      a8[1] = "src/credentials/FabricTable.cpp";
      int v19 = 1782;
      goto LABEL_26;
    }
  }
  __int16 v17 = *(_WORD *)(a1 + 2644);
  if ((v17 & 2) != 0)
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1786;
    goto LABEL_26;
  }
  if ((v17 & 8) != 0)
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1789;
    goto LABEL_26;
  }
  uint64_t v18 = sub_244D9EA90(a1, a2);
  if (!v18)
  {
    *(_DWORD *)a8 = 113;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1793;
    goto LABEL_26;
  }
  uint64_t v22 = v18;
  if ((v17 & 0x40) == 0)
  {
    buf[0] = 0;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    sub_244DA2814((void *)a1, a2, a3, buf, a8);
    if (*(_DWORD *)a8) {
      goto LABEL_27;
    }
    if (buf[0] != a2)
    {
      *(_DWORD *)a8 = 113;
      a8[1] = "src/credentials/FabricTable.cpp";
      int v19 = 1801;
      goto LABEL_26;
    }
  }
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2600) + 56))(*(void *)(a1 + 2600), a2, a3, a4);
  if (*(_DWORD *)a8) {
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 2616) && *(unsigned __int8 *)(a1 + 2616) != a2)
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1806;
LABEL_26:
    *((_DWORD *)a8 + 4) = v19;
    goto LABEL_27;
  }
  *(unsigned char *)(a1 + 2616) = a2;
  memset(buf, 0, sizeof(buf));
  sub_244D9FE10(a1, a2, 0, a5, a6, *(_WORD *)(v22 + 138), a7, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    *(_WORD *)(a1 + 2644) |= 5u;
    sub_244D9FAD8(a1, a2, (uint64_t)v23);
    *(_DWORD *)a8 = 0;
    a8[1] = "src/credentials/FabricTable.cpp";
    int v19 = 1825;
    goto LABEL_26;
  }
  sub_244DA2FE4(a1);
  *(_OWORD *)a8 = *(_OWORD *)buf;
  a8[2] = *(void *)&buf[16];
LABEL_27:
  uint64_t v21 = sub_244D7DFA0();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "Fabric";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "UpdatePendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void *sub_244DA3634@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (!result[323] || (uint64_t v3 = (uint64_t)result, !result[325]))
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a2 + 16) = 1830;
    return result;
  }
  int v4 = *((unsigned __int16 *)result + 1322);
  uint64_t v5 = *((unsigned __int8 *)result + 2616);
  BOOL v6 = (v4 & 1) != 0 && (v5 + 1) >= 2u;
  int v7 = !v6;
  int v8 = v7 ^ 1 | v4;
  if (v6 && (v4 & 0xC) != 0)
  {
    int v8 = 0;
    if ((v4 & 6) != 2 && (v4 & 8) != 0)
    {
      int v9 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = (v4 & 8) >> 3;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = (v4 & 4) >> 2;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v57) = (v4 & 2) >> 1;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Found inconsistent interlocks during commit %u/%u/%u!", buf, 0x14u);
      }
      int v8 = 1;
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0x11u, 1);
      }
    }
  }
  uint64_t v10 = sub_244D9EA0C(v3, v5);
  if ((~v4 & 5) == 0
    && (v8 & 1) == 0
    && (!*(unsigned char *)(v3 + 2569)
     || (unint64_t)(*(void *)(v3 + 2432) - 1) > 0xFFFFFFEFFFFFFFFELL
     || *(unsigned __int8 *)(v3 + 2569) != v5
     || !v10))
  {
    uint64_t v16 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Missing pending fabric on update during commit!", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      goto LABEL_110;
    }
    goto LABEL_111;
  }
  if (!(((~v4 & 9) != 0) | v8 & 1))
  {
    char v11 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v3 + 2600) + 32))(*(void *)(v3 + 2600), v5, 0);
    if ((*(_WORD *)(v3 + 2644) & 2) == 0 || (v11 & 1) == 0)
    {
      uint64_t v39 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v39, OS_LOG_TYPE_ERROR, "Missing trusted root for fabric add during commit!", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        goto LABEL_110;
      }
      goto LABEL_111;
    }
  }
  BOOL v13 = (v4 & 1) == 0 || (v4 & 0xC) == 0;
  if (((v13 | v8) & 1) == 0 && (sub_244DA23A4(v3, v5) & 1) == 0)
  {
    uint64_t v40 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v40, OS_LOG_TYPE_ERROR, "Could not find an operational key during commit!", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
LABEL_110:
    }
      sub_244CC4DE0(0x11u, 1);
LABEL_111:
    *(_OWORD *)a2 = xmmword_2651A94F0;
    *(void *)(a2 + 16) = 1889;
    if ((((v4 & 0xE) == 2) & v4) == 0) {
      goto LABEL_116;
    }
    goto LABEL_112;
  }
  BOOL v15 = (v4 & 1) == 0 || (v4 & 0xE) == 2;
  if ((v15 | v8))
  {
    *(_OWORD *)a2 = xmmword_2651A94F0;
    *(void *)(a2 + 16) = 1889;
    if ((((v4 & 0xE) == 2) & v4) == 0)
    {
      if ((v8 & 1) == 0)
      {
LABEL_121:
        *(_WORD *)(v3 + 2644) = 0;
        *(unsigned char *)(v3 + 2616) = 0;
        sub_2446D80B8(v3 + 2432);
        (*(void (**)(void))(**(void **)(v3 + 2600) + 80))(*(void *)(v3 + 2600));
        uint64_t result = *(void **)(v3 + 2592);
        if (result) {
          return (void *)(*(uint64_t (**)(void *))(*result + 80))(result);
        }
        return result;
      }
LABEL_116:
      long long v44 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v44, OS_LOG_TYPE_ERROR, "Failed to commit: internally inconsistent state!", buf, 2u);
      }
      int v42 = 1900;
      int v43 = 172;
      if (!sub_244CC4E58(1u)) {
        goto LABEL_120;
      }
      goto LABEL_119;
    }
LABEL_112:
    int v41 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v41, OS_LOG_TYPE_ERROR, "Failed to commit: tried to commit with only a new trusted root cert. No data committed.", buf, 2u);
    }
    int v42 = 1895;
    int v43 = 3;
    if (!sub_244CC4E58(1u)) {
      goto LABEL_120;
    }
LABEL_119:
    sub_244CC4DE0(0x11u, 1);
LABEL_120:
    *(_DWORD *)a2 = v43;
    *(void *)(a2 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a2 + 16) = v42;
    goto LABEL_121;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  buf[0] = v5;
  buf[1] = (v4 & 8) >> 3;
  sub_244DA2190(v3, (void *)a2);
  if (*(_DWORD *)a2)
  {
    __int16 v17 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Failed to store commit marker, may be inconsistent if reboot happens during fail-safe!", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0x11u, 1);
    }
  }
  *(_WORD *)(v3 + 2644) &= ~1u;
  if ((v4 & 4) != 0)
  {
    uint64_t v18 = sub_244D9EA0C(v3, v5);
    if (!v18 || v18 == v3 + 2432) {
      sub_244E291EC();
    }
    sub_244D9D154(v18, v3 + 2432);
  }
  uint64_t v19 = sub_244D9EA0C(v3, v5);
  if (!v19) {
    sub_244E2914C();
  }
  long long v54 = 0uLL;
  uint64_t v55 = 0;
  sub_244D9F394(v3, v19, &v54);
  if (v54)
  {
    uint64_t v20 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v54;
      *(void *)&long long v57 = v55;
      uint64_t v21 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_ERROR, "Failed to commit pending fabric metadata: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = v54;
      *(void *)&long long v57 = v55;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0x11u, 1);
    }
  }
  if (*(_DWORD *)a2) {
    uint64_t v22 = (long long *)a2;
  }
  else {
    uint64_t v22 = &v54;
  }
  long long v23 = *v22;
  *(void *)(a2 + 16) = *((void *)v22 + 2);
  *(_OWORD *)a2 = v23;
  long long v52 = xmmword_2651A9508;
  uint64_t v53 = 1963;
  uint64_t v24 = *(void *)(v3 + 2592);
  if (v24)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v24 + 24))(v24, v5))
    {
      if ((*(unsigned int (**)(void))(**(void **)(v3 + 2592) + 16))(*(void *)(v3 + 2592)))
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(v3 + 2592) + 48))(&v52);
        if (v52)
        {
          uint64_t v25 = sub_244CC8484(0x11u, "FabricProvisioning");
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)long long buf = v52;
            *(void *)&long long v57 = v53;
            uint64_t v26 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v26;
            _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_ERROR, "Failed to commit pending operational keypair %s", buf, 0xCu);
          }
          if (sub_244CC4E58(1u))
          {
            *(_OWORD *)long long buf = v52;
            *(void *)&long long v57 = v53;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0x11u, 1);
          }
          (*(void (**)(void))(**(void **)(v3 + 2592) + 80))(*(void *)(v3 + 2592));
        }
      }
    }
  }
  long long v27 = &v52;
  if (*(_DWORD *)a2) {
    long long v27 = (long long *)a2;
  }
  long long v28 = *v27;
  *(void *)(a2 + 16) = *((void *)v27 + 2);
  *(_OWORD *)a2 = v28;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(v3 + 2600) + 64))(&v50);
  if (v50)
  {
    long long v29 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v50;
      *(void *)&long long v57 = v51;
      int v30 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_ERROR, "Failed to commit pending operational certificates %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = v50;
      *(void *)&long long v57 = v51;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0x11u, 1);
    }
    (*(void (**)(void))(**(void **)(v3 + 2600) + 80))(*(void *)(v3 + 2600));
  }
  if (*(_DWORD *)a2) {
    long long v31 = (long long *)a2;
  }
  else {
    long long v31 = &v50;
  }
  long long v32 = *v31;
  *(void *)(a2 + 16) = *((void *)v31 + 2);
  *(_OWORD *)a2 = v32;
  long long v48 = 0uLL;
  uint64_t v49 = 0;
  sub_244DAF5EC(v3 + 2624, &v48);
  if (v48)
  {
    long long v33 = sub_244CC8484(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v48;
      *(void *)&long long v57 = v49;
      long long v34 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_ERROR, "Failed to commit Last Known Good Time: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = v48;
      *(void *)&long long v57 = v49;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0x11u, 1);
    }
  }
  long long v46 = xmmword_2651A9520;
  uint64_t v47 = 2016;
  if ((*(unsigned char *)(v3 + 2644) & 8) != 0)
  {
    sub_244DA1F20(v3);
    sub_244DA0CE4(v3, &v46);
    if (v46)
    {
      char v35 = sub_244CC8484(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v46;
        *(void *)&long long v57 = v47;
        uint64_t v36 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v36;
        _os_log_impl(&dword_2446BD000, v35, OS_LOG_TYPE_ERROR, "Failed to commit pending fabric indices: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v46;
        *(void *)&long long v57 = v47;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0x11u, 1);
      }
    }
  }
  uint64_t v37 = &v46;
  if (*(_DWORD *)a2) {
    uint64_t v37 = (long long *)a2;
  }
  long long v38 = *v37;
  *(void *)(a2 + 16) = *((void *)v37 + 2);
  *(_OWORD *)a2 = v38;
  *(_WORD *)(v3 + 2644) = 0;
  *(unsigned char *)(v3 + 2616) = 0;
  sub_2446D80B8(v3 + 2432);
  if (*(_DWORD *)a2)
  {
    sub_244DA0608(v3, v5, (uint64_t)buf);
    sub_244DA0B38(v3);
  }
  else
  {
    sub_244D9FC74(v3, v5, (uint64_t)buf);
  }
  uint64_t v45 = *(void *)(v3 + 2584);
  *(_OWORD *)long long buf = *(_OWORD *)"g/fs/c";
  long long v57 = unk_244EC2DFE;
  char v58 = 0;
  return (*(void *(**)(long long *__return_ptr))(*(void *)v45 + 32))(&v54);
}

void sub_244DA42B0(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (!*(void *)(a1 + 2584))
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/credentials/FabricTable.cpp";
    int v11 = 2110;
    goto LABEL_17;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a4 = 113;
    a4[1] = "src/credentials/FabricTable.cpp";
    int v11 = 2111;
    goto LABEL_17;
  }
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= 0x21)
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/credentials/FabricTable.cpp";
    int v11 = 2113;
    goto LABEL_17;
  }
  uint64_t v8 = sub_244D9EA0C(a1, a2);
  if (!v8 || (uint64_t v9 = v8, !*(unsigned char *)(v8 + 137)) || (unint64_t)(*(void *)v8 - 1) >= 0xFFFFFFEFFFFFFFFFLL)
  {
    *(_DWORD *)a4 = 113;
    a4[1] = "src/credentials/FabricTable.cpp";
    int v11 = 2117;
    goto LABEL_17;
  }
  *a4 = 0;
  a4[1] = 0;
  uint64_t v10 = (unsigned char *)(v8 + 104);
  a4[2] = 0;
  if (v6)
  {
    memcpy((void *)(v8 + 104), *(const void **)a3, v6);
    v10 += v6;
  }
  *uint64_t v10 = 0;
  if ((*(_WORD *)(a1 + 2644) & 0xC) != 0
    || v9 == a1 + 2432
    || (*a4 = 0, a4[1] = 0, a4[2] = 0, sub_244D9F394(a1, v9, a4), !*(_DWORD *)a4))
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/credentials/FabricTable.cpp";
    int v11 = 2128;
LABEL_17:
    *((_DWORD *)a4 + 4) = v11;
  }
}

uint64_t sub_244DA441C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244D9EA90(a1, a2);
  if (result)
  {
    uint64_t result = sub_244B87CFC(result);
    int v7 = 0;
    *a3 = result;
    a3[1] = v8;
    int v9 = 2137;
  }
  else
  {
    int v9 = 2134;
    int v7 = 113;
  }
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

unsigned __int8 *sub_244DA4478@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_244DA1FB4(a1);
  if (a1[2640])
  {
    uint64_t result = sub_24479DC2C(a1 + 2640);
    int v7 = *result;
    if ((v7 - 1) > 0xFD)
    {
      int v9 = 2149;
      int v8 = 113;
    }
    else
    {
      int v8 = 0;
      *a2 = v7;
      int v9 = 2152;
    }
  }
  else
  {
    int v9 = 2145;
    int v8 = 11;
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_244DA4504@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_WORD *)(result + 2644))
  {
    int v6 = 2157;
    int v7 = 3;
  }
  else if ((a2 - 1) > 0xFDu)
  {
    int v6 = 2158;
    int v7 = 113;
  }
  else
  {
    uint64_t v5 = result;
    uint64_t result = sub_244D9EA90(result, a2);
    if (result)
    {
      int v6 = 2161;
      int v7 = 126;
    }
    else
    {
      int v7 = 0;
      *(unsigned char *)(v5 + 2640) = 1;
      *(unsigned char *)(v5 + 2641) = a2;
      int v6 = 2164;
    }
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244DA45A4@<X0>(uint64_t result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if ((a2 - 1) > 0xFDu)
  {
    int v7 = 2169;
LABEL_8:
    int v6 = 113;
    goto LABEL_9;
  }
  uint64_t result = sub_244D9EA0C(result, a2);
  if (!result || !*(unsigned char *)(result + 137) || (unint64_t)(*(void *)result - 1) > 0xFFFFFFEFFFFFFFFELL)
  {
    int v7 = 2173;
    goto LABEL_8;
  }
  int v6 = 0;
  *(unsigned char *)(result + 141) = a3 == 0;
  int v7 = 2177;
LABEL_9:
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

uint64_t sub_244DA463C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *(_DWORD *)(a2 + 352);
  if (v3 > *(_DWORD *)(result + 8)) {
    *(_DWORD *)(result + 8) = v3;
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 771;
  return result;
}

uint64_t sub_244DA466C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_244D9200C((uint64_t)v13);
  sub_244D94660((uint64_t)v13);
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v10);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  sub_244CEBC20((uint64_t)a2, 128, 0, (uint64_t)&v10);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  sub_244CEB1B0(a2, 2uLL, (uint64_t)&v10);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  sub_244CEBC2C(&v10, a2);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CEB1B0(a2, 1uLL, a3);
  if (*(_DWORD *)a3) {
    return nullsub_13(v13, v6);
  }
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v10);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  sub_244CE9F1C(a2, 513, (uint64_t)&v10);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  sub_244CEBC2C(&v10, a2);
  int v7 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_5;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244D92898((uint64_t)v13, a2, a3);
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244DA49CC(1, 0, a2, a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244D92898((uint64_t)v13, a2, a3);
      if (!*(_DWORD *)a3)
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244DA4B2C(a1, a2, a3);
        if (!*(_DWORD *)a3)
        {
          sub_244CEBC20((uint64_t)a2, 128, 3u, (uint64_t)&v10);
          int v7 = v10;
          long long v14 = v11;
          int v15 = v12;
          if (!v10)
          {
            sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v10);
            int v7 = v10;
            long long v14 = v11;
            int v15 = v12;
            if (!v10)
            {
              sub_244DA4CBC(1, a2, (uint64_t)&v10);
              sub_244DA4E68(1u, a2, (uint64_t)&v10);
              int v9 = 100730370;
              sub_244DA4FBC((unsigned __int16 *)&v9, 2, a2, (uint64_t)&v10);
              sub_244CEBC2C(&v10, a2);
              int v7 = v10;
              long long v14 = v11;
              int v15 = v12;
              if (!v10)
              {
                sub_244CEBC2C(&v10, a2);
                int v7 = v10;
                long long v14 = v11;
                int v15 = v12;
                if (!v10)
                {
                  sub_244CEBC2C(&v10, a2);
                  int v7 = v10;
                  long long v14 = v11;
                  int v15 = v12;
                }
              }
            }
          }
LABEL_5:
          *(_DWORD *)a3 = v7;
          *(_OWORD *)(a3 + 4) = v14;
          *(_DWORD *)(a3 + 20) = v15;
        }
      }
    }
  }
  return nullsub_13(v13, v6);
}

uint64_t sub_244DA49CC@<X0>(BOOL a1@<X0>, BOOL a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)&v10);
  int v9 = v10;
  long long v14 = v11;
  int v15 = v12;
  if (v10) {
    goto LABEL_2;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_244D93174(a1, (uint64_t)v13, a4);
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t)sub_244CEBA3C(a3, v13, &v10);
    int v9 = v10;
    long long v14 = v11;
    int v15 = v12;
    if (!v10)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t result = sub_244D93174(a2, (uint64_t)v13, a4);
      if (*(_DWORD *)a4) {
        return result;
      }
      uint64_t result = (uint64_t)sub_244CEBA3C(a3, v13, &v10);
      int v9 = v10;
      long long v14 = v11;
      int v15 = v12;
      if (!v10)
      {
        uint64_t result = (uint64_t)sub_244CEBC2C(&v10, a3);
        int v9 = v10;
        long long v14 = v11;
        int v15 = v12;
      }
    }
LABEL_2:
    *(_DWORD *)a4 = v9;
    *(_OWORD *)(a4 + 4) = v14;
    *(_DWORD *)(a4 + 20) = v15;
  }
  return result;
}

void *sub_244DA4B2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_6;
  }
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_6;
  }
  uint64_t result = sub_244CE9F1C(a2, 257, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_6;
  }
  uint64_t result = sub_244CE9F1C(a2, 1025, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_6;
  }
  uint64_t result = sub_244CEBC2C(&v8, a2);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_6;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = sub_244CEB850(a2, 0, (const void *)(a1 + 8), 0x41u, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = sub_244CEBC2C(&v8, a2);
    int v7 = v8;
    long long v11 = v9;
    int v12 = v10;
LABEL_6:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v11;
    *(_DWORD *)(a3 + 20) = v12;
  }
  return result;
}

double sub_244DA4CBC@<D0>(int a1@<W0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9538;
  *(void *)(a3 + 16) = 177;
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CE9F1C(a2, 1281, (uint64_t)&v7);
    double result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = v8;
    if (!*(_DWORD *)a3)
    {
      sub_244CEB320(a2, 1, &v7);
      double result = *(double *)&v7;
      *(_OWORD *)a3 = v7;
      *(void *)(a3 + 16) = v8;
      if (!*(_DWORD *)a3)
      {
        sub_244CEBD90(a2, 0, 4u, 0, &v7);
        double result = *(double *)&v7;
        *(_OWORD *)a3 = v7;
        *(void *)(a3 + 16) = v8;
        if (!*(_DWORD *)a3)
        {
          sub_244CEBC20((uint64_t)a2, 0, 0x10u, (uint64_t)&v7);
          double result = *(double *)&v7;
          *(_OWORD *)a3 = v7;
          *(void *)(a3 + 16) = v8;
          if (!*(_DWORD *)a3)
          {
            if (a1
              || (sub_244CEB320(a2, 1, &v7),
                  double result = *(double *)&v7,
                  *(_OWORD *)a3 = v7,
                  *(void *)(a3 + 16) = v8,
                  !*(_DWORD *)a3))
            {
              sub_244CEBC2C(&v7, a2);
              double result = *(double *)&v7;
              *(_OWORD *)a3 = v7;
              *(void *)(a3 + 16) = v8;
              if (!*(_DWORD *)a3)
              {
                sub_244CEBC2C(&v7, a2);
                double result = *(double *)&v7;
                *(_OWORD *)a3 = v7;
                *(void *)(a3 + 16) = v8;
                if (!*(_DWORD *)a3)
                {
                  sub_244CEBC2C(&v7, a2);
                  double result = *(double *)&v7;
                  *(_OWORD *)a3 = v7;
                  *(void *)(a3 + 16) = v8;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_244DA4E68@<D0>(unsigned __int16 a1@<W0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9550;
  *(void *)(a3 + 16) = 156;
  sub_244CEBC20((uint64_t)a2, 0, 0x10u, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CE9F1C(a2, 1282, (uint64_t)&v7);
    double result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = v8;
    if (!*(_DWORD *)a3)
    {
      sub_244CEB320(a2, 1, &v7);
      double result = *(double *)&v7;
      *(_OWORD *)a3 = v7;
      *(void *)(a3 + 16) = v8;
      if (!*(_DWORD *)a3)
      {
        sub_244CEBD90(a2, 0, 4u, 0, &v7);
        double result = *(double *)&v7;
        *(_OWORD *)a3 = v7;
        *(void *)(a3 + 16) = v8;
        if (!*(_DWORD *)a3)
        {
          sub_244CEB67C(a2, a1, (uint64_t)&v7);
          double result = *(double *)&v7;
          *(_OWORD *)a3 = v7;
          *(void *)(a3 + 16) = v8;
          if (!*(_DWORD *)a3)
          {
            sub_244CEBC2C(&v7, a2);
            double result = *(double *)&v7;
            *(_OWORD *)a3 = v7;
            *(void *)(a3 + 16) = v8;
            if (!*(_DWORD *)a3)
            {
              sub_244CEBC2C(&v7, a2);
              double result = *(double *)&v7;
              *(_OWORD *)a3 = v7;
              *(void *)(a3 + 16) = v8;
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_244DA4FBC@<D0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_2651A9568;
  *(void *)(a4 + 16) = 128;
  sub_244CEBC20((uint64_t)a3, 0, 0x10u, a4);
  if (!*(_DWORD *)a4)
  {
    sub_244CE9F1C(a3, 1283, (uint64_t)&v10);
    double result = *(double *)&v10;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v11;
    if (!*(_DWORD *)a4)
    {
      sub_244CEB320(a3, 1, &v10);
      double result = *(double *)&v10;
      *(_OWORD *)a4 = v10;
      *(void *)(a4 + 16) = v11;
      if (!*(_DWORD *)a4)
      {
        sub_244CEBD90(a3, 0, 4u, 0, &v10);
        double result = *(double *)&v10;
        *(_OWORD *)a4 = v10;
        *(void *)(a4 + 16) = v11;
        if (!*(_DWORD *)a4)
        {
          sub_244CEBC20((uint64_t)a3, 0, 0x10u, (uint64_t)&v10);
          double result = *(double *)&v10;
          *(_OWORD *)a4 = v10;
          *(void *)(a4 + 16) = v11;
          if (!*(_DWORD *)a4)
          {
            if (a2)
            {
              uint64_t v9 = 2 * a2;
              while (1)
              {
                sub_244CE9F1C(a3, *a1, (uint64_t)&v10);
                double result = *(double *)&v10;
                *(_OWORD *)a4 = v10;
                *(void *)(a4 + 16) = v11;
                if (*(_DWORD *)a4) {
                  break;
                }
                ++a1;
                v9 -= 2;
                if (!v9) {
                  goto LABEL_10;
                }
              }
            }
            else
            {
LABEL_10:
              sub_244CEBC2C(&v10, a3);
              double result = *(double *)&v10;
              *(_OWORD *)a4 = v10;
              *(void *)(a4 + 16) = v11;
              if (!*(_DWORD *)a4)
              {
                sub_244CEBC2C(&v10, a3);
                double result = *(double *)&v10;
                *(_OWORD *)a4 = v10;
                *(void *)(a4 + 16) = v11;
                if (!*(_DWORD *)a4)
                {
                  sub_244CEBC2C(&v10, a3);
                  double result = *(double *)&v10;
                  *(_OWORD *)a4 = v10;
                  *(void *)(a4 + 16) = v11;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_244DA5178(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  sub_244CEB170((uint64_t)v19, *a4, a4[1]);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
  sub_244DA5430(a1, a2, v10, (unsigned __int8 *)v19, a5);
  if (!*(_DWORD *)a5)
  {
    uint64_t v21 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = sub_244CEB194(v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a3 + 24))(a3, v11, v12, v20);
    if (!*(_DWORD *)a5)
    {
      sub_244CEB170((uint64_t)v19, *a4, a4[1]);
      sub_244CEBC20((uint64_t)v19, 0, 0x10u, (uint64_t)&v16);
      int v13 = v16;
      long long v22 = v17;
      int v23 = v18;
      if (!v16)
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
        sub_244DA5430(a1, a2, v14, (unsigned __int8 *)v19, a5);
        if (*(_DWORD *)a5) {
          goto LABEL_6;
        }
        sub_244CEBC20((uint64_t)v19, 0, 0x10u, (uint64_t)&v16);
        int v13 = v16;
        long long v22 = v17;
        int v23 = v18;
        if (!v16)
        {
          sub_244CE9F1C(v19, 513, (uint64_t)&v16);
          int v13 = v16;
          long long v22 = v17;
          int v23 = v18;
          if (!v16)
          {
            sub_244CEBC2C(&v16, v19);
            int v13 = v16;
            long long v22 = v17;
            int v23 = v18;
            if (!v16)
            {
              *(void *)a5 = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 16) = 0;
              sub_244DA5758((uint64_t)v20, v19, a5);
              if (*(_DWORD *)a5) {
                goto LABEL_6;
              }
              sub_244CEBC2C(&v16, v19);
              int v13 = v16;
              long long v22 = v17;
              int v23 = v18;
              if (!v16)
              {
                unint64_t v15 = sub_244CEB194(v19);
                sub_2446C1548((uint64_t)a4, v15);
                int v13 = 0;
              }
            }
          }
        }
      }
      *(_DWORD *)a5 = v13;
      *(_OWORD *)(a5 + 4) = v22;
      *(_DWORD *)(a5 + 20) = v23;
    }
LABEL_6:
    sub_244CED784(v20, 64);
  }
}

double sub_244DA5430@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if ((*(void *)a1 & 0x8000000000000000) != 0)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/GenerateChipX509Cert.cpp";
    int v15 = 319;
    goto LABEL_14;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  if (v7) {
    BOOL v8 = v7 >= *(_DWORD *)(a1 + 8);
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/GenerateChipX509Cert.cpp";
    int v15 = 321;
LABEL_14:
    *(_DWORD *)(a5 + 16) = v15;
    return result;
  }
  unsigned __int8 v19 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  sub_244D91C04(a1 + 16, &v19, a5);
  if (*(_DWORD *)a5) {
    return result;
  }
  int v13 = v19;
  sub_244CEBC20((uint64_t)a4, 0, 0x10u, (uint64_t)&v16);
  int v14 = v16;
  long long v20 = v17;
  int v21 = v18;
  if (v16) {
    goto LABEL_12;
  }
  sub_244CEBC20((uint64_t)a4, 128, 0, (uint64_t)&v16);
  int v14 = v16;
  long long v20 = v17;
  int v21 = v18;
  if (v16) {
    goto LABEL_12;
  }
  sub_244CEB1B0(a4, 2uLL, (uint64_t)&v16);
  int v14 = v16;
  long long v20 = v17;
  int v21 = v18;
  if (v16 || (sub_244CEBC2C(&v16, a4), v14 = v16, v20 = v17, int v21 = v18, v16))
  {
LABEL_12:
    *(_DWORD *)a5 = v14;
    double result = *(double *)&v20;
    *(_OWORD *)(a5 + 4) = v20;
    *(_DWORD *)(a5 + 20) = v21;
    return result;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_244CEB1B0(a4, *(void *)a1, a5);
  if (!*(_DWORD *)a5)
  {
    sub_244CEBC20((uint64_t)a4, 0, 0x10u, (uint64_t)&v16);
    int v14 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_12;
    }
    sub_244CE9F1C(a4, 513, (uint64_t)&v16);
    int v14 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_12;
    }
    sub_244CEBC2C(&v16, a4);
    int v14 = v16;
    long long v20 = v17;
    int v21 = v18;
    if (v16) {
      goto LABEL_12;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    sub_244D92898(a1 + 176, a4, a5);
    if (!*(_DWORD *)a5)
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      sub_244DA49CC(*(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), a4, a5);
      if (!*(_DWORD *)a5)
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        sub_244D92898(a1 + 16, a4, a5);
        if (!*(_DWORD *)a5)
        {
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          sub_244DA4B2C(a2, a4, a5);
          if (!*(_DWORD *)a5)
          {
            *(void *)a5 = 0;
            *(void *)(a5 + 8) = 0;
            *(void *)(a5 + 16) = 0;
            *(void *)&double result = sub_244DA5B40((v13 - 1) < 2, a2, a3, (unsigned char *)(a1 + 336), a4, a5).n128_u64[0];
            if (!*(_DWORD *)a5)
            {
              sub_244CEBC2C(&v16, a4);
              int v14 = v16;
              long long v20 = v17;
              int v21 = v18;
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_244DA5758@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  double result = sub_244CEBD90(a2, 0, 3u, 1, v8);
  int v7 = *(_DWORD *)v8;
  long long v10 = *(_OWORD *)&v8[4];
  int v11 = v9;
  if (*(_DWORD *)v8) {
    goto LABEL_2;
  }
  sub_244DA6164(v8, a1);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double result = sub_244D935A8(*(uint64_t *)v8, a2, a3);
  if (!*(_DWORD *)a3)
  {
    double result = sub_244CEBC2C(v8, a2);
    int v7 = *(_DWORD *)v8;
    long long v10 = *(_OWORD *)&v8[4];
    int v11 = v9;
LABEL_2:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v10;
    *(_DWORD *)(a3 + 20) = v11;
  }
  return result;
}

void sub_244DA5854(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  char v11 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v8 = a1 + 16;
  sub_244D91C04(a1 + 16, &v11, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (v11 == 1)
    {
      if (sub_244D91EAC(v8, a1 + 176))
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
        sub_244DA5178(a1, v9, a2, a3, (uint64_t)a4);
        return;
      }
      *(_DWORD *)a4 = 47;
      a4[1] = "src/credentials/GenerateChipX509Cert.cpp";
      int v10 = 460;
    }
    else
    {
      *(_DWORD *)a4 = 47;
      a4[1] = "src/credentials/GenerateChipX509Cert.cpp";
      int v10 = 459;
    }
    *((_DWORD *)a4 + 4) = v10;
  }
}

void sub_244DA5954(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  char v11 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244D91C04(a1 + 16, &v11, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    if (v11 == 2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_244D91C04(a1 + 176, &v11, (uint64_t)a5);
      if (*(_DWORD *)a5) {
        return;
      }
      if (v11 == 1)
      {
        sub_244DA5178(a1, a2, a3, a4, (uint64_t)a5);
        return;
      }
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      int v10 = 474;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      int v10 = 471;
    }
    *((_DWORD *)a5 + 4) = v10;
  }
}

void sub_244DA5A48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  unsigned __int8 v11 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244D91C04(a1 + 16, &v11, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    if (v11 == 3)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_244D91C04(a1 + 176, &v11, (uint64_t)a5);
      if (*(_DWORD *)a5) {
        return;
      }
      if (v11 - 1 < 2)
      {
        sub_244DA5178(a1, a2, a3, a4, (uint64_t)a5);
        return;
      }
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      int v10 = 489;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      int v10 = 486;
    }
    *((_DWORD *)a5 + 4) = v10;
  }
}

__n128 sub_244DA5B40@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  sub_244CEBC20((uint64_t)a5, 128, 3u, (uint64_t)&v30);
  int v12 = v30;
  __n128 v28 = v31;
  int v29 = v32;
  if (v30) {
    goto LABEL_3;
  }
  sub_244CEBC20((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
  int v12 = v30;
  __n128 v28 = v31;
  int v29 = v32;
  if (v30) {
    goto LABEL_3;
  }
  if (a1)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_244DA4CBC(0, a5, a6);
    if (*(_DWORD *)a6) {
      return result;
    }
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_244DA4E68(0x60u, a5, a6);
  }
  else
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_244DA4CBC(1, a5, a6);
    if (*(_DWORD *)a6) {
      return result;
    }
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_244DA4E68(1u, a5, a6);
    if (*(_DWORD *)a6) {
      return result;
    }
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    int v30 = 100730370;
    result.n128_f64[0] = sub_244DA4FBC((unsigned __int16 *)&v30, 2, a5, a6);
  }
  if (!*(_DWORD *)a6)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    sub_244CEBC20((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
    int v15 = v30;
    __n128 v33 = v31;
    int v34 = v32;
    if (v30) {
      goto LABEL_16;
    }
    sub_244CE9F1C(a5, 1284, (uint64_t)&v30);
    int v15 = v30;
    __n128 v33 = v31;
    int v34 = v32;
    if (v30) {
      goto LABEL_16;
    }
    sub_244CEBD90(a5, 0, 4u, 0, &v30);
    int v15 = v30;
    __n128 v33 = v31;
    int v34 = v32;
    if (v30) {
      goto LABEL_16;
    }
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    sub_244CEC3B0((char *)(a2 + 8), 0x41uLL, &v30, a6);
    if (!*(_DWORD *)a6)
    {
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      sub_244CEB554(a5, &v30, 0x14u, (void *)a6);
      if (!*(_DWORD *)a6)
      {
        sub_244CEBC2C(&v30, a5);
        int v15 = v30;
        __n128 v33 = v31;
        int v34 = v32;
        if (v30)
        {
LABEL_16:
          *(_DWORD *)a6 = v15;
          result.n128_u64[0] = v33.n128_u64[0];
          *(__n128 *)(a6 + 4) = v33;
          int v14 = v34;
          goto LABEL_4;
        }
        sub_244CEBC2C(&v30, a5);
        int v16 = v30;
        int v17 = v32;
        int v34 = v32;
        __n128 result = v31;
        __n128 v33 = v31;
        *(_DWORD *)a6 = v30;
        *(__n128 *)(a6 + 4) = result;
        *(_DWORD *)(a6 + 20) = v17;
        if (!v16)
        {
          int v18 = (__n128 *)(a6 + 4);
          *(void *)a6 = 0;
          *(void *)(a6 + 8) = 0;
          *(void *)(a6 + 16) = 0;
          sub_244CEBC20((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
          int v19 = v30;
          __n128 v33 = v31;
          int v34 = v32;
          if (v30) {
            goto LABEL_25;
          }
          sub_244CE9F1C(a5, 1285, (uint64_t)&v30);
          int v19 = v30;
          __n128 v33 = v31;
          int v34 = v32;
          if (v30) {
            goto LABEL_25;
          }
          sub_244CEBD90(a5, 0, 4u, 0, &v30);
          int v19 = v30;
          __n128 v33 = v31;
          int v34 = v32;
          if (v30) {
            goto LABEL_25;
          }
          sub_244CEBC20((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
          int v19 = v30;
          __n128 v33 = v31;
          int v34 = v32;
          if (v30) {
            goto LABEL_25;
          }
          *(void *)a6 = 0;
          *(void *)(a6 + 8) = 0;
          *(void *)(a6 + 16) = 0;
          sub_244CEC3B0((char *)(a3 + 8), 0x41uLL, &v30, a6);
          if (!*(_DWORD *)a6)
          {
            *(void *)a6 = 0;
            *(void *)(a6 + 8) = 0;
            *(void *)(a6 + 16) = 0;
            sub_244CEB56C(a5, 128, 0, &v30, 0x14u, (void *)a6);
            if (!*(_DWORD *)a6)
            {
              sub_244CEBC2C(&v30, a5);
              int v19 = v30;
              __n128 v33 = v31;
              int v34 = v32;
              if (v30) {
                goto LABEL_25;
              }
              sub_244CEBC2C(&v30, a5);
              int v19 = v30;
              __n128 v33 = v31;
              int v34 = v32;
              if (v30) {
                goto LABEL_25;
              }
              sub_244CEBC2C(&v30, a5);
              int v20 = v30;
              int v21 = v32;
              int v34 = v32;
              __n128 result = v31;
              __n128 v33 = v31;
              *(_DWORD *)a6 = v30;
              __n128 *v18 = result;
              *(_DWORD *)(a6 + 20) = v21;
              if (v20) {
                return result;
              }
              *(void *)a6 = 0;
              *(void *)(a6 + 8) = 0;
              *(void *)(a6 + 16) = 0;
              if (!*a4)
              {
                *(_DWORD *)a6 = 0;
                *(void *)(a6 + 8) = "src/credentials/GenerateChipX509Cert.cpp";
                *(_DWORD *)(a6 + 16) = 226;
                goto LABEL_40;
              }
              sub_244CEBC20((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
              int v19 = v30;
              __n128 v33 = v31;
              int v34 = v32;
              if (v30) {
                goto LABEL_25;
              }
              *(void *)a6 = 0;
              *(void *)(a6 + 8) = 0;
              *(void *)(a6 + 16) = 0;
              uint64_t v22 = *(const void **)sub_244DA6140(a4);
              int v23 = sub_244DA6140(a4);
              sub_244CEB524(a5, v22, *((unsigned __int16 *)v23 + 4), (void *)a6);
              if (*(_DWORD *)a6) {
                return result;
              }
              sub_244CEBD90(a5, 0, 4u, 0, &v30);
              int v19 = v30;
              __n128 v33 = v31;
              int v34 = v32;
              if (v30) {
                goto LABEL_25;
              }
              *(void *)a6 = 0;
              *(void *)(a6 + 8) = 0;
              *(void *)(a6 + 16) = 0;
              uint64_t v24 = (const void *)*((void *)sub_244DA6140(a4) + 2);
              uint64_t v25 = sub_244DA6140(a4);
              sub_244CEB554(a5, v24, *((unsigned __int16 *)v25 + 12), (void *)a6);
              if (*(_DWORD *)a6) {
                return result;
              }
              sub_244CEBC2C(&v30, a5);
              int v19 = v30;
              __n128 v33 = v31;
              int v34 = v32;
              if (v30)
              {
LABEL_25:
                *(_DWORD *)a6 = v19;
                result.n128_u64[0] = v33.n128_u64[0];
                __n128 *v18 = v33;
                *(_DWORD *)(a6 + 20) = v34;
                return result;
              }
              sub_244CEBC2C(&v30, a5);
              int v26 = v30;
              int v27 = v32;
              int v34 = v32;
              __n128 result = v31;
              __n128 v33 = v31;
              *(_DWORD *)a6 = v30;
              __n128 *v18 = result;
              *(_DWORD *)(a6 + 20) = v27;
              if (!v26)
              {
LABEL_40:
                sub_244CEBC2C(&v30, a5);
                int v12 = v30;
                __n128 v28 = v31;
                int v29 = v32;
                if (!v30)
                {
                  sub_244CEBC2C(&v30, a5);
                  int v12 = v30;
                  __n128 v28 = v31;
                  int v29 = v32;
                }
LABEL_3:
                *(_DWORD *)a6 = v12;
                __n128 result = v28;
                *(__n128 *)(a6 + 4) = v28;
                int v14 = v29;
LABEL_4:
                *(_DWORD *)(a6 + 20) = v14;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned char *sub_244DA6140(unsigned char *a1)
{
  if (!*a1) {
    sub_244E21C78();
  }
  return a1 + 8;
}

void *sub_244DA6164(void *result, uint64_t a2)
{
  *__n128 result = a2;
  if (!a2) {
    sub_244E2928C();
  }
  return result;
}

uint64_t sub_244DA6184@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = 822;
  int v3 = 3;
  if (*(void *)(result + 24))
  {
    uint64_t v4 = *(void *)(result + 32);
    if (v4) {
      int v3 = 0;
    }
    else {
      int v3 = 3;
    }
    if (v4) {
      int v2 = 824;
    }
    else {
      int v2 = 822;
    }
  }
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_244DA61C0(void *a1)
{
  sub_244CC6478(a1 + 7, (uint64_t)(a1 + 5), (unsigned int (*)(uint64_t))sub_244DAEAF0);
  sub_244CC6478(a1 + 14, (uint64_t)(a1 + 12), (unsigned int (*)(uint64_t))sub_244DAEB0C);
  sub_244CC6478(a1 + 21, (uint64_t)(a1 + 19), (unsigned int (*)(uint64_t))sub_244DAEB28);
  sub_244CC6478(a1 + 28, (uint64_t)(a1 + 26), (unsigned int (*)(uint64_t))sub_244DAEB44);
  sub_244CC6478(a1 + 35, (uint64_t)(a1 + 33), (unsigned int (*)(uint64_t))sub_244DAEB60);

  return sub_244CC6478(a1 + 42, (uint64_t)(a1 + 40), (unsigned int (*)(uint64_t))sub_244DAEB7C);
}

uint64_t sub_244DA6294(uint64_t result, uint64_t a2)
{
  if (!a2) {
    sub_244E29344();
  }
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t *sub_244DA62B4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v6 = result[3];
  if (v6)
  {
    uint64_t v8 = result;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    long long v26 = 0u;
    uint64_t v34 = 0;
    uint64_t v25 = &unk_26F957878;
    char v35 = a2;
    uint64_t v36 = 0;
    int v37 = 0xFFFF;
    char v38 = 0;
    memset(v20, 0, sizeof(v20));
    long long v19 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v10 = 0;
    unsigned __int8 v11 = &unk_26F957908;
    char v21 = 0;
    __int16 v22 = -1;
    uint64_t v23 = 0;
    char v24 = 1;
    long long v9 = 0uLL;
    __n128 result = sub_244DA64D0(&v25, v6, (uint64_t)&v9);
    if (v9 && v9 != 216)
    {
      *(_OWORD *)a4 = v9;
      a4[2] = v10;
    }
    else if (sub_244DA669C((uint64_t)&v11, v8[3], (uint64_t)&v25, *(unsigned __int16 *)a3))
    {
      strncpy(&v20[10], a3 + 2, 0x11uLL);
      v20[26] = 0;
      return (uint64_t *)sub_244DA6774((uint64_t)&v11, v8[3], a4);
    }
    else
    {
      *(_WORD *)&v20[8] = *(_WORD *)a3;
      strncpy(&v20[10], a3 + 2, 0x11uLL);
      v20[26] = 0;
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, void, unsigned char *))(*v8 + 56))(v8, a2, WORD1(v36), &v20[8]);
    }
  }
  else
  {
    *(_DWORD *)a4 = 172;
    a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
    *((_DWORD *)a4 + 4) = 849;
  }
  return result;
}

void *sub_244DA64D0@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/lib/support/PersistentData.h";
    int v6 = 62;
    goto LABEL_6;
  }
  uint64_t v5 = result;
  char v13 = 0;
  memset(v12, 0, sizeof(v12));
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  __n128 result = (void *)(*(uint64_t (**)(void *, _OWORD *))(*result + 16))(result, v12);
  if (*(_DWORD *)a3) {
    return result;
  }
  (*(void (**)(void *))(*v5 + 40))(v5);
  unsigned __int16 v11 = 128;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  __n128 result = (*(void *(**)(long long *__return_ptr, uint64_t, _OWORD *, void *, unsigned __int16 *))(*(void *)a2 + 16))(&v9, a2, v12, v5 + 2, &v11);
  if (v9 == 160)
  {
    *(_DWORD *)a3 = 216;
    *(void *)(a3 + 8) = "src/lib/support/PersistentData.h";
    int v6 = 75;
LABEL_6:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  *(_OWORD *)a3 = v9;
  *(void *)(a3 + 16) = v10;
  if (!*(_DWORD *)a3)
  {
    sub_244CB3988((uint64_t)v8);
    double v7 = sub_244CB39B8((uint64_t)v8, (uint64_t)(v5 + 2), v11);
    return (void *)(*(uint64_t (**)(void *, unsigned char *, double))(*v5 + 32))(v5, v8, v7);
  }
  return result;
}

uint64_t sub_244DA669C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 146);
  *(_WORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 174) = 1;
  if (*(_WORD *)(a3 + 148))
  {
    do
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v11, a1, a2);
      if (LODWORD(v11[0])) {
        break;
      }
      int v8 = *(unsigned __int16 *)(a1 + 144);
      if (v8 == a4) {
        return 1;
      }
      *(unsigned char *)(a1 + 174) = 0;
      *(_WORD *)(a1 + 172) = v8;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 170);
      unsigned __int16 v9 = *(_WORD *)(a1 + 168) + 1;
      *(_WORD *)(a1 + 168) = v9;
    }
    while (*(unsigned __int16 *)(a3 + 148) > v9);
  }
  return 0;
}

uint64_t sub_244DA6774@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v5 = result;
    char v9 = 0;
    memset(v8, 0, sizeof(v8));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    __n128 result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)result + 16))(result, v8);
    if (!*(_DWORD *)a3)
    {
      sub_244CB62B8((uint64_t)v7);
      double v6 = sub_244CB62E0((uint64_t)v7, v5 + 16, 0x80uLL);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      __n128 result = (*(uint64_t (**)(uint64_t, _WORD *, double))(*(void *)v5 + 24))(v5, v7, v6);
      if (!*(_DWORD *)a3) {
        return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, void))(*(void *)a2 + 24))(a2, v8, v5 + 16, v7[22]);
      }
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 43;
  }
  return result;
}

uint64_t sub_244DA68D8@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  uint64_t v34 = 0;
  uint64_t v25 = &unk_26F957878;
  char v35 = a2;
  uint64_t v36 = 0;
  int v37 = 0xFFFF;
  char v38 = 0;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = &unk_26F957908;
  __int16 v22 = -1;
  uint64_t v23 = 0;
  char v24 = 1;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v25, *(void *)(a1 + 24), (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    uint64_t result = sub_244DA669C((uint64_t)&v12, *(void *)(a1 + 24), (uint64_t)&v25, a3);
    if (result)
    {
      *(_WORD *)a4 = a3;
      uint64_t result = (uint64_t)strncpy((char *)(a4 + 2), &v21[10], 0x11uLL);
      int v10 = 0;
      *(unsigned char *)(a4 + 18) = 0;
      int v11 = 881;
    }
    else
    {
      int v11 = 877;
      int v10 = 216;
    }
    *(_DWORD *)a5 = v10;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    *((_DWORD *)a5 + 4) = v11;
  }
  return result;
}

uint64_t sub_244DA6A6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  uint64_t v31 = 0;
  __int16 v22 = &unk_26F957878;
  char v32 = a2;
  uint64_t v33 = 0;
  int v34 = 0xFFFF;
  char v35 = 0;
  memset(v18, 0, sizeof(v18));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  char v9 = &unk_26F957908;
  __int16 v19 = -1;
  uint64_t v20 = 0;
  char v21 = 1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v22, a1[3], (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    uint64_t result = sub_244DA669C((uint64_t)&v9, a1[3], (uint64_t)&v22, a3);
    if (result)
    {
      return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a1 + 72))(a1, a2, WORD1(v20));
    }
    else
    {
      *(_DWORD *)a4 = 216;
      a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a4 + 4) = 890;
    }
  }
  return result;
}

void *sub_244DA6C10@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, const char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v7 = result[3];
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v12 = 897;
    goto LABEL_8;
  }
  uint64_t v10 = (uint64_t)result;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  uint64_t v53 = 0;
  long long v44 = &unk_26F957878;
  char v54 = a2;
  uint64_t v55 = 0;
  int v56 = 0xFFFF;
  char v57 = 0;
  memset(v39, 0, sizeof(v39));
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = &unk_26F957908;
  char v40 = 0;
  __int16 v41 = -1;
  uint64_t v42 = 0;
  char v43 = 1;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  uint64_t result = sub_244DA64D0(&v44, v7, (uint64_t)&v14);
  if (v14 && v14 != 216)
  {
    *(_OWORD *)a5 = v14;
    a5[2] = v15;
    return result;
  }
  uint64_t result = (void *)sub_244DA669C((uint64_t)&v30, *(void *)(v10 + 24), (uint64_t)&v44, *(unsigned __int16 *)a4);
  int v11 = (int)result;
  if (result && WORD1(v42) != a3)
  {
    *(_DWORD *)a5 = 26;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v12 = 908;
LABEL_8:
    *((_DWORD *)a5 + 4) = v12;
    return result;
  }
  *(_WORD *)&uint8_t v39[8] = *(_WORD *)a4;
  LOWORD(v42) = 0;
  uint64_t result = strncpy(&v39[10], a4 + 2, 0x11uLL);
  v39[26] = 0;
  if (v11) {
    return (void *)sub_244DA6774((uint64_t)&v30, *(void *)(v10 + 24), a5);
  }
  if (WORD1(v55) <= a3)
  {
    if (WORD1(v55) != a3)
    {
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      int v12 = 935;
      goto LABEL_8;
    }
    if (WORD1(v55) >= *(unsigned __int16 *)(v10 + 8))
    {
      *(_DWORD *)a5 = 31;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      int v12 = 936;
      goto LABEL_8;
    }
    ++WORD1(v55);
  }
  else
  {
    memset(v25, 0, sizeof(v25));
    long long v24 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = &unk_26F957908;
    char v26 = 0;
    __int16 v27 = -1;
    uint64_t v28 = 0;
    char v29 = 1;
    sub_244DA70D0((uint64_t)&v16, *(void *)(v10 + 24), (uint64_t)&v44, a3);
    char v43 = v29;
    HIDWORD(v42) = HIDWORD(v28);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t result = (void *)sub_244DA71A8(v10, a2, *(unsigned __int16 *)&v25[8], (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t result = (void *)sub_244DA7450((uint64_t)&v16, *(void *)(v10 + 24), a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    uint64_t v13 = *(void *)(v10 + 16);
    if (v13) {
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v13 + 24))(v13, a2, &v25[8]);
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t result = (void *)sub_244DA6774((uint64_t)&v30, *(void *)(v10 + 24), a5);
  if (*(_DWORD *)a5) {
    return result;
  }
  if (v43)
  {
    LOWORD(v55) = *(_WORD *)&v39[8];
  }
  else
  {
    *(_WORD *)&v25[8] = HIWORD(v42);
    memset(&v25[10], 0, 17);
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)long long v25 = 0;
    long long v16 = &unk_26F957908;
    char v26 = a2;
    __int16 v27 = -1;
    uint64_t v28 = 0;
    char v29 = 1;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t result = sub_244DA64D0(&v16, *(void *)(v10 + 24), (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    WORD2(v28) = *(_WORD *)&v39[8];
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t result = (void *)sub_244DA6774((uint64_t)&v16, *(void *)(v10 + 24), a5);
    if (*(_DWORD *)a5) {
      return result;
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t result = sub_244DA7544((uint64_t)&v44, *(void *)(v10 + 24), a5);
  if (!*(_DWORD *)a5)
  {
    uint64_t result = *(void **)(v10 + 16);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, unsigned char *))(*result + 16))(result, a2, &v39[8]);
    }
    *(_DWORD *)a5 = 0;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v12 = 958;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_244DA70D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 146);
  *(_WORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 174) = 1;
  if (*(_WORD *)(a3 + 148))
  {
    do
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v11, a1, a2);
      if (LODWORD(v11[0])) {
        break;
      }
      uint64_t v8 = *(unsigned __int16 *)(a1 + 168);
      if (v8 == a4) {
        return 1;
      }
      *(unsigned char *)(a1 + 174) = 0;
      *(_WORD *)(a1 + 172) = *(_WORD *)(a1 + 144);
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 170);
      unsigned __int16 v9 = v8 + 1;
      *(_WORD *)(a1 + 168) = v9;
    }
    while (*(unsigned __int16 *)(a3 + 148) > v9);
  }
  return 0;
}

uint64_t sub_244DA71A8@<X0>(uint64_t result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 1321;
    goto LABEL_13;
  }
  uint64_t v8 = result;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  uint64_t v50 = 0;
  __int16 v41 = &unk_26F957878;
  char v51 = a2;
  uint64_t v52 = 0;
  int v53 = 0xFFFF;
  char v54 = 0;
  memset(v37, 0, sizeof(v37));
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  uint64_t v28 = &unk_26F957908;
  char v38 = 0;
  *(_WORD *)uint64_t v39 = -1;
  *(void *)&v39[2] = 0;
  char v40 = 1;
  uint64_t result = (uint64_t)sub_244DA64D0(&v41, v6, (uint64_t)&v12);
  if (v12)
  {
    *(_DWORD *)a4 = 113;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 1326;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  uint64_t result = sub_244DA669C((uint64_t)&v28, *(void *)(v8 + 24), (uint64_t)&v41, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 16;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 1327;
    goto LABEL_13;
  }
  __int16 v22 = *(_WORD *)&v37[8];
  __int16 v23 = *(_WORD *)v39;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  int v12 = &unk_26F9579B8;
  char v24 = a2;
  int v25 = 0;
  __int16 v26 = 0;
  char v27 = 1;
  if (!*(_WORD *)&v39[2])
  {
LABEL_10:
    *(_DWORD *)uint64_t v39 = 0xFFFF;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    uint64_t result = sub_244DA6774((uint64_t)&v28, *(void *)(v8 + 24), (void *)a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 1342;
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  while (1)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t result = (uint64_t)sub_244DA64D0(&v12, *(void *)(v8 + 24), a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    sub_244DA7450((uint64_t)&v12, *(void *)(v8 + 24), v11);
    __int16 v23 = HIWORD(v25);
    if (++v10 >= (unint64_t)*(unsigned __int16 *)&v39[2]) {
      goto LABEL_10;
    }
  }
}

uint64_t sub_244DA7450@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2)
  {
    char v6 = 0;
    memset(v5, 0, sizeof(v5));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)result + 16))(result, v5);
    if (!*(_DWORD *)a3) {
      return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 32))(a2, v5);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 86;
  }
  return result;
}

void *sub_244DA7544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_244DAD41C(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    return (void *)sub_244DA6774(a1, a2, a3);
  }
  return result;
}

uint64_t sub_244DA75B4@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(result + 24);
  if (v7)
  {
    uint64_t v10 = result;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    uint64_t v36 = 0;
    char v27 = &unk_26F957878;
    char v37 = a2;
    uint64_t v38 = 0;
    int v39 = 0xFFFF;
    char v40 = 0;
    memset(v22, 0, sizeof(v22));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = &unk_26F957908;
    char v23 = 0;
    __int16 v24 = -1;
    uint64_t v25 = 0;
    char v26 = 1;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t result = (uint64_t)sub_244DA64D0(&v27, v7, (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    uint64_t result = sub_244DA70D0((uint64_t)&v13, *(void *)(v10 + 24), (uint64_t)&v27, a3);
    if (result)
    {
      *(_WORD *)a4 = *(_WORD *)&v22[8];
      uint64_t result = (uint64_t)strncpy((char *)(a4 + 2), &v22[10], 0x11uLL);
      int v11 = 0;
      *(unsigned char *)(a4 + 18) = 0;
      int v12 = 974;
    }
    else
    {
      int v12 = 969;
      int v11 = 216;
    }
    *(_DWORD *)a5 = v11;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
  }
  else
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v12 = 963;
  }
  *((_DWORD *)a5 + 4) = v12;
  return result;
}

uint64_t sub_244DA7770@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v10 = 979;
LABEL_19:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  uint64_t v8 = result;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  uint64_t v68 = 0;
  uint64_t v59 = &unk_26F957878;
  char v69 = a2;
  uint64_t v70 = 0;
  int v71 = 0xFFFF;
  char v72 = 0;
  memset(v54, 0, sizeof(v54));
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = &unk_26F957908;
  char v55 = 0;
  __int16 v56 = -1;
  uint64_t v57 = 0;
  char v58 = 1;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v59, v6, a4);
  if (*(_DWORD *)a4) {
    return result;
  }
  uint64_t result = sub_244DA70D0((uint64_t)&v45, *(void *)(v8 + 24), (uint64_t)&v59, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 216;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v10 = 985;
    goto LABEL_19;
  }
  __int16 v39 = *(_WORD *)&v54[8];
  __int16 v40 = v56;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  long long v29 = &unk_26F9579B8;
  char v41 = a2;
  int v42 = 0;
  __int16 v43 = 0;
  char v44 = 1;
  if ((_WORD)v57)
  {
    unint64_t v9 = 0;
    do
    {
      sub_244DA64D0(&v29, *(void *)(v8 + 24), (uint64_t)&v11);
      if (v11) {
        break;
      }
      sub_244DA7450((uint64_t)&v29, *(void *)(v8 + 24), &v11);
      __int16 v40 = HIWORD(v42);
      ++v9;
    }
    while (v9 < (unsigned __int16)v57);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_244DA7450((uint64_t)&v45, *(void *)(v8 + 24), (void *)a4);
  if (!*(_DWORD *)a4)
  {
    if (v58)
    {
      LOWORD(v70) = WORD2(v57);
    }
    else
    {
      __int16 v21 = HIWORD(v57);
      uint64_t v23 = 0;
      uint64_t v22 = 0;
      char v24 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t v20 = 0;
      int v11 = &unk_26F957908;
      char v25 = a2;
      __int16 v26 = -1;
      uint64_t v27 = 0;
      char v28 = 1;
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t result = (uint64_t)sub_244DA64D0(&v11, *(void *)(v8 + 24), a4);
      if (*(_DWORD *)a4) {
        return result;
      }
      WORD2(v27) = WORD2(v57);
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      uint64_t result = sub_244DA6774((uint64_t)&v11, *(void *)(v8 + 24), (void *)a4);
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    if (WORD1(v70)) {
      --WORD1(v70);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t result = (uint64_t)sub_244DA7544((uint64_t)&v59, *(void *)(v8 + 24), (void *)a4);
    if (!*(_DWORD *)a4)
    {
      uint64_t result = *(void *)(v8 + 16);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 24))(result, a2, &v54[8]);
      }
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
      int v10 = 1021;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_244DA7B34(uint64_t a1, char a2, int a3, int a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    return 0;
  }
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  uint64_t v48 = 0;
  __int16 v39 = &unk_26F957878;
  char v49 = a2;
  uint64_t v50 = 0;
  int v51 = 0xFFFF;
  char v52 = 0;
  memset(v35, 0, sizeof(v35));
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  __int16 v26 = &unk_26F957908;
  __int16 v36 = -1;
  uint64_t v37 = 0;
  char v38 = 1;
  int v21 = -65536;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  int v11 = &unk_26F9579B8;
  char v22 = 0;
  int v23 = 0;
  __int16 v24 = 0;
  char v25 = 1;
  sub_244DA64D0(&v39, v5, (uint64_t)v10);
  uint64_t result = 0;
  if (!v10[0])
  {
    uint64_t result = sub_244DA669C((uint64_t)&v26, *(void *)(a1 + 24), (uint64_t)&v39, a3);
    if (result) {
      return sub_244DA7CFC((uint64_t)&v11, *(void *)(a1 + 24), (uint64_t)&v39, &v26, a4);
    }
  }
  return result;
}

uint64_t sub_244DA7CFC(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, int a5)
{
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 144) = a4[72];
  *(_WORD *)(a1 + 146) = a4[82];
  *(_WORD *)(a1 + 150) = 0;
  *(unsigned char *)(a1 + 156) = 1;
  if (a4[83])
  {
    do
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0])) {
        break;
      }
      int v9 = *(unsigned __int16 *)(a1 + 146);
      if (v9 == a5) {
        return 1;
      }
      *(unsigned char *)(a1 + 156) = 0;
      *(_WORD *)(a1 + 154) = v9;
      *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 152);
      unsigned __int16 v10 = *(_WORD *)(a1 + 150) + 1;
      *(_WORD *)(a1 + 150) = v10;
    }
    while ((unsigned __int16)a4[83] > v10);
  }
  return 0;
}

uint64_t sub_244DA7DDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(result + 24);
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1039;
    goto LABEL_21;
  }
  uint64_t v10 = result;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  uint64_t v68 = 0;
  uint64_t v59 = &unk_26F957878;
  char v69 = a2;
  uint64_t v70 = 0;
  int v71 = 0xFFFF;
  char v72 = 0;
  memset(v54, 0, sizeof(v54));
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = &unk_26F957908;
  char v55 = 0;
  __int16 v56 = -1;
  uint64_t v57 = 0;
  char v58 = 1;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v59, v7, (uint64_t)&v12);
  if (v12 && v12 != 216)
  {
    *(_OWORD *)a5 = v12;
    a5[2] = v13;
    return result;
  }
  uint64_t result = sub_244DA669C((uint64_t)&v45, *(void *)(v10 + 24), (uint64_t)&v59, a3);
  if (result)
  {
    int v40 = -65536;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v39 = 0;
    long long v30 = &unk_26F9579B8;
    char v41 = 0;
    int v42 = 0;
    __int16 v43 = 0;
    char v44 = 1;
    uint64_t result = sub_244DA7CFC((uint64_t)&v30, *(void *)(v10 + 24), (uint64_t)&v59, &v45, a4);
    if (result)
    {
      *(_DWORD *)a5 = 0;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      int v11 = 1071;
LABEL_21:
      *((_DWORD *)a5 + 4) = v11;
      return result;
    }
    HIWORD(v40) = a4;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t result = sub_244DA6774((uint64_t)&v30, *(void *)(v10 + 24), a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    if (v44)
    {
      __int16 v56 = HIWORD(v40);
LABEL_19:
      LOWORD(v57) = v57 + 1;
      return sub_244DA6774((uint64_t)&v45, *(void *)(v10 + 24), a5);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t result = sub_244DA6774((uint64_t)&v30, *(void *)(v10 + 24), a5);
    if (!*(_DWORD *)a5)
    {
      __int16 v24 = *(_WORD *)&v54[8];
      __int16 v25 = v43;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v23 = 0;
      long long v14 = &unk_26F9579B8;
      char v26 = a2;
      int v27 = 0;
      __int16 v28 = 0;
      char v29 = 1;
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      uint64_t result = (uint64_t)sub_244DA64D0(&v14, *(void *)(v10 + 24), (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        HIWORD(v27) = HIWORD(v40);
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        uint64_t result = sub_244DA6774((uint64_t)&v14, *(void *)(v10 + 24), a5);
        if (!*(_DWORD *)a5) {
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    if (WORD1(v70) >= *(unsigned __int16 *)(v10 + 8))
    {
      *(_DWORD *)a5 = 31;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      int v11 = 1051;
      goto LABEL_21;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    LOWORD(v40) = a3;
    HIWORD(v40) = a4;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v39 = 0;
    long long v30 = &unk_26F9579B8;
    char v41 = a2;
    int v42 = 0;
    __int16 v43 = 0;
    char v44 = 1;
    uint64_t result = sub_244DA6774((uint64_t)&v30, *(void *)(v10 + 24), a5);
    if (!*(_DWORD *)a5)
    {
      *(_WORD *)&unsigned char v54[8] = a3;
      v54[10] = 0;
      __int16 v56 = a4;
      LOWORD(v57) = 1;
      HIDWORD(v57) = (unsigned __int16)v70;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      uint64_t result = sub_244DA6774((uint64_t)&v45, *(void *)(v10 + 24), a5);
      if (!*(_DWORD *)a5)
      {
        LODWORD(v70) = __PAIR32__(WORD1(v70), *(unsigned __int16 *)&v54[8]) + 0x10000;
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        uint64_t result = (uint64_t)sub_244DA7544((uint64_t)&v59, *(void *)(v10 + 24), a5);
        if (!*(_DWORD *)a5)
        {
          uint64_t result = *(void *)(v10 + 16);
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 16))(result, a2, &v54[8]);
          }
          *(_DWORD *)a5 = 0;
          a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
          int v11 = 1066;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_244DA82B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(result + 24);
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1097;
LABEL_12:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  uint64_t v10 = (uint64_t *)result;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v66 = 0;
  uint64_t v57 = &unk_26F957878;
  char v67 = a2;
  uint64_t v68 = 0;
  int v69 = 0xFFFF;
  char v70 = 0;
  memset(v52, 0, sizeof(v52));
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  __int16 v43 = &unk_26F957908;
  char v53 = 0;
  __int16 v54 = -1;
  uint64_t v55 = 0;
  char v56 = 1;
  int v38 = -65536;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v37 = 0;
  __int16 v28 = &unk_26F9579B8;
  char v39 = 0;
  int v40 = 0;
  __int16 v41 = 0;
  char v42 = 1;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v57, v7, a5);
  if (*(_DWORD *)a5) {
    return result;
  }
  uint64_t result = sub_244DA669C((uint64_t)&v43, v10[3], (uint64_t)&v57, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a5 = 216;
    *(void *)(a5 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1104;
    goto LABEL_12;
  }
  uint64_t result = sub_244DA7CFC((uint64_t)&v28, v10[3], (uint64_t)&v57, &v43, a4);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a5 = 216;
    *(void *)(a5 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1105;
    goto LABEL_12;
  }
  sub_244DA7450((uint64_t)&v28, v10[3], &v12);
  if (v42)
  {
    __int16 v54 = HIWORD(v40);
LABEL_7:
    if ((unsigned __int16)v55 < 2u) {
      return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 72))(v10, a2, WORD1(v55));
    }
    LOWORD(v55) = v55 - 1;
    return sub_244DA6774((uint64_t)&v43, v10[3], (void *)a5);
  }
  __int16 v22 = *(_WORD *)&v52[8];
  __int16 v23 = v41;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  long long v12 = &unk_26F9579B8;
  char v24 = a2;
  int v25 = 0;
  __int16 v26 = 0;
  char v27 = 1;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v12, v10[3], a5);
  if (!*(_DWORD *)a5)
  {
    HIWORD(v25) = HIWORD(v40);
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    uint64_t result = sub_244DA6774((uint64_t)&v12, v10[3], (void *)a5);
    if (!*(_DWORD *)a5) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_244DA861C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(result + 24);
  if (v6)
  {
    uint64_t v8 = (uint64_t *)result;
    long long v53 = 0u;
    long long v52 = 0u;
    long long v51 = 0u;
    long long v50 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    uint64_t v54 = 0;
    long long v45 = &unk_26F957878;
    char v55 = a2;
    uint64_t v56 = 0;
    int v57 = 0xFFFF;
    char v58 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    uint64_t result = (uint64_t)sub_244DA64D0(&v45, v6, (uint64_t)a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned __int16 v37 = v56;
    uint64_t v39 = 0;
    uint64_t v38 = 0;
    char v40 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v36 = 0;
    char v27 = &unk_26F957908;
    char v41 = a2;
    __int16 v42 = -1;
    uint64_t v43 = 0;
    char v44 = 1;
    int v22 = -65536;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 0;
    long long v12 = &unk_26F9579B8;
    char v23 = 0;
    int v24 = 0;
    __int16 v25 = 0;
    char v26 = 1;
    if (WORD1(v56))
    {
      for (unint64_t i = 0; i < WORD1(v56); ++i)
      {
        uint64_t result = (uint64_t)sub_244DA64D0(&v27, v8[3], (uint64_t)v11);
        if (v11[0]) {
          break;
        }
        uint64_t result = sub_244DA7CFC((uint64_t)&v12, v8[3], (uint64_t)&v45, &v27, a3);
        if (result)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, void, uint64_t))(*v8 + 96))(v8, a2, v37, a3);
          if (*(_DWORD *)a4) {
            return result;
          }
        }
        unsigned __int16 v37 = WORD2(v43);
      }
    }
    *(_DWORD *)a4 = 0;
    a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v10 = 1163;
  }
  else
  {
    *(_DWORD *)a4 = 172;
    a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v10 = 1136;
  }
  *((_DWORD *)a4 + 4) = v10;
  return result;
}

void *sub_244DA88A8(uint64_t a1, char a2)
{
  char v3 = a2;
  if (*(void *)(a1 + 24)) {
    return sub_244DA88EC((unint64_t *)(a1 + 40), a1, &v3);
  }
  else {
    return 0;
  }
}

void *sub_244DA88EC(unint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_244CC4D84(0x28uLL);
  uint64_t v7 = v6;
  if (v6)
  {
    sub_244DA898C((uint64_t)v6, a2, *a3);
    uint64_t v8 = sub_244CC4D84(0x18uLL);
    if (v8)
    {
      *uint64_t v8 = v7;
      v8[1] = a1 + 2;
      _OWORD v8[2] = 0;
      _OWORD v8[2] = a1[4];
      *(void *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9) {
        a1[1] = v10;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_244DA898C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F957500;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v7 = &unk_26F957878;
  char v17 = a3;
  uint64_t v18 = 0;
  int v19 = 0xFFFF;
  char v20 = 0;
  sub_244DA64D0(&v7, *(void *)(a2 + 24), (uint64_t)v6);
  if (!v6[0])
  {
    *(_WORD *)(a1 + 18) = v18;
    uint64_t v4 = WORD1(v18);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_244DA8A88(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL sub_244DA8A90(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    return 0;
  }
  char v4 = *(unsigned char *)(a1 + 16);
  __int16 v18 = *(_WORD *)(a1 + 18);
  v19[1] = 0;
  v19[0] = 0;
  char v20 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0;
  long long v8 = &unk_26F957908;
  char v21 = v4;
  __int16 v22 = -1;
  uint64_t v23 = 0;
  char v24 = 1;
  sub_244DA64D0(&v8, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)v7);
  BOOL v5 = v7[0] == 0;
  if (!v7[0])
  {
    ++*(void *)(a1 + 24);
    *(_WORD *)(a1 + 18) = WORD2(v23);
    *(_WORD *)a2 = v18;
    strncpy((char *)(a2 + 2), (const char *)v19, 0x11uLL);
    *(unsigned char *)(a2 + 18) = 0;
  }
  return v5;
}

void sub_244DA8BD0(uint64_t a1)
{
}

void sub_244DA8BE0(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    char v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    BOOL v5 = v4;
    *char v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void *sub_244DA8C90(uint64_t a1, char a2, int a3)
{
  int v5 = a3;
  char v4 = a2;
  if (*(void *)(a1 + 24)) {
    return sub_244DA8CDC((unint64_t *)(a1 + 152), a1, &v4, &v5);
  }
  else {
    return 0;
  }
}

void *sub_244DA8CDC(unint64_t *a1, uint64_t a2, char *a3, int *a4)
{
  long long v8 = sub_244CC4D84(0x48uLL);
  long long v9 = v8;
  if (v8)
  {
    sub_244DA8D8C((uint64_t)v8, a2, *a3, *a4);
    long long v10 = sub_244CC4D84(0x18uLL);
    if (v10)
    {
      *long long v10 = v9;
      v10[1] = a1 + 2;
      void v10[2] = 0;
      void v10[2] = a1[4];
      *(void *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      unint64_t v11 = a1[1];
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11) {
        a1[1] = v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_244DA8D8C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F957538;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  uint64_t v39 = 0;
  long long v30 = &unk_26F957878;
  char v40 = a3;
  uint64_t v41 = 0;
  int v42 = 0xFFFF;
  char v43 = 0;
  sub_244DA64D0(&v30, *(void *)(a2 + 24), (uint64_t)&v12);
  if (!v12)
  {
    if ((*(void *)&a4 & 0xFF0000) != 0)
    {
      __int16 v22 = a4;
      uint64_t v24 = 0;
      uint64_t v23 = 0;
      char v25 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v21 = 0;
      unint64_t v12 = &unk_26F957908;
      char v26 = a3;
      __int16 v27 = -1;
      uint64_t v28 = 0;
      char v29 = 1;
      sub_244DA64D0(&v12, *(void *)(a2 + 24), (uint64_t)v11);
      if (v11[0]) {
        return a1;
      }
      *(_WORD *)(a1 + 20) = a4;
      *(_WORD *)(a1 + 18) = a4;
      uint64_t v9 = 1;
    }
    else
    {
      __int16 v22 = v41;
      uint64_t v24 = 0;
      uint64_t v23 = 0;
      char v25 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v21 = 0;
      unint64_t v12 = &unk_26F957908;
      char v26 = a3;
      __int16 v27 = -1;
      uint64_t v28 = 0;
      char v29 = 1;
      sub_244DA64D0(&v12, *(void *)(a2 + 24), (uint64_t)v11);
      if (v11[0]) {
        return a1;
      }
      __int16 v10 = v41;
      *(_WORD *)(a1 + 20) = v41;
      *(_WORD *)(a1 + 18) = v10;
      uint64_t v9 = WORD1(v41);
    }
    *(void *)(a1 + 32) = v9;
    *(_WORD *)(a1 + 40) = v27;
    *(void *)(a1 + 56) = (unsigned __int16)v28;
  }
  return a1;
}

uint64_t sub_244DA8FEC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return sub_244DA8D8C(a1, a2, a3, a4);
}

uint64_t sub_244DA8FF4(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v1 = *(unsigned char *)(a1 + 16);
  __int16 v36 = *(_WORD *)(a1 + 18);
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  char v39 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  char v26 = &unk_26F957908;
  char v40 = v1;
  __int16 v41 = -1;
  uint64_t v42 = 0;
  char v43 = 1;
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 1;
  do
  {
    sub_244DA64D0(&v26, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v10);
    if (v10) {
      break;
    }
    char v5 = *(unsigned char *)(a1 + 16);
    __int16 v20 = v36;
    __int16 v21 = v41;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
    __int16 v10 = &unk_26F9579B8;
    char v22 = v5;
    int v23 = 0;
    __int16 v24 = 0;
    char v25 = 1;
    if ((_WORD)v42)
    {
      unint64_t v6 = 0;
      do
      {
        sub_244DA64D0(&v10, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)v9);
        if (v9[0]) {
          break;
        }
        __int16 v21 = HIWORD(v23);
        ++v6;
      }
      while (v6 < (unsigned __int16)v42);
      v3 += v6;
    }
    __int16 v36 = WORD2(v42);
  }
  while (v4++ < *(void *)(a1 + 32));
  return v3;
}

BOOL sub_244DA91D0(uint64_t a1, _WORD *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    return 0;
  }
  __int16 v4 = *(_WORD *)(a1 + 20);
  while (1)
  {
    char v5 = *(unsigned char *)(a1 + 16);
    __int16 v41 = v4;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    char v44 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v40 = 0;
    long long v31 = &unk_26F957908;
    char v45 = v5;
    __int16 v46 = -1;
    uint64_t v47 = 0;
    char v48 = 1;
    sub_244DA64D0(&v31, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v15);
    BOOL v6 = v15 == 0;
    if (v15)
    {
      *(void *)(a1 + 24) = *(void *)(a1 + 32);
      return v6;
    }
    if (*(unsigned char *)(a1 + 64))
    {
      unint64_t v7 = 0;
      *(_WORD *)(a1 + 40) = v46;
      unint64_t v8 = (unsigned __int16)v47;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = v8;
      *(unsigned char *)(a1 + 64) = 0;
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 48);
      unint64_t v8 = *(void *)(a1 + 56);
    }
    if (v7 < v8)
    {
      char v9 = *(unsigned char *)(a1 + 16);
      __int16 v10 = *(_WORD *)(a1 + 40);
      __int16 v25 = *(_WORD *)(a1 + 20);
      __int16 v26 = v10;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      uint64_t v24 = 0;
      long long v15 = &unk_26F9579B8;
      char v27 = v9;
      int v28 = 0;
      __int16 v29 = 0;
      char v30 = 1;
      sub_244DA64D0(&v15, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)v14);
      if (!v14[0]) {
        break;
      }
    }
    __int16 v4 = WORD2(v47);
    *(_WORD *)(a1 + 20) = WORD2(v47);
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 24) + 1;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 64) = 1;
    if (v12 >= v11) {
      return 0;
    }
  }
  *a2 = v41;
  a2[1] = v26;
  *(_WORD *)(a1 + 40) = HIWORD(v28);
  ++*(void *)(a1 + 48);
  return v6;
}

void sub_244DA93F4(uint64_t a1)
{
}

void sub_244DA9404(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    __int16 v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    char v5 = v4;
    *__int16 v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void *sub_244DA94B4@<X0>(void *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, unsigned __int16 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v7 = result[3];
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1351;
    goto LABEL_8;
  }
  __int16 v10 = result;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  uint64_t v54 = 0;
  char v45 = &unk_26F957878;
  char v55 = a2;
  uint64_t v56 = 0;
  int v57 = 0xFFFF;
  char v58 = 0;
  int v42 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  __int16 v40 = 0;
  char v41 = 1;
  char v30 = &unk_26F957A68;
  char v43 = a2;
  int v44 = 0;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t result = sub_244DA64D0(&v45, v7, (uint64_t)&v12);
  if (v12 && v12 != 216)
  {
    *(_OWORD *)a5 = v12;
    a5[2] = v13;
    return result;
  }
  uint64_t result = (void *)sub_244DA9800((uint64_t)&v30, v10[3], (uint64_t)&v45, a4);
  if (result && WORD5(v39) != a3)
  {
    *(_DWORD *)a5 = 26;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1362;
LABEL_8:
    *((_DWORD *)a5 + 4) = v11;
    return result;
  }
  uint64_t result = (void *)sub_244DA9914((uint64_t)&v30, v10[3], (uint64_t)&v45, a3);
  int v44 = *(_DWORD *)a4;
  if (result) {
    return (void *)sub_244DA6774((uint64_t)&v30, v10[3], a5);
  }
  if (HIWORD(v56) != a3)
  {
    *(_DWORD *)a5 = 47;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1375;
    goto LABEL_8;
  }
  if (HIWORD(v56) >= *((unsigned __int16 *)v10 + 4))
  {
    *(_DWORD *)a5 = 31;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1376;
    goto LABEL_8;
  }
  WORD6(v39) = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = (void *)sub_244DA6774((uint64_t)&v30, v10[3], a5);
  if (!*(_DWORD *)a5)
  {
    if (v41)
    {
      WORD2(v56) = WORD4(v39);
LABEL_18:
      ++HIWORD(v56);
      return sub_244DA7544((uint64_t)&v45, v10[3], a5);
    }
    int v27 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v23 = 0;
    __int16 v24 = HIWORD(v39);
    uint64_t v25 = 0;
    char v26 = 1;
    long long v14 = &unk_26F957A68;
    char v28 = a2;
    int v29 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t result = sub_244DA64D0(&v14, v10[3], (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      WORD1(v25) = WORD4(v39);
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      uint64_t result = (void *)sub_244DA6774((uint64_t)&v14, v10[3], a5);
      if (!*(_DWORD *)a5) {
        goto LABEL_18;
      }
    }
  }
  return result;
}

uint64_t sub_244DA9800(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 150);
  *(_WORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 146) = 0;
  *(unsigned char *)(a1 + 154) = 1;
  LOWORD(v5) = *(_WORD *)(a3 + 152);
  if ((_WORD)v5)
  {
    while (1)
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0]))
      {
        LOWORD(v5) = *(_WORD *)(a1 + 152);
        goto LABEL_10;
      }
      if (*(unsigned __int16 *)(a1 + 162) == *a4 && *(unsigned __int16 *)(a1 + 164) == a4[1]) {
        return 1;
      }
      unsigned int v9 = *(unsigned __int16 *)(a1 + 144);
      unsigned int v5 = *(unsigned __int16 *)(a1 + 152);
      if (v9 > v5) {
        LOWORD(v5) = *(_WORD *)(a1 + 144);
      }
      *(_WORD *)(a1 + 152) = v5;
      *(unsigned char *)(a1 + 154) = 0;
      *(_WORD *)(a1 + 150) = v9;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 148);
      unsigned __int16 v10 = *(_WORD *)(a1 + 146) + 1;
      *(_WORD *)(a1 + 146) = v10;
      if (*(unsigned __int16 *)(a3 + 152) <= v10) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t result = 0;
    *(_WORD *)(a1 + 144) = v5 + 1;
  }
  return result;
}

uint64_t sub_244DA9914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 150);
  *(_WORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 146) = 0;
  *(unsigned char *)(a1 + 154) = 1;
  LOWORD(v5) = *(_WORD *)(a3 + 152);
  if ((_WORD)v5)
  {
    while (1)
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v13, a1, a2);
      if (LODWORD(v13[0]))
      {
        LOWORD(v5) = *(_WORD *)(a1 + 152);
        goto LABEL_9;
      }
      uint64_t v9 = *(unsigned __int16 *)(a1 + 146);
      if (v9 == a4) {
        return 1;
      }
      unsigned int v10 = *(unsigned __int16 *)(a1 + 144);
      unsigned int v5 = *(unsigned __int16 *)(a1 + 152);
      if (v10 > v5) {
        LOWORD(v5) = *(_WORD *)(a1 + 144);
      }
      *(_WORD *)(a1 + 152) = v5;
      *(unsigned char *)(a1 + 154) = 0;
      *(_WORD *)(a1 + 150) = v10;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 148);
      unsigned __int16 v11 = v9 + 1;
      *(_WORD *)(a1 + 146) = v11;
      if (*(unsigned __int16 *)(a3 + 152) <= v11) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t result = 0;
    *(_WORD *)(a1 + 144) = v5 + 1;
  }
  return result;
}

uint64_t sub_244DA9A10@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(result + 24);
  if (v7)
  {
    uint64_t v10 = result;
    long long v37 = 0u;
    long long v36 = 0u;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    uint64_t v38 = 0;
    int v29 = &unk_26F957878;
    char v39 = a2;
    uint64_t v40 = 0;
    int v41 = 0xFFFF;
    char v42 = 0;
    int v26 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v22 = 0;
    __int16 v23 = 1;
    uint64_t v24 = 0;
    char v25 = 1;
    uint64_t v13 = &unk_26F957A68;
    char v27 = 0;
    int v28 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t result = (uint64_t)sub_244DA64D0(&v29, v7, (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    uint64_t result = sub_244DA9914((uint64_t)&v13, *(void *)(v10 + 24), (uint64_t)&v29, a3);
    if (result)
    {
      int v11 = 0;
      *a4 = v28;
      int v12 = 1412;
    }
    else
    {
      int v12 = 1407;
      int v11 = 216;
    }
    *(_DWORD *)a5 = v11;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
  }
  else
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v12 = 1401;
  }
  *((_DWORD *)a5 + 4) = v12;
  return result;
}

uint64_t sub_244DA9BC8@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 1417;
LABEL_12:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  uint64_t v8 = result;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  uint64_t v51 = 0;
  char v42 = &unk_26F957878;
  char v52 = a2;
  uint64_t v53 = 0;
  int v54 = 0xFFFF;
  char v55 = 0;
  int v39 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  __int16 v36 = 1;
  uint64_t v37 = 0;
  char v38 = 1;
  int v26 = &unk_26F957A68;
  char v40 = 0;
  int v41 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v42, v6, a4);
  if (*(_DWORD *)a4) {
    return result;
  }
  uint64_t result = sub_244DA9914((uint64_t)&v26, *(void *)(v8 + 24), (uint64_t)&v42, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 216;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 1423;
    goto LABEL_12;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_244DA7450((uint64_t)&v26, *(void *)(v8 + 24), (void *)a4);
  if (*(_DWORD *)a4) {
    return result;
  }
  if (v38)
  {
    WORD2(v53) = WORD1(v37);
  }
  else
  {
    int v23 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
    __int16 v20 = WORD2(v37);
    uint64_t v21 = 0;
    char v22 = 1;
    uint64_t v10 = &unk_26F957A68;
    char v24 = a2;
    int v25 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    uint64_t result = (uint64_t)sub_244DA64D0(&v10, *(void *)(v8 + 24), a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    WORD1(v21) = WORD1(v37);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    uint64_t result = sub_244DA6774((uint64_t)&v10, *(void *)(v8 + 24), (void *)a4);
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (HIWORD(v53)) {
    --HIWORD(v53);
  }
  return (uint64_t)sub_244DA7544((uint64_t)&v42, *(void *)(v8 + 24), (void *)a4);
}

void *sub_244DA9E5C@<X0>(void *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v5 = result[3];
  if (!v5)
  {
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v7 = 1449;
    goto LABEL_5;
  }
  uint64_t v6 = result;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  uint64_t v35 = 0;
  int v26 = &unk_26F957878;
  char v36 = a2;
  uint64_t v37 = 0;
  int v38 = 0xFFFF;
  char v39 = 0;
  uint64_t result = sub_244DA64D0(&v26, v5, (uint64_t)&v10);
  if (v10)
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v7 = 1452;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  int v23 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  __int16 v20 = WORD2(v37);
  uint64_t v21 = 0;
  char v22 = 1;
  uint64_t v10 = &unk_26F957A68;
  char v24 = a2;
  int v25 = 0;
  if (HIWORD(v37))
  {
    unint64_t v8 = 0;
    do
    {
      sub_244DA64D0(&v10, v6[3], (uint64_t)v9);
      if (LODWORD(v9[0])) {
        break;
      }
      sub_244DA7450((uint64_t)&v10, v6[3], v9);
      __int16 v20 = WORD1(v21);
      ++v8;
    }
    while (v8 < HIWORD(v37));
  }
  HIDWORD(v37) = 0;
  return sub_244DA7544((uint64_t)&v26, v6[3], (void *)a3);
}

void *sub_244DAA048(uint64_t a1, char a2)
{
  char v3 = a2;
  if (*(void *)(a1 + 24)) {
    return sub_244DAA08C((unint64_t *)(a1 + 96), a1, &v3);
  }
  else {
    return 0;
  }
}

void *sub_244DAA08C(unint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_244CC4D84(0x28uLL);
  int v7 = v6;
  if (v6)
  {
    sub_244DAA12C((uint64_t)v6, a2, *a3);
    unint64_t v8 = sub_244CC4D84(0x18uLL);
    if (v8)
    {
      *unint64_t v8 = v7;
      v8[1] = a1 + 2;
      _OWORD v8[2] = 0;
      _OWORD v8[2] = a1[4];
      *(void *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9) {
        a1[1] = v10;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_244DAA12C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F957570;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v7 = &unk_26F957878;
  char v17 = a3;
  uint64_t v18 = 0;
  int v19 = 0xFFFF;
  char v20 = 0;
  sub_244DA64D0(&v7, *(void *)(a2 + 24), (uint64_t)v6);
  if (!v6[0])
  {
    *(_WORD *)(a1 + 18) = WORD2(v18);
    uint64_t v4 = HIWORD(v18);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_244DAA228(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL sub_244DAA230(uint64_t a1, _DWORD *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    return 0;
  }
  char v4 = *(unsigned char *)(a1 + 16);
  __int16 v5 = *(_WORD *)(a1 + 18);
  int v21 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0;
  __int16 v18 = v5;
  uint64_t v19 = 0;
  char v20 = 1;
  long long v8 = &unk_26F957A68;
  char v22 = v4;
  int v23 = 0;
  sub_244DA64D0(&v8, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)v7);
  BOOL result = v7[0] == 0;
  if (!v7[0])
  {
    ++*(void *)(a1 + 24);
    *(_WORD *)(a1 + 18) = WORD1(v19);
    *a2 = v23;
  }
  return result;
}

void sub_244DAA350(uint64_t a1)
{
}

void sub_244DAA360(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    char v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    __int16 v5 = v4;
    *char v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void sub_244DAA410(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v17 = 1525;
    goto LABEL_11;
  }
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  uint64_t v54 = 0;
  long long v45 = &unk_26F957878;
  char v55 = a2;
  uint64_t v56 = 0;
  int v57 = 0xFFFF;
  char v58 = 0;
  uint64_t v30 = 0;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  uint64_t v20 = 0;
  int v21 = &unk_26F957B30;
  char v31 = 0;
  int v32 = -1;
  char v33 = 1;
  int v34 = 0x10000;
  long long v19 = 0uLL;
  sub_244DA64D0(&v45, v7, (uint64_t)&v19);
  if (v19 && v19 != 216)
  {
    *(_OWORD *)a5 = v19;
    a5[2] = v20;
    return;
  }
  int v11 = sub_244DAA704((uint64_t)&v21, *(void *)(a1 + 24), (uint64_t)&v45, *((unsigned __int16 *)a4 + 36));
  int v34 = *((_DWORD *)a4 + 18);
  long long v12 = &v35;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v13 = a4[3];
  uint64_t v35 = *a4;
  *((void *)&v38 + 1) = v13;
  uint64_t v14 = a4[6];
  uint64_t v44 = 0;
  *((void *)&v41 + 1) = v14;
  if (!HIBYTE(v34))
  {
LABEL_8:
    if (v11)
    {
      sub_244DA6774((uint64_t)&v21, *(void *)(a1 + 24), a5);
      return;
    }
    if (HIWORD(v57) < *(unsigned __int16 *)(a1 + 10))
    {
      LOWORD(v32) = v57;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      sub_244DA6774((uint64_t)&v21, *(void *)(a1 + 24), a5);
      if (!*(_DWORD *)a5)
      {
        ++HIWORD(v57);
        LOWORD(v57) = *((_WORD *)a4 + 36);
        sub_244DA7544((uint64_t)&v45, *(void *)(a1 + 24), a5);
      }
      return;
    }
    *(_DWORD *)a5 = 31;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v17 = 1560;
LABEL_11:
    *((_DWORD *)a5 + 4) = v17;
    return;
  }
  unint64_t v15 = 0;
  uint64_t v16 = (uint64_t)(a4 + 1);
  while (1)
  {
    sub_2446C1098(v18, v16, 16);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_244CE75D4(v18, a3, (uint64_t)v12, a5);
    if (*(_DWORD *)a5) {
      break;
    }
    ++v15;
    v16 += 24;
    v12 += 6;
    if (v15 >= *((unsigned __int8 *)a4 + 75)) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_244DAA704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a3 + 154);
  *(unsigned char *)(a1 + 150) = 1;
  if (*(_WORD *)(a3 + 156))
  {
    int v8 = 1;
    do
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0])) {
        break;
      }
      uint64_t v9 = *(unsigned __int16 *)(a1 + 152);
      if (v9 == a4) {
        return 1;
      }
      *(unsigned char *)(a1 + 150) = 0;
      *(_WORD *)(a1 + 148) = v9;
      *(_WORD *)(a1 + 152) = *(_WORD *)(a1 + 146);
    }
    while (*(unsigned __int16 *)(a3 + 156) > (unsigned __int16)v8++);
  }
  return 0;
}

uint64_t sub_244DAA7DC@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(result + 24);
  if (v7)
  {
    uint64_t v10 = result;
    long long v40 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    long long v37 = 0u;
    long long v36 = 0u;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    uint64_t v41 = 0;
    int v32 = &unk_26F957878;
    char v42 = a2;
    uint64_t v43 = 0;
    int v44 = 0xFFFF;
    char v45 = 0;
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    unint64_t v15 = &unk_26F957B30;
    char v25 = 0;
    int v26 = -1;
    char v27 = 1;
    int v28 = 0x10000;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    BOOL result = (uint64_t)sub_244DA64D0(&v32, v7, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      BOOL result = sub_244DAA704((uint64_t)&v15, *(void *)(v10 + 24), (uint64_t)&v32, a3);
      if (result)
      {
        for (uint64_t i = 0; i != 72; i += 24)
        {
          *(void *)(a4 + i) = 0;
          BOOL result = sub_244CED784(a4 + i + 8, 16);
        }
        int v12 = 0;
        *(_DWORD *)(a4 + 72) = v28;
        uint64_t v13 = v30;
        *(void *)a4 = v29;
        *(void *)(a4 + 24) = v13;
        *(void *)(a4 + 48) = v31;
        int v14 = 1591;
      }
      else
      {
        int v14 = 1579;
        int v12 = 216;
      }
      *(_DWORD *)a5 = v12;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a5 + 4) = v14;
    }
  }
  else
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    *((_DWORD *)a5 + 4) = 1573;
  }
  return result;
}

uint64_t sub_244DAA9C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1596;
LABEL_17:
    *(_DWORD *)(a4 + 16) = v11;
    return result;
  }
  int v8 = (uint64_t *)result;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  uint64_t v52 = 0;
  uint64_t v43 = &unk_26F957878;
  char v53 = a2;
  uint64_t v54 = 0;
  int v55 = 0xFFFF;
  char v56 = 0;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  uint64_t v38 = 0;
  uint64_t v29 = &unk_26F957B30;
  char v39 = 0;
  int v40 = -1;
  char v41 = 1;
  int v42 = 0x10000;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  BOOL result = (uint64_t)sub_244DA64D0(&v43, v6, a4);
  if (*(_DWORD *)a4) {
    return result;
  }
  BOOL result = sub_244DAA704((uint64_t)&v29, v8[3], (uint64_t)&v43, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 216;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1602;
    goto LABEL_17;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  BOOL result = sub_244DA7450((uint64_t)&v29, v8[3], (void *)a4);
  if (*(_DWORD *)a4) {
    return result;
  }
  if (v41)
  {
    LOWORD(v55) = v40;
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v22 = 0;
    uint64_t v13 = &unk_26F957B30;
    LOBYTE(v23) = a2;
    LODWORD(v24) = -1;
    BYTE4(v24) = 1;
    __int16 v25 = 1;
    HIWORD(v24) = HIWORD(v40);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    BOOL result = (uint64_t)sub_244DA64D0(&v13, v8[3], a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    LOWORD(v24) = v40;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    BOOL result = sub_244DA6774((uint64_t)&v13, v8[3], (void *)a4);
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (HIWORD(v55)) {
    --HIWORD(v55);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  BOOL result = (uint64_t)sub_244DA7544((uint64_t)&v43, v8[3], (void *)a4);
  if (!*(_DWORD *)a4)
  {
    int v26 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v22 = 0;
    __int16 v23 = 1;
    uint64_t v24 = 0;
    LOBYTE(v25) = 1;
    uint64_t v13 = &unk_26F957A68;
    char v27 = 0;
    int v28 = 0;
    unsigned int v9 = HIWORD(v54);
    if (HIWORD(v54))
    {
      unsigned int v10 = 0;
      do
      {
        sub_244DA64D0(&v43, v8[3], (uint64_t)v12);
        BOOL result = sub_244DAAD5C((uint64_t)&v13, v8[3], (uint64_t)&v43, a3);
        if (result == -1) {
          break;
        }
        BOOL result = (uint64_t)(*(void *(**)(void *__return_ptr, uint64_t *, uint64_t, uint64_t))(*v8 + 144))(v12, v8, a2, result);
        ++v10;
      }
      while (v10 < v9);
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v11 = 1641;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_244DAAD5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 150);
  *(_WORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 146) = 0;
  *(unsigned char *)(a1 + 154) = 1;
  LOWORD(v5) = *(_WORD *)(a3 + 152);
  if ((_WORD)v5)
  {
    while (1)
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0]))
      {
        LOWORD(v5) = *(_WORD *)(a1 + 152);
        goto LABEL_9;
      }
      if (*(unsigned __int16 *)(a1 + 164) == a4) {
        return *(unsigned __int16 *)(a1 + 146);
      }
      unsigned int v9 = *(unsigned __int16 *)(a1 + 144);
      unsigned int v5 = *(unsigned __int16 *)(a1 + 152);
      if (v9 > v5) {
        LOWORD(v5) = *(_WORD *)(a1 + 144);
      }
      *(_WORD *)(a1 + 152) = v5;
      *(unsigned char *)(a1 + 154) = 0;
      *(_WORD *)(a1 + 150) = v9;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 148);
      unsigned __int16 v10 = *(_WORD *)(a1 + 146) + 1;
      *(_WORD *)(a1 + 146) = v10;
      if (*(unsigned __int16 *)(a3 + 152) <= v10) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    *(_WORD *)(a1 + 144) = v5 + 1;
    return -1;
  }
}

void *sub_244DAAE5C(uint64_t a1, char a2)
{
  char v3 = a2;
  if (*(void *)(a1 + 24)) {
    return sub_244DAAEA0((unint64_t *)(a1 + 208), a1, &v3);
  }
  else {
    return 0;
  }
}

void *sub_244DAAEA0(unint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_244CC4D84(0x28uLL);
  uint64_t v7 = v6;
  if (v6)
  {
    sub_244DAAF40((uint64_t)v6, a2, *a3);
    int v8 = sub_244CC4D84(0x18uLL);
    if (v8)
    {
      *int v8 = v7;
      v8[1] = a1 + 2;
      _OWORD v8[2] = 0;
      _OWORD v8[2] = a1[4];
      *(void *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9) {
        a1[1] = v10;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_244DAAF40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F9575A8;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v7 = &unk_26F957878;
  char v17 = a3;
  uint64_t v18 = 0;
  int v19 = 0xFFFF;
  char v20 = 0;
  sub_244DA64D0(&v7, *(void *)(a2 + 24), (uint64_t)v6);
  if (!v6[0])
  {
    *(_WORD *)(a1 + 18) = v19;
    uint64_t v4 = HIWORD(v19);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_244DAB03C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL sub_244DAB044(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    return 0;
  }
  char v4 = *(unsigned char *)(a1 + 16);
  __int16 v5 = *(_WORD *)(a1 + 18);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  long long v11 = &unk_26F957B30;
  char v21 = v4;
  int v22 = -1;
  char v23 = 1;
  HIWORD(v24) = 1;
  LOWORD(v24) = v5;
  sub_244DA64D0(&v11, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)v10);
  BOOL v6 = v10[0] == 0;
  if (!v10[0])
  {
    uint64_t v7 = 0;
    ++*(void *)(a1 + 24);
    *(_WORD *)(a1 + 18) = v22;
    do
    {
      *(void *)(a2 + v7) = 0;
      sub_244CED784(a2 + v7 + 8, 16);
      v7 += 24;
    }
    while (v7 != 72);
    *(_DWORD *)(a2 + 72) = v24;
    uint64_t v8 = v26;
    *(void *)a2 = v25;
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 48) = v27;
  }
  return v6;
}

void sub_244DAB19C(uint64_t a1)
{
}

void sub_244DAB1AC(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    char v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    __int16 v5 = v4;
    *char v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

double sub_244DAB25C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  uint64_t v41 = 0;
  long long v32 = &unk_26F957878;
  char v42 = a2;
  uint64_t v43 = 0;
  int v44 = 0xFFFF;
  char v45 = 0;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  sub_244DA64D0(&v32, a1[3], (uint64_t)&v15);
  if (v15 != 216 && v15)
  {
    double result = *(double *)&v15;
    *(_OWORD *)a3 = v15;
    a3[2] = v16;
  }
  else
  {
    uint64_t v6 = HIWORD(v43);
    if (HIWORD(v43))
    {
      unint64_t v7 = 0;
      uint64_t v8 = -1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t *, uint64_t, uint64_t))(*a1 + 144))(&v17, a1, a2, v6 + v8);
        ++v7;
        uint64_t v6 = HIWORD(v43);
        --v8;
      }
      while (v7 < HIWORD(v43));
    }
    uint64_t v9 = WORD1(v43);
    if (WORD1(v43))
    {
      unint64_t v10 = 0;
      uint64_t v11 = -1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t *, uint64_t, uint64_t))(*a1 + 72))(&v17, a1, a2, v9 + v11);
        ++v10;
        uint64_t v9 = WORD1(v43);
        --v11;
      }
      while (v10 < WORD1(v43));
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v26 = 0;
    long long v17 = &unk_26F957B30;
    char v27 = a2;
    int v28 = -1;
    char v29 = 1;
    __int16 v31 = 1;
    unsigned __int16 v30 = v44;
    if (HIWORD(v44))
    {
      unint64_t v12 = 0;
      do
      {
        sub_244DA64D0(&v17, a1[3], (uint64_t)v14);
        if (LODWORD(v14[0])) {
          break;
        }
        (*(void (**)(void *__return_ptr, uint64_t *, uint64_t, void))(*a1 + 184))(v14, a1, a2, v30);
        unsigned __int16 v30 = v28;
        ++v12;
      }
      while (v12 < HIWORD(v44));
    }
    sub_244DAB4FC((uint64_t)&v32, a1[3], a3);
  }
  return result;
}

void *sub_244DAB4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double result = sub_244DAE4A4(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    return (void *)sub_244DA7450(a1, a2, a3);
  }
  return result;
}

char *sub_244DAB56C(uint64_t a1, char a2, int a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  uint64_t v50 = 0;
  uint64_t v41 = &unk_26F957878;
  char v51 = a2;
  uint64_t v52 = 0;
  int v53 = 0xFFFF;
  char v54 = 0;
  sub_244DA64D0(&v41, *(void *)(a1 + 24), (uint64_t)&v9);
  double result = 0;
  if (!v9)
  {
    int v38 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v34 = 0;
    __int16 v35 = WORD2(v52);
    uint64_t v36 = 0;
    char v37 = 1;
    long long v25 = &unk_26F957A68;
    char v39 = v51;
    int v40 = 0;
    if (HIWORD(v52))
    {
      for (unsigned int i = 0; i < HIWORD(v52); ++i)
      {
        sub_244DA64D0(&v25, *(void *)(a1 + 24), (uint64_t)&v9);
        if (v9) {
          return 0;
        }
        if (HIWORD(v40)) {
          BOOL v7 = (unsigned __int16)v40 == a3;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7)
        {
          uint64_t v18 = 0;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v12 = 0u;
          long long v13 = 0u;
          long long v10 = 0u;
          long long v11 = 0u;
          uint64_t v9 = &unk_26F957B30;
          char v19 = 0;
          int v20 = -1;
          char v21 = 1;
          int v22 = 0x10000;
          if (!sub_244DAA704((uint64_t)&v9, *(void *)(a1 + 24), (uint64_t)&v41, HIWORD(v40))) {
            return 0;
          }
          if (HIBYTE(v22) - 1 < 2)
          {
            uint64_t v8 = (__int16 *)&v23;
            return sub_244DAB7CC((unint64_t *)(a1 + 320), a1, (uint64_t)(v8 + 5), v8 + 4, (uint64_t)(v8 + 13));
          }
          if (HIBYTE(v22) == 3)
          {
            uint64_t v8 = (__int16 *)&v24;
            return sub_244DAB7CC((unint64_t *)(a1 + 320), a1, (uint64_t)(v8 + 5), v8 + 4, (uint64_t)(v8 + 13));
          }
        }
        __int16 v35 = WORD1(v36);
      }
    }
    return 0;
  }
  return result;
}

char *sub_244DAB7CC(unint64_t *a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5)
{
  long long v10 = (char *)sub_244CC4D84(0x38uLL);
  long long v11 = v10;
  if (v10)
  {
    __int16 v12 = *a4;
    *(void *)long long v10 = &unk_26F957738;
    *((void *)v10 + 1) = a2;
    *((_WORD *)v10 + 8) = 0;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    sub_244DAC678((uint64_t)v10, a3, v12, a5);
    long long v13 = sub_244CC4D84(0x18uLL);
    if (v13)
    {
      *long long v13 = v11;
      v13[1] = a1 + 2;
      v13[2] = 0;
      v13[2] = a1[4];
      *(void *)(a1[4] + 8) = v13;
      a1[4] = (unint64_t)v13;
      unint64_t v14 = a1[1];
      unint64_t v15 = *a1 + 1;
      *a1 = v15;
      if (v15 > v14) {
        a1[1] = v15;
      }
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

uint64_t sub_244DAB8AC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  uint64_t v52 = 0;
  long long v43 = &unk_26F957878;
  char v53 = a2;
  uint64_t v54 = 0;
  int v55 = 0xFFFF;
  char v56 = 0;
  uint64_t result = (uint64_t)sub_244DA64D0(&v43, *(void *)(a1 + 24), (uint64_t)&v13);
  if (v13)
  {
    *(_DWORD *)a4 = 216;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    int v8 = 1775;
  }
  else
  {
    int v40 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v36 = 0;
    __int16 v37 = WORD2(v54);
    uint64_t v38 = 0;
    char v39 = 1;
    v27[18] = &unk_26F957A68;
    char v41 = v53;
    int v42 = 0;
    uint64_t v22 = 0;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = &unk_26F957B30;
    char v23 = 0;
    int v24 = -1;
    char v25 = 1;
    int v26 = 0x10000;
    uint64_t result = sub_244DAA704((uint64_t)&v13, *(void *)(a1 + 24), (uint64_t)&v43, 0);
    if (result)
    {
      if ((_WORD)v26)
      {
        int v8 = 1784;
        int v9 = 172;
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        *(_WORD *)(a3 + 72) = 0;
        *(_WORD *)(a3 + 74) = HIWORD(v26);
        __int16 v12 = v27;
        do
        {
          *(void *)(a3 + v10) = 0;
          uint64_t result = sub_244CED784(a3 + v10 + 8, 16);
          if (v11 < HIBYTE(v26))
          {
            *(void *)(a3 + v10) = *v12;
            *(_OWORD *)(a3 + v10 + 8) = *(_OWORD *)((char *)v12 + 10);
          }
          ++v11;
          v10 += 24;
          v12 += 6;
        }
        while (v10 != 72);
        int v9 = 0;
        int v8 = 1800;
      }
    }
    else
    {
      int v8 = 1781;
      int v9 = 216;
    }
    *(_DWORD *)a4 = v9;
    *(void *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

void sub_244DABB30(void *a1)
{
  uint64_t v2 = *(void *)(a1[1] + 32);
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 40))(v2, a1 + 3);
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 40))(v2, a1 + 5);
  uint64_t v3 = a1[1] + 320;

  sub_244DABBCC(v3, a1);
}

void sub_244DABBCC(uint64_t a1, void *a2)
{
  if (a2)
  {
    char v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    __int16 v5 = v4;
    *char v4 = 0;
    (*(void (**)(void *))(*(void *)a2 + 8))(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void sub_244DABC7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char **a5@<X5>, uint64_t a6@<X8>)
{
}

void sub_244DABCC8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, char **a5@<X5>, uint64_t a6@<X8>)
{
}

void sub_244DABD14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_244DABD34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t a5@<X8>)
{
}

void *sub_244DABD54(uint64_t a1, __int16 a2)
{
  __int16 v3 = a2;
  if (*(void *)(a1 + 24)) {
    return sub_244DABD98((unint64_t *)(a1 + 264), a1, &v3);
  }
  else {
    return 0;
  }
}

void *sub_244DABD98(unint64_t *a1, uint64_t a2, __int16 *a3)
{
  uint64_t v6 = sub_244CC4D84(0x60uLL);
  BOOL v7 = v6;
  if (v6)
  {
    sub_244DABE38((uint64_t)v6, a2, *a3);
    int v8 = sub_244CC4D84(0x18uLL);
    if (v8)
    {
      *int v8 = v7;
      v8[1] = a1 + 2;
      _OWORD v8[2] = 0;
      _OWORD v8[2] = a1[4];
      *(void *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9) {
        a1[1] = v10;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_244DABE38(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F9575E0;
  *(void *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 16) = a3;
  *(void *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = &unk_26F957738;
  *(void *)(a1 + 48) = a2;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  __int16 v10 = 0;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  BOOL v7 = &unk_26F957BB0;
  memset(v6, 0, sizeof(v6));
  sub_244DABF58(&v7, *(void *)(a2 + 24), (uint64_t)v6);
  if (!LODWORD(v6[0]))
  {
    char v4 = v9[24];
    *(unsigned char *)(a1 + 18) = v9[24];
    *(unsigned char *)(a1 + 19) = v4;
    *(_WORD *)(a1 + 20) = 0;
    *(_WORD *)(a1 + 22) = v10;
    *(_WORD *)(a1 + 26) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void *sub_244DABF58@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/lib/support/PersistentData.h";
    int v6 = 62;
    goto LABEL_6;
  }
  __int16 v5 = result;
  char v13 = 0;
  memset(v12, 0, sizeof(v12));
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t result = (void *)(*(uint64_t (**)(void *, _OWORD *))(*result + 16))(result, v12);
  if (*(_DWORD *)a3) {
    return result;
  }
  (*(void (**)(void *))(*v5 + 40))(v5);
  unsigned __int16 v11 = 32;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  uint64_t result = (*(void *(**)(long long *__return_ptr, uint64_t, _OWORD *, void *, unsigned __int16 *))(*(void *)a2 + 16))(&v9, a2, v12, v5 + 2, &v11);
  if (v9 == 160)
  {
    *(_DWORD *)a3 = 216;
    *(void *)(a3 + 8) = "src/lib/support/PersistentData.h";
    int v6 = 75;
LABEL_6:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  *(_OWORD *)a3 = v9;
  *(void *)(a3 + 16) = v10;
  if (!*(_DWORD *)a3)
  {
    sub_244CB3988((uint64_t)v8);
    double v7 = sub_244CB39B8((uint64_t)v8, (uint64_t)(v5 + 2), v11);
    return (void *)(*(uint64_t (**)(void *, unsigned char *, double))(*v5 + 32))(v5, v8, v7);
  }
  return result;
}

uint64_t sub_244DAC128(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  char v1 = *(unsigned char *)(a1 + 18);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v50 = 0;
  char v41 = &unk_26F957878;
  char v51 = v1;
  uint64_t v52 = 0;
  int v53 = 0xFFFF;
  char v54 = 0;
  if (!*(_WORD *)(a1 + 22)) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    sub_244DA64D0(&v41, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v10);
    if (v10) {
      break;
    }
    int v38 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v34 = 0;
    __int16 v35 = WORD2(v52);
    uint64_t v36 = 0;
    char v37 = 1;
    char v25 = &unk_26F957A68;
    char v39 = v51;
    int v40 = 0;
    if (HIWORD(v52))
    {
      unsigned int v5 = 0;
      do
      {
        sub_244DA64D0(&v25, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v10);
        if (v10) {
          break;
        }
        uint64_t v19 = 0;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        uint64_t v10 = &unk_26F957B30;
        char v20 = 0;
        int v21 = -1;
        char v22 = 1;
        int v23 = 0x10000;
        if (!sub_244DAA704((uint64_t)&v10, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v41, HIWORD(v40)))break; {
        uint64_t v6 = HIBYTE(v23);
        }
        if (HIBYTE(v23))
        {
          double v7 = (unsigned __int16 *)&v24;
          do
          {
            int v8 = *v7;
            v7 += 24;
            if (v8 == *(unsigned __int16 *)(a1 + 16)) {
              ++v4;
            }
            --v6;
          }
          while (v6);
        }
        ++v5;
        __int16 v35 = WORD1(v36);
      }
      while (v5 < HIWORD(v52));
    }
    ++v3;
    char v51 = v54;
  }
  while (v3 < *(unsigned __int16 *)(a1 + 22));
  return v4;
}

uint64_t sub_244DAC384(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1 + 40;
  long long v4 = 0uLL;
  while (*(unsigned __int16 *)(a1 + 20) < *(unsigned __int16 *)(a1 + 22))
  {
    char v5 = *(unsigned char *)(a1 + 19);
    long long v46 = v4;
    long long v47 = v4;
    long long v48 = v4;
    long long v49 = v4;
    long long v50 = v4;
    long long v51 = v4;
    long long v52 = v4;
    long long v53 = v4;
    uint64_t v54 = 0;
    long long v45 = &unk_26F957878;
    char v55 = v5;
    uint64_t v56 = 0;
    int v57 = 0xFFFF;
    char v58 = 0;
    sub_244DA64D0(&v45, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v14);
    if (v14) {
      break;
    }
    if (*(unsigned __int16 *)(a1 + 26) >= HIWORD(v56))
    {
      *(unsigned char *)(a1 + 19) = v58;
      ++*(_WORD *)(a1 + 20);
      *(unsigned char *)(a1 + 32) = 1;
      *(_WORD *)(a1 + 26) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 32))
      {
        __int16 v6 = WORD2(v56);
        *(_WORD *)(a1 + 24) = WORD2(v56);
        *(unsigned char *)(a1 + 32) = 0;
      }
      else
      {
        __int16 v6 = *(_WORD *)(a1 + 24);
      }
      char v8 = *(unsigned char *)(a1 + 19);
      int v42 = 0;
      long long v30 = 0uLL;
      long long v31 = 0uLL;
      long long v32 = 0uLL;
      long long v33 = 0uLL;
      long long v34 = 0uLL;
      long long v35 = 0uLL;
      long long v36 = 0uLL;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      __int16 v39 = v6;
      uint64_t v40 = 0;
      int v7 = 1;
      char v41 = 1;
      long long v29 = &unk_26F957A68;
      char v43 = v8;
      int v44 = 0;
      sub_244DA64D0(&v29, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v14);
      if (v14) {
        goto LABEL_15;
      }
      uint64_t v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v14 = &unk_26F957B30;
      char v24 = 0;
      int v25 = -1;
      char v26 = 1;
      int v27 = 0x10000;
      if (!sub_244DAA704((uint64_t)&v14, *(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v45, HIWORD(v44)))
      {
LABEL_15:
        char v2 = 0;
        goto LABEL_16;
      }
      unsigned int v9 = *(unsigned __int16 *)(a1 + 28);
      if (v9 < HIBYTE(v27))
      {
        *(_WORD *)(a1 + 28) = v9 + 1;
        int v10 = *(unsigned __int16 *)&v28[48 * v9];
        if (v10 == *(unsigned __int16 *)(a1 + 16))
        {
          sub_244DAC678(v12, (uint64_t)&v28[48 * v9 + 2], v10, (uint64_t)&v28[48 * v9 + 18]);
          *(unsigned char *)(a2 + 2) = v55;
          *(_WORD *)a2 = v44;
          *(unsigned char *)(a2 + 3) = BYTE2(v27);
          *(void *)(a2 + 8) = v12;
          char v2 = 1;
        }
        else
        {
          int v7 = 0;
        }
        goto LABEL_16;
      }
      *(_WORD *)(a1 + 24) = WORD1(v40);
      ++*(_WORD *)(a1 + 26);
      *(_WORD *)(a1 + 28) = 0;
    }
    int v7 = 2;
LABEL_16:
    long long v4 = 0uLL;
    if (v7 == 1) {
      return v2 & 1;
    }
  }
  char v2 = 0;
  return v2 & 1;
}

void *sub_244DAC678(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v9 = a1 + 24;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a1 + 40);
  *(_WORD *)(a1 + 16) = a3;
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v12, v10, a2, v9);
  return (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v12, v10, a4, a1 + 40);
}

void sub_244DAC7A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 80);
  uint64_t v3 = *(void *)(a1 + 8) + 264;

  sub_244DAC83C(v3, (void (***)(void))a1);
}

void sub_244DAC83C(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    long long v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    char v5 = v4;
    *long long v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244DAC8EC()
{
  return qword_268EC3190;
}

uint64_t sub_244DAC8F8(uint64_t result)
{
  qword_268EC3190 = result;
  return result;
}

void sub_244DAC908(uint64_t *a1)
{
  sub_2446D82A0(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DAC940(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16);
}

void *sub_244DAC948(void *a1)
{
  *a1 = &unk_26F957738;
  uint64_t v2 = a1 + 3;
  sub_244CED784(a1 + 5, 16);
  sub_244CED784(v2, 16);
  return a1;
}

void sub_244DAC9A4(void *a1)
{
  *a1 = &unk_26F957738;
  char v1 = a1 + 3;
  sub_244CED784(a1 + 5, 16);
  sub_244CED784(v1, 16);

  JUMPOUT(0x245695FA0);
}

void sub_244DACA20()
{
}

void sub_244DACA34()
{
}

void *sub_244DACA48(void *a1)
{
  *a1 = &unk_26F9575E0;
  a1[5] = &unk_26F957738;
  sub_244CED784(a1 + 10, 16);
  sub_244CED784(a1 + 8, 16);
  return a1;
}

void sub_244DACAC0(void *a1)
{
  *a1 = &unk_26F9575E0;
  a1[5] = &unk_26F957738;
  sub_244CED784(a1 + 10, 16);
  sub_244CED784(a1 + 8, 16);

  JUMPOUT(0x245695FA0);
}

void sub_244DACB58()
{
}

uint64_t sub_244DACB6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 144))
  {
    uint64_t result = sub_244CA2E90("f/%x/g", (uint64_t)v8, *(unsigned __int8 *)(result + 144));
    int v5 = 0;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 32) = v9;
    int v7 = 88;
  }
  else
  {
    int v7 = 86;
    int v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244DACC1C(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB7594(a1, 256, 21, &v4, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CB6904();
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_244CB6904();
        if (!*(_DWORD *)a2)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          sub_244CB6904();
          if (!*(_DWORD *)a2)
          {
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            sub_244CB6904();
            if (!*(_DWORD *)a2)
            {
              *a2 = 0;
              a2[1] = 0;
              a2[2] = 0;
              sub_244CB6904();
              if (!*(_DWORD *)a2)
              {
                *a2 = 0;
                a2[1] = 0;
                a2[2] = 0;
                sub_244CB6904();
                if (!*(_DWORD *)a2) {
                  sub_244CB7708((uint64_t)a1, v4, (uint64_t)a2);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_244DACD88(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_244CB3B68(a2) == 21)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB3F40(a2, (_WORD *)(a1 + 146), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB54B4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB3F40(a2, (_WORD *)(a1 + 148), (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_244CB54B4(a2, 3, a3);
                if (!*(_DWORD *)a3)
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  sub_244CB3F40(a2, (_WORD *)(a1 + 150), (uint64_t)a3);
                  if (!*(_DWORD *)a3)
                  {
                    *a3 = 0;
                    a3[1] = 0;
                    a3[2] = 0;
                    sub_244CB54B4(a2, 4, a3);
                    if (!*(_DWORD *)a3)
                    {
                      *a3 = 0;
                      a3[1] = 0;
                      a3[2] = 0;
                      sub_244CB3F40(a2, (_WORD *)(a1 + 152), (uint64_t)a3);
                      if (!*(_DWORD *)a3)
                      {
                        *a3 = 0;
                        a3[1] = 0;
                        a3[2] = 0;
                        sub_244CB54B4(a2, 5, a3);
                        if (!*(_DWORD *)a3)
                        {
                          *a3 = 0;
                          a3[1] = 0;
                          a3[2] = 0;
                          sub_244CB3F40(a2, (_WORD *)(a1 + 154), (uint64_t)a3);
                          if (!*(_DWORD *)a3)
                          {
                            *a3 = 0;
                            a3[1] = 0;
                            a3[2] = 0;
                            sub_244CB54B4(a2, 6, a3);
                            if (!*(_DWORD *)a3)
                            {
                              *a3 = 0;
                              a3[1] = 0;
                              a3[2] = 0;
                              sub_244CB3F40(a2, (_WORD *)(a1 + 156), (uint64_t)a3);
                              if (!*(_DWORD *)a3)
                              {
                                *a3 = 0;
                                a3[1] = 0;
                                a3[2] = 0;
                                sub_244CB54B4(a2, 7, a3);
                                if (!*(_DWORD *)a3)
                                {
                                  *a3 = 0;
                                  a3[1] = 0;
                                  a3[2] = 0;
                                  sub_244CB3E8C(a2, (unsigned char *)(a1 + 158), (uint64_t)a3);
                                  if (!*(_DWORD *)a3) {
                                    sub_244CB4D00(a2, v6, (uint64_t)a3);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 118;
    }
  }
}

uint64_t sub_244DAD000(uint64_t result)
{
  *(_DWORD *)(result + 146) = 0;
  *(_DWORD *)(result + 154) = 0xFFFF;
  *(unsigned char *)(result + 158) = 0;
  return result;
}

uint64_t sub_244DAD014(void *a1)
{
  return (*(uint64_t (**)(void *, void))(*a1 + 56))(a1, a1[1]);
}

uint64_t sub_244DAD038(void *a1)
{
  return (*(uint64_t (**)(void *, void))(*a1 + 72))(a1, a1[1]);
}

void sub_244DAD05C()
{
}

uint64_t sub_244DAD070@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 163))
  {
    uint64_t result = sub_244CA2E90("f/%x/g/%x", (uint64_t)v8, *(unsigned __int8 *)(result + 163), *(unsigned __int16 *)(result + 144));
    int v5 = 0;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 32) = v9;
    int v7 = 286;
  }
  else
  {
    int v7 = 284;
    int v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244DAD124(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  int v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB7594(a2, 256, 21, &v7, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    unsigned int v6 = strnlen((const char *)(a1 + 146), 0x10uLL);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CB6CB4(a2, (char *)(a1 + 146), v6, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB6904();
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB6904();
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB6904();
          if (!*(_DWORD *)a3) {
            sub_244CB7708((uint64_t)a2, v7, (uint64_t)a3);
          }
        }
      }
    }
  }
}

void sub_244DAD238(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_244CB3B68(a2) == 21)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB46D0(a2, (char *)(a1 + 146), 0x11uLL, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *(unsigned char *)(a1 + 146 + strnlen((const char *)(a1 + 146), 0x10uLL)) = 0;
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            sub_244CB54B4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB3F40(a2, (_WORD *)(a1 + 164), (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_244CB54B4(a2, 3, a3);
                if (!*(_DWORD *)a3)
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  sub_244CB3F40(a2, (_WORD *)(a1 + 166), (uint64_t)a3);
                  if (!*(_DWORD *)a3)
                  {
                    *a3 = 0;
                    a3[1] = 0;
                    a3[2] = 0;
                    sub_244CB54B4(a2, 4, a3);
                    if (!*(_DWORD *)a3)
                    {
                      *a3 = 0;
                      a3[1] = 0;
                      a3[2] = 0;
                      sub_244CB3F40(a2, (_WORD *)(a1 + 170), (uint64_t)a3);
                      if (!*(_DWORD *)a3) {
                        sub_244CB4D00(a2, v6, (uint64_t)a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 313;
    }
  }
}

uint64_t sub_244DAD408(uint64_t result)
{
  *(unsigned char *)(result + 146) = 0;
  *(_DWORD *)(result + 164) = 0xFFFF;
  *(_WORD *)(result + 170) = 0;
  return result;
}

void *sub_244DAD41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned __int16 v32 = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v29 = &unk_26F957BB0;
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  uint64_t result = sub_244DABF58(&v29, a2, (uint64_t)&v13);
  if (v13 == 216)
  {
    v31[24] = *(unsigned char *)(a1 + 144);
    __int16 v7 = 1;
LABEL_13:
    unsigned __int16 v32 = v7;
    return (void *)sub_244DAD610((uint64_t)&v29, a2, a3);
  }
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3) {
    return result;
  }
  char v8 = v31[24];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 0;
  long long v15 = &unk_26F957878;
  char v25 = v31[24];
  uint64_t v26 = 0;
  int v27 = 0xFFFF;
  char v28 = 0;
  unsigned __int16 v9 = v32;
  if (!v32)
  {
LABEL_12:
    *(unsigned char *)(a1 + 158) = v8;
    v31[24] = *(unsigned char *)(a1 + 144);
    __int16 v7 = v9 + 1;
    goto LABEL_13;
  }
  unint64_t v10 = 0;
  while (1)
  {
    uint64_t result = sub_244DA64D0(&v15, a2, (uint64_t)&v11);
    long long v13 = v11;
    uint64_t v14 = v12;
    if (v11)
    {
      unsigned __int16 v9 = v32;
LABEL_11:
      char v8 = v31[24];
      goto LABEL_12;
    }
    if (v25 == *(unsigned char *)(a1 + 144)) {
      break;
    }
    char v25 = v28;
    ++v10;
    unsigned __int16 v9 = v32;
    if (v10 >= v32) {
      goto LABEL_11;
    }
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
  *((_DWORD *)a3 + 4) = 174;
  return result;
}

uint64_t sub_244DAD610@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v5 = result;
    char v9 = 0;
    memset(v8, 0, sizeof(v8));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)result + 16))(result, v8);
    if (!*(_DWORD *)a3)
    {
      sub_244CB62B8((uint64_t)v7);
      double v6 = sub_244CB62E0((uint64_t)v7, v5 + 16, 0x20uLL);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, double))(*(void *)v5 + 24))(v5, v7, v6);
      if (!*(_DWORD *)a3) {
        return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, void))(*(void *)a2 + 24))(a2, v8, v5 + 16, v7[22]);
      }
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 43;
  }
  return result;
}

void sub_244DAD774()
{
}

uint64_t sub_244DAD788@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 148))
  {
    uint64_t result = sub_244CA2E90("f/%x/g/%x/e/%x", (uint64_t)v8, *(unsigned __int8 *)(result + 148), *(unsigned __int16 *)(result + 144), *(unsigned __int16 *)(result + 146));
    int v5 = 0;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 32) = v9;
    int v7 = 561;
  }
  else
  {
    int v7 = 559;
    int v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244DAD844(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB7594(a1, 256, 21, &v4, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CB6904();
      if (!*(_DWORD *)a2) {
        sub_244CB7708((uint64_t)a1, v4, (uint64_t)a2);
      }
    }
  }
}

void sub_244DAD8FC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_244CB3B68(a2) == 21)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB3F40(a2, (_WORD *)(a1 + 146), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB54B4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB3F40(a2, (_WORD *)(a1 + 152), (uint64_t)a3);
              if (!*(_DWORD *)a3) {
                sub_244CB4D00(a2, v6, (uint64_t)a3);
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 579;
    }
  }
}

uint64_t sub_244DADA34(uint64_t result)
{
  *(_WORD *)(result + 152) = -1;
  return result;
}

void sub_244DADA40()
{
}

uint64_t sub_244DADA54@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 160))
  {
    uint64_t result = sub_244CA2E90("f/%x/gk/%x", (uint64_t)v8, *(unsigned __int8 *)(result + 160), *(unsigned __int16 *)(result + 144));
    int v5 = 0;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 32) = v9;
    int v7 = 410;
  }
  else
  {
    int v7 = 408;
    int v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244DADB08(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB7594(a1, 256, 21, &v4, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CB6904();
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_244CB6904();
        if (!*(_DWORD *)a2) {
          sub_244CB7708((uint64_t)a1, v4, (uint64_t)a2);
        }
      }
    }
  }
}

void sub_244DADBE4(_WORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_244CB3B68(a2) == 21)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB3F40(a2, a1 + 81, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB54B4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB3F40(a2, a1 + 82, (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_244CB54B4(a2, 3, a3);
                if (!*(_DWORD *)a3)
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  sub_244CB3F40(a2, a1 + 74, (uint64_t)a3);
                  if (!*(_DWORD *)a3) {
                    sub_244CB4D00(a2, v6, (uint64_t)a3);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 429;
    }
  }
}

void sub_244DADD5C()
{
}

uint64_t sub_244DADD70@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 144))
  {
    uint64_t v4 = *(unsigned __int16 *)(result + 152);
    if (v4 == 0xFFFF)
    {
      int v8 = 653;
      int v6 = 133;
    }
    else
    {
      uint64_t result = sub_244CA2E90("f/%x/k/%x", (uint64_t)v9, *(unsigned __int8 *)(result + 144), v4);
      int v6 = 0;
      long long v7 = v9[1];
      *(_OWORD *)a2 = v9[0];
      *(_OWORD *)(a2 + 16) = v7;
      *(unsigned char *)(a2 + 32) = v10;
      int v8 = 655;
    }
  }
  else
  {
    int v8 = 652;
    int v6 = 113;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_244DADE3C(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB7594(a2, 256, 21, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB6904();
      if (!*(_DWORD *)a3)
      {
        int v8 = 0;
        int v9 = 0;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        sub_244CB7594(a2, 3, 22, &v9, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          uint64_t v6 = 0;
          for (unsigned int i = 0; ; ++i)
          {
            *(_OWORD *)uint64_t v11 = 0uLL;
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            sub_244CB7594(a2, 256, 21, &v8, (uint64_t)a3);
            if (*(_DWORD *)a3) {
              break;
            }
            if (i < *(unsigned __int8 *)(a1 + 155)) {
              *(_OWORD *)uint64_t v11 = *(_OWORD *)(a1 + v6 + 170);
            }
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB68CC();
            if (*(_DWORD *)a3) {
              break;
            }
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB6904();
            if (*(_DWORD *)a3) {
              break;
            }
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB6ADC(a2, v11, 0x10uLL, (uint64_t)a3);
            if (*(_DWORD *)a3) {
              break;
            }
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB7708((uint64_t)a2, v8, (uint64_t)a3);
            if (*(_DWORD *)a3) {
              break;
            }
            v6 += 48;
            if (v6 == 144)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB7708((uint64_t)a2, v9, (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_244CB6904();
                if (!*(_DWORD *)a3) {
                  sub_244CB7708((uint64_t)a2, v10, (uint64_t)a3);
                }
              }
              return;
            }
          }
        }
      }
    }
  }
}

void sub_244DAE0A0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 256, a3);
  if (*(_DWORD *)a3) {
    return;
  }
  if (sub_244CB3B68(a2) != 21)
  {
    *(_DWORD *)a3 = 172;
    a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 730;
LABEL_30:
    *((_DWORD *)a3 + 4) = v9;
    return;
  }
  int v14 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB4C90(a2, &v14, (uint64_t)a3);
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 1, a3);
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2446D1AAC(a2, (unsigned char *)(a1 + 154), a3);
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 2, a3);
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB3E8C(a2, (unsigned char *)(a1 + 155), (uint64_t)a3);
  if (*(_DWORD *)a3) {
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 3, a3);
  if (*(_DWORD *)a3) {
    return;
  }
  if (sub_244CB3B68(a2) != 22)
  {
    *(_DWORD *)a3 = 172;
    a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v9 = 745;
    goto LABEL_30;
  }
  int v12 = 0;
  int v13 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB4C90(a2, &v13, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t v6 = (void *)(a1 + 160);
    while (1)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB54B4(a2, 256, a3);
      if (*(_DWORD *)a3) {
        break;
      }
      if (sub_244CB3B68(a2) != 21)
      {
        *(_DWORD *)a3 = 172;
        a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
        int v9 = 752;
        goto LABEL_30;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB4C90(a2, &v12, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB54B4(a2, 4, a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB3EFC(a2, v6, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB54B4(a2, 5, a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      long long v7 = v6 + 1;
      a3[2] = 0;
      sub_244CB3F40(a2, v7, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      long long v11 = 0uLL;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB54B4(a2, 6, a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB40C8(a2, &v11, a3);
      if (*(_DWORD *)a3) {
        return;
      }
      if (*((void *)&v11 + 1) != 16)
      {
        *(_DWORD *)a3 = 172;
        a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
        int v9 = 765;
        goto LABEL_30;
      }
      *(_OWORD *)((char *)v7 + 2) = *(_OWORD *)v11;
      uint64_t v8 = (uint64_t)v7 + 18;
      v10[0] = v8;
      v10[1] = 16;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CE7514((uint64_t *)&v11, v10, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB4D00(a2, v12, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      uint64_t v6 = (void *)(v8 + 22);
      if (v6 == (void *)(a1 + 304))
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB4D00(a2, v13, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB54B4(a2, 7, a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB3F40(a2, (_WORD *)(a1 + 146), (uint64_t)a3);
            if (!*(_DWORD *)a3) {
              sub_244CB4D00(a2, v14, (uint64_t)a3);
            }
          }
        }
        return;
      }
    }
  }
}

double sub_244DAE478(uint64_t a1)
{
  *(_WORD *)(a1 + 154) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_WORD *)(a1 + 146) = -1;
  return result;
}

void *sub_244DAE4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned __int16 v38 = 0;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  long long v35 = &unk_26F957BB0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  double result = sub_244DABF58(&v35, a2, (uint64_t)&v11);
  if (v11 && v11 != 216)
  {
    *(_OWORD *)a3 = v11;
    a3[2] = v12;
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v33 = 0;
    uint64_t v24 = &unk_26F957878;
    v34[0] = v37[24];
    *(void *)&v34[2] = 0;
    *(_DWORD *)&v34[10] = 0xFFFF;
    v34[14] = 0;
    uint64_t v22 = 0;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    int v13 = &unk_26F957878;
    v23[0] = 0;
    *(void *)&void v23[2] = 0;
    *(_DWORD *)&v23[10] = 0xFFFF;
    v23[14] = 0;
    if (v38)
    {
      for (unint64_t i = 0; i < v38; ++i)
      {
        double result = sub_244DA64D0(&v24, a2, (uint64_t)&v9);
        long long v11 = v9;
        uint64_t v12 = v10;
        if (v9) {
          break;
        }
        if (v34[0] == *(unsigned __int8 *)(a1 + 144))
        {
          if (i)
          {
            v23[14] = *(unsigned char *)(a1 + 158);
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            double result = sub_244DA7544((uint64_t)&v13, a2, a3);
            if (*(_DWORD *)a3) {
              return result;
            }
          }
          else
          {
            v37[24] = *(unsigned char *)(a1 + 158);
          }
          if (v38)
          {
            --v38;
            return (void *)sub_244DAD610((uint64_t)&v35, a2, a3);
          }
          *(_DWORD *)a3 = 172;
          a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
          int v8 = 217;
          goto LABEL_9;
        }
        long long v20 = v31;
        long long v21 = v32;
        uint64_t v22 = v33;
        long long v16 = v27;
        long long v17 = v28;
        long long v18 = v29;
        long long v19 = v30;
        long long v14 = v25;
        long long v15 = v26;
        *(void *)long long v23 = *(void *)v34;
        *(void *)&v23[7] = *(void *)&v34[7];
        v34[0] = v34[14];
      }
    }
    *(_DWORD *)a3 = 216;
    a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
    int v8 = 225;
LABEL_9:
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void sub_244DAE774()
{
}

double sub_244DAE788@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result = *(double *)"g/gfl";
  *(_OWORD *)a1 = *(_OWORD *)"g/gfl";
  *(_OWORD *)(a1 + 16) = unk_244EC33C7;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a2 + 16) = 42;
  return result;
}

void sub_244DAE7B8(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB7594(a1, 256, 21, &v4, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CB6904();
      if (!*(_DWORD *)a2) {
        sub_244CB7708((uint64_t)a1, v4, (uint64_t)a2);
      }
    }
  }
}

void sub_244DAE870(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB54B4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_244CB3B68(a2) == 21)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB3E8C(a2, (unsigned char *)(a1 + 48), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB54B4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB3F40(a2, (_WORD *)(a1 + 50), (uint64_t)a3);
              if (!*(_DWORD *)a3) {
                sub_244CB4D00(a2, v6, (uint64_t)a3);
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/lib/support/CommonPersistentData.h";
      *((_DWORD *)a3 + 4) = 61;
    }
  }
}

uint64_t sub_244DAE9A8(uint64_t result)
{
  *(unsigned char *)(result + 48) = 0;
  *(_WORD *)(result + 50) = 0;
  return result;
}

uint64_t sub_244DAE9B4(void *a1)
{
  return (*(uint64_t (**)(void *, void))(*a1 + 56))(a1, a1[1]);
}

uint64_t sub_244DAE9D8(void *a1)
{
  return (*(uint64_t (**)(void *, void))(*a1 + 72))(a1, a1[1]);
}

uint64_t sub_244DAE9FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2)
  {
    char v6 = 0;
    memset(v5, 0, sizeof(v5));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    double result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)result + 16))(result, v5);
    if (!*(_DWORD *)a3) {
      return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 32))(a2, v5);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 86;
  }
  return result;
}

uint64_t sub_244DAEAF0(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DAEB0C(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DAEB28(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DAEB44(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DAEB60(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DAEB7C(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_244DAEB98(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)std::string __str = 0;
  uint64_t v16 = 0;
  __int16 v18 = 0;
  uint64_t v17 = 0;
  unsigned __int16 v10 = 0;
  __int16 v9 = 0;
  __int16 v8 = 0;
  unsigned __int8 v7 = 0;
  sub_244CC7DBC(a3, &v10, (unsigned char *)&v9 + 1, &v9, (unsigned char *)&v8 + 1, &v8, &v7);
  snprintf(__str, 0x1AuLL, "%04u-%02u-%02uT%02u:%02u:%02u", v10, HIBYTE(v9), v9, HIBYTE(v8), v8, v7);
  int v4 = sub_244CC8484(0x17u, "TimeService");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      int v5 = a2;
    }
    else {
      int v5 = "(null)";
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v12 = v5;
    __int16 v13 = 2080;
    long long v14 = __str;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "%s%s", buf, 0x16u);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    return sub_244CC4DE0(0x17u, 2);
  }
  return result;
}

void sub_244DAED0C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned __int16 v8 = 18;
  int v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v5 = *a1;
  v9[0] = *(_OWORD *)"g/lkgt";
  v9[1] = unk_244EC33E9;
  char v10 = 0;
  (*(void (**)(void *__return_ptr))(*(void *)v5 + 16))(a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CB3988((uint64_t)v9);
    sub_244CB39B8((uint64_t)v9, (uint64_t)v11, v8);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB55E4((uint64_t)v9, 21, 256, a3);
    if (!*(_DWORD *)a3)
    {
      int v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB4C90((uint64_t)v9, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB54B4((uint64_t)v9, 0, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB3FB0((uint64_t)v9, &v7, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a2 = v7;
            *(_DWORD *)a3 = 0;
            a3[1] = "src/credentials/LastKnownGoodTime.cpp";
            *((_DWORD *)a3 + 4) = 69;
          }
        }
      }
    }
  }
}

void sub_244DAEE8C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v9);
  sub_244CB62E0((uint64_t)v9, (uint64_t)v13, 0x12uLL);
  int v8 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB7594(v9, 256, 21, &v8, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB694C();
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CB7708((uint64_t)v9, v8, (uint64_t)a2);
      if (!*(_DWORD *)a2)
      {
        unsigned __int16 v4 = v10;
        if (HIWORD(v10))
        {
          int v7 = 82;
          int v6 = 25;
        }
        else
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          uint64_t v5 = *a1;
          v11[0] = *(_OWORD *)"g/lkgt";
          v11[1] = unk_244EC33E9;
          char v12 = 0;
          (*(void (**)(uint64_t, _OWORD *, unsigned char *, void))(*(void *)v5 + 24))(v5, v11, v13, v4);
          if (*(_DWORD *)a2) {
            return;
          }
          int v6 = 0;
          int v7 = 85;
        }
        *(_DWORD *)a2 = v6;
        a2[1] = "src/credentials/LastKnownGoodTime.cpp";
        *((_DWORD *)a2 + 4) = v7;
      }
    }
  }
}

void sub_244DAF008(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = xmmword_2651A9580;
  *(void *)(a3 + 16) = 90;
  *(void *)a1 = a2;
  uint64_t v5 = sub_244D6A5F4();
  ((void (*)(uint64_t (***)(), unsigned int *))(*v5)[5])(v5, &v13);
  if (*(_DWORD *)a3) {
    goto LABEL_2;
  }
  sub_244DAED0C((uint64_t *)a1, &v12, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = v15;
  if (!*(_DWORD *)a3)
  {
    unsigned int v11 = v12;
    uint64_t v10 = sub_244DAEB98(v8, "Last Known Good Time: ", v12);
    if (v11 >= v13)
    {
      *(unsigned char *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v11;
      return;
    }
LABEL_14:
    sub_244DAEB98(v10, "Setting Last Known Good Time to firmware build time ", v13);
    *(unsigned char *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 12) = v13;
    sub_244DAEE8C((uint64_t *)a1, buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(void *)(a3 + 16) = v15;
    if (!*(_DWORD *)a3) {
      return;
    }
    goto LABEL_2;
  }
  if (*(_DWORD *)a3 == 160)
  {
    __int16 v9 = sub_244CC8484(0x17u, "TimeService");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Last Known Good Time: [unknown]", buf, 2u);
    }
    uint64_t v10 = sub_244CC4E58(2u);
    if (v10) {
      uint64_t v10 = sub_244CC4DE0(0x17u, 2);
    }
    goto LABEL_14;
  }
LABEL_2:
  int v6 = sub_244CC8484(0x17u, "TimeService");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a3 + 16);
    int v7 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Failed to init Last Known Good Time: %s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a3 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0x17u, 1);
  }
}

uint64_t sub_244DAF280@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_2651A9598;
  *(void *)(a4 + 16) = 133;
  int v7 = *(unsigned __int8 *)(a1 + 8);
  int v6 = (unsigned char *)(a1 + 8);
  if (!v7)
  {
    int v13 = 134;
    int v14 = 3;
LABEL_9:
    *(_DWORD *)a4 = v14;
    *(void *)(a4 + 8) = "src/credentials/LastKnownGoodTime.cpp";
    *(_DWORD *)(a4 + 16) = v13;
    goto LABEL_10;
  }
  uint64_t v10 = (unsigned int *)sub_244D6C580(v6);
  uint64_t v11 = sub_244DAEB98((uint64_t)v10, "Last Known Good Time: ", *v10);
  sub_244DAEB98(v11, "New proposed Last Known Good Time: ", a2);
  unsigned int v12 = sub_244D6A5F4();
  ((void (*)(uint64_t (***)(), unsigned int *))(*v12)[5])(v12, &v19);
  if (!*(_DWORD *)a4)
  {
    if (v19 > a2)
    {
      int v13 = 141;
LABEL_8:
      int v14 = 47;
      goto LABEL_9;
    }
    if (a2 < a3)
    {
      int v13 = 143;
      goto LABEL_8;
    }
    sub_244DAEE8C((uint64_t *)a1, buf);
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(void *)(a4 + 16) = v21;
    if (!*(_DWORD *)a4)
    {
      *(unsigned char *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = a2;
      return sub_244DAEB98(v18, "Updating Last Known Good Time to ", a2);
    }
  }
LABEL_10:
  uint64_t v15 = sub_244CC8484(0x17u, "TimeService");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a4;
    uint64_t v21 = *(void *)(a4 + 16);
    uint64_t v16 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Failed to update Last Known Good Time: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)long long buf = *(_OWORD *)a4;
    uint64_t v21 = *(void *)(a4 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(0x17u, 1);
  }
  return result;
}

uint64_t sub_244DAF4AC@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A95B0;
  *(void *)(a3 + 16) = 172;
  uint64_t v3 = (unsigned char *)(result + 8);
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v5 = result;
    int v6 = (unsigned int *)sub_244D6C580((unsigned char *)(result + 8));
    uint64_t v7 = sub_244DAEB98((uint64_t)v6, "Last Known Good Time: ", *v6);
    sub_244DAEB98(v7, "New proposed Last Known Good Time: ", a2);
    uint64_t v8 = sub_244D6C580(v3);
    if (*(_DWORD *)v8 >= a2)
    {
      __int16 v9 = sub_244CC8484(0x17u, "TimeService");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Retaining current Last Known Good Time", v10, 2u);
      }
      uint64_t result = sub_244CC4E58(2u);
      if (result) {
        return sub_244CC4DE0(0x17u, 2);
      }
    }
    else
    {
      uint64_t result = sub_244DAEB98((uint64_t)v8, "Updating pending Last Known Good Time to ", a2);
      *(unsigned char *)(v5 + 8) = 1;
      *(_DWORD *)(v5 + 12) = a2;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/credentials/LastKnownGoodTime.cpp";
    *(_DWORD *)(a3 + 16) = 173;
  }
  return result;
}

void sub_244DAF5EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(_OWORD *)a2 = xmmword_2651A95C8;
  a2[2] = 191;
  uint64_t v3 = (unsigned char *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = (unsigned int *)sub_244D6C580((unsigned char *)(a1 + 8));
    sub_244DAEB98((uint64_t)v5, "Committing Last Known Good Time to storage: ", *v5);
    sub_244D6C580(v3);
    sub_244DAEE8C((uint64_t *)a1, a2);
    if (!*(_DWORD *)a2) {
      return;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/credentials/LastKnownGoodTime.cpp";
    *((_DWORD *)a2 + 4) = 192;
  }
  int v6 = sub_244CC8484(0x17u, "TimeService");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v9 = a2[2];
    uint64_t v7 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Failed to commit Last Known Good Time: %s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v9 = a2[2];
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0x17u, 1);
  }
}

uint64_t sub_244DAF778@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_OWORD *)a2 = xmmword_2651A95E0;
  a2[2] = 205;
  uint64_t v3 = (unsigned char *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = (unsigned int *)sub_244D6C580((unsigned char *)(a1 + 8));
    sub_244DAEB98((uint64_t)v5, "Pending Last Known Good Time: ", *v5);
    sub_244DAED0C((uint64_t *)a1, &v12, a2);
    if (!*(_DWORD *)a2)
    {
      unsigned int v7 = v12;
      sub_244DAEB98(v6, "Previous Last Known Good Time: ", v12);
      *(unsigned char *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v7;
      uint64_t v8 = sub_244CC8484(0x17u, "TimeService");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Reverted Last Known Good Time to previous value", buf, 2u);
      }
      uint64_t result = sub_244CC4E58(2u);
      if (result) {
        return sub_244CC4DE0(0x17u, 2);
      }
      return result;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/credentials/LastKnownGoodTime.cpp";
    *((_DWORD *)a2 + 4) = 207;
  }
  uint64_t v10 = sub_244CC8484(0x17u, "TimeService");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v14 = a2[2];
    uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Clearing Last Known Good Time; failed to load a previous value from persistence: %s",
      buf,
      0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v14 = a2[2];
    sub_244CB7B34((const char **)buf, 1);
    uint64_t result = sub_244CC4DE0(0x17u, 1);
  }
  *uint64_t v3 = 0;
  return result;
}

uint64_t sub_244DAF988(uint64_t a1)
{
  if (*(void *)(a1 + 8) && *(void *)(a1 + 24)) {
    return (*(unsigned __int8 *)(a1 + 72) >> 1) & 1;
  }
  else {
    return 0;
  }
}

BOOL sub_244DAF9AC(uint64_t a1)
{
  return *(void *)(a1 + 8) && *(void *)(a1 + 56) && (*(unsigned char *)(a1 + 72) & 5) != 0;
}

BOOL sub_244DAF9D8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((a2 - 1) > 0xFDu || v4 == 0) {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) == a2)
  {
    if (a3 == 2)
    {
      if (!*(void *)(a1 + 56)) {
        return sub_244DAFA50(v4, a2, a3);
      }
      return 1;
    }
    if (a3 != 1)
    {
      if (!a3)
      {
        if (!*(void *)(a1 + 24)) {
          return sub_244DAFA50(v4, a2, a3);
        }
        return 1;
      }
      return 0;
    }
    if (*(void *)(a1 + 40)) {
      return 1;
    }
    if (*(void *)(a1 + 56)) {
      return 0;
    }
  }
  return sub_244DAFA50(v4, a2, a3);
}

BOOL sub_244DAFA50(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  double v4 = sub_244DB0C04(a2, a3, (uint64_t)v9);
  if (!v9[0]) {
    return 0;
  }
  __int16 v7 = 400;
  memset(v6, 0, sizeof(v6));
  (*(void (**)(void *__return_ptr, uint64_t, unsigned char *, unsigned char *, __int16 *, double))(*(void *)a1 + 16))(v6, a1, v9, v8, &v7, v4);
  return LODWORD(v6[0]) == 0;
}

uint64_t sub_244DAFB18@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    int v9 = 213;
    goto LABEL_7;
  }
  if ((a2 - 1) > 0xFDu)
  {
    int v9 = 214;
    int v10 = 113;
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)(a3 + 8) - 1) > 0x18F)
  {
    int v9 = 215;
    int v10 = 47;
    goto LABEL_10;
  }
  if ((*(unsigned char *)(a1 + 72) & 7) != 0)
  {
    int v9 = 219;
LABEL_7:
    int v10 = 3;
    goto LABEL_10;
  }
  uint64_t result = sub_244DAFA50(result, a2, 0);
  if (result)
  {
    int v9 = 220;
    goto LABEL_7;
  }
  size_t v11 = *(void *)(a3 + 8);
  uint64_t result = (uint64_t)sub_244CC4D84(v11);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t result = (uint64_t)memcpy((void *)result, *(const void **)a3, *(void *)(a3 + 8));
    int v10 = 0;
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 16) = a2;
    *(unsigned char *)(a1 + 72) |= 2u;
    int v9 = 231;
  }
  else
  {
    int v9 = 223;
    int v10 = 11;
  }
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_244DAFC24(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 237;
    goto LABEL_11;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 238;
    goto LABEL_11;
  }
  if ((unint64_t)(*(void *)(a3 + 8) - 1) >= 0x190)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 239;
    goto LABEL_11;
  }
  if (*(void *)(a4 + 8) >= 0x191uLL)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 240;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(a1 + 72) & 5) != 0)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 244;
LABEL_11:
    *(_DWORD *)(a5 + 16) = v11;
    return;
  }
  if ((*(unsigned char *)(a1 + 72) & 2) == 0)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 247;
    goto LABEL_11;
  }
  if (*(unsigned __int8 *)(a1 + 16) != a2)
  {
    *(_DWORD *)a5 = 113;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 250;
    goto LABEL_11;
  }
  if (sub_244DAFA50(v7, a2, 2))
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 253;
    goto LABEL_11;
  }
  if (sub_244DAFA50(*(void *)(a1 + 8), a2, 1))
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 254;
    goto LABEL_11;
  }
  size_t v12 = *(void *)(a3 + 8);
  int v13 = sub_244CC4D84(v12);
  if (!v13)
  {
    *(_DWORD *)a5 = 11;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 257;
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  memcpy(v13, *(const void **)a3, *(void *)(a3 + 8));
  uint64_t v15 = *(void *)(a4 + 8);
  if (!v15)
  {
    uint64_t v17 = 0;
    goto LABEL_26;
  }
  uint64_t v16 = sub_244CC4D84(*(void *)(a4 + 8));
  if (v16)
  {
    uint64_t v17 = v16;
    memcpy(v16, *(const void **)a4, *(void *)(a4 + 8));
LABEL_26:
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 40) = v17;
    *(void *)(a1 + 48) = v15;
    *(unsigned char *)(a1 + 72) |= 1u;
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 272;
    goto LABEL_11;
  }
  *(_DWORD *)a5 = 11;
  *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  *(_DWORD *)(a5 + 16) = 263;

  j__free(v14);
}

void sub_244DAFEB4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 278;
    goto LABEL_11;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 279;
    goto LABEL_11;
  }
  if ((unint64_t)(*(void *)(a3 + 8) - 1) >= 0x190)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 280;
    goto LABEL_11;
  }
  if (*(void *)(a4 + 8) >= 0x191uLL)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 281;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(a1 + 72) & 3) != 0)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 285;
LABEL_11:
    *(_DWORD *)(a5 + 16) = v11;
    return;
  }
  if ((*(unsigned char *)(a1 + 72) & 4) != 0)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 288;
    goto LABEL_11;
  }
  if (!sub_244DAFA50(v7, a2, 0))
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 291;
    goto LABEL_11;
  }
  if (!sub_244DAFA50(*(void *)(a1 + 8), a2, 2))
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 294;
    goto LABEL_11;
  }
  size_t v12 = *(void *)(a3 + 8);
  int v13 = sub_244CC4D84(v12);
  if (!v13)
  {
    *(_DWORD *)a5 = 11;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 300;
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  memcpy(v13, *(const void **)a3, *(void *)(a3 + 8));
  uint64_t v15 = *(void *)(a4 + 8);
  if (!v15)
  {
    uint64_t v17 = 0;
    goto LABEL_24;
  }
  uint64_t v16 = sub_244CC4D84(*(void *)(a4 + 8));
  if (v16)
  {
    uint64_t v17 = v16;
    memcpy(v16, *(const void **)a4, *(void *)(a4 + 8));
LABEL_24:
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 40) = v17;
    *(void *)(a1 + 48) = v15;
    *(unsigned char *)(a1 + 16) = a2;
    *(unsigned char *)(a1 + 72) |= 4u;
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 319;
    goto LABEL_11;
  }
  *(_DWORD *)a5 = 11;
  *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  *(_DWORD *)(a5 + 16) = 306;

  j__free(v14);
}

double sub_244DB011C@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (!*(void *)(a1 + 8))
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v6 = 324;
    goto LABEL_12;
  }
  if ((a2 - 1) > 0xFD || *(unsigned __int8 *)(a1 + 16) != a2)
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v6 = 325;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5 || (*(unsigned char *)(a1 + 72) & 5) == 0)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v6 = 327;
    goto LABEL_12;
  }
  if (*(void *)(a1 + 24) && (*(unsigned char *)(a1 + 72) & 6) == 6)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v6 = 332;
LABEL_12:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  sub_2446C1098(v23, v5, *(void *)(a1 + 64));
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_244DB0394(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 2, v23, (uint64_t)&v21);
  sub_2446C1098(v20, *(void *)(a1 + 40), *(void *)(a1 + 48));
  memset(v19, 0, sizeof(v19));
  sub_244DB0394(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 1, v20, (uint64_t)v19);
  long long v17 = xmmword_2651A95F8;
  uint64_t v18 = 346;
  if (*(void *)(a1 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7)
    {
      if ((*(unsigned char *)(a1 + 72) & 2) != 0)
      {
        sub_2446C1098(&v15, v7, *(void *)(a1 + 32));
        sub_244DB0394(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 0, &v15, (uint64_t)&v17);
      }
    }
  }
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v8 = &v15;
  if (v21) {
    int v9 = &v15;
  }
  else {
    int v9 = (long long *)v19;
  }
  uint64_t v10 = *((void *)v9 + 2);
  long long v15 = *v9;
  uint64_t v16 = v10;
  if (!v15) {
    uint64_t v8 = &v17;
  }
  uint64_t v11 = *((void *)v8 + 2);
  long long v15 = *v8;
  uint64_t v16 = v11;
  if (!v15)
  {
    sub_2446D7DBC(a1);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v6 = 382;
    goto LABEL_12;
  }
  char v12 = *(unsigned char *)(a1 + 72);
  if (v12)
  {
    sub_244DB04F0(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 2, (uint64_t)v14);
    sub_244DB04F0(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 1, (uint64_t)v14);
    char v12 = *(unsigned char *)(a1 + 72);
  }
  if ((v12 & 2) != 0) {
    sub_244DB04F0(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 0, (uint64_t)v14);
  }
  double result = *(double *)&v15;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v16;
  return result;
}

double sub_244DB0394@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v9.n128_f64[0] = sub_244DB0C04(a2, a3, (uint64_t)v14);
  if (v14[0])
  {
    if (a3 != 1 || a4[1])
    {
      (*(void (**)(uint64_t, unsigned char *, void, void, __n128))(*(void *)a1 + 24))(a1, v14, *a4, (unsigned __int16)a4[1], v9);
      return v9.n128_f64[0];
    }
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned char *, double))(*(void *)a1 + 32))(&v12, a1, v14, v9.n128_f64[0]);
    if (v12 != 160 && v12)
    {
      v9.n128_u64[0] = v12;
      *(_OWORD *)a5 = v12;
      *(void *)(a5 + 16) = v13;
      return v9.n128_f64[0];
    }
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v10 = 127;
  }
  else
  {
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v10 = 118;
  }
  *(_DWORD *)(a5 + 16) = v10;
  return v9.n128_f64[0];
}

void sub_244DB04F0(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  double v6 = sub_244DB0C04(a2, a3, (uint64_t)v7);
  if (v7[0])
  {
    (*(void (**)(uint64_t, unsigned char *, double))(*(void *)a1 + 32))(a1, v7, v6);
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    *(_DWORD *)(a4 + 16) = 140;
  }
}

uint64_t sub_244DB05B0(uint64_t *a1, unsigned int a2)
{
  if ((a2 - 1) > 0xFDu) {
    return 0;
  }
  BOOL v4 = sub_244DAFA50(a1[1], a2, 0);
  BOOL v5 = 1;
  BOOL v6 = sub_244DAFA50(a1[1], a2, 1);
  BOOL v7 = sub_244DAFA50(a1[1], a2, 2);
  if (!a1[3] && !a1[5]) {
    BOOL v5 = a1[7] != 0;
  }
  return (v4 || v6) | v7 | v5;
}

__n128 sub_244DB0660@<Q0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>, __n128 result@<Q0>)
{
  if (!a1[1])
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 404;
LABEL_9:
    a3[1].n128_u32[0] = v11;
    return result;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    a3->n128_u32[0] = 113;
    a3->n128_u64[1] = (unint64_t)"src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 405;
    goto LABEL_9;
  }
  if ((sub_244DB05B0(a1, a2) & 1) == 0)
  {
    a3->n128_u32[0] = 113;
    a3->n128_u64[1] = (unint64_t)"src/credentials/PersistentStorageOpCertStore.cpp";
    int v11 = 408;
    goto LABEL_9;
  }
  sub_2446D7DBC((uint64_t)a1);
  __n128 v25 = 0uLL;
  unint64_t v26 = 0;
  sub_244DB04F0(a1[1], a2, 2, (uint64_t)&v25);
  unint64_t v22 = 0;
  long long v23 = 0;
  unint64_t v24 = 0;
  sub_244DB04F0(a1[1], a2, 1, (uint64_t)&v22);
  unint64_t v19 = 0;
  long long v20 = 0;
  unint64_t v21 = 0;
  sub_244DB04F0(a1[1], a2, 0, (uint64_t)&v19);
  unsigned int v9 = v25.n128_u32[0];
  if (v25.n128_u32[0] == 160)
  {
    unsigned int v9 = 0;
    LODWORD(v8) = 419;
    int v10 = "src/credentials/PersistentStorageOpCertStore.cpp";
  }
  else
  {
    unsigned int v7 = v25.n128_u32[1];
    int v10 = (const char *)v25.n128_u64[1];
    unint64_t v8 = v26;
  }
  v25.n128_u64[0] = __PAIR64__(v7, v9);
  v25.n128_u64[1] = (unint64_t)v10;
  unint64_t v26 = v8;
  unsigned int v12 = v22;
  if (v22 == 160)
  {
    unsigned int v12 = 0;
    LODWORD(v8) = 420;
    uint64_t v13 = "src/credentials/PersistentStorageOpCertStore.cpp";
  }
  else
  {
    unsigned int v7 = HIDWORD(v22);
    uint64_t v13 = v23;
    unint64_t v8 = v24;
  }
  unint64_t v22 = __PAIR64__(v7, v12);
  long long v23 = v13;
  unint64_t v24 = v8;
  unsigned int v14 = v19;
  if (v19 == 160)
  {
    unsigned int v14 = 0;
    LODWORD(v8) = 421;
    uint64_t v15 = "src/credentials/PersistentStorageOpCertStore.cpp";
  }
  else
  {
    unsigned int v7 = HIDWORD(v19);
    uint64_t v15 = v20;
    unint64_t v8 = v21;
  }
  unint64_t v19 = __PAIR64__(v7, v14);
  long long v20 = v15;
  unint64_t v21 = v8;
  *a3 = v25;
  a3[1].n128_u64[0] = v26;
  uint64_t v16 = &v22;
  if (a3->n128_u32[0]) {
    uint64_t v16 = (unint64_t *)a3;
  }
  unint64_t v17 = v16[2];
  *a3 = *(__n128 *)v16;
  a3[1].n128_u64[0] = v17;
  uint64_t v18 = (__n128 *)&v19;
  if (a3->n128_u32[0]) {
    uint64_t v18 = a3;
  }
  double result = *v18;
  a3[1].n128_u64[0] = v18[1].n128_u64[0];
  *a3 = result;
  return result;
}

uint64_t sub_244DB0874@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(result + 16) != a2)
  {
    *(_DWORD *)a5 = 216;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v9 = 436;
    goto LABEL_18;
  }
  if (a3 == 2)
  {
    uint64_t v7 = *(void *)(result + 56);
    if (v7)
    {
      uint64_t v8 = *(void *)(result + 64);
      goto LABEL_12;
    }
LABEL_14:
    *(_DWORD *)a5 = 216;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v9 = 467;
    goto LABEL_18;
  }
  if (a3 == 1)
  {
    uint64_t v7 = *(void *)(result + 40);
    if (v7)
    {
      uint64_t v8 = *(void *)(result + 48);
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  if (a3)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v9 = 464;
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(result + 24);
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(result + 32);
LABEL_12:
  double result = (uint64_t)sub_2446C1098(&__src, v7, v8);
  size_t v10 = __n;
  if (*(void *)(a4 + 8) >= __n)
  {
    memcpy(*(void **)a4, __src, __n);
    double result = sub_2446C1548(a4, v10);
    int v11 = 0;
    int v9 = 380;
  }
  else
  {
    int v9 = 375;
    int v11 = 25;
  }
  *(_DWORD *)a5 = v11;
  *(void *)(a5 + 8) = "src/lib/support/Span.h";
LABEL_18:
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

void sub_244DB09A4(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 8))
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v10 = 473;
    goto LABEL_9;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    int v10 = 474;
    goto LABEL_9;
  }
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  sub_244DB0874(a1, a2, a3, (uint64_t)a4, (uint64_t)&v15);
  if (v15 != 216)
  {
    *(_OWORD *)a5 = v15;
    uint64_t v11 = v16;
    goto LABEL_12;
  }
  if (a3 != 1 || !*(void *)(a1 + 56))
  {
    uint64_t v12 = *(void *)(a1 + 8);
    double v13 = sub_244DB0C04(a2, a3, (uint64_t)v20);
    if (!v20[0])
    {
      *(_DWORD *)a5 = 172;
      *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
      int v10 = 84;
      goto LABEL_9;
    }
    uint64_t v14 = *a4;
    unsigned __int16 v19 = a4[1];
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned char *, uint64_t, unsigned __int16 *, double))(*(void *)v12 + 16))(&v17, v12, v20, v14, &v19, v13);
    if (a3 == 1 && v17 == 160)
    {
      sub_2446C1548((uint64_t)a4, 0);
      *(_DWORD *)a5 = 216;
      *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
      int v10 = 95;
      goto LABEL_9;
    }
    if (v17 == 160)
    {
      LODWORD(v17) = 216;
      *((void *)&v17 + 1) = "src/credentials/PersistentStorageOpCertStore.cpp";
      LODWORD(v18) = 106;
    }
    else if (!v17)
    {
      sub_2446C1548((uint64_t)a4, v19);
    }
    *(_OWORD *)a5 = v17;
    uint64_t v11 = v18;
LABEL_12:
    *(void *)(a5 + 16) = v11;
    return;
  }
  *(_DWORD *)a5 = 216;
  *(void *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  int v10 = 490;
LABEL_9:
  *(_DWORD *)(a5 + 16) = v10;
}

void sub_244DB0BCC(uint64_t a1)
{
  sub_2446D7E60(a1);

  JUMPOUT(0x245695FA0);
}

double sub_244DB0C04@<D0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (a2 == 1)
    {
      sub_244CA2E90("f/%x/i", a3, a1);
    }
    else if (a2 == 2)
    {
      sub_244CA2E90("f/%x/n", a3, a1);
    }
    else
    {
      *(unsigned char *)(a3 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    sub_244CA2E90("f/%x/r", a3, a1);
  }
  return result;
}

void *sub_244DB0C80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  nullsub_13(v14, a1);
  uint64_t v11 = &v13;
  uint64_t v12 = 32;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244CEC440((uint64_t)v14, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_244CEC490((uint64_t)v14, *(char **)a2, *(void *)(a2 + 8), (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_244CEC490((uint64_t)v14, *(char **)a3, *(void *)(a3 + 8), (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        sub_244CEC580((uint64_t)v14, (uint64_t *)&v11, (uint64_t)a5);
        if (!*(_DWORD *)a5)
        {
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          sub_244CED0CC(a1, (uint64_t)v11, v12, a4, (uint64_t)a5);
          if (!*(_DWORD *)a5)
          {
            *(_DWORD *)a5 = 0;
            a5[1] = "src/credentials/attestation_verifier/DeviceAttestationVerifier.cpp";
            *((_DWORD *)a5 + 4) = 106;
          }
        }
      }
    }
  }
  return sub_244CEC40C(v14);
}

uint64_t sub_244DB0DC8()
{
  return qword_268EBE0E0;
}

uint64_t sub_244DB0DD4(uint64_t result)
{
  if (result) {
    qword_268EBE0E0 = result;
  }
  return result;
}

uint64_t sub_244DB0DE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  size_t v4 = *(void *)(a2 + 56);
  sub_244CB352C((void **)a1, v4);
  BOOL v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    memcpy(v5, *(const void **)(a2 + 48), *(void *)(a2 + 56));
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  size_t v6 = *(void *)(a2 + 72);
  sub_244CB352C((void **)(a1 + 16), v6);
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    *(void *)(a1 + 24) = v6;
    memcpy(v7, *(const void **)(a2 + 64), *(void *)(a2 + 72));
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 96);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 98);
  long long v20 = 0uLL;
  long long v19 = 0uLL;
  int v18 = 0;
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  *(_DWORD *)((char *)v15 + 7) = 0;
  sub_244CB3988((uint64_t)v16);
  v16[18] = 21;
  sub_244D9C03C(a2, &v20, &v19, &v18, (uint64_t)v17, (uint64_t)v13, (uint64_t)v12);
  if (!v12[0])
  {
    uint64_t v8 = *((void *)&v20 + 1);
    int v9 = sub_244CC4D84(*((size_t *)&v20 + 1));
    int v10 = v9;
    if (v9) {
      memcpy(v9, (const void *)v20, *((size_t *)&v20 + 1));
    }
    else {
      uint64_t v8 = 0;
    }
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v8;
  }
  return a1;
}

void sub_244DB0F08()
{
}

uint64_t sub_244DB0F20()
{
  return 0xFFFFLL;
}

uint64_t sub_244DB0F28()
{
  return 0xFFFFLL;
}

void sub_244DB0F30(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/credentials/attestation_verifier/DeviceAttestationVerifier.cpp";
  *(_DWORD *)(a1 + 16) = 70;
}

void sub_244DB0F50()
{
  uint64_t v0 = sub_244CC8484(0x1Bu, "Support");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    uint64_t v2 = "src/credentials/attestation_verifier/DeviceAttestationVerifier.cpp";
    __int16 v3 = 1024;
    int v4 = 78;
    __int16 v5 = 2080;
    size_t v6 = "false";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0x1Bu, 1);
  }
  abort();
}

uint64_t *sub_244DB1018()
{
  double result = (uint64_t *)qword_268EC3578;
  if (!qword_268EC3578)
  {
    double result = sub_244DB4984();
    qword_268EC3578 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_244DB1048(uint64_t result)
{
  qword_268EC3578 = result;
  return result;
}

double sub_244DB1054(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2)
  {
    uint64_t v15 = v2;
    uint64_t v16 = v3;
    int v6 = 2;
    for (uint64_t i = 1; i != a2; ++i)
    {
      long long v14 = *(_OWORD *)(a1 + 16 * i);
      int v8 = i;
      if ((int)i >= 1)
      {
        int v9 = (_OWORD *)(a1 + 16 * i);
        int v8 = i;
        int v10 = v6;
        while (1)
        {
          uint64_t v11 = (int *)(a1 + 16 * (v8 - 1));
          unsigned int v12 = sub_244DB1208((int *)&v14);
          if (v12 <= sub_244DB1208(v11)) {
            break;
          }
          *v9-- = *(_OWORD *)v11;
          --v10;
          --v8;
          if (v10 <= 1)
          {
            int v8 = 0;
            break;
          }
        }
      }
      double result = *(double *)&v14;
      *(_OWORD *)(a1 + 16 * v8) = v14;
      ++v6;
    }
  }
  return result;
}

double sub_244DB1130(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >= 2)
  {
    uint64_t v2 = *a1;
    int v3 = 2;
    for (uint64_t i = 1; i != v1; ++i)
    {
      long long v11 = *(_OWORD *)(v2 + 16 * i);
      int v5 = i;
      if ((int)i >= 1)
      {
        int v6 = (_OWORD *)(v2 + 16 * i);
        int v5 = i;
        int v7 = v3;
        while (1)
        {
          int v8 = (int *)(v2 + 16 * (v5 - 1));
          unsigned int v9 = sub_244DB1208((int *)&v11);
          if (v9 <= sub_244DB1208(v8)) {
            break;
          }
          *v6-- = *(_OWORD *)v8;
          --v7;
          --v5;
          if (v7 <= 1)
          {
            int v5 = 0;
            break;
          }
        }
      }
      double result = *(double *)&v11;
      *(_OWORD *)(v2 + 16 * v5) = v11;
      ++v3;
    }
  }
  return result;
}

uint64_t sub_244DB1208(int *a1)
{
  if (!sub_244CBED5C((uint64_t)a1)) {
    return 2;
  }
  if (sub_244CBEE00(a1)) {
    return 7;
  }
  if (!sub_244CC006C(a1)) {
    goto LABEL_10;
  }
  if (sub_244CBEDD8(a1)) {
    return 6;
  }
  if (sub_244CBEDEC(a1)) {
    return 5;
  }
LABEL_10:
  if (sub_244CBEDD8(a1)) {
    return 4;
  }
  if (sub_244CBEDEC(a1)) {
    return 3;
  }
  return 1;
}

uint64_t *sub_244DB12A8()
{
  double result = (uint64_t *)qword_268EC3580;
  if (!qword_268EC3580)
  {
    double result = sub_244DB49EC();
    qword_268EC3580 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_244DB12D8(uint64_t result)
{
  qword_268EC3580 = result;
  return result;
}

void *sub_244DB12E4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (result[1])
  {
    int v3 = 27;
    int v4 = 3;
LABEL_3:
    *(_DWORD *)a2 = v4;
    *(void *)(a2 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a2 + 16) = v3;
    return result;
  }
  int v5 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  double result = (*(void *(**)(void *__return_ptr))(*(void *)*result + 16))((void *)a2);
  if (!*(_DWORD *)a2)
  {
    double result = sub_244CC4D84(0x20uLL);
    if (result)
    {
      int v4 = 0;
      *(_OWORD *)double result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *(_DWORD *)double result = 1;
      int v3 = 33;
    }
    else
    {
      int v3 = 31;
      int v4 = 11;
    }
    v5[1] = result;
    goto LABEL_3;
  }
  return result;
}

void sub_244DB13A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    *(void *)(v1 + 8) = 0;
    sub_244DB13DC(*(int **)(a1 + 8));
    *(void *)(a1 + 8) = 0;
  }
}

void sub_244DB13DC(int *a1)
{
  if (!*a1) {
    sub_244E23488();
  }
  int v1 = *a1 - 1;
  *a1 = v1;
  if (!v1)
  {
    j__free(a1);
  }
}

uint64_t *sub_244DB1420@<X0>(uint64_t *result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (result[1])
  {
    uint64_t v3 = *result;
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 64))(v3, 2, &v4);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a3 + 16) = 46;
  }
  return result;
}

uint64_t *sub_244DB14A4@<X0>(uint64_t *result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (result[1])
  {
    uint64_t v3 = *result;
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 64))(v3, 3, &v4);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a3 + 16) = 53;
  }
  return result;
}

uint64_t *sub_244DB1528@<X0>(uint64_t *result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (result[1])
  {
    uint64_t v3 = *result;
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 64))(v3, 1, &v4);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a3 + 16) = 60;
  }
  return result;
}

void *sub_244DB15AC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (result[1]) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 72))();
  }
  *(_DWORD *)a2 = 3;
  *(void *)(a2 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
  *(_DWORD *)(a2 + 16) = 67;
  return result;
}

uint64_t sub_244DB15FC(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    unint64_t v2 = 0;
    while (*(unsigned char *)(*a1 + v2) != 43)
    {
      if (v1 == ++v2)
      {
        unint64_t v2 = a1[1];
        break;
      }
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  if (v2 >= v1 - 1)
  {
    return 0;
  }
  else
  {
    sub_2446C1098(v6, *a1 + v2 + 1, v1 + ~v2);
    unsigned int v3 = sub_244DB1760((uint64_t)v6, 0);
    if (v3 >= 0x10000) {
      return 0;
    }
    else {
      return (unsigned __int16)v3;
    }
  }
}

uint64_t sub_244DB1698(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = 0;
  if (v2)
  {
    while (*(unsigned char *)(v1 + v3) != 43)
    {
      if (v2 == ++v3)
      {
        uint64_t v3 = a1[1];
        break;
      }
    }
  }
  sub_2446C1098(v7, v1, v3);
  unsigned int v4 = sub_244DB1760((uint64_t)v7, 0);
  if (v4 >= 0x10000) {
    return 0;
  }
  else {
    return (unsigned __int16)v4;
  }
}

uint64_t sub_244DB1700(uint64_t a1)
{
  unsigned int v1 = sub_244DB1760(a1, 0);
  if (v1 >= 0x10000) {
    return 0;
  }
  else {
    return (unsigned __int16)v1;
  }
}

uint64_t sub_244DB172C(uint64_t a1)
{
  unsigned int v1 = sub_244DB1760(a1, 0);
  if (v1 >= 0x100) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_244DB1758(uint64_t a1)
{
  return sub_244DB1760(a1, 0);
}

uint64_t sub_244DB1760(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t v3 = *(void *)(a1 + 8);
  if (v3 > 0xA) {
    return a2;
  }
  if (v3 >= 2)
  {
    if (**(unsigned char **)a1 == 48) {
      return a2;
    }
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    memcpy(__dst, *(const void **)a1, v3);
    unsigned int v4 = &__dst[v3];
    goto LABEL_8;
  }
  unsigned int v4 = __dst;
LABEL_8:
  *unsigned int v4 = 0;
  int v8 = 0;
  unint64_t v5 = strtoul(__dst, &v8, 10);
  if (v8 > __dst)
  {
    if (*v8) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v5 == -1;
    }
    if (!v6)
    {
      if (HIDWORD(v5)) {
        return a2;
      }
      else {
        return v5;
      }
    }
  }
  return a2;
}

const void **sub_244DB1850(const void **result, unsigned char *__dst)
{
  if (__dst)
  {
    uint64_t v2 = __dst;
    unint64_t v3 = (unint64_t)result[1];
    if (v3)
    {
      if (v3 >= 0x20) {
        size_t v4 = 32;
      }
      else {
        size_t v4 = (size_t)result[1];
      }
      double result = (const void **)memcpy(__dst, *result, v4);
      v2 += v4;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t sub_244DB18A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = sub_244CC5A68(*(void *)a1, *(void *)(a1 + 8), a2, 50);
  *a3 = result;
  return result;
}

const void **sub_244DB18DC(const void **result, unsigned char *__dst)
{
  if (__dst)
  {
    uint64_t v2 = __dst;
    unint64_t v3 = (unint64_t)result[1];
    if (v3)
    {
      if (v3 >= 0x80) {
        size_t v4 = 128;
      }
      else {
        size_t v4 = (size_t)result[1];
      }
      uint64_t result = (const void **)memcpy(__dst, *result, v4);
      v2 += v4;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

BOOL sub_244DB1930(unsigned __int8 **a1)
{
  return a1[1] == (unsigned __int8 *)1 && **a1 == 49;
}

unint64_t sub_244DB1958(uint64_t a1)
{
  unsigned int v1 = sub_244DB1760(a1, 0xFFFFFFFFLL);
  LODWORD(v2) = v1 & 0xFFFFFF00;
  if (v1 <= 0x36EE80) {
    uint64_t v3 = v1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v1 <= 0x36EE80) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 | ((unint64_t)(v1 < 0x36EE81) << 32) | v3;
}

uint64_t sub_244DB19A8(uint64_t a1)
{
  unsigned int v1 = sub_244DB1760(a1, 0);
  if (v1 >= 0x10000) {
    int v2 = 0x10000;
  }
  else {
    int v2 = v1;
  }
  if ((_WORD)v2) {
    return v2 | 0x10000u;
  }
  else {
    return 0;
  }
}

uint64_t sub_244DB19DC(void *a1)
{
  int v2 = (const char *)&unk_244EC34D0;
  while (1)
  {
    uint64_t v3 = a1[1];
    if (v3 == strlen(v2 + 10)) {
      break;
    }
LABEL_8:
    v2 += 16;
    if (v2 == "_matter") {
      return 0;
    }
  }
  if (v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      int v5 = __tolower(*(unsigned __int8 *)(*a1 + v4));
      if (v5 != __tolower(v2[v4 + 10])) {
        break;
      }
      if ((unint64_t)++v4 >= a1[1]) {
        return *((unsigned __int8 *)v2 + 8);
      }
    }
    goto LABEL_8;
  }
  return *((unsigned __int8 *)v2 + 8);
}

uint64_t sub_244DB1A88(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_244DB19DC(a1);
  switch((int)result)
  {
    case 1:
      uint64_t result = sub_244DB1760(a2, 0);
      if (result >= 0x10000) {
        __int16 v7 = 0;
      }
      else {
        __int16 v7 = result;
      }
      *(_WORD *)(a3 + 180) = v7;
      break;
    case 2:
      *(_WORD *)(a3 + 182) = sub_244DB1698((uint64_t *)a2);
      uint64_t result = sub_244DB15FC((void *)a2);
      *(_WORD *)(a3 + 184) = result;
      break;
    case 3:
      uint64_t result = sub_244DB1760(a2, 0);
      if (result >= 0x100) {
        char v8 = 0;
      }
      else {
        char v8 = result;
      }
      *(unsigned char *)(a3 + 188) = v8;
      break;
    case 4:
      uint64_t result = sub_244DB1760(a2, 0);
      *(_DWORD *)(a3 + 176) = result;
      break;
    case 5:
      unsigned int v9 = (unsigned char *)(a3 + 257);
      unint64_t v10 = *(void *)(a2 + 8);
      if (!v10) {
        goto LABEL_21;
      }
      long long v11 = *(const void **)a2;
      BOOL v12 = v10 >= 0x20;
      uint64_t v13 = 32;
      goto LABEL_17;
    case 6:
      uint64_t result = sub_244CC5A68(*(void *)a2, *(void *)(a2 + 8), a3 + 190, 50);
      *(void *)(a3 + 168) = result;
      break;
    case 7:
      unsigned int v9 = (unsigned char *)(a3 + 290);
      unint64_t v10 = *(void *)(a2 + 8);
      if (v10)
      {
        long long v11 = *(const void **)a2;
        BOOL v12 = v10 >= 0x80;
        uint64_t v13 = 128;
LABEL_17:
        if (v12) {
          size_t v14 = v13;
        }
        else {
          size_t v14 = v10;
        }
        uint64_t result = (uint64_t)memcpy(v9, v11, v14);
        v9 += v14;
      }
LABEL_21:
      *unsigned int v9 = 0;
      break;
    case 8:
      uint64_t result = sub_244DB1760(a2, 0);
      if (result >= 0x10000) {
        __int16 v15 = 0;
      }
      else {
        __int16 v15 = result;
      }
      *(_WORD *)(a3 + 186) = v15;
      break;
    case 9:
      BOOL v16 = *(void *)(a2 + 8) == 1 && **(unsigned char **)a2 == 49;
      *(unsigned char *)(a3 + 189) = v16;
      break;
    default:
      uint64_t result = sub_244DB1C58(a1, (unsigned __int8 **)a2, a3);
      break;
  }
  return result;
}

uint64_t sub_244DB1C58(void *a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t result = sub_244DB19DC(a1);
  switch((int)result)
  {
    case 10:
      uint64_t result = sub_244DB1760((uint64_t)a2, 0xFFFFFFFFLL);
      int v6 = result & 0xFFFFFF00;
      int v7 = result;
      if (result > 0x36EE80)
      {
        int v7 = 0;
        int v6 = 0;
      }
      *(_DWORD *)(a3 + 144) = v6 | v7;
      *(unsigned char *)(a3 + 148) = result <= 0x36EE80;
      break;
    case 11:
      uint64_t result = sub_244DB1760((uint64_t)a2, 0xFFFFFFFFLL);
      int v8 = result & 0xFFFFFF00;
      int v9 = result;
      if (result > 0x36EE80)
      {
        int v9 = 0;
        int v8 = 0;
      }
      *(_DWORD *)(a3 + 152) = v8 | v9;
      *(unsigned char *)(a3 + 156) = result <= 0x36EE80;
      break;
    case 12:
      uint64_t result = sub_244DB1760((uint64_t)a2, 0);
      if (result >= 0x10000) {
        int v10 = 0x10000;
      }
      else {
        int v10 = result;
      }
      if ((_WORD)v10) {
        int v11 = v10 | 0x10000;
      }
      else {
        int v11 = 0;
      }
      *(_WORD *)(a3 + 160) = v11;
      *(unsigned char *)(a3 + 162) = BYTE2(v11);
      break;
    case 13:
      uint64_t result = sub_244DB1760((uint64_t)a2, 0);
      if (result >= 0x100) {
        char v12 = 0;
      }
      else {
        char v12 = result;
      }
      *(unsigned char *)(a3 + 139) = (v12 & 2) != 0;
      *(unsigned char *)(a3 + 140) = (v12 & 4) != 0;
      break;
    case 14:
      int v13 = **a2;
      BOOL v14 = a2[1] == (unsigned __int8 *)1 && (v13 & 0xFE) == 48;
      __int16 v15 = v14 && v13 == 49;
      if (v14) {
        __int16 v16 = 256;
      }
      else {
        __int16 v16 = 0;
      }
      *(_WORD *)(a3 + 141) = v16 | v15;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_244DB1DD4(uint64_t a1, uint64_t a2, long long **a3, long long *a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    if (*(_DWORD *)a4)
    {
      memset(buf, 0, sizeof(buf));
      long long v33 = *a4;
      uint64_t v34 = *((void *)a4 + 2);
      int v7 = *(uint64_t (**)(void))(*(void *)v5 + 24);
      return v7();
    }
    if (!a2)
    {
      memset(buf, 0, sizeof(buf));
      int v30 = 166;
      long long v31 = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
      int v32 = 335;
      int v7 = *(uint64_t (**)(void))(*(void *)v5 + 24);
      return v7();
    }
    long long v29 = 0uLL;
    sub_244D7E904((const char *)a2, &v29, (uint64_t)buf);
    *a4 = *(_OWORD *)buf;
    *((void *)a4 + 2) = v36;
    if (*(_DWORD *)a4)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      memset(buf, 0, sizeof(buf));
      long long v27 = *a4;
      uint64_t v28 = *((void *)a4 + 2);
      int v7 = *(uint64_t (**)(void))(*(void *)v12 + 24);
      return v7();
    }
    char v40 = 0;
    char v41 = 0;
    char v42 = 0;
    char v43 = 0;
    char v44 = 0;
    char v45 = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v13 = &v36;
    v39[0] = 0;
    *(_DWORD *)((char *)v39 + 3) = 0;
    for (uint64_t i = 16; i != 96; i += 16)
      *(_OWORD *)&buf[i] = xmmword_268EC34EC;
    strncpy(v38, (const char *)(a2 + 34), 0x29uLL);
    BYTE2(v39[0]) = 0;
    *(_DWORD *)long long buf = *(_DWORD *)(a2 + 92);
    __int16 v37 = *(_WORD *)(a2 + 88);
    long long v46 = v29;
    __int16 v15 = a3[1];
    if (v15)
    {
      uint64_t v16 = 0;
      long long v17 = *a3;
      uint64_t v18 = 16 * (void)v15;
      while (v16 != -5)
      {
        long long v19 = *v17++;
        *(_OWORD *)int v13 = v19;
        v13 += 2;
        --v16;
        v18 -= 16;
        if (!v18)
        {
          uint64_t v20 = -v16;
          goto LABEL_26;
        }
      }
      uint64_t v21 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v26 = 0;
        _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_DEFAULT, "Can't add more IPs to ResolvedNodeData", v26, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x22u, 2);
      }
      uint64_t v20 = 5;
    }
    else
    {
      uint64_t v20 = 0;
    }
LABEL_26:
    *(void *)&uint8_t buf[8] = v20;
    if (*(void *)(a2 + 104))
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        size_t v24 = strlen(*(const char **)(*(void *)(a2 + 96) + v22));
        sub_2446C1098(v26, *(void *)(*(void *)(a2 + 96) + v22), v24);
        sub_2446C1098(v25, *(void *)(*(void *)(a2 + 96) + v22 + 8), *(void *)(*(void *)(a2 + 96) + v22 + 16));
        sub_244DB1C58(v26, v25, (uint64_t)buf);
        ++v23;
        v22 += 24;
      }
      while (v23 < *(void *)(a2 + 104));
    }
    sub_244DB2184((uint64_t)buf);
    return (*(uint64_t (**)(void, uint8_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), buf);
  }
  else
  {
    int v9 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "No delegate to handle node resolution data.", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x22u, 1);
    }
  }
  return result;
}

uint64_t sub_244DB2184(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v2 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 168);
    uint64_t v3 = *(void *)(a1 + 176);
    *(_DWORD *)long long buf = 67109888;
    int v7 = HIDWORD(v3);
    __int16 v8 = 1024;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = HIDWORD(v4);
    __int16 v12 = 1024;
    int v13 = v4;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "Node ID resolved for %08X%08X-%08X%08X", buf, 0x1Au);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  return sub_244DB4B00(a1);
}

void *sub_244DB228C(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1;
  uint64_t v4 = sub_244D91E40(a2);
  sub_244D7E904((const char *)a1, v4, (uint64_t)v6);
  LOBYTE(a1) = *(_DWORD *)(a1 + 148) == 0;
  uint64_t result = sub_244D91E40(a2);
  *((unsigned char *)result + 16) = a1;
  return result;
}

void sub_244DB22F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 156) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(unsigned char *)(a3 + 164) = 0;
  *(unsigned char *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 170) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 135) = 0u;
  sub_244DB4A8C(a3 + 8);
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 411) = 0u;
  *(void *)a3 = 0;
  int v6 = sub_244D91E1C((void *)a3);
  strncpy((char *)v6 + 98, (const char *)(a1 + 34), 0x29uLL);
  *((unsigned char *)v6 + 138) = 0;
  strncpy((char *)v6 + 240, (const char *)a1, 0x11uLL);
  *((unsigned char *)v6 + 256) = 0;
  int v20 = *(_DWORD *)(a1 + 92);
  sub_244DB1130(a2);
  uint64_t v7 = a2[1];
  if (v7)
  {
    uint64_t v8 = 0;
    int v9 = (long long *)*a2;
    __int16 v10 = v6 + 2;
    uint64_t v11 = 16 * v7;
    while (v8 != -5)
    {
      long long v12 = *v9++;
      *v10++ = v12;
      --v8;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v13 = -v8;
        goto LABEL_12;
      }
    }
    uint64_t v14 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "Can't add more IPs to DiscoveredNodeData", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    uint64_t v13 = 5;
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_12:
  *(_DWORD *)int v6 = *(_DWORD *)(a1 + 92);
  v6[1] = v13;
  *((_WORD *)v6 + 48) = *(_WORD *)(a1 + 88);
  if (*(void *)(a1 + 104))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      size_t v17 = strlen(*(const char **)(*(void *)(a1 + 96) + v15));
      sub_2446C1098(buf, *(void *)(*(void *)(a1 + 96) + v15), v17);
      sub_2446C1098(v18, *(void *)(*(void *)(a1 + 96) + v15 + 8), *(void *)(*(void *)(a1 + 96) + v15 + 16));
      sub_244DB1A88(buf, (uint64_t)v18, (uint64_t)v6);
      ++v16;
      v15 += 24;
    }
    while (v16 < *(void *)(a1 + 104));
  }
}

double sub_244DB2510@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[16])
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v3 = 425;
LABEL_3:
    *(_DWORD *)(a2 + 16) = v3;
    return result;
  }
  a1[16] = 1;
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  sub_244D736F4((uint64_t (*)(uint64_t, int *))sub_244DB25FC, (uint64_t)sub_244DB2830, (uint64_t)a1, (uint64_t)&v7);
  if (!v7)
  {
    (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 80))(v6, a1);
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v3 = 436;
    goto LABEL_3;
  }
  a1[16] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  return result;
}

void sub_244DB25FC(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a2)
  {
    uint64_t v4 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v5 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "DNS-SD initialization failed with %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      uint64_t v11 = *(void *)(a2 + 16);
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0x22u, 1);
    }
    *(unsigned char *)(a1 + 16) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 2;
    *(_WORD *)long long buf = -32750;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    sub_244D77CD8((uint64_t)&byte_26B0D4370, (long long *)buf, (uint64_t)&v8);
    if (v8)
    {
      int v6 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long v12 = v8;
        uint64_t v13 = v9;
        long long v7 = sub_244CB7B34((const char **)v12, 1);
        *(_DWORD *)long long v12 = 136315138;
        *(void *)&v12[4] = v7;
        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Posting DNS-SD platform initialized event failed with %s", v12, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long v12 = v8;
        uint64_t v13 = v9;
        sub_244CB7B34((const char **)v12, 1);
        sub_244CC4DE0(0x22u, 1);
      }
    }
  }
}

void sub_244DB2830(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a2 == 69)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    *(_WORD *)long long v7 = -32749;
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    sub_244D77CD8((uint64_t)&byte_26B0D4370, (long long *)v7, (uint64_t)buf);
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(void *)(a2 + 16) = v10;
    if (*(_DWORD *)a2)
    {
      int v3 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = *(_OWORD *)a2;
        uint64_t v10 = *(void *)(a2 + 16);
        uint64_t v4 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Failed to post DNS-SD restart event: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = *(_OWORD *)a2;
        uint64_t v10 = *(void *)(a2 + 16);
        sub_244CB7B34((const char **)buf, 1);
LABEL_13:
        sub_244CC4DE0(0x22u, 1);
      }
    }
  }
  else
  {
    uint64_t v5 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long v7 = *(_OWORD *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      int v6 = sub_244CB7B34((const char **)v7, 1);
      *(_DWORD *)long long v7 = 136315138;
      *(void *)&v7[4] = v6;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "DNS-SD error: %s", v7, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long v7 = *(_OWORD *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      sub_244CB7B34((const char **)v7, 1);
      goto LABEL_13;
    }
  }
}

void sub_244DB2A70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    sub_244D73774();
    *(unsigned char *)(a1 + 16) = 0;
  }
}

void sub_244DB2AA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_244D73774();
    *(unsigned char *)(a1 + 8) = 0;
  }
}

char *sub_244DB2AD0@<X0>(char *result@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 > 0x10) {
    return sub_244CC58A0(result + 17, 8, a2, a3, 3u, a4);
  }
  *(_DWORD *)a4 = 11;
  *(void *)(a4 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *(_DWORD *)(a4 + 16) = 499;
  return result;
}

uint64_t sub_244DB2B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_244CE98BC();
  *(void *)(a1 + 17) = result;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *(_DWORD *)(a2 + 16) = 511;
  return result;
}

uint64_t sub_244DB2B54(uint64_t a1, const char *a2, const char *a3, int *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v7 = *a4;
  uint64_t v8 = sub_244CC8484(0x22u, "Discovery");
  uint64_t v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a4;
      *(void *)&uint8_t buf[16] = *((void *)a4 + 2);
      uint64_t v10 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "mDNS service published error: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      *(_OWORD *)long long buf = *(_OWORD *)a4;
      *(void *)&uint8_t buf[16] = *((void *)a4 + 2);
      sub_244CB7B34((const char **)buf, 1);
      uint64_t v12 = 1;
      return sub_244CC4DE0(0x22u, v12);
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = "(null)";
      }
      if (a3) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = "(null)";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v14;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "mDNS service published: %s; instance name: %s",
        buf,
        0x16u);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result)
    {
      uint64_t v12 = 2;
      return sub_244CC4DE0(0x22u, v12);
    }
  }
  return result;
}

void sub_244DB2D10(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  __int16 v8 = *(_WORD *)a7;
  int v11 = *(_DWORD *)(a7 + 4);
  uint64_t v9 = *(void *)(a7 + 24);
  v10[0] = a7 + 9;
  v10[1] = v9;
  sub_244DB2D68(a1, a2, a3, a4, a5, a6, v8, &v11, a8, v10, 1, *(void *)(a7 + 56), *(void *)(a7 + 64));
}

void sub_244DB2D68(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, int *a8@<X7>, __n128 *a9@<X8>, void *a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  v22[0] = a12;
  v22[1] = a13;
  memset(v24, 0, sizeof(v24));
  int v27 = 0;
  char v32 = 0;
  char v33 = 0;
  int v34 = 120;
  a9->n128_u64[1] = 0;
  a9[1].n128_u64[0] = 0;
  a9->n128_u64[0] = 0;
  sub_244D7EA90((uint64_t)v24, 0x29uLL, a10, (uint64_t)a9);
  if (!a9->n128_u32[0])
  {
    a9->n128_u64[0] = 0;
    a9->n128_u64[1] = 0;
    a9[1].n128_u64[0] = 0;
    if (a11 == 1) {
      sub_244D7E88C(v23, 0x22uLL, v22, (uint64_t)a9);
    }
    else {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 72))(a1, v23, 34);
    }
    if (!a9->n128_u32[0])
    {
      strncpy(v25, a2, 9uLL);
      v25[8] = 0;
      v25[10] = 3;
      int v27 = *a8;
      v25[9] = a11;
      __int16 v26 = a7;
      uint64_t v28 = a3;
      uint64_t v29 = a4;
      uint64_t v30 = a5;
      uint64_t v31 = a6;
      a9->n128_u64[1] = 0;
      a9[1].n128_u64[0] = 0;
      a9->n128_u64[0] = 0;
      sub_244D73828((uint64_t)v23, (uint64_t)sub_244DB2B54, a1, a9);
      if (!a9->n128_u32[0])
      {
        a9->n128_u32[0] = 0;
        a9->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
        a9[1].n128_u32[0] = 585;
      }
    }
  }
}

void sub_244DB2F38(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  __int16 v8 = *(_WORD *)a7;
  int v11 = *(_DWORD *)(a7 + 4);
  uint64_t v9 = *(void *)(a7 + 24);
  v10[0] = a7 + 9;
  v10[1] = v9;
  sub_244DB2D68(a1, a2, a3, a4, a5, a6, v8, &v11, a8, v10, 0, 0, 0);
}

void sub_244DB2F88(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v7 = 609;
    goto LABEL_11;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v18 = 0;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_244DB31B0(0xAu, (uint64_t)v19, &v12, v17, 8uLL, a2, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_244DB31B0(0xBu, (uint64_t)v19, &v12, v16, 8uLL, a2, (uint64_t)a3);
    if (!a3->n128_u32[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244DB31B0(0xCu, (uint64_t)v19, &v12, v10, 6uLL, a2, (uint64_t)a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_244DB31B0(0xDu, (uint64_t)v19, &v12, v9, 2uLL, a2, (uint64_t)a3);
        if (!a3->n128_u32[0])
        {
          a3->n128_u64[0] = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          sub_244DB31B0(0xEu, (uint64_t)v19, &v12, v8, 2uLL, a2, (uint64_t)a3);
          if (!a3->n128_u32[0])
          {
            a3->n128_u64[0] = 0;
            a3->n128_u64[1] = 0;
            a3[1].n128_u64[0] = 0;
            uint64_t v6 = *(void *)(a2 + 64);
            LOBYTE(v13) = 8;
            *((void *)&v13 + 1) = v6;
            uint64_t v14 = 0;
            sub_244DB51AC(__str, 0x13uLL, &v13, (uint64_t)&v18, &v11, a3);
            if (!a3->n128_u32[0])
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              sub_244DB2D10(a1, "_matter", (uint64_t)v19, v12, (uint64_t)&v18, v11, a2, a3);
              if (!a3->n128_u32[0])
              {
                a3->n128_u32[0] = 0;
                a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
                int v7 = 621;
LABEL_11:
                a3[1].n128_u32[0] = v7;
              }
            }
          }
        }
      }
    }
  }
}

double sub_244DB31B0@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  if (a1 - 10 >= 3)
  {
    if (a1 == 14)
    {
      if (!*(unsigned char *)(a6 + 50)) {
        goto LABEL_12;
      }
      uint64_t v14 = *(unsigned __int8 *)(a6 + 50) == 2;
      uint64_t v15 = "%d";
    }
    else
    {
      if (a1 != 13)
      {
        LODWORD(v20) = 47;
        *((void *)&v20 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        LODWORD(v21) = 269;
        goto LABEL_16;
      }
      uint64_t v14 = *(unsigned __int16 *)(a6 + 48);
      if (!*(_WORD *)(a6 + 48)) {
        goto LABEL_12;
      }
      uint64_t v15 = "%u";
    }
    sub_244DB5DB4(v15, a4, a5, 1, (uint64_t)&v20, v14);
  }
  else
  {
    sub_244DB5BFC(a4, a5, (unsigned int *)(a6 + 32), a1, (uint64_t)&v20);
  }
  if (!v20)
  {
    size_t v17 = strnlen(a4, a5);
    uint64_t v18 = (*a3)++;
    long long v19 = (void *)(a2 + 24 * v18);
    *long long v19 = (char *)&unk_244EC3630 + 16 * a1 + 10;
    v19[1] = a4;
    void v19[2] = v17;
    *(_DWORD *)a7 = 0;
    *(void *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v16 = 311;
    goto LABEL_14;
  }
  if (v20 == 28)
  {
LABEL_12:
    *(_DWORD *)a7 = 0;
    *(void *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v16 = 306;
LABEL_14:
    *(_DWORD *)(a7 + 16) = v16;
    return result;
  }
LABEL_16:
  double result = *(double *)&v20;
  *(_OWORD *)a7 = v20;
  *(void *)(a7 + 16) = v21;
  return result;
}

void sub_244DB3328(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v8 = 626;
    goto LABEL_19;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v35 = 0;
  memset(v34, 0, sizeof(v34));
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_244DB3870(2u, (uint64_t)v36, &v20, v33, 0xCuLL, (__int16 *)a2, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_244DB3870(4u, (uint64_t)v36, &v20, v32, 0xBuLL, (__int16 *)a2, (uint64_t)a3);
    if (!a3->n128_u32[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244DB3870(5u, (uint64_t)v36, &v20, v31, 0x21uLL, (__int16 *)a2, (uint64_t)a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_244DB3870(0xAu, (uint64_t)v36, &v20, v30, 8uLL, (__int16 *)a2, (uint64_t)a3);
        if (!a3->n128_u32[0])
        {
          a3->n128_u64[0] = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          sub_244DB3870(0xBu, (uint64_t)v36, &v20, v29, 8uLL, (__int16 *)a2, (uint64_t)a3);
          if (!a3->n128_u32[0])
          {
            a3->n128_u64[0] = 0;
            a3->n128_u64[1] = 0;
            a3[1].n128_u64[0] = 0;
            sub_244DB3870(0xCu, (uint64_t)v36, &v20, v18, 6uLL, (__int16 *)a2, (uint64_t)a3);
            if (!a3->n128_u32[0])
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              sub_244DB3870(0xDu, (uint64_t)v36, &v20, v17, 2uLL, (__int16 *)a2, (uint64_t)a3);
              if (!a3->n128_u32[0])
              {
                a3->n128_u64[0] = 0;
                a3->n128_u64[1] = 0;
                a3[1].n128_u64[0] = 0;
                sub_244DB3870(0xEu, (uint64_t)v36, &v20, v16, 2uLL, (__int16 *)a2, (uint64_t)a3);
                if (!a3->n128_u32[0])
                {
                  a3->n128_u64[0] = 0;
                  a3->n128_u64[1] = 0;
                  a3[1].n128_u64[0] = 0;
                  int v6 = *(_DWORD *)(a2 + 60);
                  if ((v6 & 0xFF0000) == 0
                    || (LOBYTE(v23) = 3,
                        *((void *)&v23 + 1) = (unsigned __int16)v6,
                        uint64_t v24 = 0,
                        sub_244DB51AC(__str, 8uLL, &v23, (uint64_t)v34, &v19, a3),
                        !a3->n128_u32[0]))
                  {
                    a3->n128_u64[0] = 0;
                    a3->n128_u64[1] = 0;
                    a3[1].n128_u64[0] = 0;
                    uint64_t v7 = *(void *)(a2 + 68);
                    if ((v7 & 0xFF00000000) == 0
                      || (LOBYTE(v23) = 4,
                          *((void *)&v23 + 1) = v7,
                          uint64_t v24 = 0,
                          sub_244DB51AC(v27, 0xDuLL, &v23, (uint64_t)v34, &v19, a3),
                          !a3->n128_u32[0]))
                    {
                      if (*(unsigned char *)(a2 + 54) == 1)
                      {
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_244DB3870(9u, (uint64_t)v36, &v20, (char *)&v23, 2uLL, (__int16 *)a2, (uint64_t)a3);
                        if (!a3->n128_u32[0])
                        {
                          a3->n128_u64[0] = 0;
                          a3->n128_u64[1] = 0;
                          a3[1].n128_u64[0] = 0;
                          sub_244DB2F38(a1, "_matterd", (uint64_t)v36, v20, (uint64_t)v34, v19, a2, a3);
                          if (!a3->n128_u32[0])
                          {
                            a3->n128_u32[0] = 0;
                            a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
                            int v8 = 644;
LABEL_19:
                            a3[1].n128_u32[0] = v8;
                          }
                        }
                      }
                      else
                      {
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_244DB3870(1u, (uint64_t)v36, &v20, v15, 6uLL, (__int16 *)a2, (uint64_t)a3);
                        if (!a3->n128_u32[0])
                        {
                          a3->n128_u64[0] = 0;
                          a3->n128_u64[1] = 0;
                          a3[1].n128_u64[0] = 0;
                          sub_244DB3870(3u, (uint64_t)v36, &v20, v14, 2uLL, (__int16 *)a2, (uint64_t)a3);
                          if (!a3->n128_u32[0])
                          {
                            a3->n128_u64[0] = 0;
                            a3->n128_u64[1] = 0;
                            a3[1].n128_u64[0] = 0;
                            sub_244DB3870(6u, (uint64_t)v36, &v20, v26, 0x65uLL, (__int16 *)a2, (uint64_t)a3);
                            if (!a3->n128_u32[0])
                            {
                              a3->n128_u64[0] = 0;
                              a3->n128_u64[1] = 0;
                              a3[1].n128_u64[0] = 0;
                              sub_244DB3870(8u, (uint64_t)v36, &v20, v25, 0xBuLL, (__int16 *)a2, (uint64_t)a3);
                              if (!a3->n128_u32[0])
                              {
                                a3->n128_u64[0] = 0;
                                a3->n128_u64[1] = 0;
                                a3[1].n128_u64[0] = 0;
                                sub_244DB3870(7u, (uint64_t)v36, &v20, (char *)&v23, 0x81uLL, (__int16 *)a2, (uint64_t)a3);
                                if (!a3->n128_u32[0])
                                {
                                  a3->n128_u64[0] = 0;
                                  a3->n128_u64[1] = 0;
                                  a3[1].n128_u64[0] = 0;
                                  uint64_t v9 = *(unsigned __int8 *)(a2 + 51);
                                  LOBYTE(v21) = 1;
                                  *((void *)&v21 + 1) = v9;
                                  uint64_t v22 = 0;
                                  sub_244DB51AC(v13, 5uLL, &v21, (uint64_t)v34, &v19, a3);
                                  if (!a3->n128_u32[0])
                                  {
                                    a3->n128_u64[0] = 0;
                                    a3->n128_u64[1] = 0;
                                    a3[1].n128_u64[0] = 0;
                                    uint64_t v10 = *(unsigned __int16 *)(a2 + 52);
                                    LOBYTE(v21) = 2;
                                    *((void *)&v21 + 1) = v10;
                                    uint64_t v22 = 0;
                                    sub_244DB51AC(v12, 7uLL, &v21, (uint64_t)v34, &v19, a3);
                                    if (!a3->n128_u32[0])
                                    {
                                      a3->n128_u64[0] = 0;
                                      a3->n128_u64[1] = 0;
                                      a3[1].n128_u64[0] = 0;
                                      if (!*(_DWORD *)(a2 + 56)
                                        || (LOBYTE(v21) = 5,
                                            *((void *)&v21 + 1) = 0,
                                            uint64_t v22 = 0,
                                            sub_244DB51AC(v11, 4uLL, &v21, (uint64_t)v34, &v19, a3),
                                            !a3->n128_u32[0]))
                                      {
                                        a3->n128_u64[0] = 0;
                                        a3->n128_u64[1] = 0;
                                        a3[1].n128_u64[0] = 0;
                                        sub_244DB2F38(a1, "_matterc", (uint64_t)v36, v20, (uint64_t)v34, v19, a2, a3);
                                        if (!a3->n128_u32[0])
                                        {
                                          a3->n128_u32[0] = 0;
                                          a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
                                          int v8 = 658;
                                          goto LABEL_19;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

double sub_244DB3870@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X3>, size_t a5@<X4>, __int16 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  switch(a1)
  {
    case 1u:
      uint64_t v13 = (unsigned __int16)a6[26];
      goto LABEL_23;
    case 2u:
      if ((*((_DWORD *)a6 + 15) & 0xFF0000) == 0) {
        goto LABEL_27;
      }
      uint64_t v13 = (unsigned __int16)*((_DWORD *)a6 + 15);
      if ((*((_DWORD *)a6 + 16) & 0xFF0000) == 0) {
        goto LABEL_23;
      }
      sub_244DB5DB4("%u+%u", a4, a5, 3, (uint64_t)&v24, v13, (unsigned __int16)*((_DWORD *)a6 + 16));
      goto LABEL_25;
    case 3u:
      uint64_t v13 = (unsigned __int16)a6[28];
      goto LABEL_23;
    case 4u:
      uint64_t v13 = *(void *)(a6 + 34);
      if ((v13 & 0xFF00000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_23;
    case 5u:
      if (!*((unsigned char *)a6 + 113)) {
        goto LABEL_27;
      }
      uint64_t v15 = (uint64_t)(a6 + 40);
      goto LABEL_17;
    case 6u:
      if (!*((unsigned char *)a6 + 215)) {
        goto LABEL_27;
      }
      uint64_t v15 = (uint64_t)(a6 + 57);
      goto LABEL_17;
    case 7u:
      if (!*((unsigned char *)a6 + 345)) {
        goto LABEL_27;
      }
      uint64_t v15 = (uint64_t)(a6 + 108);
LABEL_17:
      sub_244DB5DB4("%s", a4, a5, 0, (uint64_t)&v24, v15);
      goto LABEL_25;
    case 8u:
      if ((*((_DWORD *)a6 + 19) & 0xFF0000) == 0) {
        goto LABEL_27;
      }
      uint64_t v13 = (unsigned __int16)*((_DWORD *)a6 + 19);
      goto LABEL_23;
    case 9u:
      unsigned int v16 = (unsigned __int16)a6[173];
      if (v16 <= 0x100) {
        LOBYTE(v16) = 0;
      }
      uint64_t v13 = v16 != 0;
      goto LABEL_23;
    default:
      __int16 v26 = *a6;
      int v27 = *((_DWORD *)a6 + 1);
      long long v28 = *(_OWORD *)(a6 + 4);
      *(_OWORD *)uint64_t v29 = *(_OWORD *)(a6 + 12);
      long long v14 = *(_OWORD *)((char *)a6 + 35);
      *(_OWORD *)&v29[11] = v14;
      if (a1 - 10 < 3)
      {
        sub_244DB5BFC(a4, a5, (unsigned int *)&v29[8], a1, (uint64_t)&v24);
        goto LABEL_25;
      }
      if (a1 == 14)
      {
        if (!v29[26])
        {
          LODWORD(v24) = 28;
          *((void *)&v24 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
          int v22 = 266;
          goto LABEL_39;
        }
        uint64_t v13 = v29[26] == 2;
        size_t v17 = "%d";
LABEL_24:
        sub_244DB5DB4(v17, a4, a5, 1, (uint64_t)&v24, v13);
        goto LABEL_25;
      }
      if (a1 != 13)
      {
        LODWORD(v24) = 47;
        *((void *)&v24 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        int v22 = 269;
        goto LABEL_39;
      }
      uint64_t v13 = *(unsigned __int16 *)&v29[24];
      if (*(_WORD *)&v29[24])
      {
LABEL_23:
        size_t v17 = "%u";
        goto LABEL_24;
      }
      LODWORD(v24) = 28;
      *((void *)&v24 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
      int v22 = 249;
LABEL_39:
      LODWORD(v25) = v22;
LABEL_25:
      if (v24)
      {
        if (v24 != 28)
        {
          *(void *)&long long v14 = v24;
          *(_OWORD *)a7 = v24;
          *(void *)(a7 + 16) = v25;
          return *(double *)&v14;
        }
LABEL_27:
        *(_DWORD *)a7 = 0;
        *(void *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        int v18 = 306;
      }
      else
      {
        size_t v19 = strnlen(a4, a5);
        uint64_t v20 = (*a3)++;
        long long v21 = (void *)(a2 + 24 * v20);
        *long long v21 = (char *)&unk_244EC3630 + 16 * a1 + 10;
        v21[1] = a4;
        void v21[2] = v19;
        *(_DWORD *)a7 = 0;
        *(void *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        int v18 = 311;
      }
      *(_DWORD *)(a7 + 16) = v18;
      return *(double *)&v14;
  }
}

void sub_244DB3BA4(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244D73798(a2);
    if (*(_DWORD *)a2) {
      return;
    }
    int v3 = 0;
    int v4 = 666;
  }
  else
  {
    int v4 = 663;
    int v3 = 3;
  }
  *(_DWORD *)a2 = v3;
  a2[1] = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *((_DWORD *)a2 + 4) = v4;
}

void sub_244DB3C2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    sub_244D73D9C(a2);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *(_DWORD *)(a2 + 16) = 671;
  }
}

BOOL sub_244DB3CB0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 2;
}

BOOL sub_244DB3CC0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) == 2;
}

void sub_244DB3CD0(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 16) == 2)
  {
    int v6 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *a2;
      uint64_t v7 = a2[1];
      unint64_t v9 = HIDWORD(*a2);
      *(_DWORD *)long long buf = 67109888;
      int v12 = HIDWORD(v7);
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = v9;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Resolving %08X%08X:%08X%08X ...", buf, 0x1Au);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
    memset(v20, 0, sizeof(v20));
    long long v19 = 0u;
    int v24 = 0;
    char v25 = 0;
    char v26 = 0;
    int v27 = 120;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    sub_244D7E88C((char *)buf, 0x22uLL, a2, (uint64_t)a3);
    if (!a3->n128_u32[0])
    {
      uint64_t v21 = 0x72657474616D5FLL;
      __int16 v22 = 256;
      char v23 = 3;
      uint32_t v10 = 0;
      sub_244D74354((uint64_t)buf, &v10, (uint64_t)sub_244DB1DD4, a1, a3);
    }
  }
  else
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
    a3[1].n128_u32[0] = 684;
  }
}

void sub_244DB3EA8(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
}

char *sub_244DB3EB0(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(v3, 0, sizeof(v3));
  double result = sub_244D7E88C(v4, 0x22uLL, a2, (uint64_t)v3);
  if (!LODWORD(v3[0])) {
    return (char *)sub_244D746CC(v4);
  }
  return result;
}

void sub_244DB3F28(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  double v8 = sub_244DB2510(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    (*(void (**)(char *__return_ptr, unsigned char *, uint64_t, double))(*(void *)a1 + 120))(__str, a1, a3, v8);
    if (*(unsigned char *)a2 == 6)
    {
      memset(v20, 0, sizeof(v20));
      long long v19 = 0u;
      int v24 = 0;
      char v25 = 0;
      char v26 = 0;
      int v27 = 120;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = *(void *)(a2 + 16);
      sub_244D7EB50(__str, 0x22uLL, (uint64_t)&v16, (uint64_t)a4);
      if (a4->n128_u32[0]) {
        return;
      }
      uint64_t v21 = 0x6372657474616D5FLL;
      __int16 v22 = 0;
      char v23 = 3;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      uint32_t v15 = 0;
      unint64_t v9 = sub_244DB4248((int *)a3);
      sub_244D74354((uint64_t)__str, &v15, (uint64_t)sub_244DB4154, (uint64_t)v9, a4);
      if (!a4->n128_u32[0]) {
        return;
      }
    }
    else
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a2 + 16);
      sub_244D7ED8C((uint64_t)__str, 0x21uLL, &v13, 2, (uint64_t)a4);
      if (a4->n128_u32[0]) {
        return;
      }
      uint64_t v12 = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      uint32_t v11 = 0;
      uint32_t v10 = sub_244DB4248((int *)a3);
      sub_244D73DB8(__str, 0, &v11, (uint64_t)sub_244DB427C, (uint64_t)v10, &v12, a4);
      if (!a4->n128_u32[0])
      {
        *(void *)(a3 + 16) = v12;
        *(unsigned char *)(a3 + 24) = 1;
        return;
      }
    }
    sub_244DB13DC((int *)a3);
  }
}

void sub_244DB4154(int *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  v7[54] = *MEMORY[0x263EF8340];
  if (*a4 && *a4 != 164)
  {
    sub_244DB13DC(a1);
  }
  else
  {
    v7[0] = -1;
    sub_244DB22F4(a2, a3, (uint64_t)v7);
    int v6 = sub_244D91E1C(v7);
    sub_244DB5244((uint64_t)v6);
    sub_244DB5918((uint64_t)a1);
    if (!*a4) {
      sub_244DB13DC(a1);
    }
  }
}

int *sub_244DB4248(int *result)
{
  int v1 = *result;
  if (*result == -1) {
    sub_244E23068();
  }
  if (!v1) {
    sub_244E22FC0();
  }
  *double result = v1 + 1;
  return result;
}

void sub_244DB427C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, long long *a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a5)
  {
    if (*(unsigned char *)(a1 + 24)) {
      *(unsigned char *)(a1 + 24) = 0;
    }
    sub_244DB13DC((int *)a1);
  }
  else
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v9 = a2 + 75;
      do
      {
        sub_244DB4248((int *)a1);
        if (!strcmp((const char *)v9, "_matter"))
        {
          if (!*(_DWORD *)a5)
          {
            v14[0].n128_u64[0] = -1;
            sub_244DB228C(v9 - 75, v14);
            uint32_t v10 = sub_244D91E40(v14);
            sub_244DB59EC(v10);
            sub_244DB5918(a1);
          }
          sub_244DB13DC((int *)a1);
        }
        else if (*(unsigned char *)(v9 - 41) && *(void *)(v9 + 29) && *(unsigned char *)(v9 + 69))
        {
          sub_244D71698(v14, v9 + 53, 1);
          long long v11 = *a5;
          uint64_t v12 = *((void *)a5 + 2);
          sub_244DB4154((int *)a1, v9 - 75, (uint64_t *)v14, &v11);
        }
        else
        {
          uint32_t v13 = *(_DWORD *)(v9 + 17);
          sub_244D74354(v9 - 75, &v13, (uint64_t)sub_244DB4154, a1, v14);
        }
        v9 += 152;
        --v7;
      }
      while (v7);
    }
    if (a4)
    {
      if (*(unsigned char *)(a1 + 24)) {
        *(unsigned char *)(a1 + 24) = 0;
      }
      sub_244DB13DC((int *)a1);
    }
  }
}

void sub_244DB4468(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  double v8 = sub_244DB2510(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    (*(void (**)(char *__return_ptr, unsigned char *, uint64_t, double))(*(void *)a1 + 120))(__str, a1, a3, v8);
    if (*(unsigned char *)a2 == 6)
    {
      memset(v21, 0, sizeof(v21));
      long long v20 = 0u;
      int v25 = 0;
      char v26 = 0;
      char v27 = 0;
      int v28 = 120;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      long long v17 = *(_OWORD *)a2;
      uint64_t v18 = *(void *)(a2 + 16);
      sub_244D7EB50(__str, 0x22uLL, (uint64_t)&v17, (uint64_t)a4);
      if (a4->n128_u32[0]) {
        return;
      }
      uint64_t v22 = 0x6472657474616D5FLL;
      __int16 v23 = 0;
      char v24 = 3;
      __n128 v15 = 0uLL;
      uint64_t v16 = 0;
      uint32_t v14 = 0;
      uint64_t v9 = sub_244DB4248((int *)a3);
      sub_244D74354((uint64_t)__str, &v14, (uint64_t)sub_244DB4154, (uint64_t)v9, &v15);
      if (v15.n128_u32[0]) {
        sub_244DB13DC((int *)a3);
      }
    }
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *(void *)(a2 + 16);
    sub_244D7ED8C((uint64_t)__str, 0x21uLL, &v12, 3, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      v15.n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      uint32_t v11 = 0;
      uint32_t v10 = sub_244DB4248((int *)a3);
      sub_244D73DB8(__str, 0, &v11, (uint64_t)sub_244DB427C, (uint64_t)v10, &v15, a4);
      if (a4->n128_u32[0])
      {
        sub_244DB13DC((int *)a3);
      }
      else
      {
        *(void *)(a3 + 16) = v15.n128_u64[0];
        *(unsigned char *)(a3 + 24) = 1;
      }
    }
  }
}

void sub_244DB4694(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  double v8 = sub_244DB2510(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    (*(void (**)(char *__return_ptr, unsigned char *, uint64_t, double))(*(void *)a1 + 120))(__str, a1, a3, v8);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *(void *)(a2 + 16);
    sub_244D7ED8C((uint64_t)__str, 0x35uLL, &v12, 1, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      uint64_t v11 = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      uint32_t v10 = 0;
      uint64_t v9 = sub_244DB4248((int *)a3);
      sub_244D73DB8(__str, 1u, &v10, (uint64_t)sub_244DB427C, (uint64_t)v9, &v11, a4);
      if (a4->n128_u32[0])
      {
        sub_244DB13DC((int *)a3);
      }
      else
      {
        *(void *)(a3 + 16) = v11;
        *(unsigned char *)(a3 + 24) = 1;
      }
    }
  }
}

void sub_244DB47E8(unsigned char *a1@<X0>, int a2@<W1>, long long *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  switch(a2)
  {
    case 1:
      long long v5 = *a3;
      uint64_t v6 = *((void *)a3 + 2);
      sub_244DB4694(a1, (uint64_t)&v5, a4, a5);
      break;
    case 3:
      long long v7 = *a3;
      uint64_t v8 = *((void *)a3 + 2);
      sub_244DB4468(a1, (uint64_t)&v7, a4, a5);
      break;
    case 2:
      long long v9 = *a3;
      uint64_t v10 = *((void *)a3 + 2);
      sub_244DB3F28(a1, (uint64_t)&v9, a4, a5);
      break;
    default:
      a5->n128_u32[0] = 47;
      a5->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
      a5[1].n128_u32[0] = 832;
      break;
  }
}

void sub_244DB4898(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
}

void sub_244DB48A0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v2 = *(_DWORD **)(a1 + 16);
    *(unsigned char *)(a1 + 24) = 0;
    sub_244D73F1C(v2, a2);
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *(_DWORD *)(a2 + 16) = 842;
  }
}

void sub_244DB48D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v2 = *(_DWORD **)(a1 + 16);
    *(unsigned char *)(a1 + 24) = 0;
    sub_244D73F1C(v2, a2);
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *(_DWORD *)(a2 + 16) = 842;
  }
}

void sub_244DB4900(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint32_t *a5@<X4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_244DB2510(a1, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    uint32_t v11 = *a5;
    sub_244D74850(a2, a3, a4, &v11, (uint64_t)a6);
  }
}

void sub_244DB497C(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint32_t *a5@<X4>, void *a6@<X8>)
{
}

uint64_t *sub_244DB4984()
{
  if (!byte_26B0D4AF8)
  {
    byte_26B0D4AF8 = 1;
    qword_26B0D4AE8 = 0;
    unk_26B0D4AF0 = 0;
    qword_26B0D4AD0 = (uint64_t)&unk_26F957D88;
    qword_26B0D4AD8 = (uint64_t)&unk_26F957E20;
    unk_26B0D4AE0 = 0;
  }
  return &qword_26B0D4AD0;
}

uint64_t *sub_244DB49EC()
{
  if (!byte_26B0D4AF8)
  {
    byte_26B0D4AF8 = 1;
    qword_26B0D4AE8 = 0;
    unk_26B0D4AF0 = 0;
    qword_26B0D4AD0 = (uint64_t)&unk_26F957D88;
    qword_26B0D4AD8 = (uint64_t)&unk_26F957E20;
    unk_26B0D4AE0 = 0;
  }
  return &qword_26B0D4AD8;
}

void sub_244DB4A54()
{
}

void sub_244DB4A6C()
{
}

double sub_244DB4A84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244DB2510((unsigned char *)(a1 - 8), a2);
}

double sub_244DB4A8C(uint64_t a1)
{
  *(_OWORD *)(a1 + 123) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  if (*(unsigned char *)(a1 + 148)) {
    *(unsigned char *)(a1 + 148) = 0;
  }
  if (*(unsigned char *)(a1 + 156)) {
    *(unsigned char *)(a1 + 156) = 0;
  }
  if (*(unsigned char *)(a1 + 162)) {
    *(unsigned char *)(a1 + 162) = 0;
  }
  if (*(unsigned char *)(a1 + 142)) {
    *(unsigned char *)(a1 + 142) = 0;
  }
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 139) = 0;
  *(_DWORD *)a1 = 0;
  for (uint64_t i = 16; i != 96; i += 16)
  {
    double result = *(double *)&xmmword_268EC34EC;
    *(_OWORD *)(a1 + i) = xmmword_268EC34EC;
  }
  return result;
}

uint64_t sub_244DB4B00(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v2 = (const char *)(a1 + 98);
  if (*(unsigned char *)(a1 + 98))
  {
    int v3 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v37 = v2;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "\tHostname: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      uint64_t v6 = sub_244CBE8FC((_DWORD *)(a1 + 16 * v4 + 16), (char *)buf, 0x2Eu);
      long long v7 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)char v32 = 67109378;
        unsigned int v33 = v5;
        __int16 v34 = 2080;
        uint64_t v35 = v6;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "\tIP Address #%d: %s", v32, 0x12u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0x22u, 3);
      }
      uint64_t v4 = v5;
    }
    while (*(void *)(a1 + 8) > (unint64_t)v5++);
  }
  if (*(_WORD *)(a1 + 96))
  {
    long long v9 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = *(unsigned __int16 *)(a1 + 96);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v37) = v10;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "\tPort: %u", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + 148);
  long long v12 = sub_244CC8484(0x22u, "Discovery");
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v11)
  {
    if (v13)
    {
      int v14 = *(_DWORD *)(a1 + 144);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v37) = v14;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_INFO, "\tMrp Interval idle: %u ms", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
LABEL_26:
    }
      sub_244CC4DE0(0x22u, 3);
  }
  else
  {
    if (v13)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_INFO, "\tMrp Interval idle: not present", buf, 2u);
    }
    if (sub_244CC4E58(3u)) {
      goto LABEL_26;
    }
  }
  int v15 = *(unsigned __int8 *)(a1 + 156);
  uint64_t v16 = sub_244CC8484(0x22u, "Discovery");
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
  if (v15)
  {
    if (v17)
    {
      int v18 = *(_DWORD *)(a1 + 152);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v37) = v18;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "\tMrp Interval active: %u ms", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
LABEL_35:
    }
      sub_244CC4DE0(0x22u, 3);
  }
  else
  {
    if (v17)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "\tMrp Interval active: not present", buf, 2u);
    }
    if (sub_244CC4E58(3u)) {
      goto LABEL_35;
    }
  }
  int v19 = *(unsigned __int8 *)(a1 + 162);
  long long v20 = sub_244CC8484(0x22u, "Discovery");
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v19)
  {
    if (v21)
    {
      int v22 = *(unsigned __int16 *)(a1 + 160);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v37) = v22;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_INFO, "\tMrp Active Threshold: %u ms", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
LABEL_44:
    }
      sub_244CC4DE0(0x22u, 3);
  }
  else
  {
    if (v21)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_INFO, "\tMrp Active Threshold: not present", buf, 2u);
    }
    if (sub_244CC4E58(3u)) {
      goto LABEL_44;
    }
  }
  __int16 v23 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    int v24 = *(unsigned __int8 *)(a1 + 139);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v37) = v24;
    _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_INFO, "\tTCP Client Supported: %d", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x22u, 3);
  }
  int v25 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    int v26 = *(unsigned __int8 *)(a1 + 140);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v37) = v26;
    _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_INFO, "\tTCP Server Supported: %d", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x22u, 3);
  }
  int v27 = *(unsigned __int8 *)(a1 + 142);
  int v28 = sub_244CC8484(0x22u, "Discovery");
  BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v29)
    {
      if (*(unsigned char *)(a1 + 141)) {
        uint64_t v30 = "LIT";
      }
      else {
        uint64_t v30 = "SIT";
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v37 = v30;
      _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_INFO, "\tThe ICD operates in %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      return sub_244CC4DE0(0x22u, 3);
    }
  }
  else
  {
    if (v29)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_INFO, "\tICD: not present", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      return sub_244CC4DE0(0x22u, 3);
    }
  }
  return result;
}

char *sub_244DB51AC@<X0>(char *__str@<X3>, size_t __size@<X4>, long long *a3@<X0>, uint64_t a4@<X1>, void *a5@<X2>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  long long v12 = *a3;
  uint64_t v13 = *((void *)a3 + 2);
  uint64_t result = sub_244D7EB50(__str, __size, (uint64_t)&v12, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    uint64_t v11 = (*a5)++;
    *(void *)(a4 + 8 * v11) = __str;
    *(_DWORD *)a6 = 0;
    a6[1] = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *((_DWORD *)a6 + 4) = 135;
  }
  return result;
}

uint64_t sub_244DB5244(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v2 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Discovered commissionable/commissioner node:", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x22u, 3);
  }
  sub_244DB4B00(a1);
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3)
  {
    long long v29 = 0u;
    memset(v30, 0, sizeof(v30));
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v26 = 0u;
    sub_244CC58A0((char *)(a1 + 190), v3, buf, 0x65uLL, 3u, (uint64_t)v23);
    uint64_t v4 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int16 v23 = 136315138;
      int v24 = buf;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "\tRotating ID: %s", v23, 0xCu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(unsigned char *)(a1 + 257))
  {
    unsigned int v5 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = a1 + 257;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_INFO, "\tDevice Name: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(_WORD *)(a1 + 182))
  {
    uint64_t v6 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int16 *)(a1 + 182);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "\tVendor ID: %u", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(_WORD *)(a1 + 184))
  {
    uint64_t v8 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int16 *)(a1 + 184);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "\tProduct ID: %u", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(_DWORD *)(a1 + 176))
  {
    int v10 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = *(_DWORD *)(a1 + 176);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "\tDevice Type: %u", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(_WORD *)(a1 + 180))
  {
    long long v12 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = *(unsigned __int16 *)(a1 + 180);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_INFO, "\tLong Discriminator: %u", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(unsigned char *)(a1 + 290))
  {
    int v14 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = a1 + 290;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "\tPairing Instruction: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(_WORD *)(a1 + 186))
  {
    int v15 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = *(unsigned __int16 *)(a1 + 186);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_INFO, "\tPairing Hint: %u", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  if (*(unsigned char *)(a1 + 240))
  {
    BOOL v17 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = a1 + 240;
      _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_INFO, "\tInstance Name: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  int v18 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *(unsigned __int8 *)(a1 + 188);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v19;
    _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_INFO, "\tCommissioning Mode: %u", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x22u, 3);
  }
  long long v20 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a1 + 189)) {
      BOOL v21 = "true";
    }
    else {
      BOOL v21 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_INFO, "\tSupports Commissioner Generated Passcode: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0x22u, 3);
  }
  return result;
}

uint64_t sub_244DB5918(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    int v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);
    return v2();
  }
  else
  {
    uint64_t v4 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Missing commissioning delegate. Data discarded", v5, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x22u, 1);
    }
  }
  return result;
}

uint64_t sub_244DB59EC(unint64_t *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v2 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Discovered Operational node:\r\n", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x22u, 3);
  }
  uint64_t v3 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    unint64_t v6 = HIDWORD(*a1);
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)int v11 = HIDWORD(v4);
    *(_WORD *)&char v11[4] = 1024;
    *(_DWORD *)&_DWORD v11[6] = v4;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "\tNode Instance: %08X%08X-%08X%08X", buf, 0x1Au);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x22u, 3);
  }
  int v7 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (*((unsigned char *)a1 + 16)) {
      uint64_t v8 = "true";
    }
    else {
      uint64_t v8 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)int v11 = v8;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "\thasZeroTTL: %s\r\n", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0x22u, 3);
  }
  return result;
}

char *sub_244DB5BFC@<X0>(char *result@<X0>, size_t a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((a4 - 10) >= 3)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v10 = 219;
LABEL_7:
    *(_DWORD *)(a5 + 16) = v10;
    return result;
  }
  if (!*((unsigned char *)a3 + 12))
  {
    *(_DWORD *)a5 = 28;
    *(void *)(a5 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    int v10 = 220;
    goto LABEL_7;
  }
  uint64_t v8 = result;
  if (a4 == 12)
  {
    uint64_t v9 = *((unsigned __int16 *)a3 + 4);
  }
  else
  {
    int v11 = a3 + 1;
    if (a4 == 10) {
      int v11 = a3;
    }
    uint64_t v9 = *v11;
    if (v9 > 0x36EE80)
    {
      __int16 v12 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if (a4 == 10) {
          int v13 = "idle";
        }
        else {
          int v13 = "active";
        }
        *(_DWORD *)long long buf = 136315138;
        int v15 = v13;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "MRP retry interval %s value exceeds allowed range of 1 hour, using maximum available", buf, 0xCu);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x22u, 2);
      }
      uint64_t v9 = 3600000;
    }
  }
  return (char *)sub_244DB5DB4("%u", v8, a2, 1, a5, v9);
}

uint64_t sub_244DB5DB4@<X0>(char *__format@<X3>, char *a2@<X0>, size_t a3@<X1>, int a4@<W2>, uint64_t a5@<X8>, ...)
{
  va_start(va, a5);
  uint64_t result = vsnprintf(a2, a3, __format, va);
  if ((int)result >= a4) {
    int v8 = 0;
  }
  else {
    int v8 = 30;
  }
  *(_DWORD *)a5 = v8;
  *(void *)(a5 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *(_DWORD *)(a5 + 16) = 167;
  return result;
}

uint64_t sub_244DB5E1C(unsigned char *a1)
{
  uint64_t v1 = 16;
  if (!a1[8]) {
    uint64_t v1 = 8;
  }
  if (a1[24]) {
    return v1 + 8;
  }
  if (a1[40]) {
    return v1 | 2;
  }
  return v1;
}

uint64_t sub_244DB5E54(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 0x10) != 0) {
    unsigned int v1 = 8;
  }
  else {
    unsigned int v1 = 6;
  }
  if (*(unsigned char *)(a1 + 12)) {
    return v1 + 4;
  }
  else {
    return v1;
  }
}

uint64_t sub_244DB5E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v9 = 0;
  uint64_t result = sub_244CC5424(a2, &v9);
  *(_OWORD *)a3 = *(_OWORD *)(a2 + 24);
  *(void *)(a3 + 16) = *(void *)(a2 + 40);
  if (!*(_DWORD *)a3)
  {
    if (v9 >= 0x10u)
    {
      *(_DWORD *)a3 = 167;
      *(void *)(a3 + 8) = "src/transport/raw/MessageHeader.cpp";
      *(_DWORD *)(a3 + 16) = 142;
    }
    else
    {
      *(unsigned char *)(a1 + 47) = v9;
      uint64_t result = sub_244CC54EC(a2, (_WORD *)(a1 + 44));
      *(_OWORD *)a3 = *(_OWORD *)(a2 + 24);
      *(void *)(a3 + 16) = *(void *)(a2 + 40);
      if (!*(_DWORD *)a3)
      {
        char v8 = 0;
        uint64_t result = sub_244CC5424(a2, &v8);
        *(_OWORD *)a3 = *(_OWORD *)(a2 + 24);
        *(void *)(a3 + 16) = *(void *)(a2 + 40);
        if (!*(_DWORD *)a3)
        {
          char v7 = v8;
          *(unsigned char *)(a1 + 48) = v8;
          *(unsigned char *)(a1 + 46) = v7 & 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_244DB5F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 24);
  v5[0] = *(void *)(*(void *)a2 + 8);
  v5[1] = v5[0];
  uint64_t v6 = v3;
  int v7 = 0;
  char v8 = "src/lib/support/BufferReader.h";
  int v9 = 330;
  if (!v5[0]) {
    uint64_t v6 = 0;
  }
  return sub_244DB5E7C(a1, (uint64_t)v5, a3);
}

double sub_244DB5FC4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v15 = a2;
  *(_OWORD *)a5 = xmmword_2651A9610;
  *(void *)(a5 + 16) = 166;
  unint64_t v16 = a3;
  LODWORD(v17) = 0;
  *((void *)&v17 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v18) = 330;
  if (!a2) {
    unint64_t v16 = 0;
  }
  sub_244DB5E7C(a1, (uint64_t)&v14, a5);
  if (*(_DWORD *)a5) {
    return result;
  }
  sub_244CC5558((uint64_t)&v14, (_DWORD *)a1);
  double result = *(double *)&v17;
  *(_OWORD *)a5 = v17;
  *(void *)(a5 + 16) = v18;
  if (*(_DWORD *)a5) {
    return result;
  }
  if ((*(unsigned char *)(a1 + 47) & 4) != 0)
  {
    uint64_t v13 = 0;
    sub_244CC55C4((uint64_t)&v14, &v13);
    double result = *(double *)&v17;
    *(_OWORD *)a5 = v17;
    *(void *)(a5 + 16) = v18;
    if (*(_DWORD *)a5) {
      return result;
    }
    *(unsigned char *)(a1 + 8) = 1;
    *(void *)(a1 + 16) = v13;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + 46);
  if (v9 >= 2)
  {
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
    int v11 = 189;
    goto LABEL_13;
  }
  int v10 = *(unsigned __int8 *)(a1 + 47);
  if ((~v10 & 3) == 0)
  {
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
    int v11 = 195;
LABEL_13:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if (v10)
  {
    uint64_t v13 = 0;
    sub_244CC55C4((uint64_t)&v14, &v13);
    double result = *(double *)&v17;
    *(_OWORD *)a5 = v17;
    *(void *)(a5 + 16) = v18;
    if (*(_DWORD *)a5) {
      return result;
    }
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 32) = v13;
    goto LABEL_20;
  }
  if ((v10 & 2) == 0)
  {
    *(unsigned char *)(a1 + 24) = 0;
LABEL_20:
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_21;
  }
  if (v9 != 1)
  {
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
    int v11 = 211;
    goto LABEL_13;
  }
  LOWORD(v13) = 0;
  sub_244CC54EC((uint64_t)&v14, &v13);
  double result = *(double *)&v17;
  *(_OWORD *)a5 = v17;
  *(void *)(a5 + 16) = v18;
  if (*(_DWORD *)a5) {
    return result;
  }
  *(unsigned char *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 42) = v13;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_21:
  if ((*(unsigned char *)(a1 + 48) & 0x20) == 0)
  {
    __int16 v12 = v15;
    goto LABEL_23;
  }
  LOWORD(v13) = 0;
  sub_244CC54EC((uint64_t)&v14, &v13);
  double result = *(double *)&v17;
  *(_OWORD *)a5 = v17;
  *(void *)(a5 + 16) = v18;
  if (!*(_DWORD *)a5)
  {
    if (v16 < (unsigned __int16)v13)
    {
      *(_DWORD *)a5 = 172;
      *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
      int v11 = 230;
      goto LABEL_13;
    }
    __int16 v12 = v15 + v13;
LABEL_23:
    *a4 = v12 - v14;
  }
  return result;
}

void sub_244DB6248(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unsigned __int16 v5 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244DB5FC4(a1, (*a2)[1], (*a2)[3], &v5, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CC8CC8(*a2, v5);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 247;
  }
}

uint64_t sub_244DB62C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v17 = a2;
  unint64_t v18 = a3;
  LODWORD(v19) = 0;
  *((void *)&v19 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v20) = 330;
  if (!a2) {
    unint64_t v18 = 0;
  }
  char v15 = 0;
  sub_244CC5424((uint64_t)&v16, &v15);
  sub_244CC5424((uint64_t)&v16, (unsigned char *)a1);
  uint64_t result = sub_244CC54EC((uint64_t)&v16, (_WORD *)(a1 + 2));
  *(_OWORD *)a5 = v19;
  *(void *)(a5 + 16) = v20;
  if (!*(_DWORD *)a5)
  {
    char v9 = v15;
    *(unsigned char *)(a1 + 8) = v15;
    if ((v9 & 0x10) != 0)
    {
      LOWORD(v13) = 0;
      uint64_t result = sub_244CC54EC((uint64_t)&v16, &v13);
      *(_OWORD *)a5 = v19;
      *(void *)(a5 + 16) = v20;
      if (*(_DWORD *)a5) {
        return result;
      }
      int v10 = (unsigned __int16)v13;
    }
    else
    {
      int v10 = 0;
    }
    unsigned __int16 v14 = 0;
    uint64_t result = sub_244CC54EC((uint64_t)&v16, &v14);
    *(_OWORD *)a5 = v19;
    *(void *)(a5 + 16) = v20;
    if (!*(_DWORD *)a5)
    {
      *(_DWORD *)(a1 + 4) = v10 | (v14 << 16);
      char v11 = *(unsigned char *)(a1 + 8);
      if ((v11 & 2) != 0)
      {
        int v13 = 0;
        uint64_t result = sub_244CC5558((uint64_t)&v16, &v13);
        *(_OWORD *)a5 = v19;
        *(void *)(a5 + 16) = v20;
        if (*(_DWORD *)a5) {
          return result;
        }
        *(unsigned char *)(a1 + 12) = 1;
        *(_DWORD *)(a1 + 16) = v13;
        if ((*(unsigned char *)(a1 + 8) & 8) == 0) {
          goto LABEL_12;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 12) = 0;
        if ((v11 & 8) == 0)
        {
LABEL_12:
          __int16 v12 = v17;
          goto LABEL_13;
        }
      }
      LOWORD(v13) = 0;
      uint64_t result = sub_244CC54EC((uint64_t)&v16, &v13);
      *(_OWORD *)a5 = v19;
      *(void *)(a5 + 16) = v20;
      if (*(_DWORD *)a5) {
        return result;
      }
      if (v18 < (unsigned __int16)v13)
      {
        *(_DWORD *)a5 = 172;
        *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
        *(_DWORD *)(a5 + 16) = 295;
        return result;
      }
      __int16 v12 = v17 + v13;
LABEL_13:
      *a4 = v12 - v16;
    }
  }
  return result;
}

uint64_t sub_244DB64B0@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unsigned __int16 v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244DB62C4(a1, (*a2)[1], (*a2)[3], &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = (uint64_t)sub_244CC8CC8(*a2, v6);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 312;
  }
  return result;
}

unsigned char *sub_244DB652C@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = result;
  char v9 = result + 8;
  if (result[8]) {
    unint64_t v10 = 16;
  }
  else {
    unint64_t v10 = 8;
  }
  char v11 = result + 24;
  if (result[24])
  {
    if (v10 + 8 <= a3)
    {
      int v12 = result[40];
      if (result[40])
      {
        int v13 = 318;
LABEL_32:
        int v14 = 172;
        goto LABEL_33;
      }
      goto LABEL_12;
    }
LABEL_11:
    int v13 = 317;
    int v14 = 47;
    goto LABEL_33;
  }
  int v12 = result[40];
  if (result[40]) {
    v10 |= 2uLL;
  }
  if (v10 > a3) {
    goto LABEL_11;
  }
LABEL_12:
  if (!a4)
  {
    int v13 = 319;
    goto LABEL_32;
  }
  if (result[46] > 1u)
  {
    int v13 = 320;
    goto LABEL_32;
  }
  *(unsigned char *)a2 = (2 * (v12 != 0)) | (4 * (result[8] != 0)) | result[24];
  *(_WORD *)(a2 + 1) = *((_WORD *)result + 22);
  *(unsigned char *)(a2 + 3) = result[48];
  *(_DWORD *)(a2 + 4) = *(_DWORD *)result;
  if (result[8])
  {
    uint64_t result = sub_2446F7170(result + 8);
    *(void *)(a2 + 8) = *(void *)result;
    char v15 = (void *)(a2 + 16);
  }
  else
  {
    char v15 = (void *)(a2 + 8);
  }
  uint64_t v16 = v7 + 40;
  if (*v11)
  {
    uint64_t result = sub_2446F7170(v9 + 16);
    *v15++ = *(void *)result;
  }
  else if (*v16)
  {
    uint64_t result = sub_2446D1880(v16);
    *(_WORD *)char v15 = *(_WORD *)result;
    char v15 = (void *)((char *)v15 + 2);
  }
  uint64_t v17 = (char *)v15 - a2;
  uint64_t v18 = 16;
  if (!*v9) {
    uint64_t v18 = 8;
  }
  if (*v11)
  {
    v18 += 8;
  }
  else if (*v16)
  {
    v18 |= 2uLL;
  }
  if (v17 != (char *)v18)
  {
    int v13 = 348;
    goto LABEL_32;
  }
  int v14 = 0;
  *a4 = (_WORD)v17;
  int v13 = 351;
LABEL_33:
  *(_DWORD *)a5 = v14;
  *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a5 + 16) = v13;
  return result;
}

uint64_t sub_244DB66F4@<X0>(unsigned char *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = 16;
  if (!a1[8]) {
    uint64_t v6 = 8;
  }
  if (a1[24])
  {
    uint64_t v7 = v6 + 8;
  }
  else if (a1[40])
  {
    uint64_t v7 = v6 | 2;
  }
  else
  {
    uint64_t v7 = v6;
  }
  uint64_t result = sub_244CC8E14(*a2, v7);
  if (result)
  {
    sub_244CC8A78(*a2, (*a2)[1] - v7);
    unsigned __int16 v11 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t result = (uint64_t)sub_244DB652C(a1, (*a2)[1], (*a2)[3], &v11, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      if (v11 == v7) {
        int v9 = 0;
      }
      else {
        int v9 = 172;
      }
      if (v11 == v7) {
        int v10 = 364;
      }
      else {
        int v10 = 363;
      }
      *(_DWORD *)a3 = v9;
      a3[1] = "src/transport/raw/MessageHeader.cpp";
      *((_DWORD *)a3 + 4) = v10;
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 359;
  }
  return result;
}

unsigned char *sub_244DB67FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v9 = *(unsigned __int8 *)(a1 + 12);
  uint64_t result = (unsigned char *)(a1 + 12);
  int v8 = v9;
  uint64_t v10 = 8;
  if ((*(result - 4) & 0x10) == 0) {
    uint64_t v10 = 6;
  }
  if (v8) {
    unint64_t v11 = v10 + 4;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 <= a3)
  {
    *(unsigned char *)a2 = *(result - 4);
    *(unsigned char *)(a2 + 1) = *(unsigned char *)a1;
    *(_WORD *)(a2 + 2) = *(_WORD *)(a1 + 2);
    if ((*(unsigned char *)(a1 + 8) & 0x10) != 0)
    {
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      uint64_t v16 = a2 + 6;
    }
    else
    {
      uint64_t v16 = a2 + 4;
    }
    *(_WORD *)uint64_t v16 = *(_WORD *)(a1 + 6);
    if (*(unsigned char *)(a1 + 12))
    {
      uint64_t result = sub_2446F12CC(result);
      *(_DWORD *)(v16 + 2) = *(_DWORD *)result;
      uint64_t v17 = v16 - a2 + 6;
      uint64_t v18 = 8;
      if ((*(unsigned char *)(a1 + 8) & 0x10) == 0) {
        uint64_t v18 = 6;
      }
      if (*(unsigned char *)(a1 + 12)) {
        v18 += 4;
      }
    }
    else
    {
      uint64_t v17 = v16 + 2 - a2;
      uint64_t v18 = 8;
      if ((*(unsigned char *)(a1 + 8) & 0x10) == 0) {
        uint64_t v18 = 6;
      }
    }
    if (v17 == v18)
    {
      int v13 = 0;
      *a4 = v17;
      int v12 = 391;
    }
    else
    {
      int v12 = 388;
      int v13 = 172;
    }
  }
  else
  {
    int v12 = 369;
    int v13 = 47;
  }
  *(_DWORD *)a5 = v13;
  *(void *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a5 + 16) = v12;
  return result;
}

uint64_t sub_244DB6938@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = 8;
  if ((*(unsigned char *)(a1 + 8) & 0x10) == 0) {
    uint64_t v6 = 6;
  }
  if (*(unsigned char *)(a1 + 12)) {
    uint64_t v7 = v6 + 4;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t result = sub_244CC8E14(*a2, v7);
  if (result)
  {
    sub_244CC8A78(*a2, (*a2)[1] - v7);
    unsigned __int16 v11 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t result = (uint64_t)sub_244DB67FC(a1, (*a2)[1], (*a2)[3], &v11, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      if (v11 == v7) {
        int v9 = 0;
      }
      else {
        int v9 = 172;
      }
      if (v11 == v7) {
        int v10 = 404;
      }
      else {
        int v10 = 403;
      }
      *(_DWORD *)a3 = v9;
      a3[1] = "src/transport/raw/MessageHeader.cpp";
      *((_DWORD *)a3 + 4) = v10;
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 399;
  }
  return result;
}

_OWORD *sub_244DB6A30@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X8>)
{
  if (*(_WORD *)(a2 + 44)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = *(unsigned char *)(a2 + 46) == 0;
  }
  if (v6)
  {
    int v7 = 412;
    int v8 = 128;
  }
  else if (a4 >= 0x10)
  {
    int v8 = 0;
    *uint64_t result = *a3;
    *a5 = 16;
    int v7 = 419;
  }
  else
  {
    int v7 = 413;
    int v8 = 47;
  }
  *(_DWORD *)a6 = v8;
  *(void *)(a6 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a6 + 16) = v7;
  return result;
}

_OWORD *sub_244DB6A98@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X8>)
{
  if (*(_WORD *)(a2 + 44)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = *(unsigned char *)(a2 + 46) == 0;
  }
  if (v6)
  {
    int v7 = 428;
    int v8 = 17;
  }
  else if (a4 >= 0x10)
  {
    int v8 = 0;
    *a3 = *result;
    *a5 = 16;
    int v7 = 436;
  }
  else
  {
    int v7 = 429;
    int v8 = 47;
  }
  *(_DWORD *)a6 = v8;
  *(void *)(a6 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a6 + 16) = v7;
  return result;
}

void *sub_244DB6B00(void *a1)
{
  *a1 = &unk_26F957EE0;
  sub_244DB7314((uint64_t)a1);
  return a1;
}

void *sub_244DB6B44(void *a1)
{
  *a1 = &unk_26F957EE0;
  sub_244DB7314((uint64_t)a1);
  return a1;
}

void sub_244DB6B88(void *a1)
{
  *a1 = &unk_26F957EE0;
  sub_244DB7314((uint64_t)a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DB6BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = xmmword_2651A9628;
  *(void *)(a3 + 16) = 43;
  if (*(_DWORD *)(a1 + 28)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  }
  BOOL v6 = (uint64_t *)(a1 + 16);
  sub_244DB6FB0(*(unsigned char **)a2, (uint64_t *)(a1 + 16), a3);
  if (*(_DWORD *)a3) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, void))(*(void *)*v6 + 32))(*v6, *(void *)(a2 + 16));
  int v7 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int16 *)(a2 + 10);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "UDP::Init bind&listen port=%d", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  uint64_t v9 = *v6;
  uint64_t v10 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v11 = *(unsigned __int16 *)(a2 + 10);
  int v17 = *(_DWORD *)(a2 + 12);
  sub_244CC3014(v9, v10, &xmmword_268EC34EC, v11, &v17, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = v19;
  if (*(_DWORD *)a3
    || (sub_244CC31DC(*(void *)(a1 + 16), (uint64_t)sub_244DB7144, (uint64_t)sub_244DB71C0, a1, buf),
        *(_OWORD *)a3 = *(_OWORD *)buf,
        *(void *)(a3 + 16) = v19,
        *(_DWORD *)a3))
  {
LABEL_10:
    int v12 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a3 + 16);
      int v13 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Failed to initialize Udp transport: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(2u))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a3 + 16);
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(1u, 2);
    }
    uint64_t result = *v6;
    if (*v6)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
      *BOOL v6 = 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = 1;
    char v15 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)*v6 + 16))(*v6);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_INFO, "UDP::Init bound to port=%d", buf, 8u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result)
    {
      (*(uint64_t (**)(uint64_t))(*(void *)*v6 + 16))(*v6);
      return sub_244CC4DE0(1u, 3);
    }
  }
  return result;
}

uint64_t sub_244DB6FB0@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = sub_244D6A434("src/inet/InetLayer.h", 82);
  if (a1[8] == 2)
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 16))(a1);
    *a2 = v7;
    if (v7)
    {
      int v8 = sub_244CC9408();
      char v9 = *((unsigned char *)v8 + 3) + 1;
      *((unsigned char *)v8 + 3) = v9;
      uint64_t result = (uint64_t)sub_244CC9414();
      if (*(char *)(result + 3) >= v9)
      {
        int v10 = 0;
      }
      else
      {
        uint64_t result = (uint64_t)sub_244CC9414();
        int v10 = 0;
        *(unsigned char *)(result + 3) = v9;
      }
      int v11 = 93;
    }
    else
    {
      int v12 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        int v14 = &unk_244EC374D;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "%s endpoint pool FULL", buf, 0xCu);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(1u, 1);
      }
      int v11 = 89;
      int v10 = 193;
    }
  }
  else
  {
    int v11 = 83;
    int v10 = 3;
  }
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/inet/InetLayer.h";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_244DB7144(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  __int16 v4 = *((_WORD *)a3 + 18);
  int v5 = *((_DWORD *)a3 + 8);
  long long v7 = *a3;
  char v8 = 1;
  __int16 v9 = v4;
  int v10 = v5;
  uint64_t v11 = 0;
  return (*(uint64_t (**)(void, long long *, uint64_t, void))(**(void **)(v3 + 8) + 16))(*(void *)(v3 + 8), &v7, a2, 0);
}

uint64_t sub_244DB71C0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    __int16 v4 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Failed to receive UDP message: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(1u, 1);
  }
  return result;
}

uint64_t sub_244DB72C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    sub_244E29520();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);

  return v2();
}

unsigned char *sub_244DB7314(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 16);
  if (result)
  {
    sub_244CC33C0(result);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

uint64_t sub_244DB7370@<X0>(uint64_t result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 16) == 1)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)(result + 28) == 1)
    {
      if (*(void *)(result + 16))
      {
        int v9 = 0;
        sub_244CBF148((uint64_t)v7);
        long long v8 = *a2;
        __int16 v10 = *((_WORD *)a2 + 9);
        int v9 = *((_DWORD *)a2 + 5);
        return sub_244CC3354(*(void *)(v4 + 16), (void *)a3);
      }
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/transport/raw/UDP.cpp";
      int v6 = 105;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/transport/raw/UDP.cpp";
      int v6 = 104;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/transport/raw/UDP.cpp";
    int v6 = 103;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244DB745C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_244CDC098((uint64_t)a2, __str, 0x4CuLL);
  long long v8 = sub_244CC8484(1u, "Inet");
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (v9)
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = __str;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Joining Multicast Group with address %s", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    (*(void (**)(char *__return_ptr, uint64_t))(*(void *)v10 + 8))((char *)&v13 + 4, v10);
    return sub_244CC33FC(v10, (int *)&v13 + 1, a2, a4);
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = __str;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Leaving Multicast Group with address %s", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    uint64_t v12 = *(void *)(a1 + 16);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v12 + 8))(&v13, v12);
    return sub_244CC351C(v12, (int *)&v13, a2, a4);
  }
}

BOOL sub_244DB7650(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) == 1
      && *(unsigned char *)(a2 + 16) == 1
      && sub_244CBEEA8((_DWORD *)a2) == *(unsigned __int8 *)(a1 + 24);
}

BOOL sub_244DB76A0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) == 1 && *(unsigned char *)(a1 + 24) == 2;
}

void sub_244DB76C4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/transport/raw/Base.h";
  *(_DWORD *)(a1 + 16) = 105;
}

void *sub_244DB76E0(void *a1)
{
  *a1 = &unk_26F957F68;
  uint64_t v2 = a1[2];
  if (v2)
  {
    sub_244CC09AC(v2);
    a1[2] = 0;
  }
  sub_244DB7738((uint64_t)a1);
  return a1;
}

void sub_244DB7738(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v3 = 0;
    for (unint64_t i = 0; i < v1; ++i)
    {
      int v5 = (void *)(*(void *)(a1 + 48) + v3);
      if (*v5)
      {
        int v6 = 0;
        uint64_t v7 = "src/transport/raw/TCP.cpp";
        int v8 = 74;
        sub_244DB7808(a1, (uint64_t)v5, (uint64_t)&v6, 0);
        unint64_t v1 = *(void *)(a1 + 56);
      }
      v3 += 72;
    }
  }
}

void sub_244DB77D0(void *a1)
{
  sub_244DB76E0(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244DB7808(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 && *(_DWORD *)(a2 + 48) != 5 && *(void *)a2)
  {
    sub_244CDC098(a2 + 8, __str, 0x4CuLL);
    int v8 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = __str;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Closing connection with peer %s.", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    BOOL v9 = *(void **)a2;
    if (*(_DWORD *)a3) {
      sub_244CC0960(v9);
    }
    else {
      sub_244CC08F8(v9);
    }
    int v10 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 5;
    if (a4 == 1)
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v13 = *(void *)(a3 + 16);
      if (v10 == 3) {
        (*(void (**)(void, uint64_t, uint8_t *))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, buf);
      }
      else {
        (*(void (**)(void, uint64_t, uint8_t *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2, buf);
      }
    }
    sub_244DB8EB0(a2);
    --*(void *)(a1 + 40);
  }
}

uint64_t sub_244DB79EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = xmmword_2651A9640;
  *(void *)(a3 + 16) = 81;
  if (*(_DWORD *)(a1 + 28))
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/transport/raw/TCP.cpp";
    *(_DWORD *)(a3 + 16) = 83;
  }
  else
  {
    sub_244CC2DE4(*(unsigned char **)a2, (uint64_t *)(a1 + 16), a3);
    if (!*(_DWORD *)a3)
    {
      sub_244CC0144(*(unsigned char **)(a1 + 16), *(unsigned __int8 *)(a2 + 8), &xmmword_268EC34EC, *(unsigned __int16 *)(a2 + 10), *(_DWORD *)(a2 + 12) != 0, (uint64_t)buf);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(void *)(a3 + 16) = v10;
      if (!*(_DWORD *)a3)
      {
        *(void *)(*(void *)(a1 + 16) + 16) = a1;
        *(void *)(*(void *)(a1 + 16) + 72) = sub_244DB7C18;
        *(void *)(*(void *)(a1 + 16) + 80) = sub_244DB7F78;
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 8);
        uint64_t result = (uint64_t)sub_244CC02A4(*(int **)(a1 + 16), (uint64_t)buf);
        *(_OWORD *)a3 = *(_OWORD *)buf;
        *(void *)(a3 + 16) = v10;
        if (!*(_DWORD *)a3)
        {
          *(_DWORD *)(a1 + 28) = 1;
          return result;
        }
      }
    }
  }
  uint64_t v7 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
    int v8 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Failed to initialize TCP transport: %s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(1u, 1);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = sub_244CC09AC(result);
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_244DB7C18(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 16);
  int v21 = 0;
  __int16 v19 = 0;
  (*(void (**)(uint8_t *__return_ptr, void *, long long *, __int16 *))*a2)(v24, a2, &v20, &v19);
  (*(void (**)(uint8_t *__return_ptr, void *, int *))(*a2 + 16))(v24, a2, &v21);
  __int16 v7 = v19;
  int v8 = v21;
  long long v25 = v20;
  unint64_t v9 = *(void *)(v6 + 56);
  if (*(void *)(v6 + 40) >= v9)
  {
    uint64_t v14 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v24 = 0;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Insufficient connection space to accept new connections.", v24, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(1u, 1);
    }
    sub_244CC09AC((uint64_t)a2);
    uint64_t v15 = *(uint64_t (**)(void *, int *))(a1 + 80);
    int v16 = 114;
    uint64_t v17 = "src/transport/raw/TCP.cpp";
    int v18 = 595;
    return v15(a2, &v16);
  }
  else
  {
    uint64_t v10 = *(void *)(v6 + 48);
    while (*(void *)v10)
    {
      v10 += 72;
      if (!--v9)
      {
        uint64_t v10 = 0;
        break;
      }
    }
    a2[2] = *(void *)(a1 + 16);
    a2[5] = sub_244DB8F14;
    a2[6] = 0;
    a2[7] = sub_244DB9104;
    (*(void (**)(uint8_t *__return_ptr, void *))(*a2 + 24))(v24, a2);
    *(void *)uint64_t v10 = a2;
    *(_OWORD *)(v10 + 8) = v25;
    *(unsigned char *)(v10 + 24) = 3;
    *(_WORD *)(v10 + 26) = v7;
    *(_DWORD *)(v10 + 28) = v8;
    *(void *)(v10 + 32) = 0;
    uint64_t v11 = *(_WORD **)(v10 + 40);
    if (v11) {
      sub_244CC8A0C(v11);
    }
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 56) = 0;
    ++*(void *)(v6 + 40);
    *(_DWORD *)(v10 + 48) = 4;
    (*(void (**)(uint8_t *__return_ptr, void *, void, void))(*a2 + 32))(v24, a2, *(unsigned __int16 *)(v10 + 64), *(unsigned __int16 *)(v10 + 66));
    sub_244CBE8FC(a3, (char *)v24, 0x4Cu);
    uint64_t v12 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      __int16 v23 = v24;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Incoming connection established with peer at %s.", buf, 0xCu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(1u, 2);
    }
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 8) + 24))(*(void *)(v6 + 8), v10);
  }
}

uint64_t sub_244DB7F78(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_244CC09AC(a1);
  uint64_t v3 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v4 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Accept error: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(1u, 1);
  }
  return result;
}

uint64_t sub_244DB8080(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = sub_244CC09AC(result);
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

void *sub_244DB80B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    return 0;
  }
  for (uint64_t result = *(void **)(a1 + 48); *result; result += 9)
  {
    if (!--v1) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_244DB80DC(uint64_t a1, uint64_t a2)
{
  void (***v8)(void *__return_ptr);
  void v10[3];
  __int16 v11;
  _DWORD v12[4];

  if (*(unsigned char *)(a2 + 16) == 3)
  {
    unint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      uint64_t v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        uint64_t v8 = *(void (****)(void *__return_ptr))(v7 + v5);
        if (v8 && *(_DWORD *)(v7 + v5 + 48) == 4)
        {
          uint64_t v11 = 0;
          (**v8)(v10);
          if (sub_244CBEB38(v12, (_DWORD *)a2) && v11 == *(_WORD *)(a2 + 18)) {
            return *(void *)(a1 + 48) + v5;
          }
          unint64_t v3 = *(void *)(a1 + 56);
        }
        v5 += 72;
      }
    }
  }
  return 0;
}

uint64_t sub_244DB81C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    return 0;
  }
  for (uint64_t result = *(void *)(a1 + 48); ; result += 72)
  {
    BOOL v4 = *(void *)result != a2 || *(void *)result == 0;
    if (!v4 && *(_DWORD *)(result + 48) == 4) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return result;
}

void *sub_244DB81FC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    return 0;
  }
  for (uint64_t result = *(void **)(a1 + 48); *result != a2; result += 9)
  {
    if (!--v2) {
      return 0;
    }
  }
  return result;
}

void sub_244DB822C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a2 + 16) != 3)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    int v10 = 207;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v10;
    return;
  }
  if (*(_DWORD *)(a1 + 28) != 1)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    int v10 = 208;
    goto LABEL_13;
  }
  if ((unint64_t)(*(void *)(*a3 + 24) + 4) >= 0xFA01)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    int v10 = 210;
    goto LABEL_13;
  }
  if ((sub_244CC8E14((void *)*a3, 4u) & 1) == 0)
  {
    *(_DWORD *)a4 = 11;
    *(void *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    int v10 = 213;
    goto LABEL_13;
  }
  sub_244CC8A78((void *)*a3, *(void *)(*a3 + 8) - 4);
  **(_DWORD **)(*a3 + 8) = *(_DWORD *)(*a3 + 24) - 4;
  uint64_t v8 = (uint64_t *)sub_244DB80DC(a1, a2);
  if (v8)
  {
    uint64_t v9 = *v8;
    sub_244CC04A4(v9, a3, 1, (void *)a4);
  }
  else
  {
    sub_244DB83A0((void *)a1, a2, (uint64_t)a3, (void *)a4);
  }
}

uint64_t sub_244DB83A0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  char v13 = 0;
  uint64_t v8 = a1[8];
  v12[0] = a2;
  v12[1] = &v13;
  _OWORD v12[2] = a3;
  uint64_t v14 = v12;
  uint64_t result = (*(uint64_t (**)(uint64_t, void **, uint64_t (*)(uint64_t **, uint64_t)))(*(void *)v8 + 40))(v8, &v14, sub_244DB9664);
  if (v13)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/transport/raw/TCP.cpp";
    int v10 = 292;
  }
  else if (a1[5] >= a1[7])
  {
    *(_DWORD *)a4 = 11;
    a4[1] = "src/transport/raw/TCP.cpp";
    int v10 = 296;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t result = sub_244DB850C((uint64_t)a1, a2, 0, v12, a4);
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)a1[8] + 16))(a1[8], a2, a3);
    if (result)
    {
      int v11 = 0;
      ++a1[5];
      int v10 = 305;
    }
    else
    {
      int v10 = 302;
      int v11 = 11;
    }
    *(_DWORD *)a4 = v11;
    a4[1] = "src/transport/raw/TCP.cpp";
  }
  *((_DWORD *)a4 + 4) = v10;
  return result;
}

uint64_t sub_244DB850C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  int v18 = 0;
  *a4 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = sub_244CC2DE4(*(unsigned char **)(*(void *)(a1 + 16) + 24), (uint64_t *)&v18, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    int v11 = v18;
    *((void *)v18 + 2) = a1;
    *((void *)v11 + 4) = sub_244DB8690;
    *((_DWORD *)v11 + 29) = *(_DWORD *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 56);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      while (*(void *)v13)
      {
        v13 += 72;
        if (!--v12) {
          goto LABEL_6;
        }
      }
      *(void *)uint64_t v13 = v11;
      long long v14 = *(_OWORD *)a2;
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)(v13 + 8) = v14;
      *(_DWORD *)(v13 + 28) = *(_DWORD *)(a2 + 20);
      *(void *)(v13 + 32) = *(void *)(a2 + 24);
      uint64_t v15 = *(_WORD **)(v13 + 40);
      if (v15) {
        sub_244CC8A0C(v15);
      }
      *(void *)(v13 + 40) = 0;
      *(void *)(v13 + 56) = a3;
      *(_DWORD *)(v13 + 48) = 3;
      *a4 = v13;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      uint64_t v16 = *(unsigned __int16 *)(a2 + 18);
      int v17 = *(_DWORD *)(a2 + 20);
      uint64_t result = (uint64_t)sub_244CC0380(v18, a2, v16, &v17, (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        ++*(void *)(a1 + 40);
        *(_DWORD *)a5 = 0;
        a5[1] = "src/transport/raw/TCP.cpp";
        *((_DWORD *)a5 + 4) = 263;
        return result;
      }
    }
    else
    {
LABEL_6:
      *(_DWORD *)a5 = 11;
      a5[1] = "src/transport/raw/TCP.cpp";
      *((_DWORD *)a5 + 4) = 249;
    }
    if (v11) {
      return sub_244CC09AC((uint64_t)v11);
    }
  }
  return result;
}

void sub_244DB8690(void *a1, _DWORD *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v26 = a1;
  long long v24 = xmmword_2651A9658;
  uint64_t v25 = 460;
  char v23 = 0;
  BOOL v4 = (void *)a1[2];
  int v22 = v4;
  __int16 v20 = 0;
  int v19 = 0;
  (*(void (**)(char *__return_ptr))*a1)(__str);
  (*(void (**)(char *__return_ptr, void *, int *))(*a1 + 16))(__str, a1, &v19);
  long long v14 = v21;
  char v15 = 3;
  __int16 v16 = v20;
  int v17 = v19;
  uint64_t v18 = 0;
  sub_244CDC098((uint64_t)&v14, __str, 0x4CuLL);
  if (*a2)
  {
    uint64_t v5 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v24;
      *(void *)&uint8_t buf[16] = v25;
      uint64_t v6 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = __str;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Connection establishment with %s encountered an error: %s", buf, 0x16u);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = v24;
      *(void *)&uint8_t buf[16] = v25;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(1u, 1);
    }
    sub_244CC09AC((uint64_t)a1);
    --v4[5];
  }
  else
  {
    a1[5] = sub_244DB8F14;
    a1[6] = 0;
    a1[7] = sub_244DB9104;
    uint64_t v7 = v4[7];
    if (!v7) {
LABEL_11:
    }
      sub_244E295E8();
    uint64_t v8 = v4[6];
    while (*(void **)v8 != a1)
    {
      v8 += 72;
      if (!--v7) {
        goto LABEL_11;
      }
    }
    *(_DWORD *)(v8 + 48) = 4;
    (*(void (**)(long long *__return_ptr, void *))(*a1 + 24))(&v24, a1);
    if (v24)
    {
      long long v12 = v24;
      uint64_t v13 = v25;
      sub_244DB7808((uint64_t)v4, v8, (uint64_t)&v12, 1);
    }
    else
    {
      uint64_t v9 = v4[8];
      *(void *)long long buf = &v14;
      *(void *)&uint8_t buf[8] = &v23;
      *(void *)&uint8_t buf[16] = &v22;
      long long v29 = a2;
      uint64_t v30 = &v24;
      uint64_t v31 = &v26;
      long long v27 = buf;
      (*(void (**)(uint64_t, unsigned char **, uint64_t (*)(uint64_t **, uint64_t)))(*(void *)v9 + 40))(v9, &v27, sub_244DB96C4);
      (*(void (**)(unsigned char *__return_ptr))(*v26 + 32))(buf);
      int v10 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = __str;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Connection established successfully with %s.", buf, 0xCu);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(1u, 2);
      }
      uint64_t v11 = v22[1];
      *(_DWORD *)long long buf = 0;
      *(void *)&uint8_t buf[8] = "src/transport/raw/TCP.cpp";
      *(_DWORD *)&uint8_t buf[16] = 521;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v11 + 32))(v11, v8, buf);
    }
  }
}

double sub_244DB8AD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 56);
  if (!v6)
  {
LABEL_9:
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    int v11 = 315;
LABEL_10:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  while (1)
  {
    BOOL v10 = *(void *)v9 != a2 || *(void *)v9 == 0;
    if (!v10 && *(_DWORD *)(v9 + 48) == 4) {
      break;
    }
    v9 += 72;
    if (!--v6) {
      goto LABEL_9;
    }
  }
  long long v12 = *(void **)(v9 + 40);
  if (v12)
  {
    sub_244CC8B70(v12, a4);
  }
  else
  {
    *(void *)(v9 + 40) = *a4;
    *a4 = 0;
  }
  long long v14 = *(void **)(v9 + 40);
  if (!v14)
  {
LABEL_21:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    int v11 = 350;
    goto LABEL_10;
  }
  while (1)
  {
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    sub_244CC8D64((char *)&__dst, v14, 4uLL, (uint64_t)&v21);
    if (v21) {
      break;
    }
    unint64_t v15 = __dst;
    if (__dst >= 0xF9FC)
    {
      int v17 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v25 = v15;
        _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Received TCP message of length %u exceeds limit.", buf, 8u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(1u, 1);
      }
      int v18 = 4;
      int v19 = "src/transport/raw/TCP.cpp";
      int v20 = 336;
      sub_244DB7808(a1, v9, (uint64_t)&v18, 1);
      *(_DWORD *)a5 = 4;
      *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
      int v11 = 338;
      goto LABEL_10;
    }
    uint64_t v16 = *(void *)(v9 + 40);
    if (*(void *)(v16 + 16) - 4 < (unint64_t)__dst)
    {
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
      int v11 = 344;
      goto LABEL_10;
    }
    *(void *)(v9 + 40) = sub_244CC8CF0((uint64_t **)v16, 4uLL);
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    sub_244DB8D50(a1, a3, v9, v15, a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    long long v14 = *(void **)(v9 + 40);
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (v21 == 25)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    int v11 = 325;
    goto LABEL_10;
  }
  double result = *(double *)&v21;
  *(_OWORD *)a5 = v21;
  *(void *)(a5 + 16) = v22;
  return result;
}

void sub_244DB8D50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v13 = a3;
  uint64_t v8 = (uint64_t ***)(a3 + 40);
  if (*(void *)(*(void *)(a3 + 40) + 24) == a4)
  {
    sub_244CC9214((void **)(a3 + 40), &v11);
    uint64_t v14 = v11;
    goto LABEL_6;
  }
  sub_244CC8F5C(a4, 0, &v11);
  uint64_t v10 = v11;
  uint64_t v14 = v11;
  if ((void)v11)
  {
    uint64_t v12 = 0;
    long long v11 = 0uLL;
    sub_244CC8D64(*(char **)(v10 + 8), *v8, a4, (uint64_t)&v11);
    *uint64_t v8 = sub_244CC8CF0(*v8, a4);
    *(_OWORD *)a5 = v11;
    *(void *)(a5 + 16) = v12;
    if (*(_DWORD *)a5)
    {
LABEL_7:
      sub_244CC8A0C((_WORD *)v10);
      return;
    }
    sub_244CC8AE4(v10, a4, 0);
LABEL_6:
    (*(void (**)(void, uint64_t, uint64_t *, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2, &v14, &v13);
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    *(_DWORD *)(a5 + 16) = 387;
    uint64_t v10 = v14;
    if (!v14) {
      return;
    }
    goto LABEL_7;
  }
  *(_DWORD *)a5 = 11;
  *(void *)(a5 + 8) = "src/transport/raw/TCP.cpp";
  *(_DWORD *)(a5 + 16) = 378;
}

void sub_244DB8EB0(uint64_t a1)
{
  sub_244CC09AC(*(void *)a1);
  *(_OWORD *)(a1 + 8) = xmmword_268EC34EC;
  *(unsigned char *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 26) = 5540;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = 0;
  uint64_t v2 = *(_WORD **)(a1 + 40);
  if (v2) {
    sub_244CC8A0C(v2);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
}

void sub_244DB8F14(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  __int16 v19 = 0;
  int v18 = 0;
  (*(void (**)(long long *__return_ptr))*a1)(&v13);
  (*(void (**)(long long *__return_ptr, void *, int *))(*a1 + 16))(&v13, a1, &v18);
  long long v13 = v20;
  char v14 = 3;
  __int16 v15 = v19;
  int v16 = v18;
  uint64_t v17 = 0;
  uint64_t v6 = a1[2];
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  sub_244DB8AD0(v6, (uint64_t)a1, (uint64_t)&v13, a2, (uint64_t)&v11);
  if (v11)
  {
    uint64_t v7 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v11;
      uint64_t v22 = v12;
      uint64_t v8 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Failed to accept received TCP message: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = v11;
      uint64_t v22 = v12;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(1u, 1);
    }
    int v9 = 453;
    int v10 = 192;
  }
  else
  {
    int v10 = 0;
    int v9 = 455;
  }
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/transport/raw/TCP.cpp";
  *(_DWORD *)(a3 + 16) = v9;
}

void sub_244DB9104(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 56);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 48);
    while (*(void *)v5 != a1)
    {
      v5 += 72;
      if (!--v4) {
        goto LABEL_5;
      }
    }
    if (*(_DWORD *)a2) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a1 == 0;
    }
    if (!v6 && *(_DWORD *)(v5 + 48) == 4)
    {
      *(_DWORD *)a2 = 60;
      *((void *)a2 + 1) = "src/transport/raw/TCP.cpp";
      *((_DWORD *)a2 + 4) = 544;
    }
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
    sub_244DB7808(v3, v5, (uint64_t)&v7, 1);
  }
  else
  {
LABEL_5:
    sub_244CC09AC(a1);
  }
}

uint64_t sub_244DB91C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(result + 28) != 1)
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/transport/raw/TCP.cpp";
    int v11 = 608;
    goto LABEL_13;
  }
  if (*(unsigned char *)(a2 + 16) != 3)
  {
    *(_DWORD *)a5 = 47;
    a5[1] = "src/transport/raw/TCP.cpp";
    int v11 = 611;
    goto LABEL_13;
  }
  uint64_t v7 = result;
  if (*(void *)(result + 40) >= *(void *)(result + 56))
  {
    *(_DWORD *)a5 = 11;
    a5[1] = "src/transport/raw/TCP.cpp";
    int v11 = 613;
    goto LABEL_13;
  }
  sub_244CDC098(a2, __str, 0x4CuLL);
  int v10 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v13 = __str;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Connecting to peer %s.", buf, 0xCu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(1u, 2);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  double result = sub_244DB850C(v7, a2, a3, a4, a5);
  if (!*(_DWORD *)a5)
  {
    *(_DWORD *)a5 = 0;
    a5[1] = "src/transport/raw/TCP.cpp";
    int v11 = 621;
LABEL_13:
    *((_DWORD *)a5 + 4) = v11;
  }
  return result;
}

void sub_244DB938C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (*(void *)(v6 + v4))
      {
        uint64_t v7 = v6 + v4;
        if (*(_DWORD *)(v7 + 48) == 4)
        {
          int v8 = *(unsigned __int16 *)(v7 + 26);
          if (sub_244CBEB38((_DWORD *)(v7 + 8), (_DWORD *)a2)
            && v8 == *(unsigned __int16 *)(a2 + 18)
            && *(unsigned char *)(a2 + 16) == 3)
          {
            uint64_t v11 = *(void *)(a1 + 48) + v4;
            int v12 = 0;
            long long v13 = "src/transport/raw/TCP.cpp";
            int v14 = 643;
            sub_244DB7808(a1, v11, (uint64_t)&v12, 0);
          }
        }
      }
      ++v5;
      v4 += 72;
    }
    while (v5 < *(void *)(a1 + 56));
  }
}

void sub_244DB9468(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      int v6 = *(_DWORD *)(a2 + 48);
      char v7 = v6 == 4 ? a3 : 0;
      if ((v7 & 1) == 0 && v6 != 3
        || (int v12 = 2, v13 = "src/transport/raw/TCP.cpp",
                     int v14 = 662,
                     sub_244DB7808(a1, a2, (uint64_t)&v12, 0),
                     *(void *)a2))
      {
        if (*(_DWORD *)(a2 + 48) == 4 && (a3 & 1) == 0)
        {
          int v9 = 0;
          int v10 = "src/transport/raw/TCP.cpp";
          int v11 = 667;
          sub_244DB7808(a1, a2, (uint64_t)&v9, 0);
        }
      }
    }
  }
  else
  {
    int v8 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Failed to Disconnect. Passed in Connection is null.", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(1u, 1);
    }
  }
}

BOOL sub_244DB95A4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 48);
    BOOL v4 = 1;
    do
    {
      if (*(void *)v3 && *(_DWORD *)(v3 + 48) == 4) {
        break;
      }
      BOOL v4 = ++v2 < v1;
      v3 += 72;
    }
    while (v1 != v2);
  }
  else
  {
    return 0;
  }
  return v4;
}

BOOL sub_244DB95F4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) == 1
      && *(unsigned char *)(a2 + 16) == 3
      && sub_244CBEEA8((_DWORD *)a2) == *(unsigned __int8 *)(a1 + 24);
}

void sub_244DB9644(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 172;
  *(void *)(a1 + 8) = "src/transport/raw/Base.h";
  *(_DWORD *)(a1 + 16) = 122;
}

uint64_t sub_244DB9664(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (!sub_244D8DC7C(a2, **a1)) {
    return 0;
  }
  uint64_t v4 = 1;
  *(unsigned char *)v3[1] = 1;
  sub_244CC8B70(*(void **)(a2 + 32), (uint64_t *)v3[2]);
  return v4;
}

uint64_t sub_244DB96C4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (sub_244D8DC7C(a2, **a1))
  {
    *(unsigned char *)v3[1] = 1;
    uint64_t v4 = *(_WORD **)(a2 + 32);
    int v11 = v4;
    *(void *)(a2 + 32) = 0;
    uint64_t v5 = *(void *)(*(void *)v3[2] + 64);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a2);
    if (!*(_DWORD *)v3[3] && !*(_DWORD *)v3[4])
    {
      sub_244CC04A4(*(void *)v3[5], (uint64_t *)&v11, 1, &v9);
      uint64_t v6 = v3[4];
      long long v7 = v9;
      uint64_t v4 = v11;
      *(void *)(v6 + 16) = v10;
      *(_OWORD *)uint64_t v6 = v7;
    }
    if (v4) {
      sub_244CC8A0C(v4);
    }
  }
  return 0;
}

void *sub_244DB97A8(void *a1)
{
  *a1 = &unk_26F957FE0;
  a1[2] = &unk_26F958070;
  sub_244DB980C((uint64_t)a1);
  return a1;
}

void *sub_244DB980C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    sub_244CBB8A8(v2, (uint64_t)v4);
    *(void *)(*(void *)(a1 + 24) + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  double result = *(void **)(a1 + 40);
  if (result)
  {
    double result = sub_244CB8EC0(result);
    *(void *)(a1 + 40) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

void *sub_244DB9864(void *a1)
{
  *a1 = &unk_26F957FE0;
  a1[2] = &unk_26F958070;
  sub_244DB980C((uint64_t)a1);
  return a1;
}

void *sub_244DB98C8(void *a1)
{
  *(a1 - 2) = &unk_26F957FE0;
  *a1 = &unk_26F958070;
  return sub_244DB980C((uint64_t)(a1 - 2));
}

void sub_244DB990C(void *a1)
{
  *a1 = &unk_26F957FE0;
  a1[2] = &unk_26F958070;
  sub_244DB980C((uint64_t)a1);

  JUMPOUT(0x245695FA0);
}

void sub_244DB9990(void *a1)
{
  *(a1 - 2) = &unk_26F957FE0;
  *a1 = &unk_26F958070;
  sub_244DB980C((uint64_t)(a1 - 2));

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DB9A14@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(_DWORD *)(result + 32))
  {
    uint64_t v6 = *a2;
    if (!*a2)
    {
      int v4 = 67;
      goto LABEL_3;
    }
    uint64_t v7 = result;
    *(void *)(result + 24) = v6;
    if (*(void *)(v6 + 16)) {
      BOOL v8 = *((unsigned char *)a2 + 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      *(void *)(v6 + 16) = result + 16;
      long long v9 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "BLEBase::Init - setting/overriding transport", buf, 2u);
      }
      double result = sub_244CC4E58(3u);
      if ((result & 1) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v10 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v12 = 0;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "BLEBase::Init - not overriding transport", v12, 2u);
      }
      double result = sub_244CC4E58(3u);
      if (!result) {
        goto LABEL_19;
      }
    }
    double result = sub_244CC4DE0(1u, 3);
LABEL_19:
    int v5 = 0;
    *(_DWORD *)(v7 + 32) = 1;
    int v4 = 82;
    goto LABEL_20;
  }
  int v4 = 66;
LABEL_3:
  int v5 = 3;
LABEL_20:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/transport/raw/BLE.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void *sub_244DB9B78@<X0>(void *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 == 3)
  {
    result[5] = a2;
    int v6 = 0;
    uint64_t v7 = "src/transport/raw/BLE.cpp";
    int v8 = 92;
    double result = (void *)(*(uint64_t (**)(void *))(*result + 112))(result);
    int v4 = 0;
    int v5 = 94;
  }
  else
  {
    int v5 = 87;
    int v4 = 47;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/transport/raw/BLE.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

void *sub_244DB9C10@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244DB9B78((void *)(a1 - 16), a2, a3);
}

void sub_244DB9C18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a2 + 16) != 2)
  {
    int v7 = 99;
    int v8 = 47;
LABEL_13:
    *(_DWORD *)a4 = v8;
    *(void *)(a4 + 8) = "src/transport/raw/BLE.cpp";
    *(_DWORD *)(a4 + 16) = v7;
    return;
  }
  int v5 = *(unsigned __int8 **)(a1 + 40);
  if (!v5)
  {
    int v7 = 100;
LABEL_9:
    int v8 = 3;
    goto LABEL_13;
  }
  int v6 = *(_DWORD *)(a1 + 32);
  if (!v6)
  {
    int v7 = 101;
    goto LABEL_9;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v6 == 2) {
    sub_244CB9974(v5, a3, a4);
  }
  else {
    sub_244DB9CD0(a1, a3, a4);
  }
  if (!*(_DWORD *)a4)
  {
    int v8 = 0;
    int v7 = 112;
    goto LABEL_13;
  }
}

void sub_244DB9CD0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9670;
  *(void *)(a3 + 16) = 117;
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t v7 = 0;
    while (*(void *)(*(void *)(a1 + 48) + 8 * v7))
    {
      if (v4 == ++v7) {
        return;
      }
    }
    int v8 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Message appended to BLE send queue", v11, 2u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(1u, 3);
    }
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(_WORD **)(v9 + 8 * v7);
    if (v10) {
      sub_244CC8A0C(v10);
    }
    *(void *)(v9 + 8 * v7) = *a2;
    *a2 = 0;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/transport/raw/BLE.cpp";
    *(_DWORD *)(a3 + 16) = 125;
  }
}

void sub_244DB9DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&long long v12 = a2;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "BleConnectionComplete: endPoint %p", buf, 0xCu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  *(void *)(a1 + 40) = a2;
  sub_244CB7D0C(a2, (uint64_t)buf);
  int v5 = *(_DWORD *)buf;
  long long v9 = v12;
  int v10 = v13;
  if (*(_DWORD *)buf)
  {
    int v6 = *(void **)(a1 + 40);
    if (v6)
    {
      sub_244CB8EC0(v6);
      *(void *)(a1 + 40) = 0;
    }
    uint64_t v7 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = v5;
      long long v12 = v9;
      int v13 = v10;
      int v8 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&long long v12 = v8;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Failed to setup BLE endPoint: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_DWORD *)long long buf = v5;
      long long v12 = v9;
      int v13 = v10;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(1u, 1);
    }
  }
}

void sub_244DB9FB4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_244DB9FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_244DBA0C4(a1);
  uint64_t v3 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v4 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "BleConnection Error: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result)
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(1u, 3);
  }
  return result;
}

void sub_244DBA0C4(uint64_t a1)
{
  uint64_t v2 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Clearing BLE pending packets.", v6, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(1u, 3);
  }
  if (*(void *)(a1 + 56))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = *(_WORD **)(v4 + 8 * v3);
      if (v5) {
        sub_244CC8A0C(v5);
      }
      *(void *)(v4 + 8 * v3++) = 0;
    }
    while (v3 < *(void *)(a1 + 56));
  }
}

uint64_t sub_244DBA18C(uint64_t a1, uint64_t a2)
{
  return sub_244DB9FBC(a1 - 16, a2);
}

uint64_t sub_244DBA194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = 0;
  v4[1] = 0;
  char v5 = 2;
  __int16 v6 = 5540;
  int v7 = 0;
  uint64_t v8 = 0;
  return (*(uint64_t (**)(void, void *, uint64_t, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v4, a3, 0);
}

uint64_t sub_244DBA1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = 0;
  v4[1] = 0;
  char v5 = 2;
  __int16 v6 = 5540;
  int v7 = 0;
  uint64_t v8 = 0;
  return (*(uint64_t (**)(void, void *, uint64_t, void))(**(void **)(a1 - 8) + 16))(*(void *)(a1 - 8), v4, a3, 0);
}

uint64_t sub_244DBA264(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 2;
  if (*(_DWORD *)a3)
  {
    __int16 v6 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = *a3;
      uint64_t v18 = *((void *)a3 + 2);
      int v7 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Failed to establish BLE connection: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = *a3;
      uint64_t v18 = *((void *)a3 + 2);
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(1u, 1);
    }
    long long v15 = *a3;
    uint64_t v16 = *((void *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *, long long *))(*(void *)a1 + 120))(a1, a2, &v15);
  }
  else
  {
    if (*(void *)(a1 + 56))
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        int v11 = (uint64_t *)(*(void *)(a1 + 48) + v9);
        if (*v11)
        {
          sub_244CB9974(a2, v11, (uint64_t)buf);
          *a3 = *(_OWORD *)buf;
          *((void *)a3 + 2) = v18;
          if (*(_DWORD *)a3)
          {
            long long v12 = sub_244CC8484(1u, "Inet");
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)long long buf = *a3;
              uint64_t v18 = *((void *)a3 + 2);
              int v13 = sub_244CB7B34((const char **)buf, 1);
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v13;
              _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Deferred sending failed: %s", buf, 0xCu);
            }
            if (sub_244CC4E58(1u))
            {
              *(_OWORD *)long long buf = *a3;
              uint64_t v18 = *((void *)a3 + 2);
              sub_244CB7B34((const char **)buf, 1);
              sub_244CC4DE0(1u, 1);
            }
          }
        }
        ++v10;
        v9 += 8;
      }
      while (v10 < *(void *)(a1 + 56));
    }
    uint64_t v14 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "BLE EndPoint %p Connection Complete", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      return sub_244CC4DE0(1u, 3);
    }
  }
  return result;
}

uint64_t sub_244DBA57C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  return sub_244DBA264(a1 - 16, a2, a3);
}

void sub_244DBA584(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  sub_244DBA0C4(a1);
}

void sub_244DBA594(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  sub_244DBA0C4(a1 - 16);
}

BOOL sub_244DBA5AC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) && *(unsigned char *)(a2 + 16) == 2;
}

uint64_t sub_244DBA5C4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 152) = *((_WORD *)a2 + 4);
  *(void *)(result + 144) = v2;
  return result;
}

void sub_244DBA5D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (!*(void *)(a2 + 32))
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/app/CASEClient.cpp";
    *(_DWORD *)(a7 + 16) = 38;
    return;
  }
  sub_244DBA79C(*(void *)a2, a4, a5, (uint64_t)v31);
  if (v31[0])
  {
    uint64_t v12 = *(void *)(a2 + 24);
    int v13 = sub_24479DC08(v31);
    if (a1) {
      uint64_t v14 = a1 + 8;
    }
    else {
      uint64_t v14 = 0;
    }
    long long v15 = sub_244D66048(v12, v13, v14, 1u);
    if (v15)
    {
      uint64_t v16 = (uint64_t)v15;
      if (*(unsigned char *)(a2 + 48))
      {
        v28[0] = *(unsigned char *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 52);
        int v30 = *(_DWORD *)(a2 + 60);
        int v17 = 1;
      }
      else
      {
        sub_244D6A044((uint64_t)v28);
        int v17 = v28[0];
      }
      *(void *)(a1 + 512) = *(void *)(a2 + 40);
      *(void *)(a7 + 8) = 0;
      *(void *)(a7 + 16) = 0;
      *(void *)a7 = 0;
      uint64_t v19 = *(void *)(a2 + 32);
      uint64_t v20 = *a3;
      uint64_t v21 = a3[1];
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = *(void *)(a2 + 8);
      uint64_t v24 = *(void *)(a2 + 16);
      v25[0] = v17;
      if (v17)
      {
        uint64_t v26 = v29;
        int v27 = v30;
      }
      sub_244CD2AE4(a1, v22, v19, v20, v21, v16, v23, v24, a7, a6, v25);
      if (*(_DWORD *)a7) {
        goto LABEL_18;
      }
      *(_DWORD *)a7 = 0;
      *(void *)(a7 + 8) = "src/app/CASEClient.cpp";
      int v18 = 60;
    }
    else
    {
      *(_DWORD *)a7 = 172;
      *(void *)(a7 + 8) = "src/app/CASEClient.cpp";
      int v18 = 51;
    }
  }
  else
  {
    *(_DWORD *)a7 = 11;
    *(void *)(a7 + 8) = "src/app/CASEClient.cpp";
    int v18 = 42;
  }
  *(_DWORD *)(a7 + 16) = v18;
LABEL_18:
  if (v31[0]) {
    (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
  }
}

void *sub_244DBA79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  do
    uint64_t v8 = sub_244CE98BC();
  while ((unint64_t)(v8 - 1) > 0xFFFFFFEFFFFFFFFELL);

  return sub_244DBA814((unint64_t *)(a1 + 48), v8, a2, a3, a4);
}

void *sub_244DBA814@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v11 = 0;
  uint64_t v10 = a2;
  uint64_t result = sub_244D8E4D8(a1, &v11, &v10, (long long *)a3, a4, (uint64_t)a1);
  if (result)
  {
    long long v8 = *(_OWORD *)a3;
    *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 16);
    *((_OWORD *)result + 4) = v8;
    *((_DWORD *)result + 21) = *(_DWORD *)(a3 + 20);
    result[11] = *(void *)(a3 + 24);
    *(void *)(a5 + 8) = result;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
  }
  *(unsigned char *)a5 = v9;
  return result;
}

void *sub_244DBA8BC@<X0>(uint64_t a1@<X0>, long long *a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_244DBA998(a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(a1 + 32) = a2[1];
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    int v9 = *((unsigned __int8 *)a2 + 48);
    *(unsigned char *)(a1 + 64) = v9;
    if (v9)
    {
      uint64_t v10 = *(void *)((char *)a2 + 52);
      *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 15);
      *(void *)(a1 + 68) = v10;
    }
    *(_OWORD *)(a1 + 80) = a2[4];
    sub_244D6973C(*((void *)a2 + 3) + 96, a1 + 8);
    int v11 = *(uint64_t (**)(void))(*sub_244DD79E0() + 16);
    return (void *)v11();
  }
  return result;
}

void *sub_244DBA998@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (*result)
  {
    if (result[3])
    {
      if (result[4])
      {
        if (result[5])
        {
          *(_DWORD *)a2 = 0;
          *(void *)(a2 + 8) = "src/app/CASEClient.h";
          int v2 = 52;
        }
        else
        {
          *(_DWORD *)a2 = 3;
          *(void *)(a2 + 8) = "src/app/CASEClient.h";
          int v2 = 50;
        }
      }
      else
      {
        *(_DWORD *)a2 = 3;
        *(void *)(a2 + 8) = "src/app/CASEClient.h";
        int v2 = 49;
      }
    }
    else
    {
      *(_DWORD *)a2 = 3;
      *(void *)(a2 + 8) = "src/app/CASEClient.h";
      int v2 = 48;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/app/CASEClient.h";
    int v2 = 47;
  }
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_244DBAA44()
{
  uint64_t v0 = *(uint64_t (**)(void))(*sub_244DD79E0() + 48);

  return v0();
}

void *sub_244DBAA8C(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, int a5, void *a6, char a7)
{
  return sub_244DBAAA0(a1, a2, a3, a4, 0, a5, a6, a7);
}

void *sub_244DBAAA0(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, void *a7, char a8)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v16 = sub_244CC8484(0x27u, "CASESessionManager");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v17 = *((unsigned __int8 *)a2 + 8);
    uint64_t v18 = *a2;
    uint64_t v19 = HIDWORD(*a2);
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v17;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v19;
    *(_WORD *)&buf[14] = 1024;
    int v29 = v18;
    _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "FindOrEstablishSession: PeerId = [%d:%08X%08X]", buf, 0x14u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x27u, 3);
  }
  uint64_t v20 = (unsigned char *)(*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), *a2, a2[1], 0);
  if (v20) {
    goto LABEL_11;
  }
  uint64_t v21 = sub_244CC8484(0x27u, "CASESessionManager");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_INFO, "FindOrEstablishSession: No existing OperationalSessionSetup instance found", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x27u, 3);
  }
  uint64_t result = (void *)(***(uint64_t (****)(void, uint64_t, void, void, void, uint64_t))(a1 + 88))(*(void *)(a1 + 88), a1 + 16, *(void *)(a1 + 80), *a2, a2[1], a1);
  uint64_t v20 = result;
  if (result)
  {
LABEL_11:
    uint64_t result = sub_244DC6390(v20, a6);
    if (a7) {
      uint64_t result = (void *)sub_244DC643C((uint64_t)v20, a7);
    }
    if (a4) {
      uint64_t result = sub_244DC487C((uint64_t)v20, a3, a4, a8);
    }
    if (a5) {
      return sub_244DC4888((uint64_t)v20, a3, (uint64_t *)a5, a8);
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v23 = a4[3];
      uint64_t v24 = (uint64_t (*)(uint64_t, void *, int *))a4[4];
      int v25 = 11;
      uint64_t v26 = "src/app/CASESessionManager.cpp";
      int v27 = 102;
      uint64_t result = (void *)v24(v23, a2, &v25);
    }
    if (a5)
    {
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      int v29 = 11;
      int v30 = "src/app/CASESessionManager.cpp";
      int v31 = 107;
      char v32 = 0;
      char v33 = 0;
      return (void *)(*(uint64_t (**)(void, uint8_t *))(a5 + 32))(*(void *)(a5 + 24), buf);
    }
  }
  return result;
}

void *sub_244DBAD68(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, int a5, void *a6, char a7)
{
  return sub_244DBAAA0(a1, a2, a3, 0, a4, a5, a6, a7);
}

void *sub_244DBAD80(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, int a5, void *a6, char a7)
{
  return sub_244DBAAA0(a1, a2, a3, 0, 0, a5, a6, a7);
}

uint64_t sub_244DBAD98(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), *a2, a2[1], a3);
}

uint64_t sub_244DBADCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 24))();
}

uint64_t sub_244DBADF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 32))();
}

uint64_t sub_244DBAE1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  int v9 = (uint64_t *)(a1 + 16);
  uint64_t result = (uint64_t)sub_244DBA998((void *)(a1 + 16), (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    __int16 v19 = 513;
    uint64_t result = sub_244D8D444(v11, v12, v13, (uint64_t)&v19, a4, (uint64_t)v17);
    if (v17[0])
    {
      uint64_t v14 = (uint64_t *)sub_24479DC08(v17);
      uint64_t result = sub_244D879D8(*v14);
      long long v15 = *(_OWORD *)(result + 96);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 112);
      *(_OWORD *)a3 = v15;
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 116);
      *(void *)(a3 + 24) = *(void *)(result + 120);
      int v16 = v17[0];
      *(_DWORD *)a5 = 0;
      a5[1] = "src/app/CASESessionManager.cpp";
      *((_DWORD *)a5 + 4) = 151;
      if (v16) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
      }
    }
    else
    {
      *(_DWORD *)a5 = 72;
      a5[1] = "src/app/CASESessionManager.cpp";
      *((_DWORD *)a5 + 4) = 149;
    }
  }
  return result;
}

uint64_t sub_244DBAF40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  __int16 v9 = 513;
  return sub_244D8D444(v5, v7, v6, (uint64_t)&v9, a3, a4);
}

uint64_t sub_244DBAF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2, a3, 1);
  uint64_t v7 = sub_244CC8484(0x27u, "CASESessionManager");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v6)
  {
    if (v8)
    {
      *(_DWORD *)long long buf = 67109376;
      int v12 = HIDWORD(a2);
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "UpdatePeerAddress: Found existing OperationalSessionSetup instance for peerId[%08X%08X]", buf, 0xEu);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x27u, 3);
    }
    return (uint64_t)sub_244DC5DF4(v6);
  }
  if (v8)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "UpdatePeerAddress: No existing OperationalSessionSetup instance found", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x27u, 3);
  }
  uint64_t v6 = (void *)(***(uint64_t (****)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(a1 + 88))(*(void *)(a1 + 88), a1 + 16, *(void *)(a1 + 80), a2, a3, a1);
  if (v6) {
    return (uint64_t)sub_244DC5DF4(v6);
  }
  uint64_t v10 = sub_244CC8484(0x27u, "CASESessionManager");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "UpdatePeerAddress: Failed to allocate OperationalSessionSetup instance", buf, 2u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0x27u, 3);
  }
  return result;
}

uint64_t sub_244DBB1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244DBAF7C(a1 - 8, a2, a3);
}

uint64_t sub_244DBB1B0(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(**(void **)(result + 88) + 8))();
  }
  return result;
}

void sub_244DBB1E4(void *a1)
{
  sub_244DBB260(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244DBB21C(uint64_t a1)
{
  return sub_244DBB260((void *)(a1 - 8));
}

void sub_244DBB224(uint64_t a1)
{
  sub_244DBB260((void *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

void *sub_244DBB260(void *a1)
{
  *a1 = &unk_26F958108;
  a1[1] = &unk_26F958138;
  if (a1[2])
  {
    uint64_t v2 = a1[5];
    if (v2)
    {
      if (a1[6] && a1[7]) {
        sub_244D6973C(v2 + 96, 0);
      }
    }
  }
  return a1;
}

uint64_t sub_244DBB2EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = &unk_26F9581B8;
  *(void *)(a1 + 8) = &unk_26F945360;
  *(void *)(a1 + 16) = a1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  sub_244CCCDE0(a1 + 48);
  sub_244CCCDE0(a1 + 88);
  sub_244CCCDE0(a1 + 128);
  sub_244CCCDE0(a1 + 168);
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = -1;
  sub_244CB62B8(a1 + 240);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = &unk_26F9536C8;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_26F9586F8;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 396) = 1;
  *(unsigned char *)(a1 + 398) = 0;
  *(unsigned char *)(a1 + 399) = a5;
  *(unsigned char *)(a1 + 400) = a4;
  *(_WORD *)(a1 + 401) = 0;
  *(unsigned char *)(a1 + 403) = 0;
  *(unsigned char *)(a1 + 404) = a6;
  sub_244D6A434("src/app/CommandSender.cpp", 63);
  return a1;
}

uint64_t sub_244DBB444(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = &unk_26F9581B8;
  *(void *)(a1 + 8) = &unk_26F945360;
  *(void *)(a1 + 16) = a1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  sub_244CCCDE0(a1 + 48);
  sub_244CCCDE0(a1 + 88);
  sub_244CCCDE0(a1 + 128);
  sub_244CCCDE0(a1 + 168);
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = -1;
  sub_244CB62B8(a1 + 240);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = &unk_26F9536C8;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_26F9586F8;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 396) = 1;
  *(unsigned char *)(a1 + 398) = 0;
  *(unsigned char *)(a1 + 399) = a5;
  *(unsigned char *)(a1 + 400) = a4;
  *(_WORD *)(a1 + 401) = 0;
  *(unsigned char *)(a1 + 403) = 1;
  *(unsigned char *)(a1 + 404) = a6;
  sub_244D6A434("src/app/CommandSender.cpp", 72);
  *(void *)(a1 + 384) = a1 + 336;
  return a1;
}

void *sub_244DBB5A8(void *a1)
{
  sub_244D6A434("src/app/CommandSender.cpp", 80);
  a1[42] = &unk_26F9586F8;
  sub_244DBDA78((uint64_t)(a1 + 43));
  sub_244CA539C(a1 + 38);
  uint64_t v2 = (_WORD *)a1[28];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[28] = 0;
  a1[1] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 1));
  return a1;
}

void sub_244DBB644(void *a1)
{
  sub_244DBB5A8(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244DBB67C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 401)) {
    goto LABEL_14;
  }
  uint64_t v4 = (void *)(a1 + 240);
  sub_244DBB7F0(a1 + 240);
  unint64_t v5 = *(unsigned char *)(a1 + 404) ? 63902 : 1194;
  sub_244CC8F5C(v5, 0x26u, v10);
  __int16 v9 = (_WORD *)v10[0];
  if (v10[0])
  {
    sub_2447945A0(a1 + 304, &v9, 0);
    sub_244CB6318((uint64_t)v4, a1 + 304, 0xFFFFFFFF, (uint64_t)v10);
    *a2 = 0;
    a2[1] = 0;
    uint64_t v6 = (_OWORD *)(a1 + 48);
    a2[2] = 0;
    sub_244CCE668(a1 + 48, v4, a2);
    int v7 = 0;
    if (!*(_DWORD *)a2)
    {
      uint64_t v8 = sub_244CCC170(a1 + 48);
      sub_244CCE6E0(v8);
      *(_OWORD *)a2 = *v6;
      a2[2] = *(void *)(a1 + 64);
      if (*(_DWORD *)a2
        || (int v7 = 1, sub_244CCE738(a1 + 48, 1), *(_OWORD *)a2 = *v6, a2[2] = *(void *)(a1 + 64), *(_DWORD *)a2))
      {
        int v7 = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 401) = 1;
      }
    }
  }
  else
  {
    int v7 = 0;
    *(_DWORD *)a2 = 11;
    a2[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a2 + 4) = 98;
  }
  if (v9) {
    sub_244CC8A0C(v9);
  }
  if (v7)
  {
LABEL_14:
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a2 + 4) = 112;
  }
}

void sub_244DBB7F0(uint64_t a1)
{
  uint64_t v2 = *(_WORD **)(a1 + 80);
  if (v2) {
    sub_244CC8A0C(v2);
  }
  unint64_t v3 = *(_WORD **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (v3)
  {
    sub_244CC8A0C(v3);
  }
}

void sub_244DBB844(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, __n128 *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 398) != 2)
  {
    a4->n128_u32[0] = 3;
    a4->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    int v11 = 117;
    goto LABEL_7;
  }
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  sub_244DBB9F8((__n128 *)a1, (_WORD **)(a1 + 224), a4);
  if (a4->n128_u32[0]) {
    return;
  }
  uint64_t v8 = sub_244D66048(*(void *)(a1 + 40), a2, a1, 1u);
  if (!v8)
  {
    a4->n128_u32[0] = 11;
    a4->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    int v11 = 123;
    goto LABEL_7;
  }
  __int16 v9 = v8;
  sub_2447EA4BC(a1 + 8);
  *(void *)(a1 + 24) = v9;
  void v9[5] = a1 + 8;
  uint64_t v10 = sub_244CA1E70(a1 + 8);
  if (sub_244CA97BC(v10))
  {
    a4->n128_u32[0] = 42;
    a4->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    int v11 = 126;
LABEL_7:
    a4[1].n128_u32[0] = v11;
    return;
  }
  uint64_t v12 = sub_244CA1E70(a1 + 8);
  int v13 = sub_244D87C24(*a2, 2000);
  if (*a3) {
    int v13 = *(_DWORD *)sub_244CDC004(a3);
  }
  sub_244D645B4(v12, v13);
  if (*(unsigned char *)(a1 + 232))
  {
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    uint64_t v14 = *(void *)(a1 + 24);
    sub_2447A4DF0((unsigned char *)(a1 + 232));
    sub_244DC7CB8(v14, a4);
    if (!a4->n128_u32[0])
    {
      sub_244DBBAB4(a1, 3);
      a4->n128_u32[0] = 0;
      a4->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
      int v11 = 134;
      goto LABEL_7;
    }
  }
  else
  {
    sub_244DBBBDC(a1, a4);
  }
}

void sub_244DBB9F8(__n128 *a1@<X0>, _WORD **a2@<X1>, __n128 *a3@<X8>)
{
  if (a1[24].n128_u8[14] == 2)
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_244CCE924((uint64_t)&a1[5].n128_i64[1], a3);
    if (!a3->n128_u32[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCE7A8(a1 + 3, a3);
      if (!a3->n128_u32[0])
      {
        sub_2446DE160((uint64_t)&a1[15], a2, a3);
      }
    }
  }
  else
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    a3[1].n128_u32[0] = 638;
  }
}

uint64_t sub_244DBBAB4(uint64_t a1, char a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 398) = a2;
  unint64_t v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = *(char *)(a1 + 398);
    if (v4 > 6) {
      unint64_t v5 = "N/A";
    }
    else {
      unint64_t v5 = (&off_2651A96B8)[v4];
    }
    *(_DWORD *)long long buf = 68157954;
    int v8 = 10;
    __int16 v9 = 2080;
    uint64_t v10 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "ICR moving to [%10.10s]", buf, 0x12u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0xDu, 3);
  }
  return result;
}

void sub_244DBBBDC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = sub_244CA1E70(a1 + 8);
  __int16 v5 = 1;
  sub_244D645BC(v4, 0x10000u, 8, (uint64_t *)(a1 + 224), &v5, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_244DBBAB4(a1, 4);
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a2 + 4) = 197;
  }
}

void sub_244DBBC64(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1[404] && ((*(uint64_t (**)(void))(*(void *)*a2 + 80))() & 1) == 0)
  {
    a4->n128_u32[0] = 3;
    a4->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    int v11 = 155;
LABEL_13:
    a4[1].n128_u32[0] = v11;
    return;
  }
  if (a1[400] != a1[232])
  {
    int v8 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = a1[400];
      int v10 = a1[232];
      *(_DWORD *)long long buf = 67109376;
      int v15 = v9;
      __int16 v16 = 1024;
      int v17 = v10;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Inconsistent timed request state in CommandSender: mTimedRequest (%d) != mTimedInvokeTimeoutMs.HasValue() (%d)", buf, 0xEu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xDu, 1);
    }
    a4->n128_u32[0] = 3;
    a4->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    int v11 = 164;
    goto LABEL_13;
  }
  v12[0] = *(unsigned char *)a3;
  if (v12[0]) {
    int v13 = *(_DWORD *)(a3 + 4);
  }
  sub_244DBB844((uint64_t)a1, a2, v12, a4);
}

void sub_244DBBE08(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 398) == 2)
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_244DBB9F8((__n128 *)a1, (_WORD **)(a1 + 224), a3);
    if (a3->n128_u32[0]) {
      return;
    }
    uint64_t v6 = sub_244D66048(*(void *)(a1 + 40), a2, a1, 1u);
    if (v6)
    {
      int v7 = v6;
      sub_2447EA4BC(a1 + 8);
      *(void *)(a1 + 24) = v7;
      v7[5] = a1 + 8;
      uint64_t v8 = sub_244CA1E70(a1 + 8);
      if (sub_244CA97BC(v8))
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_244DBBBDC(a1, a3);
        if (a3->n128_u32[0]) {
          return;
        }
        *(_WORD *)(a1 + 399) = 0;
        sub_244DBBAB4(a1, 6);
        sub_244DBD010(a1);
        int v9 = 0;
        int v10 = 185;
      }
      else
      {
        int v10 = 180;
        int v9 = 42;
      }
    }
    else
    {
      int v10 = 177;
      int v9 = 11;
    }
  }
  else
  {
    int v10 = 171;
    int v9 = 3;
  }
  a3->n128_u32[0] = v9;
  a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
  a3[1].n128_u32[0] = v10;
}

uint64_t sub_244DBBF18(uint64_t a1)
{
  *(_WORD *)(a1 + 399) = 0;
  sub_244DBBAB4(a1, 6);

  return sub_244DBD010(a1);
}

void sub_244DBBF5C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 398) == 4) {
    sub_244DBBAB4(a1, 5);
  }
  char v23 = 0;
  if (*(void *)(a1 + 24) != a2)
  {
    BOOL v11 = 0;
    uint64_t v5 = 0xD5000000D5;
    int v12 = 3;
    int v13 = "src/app/CommandSender.cpp";
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 398) != 3)
  {
    if (*((_WORD *)a3 + 2))
    {
      LODWORD(v5) = 257;
      int v12 = 42;
      BOOL v11 = 1;
      int v13 = "src/app/CommandSender.cpp";
      goto LABEL_5;
    }
    int v14 = *((unsigned __int16 *)a3 + 3);
    int v15 = *a3;
    if (v14 == 1 && v15 == 9)
    {
      ++*(_WORD *)(a1 + 392);
      sub_244DBC250(a1, a4, &v23, (uint64_t)&v21);
      int v12 = v21;
      LODWORD(a3) = DWORD1(v21);
      int v13 = (const char *)*((void *)&v21 + 1);
      uint64_t v5 = v22;
      if (v21)
      {
        BOOL v11 = 1;
        goto LABEL_5;
      }
      if (v23)
      {
        sub_244DD5B5C(a2, 1, (uint64_t)&v21);
        sub_244DBBAB4(a1, 4);
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = "src/app/CommandSender.cpp";
        *(_DWORD *)(a5 + 16) = 244;
        return;
      }
      int v12 = 0;
      goto LABEL_7;
    }
    LODWORD(v5) = 257;
    int v12 = 42;
    int v13 = "src/app/CommandSender.cpp";
    BOOL v11 = 1;
    if (v14 == 1 && v15 == 1)
    {
      long long v21 = xmmword_2651A96A0;
      uint64_t v22 = 250;
      sub_244DD5D28(a4, (uint64_t)&v21, &v18);
      int v12 = v18;
      if (v18) {
        goto LABEL_17;
      }
      int v12 = v21;
      if (v21)
      {
LABEL_25:
        LODWORD(a3) = DWORD1(v21);
        int v13 = (const char *)*((void *)&v21 + 1);
        uint64_t v5 = v22;
        goto LABEL_5;
      }
      uint64_t v5 = 0xFD000000FDLL;
      int v12 = 42;
    }
LABEL_5:
    *(void *)&long long v16 = __PAIR64__(a3, v12);
    *((void *)&v16 + 1) = v13;
    uint64_t v17 = v5;
    sub_244DBC4D4(a1, &v16);
    if (v11) {
      sub_244DD5B5C(a2, 0, (uint64_t)&v21);
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0xE4000000E4;
  int v12 = 42;
  int v13 = "src/app/CommandSender.cpp";
  BOOL v11 = 1;
  if (*((_WORD *)a3 + 2) || *((_WORD *)a3 + 3) != 1 || *a3 != 1) {
    goto LABEL_5;
  }
  long long v21 = xmmword_2651A9688;
  uint64_t v22 = 220;
  sub_244DD5D28(a4, (uint64_t)&v21, &v18);
  int v12 = v18;
  BOOL v11 = v18 != 0;
  if (v18)
  {
LABEL_17:
    LODWORD(a3) = HIDWORD(v18);
    int v13 = v19;
    uint64_t v5 = v20;
    goto LABEL_5;
  }
  int v12 = v21;
  if (v21) {
    goto LABEL_25;
  }
  sub_244DBBBDC(a1, &v18);
  int v12 = v18;
  LODWORD(a3) = HIDWORD(v18);
  int v13 = v19;
  uint64_t v5 = v20;
  if (v18)
  {
    BOOL v11 = 0;
    goto LABEL_5;
  }
LABEL_7:
  if (*(unsigned char *)(a1 + 398) != 4)
  {
    if (!v12) {
      sub_244DBC584(a1);
    }
    *(_WORD *)(a1 + 399) = 0;
    sub_244DBBAB4(a1, 6);
    sub_244DBD010(a1);
  }
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = a3;
  *(void *)(a5 + 8) = v13;
  *(void *)(a5 + 16) = v5;
}

void sub_244DBC250(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_244CB3988((uint64_t)v23);
  uint64_t v24 = 0;
  sub_244CB3988((uint64_t)v21);
  sub_244CCF15C((uint64_t)v20);
  sub_244CCF15C((uint64_t)v19);
  char v18 = 0;
  sub_2446DE1E4((uint64_t)v23, a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CCF054((uint64_t)v20, (uint64_t)v23, (void *)a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CCBBC8(v20, &v18, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244CCEB54(v20, (uint64_t)v19, (void *)a4);
      if (!*(_DWORD *)a4)
      {
        sub_244CCF1AC((uint64_t)v19, (uint64_t)v21);
        while (1)
        {
          sub_244CB4E58((uint64_t)v21, v15);
          if (LODWORD(v15[0])) {
            break;
          }
          if (v22 != 256)
          {
            *(_DWORD *)a4 = 36;
            *(void *)(a4 + 8) = "src/app/CommandSender.cpp";
            int v13 = 306;
LABEL_24:
            *(_DWORD *)(a4 + 16) = v13;
            goto LABEL_4;
          }
          sub_244CCF15C((uint64_t)v15);
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244CCFA34((uint64_t)v15, (uint64_t)v21, (void *)a4);
          if (!*(_DWORD *)a4)
          {
            *(void *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(void *)(a4 + 16) = 0;
            sub_244DBC67C(a1, (int *)v15, a4);
            if (!*(_DWORD *)a4) {
              continue;
            }
          }
          goto LABEL_4;
        }
        sub_244CCEBC8(v20, a3, v15);
        int v9 = v15[0];
        int v8 = HIDWORD(v15[0]);
        int v10 = v17;
        if (LODWORD(v15[0]) == 33)
        {
          *a3 = 0;
          *(_DWORD *)a4 = 0;
          *(_DWORD *)(a4 + 4) = v8;
          BOOL v11 = "src/app/CommandSender.cpp";
          *(void *)(a4 + 8) = "src/app/CommandSender.cpp";
          int v12 = 318;
          *(_DWORD *)(a4 + 16) = 318;
          *(_DWORD *)(a4 + 20) = v10;
        }
        else
        {
          BOOL v11 = (const char *)v15[1];
          int v12 = v16;
          *(_DWORD *)a4 = v15[0];
          *(_DWORD *)(a4 + 4) = v8;
          *(void *)(a4 + 8) = v11;
          *(_DWORD *)(a4 + 16) = v12;
          *(_DWORD *)(a4 + 20) = v10;
          if (v9) {
            goto LABEL_4;
          }
        }
        if (v18 && *a3)
        {
          int v14 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v15[0]) = 0;
            _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Spec violation! InvokeResponse has suppressResponse=true, and moreChunkedMessages=true", (uint8_t *)v15, 2u);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0xDu, 1);
          }
          *(_DWORD *)a4 = 35;
          *(void *)(a4 + 8) = "src/app/CommandSender.cpp";
          int v13 = 326;
          goto LABEL_24;
        }
        *(_DWORD *)a4 = 0;
        *(_DWORD *)(a4 + 4) = v8;
        *(void *)(a4 + 8) = v11;
        *(_DWORD *)(a4 + 16) = v12;
        *(_DWORD *)(a4 + 20) = v10;
        sub_244CCF0D0((uint64_t)v20, (void *)a4);
      }
    }
  }
LABEL_4:
  if (v24) {
    sub_244CC8A0C(v24);
  }
}

uint64_t sub_244DBC4D4(uint64_t a1, long long *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 403);
  uint64_t result = *(void *)(a1 + 32);
  if (v3)
  {
    if (result)
    {
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)result + 32))(result, a1, &v7);
    }
  }
  else if (result)
  {
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)result + 24))(result, a1, &v5);
  }
  return result;
}

void *sub_244DBC584(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 384);
  if (result)
  {
    if (*(unsigned char *)(a1 + 403))
    {
      if (*(void *)(a1 + 32))
      {
        uint64_t result = (*(void *(**)(char *__return_ptr))(*result + 48))((char *)&v3 + 6);
        if (BYTE6(v3))
        {
          while (1)
          {
            WORD2(v3) = 0;
            WORD2(v3) = *(_WORD *)sub_2447A4DF0((unsigned char *)&v3 + 6);
            (*(void (**)(void, uint64_t, char *))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a1, (char *)&v3 + 4);
            uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 384) + 48))(&v3);
            BYTE6(v3) = v3;
            if (!(_BYTE)v3) {
              break;
            }
            __int16 v4 = WORD1(v3);
          }
        }
      }
    }
  }
  return result;
}

void sub_244DBC67C(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v44 = 0;
  unsigned __int16 v43 = 0;
  *(_WORD *)char v42 = 0;
  sub_244CB3988((uint64_t)v41);
  v39[0] = 0;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 394);
  sub_244CCF15C((uint64_t)v38);
  sub_244CCC9D4(a2, (uint64_t)v38, &buf);
  unsigned int v8 = buf;
  unsigned int v7 = DWORD1(buf);
  unsigned int v9 = DWORD1(v46);
  if (buf == 33)
  {
    sub_244CCF15C((uint64_t)&buf);
    sub_244CCF15C((uint64_t)v37);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCC960(a2, (uint64_t)&buf, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCCCBC((int *)&buf, (uint64_t)v37, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCD098(v37, &v43, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCD0A8(v37, (_DWORD *)&v44 + 1, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCCEC8(v37, &v44, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    sub_244CCCFE0((int *)&buf, (uint64_t)v41, v36);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    v34[2] = v47;
    v34[3] = v48;
    v34[4] = v49;
    v34[0] = buf;
    v34[1] = v46;
    sub_244DBD074((int *)v34, (uint64_t)v39, v6 > 1, a3);
    if (*(_DWORD *)a3) {
      return;
    }
    int v14 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67110144;
      DWORD1(buf) = v43;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = HIWORD(HIDWORD(v44));
      HIWORD(buf) = 1024;
      LODWORD(v46) = WORD2(v44);
      WORD2(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 6) = WORD1(v44);
      WORD5(v46) = 1024;
      HIDWORD(v46) = (unsigned __int16)v44;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "Received Command Response Data, Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    int v10 = "src/app/CommandSender.cpp";
    int v11 = 410;
    int v13 = 1;
  }
  else
  {
    int v10 = (const char *)*((void *)&buf + 1);
    int v11 = v46;
    if (buf)
    {
      int v15 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(void *)&long long buf = __PAIR64__(v7, v8);
        *((void *)&buf + 1) = v10;
        *(void *)&long long v46 = __PAIR64__(v9, v11);
        int v16 = sub_244CB7B34((const char **)&buf, 1);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Received malformed Command Response, err=%s", (uint8_t *)&buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(void *)&long long buf = __PAIR64__(v7, v8);
        *((void *)&buf + 1) = v10;
        *(void *)&long long v46 = __PAIR64__(v9, v11);
        sub_244CB7B34((const char **)&buf, 1);
        sub_244CC4DE0(0xDu, 1);
      }
      *(_DWORD *)a3 = v8;
      *(_DWORD *)(a3 + 4) = v7;
      *(void *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 16) = v11;
      *(_DWORD *)(a3 + 20) = v9;
      return;
    }
    sub_244CCF15C((uint64_t)&buf);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCCCBC((int *)v38, (uint64_t)&buf, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCD0A8((int *)&buf, (_DWORD *)&v44 + 1, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCCEC8((int *)&buf, &v44, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCD098((int *)&buf, &v43, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    sub_244CCF15C((uint64_t)v37);
    sub_244CCC9D4((int *)v38, (uint64_t)v37, v36);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCF540((uint64_t)v37, v42, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    v35[2] = v38[2];
    v35[3] = v38[3];
    v35[4] = v38[4];
    v35[0] = v38[0];
    v35[1] = v38[1];
    sub_244DBD074((int *)v35, (uint64_t)v39, v6 > 1, a3);
    if (*(_DWORD *)a3) {
      return;
    }
    int v12 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67110400;
      DWORD1(buf) = v43;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = HIWORD(HIDWORD(v44));
      HIWORD(buf) = 1024;
      LODWORD(v46) = WORD2(v44);
      WORD2(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 6) = WORD1(v44);
      WORD5(v46) = 1024;
      HIDWORD(v46) = (unsigned __int16)v44;
      LOWORD(v47) = 1024;
      *(_DWORD *)((char *)&v47 + 2) = v42[0];
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Received Command Response Status for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X Status=0x%x", (uint8_t *)&buf, 0x26u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    int v13 = 0;
  }
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v7;
  *(void *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v9;
  if (!v39[0]) {
    goto LABEL_60;
  }
  uint64_t v17 = *(void *)(a1 + 384);
  if (v17)
  {
    char v18 = sub_2447A4DF0(v39);
    (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)v17 + 24))(&buf, v17, *(unsigned __int16 *)v18);
    int v19 = buf;
    if (buf)
    {
      int v20 = DWORD1(buf);
      uint64_t v21 = *((void *)&buf + 1);
      int v22 = v46;
      uint64_t v23 = *(void *)(a1 + 24);
      int v32 = DWORD1(v46);
      if (v23 && *(unsigned char *)(v23 + 88))
      {
        sub_24479B4A8(v23, &buf);
        uint64_t v24 = (*(uint64_t (**)(void))(*(void *)buf + 48))(buf);
        unsigned __int8 v26 = v25;
        (*(void (**)(void))(*(void *)buf + 32))(buf);
        int v27 = v26;
      }
      else
      {
        int v27 = 0;
        uint64_t v24 = 0;
      }
      long long v28 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v29 = *(unsigned __int16 *)sub_2447A4DF0(v39);
        *(void *)&long long buf = __PAIR64__(HIDWORD(v24), 67109888);
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 10) = v24;
        HIWORD(buf) = 1024;
        LODWORD(v46) = v27;
        WORD2(v46) = 1024;
        *(_DWORD *)((char *)&v46 + 6) = v29;
        _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "Received Unexpected Response from remote node <%08X%08X, %d>, commandRef=%u", (uint8_t *)&buf, 0x1Au);
      }
      if (sub_244CC4E58(1u))
      {
        sub_2447A4DF0(v39);
        sub_244CC4DE0(0xDu, 1);
      }
      *(_DWORD *)a3 = v19;
      *(_DWORD *)(a3 + 4) = v20;
      *(void *)(a3 + 8) = v21;
      *(_DWORD *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 20) = v32;
      return;
    }
    if (!v39[0])
    {
LABEL_60:
      if (v6 <= 1)
      {
        uint64_t v30 = *(void *)(a1 + 384);
        if (v30)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30) == 1)
          {
            (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 384) + 48))(&buf);
            v39[0] = buf;
            if ((_BYTE)buf) {
              __int16 v40 = WORD1(buf);
            }
          }
        }
      }
    }
  }
  if (v42[0] && !*(unsigned char *)(a1 + 403))
  {
    sub_244CCF6E8(v42, (uint64_t)&v33);
    sub_244DBC4D4(a1, &v33);
  }
  else
  {
    LOWORD(v37[0]) = v43;
    v37[1] = HIDWORD(v44);
    v37[2] = v44;
    *(void *)&long long buf = v37;
    *((void *)&buf + 1) = v42;
    int v31 = v41;
    if (!v13) {
      int v31 = 0;
    }
    *(void *)&long long v46 = v31;
    BYTE8(v46) = v39[0];
    if (v39[0]) {
      WORD5(v46) = v40;
    }
    sub_244DBD184(a1, &buf);
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/app/CommandSender.cpp";
  *(_DWORD *)(a3 + 16) = 484;
}

uint64_t sub_244DBCEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  __int16 v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_244D64530(a2)) {
      int v6 = 105;
    }
    else {
      int v6 = 114;
    }
    *(_DWORD *)long long buf = 67109376;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Time out! failed to receive invoke command response from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_244CC4E58(2u))
  {
    sub_244D64530(a2);
    sub_244CC4DE0(0xDu, 2);
  }
  LODWORD(v8) = 50;
  *((void *)&v8 + 1) = "src/app/CommandSender.cpp";
  int v9 = 343;
  sub_244DBC4D4(a1, &v8);
  *(_WORD *)(a1 + 399) = 0;
  sub_244DBBAB4(a1, 6);
  return sub_244DBD010(a1);
}

uint64_t sub_244DBD010(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 403);
  uint64_t result = *(void *)(a1 + 32);
  if (v2)
  {
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, a1);
    }
  }
  else if (result)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a1);
  }
  return result;
}

void sub_244DBD074(int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __int16 v12 = 0;
  sub_244CCBCC0(a1, &v12, &v9);
  long long v13 = v10;
  int v14 = v11;
  if (v9)
  {
    if (v9 != 33)
    {
      *(_DWORD *)a4 = v9;
      *(_OWORD *)(a4 + 4) = v13;
      *(_DWORD *)(a4 + 20) = v14;
      return;
    }
    if (a3)
    {
      *(_DWORD *)a4 = 47;
      *(void *)(a4 + 8) = "src/app/CommandSender.cpp";
      int v7 = 45;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/app/CommandSender.cpp";
      int v7 = 48;
    }
  }
  else
  {
    __int16 v8 = v12;
    *(unsigned char *)a2 = 1;
    *(_WORD *)(a2 + 2) = v8;
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/CommandSender.cpp";
    int v7 = 52;
  }
  *(_DWORD *)(a4 + 16) = v7;
}

uint64_t sub_244DBD184(uint64_t a1, void *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 403);
  uint64_t result = *(void *)(a1 + 32);
  if (v4)
  {
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)result + 16))(result, a1, a2);
    }
  }
  else if (result)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)result + 16))(result, a1, *a2, a2[1], a2[2]);
  }
  return result;
}

uint64_t sub_244DBD1F8@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result + 398))
  {
    int v3 = 489;
    int v4 = 3;
  }
  else
  {
    int v5 = (unsigned __int16)*a2;
    if (*a2)
    {
      if (*(void *)(result + 384))
      {
        *(_WORD *)(result + 396) = v5;
        *(unsigned char *)(result + 402) = (unsigned __int16)*a2 > 1u;
      }
      else if (v5 != 1)
      {
        int v3 = 499;
        int v4 = 108;
        goto LABEL_10;
      }
      int v4 = 0;
      int v3 = 501;
    }
    else
    {
      int v3 = 490;
      int v4 = 47;
    }
  }
LABEL_10:
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/app/CommandSender.cpp";
  *(_DWORD *)(a3 + 16) = v3;
  return result;
}

void sub_244DBD274(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244DBB67C(a1, a4);
  if (*(_DWORD *)a4) {
    return;
  }
  if (*(unsigned char *)(a1 + 398) == 2)
  {
    int v8 = *(unsigned __int8 *)(a1 + 402);
    if (*(unsigned char *)(a1 + 402)) {
      int v8 = *(unsigned char *)(a1 + 403) != 0;
    }
LABEL_7:
    if (!v8)
    {
      int v9 = 513;
LABEL_9:
      int v10 = 3;
LABEL_26:
      *(_DWORD *)a4 = v10;
      a4[1] = "src/app/CommandSender.cpp";
      *((_DWORD *)a4 + 4) = v9;
      return;
    }
    goto LABEL_10;
  }
  int v8 = 0;
  if (*(unsigned char *)(a1 + 398)) {
    goto LABEL_7;
  }
LABEL_10:
  if (*(unsigned __int16 *)(a1 + 394) >= *(unsigned __int16 *)(a1 + 396))
  {
    int v9 = 515;
    int v10 = 187;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 402))
  {
    if (!*(void *)(a1 + 384))
    {
      int v9 = 519;
      goto LABEL_9;
    }
    if (!*a3)
    {
      int v9 = 520;
      goto LABEL_25;
    }
    int v11 = sub_2447A4DF0(a3);
    if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 384) + 32))(*(void *)(a1 + 384), *(unsigned __int16 *)v11))
    {
      int v9 = 522;
LABEL_25:
      int v10 = 47;
      goto LABEL_26;
    }
  }
  uint64_t v12 = sub_244CCCAF8(a1 + 88);
  *(_OWORD *)a4 = *(_OWORD *)(a1 + 88);
  a4[2] = *(void *)(a1 + 104);
  if (!*(_DWORD *)a4)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_244CCD034(v12);
    *(_OWORD *)a4 = *(_OWORD *)v13;
    a4[2] = *(void *)(v13 + 16);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_244CCD300(v14, a2, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        if (!a3[4]
          || (*a4 = 0,
              a4[1] = 0,
              a4[2] = 0,
              sub_244CB7594(*(void **)(v13 + 24), 1, 21, (_DWORD *)(a1 + 236), (uint64_t)a4),
              !*(_DWORD *)a4))
        {
          sub_244DBBAB4(a1, 1);
          int v10 = 0;
          int v9 = 539;
          goto LABEL_26;
        }
      }
    }
  }
}

void sub_244DBD440(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  if (a1[25].n128_u8[2])
  {
    if (!a1[24].n128_u64[0])
    {
      a3->n128_u32[0] = 3;
      a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
      int v7 = 546;
      goto LABEL_11;
    }
    if (!a2[4])
    {
      a3->n128_u32[0] = 47;
      a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
      int v7 = 547;
      goto LABEL_11;
    }
    int v6 = sub_2447A4DF0(a2 + 4);
    if ((*(unsigned int (**)(unint64_t, void))(*(void *)a1[24].n128_u64[0] + 32))(a1[24].n128_u64[0], *(unsigned __int16 *)v6))
    {
      a3->n128_u32[0] = 47;
      a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
      int v7 = 549;
LABEL_11:
      a3[1].n128_u32[0] = v7;
      return;
    }
  }

  sub_244DBD540(a1, a2, a3);
}

void sub_244DBD540(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  if (a1[24].n128_u8[14] != 1)
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
    int v8 = 576;
LABEL_14:
    a3[1].n128_u32[0] = v8;
    return;
  }
  if (!a2[8]
    || (a3->n128_u64[0] = 0,
        a3->n128_u64[1] = 0,
        a3[1].n128_u64[0] = 0,
        sub_244CB7708(a1[9].n128_i64[1], a1[14].n128_i32[3], (uint64_t)a3),
        !a3->n128_u32[0]))
  {
    if (!a2[4]
      || (a3->n128_u64[0] = 0,
          a3->n128_u64[1] = 0,
          a3[1].n128_u64[0] = 0,
          sub_2447A4DF0(a2 + 4),
          sub_244CCD088(),
          !a3->n128_u32[0]))
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCBA3C(a1 + 8, a3);
      if (!a3->n128_u32[0])
      {
        sub_244DBBAB4((uint64_t)a1, 2);
        ++a1[24].n128_u16[5];
        unint64_t v6 = a1[24].n128_u64[0];
        if (v6 && a2[4])
        {
          int v7 = sub_2447A4DF0(a2 + 4);
          (*(void (**)(void *__return_ptr, unint64_t, void))(*(void *)v6 + 16))(v9, v6, *(unsigned __int16 *)v7);
        }
        if (*a2) {
          sub_244DBD860((uint64_t)a1, a2);
        }
        a3->n128_u32[0] = 0;
        a3->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
        int v8 = 605;
        goto LABEL_14;
      }
    }
  }
}

void sub_244DBD6B0(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  sub_244DBB67C((uint64_t)a1, a5);
  if (!a5->n128_u32[0])
  {
    sub_244DBD908(v20, (uint64_t)a1);
    v17[0] = *(unsigned char *)(a4 + 4);
    if (v17[0]) {
      __int16 v18 = *(_WORD *)(a4 + 6);
    }
    char v19 = 0;
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    a5->n128_u64[0] = 0;
    sub_244DBD274((uint64_t)a1, a2, v17, a5);
    if (a5->n128_u32[0]) {
      goto LABEL_16;
    }
    if (a1[24].n128_u8[14] == 1 && (unint64_t v10 = a1[9].n128_u64[1]) != 0)
    {
      a5->n128_u64[0] = 0;
      a5->n128_u64[1] = 0;
      a5[1].n128_u64[0] = 0;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a3 + 16))(a3, v10, 1);
      if (a5->n128_u32[0]) {
        goto LABEL_16;
      }
      v12[0] = *(unsigned char *)a4;
      if (v12[0]) {
        __int16 v13 = *(_WORD *)(a4 + 2);
      }
      if (*(unsigned char *)(a4 + 4)) {
        __int16 v15 = *(_WORD *)(a4 + 6);
      }
      char v16 = 0;
      a5->n128_u64[1] = 0;
      a5[1].n128_u64[0] = 0;
      a5->n128_u64[0] = 0;
      sub_244DBD440(a1, v12, a5);
      if (a5->n128_u32[0]) {
        goto LABEL_16;
      }
      v20[73] = 0;
      a5->n128_u32[0] = 0;
      a5->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
      int v11 = 569;
    }
    else
    {
      a5->n128_u32[0] = 3;
      a5->n128_u64[1] = (unint64_t)"src/app/CommandSender.cpp";
      int v11 = 564;
    }
    a5[1].n128_u32[0] = v11;
LABEL_16:
    sub_244DBD988((uint64_t)v20);
  }
}

uint64_t sub_244DBD838(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 398) == 1) {
    return *(void *)(a1 + 152);
  }
  else {
    return 0;
  }
}

uint64_t sub_244DBD854(uint64_t result)
{
  *(unsigned char *)(result + 73) = 0;
  return result;
}

unsigned char *sub_244DBD860(uint64_t a1, unsigned __int8 *a2)
{
  int v5 = *(unsigned __int8 *)(a1 + 232);
  uint64_t result = (unsigned char *)(a1 + 232);
  int v6 = *a2;
  if (v5)
  {
    if (!*a2) {
      return result;
    }
    int v7 = sub_2447A4DF0(result);
    uint64_t result = sub_2446D1880(a2);
    unsigned int v8 = *(unsigned __int16 *)result;
    if (v8 >= (unsigned __int16)*v7) {
      LOWORD(v8) = *v7;
    }
    *(unsigned char *)(a1 + 232) = 1;
  }
  else
  {
    *uint64_t result = v6;
    if (!v6) {
      return result;
    }
    LOWORD(v8) = *((_WORD *)a2 + 1);
  }
  *(_WORD *)(a1 + 234) = v8;
  return result;
}

uint64_t sub_244DBD8D8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 392);
}

const char *sub_244DBD8E0(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 398);
  if (v1 > 6) {
    return "N/A";
  }
  else {
    return (&off_2651A96B8)[v1];
  }
}

unsigned char *sub_244DBD908(unsigned char *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  sub_244CB62B8((uint64_t)(a1 + 8));
  a1[73] = 0;
  uint64_t v4 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 401)
    && (*(unsigned __int8 *)(v4 + 398) | 2) == 2
    && !*(_DWORD *)(v4 + 88)
    && !*(_DWORD *)(v4 + 48))
  {
    int v5 = *(long long **)(v4 + 72);
    long long v6 = *v5;
    long long v7 = v5[1];
    long long v8 = v5[3];
    v3[2] = v5[2];
    void v3[3] = v8;
    *int v3 = v6;
    v3[1] = v7;
    a1[72] = *(unsigned char *)(v4 + 398);
    a1[73] = 1;
  }
  return a1;
}

uint64_t sub_244DBD988(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 73) && *(unsigned char *)(*(void *)a1 + 398) == 1)
  {
    int v2 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Rolling back response", v9, 2u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    sub_244CCCE18(*(void *)a1 + 88);
    uint64_t v3 = *(void *)a1 + 48;
    uint64_t v4 = *(_OWORD **)(*(void *)a1 + 72);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a1 + 24);
    long long v7 = *(_OWORD *)(a1 + 56);
    void v4[2] = *(_OWORD *)(a1 + 40);
    v4[3] = v7;
    *uint64_t v4 = v5;
    v4[1] = v6;
    sub_244CCCE18(v3);
    sub_244DBBAB4(*(void *)a1, *(unsigned char *)(a1 + 72));
    *(unsigned char *)(a1 + 73) = 0;
  }
  return a1;
}

uint64_t sub_244DBDA78(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_244DBDAC4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0)
  {
    int v9 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16[0]) = 3;
      v16[1] = "src/app/DeviceProxy.cpp";
      int v17 = 43;
      unint64_t v10 = sub_244CB7B34(v16, 1);
      *(_DWORD *)long long buf = 136315650;
      *(void *)char v19 = v10;
      *(_WORD *)&v19[8] = 2080;
      *(void *)&v19[10] = "src/app/DeviceProxy.cpp";
      __int16 v20 = 1024;
      int v21 = 43;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_244CC4E58(1u))
    {
      LODWORD(v14[0]) = 3;
      v14[1] = "src/app/DeviceProxy.cpp";
      int v15 = 43;
      sub_244CB7B34(v14, 1);
      sub_244CC4DE0(0, 1);
    }
    a4->n128_u32[0] = 3;
    a4->n128_u64[1] = (unint64_t)"src/app/DeviceProxy.cpp";
    int v11 = 43;
    goto LABEL_13;
  }
  if (!a2)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/app/DeviceProxy.cpp";
    int v11 = 44;
LABEL_13:
    a4[1].n128_u32[0] = v11;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(buf, a1);
  long long v8 = (uint64_t *)sub_2446F7170(buf);
  v12[0] = *(unsigned char *)a3;
  if (v12[0]) {
    int v13 = *(_DWORD *)(a3 + 4);
  }
  sub_244DBBC64(a2, v8, (uint64_t)v12, a4);
  if (buf[0]) {
    (*(void (**)(void))(**(void **)&v19[4] + 32))(*(void *)&v19[4]);
  }
}

uint64_t sub_244DBDCF4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v10[0] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v8);
  uint64_t result = sub_244CD11CC((uint64_t)v10, (unsigned __int8 *)&v8);
  if ((_BYTE)v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
  }
  if (v10[0])
  {
    long long v6 = (uint64_t *)sub_24479DC08(v10);
    uint64_t result = sub_244D879D8(*v6);
    *a2 = result + 216;
    a2[1] = 16;
    int v7 = v10[0];
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/DeviceProxy.cpp";
    *(_DWORD *)(a3 + 16) = 56;
    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/app/DeviceProxy.cpp";
    *(_DWORD *)(a3 + 16) = 53;
  }
  return result;
}

void sub_244DBDE14(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/app/DeviceProxy.h";
  *(_DWORD *)(a1 + 16) = 56;
}

uint64_t sub_244DBDE34(uint64_t a1)
{
  *(void *)a1 = &unk_26F958280;
  *(void *)(a1 + 8) = &unk_26F958340;
  *(void *)(a1 + 16) = &unk_26F958380;
  *(void *)(a1 + 24) = &unk_26F9583A8;
  *(void *)(a1 + 32) = &unk_26F9583D0;
  *(void *)(a1 + 40) = &unk_26F958408;
  *(void *)(a1 + 48) = &unk_26F958440;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &unk_26F958480;
  *(void *)(a1 + 72) = &unk_26F9584B0;
  *(void *)(a1 + 80) = &unk_26F9584E8;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 128) = a1 + 112;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 176) = a1 + 168;
  *(void *)(a1 + 184) = a1 + 168;
  uint64_t v2 = a1 + 1360;
  for (uint64_t i = 208; i != 1360; i += 288)
    sub_244DC2E74(a1 + i);
  sub_244DC9560(v2, a1);
  *(_OWORD *)(a1 + 1505) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(void *)(a1 + 1504) = a1 + 1488;
  *(void *)(a1 + 1496) = a1 + 1488;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(unsigned char *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(void *)(a1 + 1560) = a1 + 1544;
  *(void *)(a1 + 1552) = a1 + 1544;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(unsigned char *)(a1 + 1632) = 0;
  *(void *)(a1 + 1616) = a1 + 1600;
  *(void *)(a1 + 1608) = a1 + 1600;
  *(unsigned char *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(void *)(a1 + 1672) = a1 + 1656;
  *(void *)(a1 + 1664) = a1 + 1656;
  *(_DWORD *)(a1 + 1716) = 0;
  *(unsigned char *)(a1 + 1720) = 0;
  *(unsigned char *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(unsigned char *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  return a1;
}

void *sub_244DBE094()
{
  if (!byte_26B0D4AC8)
  {
    byte_26B0D4AC8 = 1;
    sub_244DBDE34((uint64_t)&unk_26B0D43D8);
  }
  return &unk_26B0D43D8;
}

uint64_t sub_244DBE0D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  if (!a3)
  {
    int v10 = 90;
LABEL_10:
    int v9 = 47;
    goto LABEL_11;
  }
  if (!a2)
  {
    int v10 = 91;
    goto LABEL_10;
  }
  if (!a4)
  {
    int v10 = 92;
    goto LABEL_10;
  }
  uint64_t v8 = result;
  *(unsigned char *)(result + 1768) = 1;
  *(void *)(result + 88) = a2;
  *(void *)(result + 1728) = a3;
  *(void *)(result + 1736) = a5;
  *(void *)(result + 1744) = a6;
  *(void *)(result + 1464) = a4;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  uint64_t result = sub_244DA1B10(a3, result + 48, (uint64_t)a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    uint64_t result = (uint64_t)sub_244D662CC(*(int **)(v8 + 88), 0x10000, v8, (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      sub_244DC95AC(v8 + 1360, (uint64_t)v11);
      uint64_t result = (uint64_t)sub_244CCF758();
      int v9 = 0;
      *(unsigned char *)(v8 + 1768) = 2;
      int v10 = 118;
LABEL_11:
      *(_DWORD *)a7 = v9;
      a7[1] = "src/app/InteractionModelEngine.cpp";
      *((_DWORD *)a7 + 4) = v10;
    }
  }
  return result;
}

int *sub_244DBE1B8(int *result)
{
  if (*((unsigned char *)result + 1768))
  {
    unint64_t v1 = result;
    uint64_t v2 = *(void *)(*(void *)(*((void *)result + 11) + 88) + 24);
    (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), int *))(*(void *)v2 + 72))(v2, sub_244DBE398, v1);
    uint64_t v3 = (uint64_t *)sub_244DD5868();
    sub_244DD5874(v3);
    sub_244CC6478((void *)v1 + 14, (uint64_t)(v1 + 24), (unsigned int (*)(uint64_t))sub_244DC32F4);
    v7[0] = v1;
    sub_244CC6478((void *)v1 + 21, (uint64_t)v7, (unsigned int (*)(uint64_t))sub_244DC3310);
    sub_244CC6478((void *)v1 + 21, (uint64_t)(v1 + 38), (unsigned int (*)(uint64_t))sub_244DC3334);
    sub_244CC6478((void *)v1 + 207, (uint64_t)(v1 + 410), (unsigned int (*)(uint64_t))sub_244DC3350);
    sub_244D6A434("src/app/InteractionModelEngine.cpp", 327);
    v8[0] = 0;
    LOBYTE(v7[0]) = 0;
    sub_244DBEA34(v1, v8, v7);
    uint64_t v4 = *((void *)v1 + 212);
    if (v4)
    {
      do
      {
        uint64_t v5 = *(void *)(v4 + 192);
        *(void *)(v4 + 192) = 0;
        *(void *)(v4 + 200) = 0;
        uint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = 0;
    *((void *)v1 + 212) = 0;
    do
    {
      if (BYTE1(v1[v6 + 122])) {
        sub_244CA9250((uint64_t)&v1[v6 + 52]);
      }
      v6 += 72;
    }
    while (v6 != 288);
    sub_244DC95CC((uint64_t)(v1 + 340));
    sub_244CC6478((void *)v1 + 186, (uint64_t)(v1 + 368), (unsigned int (*)(uint64_t))sub_244DC336C);
    sub_244CC6478((void *)v1 + 193, (uint64_t)(v1 + 382), (unsigned int (*)(uint64_t))sub_244DC3388);
    sub_244CC6478((void *)v1 + 200, (uint64_t)(v1 + 396), (unsigned int (*)(uint64_t))sub_244DC33A4);
    uint64_t result = sub_244D663E8(*((int **)v1 + 11), 0x10000, (uint64_t)v7);
    *((void *)v1 + 217) = 0;
    *((unsigned char *)v1 + 1768) = 0;
  }
  return result;
}

void sub_244DBE398(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *(unsigned char *)(a2 + 1720) = 0;
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)int v15 = 0u;
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a2 + 1744) + 16))(*(void *)(a2 + 1744));
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v3 + 24))(v3, &v12))
    {
      char v4 = 0;
      do
      {
        while (1)
        {
          *(void *)long long buf = &v12;
          if (sub_244CC6478((void *)(a2 + 1656), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244DC4004) == 1)break; {
          uint64_t v6 = sub_244CC4D84(0x90uLL);
          }
          if (!v6)
          {
            int v9 = sub_244CC8484(0x23u, "InteractionModel");
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Failed to create SubscriptionResumptionSessionEstablisher", buf, 2u);
            }
            if (sub_244CC4E58(2u)) {
              sub_244CC4DE0(0x23u, 2);
            }
            goto LABEL_17;
          }
          int v7 = v6;
          sub_244DD1CD0((uint64_t)v6);
          sub_244DD20E4(v8, *(void *)(a2 + 1736), &v12, (uint64_t)buf);
          if (*(_DWORD *)buf)
          {
            int v10 = sub_244CC8484(0x23u, "InteractionModel");
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v13;
              _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Failed to ResumeSubscription 0x%x", buf, 8u);
            }
            if (sub_244CC4E58(2u)) {
              sub_244CC4DE0(0x23u, 2);
            }
            uint64_t v11 = 0;
            sub_244DC401C((int)&v11, v7);
            goto LABEL_17;
          }
          char v4 = 1;
          if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 24))(v3, &v12) & 1) == 0) {
            goto LABEL_17;
          }
        }
        uint64_t v5 = sub_244CC8484(0x23u, "InteractionModel");
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v13;
          _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "Skip resuming live subscriptionId %u", buf, 8u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(0x23u, 2);
        }
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 24))(v3, &v12) & 1) != 0);
      if (v4) {
        goto LABEL_17;
      }
    }
    *(_DWORD *)(a2 + 1716) = 0;
LABEL_17:
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    v15[1] = 0;
    if (v15[0])
    {
      j__free(v15[0]);
      v15[0] = 0;
    }
    v14[1] = 0;
    if (v14[0]) {
      j__free(v14[0]);
    }
  }
}

void *sub_244DBE728(void *a1)
{
  sub_244D6A434("src/app/InteractionModelEngine.cpp", 327);
  v4[0] = 0;
  v3[0] = 0;
  return sub_244DBEA34(a1, v4, v3);
}

uint64_t sub_244DBE778(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1640);
}

uint64_t sub_244DBE780(uint64_t a1, char a2)
{
  unsigned int v3 = 0;
  v4[0] = a2;
  uint64_t v5 = &v3;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_244DC33C0);
  return v3;
}

uint64_t sub_244DBE7CC(uint64_t a1, char a2, char a3)
{
  unsigned int v4 = 0;
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v6 = &v4;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DC33E8);
  return v4;
}

uint64_t sub_244DBE81C(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 1640) <= (unint64_t)a2) {
    return 0;
  }
  int v4 = 0;
  unsigned int v5 = a2;
  uint64_t v3 = 0;
  uint64_t v6 = &v4;
  int v7 = &v3;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_244DC3450);
  return v3;
}

uint64_t sub_244DBE880(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  while (!*(unsigned char *)(a1 + v2 + 489))
  {
LABEL_5:
    v2 += 288;
    if (v2 == 1152) {
      return 0;
    }
  }
  if (v3 != a2)
  {
    ++v3;
    goto LABEL_5;
  }
  return a1 + v2 + 208;
}

uint64_t sub_244DBE8C0(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(result) = 0;
  for (uint64_t i = 489; i != 1641; i += 288)
  {
    if (*(unsigned char *)(v1 + i)) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
  }
  return result;
}

uint64_t sub_244DBE8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244D6A434("src/app/InteractionModelEngine.cpp", 297);
  uint64_t v9 = *(void *)(a1 + 1696);
  if (v9)
  {
    while (1)
    {
      uint64_t result = v9;
      uint64_t v9 = *(void *)(v9 + 192);
      if (*(unsigned char *)(result + 80) == 1
        && *(_DWORD *)(result + 60) == a3
        && *(unsigned __int8 *)(result + 72) == *(unsigned __int8 *)(a2 + 8)
        && *(void *)(result + 64) == *(void *)a2)
      {
        break;
      }
      if (!v9) {
        goto LABEL_7;
      }
    }
    LODWORD(v12) = 0;
    *((void *)&v12 + 1) = "src/app/InteractionModelEngine.cpp";
    int v13 = 305;
    uint64_t result = (uint64_t)sub_244DCDDEC(result, &v12, 1);
    int v11 = 0;
    int v10 = 306;
  }
  else
  {
LABEL_7:
    int v10 = 311;
    int v11 = 16;
  }
  *(_DWORD *)a4 = v11;
  *(void *)(a4 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a4 + 16) = v10;
  return result;
}

void *sub_244DBE9C8(void *a1, char a2, uint64_t a3)
{
  sub_244D6A434("src/app/InteractionModelEngine.cpp", 316);
  v9[0] = 1;
  v9[1] = a2;
  v7[0] = 1;
  uint64_t v8 = a3;
  return sub_244DBEA34(a1, v9, v7);
}

void *sub_244DBEA34(void *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = result[212];
  while (v3)
  {
    uint64_t v6 = v3;
    uint64_t v3 = *(void *)(v3 + 192);
    if (*(unsigned char *)(v6 + 80) == 1)
    {
      if (*a2)
      {
        uint64_t result = sub_2446F9190(a2);
        BOOL v7 = *(unsigned __int8 *)result == *(unsigned __int8 *)(v6 + 72);
      }
      else
      {
        BOOL v7 = 1;
      }
      if (*a3)
      {
        uint64_t result = sub_2446F7170(a3);
        BOOL v8 = *result == *(void *)(v6 + 64);
      }
      else
      {
        BOOL v8 = 1;
      }
      if (v7 && v8)
      {
        LODWORD(v9) = 0;
        *((void *)&v9 + 1) = "src/app/InteractionModelEngine.cpp";
        int v10 = 346;
        uint64_t result = sub_244DCDDEC(v6, &v9, 1);
      }
    }
  }
  return result;
}

void *sub_244DBEB1C(void *a1, char a2)
{
  sub_244D6A434("src/app/InteractionModelEngine.cpp", 321);
  v6[0] = 1;
  v6[1] = a2;
  v5[0] = 0;
  return sub_244DBEA34(a1, v6, v5);
}

uint64_t sub_244DBEB78(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int8 v4 = 0;
  v5[0] = a2;
  uint64_t v6 = a3;
  BOOL v7 = &v4;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DC3484);
  return v4;
}

uint64_t sub_244DBEBC4(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int8 v4 = 0;
  v5[0] = a2;
  uint64_t v6 = a3;
  BOOL v7 = &v4;
  sub_244CC6478((void *)(a1 + 1592), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DC3484);
  return v4;
}

uint64_t sub_244DBEC10(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 1744) + 16))(*(void *)(a1 + 1744));
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v5;
  *(_OWORD *)long long v12 = 0u;
  *(_OWORD *)int v13 = 0u;
  do
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 24))(v6, &v10);
    if (!v7) {
      break;
    }
  }
  while (v11 != a2 || v10 != a3);
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  v13[1] = 0;
  if (v13[0])
  {
    j__free(v13[0]);
    v13[0] = 0;
  }
  v12[1] = 0;
  if (v12[0]) {
    j__free(v12[0]);
  }
  return v7;
}

uint64_t sub_244DBED1C(uint64_t a1, int a2, uint64_t a3)
{
  return sub_244DBEC10(a1 - 64, a2, a3);
}

void sub_244DBED24(uint64_t a1, void (***a2)(void))
{
}

void sub_244DBED2C(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    unsigned __int8 v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    uint64_t v5 = v4;
    *unsigned __int8 v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void sub_244DBEDDC(uint64_t a1, void (***a2)(void))
{
}

void sub_244DBEDE4()
{
  uint64_t v0 = sub_244CC8484(0x1Bu, "Support");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    uint64_t v2 = "src/app/InteractionModelEngine.cpp";
    __int16 v3 = 1024;
    int v4 = 419;
    __int16 v5 = 2080;
    uint64_t v6 = "false";
    _os_log_impl(&dword_2446BD000, v0, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0x1Bu, 1);
  }
  abort();
}

void sub_244DBEEAC()
{
}

uint64_t sub_244DBEEBC(uint64_t a1, void (***a2)(void))
{
  if (*(void (****)(void))(a1 + 1384) == a2) {
    int v3 = *(_DWORD *)(a1 + 1376) - 1;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 1376) = v3;
  sub_244DBED2C(a1 + 1640, a2);

  return sub_244DBEF18(a1);
}

uint64_t sub_244DBEF18(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 1720))
  {
    uint64_t v1 = result;
    uint64_t result = sub_244DBF088(result);
    if (result)
    {
      *(unsigned char *)(v1 + 1720) = 1;
      unsigned int v2 = *(_DWORD *)(v1 + 1716);
      if (v2 <= 0xA) {
        sub_244CC5F04(v2);
      }
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(*(void *)(*(void *)(v1 + 88) + 88) + 24)
                                                    + 40))(buf);
      ++*(_DWORD *)(v1 + 1716);
      int v3 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(_DWORD *)(v1 + 1716);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v4;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "Schedule subscription resumption when failing to establish session, Retries: %u", buf, 8u);
      }
      uint64_t result = sub_244CC4E58(2u);
      if (result) {
        return sub_244CC4DE0(0x23u, 2);
      }
    }
  }
  return result;
}

uint64_t sub_244DBF080(uint64_t a1, void (***a2)(void))
{
  return sub_244DBEEBC(a1 - 40, a2);
}

uint64_t sub_244DBF088(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1744);
  if (!v2) {
    return 0;
  }
  *(_OWORD *)long long v9 = 0u;
  *(_OWORD *)BOOL v8 = 0u;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  int v4 = (void *)(a1 + 1656);
  do
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v3 + 24))(v3, v7);
    if (!v5) {
      break;
    }
    uint64_t v10 = v7;
  }
  while (sub_244CC6478(v4, (uint64_t)&v10, (unsigned int (*)(uint64_t))sub_244DC40A8) == 1);
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  v9[1] = 0;
  if (v9[0])
  {
    j__free(v9[0]);
    v9[0] = 0;
  }
  v8[1] = 0;
  if (v8[0]) {
    j__free(v8[0]);
  }
  return v5;
}

uint64_t sub_244DBF1B0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 1716);
  if (v1 <= 0xA) {
    return 300 * sub_244CC5F04(v1) + 300;
  }
  else {
    return 21600;
  }
}

uint64_t sub_244DBF1E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v11 = a1;
  *(void *)long long buf = a1;
  BOOL v8 = sub_244DBF2C0((unint64_t *)(a1 + 96), buf, &v11);
  if (v8)
  {
    sub_244CA1FF0((uint64_t)v8, a2, a4, a5);
    return 0;
  }
  else
  {
    uint64_t v10 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "no resource for Invoke interaction", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x23u, 2);
    }
    return 156;
  }
}

void *sub_244DBF2C0(unint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = sub_244CC4D84(0x2C0uLL);
  uint64_t v7 = v6;
  if (v6)
  {
    if (*a2) {
      uint64_t v8 = *a2 + 24;
    }
    else {
      uint64_t v8 = 0;
    }
    if (*a3) {
      uint64_t v9 = *a3 + 32;
    }
    else {
      uint64_t v9 = 0;
    }
    sub_244DC3588((uint64_t)v6, v8, v9);
    uint64_t v10 = sub_244CC4D84(0x18uLL);
    if (v10)
    {
      *uint64_t v10 = v7;
      v10[1] = a1 + 2;
      void v10[2] = 0;
      void v10[2] = a1[4];
      *(void *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      unint64_t v11 = a1[1];
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11) {
        a1[1] = v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

void sub_244DBF378(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  sub_244CB3988((uint64_t)v48);
  sub_244CCF1AC(a3, (uint64_t)v48);
  *a4 = 0;
  *a5 = 0;
  sub_244CB54B4((uint64_t)v48, 256, v45);
  int v12 = v45[0];
  if (LODWORD(v45[0]))
  {
LABEL_2:
    int v13 = HIDWORD(v45[0]);
    uint64_t v14 = (const char *)v45[1];
    int v15 = v46;
    int v16 = v47;
    BOOL v17 = v12 == 33;
    if (v12 == 33)
    {
      int v12 = 0;
      uint64_t v14 = "src/app/InteractionModelEngine.cpp";
    }
    *(_DWORD *)a6 = v12;
    *(_DWORD *)(a6 + 4) = v13;
    *(void *)(a6 + 8) = v14;
    if (v17) {
      int v18 = 553;
    }
    else {
      int v18 = v15;
    }
    *(_DWORD *)(a6 + 16) = v18;
    *(_DWORD *)(a6 + 20) = v16;
  }
  else
  {
    while (1)
    {
      sub_244CCF15C((uint64_t)v45);
      int v43 = -1;
      uint64_t v42 = -1;
      uint64_t v44 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(void *)a6 = 0;
      sub_244CCEFC8((uint64_t)v45, (uint64_t)v48, a6);
      if (*(_DWORD *)a6) {
        break;
      }
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      sub_244CCBF60((int *)v45, (int *)&v42, a6);
      if (*(_DWORD *)a6) {
        break;
      }
      __int16 v19 = v43;
      if ((unsigned __int16)v43 == 0xFFFF
        || (uint64_t v20 = v42, v42 == -1)
        || (int v21 = (const char *)HIDWORD(v42), HIDWORD(v42) == -1))
      {
        sub_244CAB494((uint64_t)&v38, *(void *)(a1 + 1752), (uint64_t)&v42);
        while (v38)
        {
          uint64_t v26 = v40;
          unsigned __int8 v25 = (const char *)v41;
          unsigned int v33 = v40;
          __int16 v34 = v39;
          char v35 = 1;
          char v36 = 0;
          char v37 = 0;
          int v27 = sub_244D908A4();
          unsigned int v29 = sub_244BCAD3C(v26, v25, v28);
          sub_244D90050(v27, a2, (uint64_t)&v33, v29, &v30);
          if (!v30) {
            goto LABEL_16;
          }
          sub_244CAB4E4((uint64_t)&v38);
        }
      }
      else if (sub_244B19918((unsigned __int16)v43, v42, SHIDWORD(v42)))
      {
        LODWORD(v30) = v20;
        WORD2(v30) = v19;
        BYTE6(v30) = 1;
        int v31 = HIDWORD(v42);
        char v32 = 1;
        uint64_t v22 = sub_244D908A4();
        unsigned int v24 = sub_244BCAD3C(v20, v21, v23);
        sub_244D90050(v22, a2, (uint64_t)&v30, v24, &v38);
        if (!v38) {
LABEL_16:
        }
          *a4 = 1;
      }
      ++*a5;
      sub_244CB54B4((uint64_t)v48, 256, v45);
      int v12 = v45[0];
      if (LODWORD(v45[0])) {
        goto LABEL_2;
      }
    }
  }
}

uint64_t sub_244DBF5C0(uint64_t a1)
{
  return *(void *)(a1 + 1752);
}

BOOL sub_244DBF5C8(uint64_t a1, unsigned __int16 *a2)
{
  return sub_244B19918(*a2, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2));
}

void sub_244DBF5D8(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  sub_244CB3988((uint64_t)v26);
  sub_244CCF1AC(a2, (uint64_t)v26);
  *a3 = 0;
  *a4 = 0;
  sub_244CB54B4((uint64_t)v26, 256, v23);
  int v10 = v23[0];
  if (LODWORD(v23[0]))
  {
LABEL_2:
    int v11 = HIDWORD(v23[0]);
    int v12 = (const char *)v23[1];
    int v13 = v24;
    int v14 = v25;
    BOOL v15 = v10 == 33;
    if (v10 == 33)
    {
      int v10 = 0;
      int v12 = "src/app/InteractionModelEngine.cpp";
    }
    *(_DWORD *)a5 = v10;
    *(_DWORD *)(a5 + 4) = v11;
    *(void *)(a5 + 8) = v12;
    if (v15) {
      int v16 = 614;
    }
    else {
      int v16 = v13;
    }
    *(_DWORD *)(a5 + 16) = v16;
    *(_DWORD *)(a5 + 20) = v14;
  }
  else
  {
    while (1)
    {
      sub_244CCF15C((uint64_t)v23);
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      sub_244CCEFC8((uint64_t)v23, (uint64_t)v26, a5);
      if (*(_DWORD *)a5) {
        break;
      }
      uint64_t v20 = -1;
      unsigned __int16 v21 = -1;
      char v22 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      sub_244CCE0BC((int *)v23, (uint64_t)&v20, a5);
      if (*(_DWORD *)a5) {
        break;
      }
      ++*a4;
      if (!*a3)
      {
        if (v21 == 0xFFFF)
        {
          unsigned __int16 v17 = 0;
          do
          {
            if (sub_244855D0C() <= v17) {
              break;
            }
            if (sub_244855CE8(v17))
            {
              __int16 v18 = sub_2448565A0(v17);
              int v19 = sub_244DBF784(v18, (int *)&v20, a1);
              *a3 = v19;
            }
            else
            {
              int v19 = *a3;
            }
            ++v17;
          }
          while (!v19);
        }
        else
        {
          *a3 = sub_244DBF784(v21, (int *)&v20, a1);
        }
      }
      sub_244CB54B4((uint64_t)v26, 256, v23);
      int v10 = v23[0];
      if (LODWORD(v23[0])) {
        goto LABEL_2;
      }
    }
  }
}

uint64_t sub_244DBF784(__int16 a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  if (v6 == -1)
  {
    uint64_t result = sub_244856270(a1);
    if (result)
    {
      uint64_t v8 = result;
      if (*(unsigned char *)(result + 8))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          uint64_t result = sub_244DC2F10(a1, (int *)(*(void *)v8 + v9), (uint64_t)a2, a3);
          if (result) {
            break;
          }
          ++v10;
          v9 += 64;
        }
        while (v10 < *(unsigned __int8 *)(v8 + 8));
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t result = sub_244855D80(a1, v6);
    if (result)
    {
      return sub_244DC2F10(a1, (int *)result, (uint64_t)a2, a3);
    }
  }
  return result;
}

uint64_t sub_244DBF858(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, BOOL a5)
{
  BOOL v5 = a5;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = a2;
  BOOL v40 = a5;
  uint64_t v9 = sub_244CC8484(0x23u, "InteractionModel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    unint64_t v10 = "Read";
    if (v5) {
      unint64_t v10 = "Subscribe";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "Received %s request", buf, 0xCu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x23u, 3);
  }
  if (v5)
  {
    sub_244CB3988((uint64_t)buf);
    char v45 = 0;
    char v39 = 1;
    sub_24479B4A8(a2, v38);
    int v11 = *(unsigned __int8 *)(*(void *)v38 + 24);
    (*(void (**)(_WORD *))(**(void **)v38 + 32))(*(_WORD **)v38);
    if (v11)
    {
      sub_244CC8F2C(*a4);
      *(void *)uint64_t v38 = *a4;
      sub_2446DE1E4((uint64_t)buf, v38);
      if (*(void *)v38) {
        sub_244CC8A0C(*(_WORD **)v38);
      }
      sub_244CCF15C((uint64_t)v38);
      sub_244CCF054((uint64_t)v38, (uint64_t)buf, v35);
      if (!LODWORD(v35[0]))
      {
        sub_244CCBBC8(v38, &v39, v35);
        if (!LODWORD(v35[0]))
        {
          if (!v39)
          {
            v35[0] = a2;
            sub_244CC6478(a1 + 207, (uint64_t)v35, (unsigned int (*)(uint64_t))sub_244DC3644);
          }
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          sub_244CCF15C((uint64_t)v35);
          __int16 v34 = 0;
          long long v32 = 0uLL;
          uint64_t v33 = 0;
          sub_244CCFBBC(v38, (uint64_t)v35, &v32);
          if (v32 == 33
            || !v32
            && (sub_24479B4A8(a2, &v42),
                uint64_t v12 = sub_244D879D8(v42),
                (*(void (**)(void *__return_ptr))(*(void *)v12 + 64))(v31),
                (*(void (**)(void))(*(void *)v42 + 32))(v42),
                sub_244DBF378((uint64_t)a1, (uint64_t)v31, (uint64_t)v35, (unsigned char *)&v34 + 1, &v37, (uint64_t)&v42),
                long long v32 = v42,
                uint64_t v33 = v43,
                !v42))
          {
            sub_244CCF15C((uint64_t)v31);
            sub_244CCF23C(v38, (uint64_t)v31, &v42);
            long long v32 = v42;
            uint64_t v33 = v43;
            BOOL v5 = 1;
            if (v42 != 33)
            {
              if (v42) {
                goto LABEL_32;
              }
              sub_24479B4A8(a2, &v29);
              uint64_t v13 = sub_244D879D8(v29);
              (*(void (**)(long long *__return_ptr))(*(void *)v13 + 64))(&v42);
              (*(void (**)(void))(*(void *)v29 + 32))(v29);
              sub_244DBF5D8((uint64_t)&v42, (uint64_t)v31, &v34, &v36, (uint64_t)&v29);
              long long v32 = v29;
              uint64_t v33 = v30;
              if (v29) {
                goto LABEL_32;
              }
              BOOL v5 = v36 == 0;
            }
            if (v37 || !v5)
            {
              if (HIBYTE(v34) | v34)
              {
                sub_24479B4A8(a2, &v42);
                sub_244DC0290((uint64_t)a1, *(unsigned char *)(v42 + 24));
                (*(void (**)(void))(*(void *)v42 + 32))(v42);
                BOOL v5 = 0;
                goto LABEL_32;
              }
              uint64_t v23 = sub_244CC8484(0x23u, "InteractionModel");
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                sub_24479B4A8(a2, &v29);
                int v24 = *(unsigned __int8 *)(v29 + 24);
                sub_24479B4A8(a2, &v28);
                int v25 = *(_DWORD *)(sub_244D879D8(v28) + 76);
                sub_24479B4A8(a2, &v27);
                uint64_t v26 = *(void *)(sub_244D879D8(v27) + 72);
                LODWORD(v42) = 67109632;
                DWORD1(v42) = v24;
                WORD4(v42) = 1024;
                *(_DWORD *)((char *)&v42 + 10) = v25;
                HIWORD(v42) = 1024;
                LODWORD(v43) = v26;
                _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_ERROR, "Subscription from [%u:%08X%08X] has no access at all. Rejecting request.", (uint8_t *)&v42, 0x14u);
                (*(void (**)(uint64_t))(*(void *)v27 + 32))(v27);
                (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
                (*(void (**)(void))(*(void *)v29 + 32))(v29);
              }
              BOOL v5 = 1;
              if (!sub_244CC4E58(1u)) {
                goto LABEL_32;
              }
            }
            else
            {
              int v14 = sub_244CC8484(0x23u, "InteractionModel");
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
              {
                sub_24479B4A8(a2, &v29);
                int v15 = *(unsigned __int8 *)(v29 + 24);
                sub_24479B4A8(a2, &v28);
                int v16 = *(_DWORD *)(sub_244D879D8(v28) + 76);
                sub_24479B4A8(a2, &v27);
                uint64_t v17 = *(void *)(sub_244D879D8(v27) + 72);
                LODWORD(v42) = 67109632;
                DWORD1(v42) = v15;
                WORD4(v42) = 1024;
                *(_DWORD *)((char *)&v42 + 10) = v16;
                HIWORD(v42) = 1024;
                LODWORD(v43) = v17;
                _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Subscription from [%u:%08X%08X] has no attribute or event paths. Rejecting request.", (uint8_t *)&v42, 0x14u);
                (*(void (**)(uint64_t))(*(void *)v27 + 32))(v27);
                (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
                (*(void (**)(void))(*(void *)v29 + 32))(v29);
              }
              BOOL v5 = 1;
              if (!sub_244CC4E58(1u)) {
                goto LABEL_32;
              }
            }
            sub_24479B4A8(a2, &v42);
            sub_24479B4A8(a2, &v29);
            sub_244D879D8(v29);
            sub_24479B4A8(a2, &v28);
            sub_244D879D8(v28);
            BOOL v5 = 1;
            sub_244CC4DE0(0x23u, 1);
            (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
            (*(void (**)(void))(*(void *)v29 + 32))(v29);
            (*(void (**)(void))(*(void *)v42 + 32))(v42);
LABEL_32:
            LOBYTE(v18) = 0x80;
            goto LABEL_33;
          }
        }
      }
LABEL_31:
      BOOL v5 = 1;
      goto LABEL_32;
    }
    LOBYTE(v18) = 126;
  }
  else
  {
    sub_244CB3988((uint64_t)buf);
    char v45 = 0;
    sub_244CC8F2C(*a4);
    *(void *)uint64_t v38 = *a4;
    sub_2446DE1E4((uint64_t)buf, v38);
    if (*(void *)v38) {
      sub_244CC8A0C(*(_WORD **)v38);
    }
    sub_244CCF15C((uint64_t)v38);
    sub_244CCF054((uint64_t)v38, (uint64_t)buf, v35);
    if (LODWORD(v35[0])) {
      goto LABEL_31;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    sub_244CCF15C((uint64_t)v35);
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    sub_244CCF1C8(v38, (uint64_t)v35, &v32);
    if (v32 != 33)
    {
      if (v32) {
        goto LABEL_31;
      }
      sub_244CB3988((uint64_t)v31);
      sub_244CCF1AC((uint64_t)v35, (uint64_t)v31);
      sub_244CB5F2C((uint64_t)v31, &v37, 0, &v42);
      if (v42) {
        goto LABEL_31;
      }
    }
    sub_244CCF15C((uint64_t)v31);
    sub_244CCEB54(v38, (uint64_t)v31, &v42);
    long long v32 = v42;
    uint64_t v33 = v43;
    if (v42 != 33)
    {
      if (v42) {
        goto LABEL_31;
      }
      sub_244CB3988((uint64_t)&v42);
      sub_244CCF1AC((uint64_t)v31, (uint64_t)&v42);
      sub_244CB5F2C((uint64_t)&v42, &v36, 0, &v29);
      if (v29) {
        goto LABEL_31;
      }
    }
    sub_24479B4A8(a2, &v42);
    int v18 = sub_244DC0498((uint64_t)a1, *(unsigned __int8 *)(v42 + 24), v37, v36);
    (*(void (**)(void))(*(void *)v42 + 32))(v42);
    BOOL v5 = v18 != 0;
    if (!v18) {
      LOBYTE(v18) = 0x80;
    }
  }
LABEL_33:
  if (v45) {
    sub_244CC8A0C(v45);
  }
  if (!v5)
  {
    *(void *)long long buf = a1[219];
    int v19 = sub_244DC0730(a1 + 205, (uint64_t)a1, &v41, (char *)&v40, a1 + 183, (uint64_t *)buf);
    if (v19)
    {
      sub_244CA6064((uint64_t)v19, a4);
      LOBYTE(v18) = 0;
    }
    else
    {
      uint64_t v20 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        if (v40) {
          unsigned __int16 v21 = "Subscribe";
        }
        else {
          unsigned __int16 v21 = "Read";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v21;
        _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_DEFAULT, "no resource for %s interaction", buf, 0xCu);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x23u, 2);
      }
      LOBYTE(v18) = -119;
    }
  }
  return v18;
}

uint64_t sub_244DC0290(uint64_t a1, char a2)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  uint64_t v13 = &v19;
  int v14 = &v18;
  int v4 = (void *)(a1 + 1656);
  int v15 = &v17;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_244DC2FE4);
  if (v17 == -1)
  {
    do
    {
      BOOL v5 = *(uint64_t **)(a1 + 1728);
      sub_2446D8144(v5, (uint64_t)&v13);
      if (v15 == v16) {
        break;
      }
      BOOL v6 = v16 == (uint64_t *)16 && v15 == (uint64_t *)16;
      char v7 = 0;
      if (!v6 || v13 != v5)
      {
LABEL_10:
        uint64_t v9 = sub_2446D26A0((uint64_t *)&v13);
        if (v17 == -1)
        {
          if (v7)
          {
            char v7 = 1;
          }
          else
          {
            char v7 = sub_244DC1338(a1, *(unsigned char *)(v9 + 137), 0);
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            uint64_t v17 = 0;
            v20[0] = &v19;
            v20[1] = &v18;
            void v20[2] = &v17;
            sub_244CC6478(v4, (uint64_t)v20, (unsigned int (*)(uint64_t))sub_244DC2FE4);
          }
          unint64_t v10 = v15;
          while (1)
          {
            if (v10 < v16)
            {
              unint64_t v10 = (uint64_t *)((char *)v10 + 1);
              int v15 = v10;
            }
            if (v10 == v16) {
              break;
            }
            if (BYTE1(v13[19 * (void)v10 + 17])
              && (unint64_t)(v13[19 * (void)v10] - 1) < 0xFFFFFFEFFFFFFFFFLL)
            {
              if (v16 != (uint64_t *)16 || v10 != (uint64_t *)16 || v13 != v5) {
                goto LABEL_10;
              }
              break;
            }
          }
        }
      }
    }
    while (v7);
    if (v17 == -1)
    {
      do
      {
        char v11 = sub_244DC1338(a1, a2, 1);
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        uint64_t v13 = &v19;
        int v14 = &v18;
        int v15 = &v17;
        sub_244CC6478(v4, (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_244DC2FE4);
      }
      while (v17 == -1 && (v11 & 1) != 0);
      if ((v11 & 1) == 0) {
        sub_244E296B0();
      }
    }
  }
  return 1;
}

uint64_t sub_244DC0498(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v22 = a2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = &v21;
  int v24 = &v20;
  int v25 = &v19;
  uint64_t v8 = (void *)(a1 + 1656);
  uint64_t v19 = 0;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)&v23, (unsigned int (*)(uint64_t))sub_244DC3068);
  if (v19 != -1) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 1728) + 2642) == 16 && a2 == 0) {
    return 156;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  uint64_t v23 = (uint64_t *)&v22;
  int v24 = &v18;
  int v25 = &v17;
  uint64_t v26 = &v16;
  sub_244CC6478(v8, (uint64_t)&v23, (unsigned int (*)(uint64_t))sub_244DC3BB0);
  if ((unint64_t)(v18 + a3) > 9) {
    return 156;
  }
  uint64_t result = 156;
  if ((unint64_t)(v17 + a4) <= 9 && !v16)
  {
    while (1)
    {
      int v11 = sub_244DC1544(a1, 0);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      uint64_t v23 = &v21;
      int v24 = &v20;
      int v25 = &v19;
      sub_244CC6478(v8, (uint64_t)&v23, (unsigned int (*)(uint64_t))sub_244DC3068);
      if (v19 != -1) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 1728);
      if (*(unsigned char *)(v12 + 2642) != 16 || (v11 & 1) == 0)
      {
        sub_2446D8144(*(void **)(a1 + 1728), (uint64_t)&v23);
        if (v25 != v26)
        {
          if (v26 != (uint64_t *)16 || v25 != (uint64_t *)16) {
            goto LABEL_22;
          }
          uint64_t v13 = (uint64_t)v23;
LABEL_19:
          if (v13 != v12)
          {
LABEL_22:
            uint64_t v14 = sub_2446D26A0((uint64_t *)&v23);
            if ((_BYTE)v11)
            {
              int v11 = 1;
            }
            else
            {
              int v11 = sub_244DC1544(a1, *(unsigned char *)(v14 + 137));
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v19 = 0;
              v27[0] = &v21;
              v27[1] = &v20;
              v27[2] = &v19;
              sub_244CC6478(v8, (uint64_t)v27, (unsigned int (*)(uint64_t))sub_244DC3068);
            }
            if (v19 == -1)
            {
              unint64_t v15 = (unint64_t)v25;
              uint64_t v13 = (uint64_t)v23;
              while (1)
              {
                if (v15 < (unint64_t)v26) {
                  int v25 = (uint64_t *)++v15;
                }
                if ((uint64_t *)v15 == v26) {
                  break;
                }
                if (BYTE1(v23[19 * v15 + 17]) && (unint64_t)(v23[19 * v15] - 1) < 0xFFFFFFEFFFFFFFFFLL)
                {
                  if (v26 == (uint64_t *)16 && v15 == 16) {
                    goto LABEL_19;
                  }
                  goto LABEL_22;
                }
              }
            }
          }
        }
        if (!v11)
        {
          if (v19 == -1) {
            sub_244E29728();
          }
          return 0;
        }
      }
    }
  }
  return result;
}

void *sub_244DC0730(unint64_t *a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = sub_244CC4D84(0xE0uLL);
  uint64_t v13 = v12;
  if (v12)
  {
    sub_244CA56CC((uint64_t)v12, a2 + 40, *a3, *a4, *a5, *a6);
    uint64_t v14 = sub_244CC4D84(0x18uLL);
    if (v14)
    {
      void *v14 = v13;
      v14[1] = a1 + 2;
      char v14[2] = 0;
      char v14[2] = a1[4];
      *(void *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      unint64_t v15 = a1[1];
      unint64_t v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15) {
        a1[1] = v16;
      }
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

uint64_t sub_244DC07F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v9 = sub_244CC8484(0x23u, "InteractionModel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "Received Write request", v16, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0x23u, 3);
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = a1 + v10;
    if (!*(unsigned char *)(a1 + v10 + 489)) {
      break;
    }
    v10 += 288;
    if (v10 == 1152)
    {
      uint64_t v12 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v16 = 0;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "no resource for write interaction", v16, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x23u, 2);
      }
      return 156;
    }
  }
  uint64_t v13 = a1 + 80;
  uint64_t v14 = v11 + 208;
  sub_244CA90C0(v11 + 208, v13, (uint64_t)v16);
  if (*(_DWORD *)v16) {
    return 156;
  }
  return sub_244CA997C(v14, a2, a4, a5);
}

uint64_t sub_244DC0968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v11 = sub_244DC0A94((unint64_t *)(a1 + 152), &v15);
  if (v11)
  {
    *a5 = 0;
    *(void *)(a2 + 40) = v11;
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2, a3, a4);
  }
  else
  {
    uint64_t v13 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "no resource for Timed interaction", v14, 2u);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x23u, 2);
    }
    *a5 = -100;
    *(_DWORD *)a6 = 11;
    *(void *)(a6 + 8) = "src/app/InteractionModelEngine.cpp";
    *(_DWORD *)(a6 + 16) = 834;
  }
  return result;
}

unsigned char *sub_244DC0A94(unint64_t *a1, void *a2)
{
  int v4 = sub_244CC4D84(0x20uLL);
  BOOL v5 = v4;
  if (v4)
  {
    uint64_t v6 = *a2 + 72;
    BOOL v7 = *a2 == 0;
    *(void *)int v4 = &unk_26F958768;
    if (v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v6;
    }
    unsigned char v4[8] = 0;
    *((void *)v4 + 2) = v8;
    uint64_t v9 = sub_244CC4D84(0x18uLL);
    if (v9)
    {
      *uint64_t v9 = v5;
      v9[1] = a1 + 2;
      unsigned char v9[2] = 0;
      unsigned char v9[2] = a1[4];
      *(void *)(a1[4] + 8) = v9;
      a1[4] = (unint64_t)v9;
      unint64_t v10 = a1[1];
      unint64_t v11 = *a1 + 1;
      *a1 = v11;
      if (v11 > v10) {
        a1[1] = v11;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_244DC0B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v18);
  uint64_t v19 = 0;
  sub_244CC8F2C(*a4);
  *(void *)uint64_t v17 = *a4;
  sub_2446DE1E4((uint64_t)v18, v17);
  if (*(void *)v17) {
    sub_244CC8A0C(*(_WORD **)v17);
  }
  sub_244CCF15C((uint64_t)v17);
  sub_244CCF054((uint64_t)v17, (uint64_t)v18, buf);
  if (*(_DWORD *)buf
    || (int v16 = 0, sub_244CCB970(v17, &v16, buf), *(_DWORD *)buf)
    || (sub_244CCF0D0((uint64_t)v17, buf), *(_DWORD *)buf))
  {
    uint64_t v7 = 128;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 1696);
    if (!v9) {
      goto LABEL_24;
    }
    uint64_t v10 = 0;
    do
    {
      sub_24479B4A8(a2, buf);
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)buf + 48))(*(void *)buf);
      unsigned __int8 v13 = v12;
      (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
      if (*(unsigned __int8 *)(v9 + 72) == v13 && *(void *)(v9 + 64) == v11)
      {
        sub_244DD1A58(v9, (uint64_t)"unsolicited message");
        (*(void (**)(void, uint64_t))(**(void **)(v9 + 40) + 112))(*(void *)(v9 + 40), v9);
        if (*(unsigned char *)(v9 + 48) == 3 && *(_DWORD *)(v9 + 60) == v16)
        {
          uint64_t v14 = v10 ? v10 : v9;
          if (*(unsigned char *)(v9 + 80) == 1) {
            uint64_t v10 = v14;
          }
        }
      }
      uint64_t v9 = *(void *)(v9 + 192);
    }
    while (v9);
    if (v10)
    {
      sub_244DCFAA4(v10, a2, a4);
      uint64_t v7 = 0;
    }
    else
    {
LABEL_24:
      uint64_t v15 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_INFO, "Received report with invalid subscriptionId %u", buf, 8u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0x23u, 3);
      }
      uint64_t v7 = 125;
    }
  }
  if (v19) {
    sub_244CC8A0C(v19);
  }
  return v7;
}

uint64_t sub_244DC0E10@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a3 + 16) = 908;
  return result;
}

void sub_244DC0E34(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v27 = 1;
  *(void *)(a1 + 1760) = a2;
  if (sub_244CA97BC(a2))
  {
    if (*((_WORD *)a3 + 2)
      || ((int v16 = *a3, v16 != 8) ? (v17 = v16 == 6) : (v17 = 1),
          !v17 ? (char v18 = 0) : (char v18 = 1),
          *((_WORD *)a3 + 3) != 1 || (v18 & 1) == 0))
    {
      uint64_t v11 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *a3;
        *(_DWORD *)long long buf = 67109120;
        int v29 = v12;
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Msg type %d not supported for group message", buf, 8u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x23u, 2);
      }
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/app/InteractionModelEngine.cpp";
      int v13 = 927;
      goto LABEL_40;
    }
  }
  else if (*((_WORD *)a3 + 2))
  {
    goto LABEL_9;
  }
  int v19 = *((unsigned __int16 *)a3 + 3);
  int v20 = *a3;
  if (v19 == 1 && v20 == 8)
  {
    int v26 = sub_244DBF1E8(a1, a2, v10, a4, 0);
    goto LABEL_37;
  }
  if (v19 == 1 && v20 == 2)
  {
    char v22 = (void *)a1;
    uint64_t v23 = a2;
    int v24 = a4;
    BOOL v25 = 0;
LABEL_36:
    int v26 = sub_244DBF858(v22, v23, v10, v24, v25);
    goto LABEL_37;
  }
  if (v19 == 1 && v20 == 6)
  {
    int v26 = sub_244DC07F8(a1, a2, v10, a4, 0);
    goto LABEL_37;
  }
  if (v19 == 1 && v20 == 3)
  {
    char v22 = (void *)a1;
    uint64_t v23 = a2;
    int v24 = a4;
    BOOL v25 = 1;
    goto LABEL_36;
  }
  if (v19 != 1 || v20 != 5)
  {
    if (v19 == 1 && v20 == 10)
    {
      sub_244DC0968(a1, a2, (uint64_t)a3, (uint64_t)a4, &v27, (uint64_t)buf);
      if (!v27) {
        goto LABEL_39;
      }
LABEL_38:
      if (!sub_244CA97BC(a2))
      {
        sub_244DD5B5C(a2, 0, a5);
        goto LABEL_42;
      }
      goto LABEL_39;
    }
LABEL_9:
    uint64_t v14 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *a3;
      *(_DWORD *)long long buf = 67109120;
      int v29 = v15;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "Msg type %d not supported", buf, 8u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x23u, 2);
    }
    goto LABEL_38;
  }
  int v26 = sub_244DC0B54(a1, a2, v10, a4);
LABEL_37:
  if (v26) {
    goto LABEL_38;
  }
LABEL_39:
  *(_DWORD *)a5 = 0;
  *(void *)(a5 + 8) = "src/app/InteractionModelEngine.cpp";
  int v13 = 968;
LABEL_40:
  *(_DWORD *)(a5 + 16) = v13;
LABEL_42:
  *(void *)(a1 + 1760) = 0;
}

void sub_244DC114C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t sub_244DC1154(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_244CC8484(0x23u, "InteractionModel");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = *(unsigned __int16 *)(a2 + 112);
    if (sub_244D64530(a2)) {
      int v5 = 105;
    }
    else {
      int v5 = 114;
    }
    *(_DWORD *)long long buf = 67109376;
    int v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Time out! Failed to receive IM response from Exchange: %u%c", buf, 0xEu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    sub_244D64530(a2);
    return sub_244CC4DE0(0x23u, 1);
  }
  return result;
}

uint64_t sub_244DC1270(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = *(void *)(a1 + 1696);
  if (result)
  {
    int v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(result + 192);
      if (*(void *)(result + 64) == a2 && *(unsigned __int8 *)(result + 72) == v5) {
        sub_244DCEE58(result);
      }
      uint64_t result = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_244DC12C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4)
{
  uint64_t result = *(void *)(a1 + 1696);
  if (result)
  {
    int v7 = a3;
    do
    {
      uint64_t v8 = *(void *)(result + 192);
      if (*(void *)(result + 64) == a2 && *(unsigned __int8 *)(result + 72) == v7) {
        sub_244DCEF68(result, a4);
      }
      uint64_t result = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_244DC1328(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 192) = *(void *)(result + 1696);
  *(void *)(result + 1696) = a2;
  return result;
}

uint64_t sub_244DC1338(uint64_t a1, char a2, char a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v17 = a2;
  unsigned int v3 = *(unsigned __int8 *)(*(void *)(a1 + 1728) + 2642);
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v14 = 0;
  if (!v3) {
    return 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0x90 / v3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v18[0] = &v17;
  v18[1] = &v16;
  void v18[2] = &v15;
  v18[3] = &v14;
  v18[4] = &v12;
  v18[5] = &v13;
  char v18[6] = &v11;
  v18[7] = &v10;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)v18, (unsigned int (*)(uint64_t))sub_244DC38D4);
  if (!v12 || (a3 & 1) == 0 && v16 <= v13 && v15 <= v13 && v14 <= 0x30 / v3) {
    return 0;
  }
  int v5 = *(_DWORD *)(v12 + 72);
  uint64_t v6 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = sub_244CA8E44(v12);
    (*(void (**)(void *__return_ptr))(*(void *)v7 + 64))(v18);
    *(_DWORD *)long long buf = 67109376;
    int v20 = LOBYTE(v18[0]);
    __int16 v21 = 1024;
    int v22 = v5;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Evicting Subscription ID %u:0x%x", buf, 0xEu);
  }
  if (sub_244CC4E58(2u))
  {
    uint64_t v8 = sub_244CA8E44(v12);
    (*(void (**)(void *__return_ptr))(*(void *)v8 + 64))(v18);
    sub_244CC4DE0(0xDu, 2);
  }
  sub_244CA5A38(v12, 0);
  return 1;
}

uint64_t sub_244DC1544(uint64_t a1, char a2)
{
  char v10 = a2;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  v11[0] = &v10;
  v11[1] = &v9;
  _OWORD v11[2] = &v8;
  void v11[3] = &v7;
  char v11[4] = &v6;
  v11[5] = &v5;
  _DWORD v11[6] = &v4;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)v11, (unsigned int (*)(uint64_t))sub_244DC3A44);
  uint64_t result = v6;
  if (v6)
  {
    if (v9 <= 9 && v8 <= 9 && v7 <= 1 && (v10 || *(unsigned char *)(*(void *)(a1 + 1728) + 2642) != 16))
    {
      return 0;
    }
    else
    {
      sub_244CA5A38(v6, 0);
      return 1;
    }
  }
  return result;
}

uint64_t sub_244DC161C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 1696);
  if (v2 == a2)
  {
    uint64_t v4 = (void *)(result + 1696);
  }
  else
  {
    do
    {
      if (!v2) {
        sub_244E297C8();
      }
      uint64_t v3 = v2;
      uint64_t v2 = *(void *)(v2 + 192);
    }
    while (v2 != a2);
    uint64_t v4 = (void *)(v3 + 192);
  }
  *uint64_t v4 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  return result;
}

uint64_t sub_244DC166C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1696);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    ++result;
    uint64_t v1 = *(void *)(v1 + 192);
  }
  while (v1);
  return result;
}

BOOL sub_244DC1690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 1696);
  do
  {
    uint64_t v3 = *v2;
    uint64_t v2 = (void *)(*v2 + 192);
  }
  while (v3 != a2 && v3 != 0);
  return v3 != 0;
}

uint64_t sub_244DC16B4(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = a1 + v6 + 208;
    BOOL v8 = v7 == a2 || *(unsigned char *)(a1 + v6 + 489) == 0;
    if (!v8 && sub_244DC1724(v7, a3)) {
      break;
    }
    v6 += 288;
    if (v6 == 1152) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_244DC1724(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 232);
  uint64_t v2 = (unsigned char *)(a1 + 232);
  if (v3 && (uint64_t v5 = sub_244CA14BC(v2), *(unsigned __int16 *)v5 == *a2) && *((_DWORD *)v5 + 1) == *((_DWORD *)a2 + 1)) {
    return *((_DWORD *)v5 + 2) == *((_DWORD *)a2 + 2);
  }
  else {
    return 0;
  }
}

uint64_t sub_244DC1788(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = a1 + v6 + 128;
    BOOL v8 = v7 == a2 || *(unsigned char *)(a1 + v6 + 409) == 0;
    if (!v8 && sub_244DC1724(v7, a3)) {
      break;
    }
    v6 += 288;
    if (v6 == 1152) {
      return 0;
    }
  }
  return 1;
}

void sub_244DC17F8(uint64_t a1, void **a2)
{
  int v3 = *a2;
  if (v3)
  {
    uint64_t v4 = a1 + 1472;
    do
    {
      uint64_t v5 = (void *)v3[2];
      sub_244DC1AC0(v4, v3);
      int v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

uint64_t sub_244DC1844@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (uint64_t)sub_244DC3C78((unint64_t *)(a1 + 1472));
  if (result)
  {
    uint64_t v8 = *a3;
    *(_DWORD *)(result + 8) = *((_DWORD *)a3 + 2);
    *(void *)uint64_t result = v8;
    *(void *)(result + 16) = *a2;
    *a2 = result;
    *a4 = 0;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    a4[2] = 1647;
  }
  else
  {
    unint64_t v9 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "AttributePath pool full", v10, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x23u, 1);
    }
    *(_DWORD *)a4 = 1480;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    *((_DWORD *)a4 + 4) = 1501;
  }
  return result;
}

void sub_244DC1944(uint64_t a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 1472;
    do
    {
      int v6 = *((unsigned __int16 *)v2 + 4);
      if (v6 == 0xFFFF
        || *v2 == -1
        || (int v7 = v2[1], v7 == -1)
        || !sub_244B19918(v6, *v2, v7)
        || (uint64_t v8 = (uint64_t)*a2) == 0)
      {
LABEL_14:
        unint64_t v9 = (_DWORD **)(v2 + 4);
      }
      else
      {
        while ((_DWORD *)v8 == v2
             || *(__int16 *)(v8 + 8) != -1 && *(_DWORD *)v8 != -1 && *(_DWORD *)(v8 + 4) != -1
             || !sub_244DC1A5C(v8, (uint64_t)v2))
        {
          uint64_t v8 = *(void *)(v8 + 16);
          if (!v8) {
            goto LABEL_14;
          }
        }
        char v10 = (_DWORD *)*((void *)v2 + 2);
        if (v2 == *a2)
        {
          *a2 = v10;
          sub_244DC1AC0(v5, v2);
          uint64_t v2 = v4;
          unint64_t v9 = a2;
        }
        else
        {
          *((void *)v4 + 2) = v10;
          unint64_t v9 = (_DWORD **)(v4 + 4);
          sub_244DC1AC0(v5, v2);
          uint64_t v2 = v4;
        }
      }
      uint64_t v4 = v2;
      uint64_t v2 = *v9;
    }
    while (*v9);
  }
}

BOOL sub_244DC1A5C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 != 0xFFFF && v2 != *(unsigned __int16 *)(a2 + 8)) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1 && *(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 4);
  if (v5 != -1 && v5 != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  int v7 = *(unsigned __int16 *)(a1 + 10);
  return v7 == 0xFFFF || v7 == *(unsigned __int16 *)(a2 + 10);
}

void sub_244DC1AC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26858();
    }
    int v5 = v4;
    *uint64_t v4 = 0;
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void sub_244DC1B48(uint64_t a1, void **a2)
{
  int v3 = *a2;
  if (v3)
  {
    uint64_t v4 = a1 + 1528;
    do
    {
      int v5 = (void *)v3[2];
      sub_244DC1AC0(v4, v3);
      int v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

uint64_t sub_244DC1B94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (uint64_t)sub_244DC3D08((unint64_t *)(a1 + 1528));
  if (result)
  {
    uint64_t v8 = *a3;
    *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a3 + 7);
    *(void *)uint64_t result = v8;
    *(void *)(result + 16) = *a2;
    *a2 = result;
    *a4 = 0;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    a4[2] = 1647;
  }
  else
  {
    unint64_t v9 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "EventPath pool full", v10, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x23u, 1);
    }
    *(_DWORD *)a4 = 1480;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    *((_DWORD *)a4 + 4) = 1598;
  }
  return result;
}

void sub_244DC1C94(uint64_t a1, void **a2)
{
  int v3 = *a2;
  if (v3)
  {
    uint64_t v4 = a1 + 1584;
    do
    {
      int v5 = (void *)v3[2];
      sub_244DC1AC0(v4, v3);
      int v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

uint64_t sub_244DC1CE0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = (uint64_t)sub_244DC1DA4(a2, a3, (unint64_t *)(a1 + 1584), (uint64_t)a4);
  if (*(_DWORD *)a4 == 11)
  {
    int v6 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "DataVersionFilter pool full, ignore this filter", v7, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x23u, 1);
    }
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    *((_DWORD *)a4 + 4) = 1615;
  }
  return result;
}

void *sub_244DC1DA4@<X0>(void *a1@<X1>, uint64_t a2@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244DC3D98(a3);
  if (result)
  {
    *(_DWORD *)uint64_t result = *(_DWORD *)a2;
    int v8 = *(unsigned __int8 *)(a2 + 4);
    *((unsigned char *)result + 4) = v8;
    if (v8) {
      *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    }
    int v9 = 0;
    *((_WORD *)result + 6) = *(_WORD *)(a2 + 12);
    result[2] = *a1;
    *a1 = result;
    int v10 = 1647;
  }
  else
  {
    int v10 = 1642;
    int v9 = 11;
  }
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_244DC1E38(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v7 = (uint64_t *)sub_244DD5868();
  uint64_t v8 = sub_244DD5AF4(v7, *a3, *((_DWORD *)a3 + 1));
  if (!v8) {
    return sub_2446CD508((uint64_t)a3, a4, a2);
  }
  v10[0] = a2;
  v10[1] = a3;
  void v10[2] = a4;
  char v11 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 16))(v8, v10);
  if (!v11) {
    return sub_2446CD508((uint64_t)a3, a4, a2);
  }
  return result;
}

uint64_t sub_244DC1ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_2447A1B78((unsigned __int16 *)(a2 + 48));
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = HIWORD(*(_DWORD *)(a2 + 56));
      int v7 = (unsigned __int16)*(_DWORD *)(a2 + 56);
      int v8 = HIWORD(*(_DWORD *)(a2 + 52));
      int v9 = (unsigned __int16)*(_DWORD *)(a2 + 52);
      int v10 = *(unsigned __int16 *)(a2 + 48);
      *(_DWORD *)long long buf = 67110144;
      int v14 = v6;
      __int16 v15 = 1024;
      int v16 = v7;
      __int16 v17 = 1024;
      int v18 = v8;
      __int16 v19 = 1024;
      int v20 = v9;
      __int16 v21 = 1024;
      int v22 = v10;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_INFO, "No command 0x%04X_%04X in Cluster 0x%04X_%04X on Endpoint %u", buf, 0x20u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    return v4;
  }
  uint64_t v11 = sub_244DC2074(v3, a2);
  uint64_t v4 = v11;
  if (v11) {
    return v4;
  }

  return sub_244DC2130(v11, a2);
}

uint64_t sub_244DC206C(uint64_t a1, unsigned __int16 *a2)
{
  return sub_2447A1B78(a2);
}

uint64_t sub_244DC2074(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v2 = a2 + 8;
    int v3 = *(_DWORD *)(a2 + 56);
    int v9 = *(_DWORD *)(a2 + 52);
    __int16 v10 = *(_WORD *)(a2 + 48);
    char v11 = 3;
    int v12 = v3;
    char v13 = 1;
    unsigned int v4 = sub_244BCAD34();
    memset(v8, 0, sizeof(v8));
    int v5 = sub_244D908A4();
    sub_244D90050(v5, v2, (uint64_t)&v9, v4, v8);
    unsigned __int8 v6 = v8[0];
    if (LODWORD(v8[0]))
    {
      if (LODWORD(v8[0]) == 168 || LODWORD(v8[0]) == 165)
      {
        if (LODWORD(v8[0]) == 165) {
          return 126;
        }
        else {
          return -99;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
    return 126;
  }
  return v6;
}

uint64_t sub_244DC2130(uint64_t a1, uint64_t a2)
{
  int v3 = sub_24484AE30(*(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 56));
  int v4 = sub_24484AF04(*(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 56));
  if (v3 && (*(unsigned char *)(a2 + 60) & 1) == 0) {
    return 198;
  }
  if (!v4) {
    return 0;
  }
  uint64_t result = 126;
  if (*(unsigned char *)(a2 + 40))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_244DC2194(uint64_t a1, uint64_t a2)
{
  return sub_244DC1ED4(a1 - 32, a2);
}

uint64_t sub_244DC219C(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v4 = a1 + 207;
  int v5 = (void *)a1[208];
  ++a1[210];
  sub_244CC6510(a1 + 207);
  --a1[210];
  sub_244CC6510(v4);
  if (v5 != v4) {
    sub_244E29868();
  }
  uint64_t v6 = a1[219];
  if (v6)
  {
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v6 + 152))(&v15, v6);
    if (v15)
    {
      int v7 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v15;
        uint64_t v18 = v16;
        int v8 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Failure on interaction model shutdown: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v15;
        uint64_t v18 = v16;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0x23u, 1);
      }
    }
  }
  a1[219] = a2;
  if (a2)
  {
    int v9 = sub_244CA2ED4();
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v10 = a1[219];
    v14[0] = v9;
    v14[1] = a1 + 170;
    char v14[2] = a1 + 2;
    (*(void (**)(long long *__return_ptr, uint64_t, void *))(*(void *)v10 + 144))(&v15, v10, v14);
    if (v15)
    {
      char v11 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v15;
        uint64_t v18 = v16;
        int v12 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Failure on interaction model startup: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v15;
        uint64_t v18 = v16;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0x23u, 1);
      }
    }
  }
  return v6;
}

void sub_244DC2440(uint64_t a1, void (***a2)(void))
{
}

void sub_244DC2448(uint64_t a1, void (***a2)(void))
{
}

void sub_244DC2450(uint64_t a1, void (***a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)(a3 + 40) = a1 + 8;
  sub_244DBED2C(a1 + 152, a2);
  if (*(_WORD *)(a4 + 4)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(unsigned __int16 *)(a4 + 6) == 1;
  }
  if (!v9 || *(unsigned char *)a4 != 8) {
    sub_244E299A8();
  }
  if (sub_244CA97BC(a3)) {
    sub_244E29908();
  }
  if (sub_244DBF1E8(a1, a3, v11, a5, 1)) {
    sub_244DD5B5C(a3, 0, (uint64_t)v12);
  }
}

void sub_244DC24F4(uint64_t a1, void (***a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
}

void sub_244DC24FC(uint64_t a1, void (***a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)(a3 + 40) = a1 + 8;
  sub_244DBED2C(a1 + 152, a2);
  if (*(_WORD *)(a4 + 4)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(unsigned __int16 *)(a4 + 6) == 1;
  }
  if (!v9 || *(unsigned char *)a4 != 6) {
    sub_244E29AE8();
  }
  if (sub_244CA97BC(a3)) {
    sub_244E29A48();
  }
  if (sub_244DC07F8(a1, a3, v11, a5, 1)) {
    sub_244DD5B5C(a3, 0, (uint64_t)v12);
  }
}

void sub_244DC25A0(uint64_t a1, void (***a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
}

BOOL sub_244DC25A8(uint64_t a1)
{
  return sub_244CC6478((void *)(a1 + 1656), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_244DC3E30) == 1;
}

uint64_t sub_244DC25E8()
{
  return 0xFFFFLL;
}

uint64_t sub_244DC25F0(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = &v2;
  sub_244CC6478((void *)(a1 + 1656), (uint64_t)&v3, (unsigned int (*)(uint64_t))sub_244DC3E40);
  return v2;
}

uint64_t sub_244DC2634(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  buf[0] = a3;
  uint64_t result = sub_244CC6478((void *)(a1 + 1656), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244DC3E78);
  for (uint64_t i = *(void *)(a1 + 1696); i; uint64_t i = *(void *)(i + 192))
  {
    if (*(unsigned __int8 *)(i + 72) == a3)
    {
      int v7 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v15 = a3;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Fabric removed, deleting obsolete read client with FabricIndex: %u", buf, 8u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0x23u, 2);
      }
      LODWORD(v12) = 161;
      *((void *)&v12 + 1) = "src/app/InteractionModelEngine.cpp";
      int v13 = 1968;
      uint64_t result = (uint64_t)sub_244DCDDEC(i, &v12, 0);
    }
  }
  for (uint64_t j = 0; j != 1152; j += 288)
  {
    uint64_t v9 = a1 + j;
    if (*(unsigned char *)(a1 + j + 489))
    {
      uint64_t v10 = v9 + 208;
      uint64_t result = sub_244CAA120(v9 + 208);
      if (result == a3)
      {
        uint64_t v11 = sub_244CC8484(0x23u, "InteractionModel");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v15 = a3;
          _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Fabric removed, deleting obsolete write handler with FabricIndex: %u", buf, 8u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(0x23u, 2);
        }
        uint64_t result = sub_244CA9250(v10);
      }
    }
  }
  return result;
}

uint64_t sub_244DC2868(uint64_t a1, uint64_t a2, int a3)
{
  return sub_244DC2634(a1 - 48, a2, a3);
}

void sub_244DC2870(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 1744);
  if (!v4)
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/app/InteractionModelEngine.cpp";
    int v5 = 1991;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 1720))
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/app/InteractionModelEngine.cpp";
    int v5 = 1993;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v5;
    return;
  }
  *(_OWORD *)int v14 = 0u;
  *(_OWORD *)int v15 = 0u;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  *(unsigned char *)(a1 + 1712) = 0;
  unsigned int v7 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v6 + 24))(v6, v12))
  {
    LOWORD(v7) = 0;
    do
    {
      ++*(unsigned char *)(a1 + 1712);
      if ((unsigned __int16)v7 <= v13) {
        unsigned int v7 = v13;
      }
      else {
        unsigned int v7 = (unsigned __int16)v7;
      }
    }
    while (((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v6 + 24))(v6, v12) & 1) != 0);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if (*(unsigned char *)(a1 + 1712))
  {
    *(unsigned char *)(a1 + 1720) = 1;
    int v8 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(char *)(a1 + 1712);
      *(_DWORD *)long long buf = 67109376;
      int v17 = v9;
      __int16 v18 = 1024;
      unsigned int v19 = v7;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Resuming %d subscriptions in %u seconds", buf, 0xEu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x23u, 2);
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 88) + 88) + 24);
    (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v10 + 40))(v10, 1000 * v7, sub_244DBE398, a1);
    if (*(_DWORD *)a2) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v11 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "No subscriptions to resume", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x23u, 2);
    }
  }
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a2 + 16) = 2032;
LABEL_25:
  v15[1] = 0;
  if (v15[0])
  {
    j__free(v15[0]);
    v15[0] = 0;
  }
  v14[1] = 0;
  if (v14[0]) {
    j__free(v14[0]);
  }
}

uint64_t sub_244DC2B98(uint64_t result)
{
  int v1 = *(char *)(result + 1712);
  BOOL v2 = __OFSUB__(v1, 1);
  int v3 = v1 - 1;
  if (v3 < 0 == v2) {
    *(unsigned char *)(result + 1712) = v3;
  }
  return result;
}

void sub_244DC2BB0(uint64_t *a1)
{
  sub_244DC30E8(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DC2BE8(uint64_t a1)
{
  return *(void *)(a1 + 1760);
}

uint64_t sub_244DC2BF0(uint64_t a1)
{
  return *(void *)(a1 + 1704);
}

uint64_t *sub_244DC2BF8(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 8));
}

void sub_244DC2C00(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

uint64_t *sub_244DC2C3C(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 16));
}

void sub_244DC2C44(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 16));

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DC2C80(uint64_t a1)
{
  return *(void *)(a1 + 1744);
}

uint64_t *sub_244DC2C88(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 24));
}

void sub_244DC2C90(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 24));

  JUMPOUT(0x245695FA0);
}

uint64_t *sub_244DC2CCC(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 32));
}

void sub_244DC2CD4(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 32));

  JUMPOUT(0x245695FA0);
}

uint64_t *sub_244DC2D10(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 40));
}

void sub_244DC2D18(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 40));

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DC2D54(uint64_t a1)
{
  return *(void *)(a1 + 1664);
}

uint64_t sub_244DC2D5C(uint64_t a1)
{
  return a1 - 40;
}

uint64_t *sub_244DC2D64(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 48));
}

void sub_244DC2D6C(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 48));

  JUMPOUT(0x245695FA0);
}

uint64_t *sub_244DC2DA8(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 64));
}

void sub_244DC2DB0(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 64));

  JUMPOUT(0x245695FA0);
}

uint64_t *sub_244DC2DEC(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 72));
}

void sub_244DC2DF4(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 72));

  JUMPOUT(0x245695FA0);
}

uint64_t *sub_244DC2E30(uint64_t a1)
{
  return sub_244DC30E8((uint64_t *)(a1 - 80));
}

void sub_244DC2E38(uint64_t a1)
{
  sub_244DC30E8((uint64_t *)(a1 - 80));

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DC2E74(uint64_t a1)
{
  *(void *)a1 = &unk_26F953000;
  *(void *)(a1 + 8) = &unk_26F945360;
  *(void *)(a1 + 16) = a1;
  *(void *)(a1 + 24) = 0;
  sub_244CCCDE0(a1 + 32);
  sub_244CCCDE0(a1 + 72);
  sub_244CCCDE0(a1 + 112);
  sub_244CCCDE0(a1 + 152);
  sub_244CCCDE0(a1 + 192);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 280) = 0;
  return a1;
}

BOOL sub_244DC2F10(__int16 a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a3 + 4);
  int v14 = *a2;
  __int16 v15 = a1;
  char v16 = 4;
  if (v5 == -1)
  {
    LOBYTE(v17) = 0;
    char v18 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v8 = sub_244D908A4();
    uint64_t v9 = a4;
    unsigned int v7 = 1;
  }
  else
  {
    int v17 = v5;
    char v18 = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v6 = sub_244D908A4();
    unsigned int v7 = sub_244BCAD2C();
    int v8 = v6;
    uint64_t v9 = a4;
  }
  sub_244D90050(v8, v9, (uint64_t)&v14, v7, &v11);
  return v11 == 0;
}

uint64_t sub_244DC2FE4(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 211) == 1)
  {
    uint64_t v2 = *(void *)(a2 + 168);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        ++v3;
        uint64_t v2 = *(void *)(v2 + 16);
      }
      while (v2);
    }
    else
    {
      uint64_t v3 = 0;
    }
    **a1 += v3;
    uint64_t v4 = *(void *)(a2 + 176);
    if (v4)
    {
      uint64_t v5 = 0;
      do
      {
        ++v5;
        uint64_t v4 = *(void *)(v4 + 16);
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }
    *a1[1] += v5;
    ++*a1[2];
  }
  return 0;
}

uint64_t sub_244DC3068(void **a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 211))
  {
    uint64_t v2 = *(void *)(a2 + 168);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        ++v3;
        uint64_t v2 = *(void *)(v2 + 16);
      }
      while (v2);
    }
    else
    {
      uint64_t v3 = 0;
    }
    **a1 += v3;
    uint64_t v4 = *(void *)(a2 + 176);
    if (v4)
    {
      uint64_t v5 = 0;
      do
      {
        ++v5;
        uint64_t v4 = *(void *)(v4 + 16);
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }
    *a1[1] += v5;
    ++*a1[2];
  }
  return 0;
}

uint64_t *sub_244DC30E8(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26F958280;
  a1[1] = (uint64_t)&unk_26F958340;
  a1[2] = (uint64_t)&unk_26F958380;
  a1[3] = (uint64_t)&unk_26F9583A8;
  a1[4] = (uint64_t)&unk_26F9583D0;
  a1[5] = (uint64_t)&unk_26F958408;
  a1[6] = (uint64_t)&unk_26F958440;
  a1[8] = (uint64_t)&unk_26F958480;
  a1[9] = (uint64_t)&unk_26F9584B0;
  a1[10] = (uint64_t)&unk_26F9584E8;
  sub_244D6CBC8(a1 + 205);
  sub_244D6CBC8(a1 + 198);
  sub_244D6CBC8(a1 + 191);
  sub_244D6CBC8(a1 + 184);
  a1[170] = (uint64_t)&unk_26F958818;
  sub_244D6CBC8(a1 + 174);
  uint64_t v2 = 144;
  do
  {
    uint64_t v3 = &a1[v2];
    *(v3 - 10) = (uint64_t)&unk_26F953000;
    *(v3 - 9) = (uint64_t)&unk_26F945360;
    sub_2447EA4BC((uint64_t)&a1[v2 - 9]);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_244D6CBC8(a1 + 19);
  sub_244D6CBC8(a1 + 12);
  return a1;
}

uint64_t sub_244DC32F4(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DC3310(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_244DC3334(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DC3350(uint64_t a1, void (***a2)(void))
{
  return 0;
}

uint64_t sub_244DC336C(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_244DC3388(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_244DC33A4(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_244DC33C0(unsigned __int8 *a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 211) == *a1) {
    ++**((_DWORD **)a1 + 1);
  }
  return 0;
}

uint64_t sub_244DC33E8(unsigned __int8 *a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 211) == *a1)
  {
    uint64_t v3 = sub_244CA8E44(a2);
    if (v3) {
      int v4 = *(unsigned __int8 *)(v3 + 24);
    }
    else {
      int v4 = 0;
    }
    if (v4 == a1[1]) {
      ++**((_DWORD **)a1 + 1);
    }
  }
  return 0;
}

uint64_t sub_244DC3450(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 8);
  if (*v2 == *(_DWORD *)a1)
  {
    **(void **)(a1 + 16) = a2;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    ++*v2;
  }
  return result;
}

BOOL sub_244DC3484(unsigned __int8 *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 211) != 1) {
    return 0;
  }
  uint64_t v4 = sub_244CA8E44(a2);
  (*(void (**)(void *__return_ptr))(*(void *)v4 + 64))(v10);
  if (LOBYTE(v10[0]) != *a1 || BYTE1(v10[0]) != 64) {
    return 0;
  }
  unint64_t v5 = *((void *)a1 + 1);
  if (HIDWORD(v5) == 4294967293)
  {
    uint64_t v6 = 0;
    while (1)
    {
      unsigned int v7 = *(_DWORD *)((char *)&v10[2] + v6);
      if (v7)
      {
        if ((unsigned __int16)(v5 - 1) < (unsigned __int16)v7 && HIWORD(v7) == WORD1(v5)) {
          break;
        }
      }
      v6 += 4;
      if (v6 == 12) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    if (v5 != v10[1]) {
      return 0;
    }
  }
  **((unsigned char **)a1 + 2) = (*(unsigned char *)(a2 + 210) & 4) != 0;
  return **((unsigned char **)a1 + 2) != 0;
}

uint64_t sub_244DC3588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26F952B68;
  *(void *)(a1 + 8) = &unk_26F952C00;
  *(void *)(a1 + 16) = &unk_26F952C38;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  sub_244DD24FC(a1 + 48, a1 + 8);
  *(void *)(a1 + 672) = &unk_26F945360;
  *(void *)(a1 + 680) = a1;
  *(void *)(a1 + 688) = 0;
  *(_WORD *)(a1 + 696) = 0;
  return a1;
}

uint64_t sub_244DC3644(uint64_t *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (sub_244CA7F20(a2, *a1))
  {
    uint64_t v4 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_24479B4A8(*a1, &v11);
      int v5 = *(_DWORD *)(sub_244D879D8(v11) + 76);
      sub_24479B4A8(*a1, &v10);
      uint64_t v6 = *(void *)(sub_244D879D8(v10) + 72);
      sub_24479B4A8(*a1, &v9);
      int v7 = v9[24];
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v5;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 1024;
      int v16 = v7;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Deleting previous subscription from NodeId: %08X%08X, FabricIndex: %u", buf, 0x14u);
      (*(void (**)(unsigned __int8 *))(*(void *)v9 + 32))(v9);
      (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
    if (sub_244CC4E58(2u))
    {
      sub_24479B4A8(*a1, buf);
      sub_244D879D8(*(uint64_t *)buf);
      sub_24479B4A8(*a1, &v11);
      sub_244D879D8(v11);
      sub_24479B4A8(*a1, &v10);
      sub_244CC4DE0(0x23u, 2);
      (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
      (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
    }
    sub_244CA5A38(a2, 0);
  }
  return 0;
}

uint64_t sub_244DC38D4(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4 = sub_244CA8E44(a2);
  if (v4) {
    int v5 = *(unsigned __int8 *)(v4 + 24);
  }
  else {
    int v5 = 0;
  }
  if (v5 == **a1 && *(unsigned char *)(a2 + 211) == 1)
  {
    uint64_t v6 = *(void *)(a2 + 168);
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        ++v7;
        uint64_t v6 = *(void *)(v6 + 16);
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(a2 + 176);
    if (v8)
    {
      unint64_t v9 = 0;
      do
      {
        ++v9;
        uint64_t v8 = *(void *)(v8 + 16);
      }
      while (v8);
    }
    else
    {
      unint64_t v9 = 0;
    }
    *(void *)a1[1] += v7;
    *(void *)a1[2] += v9;
    ++*(void *)a1[3];
    uint64_t v10 = a1[4];
    if (!*(void *)v10) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)a1[5];
    int v13 = v7 > v11 || v9 > v11;
    if (v13 == 1 && *(void *)a1[6] <= v11 && *(void *)a1[7] <= v11)
    {
      *(void *)uint64_t v10 = a2;
      *(void *)a1[6] = v7;
      *(void *)a1[7] = v9;
      return 0;
    }
    if (*(void *)(a2 + 64) < *(void *)(*(void *)v10 + 64))
    {
      int v14 = *(void *)a1[6] > v11 || *(void *)a1[7] > v11;
      if (v14 == v13) {
LABEL_31:
      }
        *(void *)uint64_t v10 = a2;
    }
  }
  return 0;
}

uint64_t sub_244DC3A44(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4 = sub_244CA8E44(a2);
  if (v4) {
    int v5 = *(unsigned __int8 *)(v4 + 24);
  }
  else {
    int v5 = 0;
  }
  if (v5 == **a1 && !*(unsigned char *)(a2 + 211))
  {
    uint64_t v6 = *(void *)(a2 + 168);
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        ++v7;
        uint64_t v6 = *(void *)(v6 + 16);
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(a2 + 176);
    if (v8)
    {
      unint64_t v9 = 0;
      do
      {
        ++v9;
        uint64_t v8 = *(void *)(v8 + 16);
      }
      while (v8);
    }
    else
    {
      unint64_t v9 = 0;
    }
    *(void *)a1[1] += v7;
    *(void *)a1[2] += v9;
    ++*(void *)a1[3];
    uint64_t v10 = (uint64_t *)a1[4];
    uint64_t v11 = *v10;
    if (!*v10
      || (v7 <= 9 ? (BOOL v12 = v9 > 9) : (BOOL v12 = 1),
          !v12 ? (int v13 = 0) : (int v13 = 1),
          v13 == 1 && *(void *)a1[5] <= 9uLL && *(void *)a1[6] < 0xAuLL
       || *(void *)(a2 + 64) > *(void *)(v11 + 64)
       && (*(void *)a1[5] <= 9uLL ? (int v14 = *(void *)a1[6] > 9uLL) : (int v14 = 1), v14 == v13)))
    {
      *uint64_t v10 = a2;
      uint64_t v11 = *(void *)a1[4];
    }
    if (v11 == a2)
    {
      *(void *)a1[5] = v7;
      *(void *)a1[6] = v9;
    }
  }
  return 0;
}

uint64_t sub_244DC3BB0(void **a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 211))
  {
    uint64_t v4 = sub_244CA8E44(a2);
    int v5 = v4 ? *(unsigned __int8 *)(v4 + 24) : 0;
    if (v5 == *(unsigned __int8 *)*a1)
    {
      uint64_t v6 = *(void *)(a2 + 168);
      if (v6)
      {
        uint64_t v7 = 0;
        do
        {
          ++v7;
          uint64_t v6 = *(void *)(v6 + 16);
        }
        while (v6);
      }
      else
      {
        uint64_t v7 = 0;
      }
      *a1[1] += v7;
      uint64_t v8 = *(void *)(a2 + 176);
      if (v8)
      {
        uint64_t v9 = 0;
        do
        {
          ++v9;
          uint64_t v8 = *(void *)(v8 + 16);
        }
        while (v8);
      }
      else
      {
        uint64_t v9 = 0;
      }
      *a1[2] += v9;
      ++*a1[3];
    }
  }
  return 0;
}

void *sub_244DC3C78(unint64_t *a1)
{
  uint64_t v2 = sub_244CC4D84(0x18uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[1] = 0;
    v2[2] = 0;
    *uint64_t v2 = -1;
    *((_DWORD *)v2 + 2) = -1;
    uint64_t v4 = sub_244CC4D84(0x18uLL);
    if (v4)
    {
      *uint64_t v4 = v3;
      v4[1] = a1 + 2;
      unsigned char v4[2] = 0;
      unsigned char v4[2] = a1[4];
      *(void *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      unint64_t v5 = a1[1];
      unint64_t v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5) {
        a1[1] = v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void *sub_244DC3D08(unint64_t *a1)
{
  uint64_t v2 = sub_244CC4D84(0x18uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *uint64_t v2 = -1;
    v2[1] = 0xFFFFLL;
    v2[2] = 0;
    uint64_t v4 = sub_244CC4D84(0x18uLL);
    if (v4)
    {
      *uint64_t v4 = v3;
      v4[1] = a1 + 2;
      unsigned char v4[2] = 0;
      unsigned char v4[2] = a1[4];
      *(void *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      unint64_t v5 = a1[1];
      unint64_t v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5) {
        a1[1] = v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void *sub_244DC3D98(unint64_t *a1)
{
  uint64_t v2 = sub_244CC4D84(0x18uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *uint64_t v2 = 0;
    v2[1] = 0;
    *(_DWORD *)uint64_t v2 = -1;
    *((_WORD *)v2 + 6) = -1;
    v2[2] = 0;
    uint64_t v4 = sub_244CC4D84(0x18uLL);
    if (v4)
    {
      *uint64_t v4 = v3;
      v4[1] = a1 + 2;
      unsigned char v4[2] = 0;
      unsigned char v4[2] = a1[4];
      *(void *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      unint64_t v5 = a1[1];
      unint64_t v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5) {
        a1[1] = v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL sub_244DC3E30(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 211) == 0;
}

uint64_t sub_244DC3E40(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 211) == 1 && (*(void *)(a2 + 40) > *(void *)(a2 + 48) || (*(unsigned char *)(a2 + 210) & 0x10) != 0)) {
    ++**a1;
  }
  return 0;
}

uint64_t sub_244DC3E78(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CA8E44(a2);
  if (v4) {
    int v5 = *(unsigned __int8 *)(v4 + 24);
  }
  else {
    int v5 = 0;
  }
  if (v5 == *a1)
  {
    unint64_t v6 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_244CA8E44(a2);
      if (v7) {
        int v8 = *(_DWORD *)(v7 + 76);
      }
      else {
        int v8 = 0;
      }
      uint64_t v9 = sub_244CA8E44(a2);
      if (v9) {
        int v10 = *(_DWORD *)(v9 + 72);
      }
      else {
        int v10 = 0;
      }
      int v11 = *a1;
      *(_DWORD *)long long buf = 67109632;
      int v14 = v8;
      __int16 v15 = 1024;
      int v16 = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Deleting expired ReadHandler for NodeId: %08X%08X, FabricIndex: %u", buf, 0x14u);
    }
    if (sub_244CC4E58(2u))
    {
      sub_244CA8E44(a2);
      sub_244CA8E44(a2);
      sub_244CC4DE0(0x23u, 2);
    }
    sub_244CA5A38(a2, 0);
  }
  return 0;
}

BOOL sub_244DC4004(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 72) == *(_DWORD *)(*(void *)a1 + 12);
}

void sub_244DC401C(int a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void (*)(void *))a2[15];
    if (v3)
    {
      a2[15] = 0;
      v3(a2 + 13);
    }
    uint64_t v4 = (void (*)(void *))a2[10];
    if (v4)
    {
      a2[10] = 0;
      v4(a2 + 8);
    }
    a2[7] = 0;
    int v5 = (void *)a2[6];
    if (v5)
    {
      j__free(v5);
      a2[6] = 0;
    }
    a2[5] = 0;
    unint64_t v6 = (void *)a2[4];
    if (v6)
    {
      j__free(v6);
      a2[4] = 0;
    }
    j__free(a2);
  }
}

BOOL sub_244DC40A8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 72) == *(_DWORD *)(*(void *)a1 + 12);
}

uint64_t sub_244DC40C0(uint64_t result, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(result + 528) != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = *(unsigned __int8 *)(v3 + 104);
      uint64_t v6 = *(void *)(v3 + 96);
      int v7 = *(unsigned __int8 *)(v3 + 528);
      *(_DWORD *)long long buf = 67110144;
      int v10 = v5;
      __int16 v11 = 1024;
      int v12 = HIDWORD(v6);
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 1024;
      int v16 = v7;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "OperationalSessionSetup[%u:%08X%08X]: State change %d --> %d", buf, 0x20u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x22u, 3);
    }
    if (*(unsigned char *)(v3 + 528) == 6)
    {
      uint64_t v8 = *(void *)(*(void *)(v3 + 40) + 88);
      if (v8)
      {
        uint64_t result = *(void *)(v8 + 24);
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(uint64_t, uint64_t), uint64_t))(*(void *)result + 72))(result, sub_244DC63C8, v3);
        }
      }
    }
    *(unsigned char *)(v3 + 528) = a2;
    if (a2 != 4)
    {
      if (*(void *)(v3 + 88))
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 + 80) + 8))(*(void *)(v3 + 80));
        *(void *)(v3 + 88) = 0;
      }
    }
  }
  return result;
}

void *sub_244DC428C(void *result)
{
  uint64_t v1 = *(void *)(result[5] + 88);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = *(void **)(v1 + 24);
    if (result) {
      return (void *)(*(uint64_t (**)(void *, void *(*)(uint64_t, uint64_t), void *))(*result + 72))(result, sub_244DC63C8, v2);
    }
  }
  return result;
}

uint64_t sub_244DC42DC(uint64_t result)
{
  if (*(void *)(result + 88))
  {
    uint64_t v1 = result;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 80) + 8))(*(void *)(result + 80));
    *(void *)(v1 + 88) = 0;
  }
  return result;
}

uint64_t sub_244DC4330(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned int v1 = *(unsigned __int8 *)(a1 + 528);
  BOOL v2 = v1 > 6;
  int v3 = (1 << v1) & 0x4E;
  if (v2 || v3 == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  *(_WORD *)long long buf = 513;
  sub_244D8D444(v6, v7, v8, (uint64_t)buf, *(unsigned char *)(a1 + 532), (uint64_t)v18);
  if (!v18[0]) {
    return 0;
  }
  uint64_t v9 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v11 = *(void *)(a1 + 96);
    *(_DWORD *)long long buf = 67109632;
    int v21 = v10;
    __int16 v22 = 1024;
    int v23 = HIDWORD(v11);
    __int16 v24 = 1024;
    int v25 = v11;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Found an existing secure session to [%u:%08X%08X]!", buf, 0x14u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  int v12 = (uint64_t *)sub_24479DC08(v18);
  uint64_t v13 = sub_244D879D8(*v12);
  long long v14 = *(_OWORD *)(v13 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(v13 + 112);
  *(_OWORD *)(a1 + 112) = v14;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(v13 + 116);
  *(void *)(a1 + 136) = *(void *)(v13 + 120);
  __int16 v15 = (uint64_t *)sub_24479DC08(v18);
  uint64_t v16 = sub_244D88328((void *)(a1 + 144), v15);
  if (v18[0]) {
    (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
  }
  return v16;
}

void *sub_244DC44FC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  *(unsigned char *)(a1 + 532) = a5;
  uint64_t result = (void *)sub_244DC6530(a1 + 184, a2, a3, a4);
  uint64_t v7 = 0x300000003;
  uint64_t v8 = 0x7300000073;
  uint64_t v9 = "src/app/OperationalSessionSetup.cpp";
  switch(*(unsigned char *)(a1 + 528))
  {
    case 0:
      goto LABEL_10;
    case 1:
      if (sub_244DC4330(a1)) {
        goto LABEL_9;
      }
      sub_244DC40C0(a1, 2);
      uint64_t result = (void *)sub_244DC4658(a1, (uint64_t)&v12);
      if (!v12) {
        return result;
      }
      uint64_t v9 = v13;
      uint64_t v8 = v14;
      uint64_t v11 = v12;
      sub_244DC40C0(a1, 1);
      uint64_t v7 = v11;
LABEL_10:
      uint64_t v12 = v7;
      uint64_t v13 = v9;
      uint64_t v14 = v8;
      return sub_244DC4FC0(a1, (uint64_t)&v12, 1, 0);
    case 2:
    case 6:
      uint64_t result = (void *)sub_244DC4330(a1);
      if (!result) {
        return result;
      }
      goto LABEL_9;
    case 3:
      char v10 = sub_244DC4330(a1);
      uint64_t v7 = 0x300000003;
      if (v10) {
        goto LABEL_9;
      }
      uint64_t v8 = 0x9600000096;
      goto LABEL_10;
    case 4:
      return result;
    case 5:
LABEL_9:
      sub_244DC40C0(a1, 5);
      uint64_t v8 = 101;
      uint64_t v7 = 0;
      goto LABEL_10;
    default:
      uint64_t v8 = 0xA3000000A3;
      uint64_t v9 = "src/app/OperationalSessionSetup.cpp";
      goto LABEL_10;
  }
}

uint64_t sub_244DC4650(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  return sub_244DC6530(a1 + 184, a2, a3, a4);
}

uint64_t sub_244DC4658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 534)) {
    --*(unsigned char *)(a1 + 534);
  }
  int v4 = *(unsigned __int8 *)(a1 + 535);
  if (v4 != 255) {
    *(unsigned char *)(a1 + 535) = ++v4;
  }
  if (*(unsigned char *)(a1 + 536)) {
    --*(unsigned char *)(a1 + 536);
  }
  *(_DWORD *)long long buf = 2;
  uint64_t v13 = "core_dev_operational_discovery_attempt_ctr";
  LODWORD(v14) = v4;
  BYTE4(v14) = 2;
  sub_244D7E78C((uint64_t)buf);
  if (*(void *)(a1 + 224) && *(void *)(a1 + 232))
  {
    int v5 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 104);
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v6;
      LOWORD(v13) = 1024;
      *(_DWORD *)((char *)&v13 + 2) = HIDWORD(v7);
      HIWORD(v13) = 1024;
      LODWORD(v14) = v7;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "OperationalSessionSetup[%u:%08X%08X]: Operational node lookup already in progress. Will NOT start a new one.", buf, 0x14u);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x22u, 2);
    }
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/app/OperationalSessionSetup.cpp";
    int v9 = 598;
  }
  else
  {
    *(_DWORD *)long long buf = 0;
    uint64_t v13 = "core_dev_operational_discovery";
    BYTE4(v14) = 0;
    sub_244D7E78C((uint64_t)buf);
    uint64_t result = sub_244D9EA90(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 104));
    if (result)
    {
      char v10 = *(const char **)(result + 16);
      *(void *)long long buf = *(void *)(a1 + 96);
      uint64_t v13 = v10;
      uint64_t v14 = 0xAFC8000000C8;
      uint64_t v11 = sub_244DD79E0();
      return (*(uint64_t (**)(uint64_t *, uint8_t *, uint64_t))(*v11 + 24))(v11, buf, a1 + 216);
    }
    *(_DWORD *)a2 = 113;
    *(void *)(a2 + 8) = "src/app/OperationalSessionSetup.cpp";
    int v9 = 606;
  }
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

void *sub_244DC487C(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  return sub_244DC44FC(a1, a2, a3, 0, a4);
}

void *sub_244DC4888(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  return sub_244DC44FC(a1, a2, 0, a3, a4);
}

void *sub_244DC4898(void *result, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v26 = *(_OWORD *)a2;
  int v2 = *(_DWORD *)(a2 + 20);
  int v27 = *(_DWORD *)(a2 + 16);
  int v28 = v2;
  uint64_t v29 = *(void *)(a2 + 24);
  int v3 = *((unsigned __int8 *)result + 533);
  *((unsigned char *)result + 533) = 0;
  if (*((unsigned char *)result + 528))
  {
    uint64_t v5 = (uint64_t)result;
    sub_244CDC098((uint64_t)&v26, __str, 0x4CuLL);
    int v6 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(v5 + 104);
      uint64_t v8 = *(void *)(v5 + 96);
      int v9 = *(unsigned __int8 *)(v5 + 528);
      *(_DWORD *)long long buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v8);
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v8;
      *(_WORD *)&buf[20] = 2080;
      *(void *)&unsigned char buf[22] = __str;
      __int16 v31 = 1024;
      int v32 = v9;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "OperationalSessionSetup[%u:%08X%08X]: Updating device address to %s while in state %d", buf, 0x24u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
    *(_OWORD *)(v5 + 112) = v26;
    int v10 = v28;
    *(_DWORD *)(v5 + 128) = v27;
    *(_DWORD *)(v5 + 132) = v10;
    *(void *)(v5 + 136) = v29;
    uint64_t v11 = *(void *)(v5 + 88);
    if (v11) {
      sub_244DBA5C4(v11, (uint64_t *)(a2 + 32));
    }
    if (*(unsigned char *)(v5 + 528) != 2)
    {
      uint64_t v13 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Received UpdateDeviceData in incorrect state", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0x22u, 1);
      }
      *(_DWORD *)long long buf = 3;
      *(void *)&uint8_t buf[8] = "src/app/OperationalSessionSetup.cpp";
      int v12 = 236;
      goto LABEL_16;
    }
    sub_244DC40C0(v5, 3);
    sub_244D8A350(*(void *)(v5 + 16), v5 + 96, (uint64_t)&v26);
    if (*(unsigned char *)(v5 + 529))
    {
      *(_DWORD *)long long buf = 0;
      *(void *)&uint8_t buf[8] = "src/app/OperationalSessionSetup.cpp";
      int v12 = 248;
LABEL_16:
      *(_DWORD *)&uint8_t buf[16] = v12;
      return sub_244DC4FC0(v5, (uint64_t)buf, 1, 0);
    }
    memset(v25, 0, sizeof(v25));
    uint64_t result = (void *)sub_244DC4CDC(v5, a2, (uint64_t)v25);
    int v14 = *(_DWORD *)v25;
    if (*(_DWORD *)v25)
    {
      uint64_t v15 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v22 = v14;
        long long v23 = *(_OWORD *)&v25[4];
        int v24 = *(_DWORD *)&v25[20];
        uint64_t v16 = sub_244CB7B34((const char **)&v22, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "src/app/OperationalSessionSetup.cpp";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 254;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        int v19 = v14;
        long long v20 = *(_OWORD *)&v25[4];
        int v21 = *(_DWORD *)&v25[20];
        sub_244CB7B34((const char **)&v19, 1);
        sub_244CC4DE0(0, 1);
      }
      sub_244DC40C0(v5, 2);
      *(unsigned char *)(v5 + 533) = v3;
      __int16 v17 = sub_244DD79E0();
      uint64_t result = (*(void *(**)(unsigned char *__return_ptr))(*v17 + 32))(buf);
      if (*(_DWORD *)buf)
      {
        *(_OWORD *)long long buf = *(_OWORD *)v25;
        *(void *)&uint8_t buf[16] = *(void *)&v25[16];
        return sub_244DC4FC0(v5, (uint64_t)buf, 1, 0);
      }
    }
    else if (v3)
    {
      unsigned int v18 = sub_244CDBC48(a2 + 32);
      *(_DWORD *)long long buf = 50;
      *(void *)&uint8_t buf[8] = "src/app/OperationalSessionSetup.cpp";
      *(_DWORD *)&uint8_t buf[16] = 265;
      return (void *)sub_244DC6238(v5, (long long *)buf, (unsigned __int16)(v18 / 0x3E8) + 1);
    }
  }
  return result;
}

uint64_t sub_244DC4CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 532) == 1)
  {
    if (!*(unsigned char *)(a2 + 44))
    {
      uint64_t v8 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 96);
        int v10 = *(unsigned __int8 *)(a1 + 104);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = HIDWORD(v9);
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v9;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v16) = v10;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "LargePayload session requested but peer does not support TCP server, PeerNodeId=<%08X%08X, %d>", buf, 0x14u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(0x22u, 1);
      }
      *(_DWORD *)a3 = 172;
      *(void *)(a3 + 8) = "src/app/OperationalSessionSetup.cpp";
      int v7 = 315;
      goto LABEL_16;
    }
    *(unsigned char *)(a1 + 128) = 3;
  }
  uint64_t result = (***(uint64_t (****)(void))(a1 + 80))(*(void *)(a1 + 80));
  *(void *)(a1 + 88) = result;
  if (!result)
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/app/OperationalSessionSetup.cpp";
    int v7 = 321;
LABEL_16:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_DWORD *)long long buf = 0;
  *(void *)&uint8_t buf[8] = "core_dev_case_session";
  BYTE4(v16) = 0;
  sub_244D7E78C((uint64_t)buf);
  memset(buf, 0, sizeof(buf));
  uint64_t v16 = 0;
  sub_244DBA5D8(*(void *)(a1 + 88), a1 + 16, (uint64_t *)(a1 + 96), a1 + 112, a2 + 32, a1, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    uint64_t result = sub_244DC40C0(a1, 4);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/OperationalSessionSetup.cpp";
    int v7 = 334;
    goto LABEL_16;
  }
  int v11 = 1;
  int v12 = "core_dev_case_session";
  int v13 = *(_DWORD *)buf;
  char v14 = 3;
  uint64_t result = sub_244D7E78C((uint64_t)&v11);
  if (*(void *)(a1 + 88))
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 8))(*(void *)(a1 + 80));
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = v16;
  return result;
}

uint64_t sub_244DC4F48(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  unsigned int v7 = sub_244CDBC48(a3);
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  return sub_244DC6238(a1, &v9, (unsigned __int16)(v7 / 0x3E8) + a4 + 1);
}

void *sub_244DC4FC0(uint64_t a1, uint64_t a2, char a3, int a4)
{
  if (*(unsigned char *)(a1 + 529) && *(void *)(a1 + 184) != a1 + 184) {
    sub_244E29C28();
  }
  uint64_t v8 = (uint64_t *)(a1 + 544);
  uint64_t v9 = *(void *)(a1 + 544);
  if (v9 != a1 + 544 && v9 != 0)
  {
    do
    {
      int v11 = *(void (**)(void))(v9 + 16);
      if (v11)
      {
        *(void *)(v9 + 16) = 0;
        v11();
        uint64_t v9 = *v8;
      }
    }
    while ((uint64_t *)v9 != v8 && v9);
  }
  v21[0] = (uint64_t *)v21;
  v21[1] = (uint64_t *)v21;
  void v21[2] = 0;
  sub_244DC5128((uint64_t)v21, (void **)(a1 + 184));
  uint64_t v12 = *(void *)(a1 + 40);
  sub_24479DD24(a1 + 144, (uint64_t)v19);
  *(_OWORD *)unsigned int v18 = *(_OWORD *)(a1 + 96);
  __int16 v13 = *(_WORD *)(a1 + 530);
  if (!a4)
  {
    uint64_t v14 = *(void *)(a1 + 208);
    if (!v14) {
      sub_244E29B88();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, a1);
  }
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  sub_244DC5174(v21, &v16, a3, v18, v12, v19, v13);
  if (v19[0]) {
    (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
  }
  return sub_244DC64D0(v21);
}

uint64_t sub_244DC5128(uint64_t result, void **a2)
{
  if ((void **)result != a2)
  {
    int v2 = *a2;
    if (*a2 != a2)
    {
      int v3 = *(void **)(result + 8);
      *int v3 = v2;
      uint64_t v4 = v2[1];
      do
      {
        v2[1] = v3;
        int v2 = (void *)*v2;
      }
      while (v2[1] == v4);
      *a2[1] = result;
      *(void *)(result + 8) = a2[1];
      *a2 = a2;
      a2[1] = a2;
    }
  }
  return result;
}

BOOL sub_244DC5174(uint64_t **a1, long long *a2, char a3, uint64_t *a4, uint64_t a5, unsigned char *a6, __int16 a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  char v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  for (BOOL result = sub_244DC6704(a1, &v36, &v35, &v34); result; BOOL result = sub_244DC6704(a1, &v36, &v35, &v34))
  {
    uint64_t v17 = *a1;
    unsigned int v18 = (void (*)(uint64_t *, uint64_t, uint64_t))(*a1)[2];
    if (v18)
    {
      unsigned char v17[2] = 0;
      v18(v17, v15, v16);
    }
    if (*(_DWORD *)a2)
    {
      if (v35)
      {
        uint64_t v19 = v35[3];
        uint64_t v20 = (void (*)(uint64_t, uint64_t *, long long *))v35[4];
        long long v32 = *a2;
        uint64_t v33 = *((void *)a2 + 2);
        v20(v19, a4, &v32);
      }
      if (v34)
      {
        long long v38 = *a2;
        uint64_t v39 = *((void *)a2 + 2);
        *(_OWORD *)long long buf = *(_OWORD *)a4;
        char v40 = a3;
        char v41 = 0;
        if (*(_DWORD *)a2 == 219)
        {
          char v41 = 1;
          __int16 v42 = a7;
        }
        ((void (*)(uint64_t, uint8_t *))v34[4])(v34[3], buf);
      }
    }
    else
    {
      if (!a5) {
        sub_244E29CC8();
      }
      int v21 = (uint64_t *)sub_2446F7170(a6);
      uint64_t v22 = sub_244D879D8(*v21);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22) & 1) == 0) {
        sub_244E29D68();
      }
      if (v36)
      {
        uint64_t v24 = v36[3];
        long long v23 = (void (*)(uint64_t, uint64_t, unsigned char *))v36[4];
        int v25 = sub_2446F7170(a6);
        v23(v24, a5, v25);
        long long v26 = (uint64_t *)sub_2446F7170(a6);
        uint64_t v27 = sub_244D879D8(*v26);
        if (((*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27) & 1) == 0)
        {
          int v28 = sub_244CC8484(0x22u, "Discovery");
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            uint64_t v29 = *a4;
            unint64_t v30 = HIDWORD(*a4);
            int v31 = *((unsigned __int8 *)a4 + 8);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v30;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v29;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v38) = v31;
            _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "Success callback for connection to <%08X%08X, %d> tore down session", buf, 0x14u);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0x22u, 1);
          }
          *(_DWORD *)a2 = 2;
          *((void *)a2 + 1) = "src/app/OperationalSessionSetup.cpp";
          *((_DWORD *)a2 + 4) = 409;
        }
      }
    }
  }
  return result;
}

uint64_t sub_244DC543C(uint64_t a1, int *a2, char a3)
{
  if (*(unsigned char *)(a1 + 528) == 4)
  {
    int v6 = *a2;
    if (*a2 != 219 && v6 != 50) {
      goto LABEL_8;
    }
    uint64_t v7 = sub_244D85D70(*(void *)(a1 + 88));
    int v8 = *(_DWORD *)(v7 + 8);
    uint64_t v18 = *(void *)v7;
    int v19 = v8;
    sub_244DC40C0(a1, 2);
    *(unsigned char *)(a1 + 533) = 1;
    uint64_t v9 = sub_244DD79E0();
    uint64_t result = (uint64_t)(*(void *(**)(uint8_t *__return_ptr))(*v9 + 32))(buf);
    if (*(_DWORD *)buf)
    {
      *(unsigned char *)(a1 + 533) = 0;
      sub_244DC40C0(a1, 1);
      if (!*(unsigned char *)(a1 + 534) || (memset(v16, 0, sizeof(v16)), sub_244DC566C(a1, &v17, v16), LODWORD(v16[0])))
      {
        int v6 = *a2;
LABEL_8:
        *(_DWORD *)long long buf = 1;
        *(void *)&uint8_t buf[8] = "core_dev_operational_discovery";
        LODWORD(v21) = v6;
        BYTE4(v21) = 3;
        sub_244D7E78C((uint64_t)buf);
        *(_DWORD *)long long buf = 1;
        *(void *)&uint8_t buf[8] = "core_dev_case_session";
        LODWORD(v21) = *a2;
        BYTE4(v21) = 3;
        sub_244D7E78C((uint64_t)buf);
        long long v14 = *(_OWORD *)a2;
        uint64_t v15 = *((void *)a2 + 2);
        return (uint64_t)sub_244DC4FC0(a1, (uint64_t)&v14, a3, 0);
      }
      sub_244DC40C0(a1, 6);
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      uint64_t v21 = *((void *)a2 + 2);
      __int16 v12 = v17;
      unsigned int v13 = sub_244CDBC48((uint64_t)&v18);
      return sub_244DC6238(a1, (long long *)buf, v12 + (unsigned __int16)(v13 / 0x3E8) + 1);
    }
  }
  else
  {
    int v11 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "OnSessionEstablishmentError was called while we were not connecting", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x22u, 1);
    }
  }
  return result;
}

uint64_t sub_244DC566C@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
  v21[3] = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 534)) {
    sub_244E29E08();
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(*(void *)(result + 40) + 88);
  if (v5 && *(void *)(v5 + 24))
  {
    sub_244DC40C0(result, 1);
    int v7 = *(unsigned __int8 *)(v4 + 535);
    if (!*(unsigned char *)(v4 + 535)) {
      sub_244E29EA8();
    }
    char v8 = v7 - 1;
    if ((v7 - 1) >= 5) {
      char v8 = 5;
    }
    unsigned int v9 = 1000 << v8;
    if (*(_WORD *)(v4 + 530))
    {
      if (v9 <= *(unsigned __int16 *)(v4 + 530)) {
        unsigned int v9 = *(unsigned __int16 *)(v4 + 530);
      }
      *(_WORD *)(v4 + 530) = 0;
    }
    if ((v7 & 1) == 0)
    {
      sub_244D6A044((uint64_t)buf);
      uint64_t v18 = sub_244D6A0B8();
      int v19 = v10;
      if (buf[0]) {
        int v11 = (uint64_t *)sub_2446DC5A0(buf);
      }
      else {
        int v11 = &v18;
      }
      v9 += sub_244CDBD38((uint64_t)v11);
    }
    *a2 = v9 / 0x3E8;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v12 = *(void *)(*(void *)(*(void *)(v4 + 40) + 88) + 24);
    (*(void (**)(uint64_t, void, void *(*)(uint64_t, uint64_t), uint64_t))(*(void *)v12 + 40))(v12, v9, sub_244DC63C8, v4);
    unsigned int v13 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int8 *)(v4 + 535);
      int v15 = *(unsigned __int8 *)(v4 + 534);
      int v16 = (unsigned __int16)*a2;
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      v21[0] = a3[2];
      __int16 v17 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v15;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v21[0]) = v16;
      WORD2(v21[0]) = 2080;
      *(void *)((char *)v21 + 6) = v17;
      _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "OperationalSessionSetup:attempts done: %u, attempts left: %u, retry delay %us, status %s", buf, 0x1Eu);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result)
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      v21[0] = a3[2];
      sub_244CB7B34((const char **)buf, 1);
      return sub_244CC4DE0(0x22u, 2);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    a3[1] = "src/app/OperationalSessionSetup.cpp";
    *((_DWORD *)a3 + 4) = 733;
  }
  return result;
}

uint64_t sub_244DC58F0(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 530) = a2;
  return result;
}

uint64_t sub_244DC58F8(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 528) == 4)
  {
    int v7 = 1;
    char v8 = "core_dev_operational_discovery";
    int v9 = 0;
    char v10 = 3;
    sub_244D7E78C((uint64_t)&v7);
    int v7 = 1;
    char v8 = "core_dev_case_session";
    int v9 = 0;
    char v10 = 3;
    sub_244D7E78C((uint64_t)&v7);
    if (sub_244D88328((void *)(a1 + 144), a2))
    {
      sub_244DC40C0(a1, 5);
      int v7 = 0;
      char v8 = "src/app/OperationalSessionSetup.cpp";
      int v4 = 528;
    }
    else
    {
      int v7 = 3;
      char v8 = "src/app/OperationalSessionSetup.cpp";
      int v4 = 520;
    }
    int v9 = v4;
    return (uint64_t)sub_244DC4FC0(a1, (uint64_t)&v7, 1, 0);
  }
  else
  {
    uint64_t v5 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "OnSessionEstablished was called while we were not connecting", (uint8_t *)&v7, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x22u, 1);
    }
  }
  return result;
}

uint64_t sub_244DC5A4C(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F958628;
  *(void *)(a1 + 8) = &unk_26F958680;
  int v2 = (void *)(a1 + 224);
  if (*(void *)(a1 + 224) && *(void *)(a1 + 232))
  {
    int v3 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = *(unsigned __int8 *)(a1 + 104);
      uint64_t v5 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v5);
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v16) = v5;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "OperationalSessionSetup[%u:%08X%08X]: Cancelling incomplete address resolution as device is being deleted.", buf, 0x14u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v6 = sub_244DD79E0();
    (*(void (**)(long long *__return_ptr))(*v6 + 40))(&v13);
    if (v13)
    {
      int v7 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v13;
        uint64_t v16 = v14;
        char v8 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Lookup cancel failed: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v13;
        uint64_t v16 = v14;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0x22u, 1);
      }
    }
  }
  if (*(void *)(a1 + 88)) {
    (*(void (**)(void))(**(void **)(a1 + 80) + 8))(*(void *)(a1 + 80));
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 88);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10) {
      (*(void (**)(uint64_t, void *(*)(uint64_t, uint64_t), uint64_t))(*(void *)v10 + 72))(v10, sub_244DC63C8, a1);
    }
  }
  *(_DWORD *)long long buf = 116;
  *(void *)&uint8_t buf[8] = "src/app/OperationalSessionSetup.cpp";
  LODWORD(v16) = 568;
  sub_244DC4FC0(a1, (uint64_t)buf, 1, 1);
  int v11 = *(void (**)(uint64_t))(a1 + 560);
  if (v11)
  {
    *(void *)(a1 + 560) = 0;
    v11(a1 + 544);
  }
  sub_24479DFF4(v2);
  sub_244DC64D0((void *)(a1 + 184));
  sub_244D87F44(a1 + 144);
  return a1;
}

uint64_t sub_244DC5D78(uint64_t a1)
{
  return sub_244DC5A4C(a1 - 8);
}

void sub_244DC5D80(uint64_t a1)
{
  sub_244DC5A4C(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244DC5DB8(uint64_t a1)
{
  sub_244DC5A4C(a1 - 8);

  JUMPOUT(0x245695FA0);
}

void *sub_244DC5DF4(void *result)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)result + 529))
  {
    uint64_t v1 = (uint64_t)result;
    if (*((unsigned char *)result + 528) != 1) {
      sub_244E29F48();
    }
    *((unsigned char *)result + 529) = 1;
    sub_244DC40C0((uint64_t)result, 2);
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    uint64_t result = (void *)sub_244DC4658(v1, (uint64_t)&v4);
    if (v4)
    {
      int v2 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v4;
        uint64_t v7 = v5;
        int v3 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "Failed to look up peer address: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v4;
        uint64_t v7 = v5;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0x22u, 1);
      }
      *(_OWORD *)long long buf = v4;
      uint64_t v7 = v5;
      return sub_244DC4FC0(v1, (uint64_t)buf, 1, 0);
    }
  }
  return result;
}

void *sub_244DC5F60(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_244DC4898(a1, a3);
}

void *sub_244DC5F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244DC4898((void *)(a1 - 8), a3);
}

void *sub_244DC5F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v17[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 96);
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    v17[0] = *(void *)(a3 + 16);
    uint64_t v8 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v7);
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v17[0]) = v7;
    WORD2(v17[0]) = 2080;
    *(void *)((char *)v17 + 6) = v8;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "OperationalSessionSetup[%u:%08X%08X]: operational discovery failed: %s", buf, 0x1Eu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    v17[0] = *(void *)(a3 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0x22u, 1);
  }
  if (*(unsigned char *)(a1 + 528) != 2 || !*(unsigned char *)(a1 + 536)) {
    goto LABEL_16;
  }
  uint64_t v9 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Retrying operational DNS-SD discovery. Attempts remaining: %u", buf, 8u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  int v11 = *(unsigned __int8 *)(a1 + 534);
  if (v11 != 255) {
    *(unsigned char *)(a1 + 534) = v11 + 1;
  }
  int v12 = *(unsigned __int8 *)(a1 + 535);
  if (*(unsigned char *)(a1 + 535))
  {
    LOBYTE(v12) = v12 - 1;
    *(unsigned char *)(a1 + 535) = v12;
    int v12 = v12;
  }
  *(_DWORD *)long long buf = 2;
  *(void *)&uint8_t buf[8] = "core_dev_operational_discovery_attempt_ctr";
  LODWORD(v17[0]) = v12;
  BYTE4(v17[0]) = 2;
  sub_244D7E78C((uint64_t)buf);
  memset(buf, 0, sizeof(buf));
  v17[0] = 0;
  sub_244DC4658(a1, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    long long v14 = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a3 + 16);
    return (void *)sub_244DC6238(a1, &v14, 0x3Cu);
  }
  else
  {
LABEL_16:
    *(_DWORD *)long long buf = 1;
    *(void *)&uint8_t buf[8] = "core_dev_operational_discovery";
    LODWORD(v17[0]) = *(_DWORD *)a3;
    BYTE4(v17[0]) = 3;
    sub_244D7E78C((uint64_t)buf);
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    v17[0] = *(void *)(a3 + 16);
    return sub_244DC4FC0(a1, (uint64_t)buf, 1, 0);
  }
}

uint64_t sub_244DC6238(uint64_t result, long long *a2, unsigned __int16 a3)
{
  uint64_t v21 = 0;
  uint64_t v3 = result + 544;
  if (*(void *)(result + 544) != result + 544)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void **)(result + 552);
    v20[0] = *(void *)(result + 544);
    v20[1] = v5;
    *uint64_t v5 = v20;
    int v6 = (void *)v20[0];
    *(void *)(v20[0] + 8) = v20;
    *(void *)(result + 552) = v3;
    *(void *)(result + 544) = v3;
    if (v6 != v20)
    {
      uint64_t v8 = a3;
      do
      {
        uint64_t v17 = &v17;
        uint64_t v18 = &v17;
        int v19 = 0;
        uint64_t v9 = (void (*)(void *))v6[2];
        if (v9)
        {
          unsigned char v6[2] = 0;
          v9(v6);
          int v10 = (void (*)(void *))v6[2];
          if (v10)
          {
            unsigned char v6[2] = 0;
            v10(v6);
          }
        }
        v6[1] = v18;
        unsigned char v6[2] = sub_244DC64B4;
        void *v18 = v6;
        uint64_t v18 = v6;
        *int v6 = &v17;
        uint64_t v11 = v6[3];
        int v12 = (uint64_t (*)(uint64_t, uint64_t, long long *, uint64_t))v6[4];
        long long v15 = *a2;
        uint64_t v16 = *((void *)a2 + 2);
        uint64_t result = v12(v11, v4 + 96, &v15, v8);
        if (v17 != &v17) {
          uint64_t result = sub_244DC643C(v4, v6);
        }
        long long v13 = v19;
        if (v19)
        {
          int v19 = 0;
          uint64_t result = v13(&v17);
        }
        int v6 = (void *)v20[0];
      }
      while ((void *)v20[0] != v20);
    }
    long long v14 = v21;
    if (v21)
    {
      uint64_t v21 = 0;
      return v14(v20);
    }
  }
  return result;
}

void *sub_244DC6388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244DC5F74(a1 - 8, a2, a3);
}

unsigned char *sub_244DC6390(unsigned char *result, int a2)
{
  if (a2)
  {
    unsigned __int8 v2 = a2 - (result[528] != 1);
    if (result[534] < v2) {
      result[534] = v2;
    }
    if (result[536] < v2) {
      result[536] = v2;
    }
  }
  return result;
}

void *sub_244DC63C8(uint64_t a1, uint64_t a2)
{
  sub_244DC40C0(a2, 2);
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  uint64_t result = (void *)sub_244DC4658(a2, (uint64_t)&v4);
  if (v4)
  {
    long long v6 = v4;
    uint64_t v7 = v5;
    return sub_244DC4FC0(a2, (uint64_t)&v6, 1, 0);
  }
  return result;
}

uint64_t sub_244DC643C(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  long long v4 = (uint64_t (*)(void *))a2[2];
  if (v4)
  {
    a2[2] = 0;
    uint64_t result = v4(a2);
    uint64_t v5 = (uint64_t (*)(void *))a2[2];
    if (v5)
    {
      a2[2] = 0;
      uint64_t result = v5(a2);
    }
  }
  a2[2] = sub_244DC64B4;
  a2[1] = *(void *)(v3 + 552);
  **(void **)(v3 + 552) = a2;
  *(void *)(v3 + 552) = a2;
  *a2 = v3 + 544;
  return result;
}

void *sub_244DC64B4(void *result)
{
  *(void *)(*result + 8) = result[1];
  *(void *)result[1] = *result;
  *uint64_t result = result;
  result[1] = result;
  result[2] = 0;
  return result;
}

void *sub_244DC64D0(void *a1)
{
  unsigned __int8 v2 = (void *)*a1;
  if ((void *)*a1 != a1)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      *unsigned __int8 v2 = v2;
      v2[1] = v2;
      v2[2] = 0;
      unsigned __int8 v2 = v3;
    }
    while (v3 != a1);
  }
  *a1 = a1;
  a1[1] = a1;
  long long v4 = (void (*)(void *))a1[2];
  if (v4)
  {
    a1[2] = 0;
    v4(a1);
  }
  return a1;
}

uint64_t sub_244DC6530(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  long long v6 = a2;
  uint64_t v7 = result;
  if (a2)
  {
    uint64_t v8 = (uint64_t (*)(uint64_t *))a2[2];
    if (v8)
    {
      a2[2] = 0;
      uint64_t result = v8(a2);
    }
    unsigned char v6[2] = (uint64_t)sub_244DC6638;
    *long long v6 = v7;
    v6[1] = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v6;
    *(void *)(v7 + 8) = v6;
  }
  if (a3)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t *))a3[2];
    if (v9)
    {
      a3[2] = 0;
      uint64_t result = v9(a3);
    }
    a3[2] = (uint64_t)sub_244DC667C;
    *a3 = v7;
    if (v6) {
      int v10 = v6;
    }
    else {
      int v10 = (void *)v7;
    }
    if (!v6) {
      long long v6 = a3;
    }
    a3[1] = v10[1];
    **(void **)(v7 + 8) = a3;
    *(void *)(v7 + 8) = a3;
  }
  if (a4)
  {
    uint64_t v11 = (uint64_t (*)(uint64_t *))a4[2];
    if (v11)
    {
      a4[2] = 0;
      uint64_t result = v11(a4);
    }
    a4[2] = (uint64_t)sub_244DC66C0;
    *a4 = v7;
    if (v6) {
      int v12 = v6;
    }
    else {
      int v12 = (void *)v7;
    }
    a4[1] = v12[1];
    **(void **)(v7 + 8) = a4;
    *(void *)(v7 + 8) = a4;
  }
  return result;
}

uint64_t sub_244DC6638(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  unsigned __int8 v2 = (void *)*v1;
  do
  {
    uint64_t v3 = v2;
    unsigned __int8 v2 = (void *)*v2;
    *uint64_t v3 = v3;
    v3[1] = v3;
    v3[2] = 0;
  }
  while ((void *)v2[1] == v1);
  *uint64_t v1 = v2;
  uint64_t v4 = v2[1];
  do
  {
    v2[1] = v1;
    unsigned __int8 v2 = (void *)*v2;
  }
  while (v2[1] == v4);
  return result;
}

uint64_t sub_244DC667C(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  unsigned __int8 v2 = (void *)*v1;
  do
  {
    uint64_t v3 = v2;
    unsigned __int8 v2 = (void *)*v2;
    *uint64_t v3 = v3;
    v3[1] = v3;
    v3[2] = 0;
  }
  while ((void *)v2[1] == v1);
  *uint64_t v1 = v2;
  uint64_t v4 = v2[1];
  do
  {
    v2[1] = v1;
    unsigned __int8 v2 = (void *)*v2;
  }
  while (v2[1] == v4);
  return result;
}

uint64_t sub_244DC66C0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  unsigned __int8 v2 = (void *)*v1;
  do
  {
    uint64_t v3 = v2;
    unsigned __int8 v2 = (void *)*v2;
    *uint64_t v3 = v3;
    v3[1] = v3;
    v3[2] = 0;
  }
  while ((void *)v2[1] == v1);
  *uint64_t v1 = v2;
  uint64_t v4 = v2[1];
  do
  {
    v2[1] = v1;
    unsigned __int8 v2 = (void *)*v2;
  }
  while (v2[1] == v4);
  return result;
}

BOOL sub_244DC6704(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = *a1;
  int v12 = v4;
  if (v4 != (uint64_t *)a1)
  {
    uint64_t v5 = v4[1];
    if ((uint64_t (*)(uint64_t))v4[2] == sub_244DC6638)
    {
      *a2 = v4;
      long long v6 = (uint64_t *)*v4;
      a2 = &v12;
    }
    else
    {
      long long v6 = 0;
    }
    *a2 = v6;
    uint64_t v7 = v12;
    if (v12[1] == v5 && (uint64_t (*)(uint64_t))v12[2] == sub_244DC667C)
    {
      *a3 = v12;
      uint64_t v8 = (uint64_t *)*v7;
      a3 = &v12;
    }
    else
    {
      uint64_t v8 = 0;
    }
    *a3 = v8;
    uint64_t v9 = v12;
    if (v12[1] == v5 && (uint64_t (*)(uint64_t))v12[2] == sub_244DC66C0)
    {
      *a4 = v12;
      int v10 = (uint64_t *)*v9;
      a4 = &v12;
    }
    else
    {
      int v10 = 0;
    }
    *a4 = v10;
  }
  return v4 != (uint64_t *)a1;
}

uint64_t sub_244DC67D8@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 v8 = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (result)
  {
    int v6 = 27;
    int v7 = 47;
  }
  else
  {
    uint64_t result = (uint64_t)sub_244DC6A48(a1 + 8, &v8, &v8);
    int v7 = 0;
    int v6 = 29;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/app/PendingResponseTrackerImpl.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t *sub_244DC6868@<X0>(void *a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 v8 = a2;
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (result)
  {
    uint64_t result = sub_244DC6EA0(a1 + 1, &v8);
    int v6 = 0;
    int v7 = 36;
  }
  else
  {
    int v7 = 34;
    int v6 = 16;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/app/PendingResponseTrackerImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

BOOL sub_244DC68F4(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v3 = a2;
  return sub_244DC6ED8((void *)(a1 + 8), &v3) != 0;
}

uint64_t sub_244DC6928(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_244DC6930@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  if (result)
  {
    uint64_t v5 = a1 + 1;
    uint64_t v6 = a1[3];
    __int16 v7 = *(_WORD *)(v6 + 16);
    uint64_t result = sub_244DC6F8C(v5, (uint64_t *)v6);
    *(_WORD *)(a2 + 2) = v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  *(unsigned char *)a2 = v8;
  return result;
}

void *sub_244DC69A0(void *a1)
{
  *a1 = &unk_26F9586F8;
  sub_244DBDA78((uint64_t)(a1 + 1));
  return a1;
}

void sub_244DC69E4(void *a1)
{
  *a1 = &unk_26F9586F8;
  sub_244DBDA78((uint64_t)(a1 + 1));

  JUMPOUT(0x245695FA0);
}

void *sub_244DC6A48(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_244DC6C54(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *int v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_244DC6C54(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_244DC6D44(a1, prime);
    }
  }
}

void sub_244DC6D44(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_2447A0110();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t *sub_244DC6EA0(void *a1, unsigned __int16 *a2)
{
  uint64_t result = (uint64_t *)sub_244DC6ED8(a1, a2);
  if (result)
  {
    sub_244DC6F8C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t **sub_244DC6ED8(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_244DC6F8C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_244DC6FD0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_244DC6FD0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_244DC7104(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (sub_244CA97BC(a2))
  {
    uint64_t v10 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *(unsigned __int16 *)(a2 + 112);
      if (sub_244D64530(a2)) {
        int v12 = 105;
      }
      else {
        int v12 = 114;
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)char v41 = v11;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v12;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Dropping Timed Request on group exchange %u%c", buf, 0xEu);
    }
    if (sub_244CC4E58(1u))
    {
      sub_244D64530(a2);
      sub_244CC4DE0(0xDu, 1);
    }
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/app/TimedHandler.cpp";
    int v13 = 42;
LABEL_10:
    *(_DWORD *)(a5 + 16) = v13;
    return;
  }
  if (*(unsigned char *)(a1 + 8) == 2)
  {
    unint64_t v18 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    int v19 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      int v20 = *(unsigned __int16 *)(a2 + 112);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)char v41 = HIDWORD(v18);
      if (sub_244D64530(a2)) {
        int v21 = 105;
      }
      else {
        int v21 = 114;
      }
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v18;
      *(_WORD *)__int16 v42 = 2048;
      *(void *)&v42[2] = a1;
      __int16 v43 = 1024;
      int v44 = v20;
      __int16 v45 = 1024;
      int v46 = v21;
      _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_INFO, "Timed following action arrived at 0x%08X%08X: handler %p exchange %u%c", buf, 0x24u);
    }
    if (sub_244CC4E58(3u))
    {
      sub_244D64530(a2);
      sub_244CC4DE0(0xDu, 3);
    }
    if (*(void *)(a1 + 24) < v18)
    {
      uint64_t v22 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v23 = *(unsigned __int16 *)(a2 + 112);
        int v24 = sub_244D64530(a2);
        *(_DWORD *)long long buf = 134218496;
        *(void *)char v41 = a1;
        if (v24) {
          int v25 = 105;
        }
        else {
          int v25 = 114;
        }
        *(_WORD *)&v41[8] = 1024;
        *(_DWORD *)__int16 v42 = v23;
        *(_WORD *)&v42[4] = 1024;
        *(_DWORD *)&v42[6] = v25;
        _os_log_impl(&dword_2446BD000, v22, OS_LOG_TYPE_ERROR, "Timeout expired: handler %p exchange %u%c", buf, 0x18u);
      }
      if (sub_244CC4E58(1u))
      {
        sub_244D64530(a2);
        sub_244CC4DE0(0xDu, 1);
      }
      size_t v17 = (uint8_t *)a5;
      goto LABEL_50;
    }
    if (!*((_WORD *)a3 + 2))
    {
      int v30 = *((unsigned __int16 *)a3 + 3);
      int v31 = *a3;
      if (v30 == 1 && v31 == 8)
      {
        long long v32 = sub_244CC8484(0xDu, "DataManagement");
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          int v33 = *(unsigned __int16 *)(a2 + 112);
          int v34 = sub_244D64530(a2);
          *(_DWORD *)long long buf = 134218496;
          *(void *)char v41 = a1;
          if (v34) {
            int v35 = 105;
          }
          else {
            int v35 = 114;
          }
          *(_WORD *)&v41[8] = 1024;
          *(_DWORD *)__int16 v42 = v33;
          *(_WORD *)&v42[4] = 1024;
          *(_DWORD *)&v42[6] = v35;
          _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_INFO, "Handing timed invoke to IM engine: handler %p exchange %u%c", buf, 0x18u);
        }
        if (sub_244CC4E58(3u))
        {
          sub_244D64530(a2);
          sub_244CC4DE0(0xDu, 3);
        }
        (*(void (**)(void, uint64_t, uint64_t, unsigned __int8 *, void *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a1, a2, a3, a4);
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = "src/app/TimedHandler.cpp";
        int v13 = 79;
        goto LABEL_10;
      }
      if (v30 == 1 && v31 == 6)
      {
        uint64_t v36 = sub_244CC8484(0xDu, "DataManagement");
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          int v37 = *(unsigned __int16 *)(a2 + 112);
          int v38 = sub_244D64530(a2);
          *(_DWORD *)long long buf = 134218496;
          *(void *)char v41 = a1;
          if (v38) {
            int v39 = 105;
          }
          else {
            int v39 = 114;
          }
          *(_WORD *)&v41[8] = 1024;
          *(_DWORD *)__int16 v42 = v37;
          *(_WORD *)&v42[4] = 1024;
          *(_DWORD *)&v42[6] = v39;
          _os_log_impl(&dword_2446BD000, v36, OS_LOG_TYPE_INFO, "Handing timed write to IM engine: handler %p exchange %u%c", buf, 0x18u);
        }
        if (sub_244CC4E58(3u))
        {
          sub_244D64530(a2);
          sub_244CC4DE0(0xDu, 3);
        }
        (*(void (**)(void, uint64_t, uint64_t, unsigned __int8 *, void *))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a1, a2, a3, a4);
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = "src/app/TimedHandler.cpp";
        int v13 = 87;
        goto LABEL_10;
      }
    }
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 8))
  {
LABEL_42:
    long long v26 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      int v27 = *(unsigned __int16 *)(a2 + 112);
      int v28 = sub_244D64530(a2);
      *(_DWORD *)long long buf = 134218496;
      *(void *)char v41 = a1;
      if (v28) {
        int v29 = 105;
      }
      else {
        int v29 = 114;
      }
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)__int16 v42 = v27;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v29;
      _os_log_impl(&dword_2446BD000, v26, OS_LOG_TYPE_ERROR, "Unexpected unknown message in tiemd interaction: handler %p exchange %u%c", buf, 0x18u);
    }
    if (sub_244CC4E58(1u))
    {
      sub_244D64530(a2);
      sub_244CC4DE0(0xDu, 1);
    }
    size_t v17 = (uint8_t *)a5;
    goto LABEL_50;
  }
  if (*((_WORD *)a3 + 2) || *((_WORD *)a3 + 3) != 1 || *a3 != 10) {
    sub_244E29FE8();
  }
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  sub_244DC78D0(a1, a2, a4, (void *)a5);
  if (*(_DWORD *)a5)
  {
    BOOL v14 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = *(unsigned __int16 *)(a2 + 112);
      *(_DWORD *)long long buf = 134218496;
      *(void *)char v41 = a1;
      if (sub_244D64530(a2)) {
        int v16 = 105;
      }
      else {
        int v16 = 114;
      }
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)__int16 v42 = v15;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v16;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Failed to parse Timed Request action: handler %p exchange %u%c", buf, 0x18u);
    }
    if (sub_244CC4E58(1u))
    {
      sub_244D64530(a2);
      sub_244CC4DE0(0xDu, 1);
    }
    size_t v17 = buf;
LABEL_50:
    sub_244DD5B5C(a2, 0, (uint64_t)v17);
  }
}

void sub_244DC78D0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v23);
  int v24 = 0;
  sub_2446DE1E4((uint64_t)v23, a3);
  sub_244CCF15C((uint64_t)v22);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CCF054((uint64_t)v22, (uint64_t)v23, a4);
  if (!*(_DWORD *)a4)
  {
    unsigned __int16 v21 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    sub_244CCD098(v22, &v21, a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_244CCF0D0((uint64_t)v22, a4);
      if (!*(_DWORD *)a4)
      {
        unint64_t v8 = sub_244CC8484(0xDu, "DataManagement");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          unsigned int v9 = v21;
          int v10 = *(unsigned __int16 *)(a2 + 112);
          int v11 = sub_244D64530(a2);
          uint64_t buf = __PAIR64__(v9, 67109888);
          __int16 v26 = 2048;
          if (v11) {
            int v12 = 105;
          }
          else {
            int v12 = 114;
          }
          *(void *)int v27 = a1;
          *(_WORD *)&v27[8] = 1024;
          *(_DWORD *)&v27[10] = v10;
          __int16 v28 = 1024;
          int v29 = v12;
          _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Got Timed Request with timeout %u: handler %p exchange %u%c", (uint8_t *)&buf, 0x1Eu);
        }
        if (sub_244CC4E58(3u))
        {
          sub_244D64530(a2);
          sub_244CC4DE0(0xDu, 3);
        }
        uint64_t v13 = v21;
        sub_24479B4A8(a2, &buf);
        unsigned int v14 = sub_244D87C24(buf, 2000);
        if (v14 <= v13) {
          int v15 = v13;
        }
        else {
          int v15 = v14;
        }
        sub_244D645B4(a2, v15);
        (*(void (**)(uint64_t))(*(void *)buf + 32))(buf);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_244DD5B5C(a2, 1, (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *(unsigned char *)(a1 + 8) = 2;
          *(void *)(a1 + 24) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0) + v13;
          int v16 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = *(void *)(a1 + 24);
            int v18 = *(unsigned __int16 *)(a2 + 112);
            int v19 = sub_244D64530(a2);
            LODWORD(buf) = 67110144;
            HIDWORD(buf) = HIDWORD(v17);
            if (v19) {
              int v20 = 105;
            }
            else {
              int v20 = 114;
            }
            __int16 v26 = 1024;
            *(_DWORD *)int v27 = v17;
            *(_WORD *)&v27[4] = 2048;
            *(void *)&v27[6] = a1;
            __int16 v28 = 1024;
            int v29 = v18;
            __int16 v30 = 1024;
            int v31 = v20;
            _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "Timed Request time limit 0x%08X%08X: handler %p exchange %u%c", (uint8_t *)&buf, 0x24u);
          }
          if (sub_244CC4E58(3u))
          {
            sub_244D64530(a2);
            sub_244CC4DE0(0xDu, 3);
          }
          *(_DWORD *)a4 = 0;
          a4[1] = "src/app/TimedHandler.cpp";
          *((_DWORD *)a4 + 4) = 139;
        }
      }
    }
  }
  if (v24) {
    sub_244CC8A0C(v24);
  }
}

uint64_t sub_244DC7C78(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a1);
}

void sub_244DC7CA4()
{
}

void sub_244DC7CB8(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_244CC8F5C(0x19uLL, 0x26u, &v10);
  if (v10)
  {
    sub_244CB62B8((uint64_t)v7);
    v8[1] = 0;
    unsigned char v8[2] = 0;
    v8[0] = &unk_26F9536C8;
    char v9 = 0;
    sub_2447945A0((uint64_t)v8, &v10, 0);
    sub_244CB6318((uint64_t)v7, (uint64_t)v8, 0xFFFFFFFF, (uint64_t)&v5);
    sub_244CCCDE0((uint64_t)&v5);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CCF9D0((uint64_t)&v5, v7, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      sub_244CCFEE0((uint64_t)&v5);
      *(_OWORD *)a2 = v5;
      a2[2] = v6;
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_2446DE160((uint64_t)v7, &v10, a2);
        if (!*(_DWORD *)a2)
        {
          __int16 v4 = 1;
          sub_244D645BC(a1, 0x10000u, 10, (uint64_t *)&v10, &v4, (uint64_t)a2);
        }
      }
    }
    sub_244CA539C(v8);
    if (v10) {
      sub_244CC8A0C(v10);
    }
  }
  else
  {
    *(_DWORD *)a2 = 11;
    a2[1] = "src/app/TimedRequest.cpp";
    *((_DWORD *)a2 + 4) = 40;
  }
}

uint64_t sub_244DC7E30(uint64_t a1)
{
  sub_244DC7EA0(a1, 5);
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int8x8_t v3 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v3();
  }
  return result;
}

uint64_t sub_244DC7EA0(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 48) = a2;
  int8x8_t v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(int *)(a1 + 48);
    if (v4 > 5) {
      long long v5 = "N/A";
    }
    else {
      long long v5 = off_2651A9750[v4];
    }
    *(_DWORD *)uint64_t buf = 68157954;
    int v8 = 10;
    __int16 v9 = 2080;
    int v10 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "WriteClient moving to [%10.10s]", buf, 0x12u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0xDu, 3);
  }
  return result;
}

void sub_244DC7FC8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v23);
  int v24 = 0;
  sub_244CB3988((uint64_t)v21);
  sub_244CCF15C((uint64_t)v20);
  sub_244CCF15C((uint64_t)v19);
  sub_2446DE1E4((uint64_t)v23, a2);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CCF054((uint64_t)v20, (uint64_t)v23, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CCF1C8(v20, (uint64_t)v19, &v16);
    int v6 = v16;
    if (v16 == 33)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/app/WriteClient.cpp";
      int v7 = 63;
LABEL_4:
      *(_DWORD *)(a3 + 16) = v7;
    }
    else
    {
      int v8 = v17;
      uint64_t v9 = v18;
      *(void *)a3 = v16;
      *(void *)(a3 + 8) = v8;
      *(void *)(a3 + 16) = v9;
      if (!v6)
      {
        sub_244CCF1AC((uint64_t)v19, (uint64_t)v21);
        while (1)
        {
          sub_244CB4E58((uint64_t)v21, &v16);
          int v10 = v16;
          if (v16) {
            break;
          }
          if (v22 != 256)
          {
            *(_DWORD *)a3 = 36;
            *(void *)(a3 + 8) = "src/app/WriteClient.cpp";
            int v7 = 71;
            goto LABEL_4;
          }
          sub_244CCF15C((uint64_t)&v16);
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CCFA34((uint64_t)&v16, (uint64_t)v21, (void *)a3);
          if (!*(_DWORD *)a3)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            sub_244DC818C(a1, (int *)&v16, (void *)a3);
            if (!*(_DWORD *)a3) {
              continue;
            }
          }
          goto LABEL_6;
        }
        int v11 = HIDWORD(v16);
        int v12 = v17;
        int v13 = v18;
        int v14 = HIDWORD(v18);
        BOOL v15 = v16 == 33;
        if (v16 == 33)
        {
          int v10 = 0;
          int v12 = "src/app/WriteClient.cpp";
          int v13 = 82;
        }
        *(_DWORD *)a3 = v10;
        *(_DWORD *)(a3 + 4) = v11;
        *(void *)(a3 + 8) = v12;
        *(_DWORD *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 20) = v14;
        if (v15) {
          sub_244CCF0D0((uint64_t)v20, (void *)a3);
        }
      }
    }
  }
LABEL_6:
  if (v24) {
    sub_244CC8A0C(v24);
  }
}

void sub_244DC818C(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9738;
  a3[2] = 511;
  sub_244CCF15C((uint64_t)v17);
  __int16 v15 = 0;
  sub_244CCF15C((uint64_t)v14);
  __int16 v11 = 0;
  char v12 = 0;
  v13[12] = 0;
  memset(v13, 0, 11);
  sub_244CCCCBC(a2, (uint64_t)v17, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CCBEE8(v17, &v11, 0, &v9);
    *(_OWORD *)a3 = v9;
    a3[2] = v10;
    if (!*(_DWORD *)a3)
    {
      sub_244CCC9D4(a2, (uint64_t)v14, &v9);
      *(_OWORD *)a3 = v9;
      a3[2] = v10;
      if (!*(_DWORD *)a3)
      {
        sub_244CCF540((uint64_t)v14, &v15, &v9);
        *(_OWORD *)a3 = v9;
        a3[2] = v10;
        if (!*(_DWORD *)a3)
        {
          uint64_t v6 = *(void *)(a1 + 40);
          if (v6)
          {
            __int16 v7 = v15;
            if (HIBYTE(v15)) {
              char v8 = v16;
            }
            (*(void (**)(uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)v6 + 16))(v6, a1, &v11, &v7);
          }
        }
      }
    }
  }
}

void sub_244DC82EC(__n128 *a1@<X0>, unsigned __int16 *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = sub_244CCBB4C((uint64_t)&a1[12]);
  *a3 = a1[12];
  a3[1].n128_u64[0] = a1[13].n128_u64[0];
  if (!a3->n128_u32[0])
  {
    uint64_t v7 = v6;
    if (*((unsigned char *)a2 + 16))
    {
      sub_2446F12CC((unsigned char *)a2 + 16);
      sub_244CCB9E4(v7);
      a1[21].n128_u8[2] = 1;
    }
    *a3 = *(__n128 *)v7;
    a3[1].n128_u64[0] = *(void *)(v7 + 16);
    if (!a3->n128_u32[0])
    {
      uint64_t v8 = sub_244CCB98C(v7);
      long long v9 = (__n128 *)v8;
      if (*a2 != 0xFFFF) {
        sub_244CCC220(v8);
      }
      uint64_t v10 = sub_244CCC278((uint64_t)v9);
      sub_244CCC2D0(v10);
      unsigned int v11 = *((unsigned __int8 *)a2 + 14);
      if (v11 >= 2)
      {
        if (v11 != 4)
        {
          int v13 = 118;
          int v12 = 108;
LABEL_13:
          a3->n128_u32[0] = v12;
          a3->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
          a3[1].n128_u32[0] = v13;
          return;
        }
        LOBYTE(v14) = 0;
        char v15 = 0;
        sub_244CCC328((uint64_t)v9, &v14);
      }
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCBA3C(v9, a3);
      if (a3->n128_u32[0]) {
        return;
      }
      int v12 = 0;
      int v13 = 123;
      goto LABEL_13;
    }
  }
}

void sub_244DC8428(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (__n128 *)sub_244CCBBC0(a1 + 192);
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  sub_244CCBA3C(v4, a2);
  if (!a2->n128_u32[0])
  {
    sub_244DC7EA0(a1, 1);
    a2->n128_u32[0] = 0;
    a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
    a2[1].n128_u32[0] = 131;
  }
}

uint64_t sub_244DC8490(uint64_t a1)
{
  return *(void *)(sub_244CCBBC0(a1 + 192) + 24);
}

void sub_244DC84B0(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v10 = 0;
  if (a1[3].n128_u32[0] == 1)
  {
    unint64_t v4 = a1[11].n128_u64[0];
    if (v4)
    {
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      if (*(_WORD *)(v4 + 60) != 21169)
      {
        int v6 = 175;
        int v7 = 3;
        goto LABEL_9;
      }
      unsigned int v5 = *(_DWORD *)(v4 + 52);
      if (v5 <= 6)
      {
        int v6 = 176;
        int v7 = 11;
LABEL_9:
        a2->n128_u32[0] = v7;
        a2->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
        goto LABEL_10;
      }
      *(_DWORD *)(v4 + 52) = v5 - 7;
      *(_DWORD *)(v4 + 40) += 7;
      sub_244CCBA3C(a1 + 12, a2);
      if (a2->n128_u32[0]) {
        goto LABEL_11;
      }
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      uint64_t v8 = sub_244CCF420((uint64_t)&a1[9].n128_i64[1]);
      sub_244CCF478(v8, (uint64_t)a2);
      if (a2->n128_u32[0]) {
        goto LABEL_11;
      }
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      sub_2446DE160((uint64_t)&a1[3].n128_i64[1], &v10, a2);
      if (a2->n128_u32[0]) {
        goto LABEL_11;
      }
      long long v9 = (void *)a1[20].n128_u64[1];
      if (v9)
      {
        sub_244CC8B70(v9, (uint64_t *)&v10);
      }
      else
      {
        a1[20].n128_u64[1] = (unint64_t)v10;
        uint64_t v10 = 0;
      }
      a2->n128_u32[0] = 0;
      a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
      int v6 = 153;
    }
    else
    {
      a2->n128_u32[0] = 3;
      a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
      int v6 = 145;
    }
  }
  else
  {
    a2->n128_u32[0] = 3;
    a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
    int v6 = 142;
  }
LABEL_10:
  a2[1].n128_u32[0] = v6;
LABEL_11:
  if (v10) {
    sub_244CC8A0C(v10);
  }
}

void sub_244DC8634(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  if (a1[3].n128_u32[0] == 1)
  {
    a2->n128_u32[0] = 0;
    a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
    a2[1].n128_u32[0] = 162;
  }
  else
  {
    sub_244DC8660(a1, a2);
  }
}

void sub_244DC8660(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  if (a1[3].n128_u32[0] != 1
    || (a2->n128_u64[0] = 0, a2->n128_u64[1] = 0, a2[1].n128_u64[0] = 0, sub_244DC84B0(a1, a2), !a2->n128_u32[0]))
  {
    if (a1[20].n128_u8[0] && a1[20].n128_u64[1])
    {
      a2->n128_u32[0] = 11;
      a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
      a2[1].n128_u32[0] = 175;
      return;
    }
    sub_244CC8F5C(0x4AAuLL, 0x26u, &v7);
    if (v7)
    {
      if ((unint64_t)sub_244CC8B50((uint64_t)v7) < 0x4AB) {
        unsigned int v4 = 23;
      }
      else {
        unsigned int v4 = (unsigned __int16)(sub_244CC8B50((uint64_t)v7) - 1171);
      }
      sub_2447945A0((uint64_t)&a1[7].n128_i64[1], &v7, 0);
      sub_244CB6318((uint64_t)&a1[3].n128_i64[1], (uint64_t)&a1[7].n128_i64[1], 0xFFFFFFFF, (uint64_t)v8);
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      sub_244CB64F8((uint64_t)&a1[3].n128_i64[1], v4, (uint64_t)a2);
      if (a2->n128_u32[0]) {
        goto LABEL_16;
      }
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      int v6 = (__n128 *)((char *)a1 + 152);
      a2[1].n128_u64[0] = 0;
      sub_244CCF9D0((uint64_t)&a1[9].n128_i64[1], &a1[3].n128_u64[1], (uint64_t)a2);
      if (a2->n128_u32[0]) {
        goto LABEL_16;
      }
      sub_244CCC170((uint64_t)&a1[9].n128_i64[1]);
      sub_244CCE6E0((uint64_t)&a1[9].n128_i64[1]);
      *a2 = *v6;
      a2[1].n128_u64[0] = a1[10].n128_u64[1];
      if (a2->n128_u32[0]) {
        goto LABEL_16;
      }
      sub_244CCFF6C((uint64_t)&a1[9].n128_i64[1]);
      *a2 = *v6;
      a2[1].n128_u64[0] = a1[10].n128_u64[1];
      if (a2->n128_u32[0]) {
        goto LABEL_16;
      }
      if (a1[11].n128_u64[0])
      {
        a2->n128_u32[0] = 0;
        a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
        int v5 = 212;
      }
      else
      {
        a2->n128_u32[0] = 3;
        a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
        int v5 = 210;
      }
    }
    else
    {
      a2->n128_u32[0] = 11;
      a2->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
      int v5 = 178;
    }
    a2[1].n128_u32[0] = v5;
LABEL_16:
    if (v7) {
      sub_244CC8A0C(v7);
    }
  }
}

void sub_244DC8860(__n128 *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  sub_244CB3988((uint64_t)v11);
  sub_244CB3B04((uint64_t)v11, a3);
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  sub_244DC82EC(a1, a2, a4);
  if (!a4->n128_u32[0])
  {
    uint64_t v8 = *(char **)(sub_244CCBBC0((uint64_t)&a1[12]) + 24);
    if (!v8)
    {
      int v10 = 224;
      int v9 = 3;
      goto LABEL_7;
    }
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_244CB7128(v8, 2, (uint64_t)v11, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      sub_244DC8428((uint64_t)a1, a4);
      if (!a4->n128_u32[0])
      {
        int v9 = 0;
        int v10 = 227;
LABEL_7:
        a4->n128_u32[0] = v9;
        a4->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
        a4[1].n128_u32[0] = v10;
      }
    }
  }
}

double sub_244DC8944@<D0>(__n128 *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  sub_244CB62B8((uint64_t)&v21);
  uint64_t v8 = (long long *)a1[13].n128_u64[1];
  long long v9 = v8[3];
  long long v11 = *v8;
  long long v10 = v8[1];
  long long v23 = v8[2];
  long long v24 = v9;
  long long v21 = v11;
  long long v22 = v10;
  __n128 v19 = 0uLL;
  unint64_t v20 = 0;
  sub_244DC8860(a1, a2, a3, &v19);
  if (v19.n128_u32[0] == 25 || v19.n128_u32[0] == 11)
  {
    int v12 = (_OWORD *)a1[13].n128_u64[1];
    long long v13 = v21;
    long long v14 = v22;
    long long v15 = v24;
    unsigned __int8 v12[2] = v23;
    void v12[3] = v15;
    *int v12 = v13;
    v12[1] = v14;
    sub_244CCCE18((uint64_t)&a1[12]);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_244DC8660(a1, a4);
    if (a4->n128_u32[0]) {
      return result;
    }
    sub_244DC8860(a1, a2, a3, &v17);
    __n128 v19 = v17;
    unint64_t v20 = v18;
  }
  double result = v19.n128_f64[0];
  *a4 = v19;
  a4[1].n128_u64[0] = v20;
  return result;
}

void sub_244DC8A38(__n128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  if (a1[3].n128_u32[0] == 1)
  {
    a4->n128_u64[1] = (unint64_t)"src/app/WriteClient.cpp";
    a4[1].n128_u32[0] = 162;
  }
  else
  {
    sub_244DC8660(a1, a4);
    if (a4->n128_u32[0]) {
      return;
    }
  }
  if (*((unsigned char *)a2 + 14) || sub_244CB3B68(a3) != 22)
  {
    sub_244DC8944(a1, (unsigned __int16 *)a2, a3, a4);
  }
  else
  {
    sub_244CB3988((uint64_t)v24);
    sub_244CB3988((uint64_t)v23);
    uint64_t v17 = *a2;
    int v18 = *((_DWORD *)a2 + 2);
    __int16 v19 = *((_WORD *)a2 + 6);
    char v20 = *((unsigned char *)a2 + 14);
    if (*((unsigned char *)a2 + 16)) {
      int v22 = *((_DWORD *)a2 + 5);
    }
    sub_244CB3B04((uint64_t)v24, a3);
    sub_244CB4950((uint64_t)v24, (uint64_t)v23, (uint64_t)&v13);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    uint64_t v13 = 0;
    long long v14 = 0;
    sub_2447EB12C(a1, (unsigned __int16 *)&v17, &v13, a4);
    if (!a4->n128_u32[0])
    {
      char v20 = 4;
      while (1)
      {
        sub_244CB4E58((uint64_t)v23, &v13);
        if (v13) {
          break;
        }
        a4->n128_u64[0] = 0;
        a4->n128_u64[1] = 0;
        a4[1].n128_u64[0] = 0;
        sub_244DC8944(a1, (unsigned __int16 *)&v17, (uint64_t)v23, a4);
        if (a4->n128_u32[0]) {
          return;
        }
      }
      unsigned __int32 v8 = HIDWORD(v13);
      unsigned __int32 v9 = v16;
      if (v13 == 33) {
        unsigned __int32 v10 = 0;
      }
      else {
        unsigned __int32 v10 = v13;
      }
      if (v13 == 33) {
        long long v11 = "src/app/WriteClient.cpp";
      }
      else {
        long long v11 = v14;
      }
      if (v13 == 33) {
        int v12 = 280;
      }
      else {
        int v12 = v15;
      }
      a4->n128_u32[0] = v10;
      a4->n128_u32[1] = v8;
      a4->n128_u64[1] = (unint64_t)v11;
      a4[1].n128_u32[0] = v12;
      a4[1].n128_u32[1] = v9;
    }
  }
}

const char *sub_244DC8C00(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 48);
  if (v1 > 5) {
    return "N/A";
  }
  else {
    return off_2651A9750[v1];
  }
}

uint64_t sub_244DC8C28@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[3].n128_u32[0] != 1)
  {
    unsigned __int32 v10 = 3;
    long long v11 = "src/app/WriteClient.cpp";
    int v12 = 325;
    goto LABEL_5;
  }
  sub_244DC84B0(a1, &buf);
  unsigned __int32 v10 = buf.n128_u32[0];
  unsigned __int32 v4 = buf.n128_u32[1];
  int v5 = v25;
  if (buf.n128_u32[0])
  {
    long long v11 = (const char *)buf.n128_u64[1];
    int v12 = v24;
LABEL_5:
    uint64_t v13 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u64[0] = __PAIR64__(v4, v10);
      buf.n128_u64[1] = (unint64_t)v11;
      int v24 = v12;
      int v25 = v5;
      long long v14 = sub_244CB7B34((const char **)&buf, 1);
      buf.n128_u32[0] = 136315138;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v14;
      _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Write client failed to SendWriteRequest: %s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      buf.n128_u64[0] = __PAIR64__(v4, v10);
      buf.n128_u64[1] = (unint64_t)v11;
      int v24 = v12;
      int v25 = v5;
      sub_244CB7B34((const char **)&buf, 1);
      uint64_t result = sub_244CC4DE0(0xDu, 1);
    }
LABEL_9:
    *(_DWORD *)a4 = v10;
    *(_DWORD *)(a4 + 4) = v4;
    *(void *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = v12;
    *(_DWORD *)(a4 + 20) = v5;
    return result;
  }
  unsigned __int32 v16 = sub_244D66048(a1->n128_i64[1], a2, (uint64_t)a1, 1u);
  long long v11 = "src/app/WriteClient.cpp";
  if (!v16)
  {
    unsigned __int32 v10 = 11;
    int v12 = 333;
    goto LABEL_5;
  }
  uint64_t v17 = v16;
  sub_2447EA4BC((uint64_t)&a1[1]);
  a1[2].n128_u64[0] = (unint64_t)v17;
  v17[5] = a1 + 1;
  uint64_t v18 = sub_244CA1E70((uint64_t)&a1[1]);
  uint64_t result = sub_244CA97BC(v18);
  if (!result || !a1[21].n128_u8[2])
  {
    uint64_t v19 = sub_244CA1E70((uint64_t)&a1[1]);
    if (a3) {
      sub_244D645B4(v19, a3);
    }
    else {
      sub_244D64578(v19, 2000);
    }
    if (a1[20].n128_u8[0])
    {
      uint64_t v20 = a1[2].n128_i64[0];
      sub_2447A4DF0(&a1[20]);
      sub_244DC7CB8(v20, &buf);
      unsigned __int32 v10 = buf.n128_u32[0];
      unsigned __int32 v4 = buf.n128_u32[1];
      long long v11 = (const char *)buf.n128_u64[1];
      int v12 = v24;
      int v5 = v25;
      if (buf.n128_u32[0]) {
        goto LABEL_5;
      }
      sub_244DC7EA0((uint64_t)a1, 2);
    }
    else
    {
      sub_244DC8F68((uint64_t)a1, &buf);
      unsigned __int32 v10 = buf.n128_u32[0];
      unsigned __int32 v4 = buf.n128_u32[1];
      long long v11 = (const char *)buf.n128_u64[1];
      int v12 = v24;
      int v5 = v25;
      if (buf.n128_u32[0]) {
        goto LABEL_5;
      }
    }
    uint64_t v21 = *a2;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 16))(v21) == 3
      || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21), result == 4))
    {
      int v22 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl(&dword_2446BD000, v22, OS_LOG_TYPE_INFO, "Closing on group Communication ", (uint8_t *)&buf, 2u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0xDu, 3);
      }
      uint64_t result = sub_244DC7E30((uint64_t)a1);
    }
    unsigned __int32 v10 = 0;
    goto LABEL_9;
  }
  *(_DWORD *)a4 = 42;
  *(void *)(a4 + 8) = "src/app/WriteClient.cpp";
  *(_DWORD *)(a4 + 16) = 338;
  return result;
}

void sub_244DC8F68(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_244CC9214((void **)(a1 + 328), &v10);
  uint64_t v4 = sub_244CA1E70(a1 + 16);
  BOOL v5 = sub_244CA97BC(v4);
  if (*(void *)(a1 + 328) && v5)
  {
    int v6 = 400;
    int v7 = 3;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v8 = sub_244CA1E70(a1 + 16);
    __int16 v9 = 1;
    sub_244D645BC(v8, 0x10000u, 6, (uint64_t *)&v10, &v9, (uint64_t)a2);
    if (*(_DWORD *)a2) {
      goto LABEL_7;
    }
    sub_244DC7EA0(a1, 3);
    int v7 = 0;
    int v6 = 407;
  }
  *(_DWORD *)a2 = v7;
  a2[1] = "src/app/WriteClient.cpp";
  *((_DWORD *)a2 + 4) = v6;
LABEL_7:
  if (v10) {
    sub_244CC8A0C(v10);
  }
}

void sub_244DC903C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (*(_DWORD *)(a1 + 48) == 3 && !*(void *)(a1 + 328)) {
    sub_244DC7EA0(a1, 4);
  }
  *(_OWORD *)a5 = xmmword_2651A96F0;
  a5[2] = 422;
  if (*(void *)(a1 + 32) != a2)
  {
    BOOL v10 = 0;
    *(_DWORD *)a5 = 3;
    a5[1] = "src/app/WriteClient.cpp";
    *((_DWORD *)a5 + 4) = 428;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 48) != 2)
  {
    if (*((_WORD *)a3 + 2)) {
      goto LABEL_14;
    }
    int v14 = *((unsigned __int16 *)a3 + 3);
    int v15 = *a3;
    if (v14 == 1 && v15 == 7)
    {
      sub_244DC7FC8(a1, a4, (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        if (!*(void *)(a1 + 328))
        {
          BOOL v10 = 0;
          goto LABEL_18;
        }
        sub_244DC8F68(a1, &v20);
        BOOL v10 = 0;
        *(_OWORD *)a5 = v20;
        uint64_t v11 = v21;
        goto LABEL_31;
      }
LABEL_17:
      BOOL v10 = 1;
      goto LABEL_18;
    }
    if (v14 == 1 && v15 == 1)
    {
      long long v20 = xmmword_2651A9720;
      uint64_t v21 = 464;
      sub_244DD5D28(a4, (uint64_t)&v20, a5);
      if (*(_DWORD *)a5) {
        goto LABEL_17;
      }
      *(_OWORD *)a5 = v20;
      a5[2] = v21;
      if (*(_DWORD *)a5) {
        goto LABEL_17;
      }
      *(_DWORD *)a5 = 42;
      a5[1] = "src/app/WriteClient.cpp";
      int v12 = 467;
    }
    else
    {
LABEL_14:
      *(_DWORD *)a5 = 42;
      a5[1] = "src/app/WriteClient.cpp";
      int v12 = 471;
    }
LABEL_16:
    *((_DWORD *)a5 + 4) = v12;
    goto LABEL_17;
  }
  if (*((_WORD *)a3 + 2) || *((_WORD *)a3 + 3) != 1 || *a3 != 1)
  {
    *(_DWORD *)a5 = 42;
    a5[1] = "src/app/WriteClient.cpp";
    int v12 = 444;
    goto LABEL_16;
  }
  long long v20 = xmmword_2651A9708;
  uint64_t v21 = 436;
  sub_244DD5D28(a4, (uint64_t)&v20, a5);
  BOOL v10 = *(_DWORD *)a5 != 0;
  if (!*(_DWORD *)a5)
  {
    *(_OWORD *)a5 = v20;
    a5[2] = v21;
    if (!*(_DWORD *)a5)
    {
      sub_244DC8F68(a1, &v18);
      *(_OWORD *)a5 = v18;
      uint64_t v11 = v19;
LABEL_31:
      a5[2] = v11;
    }
  }
LABEL_18:
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13 && *(_DWORD *)a5)
  {
    long long v16 = *(_OWORD *)a5;
    uint64_t v17 = a5[2];
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &v16);
  }
  if (v10) {
    sub_244DD5B5C(a2, 0, (uint64_t)&v20);
  }
  if (*(_DWORD *)(a1 + 48) != 3) {
    sub_244DC7E30(a1);
  }
}

uint64_t sub_244DC9314(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_244D64530(a2)) {
      int v6 = 105;
    }
    else {
      int v6 = 114;
    }
    *(_DWORD *)__n128 buf = 67109376;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Time out! failed to receive write response from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_244CC4E58(1u))
  {
    sub_244D64530(a2);
    sub_244CC4DE0(0xDu, 1);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    int v9 = 50;
    BOOL v10 = "src/app/WriteClient.cpp";
    int v11 = 504;
    (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 24))(v7, a1, &v9);
  }
  return sub_244DC7E30(a1);
}

void sub_244DC948C(void *a1)
{
  sub_244DC94C4(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244DC94C4(void *a1)
{
  *a1 = &unk_26F9587C0;
  sub_244D6A434("src/app/WriteClient.h", 145);
  uint64_t v2 = (_WORD *)a1[41];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[41] = 0;
  int8x8_t v3 = (_WORD *)a1[39];
  if (v3) {
    sub_244CC8A0C(v3);
  }
  a1[39] = 0;
  sub_244CA539C(a1 + 15);
  a1[2] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 2));
  return a1;
}

double sub_244DC9560(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26F958818;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = a1 + 48;
  *(void *)(a1 + 64) = a1 + 48;
  *(void *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = a2;
  return result;
}

uint64_t sub_244DC95AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/app/reporting/Engine.cpp";
  *(_DWORD *)(a2 + 16) = 71;
  return result;
}

uint64_t sub_244DC95CC(uint64_t a1)
{
  v3[0] = 0;
  sub_244DC962C(a1, v3);
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;

  return sub_244CC6478((void *)(a1 + 48), a1 + 32, (unsigned int (*)(uint64_t))sub_244DCBEB4);
}

uint64_t sub_244DC962C(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 96);
  char v4 = *a2;
  if (*a2) {
    v6[1] = a2[1];
  }
  v6[0] = v4;
  sub_244CC6478((void *)(v3 + 1656), (uint64_t)v6, (unsigned int (*)(uint64_t))sub_244DCC394);
  return sub_244DCB064(a1);
}

uint64_t sub_244DC9690(uint64_t a1, int *a2, unsigned __int16 *a3)
{
  if (a2)
  {
    char v4 = a2;
    int v6 = 0;
    int v7 = 0;
    do
    {
      if (*a3 == *((unsigned __int16 *)v4 + 6) && *((_DWORD *)a3 + 1) == *v4)
      {
        uint64_t v8 = sub_244DBF5C0(*(void *)(a1 + 96));
        int v9 = *v4;
        v12[0] = *((_WORD *)v4 + 6);
        int v13 = v9;
        BOOL v10 = (int *)sub_2446F12CC((unsigned char *)v4 + 4);
        v6 |= !sub_244DCD194(v8, v12, *v10);
        int v7 = 1;
      }
      char v4 = (int *)*((void *)v4 + 2);
    }
    while (v4);
  }
  else
  {
    int v7 = 0;
    int v6 = 0;
  }
  return v7 & ~v6 & 1;
}

void sub_244DC9758(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, BOOL *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v91 = a3;
  sub_244CB62B8((uint64_t)&v87);
  int v11 = *(long long **)(a2 + 24);
  long long v12 = v11[3];
  long long v14 = *v11;
  long long v13 = v11[1];
  long long v89 = v11[2];
  long long v90 = v12;
  long long v87 = v14;
  long long v88 = v13;
  uint64_t v15 = sub_244CCF4E8(a2);
  uint64_t v16 = (__n128 *)v15;
  *(_OWORD *)a6 = *(_OWORD *)a2;
  *(void *)(a6 + 16) = *(void *)(a2 + 16);
  int v17 = *(_DWORD *)a6;
  char v72 = a5;
  if (*(_DWORD *)a6)
  {
    int v18 = 0;
    char v19 = 1;
LABEL_4:
    char v21 = 1;
    goto LABEL_5;
  }
  uint64_t v20 = *(void *)(v15 + 24);
  int v18 = *(_DWORD *)(v20 + 44);
  char v19 = 1;
  sub_244CB64F8(v20, 1u, a6);
  int v17 = *(_DWORD *)a6;
  if (*(_DWORD *)a6) {
    goto LABEL_4;
  }
  LOWORD(v85) = 0;
  HIDWORD(v85) = 0;
  unsigned __int32 v86 = 0;
  uint64_t v32 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    uint64_t v33 = *(void *)(v91 + 40);
    uint64_t v34 = *(void *)(v91 + 48);
    buf.n128_u64[0] = __PAIR64__(HIDWORD(v34), 67109888);
    buf.n128_u16[4] = 1024;
    *(unsigned __int32 *)((char *)&buf.n128_u32[2] + 2) = v34;
    buf.n128_u16[7] = 1024;
    v97.n128_u32[0] = HIDWORD(v33);
    v97.n128_u16[2] = 1024;
    *(unsigned __int32 *)((char *)&v97.n128_u32[1] + 2) = v33;
    _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_INFO, "Building Reports for ReadHandler with LastReportGeneration = 0x%08X%08X DirtyGeneration = 0x%08X%08X", (uint8_t *)&buf, 0x1Au);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  uint64_t v35 = v91;
  if ((*(unsigned char *)(v91 + 210) & 1) == 0)
  {
    sub_244CA8CB0(v91);
    uint64_t v35 = v91;
  }
  unsigned __int32 v86 = *(_DWORD *)(v35 + 24);
  uint64_t v36 = *(void *)(v35 + 8);
  unint64_t v85 = *(void *)(v35 + 16);
  int v17 = 0;
  if (!v36)
  {
LABEL_70:
    char v19 = 0;
    char v21 = 0;
    goto LABEL_5;
  }
  uint64_t v71 = a4;
  int v70 = v18;
  while ((*(unsigned char *)(v35 + 210) & 2) == 0)
  {
    v92.n128_u8[0] = 0;
    buf.n128_u64[0] = (unint64_t)&v85;
    buf.n128_u64[1] = (unint64_t)&v91;
    v97.n128_u64[0] = (unint64_t)&v92;
    sub_244CC6478((void *)(a1 + 48), (uint64_t)&buf, (unsigned int (*)(uint64_t))sub_244DCBF58);
    if (v92.n128_u8[0]) {
      goto LABEL_41;
    }
LABEL_69:
    sub_244CAB4E4(v91 + 8);
    uint64_t v35 = v91;
    unsigned __int32 v86 = *(_DWORD *)(v91 + 24);
    uint64_t v69 = *(void *)(v91 + 8);
    unint64_t v85 = *(void *)(v91 + 16);
    if (!v69) {
      goto LABEL_70;
    }
  }
  int v37 = *(int **)(v35 + 184);
  buf.n128_u64[0] = v85;
  buf.n128_u32[2] = v86;
  buf.n128_u8[12] = 0;
  if (sub_244DC9690(a1, v37, (unsigned __int16 *)&buf)) {
    goto LABEL_69;
  }
LABEL_41:
  sub_244CB62B8((uint64_t)&buf);
  unint64_t v38 = v16[1].n128_u64[1];
  __n128 v39 = *(__n128 *)(v38 + 32);
  __n128 v40 = *(__n128 *)(v38 + 48);
  __n128 v41 = *(__n128 *)(v38 + 16);
  __n128 buf = *(__n128 *)v38;
  __n128 v99 = v40;
  __n128 v98 = v39;
  __n128 v97 = v41;
  unint64_t v82 = v85;
  unsigned __int32 v83 = v86;
  char v84 = 0;
  int v81 = *(_DWORD *)(v91 + 204);
  sub_244DBF5C0(*(void *)(a1 + 96));
  uint64_t v42 = sub_244CA8E44(v91);
  (*(void (**)(__n128 *__return_ptr))(*(void *)v42 + 64))(&v92);
  sub_244DCCFC4(&v92, (*(unsigned char *)(v91 + 210) & 8) != 0, (uint64_t)v16, (uint64_t)&v82, (unsigned __int16 *)&v81, (uint64_t)v79);
  if (sub_244DD61C0(v79)) {
    goto LABEL_63;
  }
  sub_244DD6084(v79, (uint64_t)&v92);
  *(__n128 *)a6 = v92;
  *(void *)(a6 + 16) = *(void *)v93;
  if (BYTE2(v81) && sub_244DD6200(v79))
  {
    __int16 v43 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      v92.n128_u32[0] = 67109888;
      v92.n128_u32[1] = HIWORD(HIDWORD(v82));
      v92.n128_u16[4] = 1024;
      *(unsigned __int32 *)((char *)&v92.n128_u32[2] + 2) = WORD2(v82);
      v92.n128_u16[7] = 1024;
      *(_DWORD *)long long v93 = HIWORD(v83);
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = (unsigned __int16)v83;
      _os_log_impl(&dword_2446BD000, v43, OS_LOG_TYPE_INFO, "List does not fit in packet, chunk between list items for clusterId: 0x%04X_%04X, attributeId: 0x%04X_%04X", (uint8_t *)&v92, 0x1Au);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    uint64_t v44 = v91;
    *(_WORD *)(v91 + 204) = v81;
    *(unsigned char *)(v44 + 206) = BYTE2(v81);
    goto LABEL_63;
  }
  __int16 v45 = (__n128 *)v16[1].n128_u64[1];
  __n128 v46 = buf;
  __n128 v47 = v97;
  __n128 v48 = v99;
  void v45[2] = v98;
  v45[3] = v48;
  *__int16 v45 = v46;
  v45[1] = v47;
  sub_244CCCE18((uint64_t)v16);
  uint64_t v49 = v91;
  *(_WORD *)(v91 + 204) = -1;
  *(unsigned char *)(v49 + 206) = 0;
  unsigned __int8 v50 = sub_244DD6200(v79);
  long long v51 = sub_244CC8484(0xDu, "DataManagement");
  long long v52 = v51;
  if (v50)
  {
    if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
    {
      unsigned __int32 v53 = HIWORD(HIDWORD(v82));
      unsigned __int32 v54 = WORD2(v82);
      unsigned __int32 v55 = HIWORD(v83);
      int v56 = (unsigned __int16)v83;
      __n128 v92 = *(__n128 *)a6;
      *(void *)long long v93 = *(void *)(a6 + 16);
      int v57 = sub_244CB7B34((const char **)&v92, 1);
      v92.n128_u32[0] = 67110146;
      v92.n128_u32[1] = v53;
      a4 = v71;
      v92.n128_u16[4] = 1024;
      *(unsigned __int32 *)((char *)&v92.n128_u32[2] + 2) = v54;
      int v18 = v70;
      v92.n128_u16[7] = 1024;
      *(_DWORD *)long long v93 = v55;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v56;
      __int16 v94 = 2080;
      v95 = v57;
      _os_log_impl(&dword_2446BD000, v52, OS_LOG_TYPE_INFO, "Next attribute value does not fit in packet, roll back on clusterId: 0x%04X_%04X, attributeId: 0x%04X_%04X, err = %s", (uint8_t *)&v92, 0x24u);
    }
    if (sub_244CC4E58(3u))
    {
      __n128 v92 = *(__n128 *)a6;
      *(void *)long long v93 = *(void *)(a6 + 16);
      sub_244CB7B34((const char **)&v92, 1);
      int v18 = v70;
      a4 = v71;
      sub_244CC4DE0(0xDu, 3);
    }
LABEL_63:
    int v17 = *(_DWORD *)a6;
    if (*(_DWORD *)a6)
    {
      int v67 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      unsigned __int32 v58 = HIWORD(HIDWORD(v82));
      unsigned __int32 v59 = WORD2(v82);
      unsigned __int32 v60 = HIWORD(v83);
      int v61 = (unsigned __int16)v83;
      __n128 v92 = *(__n128 *)a6;
      *(void *)long long v93 = *(void *)(a6 + 16);
      long long v62 = sub_244CB7B34((const char **)&v92, 1);
      v92.n128_u32[0] = 67110146;
      v92.n128_u32[1] = v58;
      v92.n128_u16[4] = 1024;
      *(unsigned __int32 *)((char *)&v92.n128_u32[2] + 2) = v59;
      v92.n128_u16[7] = 1024;
      *(_DWORD *)long long v93 = v60;
      a4 = v71;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v61;
      int v18 = v70;
      __int16 v94 = 2080;
      v95 = v62;
      _os_log_impl(&dword_2446BD000, v52, OS_LOG_TYPE_ERROR, "Fail to retrieve data, roll back and encode status on clusterId: 0x%04X_%04X, attributeId: 0x%04X_%04Xerr = %s", (uint8_t *)&v92, 0x24u);
    }
    if (sub_244CC4E58(1u))
    {
      __n128 v92 = *(__n128 *)a6;
      *(void *)long long v93 = *(void *)(a6 + 16);
      sub_244CB7B34((const char **)&v92, 1);
      int v18 = v70;
      a4 = v71;
      sub_244CC4DE0(0xDu, 1);
    }
    sub_244DD6150(v79, &v73);
    BOOL v76 = v73;
    char v77 = 0;
    if (v73 <= 1u && v74)
    {
      BOOL v76 = v73;
      char v77 = v74;
      char v78 = v75;
    }
    sub_244CCCB4C((uint64_t)v16, (uint64_t)&v76, &v92);
    *(__n128 *)a6 = v92;
    *(void *)(a6 + 16) = *(void *)v93;
    if (*(_DWORD *)a6)
    {
      long long v63 = (__n128 *)v16[1].n128_u64[1];
      __n128 v64 = buf;
      __n128 v65 = v97;
      __n128 v66 = v99;
      v63[2] = v98;
      void v63[3] = v66;
      __n128 *v63 = v64;
      v63[1] = v65;
      sub_244CCCE18((uint64_t)v16);
      goto LABEL_63;
    }
  }
  int v17 = 0;
  uint64_t v68 = v91;
  *(_WORD *)(v91 + 204) = -1;
  *(unsigned char *)(v68 + 206) = 0;
  int v67 = 1;
LABEL_66:
  if (v80 != -1) {
    ((void (*)(__n128 *, int *))off_26F958858[v80])(&v92, v79);
  }
  if (v67) {
    goto LABEL_69;
  }
  char v21 = 0;
  char v19 = 1;
LABEL_5:
  int v22 = *(_DWORD *)(v16[1].n128_u64[1] + 44);
  if (v72) {
    *char v72 = v22 != v18;
  }
  if (v17 != 11 && v17 != 25) {
    char v21 = 1;
  }
  if (v21)
  {
    if (!v17) {
      goto LABEL_20;
    }
  }
  else
  {
    int v24 = v18;
    int v25 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_INFO, "<RE:Run> We cannot put more chunks into this report. Enable chunking.", (uint8_t *)&buf, 2u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = "src/app/reporting/Engine.cpp";
    *(_DWORD *)(a6 + 16) = 298;
    int v18 = v24;
LABEL_20:
    unint64_t v26 = v16[1].n128_u64[1];
    if (*(_WORD *)(v26 + 60) == 21169)
    {
      int v27 = *(_DWORD *)(v26 + 52);
      if (v27)
      {
        *(_DWORD *)(v26 + 52) = v27 - 1;
        ++*(_DWORD *)(v26 + 40);
      }
    }
    sub_244CCBA3C(v16, &buf);
    *(__n128 *)a6 = buf;
    *(void *)(a6 + 16) = v97.n128_u64[0];
    if (*(_DWORD *)a6) {
      sub_244E2A090();
    }
    if (v22 == v18)
    {
      __int16 v28 = *(_OWORD **)(a2 + 24);
      long long v29 = v87;
      long long v30 = v88;
      long long v31 = v90;
      uint64_t v28[2] = v89;
      v28[3] = v31;
      *__int16 v28 = v29;
      v28[1] = v30;
      sub_244CCCE18(a2);
    }
  }
  if (a4) {
    *a4 = v19;
  }
}

double sub_244DCA04C@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  long long v57 = xmmword_2651A9784;
  int v58 = 0;
  int v6 = *(int **)(a4 + 176);
  if (v6)
  {
    uint64_t v34 = a5 + 4;
    do
    {
      if (*((unsigned __int16 *)v6 + 4) != 0xFFFF)
      {
        int v10 = *v6;
        if (*v6 != -1)
        {
          int v11 = v6[1];
          if (v11 != -1)
          {
            unsigned __int16 v47 = *((_WORD *)v6 + 4);
            int v48 = v10;
            int v49 = v11;
            sub_244DBF5C0(*(void *)(a1 + 96));
            int v12 = sub_2447A4A18(&v47);
            if (v12)
            {
              long long v13 = a2[1];
              long long v43 = *a2;
              long long v44 = v13;
              long long v14 = a2[3];
              long long v45 = a2[2];
              long long v46 = v14;
              v42[0] = v12;
              v42[1] = 0;
              sub_244CCE404(a2, (uint64_t)v42, (__n128 *)buf);
              int v15 = *(_DWORD *)buf;
              long long v57 = v51;
              int v58 = *(_DWORD *)v52;
              if (*(_DWORD *)buf) {
                goto LABEL_23;
              }
              *a3 = 1;
            }
            int v37 = *v6;
            __int16 v38 = *((_WORD *)v6 + 4);
            char v39 = 4;
            int v40 = v6[1];
            char v41 = 1;
            unsigned int v16 = sub_244BCAD2C();
            int v17 = sub_244D908A4();
            uint64_t v18 = sub_244CA8E44(a4);
            (*(void (**)(long long *__return_ptr))(*(void *)v18 + 64))(&v43);
            sub_244D90050(v17, (uint64_t)&v43, (uint64_t)&v37, v16, buf);
            int v19 = *(_DWORD *)buf;
            long long v57 = v51;
            int v58 = *(_DWORD *)v52;
            if (*(_DWORD *)buf == 165)
            {
              long long v23 = a2[1];
              long long v43 = *a2;
              long long v44 = v23;
              long long v24 = a2[3];
              long long v45 = a2[2];
              long long v46 = v24;
              char v22 = 126;
            }
            else
            {
              if (*(_DWORD *)buf != 168)
              {
                *(_DWORD *)a5 = *(_DWORD *)buf;
                double result = *(double *)&v57;
                *(_OWORD *)uint64_t v34 = v57;
                *(_DWORD *)(v34 + 16) = v58;
                if (v19) {
                  return result;
                }
                goto LABEL_19;
              }
              long long v20 = a2[1];
              long long v43 = *a2;
              long long v44 = v20;
              long long v21 = a2[3];
              long long v45 = a2[2];
              long long v46 = v21;
              char v22 = -99;
            }
            v36[0] = v22;
            v36[1] = 0;
            sub_244CCE404(a2, (uint64_t)v36, (__n128 *)buf);
            int v15 = *(_DWORD *)buf;
            long long v57 = v51;
            int v58 = *(_DWORD *)v52;
            if (*(_DWORD *)buf)
            {
LABEL_23:
              long long v32 = v44;
              *a2 = v43;
              a2[1] = v32;
              long long v33 = v46;
              a2[2] = v45;
              a2[3] = v33;
              goto LABEL_21;
            }
            *a3 = 1;
            int v25 = sub_244CC8484(0x23u, "InteractionModel");
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              int v26 = *((unsigned __int16 *)v6 + 4);
              unsigned int v27 = HIWORD(*v6);
              int v28 = (unsigned __int16)*v6;
              unsigned int v29 = HIWORD(v6[1]);
              int v30 = (unsigned __int16)v6[1];
              *(_DWORD *)__n128 buf = 67110402;
              LODWORD(v51) = v26;
              WORD2(v51) = 1024;
              *(_DWORD *)((char *)&v51 + 6) = v27;
              WORD5(v51) = 1024;
              HIDWORD(v51) = v28;
              *(_WORD *)long long v52 = 1024;
              *(_DWORD *)&v52[2] = v29;
              __int16 v53 = 1024;
              int v54 = v30;
              __int16 v55 = 2080;
              int v56 = "ARL";
              _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_INFO, "Access to event (%u, 0x%04X_%04X, 0x%04X_%04X) denied by %s", buf, 0x2Au);
            }
            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(0x23u, 3);
            }
          }
        }
      }
LABEL_19:
      int v6 = (int *)*((void *)v6 + 2);
    }
    while (v6);
  }
  int v15 = 0;
LABEL_21:
  *(_DWORD *)a5 = v15;
  double result = *(double *)&v57;
  *(_OWORD *)(a5 + 4) = v57;
  *(_DWORD *)(a5 + 20) = v58;
  return result;
}

void sub_244DCA3F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, BOOL *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  *(_OWORD *)a7 = xmmword_2651A9798;
  *(void *)(a7 + 16) = 402;
  uint64_t v52 = 0;
  char v51 = 0;
  sub_244CB62B8((uint64_t)&v47);
  long long v14 = sub_244CA2ED4();
  int v15 = *(long long **)(a2 + 24);
  long long v16 = v15[3];
  long long v18 = *v15;
  long long v17 = v15[1];
  long long v49 = v15[2];
  long long v50 = v16;
  long long v47 = v18;
  long long v48 = v17;
  uint64_t v19 = *(void *)(a3 + 176);
  if (!v19) {
    goto LABEL_9;
  }
  uint64_t v20 = (uint64_t)v14;
  if (*((_DWORD *)v14 + 6) == 3)
  {
    long long v21 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_ERROR, "EventManagement has not yet initialized", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xDu, 1);
    }
    goto LABEL_8;
  }
  if (sub_244CA8804(a3, (uint64_t)v14))
  {
LABEL_8:
    LODWORD(v19) = 0;
LABEL_9:
    BOOL v22 = 0;
    goto LABEL_10;
  }
  uint64_t v29 = sub_244CCF3C8(a2);
  *(_OWORD *)a7 = *(_OWORD *)a2;
  *(void *)(a7 + 16) = *(void *)(a2 + 16);
  LODWORD(v19) = *(_DWORD *)a7;
  if (*(_DWORD *)a7) {
    goto LABEL_27;
  }
  uint64_t v31 = v29;
  uint64_t v32 = *(void *)(v29 + 24);
  long long v33 = "src/app/reporting/Engine.cpp";
  if (!v32)
  {
    int v30 = 0;
    int v39 = 433;
LABEL_36:
    LODWORD(v19) = 3;
LABEL_37:
    *(_DWORD *)a7 = v19;
    *(void *)(a7 + 8) = v33;
    *(_DWORD *)(a7 + 16) = v39;
    goto LABEL_28;
  }
  sub_244CB64F8(v32, 1u, a7);
  LODWORD(v19) = *(_DWORD *)a7;
  if (*(_DWORD *)a7) {
    goto LABEL_27;
  }
  sub_244DCA04C(a1, *(long long **)(v31 + 24), &v51, a3, (uint64_t)buf);
  *(_OWORD *)a7 = *(_OWORD *)buf;
  *(void *)(a7 + 16) = v54;
  LODWORD(v19) = *(_DWORD *)a7;
  if (*(_DWORD *)a7) {
    goto LABEL_27;
  }
  uint64_t v44 = *(void *)(v31 + 24);
  uint64_t v34 = *(void *)(a3 + 176);
  uint64_t v35 = a3;
  uint64_t v36 = (uint64_t *)(a3 + 88);
  uint64_t v37 = sub_244CA8E44(v35);
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v37 + 64))(buf);
  sub_244CA4CC8(v20, v44, v34, v36, &v52, buf, (uint64_t)&v45);
  *(_OWORD *)a7 = v45;
  *(void *)(a7 + 16) = v46;
  LODWORD(v19) = *(_DWORD *)a7;
  if (*(_DWORD *)a7 > 0x22u)
  {
LABEL_27:
    int v30 = 0;
LABEL_28:
    BOOL v22 = v30 != 0;
    goto LABEL_10;
  }
  if (((1 << v19) & 0x600000001) != 0)
  {
    BOOL v22 = 0;
    int v30 = 0;
    int v38 = 444;
  }
  else
  {
    int v30 = 0;
    if (((1 << v19) & 0x2000800) == 0) {
      goto LABEL_28;
    }
    if (v52)
    {
      BOOL v22 = 1;
      int v38 = 467;
    }
    else
    {
      if ((a4 & 1) == 0) {
        ++*v36;
      }
      int v40 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_2446BD000, v40, OS_LOG_TYPE_INFO, "<RE:Run> first cluster event is too big so that it fails to fit in the packet!", buf, 2u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0xDu, 3);
      }
      BOOL v22 = 1;
      int v38 = 458;
    }
    int v30 = 1;
  }
  *(_DWORD *)a7 = 0;
  *(void *)(a7 + 8) = "src/app/reporting/Engine.cpp";
  *(_DWORD *)(a7 + 16) = v38;
  uint64_t v41 = *(void *)(v31 + 24);
  if (*(_WORD *)(v41 + 60) != 21169)
  {
    int v39 = 175;
    long long v33 = "src/lib/core/TLVWriter.h";
    goto LABEL_36;
  }
  int v42 = *(_DWORD *)(v41 + 52);
  long long v33 = "src/lib/core/TLVWriter.h";
  if (!v42)
  {
    int v39 = 176;
    LODWORD(v19) = 11;
    goto LABEL_37;
  }
  *(_DWORD *)(v41 + 52) = v42 - 1;
  ++*(_DWORD *)(v41 + 40);
  *(_DWORD *)a7 = 0;
  *(void *)(a7 + 8) = "src/lib/core/TLVWriter.h";
  *(_DWORD *)(a7 + 16) = 179;
  sub_244CCBA3C((__n128 *)v31, (__n128 *)buf);
  *(_OWORD *)a7 = *(_OWORD *)buf;
  *(void *)(a7 + 16) = v54;
  LODWORD(v19) = *(_DWORD *)a7;
  if (*(_DWORD *)a7) {
    goto LABEL_28;
  }
  long long v43 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v52;
    _os_log_impl(&dword_2446BD000, v43, OS_LOG_TYPE_INFO, "Fetched %u events", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  LODWORD(v19) = 0;
LABEL_10:
  if (a6)
  {
    if (v51) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v52 == 0;
    }
    char v24 = !v23;
    *a6 = v24;
  }
  if (v19 <= 0x19 && ((1 << v19) & 0x2000801) != 0 && !v51 && !v52)
  {
    int v25 = *(_OWORD **)(a2 + 24);
    long long v26 = v47;
    long long v27 = v48;
    long long v28 = v50;
    void v25[2] = v49;
    void v25[3] = v28;
    *int v25 = v26;
    v25[1] = v27;
    sub_244CCCE18(a2);
    *(_DWORD *)a7 = 0;
    *(void *)(a7 + 8) = "src/app/reporting/Engine.cpp";
    *(_DWORD *)(a7 + 16) = 494;
  }
  if (a5) {
    *a5 = v22;
  }
}

void *sub_244DCA8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = xmmword_2651A97B0;
  *(void *)(a3 + 16) = 509;
  sub_244CB62B8((uint64_t)v29);
  v34[1] = 0;
  v34[2] = 0;
  v34[0] = &unk_26F9536C8;
  char v35 = 0;
  sub_244DCBD90((uint64_t)&v27);
  long long v26 = 0;
  if (a2)
  {
    if (sub_244CA8E44(a2))
    {
      unint64_t v6 = sub_244CA8E90(a2);
      sub_244CC8F5C(v6, 0x26u, &buf);
      long long v26 = (_WORD *)buf;
      if ((void)buf)
      {
        if (sub_244CC8B50(buf) <= v6) {
          unsigned __int16 v7 = 0;
        }
        else {
          unsigned __int16 v7 = sub_244CC8B50((uint64_t)v26) - v6;
        }
        sub_2447945A0((uint64_t)v34, &v26, 0);
        sub_244CB6318((uint64_t)v29, (uint64_t)v34, 0xFFFFFFFF, (uint64_t)&buf);
        sub_244CB64F8((uint64_t)v29, v7 + 16, (uint64_t)&buf);
        sub_244CCF9D0((uint64_t)&v27, v29, a3);
        if (*(_DWORD *)a3) {
          goto LABEL_10;
        }
        if (*(unsigned char *)(a2 + 211) == 1) {
          sub_244CCB9E4((uint64_t)&v27);
        }
        sub_244CB64F8((uint64_t)v29, 9u, (uint64_t)&buf);
        *(_OWORD *)a3 = buf;
        *(void *)(a3 + 16) = v37;
        if (*(_DWORD *)a3) {
          goto LABEL_10;
        }
        __int16 v25 = 0;
        __int16 v24 = 0;
        sub_244DC9758(a1, (uint64_t)&v27, a2, (char *)&v25 + 1, (BOOL *)&v24 + 1, (uint64_t)&buf);
        *(_OWORD *)a3 = buf;
        *(void *)(a3 + 16) = v37;
        if (*(_DWORD *)a3) {
          goto LABEL_10;
        }
        if (v33 != 21169)
        {
          int v8 = 175;
          int v10 = 3;
          goto LABEL_24;
        }
        if (v32 < 3)
        {
          int v8 = 176;
          int v10 = 11;
LABEL_24:
          *(_DWORD *)a3 = v10;
          *(void *)(a3 + 8) = "src/lib/core/TLVWriter.h";
          goto LABEL_9;
        }
        v32 -= 3;
        v30 += 3;
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/lib/core/TLVWriter.h";
        *(_DWORD *)(a3 + 16) = 179;
        sub_244DCA3F0(a1, (uint64_t)&v27, a2, SHIBYTE(v24), (BOOL *)&v25, (char *)&v24, (uint64_t)&buf);
        *(_OWORD *)a3 = buf;
        *(void *)(a3 + 16) = v37;
        if (*(_DWORD *)a3) {
          goto LABEL_10;
        }
        BOOL v11 = (HIBYTE(v25) | v25) != 0;
        if (!v24 && HIBYTE(v25) | v25)
        {
          int v12 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "No data actually encoded but hasMoreChunks flag is set, close read handler! (attribute too big?)", (uint8_t *)&buf, 2u);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0xDu, 1);
          }
          sub_244CA6EF0(a2, (uint64_t)&buf);
          *(_OWORD *)a3 = buf;
          *(void *)(a3 + 16) = v37;
          BOOL v13 = *(_DWORD *)a3 == 0;
          if (*(_DWORD *)a3) {
            goto LABEL_10;
          }
LABEL_33:
          if (*(unsigned char *)(a2 + 211)) {
            int v14 = 1;
          }
          else {
            int v14 = v11;
          }
          if (!v13 && v14) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        *(_OWORD *)a3 = v27;
        *(void *)(a3 + 16) = v28;
        if (*(_DWORD *)a3) {
          goto LABEL_10;
        }
        if (v33 == 21169)
        {
          if (v32 >= 6)
          {
            v32 -= 6;
            v30 += 6;
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = "src/lib/core/TLVWriter.h";
            *(_DWORD *)(a3 + 16) = 179;
            if (v11)
            {
              sub_244CCF420((uint64_t)&v27);
            }
            else if (!*(unsigned char *)(a2 + 211))
            {
              sub_244CCE288((uint64_t)&v27);
            }
            sub_244CCF478((uint64_t)&v27, (uint64_t)&buf);
            if (v27) {
              sub_244E2A130();
            }
            sub_2446DE160((uint64_t)v29, &v26, &buf);
            *(_OWORD *)a3 = buf;
            *(void *)(a3 + 16) = v37;
            if (*(_DWORD *)a3) {
              goto LABEL_10;
            }
            long long v16 = sub_244CC8484(0xDu, "DataManagement");
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v31;
              _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "<RE> Sending report (payload has %u bytes)...", (uint8_t *)&buf, 8u);
            }
            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(0xDu, 3);
            }
            sub_244DCAFE8(a1, a2, (uint64_t *)&v26, v11, (uint64_t)&buf);
            *(_OWORD *)a3 = buf;
            *(void *)(a3 + 16) = v37;
            int v17 = *(_DWORD *)a3;
            long long v18 = sub_244CC8484(0xDu, "DataManagement");
            uint64_t v19 = v18;
            if (v17)
            {
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                long long buf = *(_OWORD *)a3;
                uint64_t v37 = *(const char **)(a3 + 16);
                uint64_t v20 = sub_244CB7B34((const char **)&buf, 1);
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v20;
                _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "<RE> Error sending out report data with %s!", (uint8_t *)&buf, 0xCu);
              }
              if (sub_244CC4E58(1u))
              {
                long long buf = *(_OWORD *)a3;
                uint64_t v37 = *(const char **)(a3 + 16);
                sub_244CB7B34((const char **)&buf, 1);
                sub_244CC4DE0(0xDu, 1);
              }
              goto LABEL_10;
            }
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              int v21 = *(_DWORD *)(a1 + 12);
              int v22 = *(_DWORD *)(a1 + 16);
              if (v11) {
                BOOL v23 = "more messages";
              }
              else {
                BOOL v23 = "no more messages";
              }
              LODWORD(buf) = 67109634;
              DWORD1(buf) = v21;
              WORD4(buf) = 1024;
              *(_DWORD *)((char *)&buf + 10) = v22;
              HIWORD(buf) = 2080;
              uint64_t v37 = v23;
              _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_INFO, "<RE> ReportsInFlight = %u with readHandler %u, RE has %s", (uint8_t *)&buf, 0x18u);
            }
            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(0xDu, 3);
            }
            BOOL v13 = 0;
            goto LABEL_33;
          }
          int v8 = 176;
          int v15 = 11;
        }
        else
        {
          int v8 = 175;
          int v15 = 3;
        }
        *(_DWORD *)a3 = v15;
        *(void *)(a3 + 8) = "src/lib/core/TLVWriter.h";
        goto LABEL_9;
      }
      *(_DWORD *)a3 = 11;
      *(void *)(a3 + 8) = "src/app/reporting/Engine.cpp";
      int v8 = 537;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/app/reporting/Engine.cpp";
      int v8 = 532;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/app/reporting/Engine.cpp";
    int v8 = 531;
  }
LABEL_9:
  *(_DWORD *)(a3 + 16) = v8;
LABEL_10:
  sub_244CA5A38(a2, 0);
LABEL_11:
  if (v26) {
    sub_244CC8A0C(v26);
  }
  return sub_244CA539C(v34);
}

void sub_244DCAFE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = *(_DWORD *)(a1 + 12);
  *(_OWORD *)a5 = xmmword_2651A97C8;
  *(void *)(a5 + 16) = 917;
  *(_DWORD *)(a1 + 12) = v7 + 1;
  sub_244CA758C(a2, a3, a4, a5);
  if (*(_DWORD *)a5) {
    --*(_DWORD *)(a1 + 12);
  }
}

uint64_t sub_244DCB058(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = 0;
  return sub_244DCB064(a2);
}

uint64_t sub_244DCB064(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  unint64_t v3 = *(void *)(v2 + 1640);
  if (*(_DWORD *)(a1 + 12) > 3u || v3 == 0)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16);
LABEL_16:
    if (v3 <= v5) {
      *(_DWORD *)(a1 + 16) = 0;
    }
    char v13 = 1;
    *(void *)long long buf = &v13;
    uint64_t result = sub_244CC6478((void *)(v2 + 1656), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244DCBFCC);
    if (v13)
    {
      int v12 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_INFO, "All ReadHandler-s are clean, clear GlobalDirtySet", buf, 2u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0xDu, 3);
      }
      return sub_244CC6478((void *)(a1 + 48), a1 + 32, (unsigned int (*)(uint64_t))sub_244DCBEB4);
    }
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16);
    unsigned int v6 = 1;
    while (1)
    {
      int v7 = (unsigned char *)sub_244DBE81C(*(void *)(a1 + 96), v5 % *(_DWORD *)(*(void *)(a1 + 96) + 1640));
      if (!v7) {
        sub_244E2A1D0();
      }
      if ((uint64_t v8 = (uint64_t)v7, v7[208] == 1) && (!v7[211] || (v7[210] & 2) != 0)
        || sub_244DCB304(*(void *)(*(void *)(a1 + 96) + 1464), (uint64_t)v7))
      {
        *(void *)(a1 + 24) = v8;
        *(void *)long long buf = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t result = (uint64_t)sub_244DCA8FC(a1, v8, (uint64_t)buf);
        *(void *)(a1 + 24) = 0;
        if (*(_DWORD *)buf) {
          break;
        }
      }
      unsigned int v10 = *(_DWORD *)(a1 + 12);
      unsigned int v5 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 16) = v5;
      if (v10 <= 3)
      {
        unint64_t v11 = v6++;
        if (v3 > v11) {
          continue;
        }
      }
      uint64_t v2 = *(void *)(a1 + 96);
      unint64_t v3 = *(void *)(v2 + 1640);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_244DCB224@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(result + 8))
  {
    int v3 = 0;
    int v4 = 661;
    goto LABEL_12;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(*(void *)(result + 96) + 88);
  if (!v6)
  {
    int v4 = 667;
LABEL_11:
    int v3 = 3;
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v6 + 88);
  if (!v7)
  {
    int v4 = 672;
    goto LABEL_11;
  }
  uint64_t result = *(void *)(v7 + 24);
  if (!result)
  {
    int v4 = 677;
    goto LABEL_11;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(void *)result
                                                                                                 + 80))(result, sub_244DCB058, v5);
  if (*(_DWORD *)a2) {
    return result;
  }
  int v3 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  int v4 = 681;
LABEL_12:
  *(_DWORD *)a2 = v3;
  a2[1] = "src/app/reporting/Engine.cpp";
  *((_DWORD *)a2 + 4) = v4;
  return result;
}

uint64_t sub_244DCB304(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
  uint64_t v6 = 0;
  v7[0] = &v6;
  v7[1] = a2;
  sub_244CC6478((void *)(a1 + 32), (uint64_t)v7, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  uint64_t result = v6;
  if (v6) {
    return sub_244DCBE28(v6, &v5);
  }
  return result;
}

BOOL sub_244DCB390(uint64_t a1, uint64_t a2)
{
  v3[0] = a2;
  v3[1] = a1;
  return sub_244CC6478((void *)(a1 + 48), (uint64_t)v3, (unsigned int (*)(uint64_t))sub_244DCBFF8) == 1;
}

uint64_t sub_244DCB3D4(uint64_t a1)
{
  unsigned __int8 v2 = 0;
  v3[0] = a1;
  v3[1] = &v2;
  sub_244CC6478((void *)(a1 + 48), (uint64_t)v3, (unsigned int (*)(uint64_t))sub_244DCC08C);
  return v2;
}

uint64_t sub_244DCB41C(uint64_t a1)
{
  v5[0] = a1;
  unsigned __int8 v2 = (void *)(a1 + 48);
  sub_244CC6478((void *)(a1 + 48), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCC0D0);
  unsigned __int8 v4 = 0;
  v5[0] = a1;
  v5[1] = &v4;
  sub_244CC6478(v2, (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCC08C);
  return v4;
}

uint64_t sub_244DCB494(uint64_t a1)
{
  v5[0] = a1;
  unsigned __int8 v2 = (void *)(a1 + 48);
  sub_244CC6478((void *)(a1 + 48), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCC198);
  unsigned __int8 v4 = 0;
  v5[0] = a1;
  v5[1] = &v4;
  sub_244CC6478(v2, (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCC08C);
  return v4;
}

uint64_t sub_244DCB50C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = a2;
  int v14 = a1;
  uint64_t v6 = a1 + 6;
  uint64_t result = sub_244CC6478(a1 + 6, (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_244DCBFF8);
  if (result == 1)
  {
    int v8 = 0;
    int v9 = 855;
  }
  else
  {
    uint64_t v13 = a2;
    int v14 = a1;
    uint64_t result = sub_244CC6478(v6, (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_244DCBFF8);
    if (result == 1)
    {
      int v8 = 0;
      int v9 = 865;
    }
    else
    {
      unsigned int v10 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13) = 0;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "Cannot merge the new path into any existing path, create one.", (uint8_t *)&v13, 2u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0xDu, 3);
      }
      uint64_t result = (uint64_t)sub_244DCB6DC(a1 + 4);
      if (result)
      {
        int v8 = 0;
        int v11 = *(_DWORD *)(a2 + 8);
        *(void *)uint64_t result = *(void *)a2;
        *(_DWORD *)(result + 8) = v11;
        *(void *)(result + 16) = 0;
        *(void *)(result + 16) = a1[11];
        int v9 = 878;
      }
      else
      {
        int v12 = sub_244CC8484(0xDu, "DataManagement");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "mGlobalDirtySet pool full, cannot handle more entries!", (uint8_t *)&v13, 2u);
        }
        uint64_t result = sub_244CC4E58(1u);
        if (result) {
          uint64_t result = sub_244CC4DE0(0xDu, 1);
        }
        int v9 = 873;
        int v8 = 11;
      }
    }
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/app/reporting/Engine.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

_DWORD *sub_244DCB6DC(unint64_t *a1)
{
  unsigned __int8 v2 = sub_244CC4D84(0x18uLL);
  int v3 = v2;
  if (v2)
  {
    *(void *)unsigned __int8 v2 = -1;
    v2[2] = -1;
    *((void *)v2 + 2) = 0;
    unsigned __int8 v4 = sub_244CC4D84(0x18uLL);
    if (v4)
    {
      *unsigned __int8 v4 = v3;
      v4[1] = a1 + 2;
      unsigned char v4[2] = 0;
      unsigned char v4[2] = a1[4];
      *(void *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      unint64_t v5 = a1[1];
      unint64_t v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5) {
        a1[1] = v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_244DCB76C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = a1[12];
  ++a1[11];
  char v9 = 0;
  v10[0] = a2;
  v10[1] = &v9;
  uint64_t result = sub_244CC6478((void *)(v6 + 1656), (uint64_t)v10, (unsigned int (*)(uint64_t))sub_244DCC25C);
  if (v9)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t result = sub_244DCB50C(a1, a2, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return result;
    }
    int v8 = 912;
  }
  else
  {
    int v8 = 908;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "src/app/reporting/Engine.cpp";
  *((_DWORD *)a3 + 4) = v8;
  return result;
}

uint64_t sub_244DCB820(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 == 4)
  {
    sub_244DCB224(buf, a1);
    int v2 = *(_DWORD *)(a1 + 12);
  }
  else if (!v2)
  {
    sub_244E2A270();
  }
  *(_DWORD *)(a1 + 12) = v2 - 1;
  int v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "<RE> OnReportConfirm: NumReports = %u", buf, 8u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0xDu, 3);
  }
  return result;
}

uint64_t sub_244DCB920(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = a2;
  return sub_244CC6478((void *)(v2 + 1656), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_244DCC2D8);
}

uint64_t sub_244DCB960@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v9 = a2;
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)long long buf = &v9;
  uint64_t result = sub_244CC6478((void *)(v6 + 1656), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244DCC2D8);
  if ((a2 - v9) < 0x201)
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/reporting/Engine.cpp";
    *(_DWORD *)(a3 + 16) = 971;
  }
  else
  {
    int v8 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 512;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "<RE> Buffer overfilled CHIP_CONFIG_EVENT_LOGGING_BYTE_THRESHOLD %d, schedule engine run", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    return sub_244DCB224(a1, (void *)a3);
  }
  return result;
}

uint64_t sub_244DCBAA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 96);
  if (!*(void *)(v5 + 1528))
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/reporting/Engine.cpp";
    int v9 = 982;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  uint64_t v7 = result;
  char v10 = 0;
  *(void *)long long buf = a2;
  int v12 = &v10;
  sub_244CC6478((void *)(v5 + 1656), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244DCC300);
  if (v10)
  {
    int v8 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Urgent event will be sent once reporting is not blocked by the min interval", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0xDu, 3);
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/reporting/Engine.cpp";
    int v9 = 1009;
    goto LABEL_9;
  }
  return sub_244DCB960(v7, a3, a4);
}

uint64_t sub_244DCBBC8(unint64_t *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t result = sub_244DCB76C(a1, a2, &v5);
  if (v5)
  {
    int v3 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v5;
      uint64_t v8 = v6;
      uint64_t v4 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Failed to set path dirty: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      *(_OWORD *)long long buf = v5;
      uint64_t v8 = v6;
      sub_244CB7B34((const char **)buf, 1);
      return sub_244CC4DE0(0xDu, 1);
    }
  }
  return result;
}

void *sub_244DCBCE0(void *a1)
{
  *a1 = &unk_26F958818;
  sub_244D6CBC8(a1 + 4);
  return a1;
}

void sub_244DCBD24(void *a1)
{
  *a1 = &unk_26F958818;
  sub_244D6CBC8(a1 + 4);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DCBD90(uint64_t a1)
{
  uint64_t v2 = sub_244CCCDE0(a1);
  sub_244CCCDE0(v2 + 40);
  sub_244CCCDE0(a1 + 80);
  sub_244CCCDE0(a1 + 120);
  sub_244CCCDE0(a1 + 160);
  sub_244CCCDE0(a1 + 200);
  sub_244CCCDE0(a1 + 240);
  sub_244CCCDE0(a1 + 280);
  sub_244CCCDE0(a1 + 320);
  sub_244CCCDE0(a1 + 360);
  sub_244CCCDE0(a1 + 400);
  sub_244CCCDE0(a1 + 440);
  sub_244CCCDE0(a1 + 480);
  sub_244CCCDE0(a1 + 520);
  sub_244CCCDE0(a1 + 560);
  return a1;
}

uint64_t sub_244DCBE28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 208) != 1) {
    return 0;
  }
  if (*a2 < *(void *)(a1 + 24))
  {
    char v3 = *(unsigned char *)(a1 + 40);
    return v3 & 1;
  }
  if (*(void *)(v2 + 40) <= *(void *)(v2 + 48) && (*(unsigned char *)(v2 + 210) & 0x10) == 0 && *a2 < *(void *)(a1 + 32))
  {
    char v3 = *(unsigned char *)(a1 + 40);
    if ((v3 & 2) == 0) {
      return v3 & 1;
    }
  }
  return 1;
}

uint64_t sub_244DCBE8C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) != *(void *)(a1 + 8)) {
    return 0;
  }
  **(void **)a1 = a2;
  return 1;
}

uint64_t sub_244DCBEB4(uint64_t a1, void *a2)
{
  return 0;
}

void sub_244DCBED0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26074();
    }
    long long v5 = v4;
    *uint64_t v4 = 0;
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244DCBF58(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)*a1;
  int v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 != 0xFFFF && v3 != **a1) {
    return 0;
  }
  if (*(_DWORD *)a2 != -1 && *(_DWORD *)a2 != *(_DWORD *)(v2 + 4)) {
    return 0;
  }
  int v6 = *(_DWORD *)(a2 + 4);
  int v7 = *(_DWORD *)(v2 + 8);
  BOOL v8 = v6 == -1 || v6 == v7;
  if (!v8 || *(void *)(a2 + 16) <= *(void *)(*(void *)a1[1] + 48)) {
    return 0;
  }
  uint64_t v9 = a1[2];
  uint64_t result = 1;
  *(unsigned char *)uint64_t v9 = 1;
  return result;
}

uint64_t sub_244DCBFCC(unsigned char **a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= *(void *)(a2 + 48) && (*(unsigned char *)(a2 + 210) & 0x10) == 0) {
    return 0;
  }
  **a1 = 0;
  return 1;
}

BOOL sub_244DCBFF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  if (sub_244DC1A5C(a2, *a1))
  {
    *(void *)(a2 + 16) = *(void *)(v4 + 88);
  }
  else
  {
    BOOL result = sub_244DC1A5C(*a1, a2);
    if (!result) {
      return result;
    }
    *(void *)(a2 + 16) = *(void *)(v4 + 88);
    *(_WORD *)(a2 + 8) = *(_WORD *)(*a1 + 8);
    *(_DWORD *)a2 = *(_DWORD *)*a1;
    *(_WORD *)(a2 + 10) = *(_WORD *)(*a1 + 10);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(*a1 + 4);
  }
  return 1;
}

uint64_t sub_244DCC08C(uint64_t a1, void *a2)
{
  if (!a2[2])
  {
    sub_244DCBED0(*(void *)a1 + 32, a2);
    **(unsigned char **)(a1 + 8) = 1;
  }
  return 0;
}

uint64_t sub_244DCC0D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (*(_DWORD *)a2 != -1 && *(void *)(a2 + 16))
  {
    uint64_t v2 = *a1;
    long long v5 = &v4;
    sub_244CC6478((void *)(v2 + 48), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_244DCC130);
  }
  return 0;
}

uint64_t sub_244DCC130(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2 != a2 && *(unsigned __int16 *)(a2 + 8) == *(unsigned __int16 *)(v2 + 8) && *(_DWORD *)a2 == *(_DWORD *)v2)
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if (v3 > *(void *)(v2 + 16))
    {
      *(void *)(v2 + 16) = v3;
      uint64_t v2 = **a1;
    }
    *(_DWORD *)(v2 + 4) = -1;
    *(_WORD *)(v2 + 10) = -1;
    *(void *)(a2 + 16) = 0;
  }
  return 0;
}

uint64_t sub_244DCC198(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (*(__int16 *)(a2 + 8) != -1 && *(void *)(a2 + 16))
  {
    uint64_t v2 = *a1;
    long long v5 = &v4;
    sub_244CC6478((void *)(v2 + 48), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_244DCC1F8);
  }
  return 0;
}

uint64_t sub_244DCC1F8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2 != a2 && *(unsigned __int16 *)(a2 + 8) == *(unsigned __int16 *)(v2 + 8))
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if (v3 > *(void *)(v2 + 16))
    {
      *(void *)(v2 + 16) = v3;
      uint64_t v2 = **a1;
    }
    *(_DWORD *)uint64_t v2 = -1;
    uint64_t v4 = **a1;
    *(_DWORD *)(v4 + 4) = -1;
    *(_WORD *)(v4 + 10) = -1;
    *(void *)(a2 + 16) = 0;
  }
  return 0;
}

uint64_t sub_244DCC25C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 208) - 1 <= 1)
  {
    uint64_t v3 = *(void *)(a2 + 168);
    if (v3)
    {
      while (!sub_244CADF70(v3, *(void *)a1))
      {
        uint64_t v3 = *(void *)(v3 + 16);
        if (!v3) {
          return 0;
        }
      }
      sub_244CA8D00(a2, *(void *)a1);
      **(unsigned char **)(a1 + 8) = 1;
    }
  }
  return 0;
}

uint64_t sub_244DCC2D8(unsigned int **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 211))
  {
    unsigned int v2 = *(_DWORD *)(a2 + 200);
    if (v2 < **a1) {
      **a1 = v2;
    }
  }
  return 0;
}

uint64_t sub_244DCC300(unsigned __int16 **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 211))
  {
    uint64_t v2 = *(void *)(a2 + 176);
    if (v2)
    {
      uint64_t v3 = (uint64_t)*a1;
      while (1)
      {
        int v4 = *(unsigned __int16 *)(v2 + 8);
        if ((v4 == 0xFFFF || v4 == **a1) && (*(_DWORD *)v2 == -1 || *(_DWORD *)v2 == *(_DWORD *)(v3 + 4)))
        {
          int v7 = *(_DWORD *)(v2 + 4);
          BOOL v8 = v7 == -1 || v7 == *(_DWORD *)(v3 + 8);
          if (v8 && *(unsigned char *)(v2 + 10)) {
            break;
          }
        }
        uint64_t v2 = *(void *)(v2 + 16);
        if (!v2) {
          return 0;
        }
      }
      *(unsigned char *)a1[1] = 1;
      sub_244CA8E84(a2);
    }
  }
  return 0;
}

uint64_t sub_244DCC394(unsigned char *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 211))
  {
    if (!*a1
      || ((int v3 = *sub_2446F9190(a1), (v4 = sub_244CA8E44(a2)) == 0)
        ? (int v5 = 0)
        : (int v5 = *(unsigned __int8 *)(v4 + 24)),
          v3 == v5))
    {
      sub_244CA8E84(a2);
    }
  }
  return 0;
}

uint64_t sub_244DCC3F8()
{
  uint64_t v0 = sub_244DBE094();
  return sub_244DCB224((uint64_t)v0 + 1360, v2);
}

double sub_244DCC424(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = a1 + 32;
  *(void *)(a1 + 72) = a2;
  *(void *)a1 = &unk_26F958878;
  *(void *)(a1 + 8) = &unk_26F958900;
  if (!a2) {
    sub_244E2A310();
  }
  return result;
}

uint64_t sub_244DCC4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  uint64_t v9 = 0;
  *(void *)long long buf = &v9;
  uint64_t v11 = a2;
  sub_244CC6478((void *)(a1 + 32), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  if (v9) {
    sub_244E2A3B0();
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
  *(void *)long long buf = a1;
  int v3 = sub_244DCC620((unint64_t *)(a1 + 16), &v8, (uint64_t *)buf, &v9);
  uint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = v3[4];
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v5);
    LOWORD(v11) = 1024;
    *(_DWORD *)((char *)&v11 + 2) = v5;
    HIWORD(v11) = 1024;
    int v12 = HIDWORD(v6);
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Registered a ReadHandler that will schedule a report between system Timestamp: 0x%08X%08X and system Timestamp 0x%08X%08X.", buf, 0x1Au);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    return sub_244CC4DE0(0xDu, 2);
  }
  return result;
}

void *sub_244DCC620(unint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = sub_244CC4D84(0x30uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    sub_244DCCEC8((uint64_t)v8, *a2, *a3, a4);
    char v10 = sub_244CC4D84(0x18uLL);
    if (v10)
    {
      *char v10 = v9;
      v10[1] = a1 + 2;
      void v10[2] = 0;
      void v10[2] = a1[4];
      *(void *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      unint64_t v11 = a1[1];
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11) {
        a1[1] = v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void *sub_244DCC6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  v5[0] = &v7;
  v5[1] = a2;
  uint64_t result = (void *)sub_244CC6478((void *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
    (*(void (**)(void *__return_ptr, uint64_t, unsigned int *, uint64_t, uint64_t *))(*(void *)a1 + 112))(v5, a1, &v6, v4, &v7);
    return (*(void *(**)(void *__return_ptr, uint64_t, void, uint64_t, uint64_t *))(*(void *)a1 + 96))(v5, a1, v6, v4, &v7);
  }
  return result;
}

void *sub_244DCC7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  v9[0] = &v11;
  v9[1] = a2;
  uint64_t result = (void *)sub_244CC6478((void *)(a1 + 32), (uint64_t)v9, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
    uint64_t v11 = v6;
    char v7 = *(unsigned char *)(v5 + 40);
    *(unsigned char *)(v5 + 40) = v7 & 0xFD;
    uint64_t v8 = v6 + 1000 * *(unsigned __int16 *)(a2 + 78);
    *(void *)(v5 + 24) = v6 + 1000 * *(unsigned __int16 *)(a2 + 76);
    *(void *)(v5 + 32) = v8;
    *(unsigned char *)(v5 + 40) = v7 & 0xFC;
    (*(void (**)(void *__return_ptr, uint64_t, unsigned int *, uint64_t, uint64_t *))(*(void *)a1 + 112))(v9, a1, &v10, v5, &v11);
    return (*(void *(**)(void *__return_ptr, uint64_t, void, uint64_t, uint64_t *))(*(void *)a1 + 96))(v9, a1, v10, v5, &v11);
  }
  return result;
}

void sub_244DCC8F0(uint64_t a1, uint64_t a2)
{
  sub_244DCC958(a1, a2);
  uint64_t v4 = 0;
  v5[0] = &v4;
  v5[1] = a2;
  sub_244CC6478((void *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  if (v4) {
    sub_244DCC9D8(a1 + 16, v4);
  }
}

uint64_t sub_244DCC958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  v5[0] = &v4;
  v5[1] = a2;
  uint64_t result = sub_244CC6478((void *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  if (v4) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  }
  return result;
}

void sub_244DCC9D8(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    uint64_t v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E26074();
    }
    uint64_t v5 = v4;
    *uint64_t v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t sub_244DCCA88@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), a3);
  if (a2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3, a2);
    if (*(_DWORD *)a4) {
      return result;
    }
    int v9 = 128;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
    int v9 = 124;
  }
  *(_DWORD *)a4 = 0;
  a4[1] = "src/app/reporting/ReportSchedulerImpl.cpp";
  *((_DWORD *)a4 + 4) = v9;
  return result;
}

uint64_t sub_244DCCB78(uint64_t a1)
{
  uint64_t v2 = a1;
  return sub_244CC6478((void *)(a1 + 32), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_244DCCF80);
}

uint64_t sub_244DCCBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  v5[0] = &v4;
  v5[1] = a2;
  sub_244CC6478((void *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  if (v4) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  }
  else {
    return 0;
  }
}

uint64_t sub_244DCCC3C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v17 = 0;
  v18[0] = &v17;
  v18[1] = v10;
  uint64_t result = sub_244CC6478((void *)(a1 + 32), (uint64_t)v18, (unsigned int (*)(uint64_t))sub_244DCBE8C);
  if (v17)
  {
    uint64_t result = sub_244DCBE28(a3, a4);
    if (result)
    {
      int v12 = 0;
    }
    else
    {
      uint64_t result = sub_244DCCD2C(a1, *(void *)(a3 + 8));
      unint64_t v15 = *a4;
      if (result && (unint64_t v16 = *(void *)(a3 + 24), v16 > v15)) {
        int v12 = v16 - v15;
      }
      else {
        int v12 = *(_DWORD *)(a3 + 32) - v15;
      }
    }
    int v14 = 0;
    *a2 = v12;
    int v13 = 174;
  }
  else
  {
    int v13 = 155;
    int v14 = 47;
  }
  *(_DWORD *)a5 = v14;
  *(void *)(a5 + 8) = "src/app/reporting/ReportSchedulerImpl.cpp";
  *(_DWORD *)(a5 + 16) = v13;
  return result;
}

uint64_t sub_244DCCD2C(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(unsigned char *)(a2 + 208) != 1) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 211)) {
    return 1;
  }
  unsigned int v2 = *(unsigned __int8 *)(a2 + 210);
  if ((v2 & 2) != 0) {
    return 1;
  }
  unsigned int v3 = (v2 >> 4) & 1;
  if (*(void *)(a2 + 40) <= *(void *)(a2 + 48)) {
    return v3;
  }
  else {
    return 1;
  }
}

void sub_244DCCD78(void *a1)
{
  sub_244DCCDF4(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244DCCDB0(uint64_t a1)
{
  return sub_244DCCDF4((void *)(a1 - 8));
}

void sub_244DCCDB8(uint64_t a1)
{
  sub_244DCCDF4((void *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

void *sub_244DCCDF4(void *a1)
{
  *a1 = &unk_26F958878;
  a1[1] = &unk_26F958900;
  uint64_t v4 = a1;
  unsigned int v2 = a1 + 2;
  sub_244CC6478(a1 + 4, (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_244DCCF80);
  *a1 = &unk_26F9589B0;
  a1[1] = &unk_26F9589F8;
  sub_244D69770(v2);
  return a1;
}

uint64_t sub_244DCCEC8(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)uint64_t result = &unk_26F958A38;
  *(void *)(result + 16) = a3;
  *(unsigned char *)(result + 40) = 0;
  if (!a2) {
    sub_244E2A450();
  }
  if (!a3) {
    sub_244E2A4F0();
  }
  *(void *)(result + 8) = a2;
  unsigned int v4 = *(unsigned __int16 *)(a2 + 78);
  *(void *)(result + 24) = *a4 + 1000 * *(unsigned __int16 *)(a2 + 76);
  *(void *)(result + 32) = *a4 + 1000 * v4;
  return result;
}

void sub_244DCCF38()
{
}

uint64_t sub_244DCCF4C(uint64_t a1)
{
  *(unsigned char *)(a1 + 40) |= 1u;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t sub_244DCCF80(void *a1, uint64_t a2)
{
  return 0;
}

void sub_244DCCFC4(_OWORD *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned __int16 *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v12 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = *(_DWORD *)(a4 + 4);
    int v14 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v14;
    _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_INFO, "<RE:Run> Cluster %x, Attribute %x is dirty", buf, 0xEu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  uint64_t v15 = sub_244DD6398();
  (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v15 + 16))(v15, 0, 0, a4);
  memset(buf, 0, sizeof(buf));
  uint64_t v18 = 0;
  sub_2447A1D0C(a1, a2, (unsigned __int16 *)a4, a3, a5, (__n128 *)buf);
  if (*(_DWORD *)buf)
  {
    *(_OWORD *)a6 = *(_OWORD *)buf;
    *(void *)(a6 + 16) = v18;
  }
  else
  {
    uint64_t v16 = sub_244DD6398();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, 0, 1, a4);
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = "src/app/reporting/Read-Ember.cpp";
    *(_DWORD *)(a6 + 16) = 51;
  }
  *(_DWORD *)(a6 + 24) = 0;
}

BOOL sub_244DCD194(uint64_t a1, unsigned __int16 *a2, int a3)
{
  return sub_2447A4884(a2, a3);
}

uint64_t sub_244DCD1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26F958A88;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_26F945360;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 48) = 16842752;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1;
  *(void *)(a1 + 144) = sub_244DCD308;
  *(void *)(a1 + 152) = a1 + 152;
  *(void *)(a1 + 160) = a1 + 152;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1;
  *(void *)(a1 + 184) = sub_244DCD434;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = &unk_26F956F80;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 321) = 1;
  *(void *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 328) = 0;
  sub_244D6A434("src/app/ReadClient.cpp", 53);
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 80) = a5;
  *(void *)(a1 + 200) = a2;
  if (a5 == 1) {
    sub_244DC1328(a2, a1);
  }
  return a1;
}

void sub_244DCD308(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1) {
    sub_244E2A590();
  }
  uint64_t v6 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "HandleDeviceConnected", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xDu, 2);
  }
  sub_244D88328((void *)(a1 + 208), a3);
  *(void *)(a1 + 8) = a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40), a3, a1 + 208);
  memset(buf, 0, sizeof(buf));
  uint64_t v10 = 0;
  sub_244DCE708(a1, a1 + 208, (__n128 *)buf);
  if (*(_DWORD *)buf)
  {
    long long v7 = *(_OWORD *)buf;
    uint64_t v8 = v10;
    sub_244DCDDEC(a1, &v7, 1);
  }
}

void *sub_244DCD434(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1) {
    sub_244E2A630();
  }
  unsigned int v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 32);
    uint64_t v5 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Failed to establish CASE for re-subscription with error '%s'", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 32);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xDu, 1);
  }
  long long v7 = (unsigned char *)(a2 + 42);
  __int16 v6 = *(unsigned __int8 *)(a2 + 42);
  if (*(unsigned char *)(a2 + 42))
  {
    uint64_t v8 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int16 *)sub_2447A82F8((unsigned char *)(a2 + 42));
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Will delay resubscription by %u ms due to BUSY response", buf, 8u);
    }
    if (sub_244CC4E58(3u))
    {
      sub_2447A82F8((unsigned char *)(a2 + 42));
      sub_244CC4DE0(0xDu, 3);
    }
    __int16 v6 = *v7;
    if (*v7) {
      __int16 v6 = *(_WORD *)sub_2447A82F8((unsigned char *)(a2 + 42));
    }
  }
  *(_WORD *)(a1 + 106) = v6;
  long long v11 = *(_OWORD *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  return sub_244DCDDEC(a1, &v11, 1);
}

uint64_t sub_244DCD624(uint64_t a1)
{
  *(unsigned char *)(a1 + 49) = 0;
  *(_WORD *)(a1 + 51) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(unsigned char *)(a1 + 105) = 0;
  return sub_244DCD644(a1, 0);
}

uint64_t sub_244DCD644(uint64_t a1, char a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 48) = a2;
  unsigned int v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = *(char *)(a1 + 48);
    if (v4 > 4) {
      uint64_t v5 = "N/A";
    }
    else {
      uint64_t v5 = off_2651A9840[v4];
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v8 = "MoveToState";
    __int16 v9 = 2048;
    uint64_t v10 = a1;
    __int16 v11 = 1040;
    int v12 = 10;
    __int16 v13 = 2080;
    uint64_t v14 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "%s ReadClient[%p]: Moving to [%10.10s]", buf, 0x26u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0xDu, 3);
  }
  return result;
}

double sub_244DCD798(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24);
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(void *)v2 + 72))(v2, sub_244DD0D5C, a1);
  uint64_t v3 = *(void *)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24);
  (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v3 + 72))(v3, sub_244DCDC44, a1);
  *(unsigned char *)(a1 + 105) = 0;
  if (*(void *)(a1 + 264) || *(void *)(a1 + 248) || *(void *)(a1 + 280))
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 40) + 88))(*(void *)(a1 + 40), a1 + 208);
    double result = 0.0;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
  }
  return result;
}

uint64_t sub_244DCD8A4()
{
  uint64_t v0 = *(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24) + 72);

  return v0();
}

uint64_t sub_244DCD918(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v2 + 72))(v2, sub_244DCDC44, a1);
  *(unsigned char *)(a1 + 105) = 0;
  return result;
}

uint64_t sub_244DCD984(uint64_t a1)
{
  *(void *)a1 = &unk_26F958A88;
  sub_244D6A434("src/app/ReadClient.cpp", 101);
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    sub_244DCD798(a1);
    uint64_t v2 = *(void *)(a1 + 200);
    if (v2) {
      sub_244DC161C(v2, a1);
    }
  }
  sub_244D87F44(a1 + 208);
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 168) = 0;
    v3(a1 + 152);
  }
  unint64_t v4 = *(void (**)(uint64_t))(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 128) = 0;
    v4(a1 + 112);
  }
  *(void *)(a1 + 16) = &unk_26F945360;
  sub_2447EA4BC(a1 + 16);
  return a1;
}

void sub_244DCDA50(uint64_t a1)
{
  sub_244DCD984(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DCDA88(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 328);
  if (v2 > 0xE)
  {
    int v3 = 5538000;
  }
  else
  {
    int v3 = 10000 * sub_244CC5F04(v2);
    if (!v3)
    {
      unsigned int v4 = 0;
      goto LABEL_6;
    }
  }
  unsigned int v4 = 30 * v3 / 0x64u + sub_244CE98FC() % (v3 - 30 * v3 / 0x64u);
LABEL_6:
  if (v4 <= *(unsigned __int16 *)(a1 + 106)) {
    return *(unsigned __int16 *)(a1 + 106);
  }
  else {
    return v4;
  }
}

uint64_t sub_244DCDB14@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(result + 48))
  {
    int v6 = 150;
    int v7 = 3;
LABEL_3:
    *(_DWORD *)a5 = v7;
    *(void *)(a5 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a5 + 16) = v6;
    return result;
  }
  char v8 = a4;
  uint64_t v10 = result;
  if (a4)
  {
    if (*a3)
    {
      int v6 = 155;
      int v7 = 47;
      goto LABEL_3;
    }
    int v12 = (unsigned char *)(result + 232);
    int v13 = *(unsigned __int8 *)(v10 + 232);
    *(unsigned char *)(v10 + 104) = a4;
    if (v13)
    {
      uint64_t v14 = (uint64_t *)sub_2446F7170(v12);
      uint64_t v15 = sub_244D879D8(*v14);
      sub_244D85724(v15);
    }
  }
  else
  {
    if (*a3)
    {
      __int16 v11 = (uint64_t *)sub_24479DC08(a3);
      sub_244D88328((void *)(v10 + 208), v11);
    }
    *(unsigned char *)(v10 + 104) = v8;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v16 = *(void *)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v16 + 40))(v16, a2, sub_244DCDC44, v10);
  if (!*(_DWORD *)a5)
  {
    int v7 = 0;
    *(unsigned char *)(v10 + 105) = 1;
    int v6 = 176;
    goto LABEL_3;
  }
  return result;
}

void sub_244DCDC44(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a2) {
    sub_244E2A6D0();
  }
  *(unsigned char *)(a2 + 105) = 0;
  int v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int32 v4 = *(unsigned __int8 *)(a2 + 104);
    buf.n128_u32[0] = 67109120;
    buf.n128_u32[1] = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "OnResubscribeTimerCallback: ForceCASE = %d", (uint8_t *)&buf, 8u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xDu, 2);
  }
  int v5 = *(unsigned __int8 *)(a2 + 232);
  ++*(_DWORD *)(a2 + 328);
  if (v5
    && (int v6 = (uint64_t *)sub_2446F7170((unsigned char *)(a2 + 232)),
        uint64_t v7 = sub_244D879D8(*v6),
        ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) & 1) != 0))
  {
    sub_244DCE708(a2, a2 + 208, &buf);
    unint64_t v8 = buf.n128_u64[0];
    if (!buf.n128_u32[0]) {
      return;
    }
    __int16 v9 = (const char *)buf.n128_u64[1];
    uint64_t v10 = v14;
    BOOL v11 = 1;
  }
  else
  {
    sub_244DD1068(a2, (uint64_t)&buf);
    if (!buf.n128_u32[0]) {
      return;
    }
    LODWORD(v10) = 1360;
    BOOL v11 = *(unsigned char *)(a2 + 104) == 0;
    unint64_t v8 = 0x300000003;
    __int16 v9 = "src/app/ReadClient.cpp";
  }
  v12[0] = v8;
  v12[1] = v9;
  unsigned __int16 v12[2] = v10;
  sub_244DCDDEC(a2, v12, v11);
}

void *sub_244DCDDEC(uint64_t a1, long long *a2, int a3)
{
  if (!*(unsigned char *)(a1 + 80))
  {
    if (*(_DWORD *)a2)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      long long v18 = *a2;
      uint64_t v19 = *((void *)a2 + 2);
      (*(void (**)(uint64_t, long long *))(*(void *)v10 + 72))(v10, &v18);
    }
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a1 + 48) - 1 <= 1)
  {
    *(_DWORD *)__n128 buf = 1;
    *(void *)&uint8_t buf[8] = "core_dev_subscription_setup";
    LODWORD(v17) = *(_DWORD *)a2;
    BYTE4(v17) = 3;
    sub_244D7E78C((uint64_t)buf);
  }
  *(unsigned char *)(a1 + 49) = 0;
  *(_WORD *)(a1 + 51) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(unsigned char *)(a1 + 105) = 0;
  sub_244DCD644(a1, 0);
  int v6 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
LABEL_19:
    sub_244DCD798(a1);
LABEL_20:
    sub_2447EA4BC(a1 + 16);
    return (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40), a1);
  }
  if (!a3 || !*(void *)(a1 + 256) && !*(void *)(a1 + 272)) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  uint64_t result = (*(void *(**)(uint8_t *__return_ptr))(*(void *)v7 + 64))(buf);
  *a2 = *(_OWORD *)buf;
  *((void *)a2 + 2) = v17;
  if (!*(_DWORD *)a2) {
    return result;
  }
  if (*(_DWORD *)a2 != 22)
  {
LABEL_18:
    uint64_t v11 = *(void *)(a1 + 40);
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    (*(void (**)(uint64_t, long long *))(*(void *)v11 + 72))(v11, &v12);
    goto LABEL_19;
  }
  if (v6 != 22) {
    sub_244E2A770();
  }
  __int16 v9 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "ICD device is inactive mark subscription as InactiveICDSubscription", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xDu, 2);
  }
  return (void *)sub_244DCD644(a1, 4);
}

const char *sub_244DCE050(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 48);
  if (v1 > 4) {
    return "N/A";
  }
  else {
    return off_2651A9840[v1];
  }
}

void sub_244DCE078(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    sub_244DCE708(a1, a2, a3);
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    a3->n128_u32[0] = 47;
    a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    a3[1].n128_u32[0] = 276;
  }
  else
  {
    sub_244DCE0B0(a1, a2, a3);
  }
}

void sub_244DCE0B0(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  v65[6] = *MEMORY[0x263EF8340];
  int v6 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "SendReadRequest";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a1;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "%s ReadClient[%p]: Sending Read Request", buf, 0x16u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    a3[1].n128_u32[0] = 285;
    return;
  }
  sub_244DD1C14(&v53, *(void *)(a2 + 56), *(void *)(a2 + 64));
  sub_244DD1C14(v52, *(void *)(a2 + 40), *(void *)(a2 + 48));
  sub_244DD1C14(v51, *(void *)(a2 + 72), *(void *)(a2 + 80));
  long long v50 = 0;
  sub_244CCCDE0((uint64_t)buf);
  sub_244CCCDE0((uint64_t)&v57);
  sub_244CCCDE0((uint64_t)&v58);
  sub_244CCCDE0((uint64_t)&v59);
  sub_244CCCDE0((uint64_t)&v60);
  sub_244CCCDE0((uint64_t)&v61);
  sub_244CCCDE0((uint64_t)&v62);
  sub_244CCCDE0((uint64_t)&v63);
  sub_244CCCDE0((uint64_t)&v64);
  sub_244CCCDE0((uint64_t)v65);
  sub_244CB62B8((uint64_t)v47);
  v48[1] = 0;
  v48[2] = 0;
  v48[0] = &unk_26F9536C8;
  char v49 = 0;
  sub_244DCE7A0((uint64_t)v47, (uint64_t)&v42);
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_244CCF9D0((uint64_t)buf, v47, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    if (!v54) {
      goto LABEL_14;
    }
    uint64_t v7 = (__n128 *)sub_244CCF2C0((uint64_t)buf);
    unint64_t v8 = *(void *)&buf[8];
    int v9 = *(_DWORD *)buf;
    a3->n128_u64[0] = *(void *)buf;
    a3->n128_u64[1] = v8;
    a3[1].n128_u64[0] = *(void *)&buf[16];
    if (!v9)
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244DCE890(v7, &v53, a3);
      if (!a3->n128_u32[0])
      {
LABEL_14:
        if (!v52[1]) {
          goto LABEL_50;
        }
        uint64_t v10 = (__n128 *)sub_244CCF370((uint64_t)buf);
        unint64_t v11 = *(void *)&buf[8];
        int v12 = *(_DWORD *)buf;
        a3->n128_u64[0] = *(void *)buf;
        a3->n128_u64[1] = v11;
        a3[1].n128_u64[0] = *(void *)&buf[16];
        if (!v12)
        {
          a3->n128_u64[0] = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          sub_244DCE974(v10, (uint64_t)v52, a3);
          if (!a3->n128_u32[0])
          {
            LOBYTE(v42) = 0;
            a3->n128_u64[1] = 0;
            a3[1].n128_u64[0] = 0;
            a3->n128_u64[0] = 0;
            sub_244DCEA58((unsigned char *)a1, a2, (uint64_t)&v42, a3);
            if (!a3->n128_u32[0])
            {
              if (!(_BYTE)v42) {
                goto LABEL_50;
              }
              uint64_t v13 = sub_244CCF3C8((uint64_t)buf);
              unint64_t v14 = *(void *)&buf[8];
              int v15 = *(_DWORD *)buf;
              a3->n128_u64[0] = *(void *)buf;
              a3->n128_u64[1] = v14;
              a3[1].n128_u64[0] = *(void *)&buf[16];
              if (!v15)
              {
                uint64_t v16 = v13;
                a3->n128_u64[0] = 0;
                a3->n128_u64[1] = 0;
                a3[1].n128_u64[0] = 0;
                sub_24479DC08(&v42);
                sub_244CCDED8(v16, a3);
                if (!a3->n128_u32[0])
                {
LABEL_50:
                  a3->n128_u64[0] = 0;
                  a3->n128_u64[1] = 0;
                  a3[1].n128_u64[0] = 0;
                  uint64_t v17 = sub_244CCF420((uint64_t)buf);
                  *a3 = *(__n128 *)v17;
                  a3[1].n128_u64[0] = *(void *)(v17 + 16);
                  if (!a3->n128_u32[0])
                  {
                    char v46 = 0;
                    sub_244CB62B8((uint64_t)&v42);
                    long long v18 = v56[3];
                    long long v20 = *v56;
                    long long v19 = v56[1];
                    long long v44 = v56[2];
                    long long v45 = v18;
                    long long v42 = v20;
                    long long v43 = v19;
                    uint64_t v21 = sub_244CCF318((uint64_t)buf);
                    *a3 = *(__n128 *)buf;
                    a3[1].n128_u64[0] = *(void *)&buf[16];
                    if (!a3->n128_u32[0])
                    {
                      int v22 = (__n128 *)v21;
                      if (!v54
                        || (a3->n128_u64[0] = 0,
                            a3->n128_u64[1] = 0,
                            a3[1].n128_u64[0] = 0,
                            sub_244DCEB10(a1, v21, &v53, v51, &v46, a3),
                            !a3->n128_u32[0]))
                      {
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        unint64_t v23 = v22[1].n128_u64[1];
                        if (*(_WORD *)(v23 + 60) != 21169)
                        {
                          int v25 = 175;
                          int v26 = 3;
                          goto LABEL_29;
                        }
                        unsigned int v24 = *(_DWORD *)(v23 + 52);
                        if (v24 <= 4)
                        {
                          int v25 = 176;
                          int v26 = 11;
LABEL_29:
                          a3->n128_u32[0] = v26;
                          a3->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
LABEL_30:
                          a3[1].n128_u32[0] = v25;
                          goto LABEL_8;
                        }
                        *(_DWORD *)(v23 + 52) = v24 - 5;
                        *(_DWORD *)(v23 + 40) += 5;
                        a3->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
                        a3[1].n128_u32[0] = 179;
                        if (!v46)
                        {
                          long long v27 = v56;
                          long long v28 = v42;
                          long long v29 = v43;
                          long long v30 = v45;
                          uint64_t v56[2] = v44;
                          void v27[3] = v30;
                          *long long v27 = v28;
                          v27[1] = v29;
                          sub_244CCCE18((uint64_t)buf);
                          goto LABEL_35;
                        }
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_244CCBA3C(v22, a3);
                        if (!a3->n128_u32[0])
                        {
LABEL_35:
                          a3->n128_u64[0] = 0;
                          a3->n128_u64[1] = 0;
                          a3[1].n128_u64[0] = 0;
                          sub_244CCF478((uint64_t)buf, (uint64_t)a3);
                          if (a3->n128_u32[0]) {
                            goto LABEL_8;
                          }
                          a3->n128_u64[0] = 0;
                          a3->n128_u64[1] = 0;
                          a3[1].n128_u64[0] = 0;
                          sub_2446DE160((uint64_t)v47, &v50, a3);
                          if (a3->n128_u32[0]) {
                            goto LABEL_8;
                          }
                          if (*(unsigned char *)(a2 + 24))
                          {
                            uint64_t v31 = *(void *)(a1 + 8);
                            sub_24479DD24(a2, (uint64_t)&v40);
                            unsigned int v32 = sub_2446F7170(&v40);
                            __int16 v33 = sub_244D66048(v31, v32, a1, 1u);
                            if ((_BYTE)v40) {
                              (*(void (**)(uint64_t))(*(void *)v41 + 32))(v41);
                            }
                            if (v33)
                            {
                              sub_2447EA4BC(a1 + 16);
                              *(void *)(a1 + 32) = v33;
                              v33[5] = a1 + 16;
                              int v34 = *(_DWORD *)(a2 + 104);
                              uint64_t v35 = sub_244CA1E70(a1 + 16);
                              if (v34) {
                                sub_244D645B4(v35, *(_DWORD *)(a2 + 104));
                              }
                              else {
                                sub_244D64578(v35, 2000);
                              }
                              a3->n128_u64[0] = 0;
                              a3->n128_u64[1] = 0;
                              a3[1].n128_u64[0] = 0;
                              uint64_t v36 = sub_244CA1E70(a1 + 16);
                              __int16 v40 = 1;
                              sub_244D645BC(v36, 0x10000u, 2, (uint64_t *)&v50, &v40, (uint64_t)a3);
                              if (a3->n128_u32[0]) {
                                goto LABEL_8;
                              }
                              uint64_t v37 = (uint64_t *)sub_2446F7170((unsigned char *)(a2 + 24));
                              uint64_t v38 = sub_244D879D8(*v37);
                              *(void *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
                              *(unsigned char *)(a1 + 72) = v39;
                              sub_244DCD644(a1, 1);
                              a3->n128_u32[0] = 0;
                              a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                              int v25 = 371;
                            }
                            else
                            {
                              a3->n128_u32[0] = 11;
                              a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                              int v25 = 352;
                            }
                          }
                          else
                          {
                            a3->n128_u32[0] = 119;
                            a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                            int v25 = 349;
                          }
                          goto LABEL_30;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_8:
  sub_244CA539C(v48);
  if (v50) {
    sub_244CC8A0C(v50);
  }
}

void sub_244DCE708(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  if (*(unsigned __int16 *)(a2 + 108) <= *(unsigned __int16 *)(a2 + 110))
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_244DD1154(a1, a2, a3);
    unsigned __int32 v4 = a3->n128_u32[0];
    if (a3->n128_u32[0])
    {
      int v5 = 1;
      int v6 = "core_dev_subscription_setup";
      unsigned __int32 v7 = v4;
      char v8 = 3;
      sub_244D7E78C((uint64_t)&v5);
    }
  }
  else
  {
    a3->n128_u32[0] = 47;
    a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    a3[1].n128_u32[0] = 1137;
  }
}

void sub_244DCE7A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_244CC8F5C(0x4AAuLL, 0x26u, &v7);
  if (!v7)
  {
    int v5 = 31;
    int v6 = 11;
LABEL_8:
    *(_DWORD *)a2 = v6;
    *(void *)(a2 + 8) = "src/app/InteractionModelHelper.h";
    *(_DWORD *)(a2 + 16) = v5;
    goto LABEL_9;
  }
  if ((unint64_t)sub_244CC8B50((uint64_t)v7) < 0x4AB) {
    unsigned int v4 = 21;
  }
  else {
    unsigned int v4 = (unsigned __int16)(sub_244CC8B50((uint64_t)v7) - 1173);
  }
  sub_2447945A0(a1 + 64, &v7, 0);
  sub_244CB6318(a1, a1 + 64, 0xFFFFFFFF, (uint64_t)v8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CB64F8(a1, v4, a2);
  if (!*(_DWORD *)a2)
  {
    int v6 = 0;
    int v5 = 42;
    goto LABEL_8;
  }
LABEL_9:
  if (v7) {
    sub_244CC8A0C(v7);
  }
}

void sub_244DCE890(__n128 *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v5 = a2[1];
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = 12 * v5;
    while (*(__int16 *)(v6 + 10) == -1 || *(_DWORD *)(v6 + 4) != -1)
    {
      uint64_t v8 = sub_244CCC90C((uint64_t)a1);
      *a3 = *a1;
      a3[1].n128_u64[0] = a1[1].n128_u64[0];
      if (a3->n128_u32[0]) {
        return;
      }
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCC3D8(v8, v6, (uint64_t)a3);
      if (a3->n128_u32[0]) {
        return;
      }
      v6 += 12;
      v7 -= 12;
      if (!v7) {
        goto LABEL_8;
      }
    }
    a3->n128_u32[0] = 181;
    a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    a3[1].n128_u32[0] = 392;
  }
  else
  {
LABEL_8:
    sub_244CCBA3C(a1, a3);
  }
}

void sub_244DCE974(__n128 *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(_DWORD **)a2;
    uint64_t v7 = 12 * v5;
    while (*v6 != -1 || v6[1] == -1)
    {
      uint64_t v8 = sub_244CCC90C((uint64_t)a1);
      *a3 = *a1;
      a3[1].n128_u64[0] = a1[1].n128_u64[0];
      if (a3->n128_u32[0]) {
        return;
      }
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCE2E0(v8, (uint64_t)v6, (uint64_t)a3);
      if (a3->n128_u32[0]) {
        return;
      }
      v6 += 3;
      v7 -= 12;
      if (!v7) {
        goto LABEL_8;
      }
    }
    a3->n128_u32[0] = 182;
    a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    a3[1].n128_u32[0] = 378;
  }
  else
  {
LABEL_8:
    sub_244CCBA3C(a1, a3);
  }
}

unsigned char *sub_244DCEA58@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a2 + 88))
  {
    *(unsigned char *)a3 = *(unsigned char *)(a2 + 88);
    uint64_t v6 = *(void *)(a2 + 96);
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(**((void **)result + 5) + 104))(*((void *)result + 5), a3);
  if (!*(_DWORD *)a4)
  {
    if (!*(unsigned char *)a3) {
      goto LABEL_4;
    }
    uint64_t result = sub_24479DC08((unsigned char *)a3);
    uint64_t v6 = *(void *)result + 1;
    *(unsigned char *)a3 = 1;
LABEL_3:
    *(void *)(a3 + 8) = v6;
LABEL_4:
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a4 + 4) = 1407;
  }
  return result;
}

void sub_244DCEB10(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, unsigned char *a5@<X4>, __n128 *a6@<X8>)
{
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  (*(void (**)(void, uint64_t, void *, unsigned char *))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40), a2, a3, a5);
  if (!a6->n128_u32[0])
  {
    if (*a5
      || (a6->n128_u64[0] = 0,
          a6->n128_u64[1] = 0,
          a6[1].n128_u64[0] = 0,
          sub_244DCEBD4(a2, a3, a4, a5, a6),
          !a6->n128_u32[0]))
    {
      a6->n128_u32[0] = 0;
      a6->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
      a6[1].n128_u32[0] = 482;
    }
  }
}

void sub_244DCEBD4(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X3>, unsigned char *a4@<X4>, __n128 *a5@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v7 = a3[1];
  if (!v7)
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
LABEL_25:
    uint64_t v31 = 0;
    goto LABEL_26;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = *a3;
  uint64_t v14 = *a3 + 16 * v7;
  while (1)
  {
    int v15 = *(unsigned __int16 *)(v13 + 12);
    if (v15 == 0xFFFF || *(_DWORD *)v13 == -1 || !*(unsigned char *)(v13 + 4))
    {
      a5->n128_u32[0] = 47;
      a5->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
      int v30 = 413;
      goto LABEL_31;
    }
    uint64_t v16 = a2[1];
    if (v16) {
      break;
    }
LABEL_18:
    ++v12;
LABEL_19:
    v13 += 16;
    if (v13 == v14) {
      goto LABEL_25;
    }
  }
  uint64_t v17 = 12 * v16;
  uint64_t v18 = *a2 + 8;
  long long v19 = (unsigned __int16 *)v18;
  while (1)
  {
    int v21 = *v19;
    v19 += 6;
    int v20 = v21;
    if (v21 == 0xFFFF || v20 == v15)
    {
      int v23 = *(_DWORD *)(v18 - 8);
      if (v23 == -1 || v23 == *(_DWORD *)v13) {
        break;
      }
    }
    uint64_t v18 = (uint64_t)v19;
    v17 -= 12;
    if (!v17) {
      goto LABEL_18;
    }
  }
  sub_244CB62B8((uint64_t)buf);
  int v25 = *(long long **)(a1 + 24);
  long long v26 = *v25;
  long long v27 = v25[1];
  long long v28 = v25[3];
  long long v39 = v25[2];
  long long v40 = v28;
  *(_OWORD *)__n128 buf = v26;
  *(_OWORD *)&uint8_t buf[16] = v27;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  sub_244CCD500(a1, v13, a5);
  unsigned __int32 v29 = a5->n128_u32[0];
  if (!a5->n128_u32[0])
  {
    ++v11;
    *a4 = 1;
    goto LABEL_19;
  }
  if (v29 == 25 || v29 == 11)
  {
    int v34 = *(_OWORD **)(a1 + 24);
    long long v35 = *(_OWORD *)buf;
    long long v36 = *(_OWORD *)&buf[16];
    long long v37 = v40;
    v34[2] = v39;
    void v34[3] = v37;
    *int v34 = v35;
    v34[1] = v36;
    sub_244CCCE18(a1);
    uint64_t v31 = a3[1] - ((v13 - *a3) >> 4);
LABEL_26:
    unsigned int v32 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = a3[1];
      *(_DWORD *)__n128 buf = 134218752;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v12;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v11;
      LOWORD(v39) = 2048;
      *(void *)((char *)&v39 + 2) = v31;
      _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_DEFAULT, "%lu data version filters provided, %lu not relevant, %lu encoded, %lu skipped due to lack of space", buf, 0x2Au);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    int v30 = 464;
LABEL_31:
    a5[1].n128_u32[0] = v30;
  }
}

uint64_t sub_244DCEE58(uint64_t a1)
{
  uint64_t result = sub_244DC1690(*(void *)(a1 + 200), a1);
  if ((result & 1) == 0) {
    sub_244E2A8B0();
  }
  if (*(unsigned char *)(a1 + 48) == 4)
  {
    LODWORD(v3) = 50;
    *((void *)&v3 + 1) = "src/app/ReadClient.cpp";
    int v4 = 494;
    return sub_244DCEEC8(a1, &v3);
  }
  return result;
}

uint64_t sub_244DCEEC8(uint64_t a1, long long *a2)
{
  int v5 = *(unsigned __int8 *)(a1 + 232);
  int v4 = (unsigned char *)(a1 + 232);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)sub_2446F7170(v4);
    uint64_t v7 = *(void *)(sub_244D879D8(*v6) + 136);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 200) + 88) + 88);
    uint64_t v12 = &v13;
    uint64_t v13 = v7;
    v14[0] = a1 + 64;
    v14[1] = &v12;
    sub_244CC6478((void *)(v8 + 128), (uint64_t)v14, (unsigned int (*)(uint64_t))sub_244DD1C38);
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  return sub_244DCDDEC(a1, &v10, 1);
}

uint64_t sub_244DCEF68(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!sub_244DC1690(*(void *)(a1 + 200), a1)) {
    sub_244E2A950();
  }
  *(unsigned char *)(a1 + 336) = a2 == 1;
  int v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 336)) {
      int v5 = "a";
    }
    else {
      int v5 = "not a";
    }
    *(_DWORD *)__n128 buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Peer is now %s LIT ICD.", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    uint64_t result = sub_244CC4DE0(0xDu, 2);
  }
  if (!*(unsigned char *)(a1 + 336)) {
    return sub_244DCEE58(a1);
  }
  return result;
}

void sub_244DCF0A0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  int v8 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)a5 = xmmword_2651A97E0;
  a5[2] = 515;
  if ((v8 | 4) == 4)
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/app/ReadClient.cpp";
    int v9 = 517;
LABEL_5:
    *((_DWORD *)a5 + 4) = v9;
LABEL_6:
    sub_244DD5B5C(a2, 0, (uint64_t)buf);
    int v10 = 1;
    goto LABEL_7;
  }
  if (*((_WORD *)a3 + 2))
  {
LABEL_4:
    *(_DWORD *)a5 = 42;
    a5[1] = "src/app/ReadClient.cpp";
    int v9 = 540;
    goto LABEL_5;
  }
  int v12 = *((unsigned __int16 *)a3 + 3);
  int v13 = *a3;
  if (v12 == 1 && v13 == 5)
  {
    sub_244DCF364(a1, a4, a5);
    if (*(_DWORD *)a5) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v12 != 1 || v13 != 4)
    {
      if (v12 == 1 && v13 == 1)
      {
        if (*(void *)(a1 + 32) == a2)
        {
          *(_OWORD *)__n128 buf = xmmword_2651A97F8;
          uint64_t v21 = 533;
          sub_244DD5D28(a4, (uint64_t)buf, a5);
          if (*(_DWORD *)a5) {
            goto LABEL_6;
          }
          *(_OWORD *)a5 = *(_OWORD *)buf;
          a5[2] = v21;
          if (*(_DWORD *)a5) {
            goto LABEL_6;
          }
          *(_DWORD *)a5 = 42;
          a5[1] = "src/app/ReadClient.cpp";
          int v9 = 536;
        }
        else
        {
          *(_DWORD *)a5 = 3;
          a5[1] = "src/app/ReadClient.cpp";
          int v9 = 532;
        }
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t v16 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "SubscribeResponse is received", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    if (*(void *)(a1 + 32) != a2)
    {
      *(_DWORD *)a5 = 3;
      a5[1] = "src/app/ReadClient.cpp";
      int v9 = 526;
      goto LABEL_5;
    }
    sub_244DCF7C8(a1, a4, a5);
    *(_DWORD *)__n128 buf = 1;
    *(void *)&uint8_t buf[8] = "core_dev_subscription_setup";
    LODWORD(v21) = *(_DWORD *)a5;
    int v17 = v21;
    BYTE4(v21) = 3;
    sub_244D7E78C((uint64_t)buf);
    if (v17) {
      goto LABEL_6;
    }
  }
  int v10 = 0;
LABEL_7:
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    if (!v10) {
      return;
    }
    goto LABEL_13;
  }
  if (!*(unsigned char *)(a1 + 52)) {
    LOBYTE(v10) = 1;
  }
  if (v10)
  {
LABEL_13:
    long long v18 = *(_OWORD *)a5;
    uint64_t v19 = a5[2];
    sub_244DCDDEC(a1, &v18, 1);
  }
}

void sub_244DCF364(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2651A9810;
  a3[2] = 595;
  sub_244CCF15C((uint64_t)v20);
  char v19 = 1;
  int v18 = 0;
  sub_244CCF15C((uint64_t)v17);
  sub_244CCF15C((uint64_t)v16);
  sub_244CB3988((uint64_t)v14);
  int v15 = 0;
  sub_2446DE1E4((uint64_t)v14, a2);
  sub_244CCF054((uint64_t)v20, (uint64_t)v14, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_2;
  }
  sub_244CCE0AC(v20, &v19, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33) {
      goto LABEL_2;
    }
    char v19 = 0;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 617;
  }
  sub_244CCB970(v20, &v18, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3 == 33)
  {
    if (*(unsigned char *)(a1 + 80) != 1)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/ReadClient.cpp";
      *((_DWORD *)a3 + 4) = 642;
      goto LABEL_30;
    }
    *(_DWORD *)a3 = 47;
    a3[1] = "src/app/ReadClient.cpp";
    int v8 = 638;
LABEL_28:
    *((_DWORD *)a3 + 4) = v8;
    goto LABEL_2;
  }
  if (*(_DWORD *)a3) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(a1 + 80) != 1)
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/app/ReadClient.cpp";
    int v8 = 624;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(a1 + 51))
  {
    if (*(_DWORD *)(a1 + 60) == v18) {
      goto LABEL_30;
    }
    *(_DWORD *)a3 = 107;
    a3[1] = "src/app/ReadClient.cpp";
    int v8 = 631;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 60) = v18;
LABEL_30:
  int v9 = (unsigned char *)(a1 + 52);
  sub_244CCF2B0(v20, (char *)(a1 + 52), &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33) {
      goto LABEL_2;
    }
    *int v9 = 0;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 651;
  }
  sub_244CCE5F4(v20, (uint64_t)v17, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33) {
      goto LABEL_2;
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 658;
  }
  else
  {
    sub_244CB3988((uint64_t)&v12);
    sub_244CCF1AC((uint64_t)v17, (uint64_t)&v12);
    sub_244DCFB8C(a1, (uint64_t)&v12, (uint64_t)&v10);
    *(_OWORD *)a3 = v10;
    a3[2] = v11;
    if (*(_DWORD *)a3) {
      goto LABEL_2;
    }
  }
  sub_244CCEB54(v20, (uint64_t)v16, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33) {
      goto LABEL_2;
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 671;
  }
  else
  {
    sub_244CB3988((uint64_t)&v12);
    sub_244CCF1AC((uint64_t)v16, (uint64_t)&v12);
    sub_244DCFEBC(a1, (uint64_t)&v12, (uint64_t)&v10);
    *(_OWORD *)a3 = v10;
    a3[2] = v11;
    if (*(_DWORD *)a3) {
      goto LABEL_2;
    }
  }
  if (*(unsigned char *)(a1 + 49) && !*v9)
  {
    (*(void (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
    *(unsigned char *)(a1 + 49) = 0;
  }
  sub_244CCF0D0((uint64_t)v20, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
LABEL_2:
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 48);
    if (v6 == 3)
    {
      if (!*(_DWORD *)a3)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), a1);
        sub_244DD05CC((void *)a1, &v12);
        *(_OWORD *)a3 = v12;
        a3[2] = v13;
      }
    }
    else if (v6 == 1)
    {
      sub_244DCD644(a1, 2);
    }
  }
  if (!v19 && !*(_DWORD *)a3)
  {
    __int16 v7 = *(unsigned char *)(a1 + 48) != 3 || *(unsigned char *)(a1 + 52) != 0;
    sub_244DD5B5C(*(void *)(a1 + 32), v7, (uint64_t)&v12);
    *(_OWORD *)a3 = v12;
    a3[2] = v13;
  }
  *(unsigned char *)(a1 + 51) = 0;
  if (v15) {
    sub_244CC8A0C(v15);
  }
}

void sub_244DCF7C8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v17);
  int v18 = 0;
  sub_2446DE1E4((uint64_t)v17, a2);
  sub_244CCF15C((uint64_t)v16);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCF054((uint64_t)v16, (uint64_t)v17, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_16;
  }
  unsigned int v15 = 0;
  sub_244CCB970(v16, &v15, &buf);
  if (buf)
  {
    int v6 = 1080;
    int v7 = 47;
LABEL_15:
    *(_DWORD *)a3 = v7;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = v6;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 60) != v15 || *(unsigned char *)(a1 + 80) != 1)
  {
    int v6 = 1081;
    int v7 = 107;
    goto LABEL_15;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCBCC0(v16, (_WORD *)(a1 + 56), a3);
  if (!*(_DWORD *)a3)
  {
    int v8 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0) - *(_DWORD *)(a1 + 344);
    int v9 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 60);
      int v11 = *(unsigned __int16 *)(a1 + 54);
      int v12 = *(unsigned __int16 *)(a1 + 56);
      int v13 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v14 = *(void *)(a1 + 64);
      LODWORD(buf) = 67110656;
      HIDWORD(buf) = v8;
      __int16 v20 = 1024;
      int v21 = v10;
      __int16 v22 = 1024;
      int v23 = v11;
      __int16 v24 = 1024;
      int v25 = v12;
      __int16 v26 = 1024;
      int v27 = v13;
      __int16 v28 = 1024;
      int v29 = HIDWORD(v14);
      __int16 v30 = 1024;
      int v31 = v14;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Subscription established in %ums with SubscriptionID = 0x%08x MinInterval = %us MaxInterval = %us Peer = %02x:%08X%08X", (uint8_t *)&buf, 0x2Cu);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCF0D0((uint64_t)v16, a3);
    if (!*(_DWORD *)a3)
    {
      sub_244DCD644(a1, 3);
      (*(void (**)(void, void))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v15);
      *(_DWORD *)(a1 + 328) = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244DD05CC((void *)a1, a3);
      if (!*(_DWORD *)a3)
      {
        int v7 = 0;
        int v6 = 1103;
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  if (v18) {
    sub_244CC8A0C(v18);
  }
}

void sub_244DCFAA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  sub_244CA99E8(a1 + 16, a2);
  uint64_t v6 = sub_244CA1E70(v5);
  sub_24479B4A8(v6, &v10);
  sub_244D88328((void *)(a1 + 208), (uint64_t *)&v10);
  (*(void (**)(void))(*(void *)v10 + 32))(v10);
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  sub_244DCF364(a1, a3, &v10);
  if (v10)
  {
    sub_244DD5B5C(*(void *)(a1 + 32), 0, (uint64_t)v9);
    long long v7 = v10;
    uint64_t v8 = v11;
    sub_244DCDDEC(a1, &v7, 1);
  }
}

void sub_244DCFB8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB4E58(a2, v31);
  int v6 = v31[0];
  if (!LODWORD(v31[0]))
  {
    int v13 = (long long *)(a1 + 88);
    while (1)
    {
      sub_244CB3988((uint64_t)v34);
      sub_244CCF15C((uint64_t)v31);
      sub_244CCF15C((uint64_t)v30);
      v24[0] = 0;
      int v26 = 0;
      int v25 = 0;
      uint64_t v27 = 0;
      char v28 = 3;
      LOBYTE(v29) = 0;
      *((void *)&v29 + 1) = 0;
      __int16 v23 = 0;
      long long v14 = *(_OWORD *)(a2 + 48);
      void v21[2] = *(_OWORD *)(a2 + 32);
      v21[3] = v14;
      uint64_t v22 = *(void *)(a2 + 64);
      long long v15 = *(_OWORD *)(a2 + 16);
      v21[0] = *(_OWORD *)a2;
      v21[1] = v15;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      sub_244CCFA34((uint64_t)v31, (uint64_t)v21, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      sub_244CCC9D4((int *)v31, (uint64_t)v30, v20);
      if (LODWORD(v20[0]) == 33) {
        break;
      }
      if (!LODWORD(v20[0]))
      {
        long long v29 = *v13;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = 0;
        sub_244CCDB34(v30, (uint64_t)v24, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        *int v13 = v29;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = 0;
        sub_244CCD7F4(v30, (uint64_t)v34, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        uint64_t v16 = v27 + 1;
        *(unsigned char *)(a1 + 296) = 1;
        *(void *)(a1 + 304) = v16;
        if (!*(unsigned char *)(a1 + 49))
        {
          (*(void (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
          *(unsigned char *)(a1 + 49) = 1;
        }
        int v17 = *(void (**)(void))(**(void **)(a1 + 40) + 40);
LABEL_26:
        v17();
      }
      sub_244CB4E58(a2, v31);
      int v6 = v31[0];
      if (LODWORD(v31[0])) {
        goto LABEL_2;
      }
    }
    sub_244CCF15C((uint64_t)v20);
    sub_244CCF15C((uint64_t)v19);
    sub_244CCF15C((uint64_t)v18);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCC960((int *)v31, (uint64_t)v20, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCCCBC((int *)v20, (uint64_t)v19, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCDFAC(v19, (uint64_t)v24, a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCC9D4((int *)v20, (uint64_t)v18, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCF540((uint64_t)v18, &v23, (void *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    if (!*(unsigned char *)(a1 + 49))
    {
      (*(void (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
      *(unsigned char *)(a1 + 49) = 1;
    }
    int v17 = *(void (**)(void))(**(void **)(a1 + 40) + 40);
    goto LABEL_26;
  }
LABEL_2:
  int v7 = HIDWORD(v31[0]);
  uint64_t v8 = (const char *)v31[1];
  int v9 = v32;
  int v10 = v33;
  BOOL v11 = v6 == 33;
  if (v6 == 33)
  {
    int v6 = 0;
    uint64_t v8 = "src/app/ReadClient.cpp";
  }
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v7;
  *(void *)(a3 + 8) = v8;
  if (v11) {
    int v12 = 927;
  }
  else {
    int v12 = v9;
  }
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v10;
}

void sub_244DCFEBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  sub_244CB4E58(a2, v46);
  int v6 = v46[0];
  if (LODWORD(v46[0]))
  {
LABEL_2:
    int v7 = HIDWORD(v46[0]);
    uint64_t v8 = (const char *)v46[1];
    int v9 = v47;
    int v10 = v48;
    BOOL v11 = v6 == 33;
    if (v6 == 33)
    {
      int v6 = 0;
      uint64_t v8 = "src/app/ReadClient.cpp";
    }
    *(_DWORD *)a3 = v6;
    *(_DWORD *)(a3 + 4) = v7;
    if (v11) {
      int v12 = 869;
    }
    else {
      int v12 = v9;
    }
    *(void *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 20) = v10;
  }
  else
  {
    while (1)
    {
      sub_244CB3988((uint64_t)v49);
      sub_244CCF15C((uint64_t)v46);
      sub_244CCF15C((uint64_t)v45);
      sub_244CCF15C((uint64_t)v44);
      sub_244CCF15C((uint64_t)v43);
      unsigned __int16 v38 = 0;
      char v39 = 0;
      char v41 = 0;
      memset(v40, 0, 11);
      __int16 v37 = 0;
      long long v13 = *(_OWORD *)(a2 + 48);
      v35[2] = *(_OWORD *)(a2 + 32);
      v35[3] = v13;
      uint64_t v36 = *(void *)(a2 + 64);
      long long v14 = *(_OWORD *)(a2 + 16);
      v35[0] = *(_OWORD *)a2;
      v35[1] = v14;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      sub_244CCFA34((uint64_t)v46, (uint64_t)v35, (void *)a3);
      if (*(_DWORD *)a3) {
        break;
      }
      sub_244CCC960((int *)v46, (uint64_t)v44, &v56);
      if (v56 == 33)
      {
        int v19 = HIDWORD(v56);
        uint64_t v20 = v57;
        int v21 = v58;
        int v22 = *(_DWORD *)v59;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCC9D4((int *)v46, (uint64_t)v45, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCB8FC(v45, (uint64_t)v43, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCBEE8(v43, &v38, 1, &v56);
        int v23 = v56;
        int v24 = v56 ? 181 : 0;
        int v25 = v56 ? 758 : 759;
        *(_DWORD *)a3 = v24;
        *(void *)(a3 + 8) = "src/app/ReadClient.cpp";
        *(_DWORD *)(a3 + 16) = v25;
        if (v23) {
          return;
        }
        if (sub_244DD0AB4((__int16 *)&v38))
        {
          int v34 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(void *)a3 = 0;
          sub_244CCB970(v45, &v34, (void *)a3);
          if (*(_DWORD *)a3) {
            return;
          }
          char v41 = 1;
          int v42 = v34;
          if (*(void *)(a1 + 280)) {
            sub_244DD0B40(a1, &v38);
          }
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CCB980(v45, (uint64_t)v49, (void *)a3);
          if (*(_DWORD *)a3) {
            return;
          }
          if (!BYTE2(v40[2])) {
            BYTE2(v40[2]) = sub_244CB3B68((uint64_t)v49) == 22;
          }
          if (!v38 && v40[0] == 70 && v40[1] == 8)
          {
            unsigned __int8 v33 = 0;
            sub_244CB3988((uint64_t)&v56);
            sub_244CB3B04(v27, (uint64_t)v49);
            sub_244DD0948((uint64_t)&v56, &v33, (uint64_t)&buf);
            if (buf)
            {
              char v28 = sub_244CC8484(0xDu, "DataManagement");
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                int buf = 33;
                *(_DWORD *)char v51 = v19;
                *(void *)&v51[4] = v20;
                int v52 = v21;
                *(_DWORD *)uint64_t v53 = v22;
                long long v29 = sub_244CB7B34((const char **)&buf, 1);
                int buf = 136315138;
                *(void *)char v51 = v29;
                _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "Failed to get ICD state from attribute data with error'%s'", (uint8_t *)&buf, 0xCu);
              }
              if (sub_244CC4E58(1u))
              {
                int buf = 33;
                *(_DWORD *)char v51 = v19;
                *(void *)&v51[4] = v20;
                int v52 = v21;
                *(_DWORD *)uint64_t v53 = v22;
                sub_244CB7B34((const char **)&buf, 1);
                sub_244CC4DE0(0xDu, 1);
              }
            }
            else
            {
              int v32 = sub_244DBE094();
              sub_244DC12C8((uint64_t)v32, *(void *)(a1 + 64), *(void *)(a1 + 72), v33);
            }
          }
          if (!*(unsigned char *)(a1 + 49))
          {
            (*(void (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
            *(unsigned char *)(a1 + 49) = 1;
          }
          (*(void (**)(void, unsigned __int16 *, unsigned char *, __int16 *, uint64_t))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), &v38, v49, &v37, v26);
        }
        else
        {
          int v31 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v56) = 67110144;
            HIDWORD(v56) = v38;
            LOWORD(v57) = 1024;
            *(_DWORD *)((char *)&v57 + 2) = HIWORD(v40[0]);
            HIWORD(v57) = 1024;
            int v58 = LOWORD(v40[0]);
            *(_WORD *)uint64_t v59 = 1024;
            *(_DWORD *)&v59[2] = HIWORD(v40[1]);
            __int16 v60 = 1024;
            int v61 = LOWORD(v40[1]);
            _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_ERROR, "Skipping AttributeDataIB  with out-of-range IDs: (%d, 0x%04X_%04X, 0x%04X_%04X) ", (uint8_t *)&v56, 0x20u);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0xDu, 1);
          }
        }
      }
      else if (!v56)
      {
        sub_244CCF15C((uint64_t)&v56);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCCCBC(v44, (uint64_t)v43, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCBEE8(v43, &v38, 1, &buf);
        int v15 = buf;
        int v16 = buf ? 181 : 0;
        int v17 = buf ? 758 : 759;
        *(_DWORD *)a3 = v16;
        *(void *)(a3 + 8) = "src/app/ReadClient.cpp";
        *(_DWORD *)(a3 + 16) = v17;
        if (v15) {
          return;
        }
        if (sub_244DD0AB4((__int16 *)&v38))
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CCC9D4(v44, (uint64_t)&v56, (void *)a3);
          if (*(_DWORD *)a3) {
            return;
          }
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CCF540((uint64_t)&v56, &v37, (void *)a3);
          if (*(_DWORD *)a3) {
            return;
          }
          if (!*(unsigned char *)(a1 + 49))
          {
            (*(void (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
            *(unsigned char *)(a1 + 49) = 1;
          }
          (*(void (**)(void, unsigned __int16 *, void, __int16 *, uint64_t))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), &v38, 0, &v37, v18);
        }
        else
        {
          __int16 v30 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            int buf = 67110144;
            *(_DWORD *)char v51 = v38;
            *(_WORD *)&v51[4] = 1024;
            *(_DWORD *)&v51[6] = HIWORD(v40[0]);
            *(_WORD *)&v51[10] = 1024;
            int v52 = LOWORD(v40[0]);
            *(_WORD *)uint64_t v53 = 1024;
            *(_DWORD *)&void v53[2] = HIWORD(v40[1]);
            __int16 v54 = 1024;
            int v55 = LOWORD(v40[1]);
            _os_log_impl(&dword_2446BD000, v30, OS_LOG_TYPE_ERROR, "Skipping AttributeStatusIB with out-of-range IDs: (%d, 0x%04X_%04X, 0x%04X_%04X) ", (uint8_t *)&buf, 0x20u);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0xDu, 1);
          }
        }
      }
      sub_244CB4E58(a2, v46);
      int v6 = v46[0];
      if (LODWORD(v46[0])) {
        goto LABEL_2;
      }
    }
  }
}

void *sub_244DD05CC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v11 = xmmword_2651A9828;
  uint64_t v12 = 945;
  if (*((unsigned char *)result + 48) == 3)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *(void *)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24);
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(void *)v4 + 72))(v4, sub_244DD0D5C, v3);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = (void *)sub_244DD0C0C(v3, &v10, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      uint64_t v5 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(v3 + 60);
        int v7 = *(unsigned __int8 *)(v3 + 72);
        uint64_t v8 = *(void *)(v3 + 64);
        *(_DWORD *)int buf = 134219008;
        uint64_t v14 = v10;
        __int16 v15 = 1024;
        int v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        __int16 v19 = 1024;
        int v20 = HIDWORD(v8);
        __int16 v21 = 1024;
        int v22 = v8;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "Refresh LivenessCheckTime for %lu milliseconds with SubscriptionId = 0x%08x Peer = %02x:%08X%08X", buf, 0x24u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0xDu, 2);
      }
      int v9 = sub_244DBE094();
      uint64_t result = (*(void *(**)(long long *__return_ptr))(**(void **)(*(void *)(v9[11] + 88) + 24)
                                                                 + 40))(&v11);
      *(_OWORD *)a2 = v11;
      a2[2] = v12;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a2 + 4) = 947;
  }
  return result;
}

void *sub_244DD0800(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_244D64530(a2)) {
      int v6 = 105;
    }
    else {
      int v6 = 114;
    }
    *(_DWORD *)int buf = 67109376;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Time out! failed to receive report data from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_244CC4E58(1u))
  {
    sub_244D64530(a2);
    sub_244CC4DE0(0xDu, 1);
  }
  LODWORD(v8) = 50;
  *((void *)&v8 + 1) = "src/app/ReadClient.cpp";
  int v9 = 723;
  return sub_244DCDDEC(a1, &v8, 1);
}

double sub_244DD0948@<D0>(uint64_t a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  char v8 = 0;
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  sub_2447F1DCC(a1, &v8, &v6);
  double result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(void *)(a3 + 16) = v7;
  if (!*(_DWORD *)a3)
  {
    if (v8 == 1)
    {
      *a2 = 1;
    }
    else if (v8)
    {
      LODWORD(v6) = 47;
      *((void *)&v6 + 1) = "src/app/ReadClient.cpp";
      LODWORD(v7) = 742;
    }
    else
    {
      *a2 = 0;
    }
    double result = *(double *)&v6;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v7;
  }
  return result;
}

void sub_244DD09F4(int *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  sub_244CCBEE8(a1, a2, 1, v6);
  if (LODWORD(v6[0])) {
    int v4 = 181;
  }
  else {
    int v4 = 0;
  }
  if (LODWORD(v6[0])) {
    int v5 = 758;
  }
  else {
    int v5 = 759;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/app/ReadClient.cpp";
  *(_DWORD *)(a3 + 16) = v5;
}

uint64_t sub_244DD0A5C(uint64_t result)
{
  if (!*(unsigned char *)(result + 49))
  {
    uint64_t v1 = result;
    double result = (*(uint64_t (**)(void))(**(void **)(result + 40) + 24))(*(void *)(result + 40));
    *(unsigned char *)(v1 + 49) = 1;
  }
  return result;
}

BOOL sub_244DD0AB4(__int16 *a1)
{
  if (*a1 == -1) {
    return 0;
  }
  unsigned int v1 = *((_DWORD *)a1 + 1);
  unsigned int v2 = HIWORD(v1);
  if (HIWORD(v1) > 0xFFF4u) {
    return 0;
  }
  if ((v1 & 0x8000) == 0 && !v2 || (uint64_t v3 = 0, v2) && (unsigned __int16)(v1 + 1024) <= 0x3FEu)
  {
    unsigned int v4 = *((_DWORD *)a1 + 2);
    BOOL v5 = (unsigned __int16)((unsigned __int16)v4 >> 12) > 4u || HIWORD(v4) >= 0xFFF5u;
    if (v5)
    {
      BOOL v5 = v4 >= 0x10000;
      unsigned int v6 = (unsigned __int16)(v4 + 4096);
      return !v5 && v6 < 0xFFF;
    }
    else
    {
      return 1;
    }
  }
  return v3;
}

uint64_t sub_244DD0B40(uint64_t result, unsigned __int16 *a2)
{
  if (*(void *)(result + 288))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(result + 280);
      if (*(unsigned __int16 *)(v4 + v2 + 12) == *a2 && *(_DWORD *)(v4 + v2) == *((_DWORD *)a2 + 1))
      {
        uint64_t v5 = v4 + v2;
        int v6 = *((unsigned __int8 *)a2 + 16);
        *(unsigned char *)(v5 + 4) = v6;
        if (v6) {
          *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 5);
        }
      }
      ++v3;
      v2 += 16;
    }
    while (v3 < *(void *)(result + 288));
  }
  return result;
}

void *sub_244DD0BA8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 332) = a2;
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  double result = sub_244DD05CC((void *)a1, &v6);
  if (v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    return sub_244DCDDEC(a1, &v4, 1);
  }
  return result;
}

uint64_t sub_244DD0C0C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(result + 332);
  if (v5)
  {
    int v6 = 970;
  }
  else
  {
    uint64_t v7 = result;
    char v8 = (unsigned char *)(result + 232);
    if (!*(unsigned char *)(result + 232))
    {
      int v6 = 973;
      int v16 = 3;
      goto LABEL_6;
    }
    int v9 = sub_2446F7170((unsigned char *)(result + 232));
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v9 + 88))(*(void *)v9);
    int v11 = sub_2446F7170(v8);
    int v12 = (*(uint64_t (**)(void, void))(**(void **)v11 + 120))(*(void *)v11, 0);
    unsigned int v14 = *(_DWORD *)v10;
    unsigned int v13 = *(_DWORD *)(v10 + 4);
    unsigned int v15 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    double result = sub_244D6A0C8(v13, v14, v15, *(unsigned __int16 *)(v10 + 8));
    int v5 = v12 + result + 1000 * *(unsigned __int16 *)(v7 + 56) + 2000;
    int v6 = 997;
  }
  int v16 = 0;
  *a2 = v5;
LABEL_6:
  *(_DWORD *)a3 = v16;
  *(void *)(a3 + 8) = "src/app/ReadClient.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244DD0D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!sub_244DC1690(*(void *)(a2 + 200), a2)) {
    sub_244E2A9F0();
  }
  unint64_t v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = *(_DWORD *)(a2 + 60);
    int v5 = *(unsigned __int8 *)(a2 + 72);
    uint64_t v6 = *(void *)(a2 + 64);
    *(_DWORD *)int buf = 67109888;
    int v15 = v4;
    __int16 v16 = 1024;
    int v17 = v5;
    __int16 v18 = 1024;
    int v19 = HIDWORD(v6);
    __int16 v20 = 1024;
    int v21 = v6;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Subscription Liveness timeout with SubscriptionID = 0x%08x, Peer = %02x:%08X%08X", buf, 0x1Au);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0xDu, 1);
  }
  BOOL v7 = *(unsigned char *)(a2 + 336) == 0;
  if (*(unsigned char *)(a2 + 336)) {
    unsigned int v8 = 22;
  }
  else {
    unsigned int v8 = 50;
  }
  *(void *)&long long v11 = v8;
  *((void *)&v11 + 1) = "src/app/ReadClient.cpp";
  if (v7) {
    int v9 = 1019;
  }
  else {
    int v9 = 1034;
  }
  int v12 = v9;
  int v13 = 0;
  return sub_244DCEEC8(a2, &v11);
}

double sub_244DD0EB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  *(_WORD *)(a1 + 106) = 0;
  uint64_t v5 = a1 + 208;
  sub_244DD0F34(a1 + 208, a2);
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  sub_244DCE708(a1, v5, a3);
  if (a3->n128_u32[0])
  {
    return sub_244DCD798(a1);
  }
  return result;
}

uint64_t sub_244DD0F34(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    sub_244D88198(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    int v4 = *(unsigned __int8 *)(a2 + 88);
    *(unsigned char *)(a1 + 88) = v4;
    if (v4) {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
    }
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
    *(_WORD *)(a1 + 110) = *(_WORD *)(a2 + 110);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
    *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
  }
  return a1;
}

double sub_244DD0FEC@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 8);
  *(void *)(a1 + 64) = v6;
  sub_244DD0F34(a1 + 208, a3);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244DD1068(a1, (uint64_t)a4);
  if (*(_DWORD *)a4)
  {
    return sub_244DCD798(a1);
  }
  return result;
}

void *sub_244DD1068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v8 = 0;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Trying to establish a CASE session for subscription", v8, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xDu, 2);
  }
  double result = (void *)*((void *)sub_244DBE094() + 217);
  if (result)
  {
    double result = sub_244DBAD68((uint64_t)result, (void *)(a1 + 64), (uint64_t *)(a1 + 112), a1 + 152, 1, 0, 0);
    int v6 = 0;
    int v7 = 1445;
  }
  else
  {
    int v7 = 1443;
    int v6 = 3;
  }
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = "src/app/ReadClient.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

void sub_244DD1154(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  v44.n128_u32[0] = 0;
  v44.n128_u64[1] = (unint64_t)"core_dev_subscription_setup";
  BYTE4(v45) = 0;
  sub_244D7E78C((uint64_t)&v44);
  *(void *)(a1 + 344) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  if (*(unsigned char *)(a1 + 48))
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
    a3[1].n128_u32[0] = 1155;
    return;
  }
  if (a1 + 208 != a2) {
    sub_244D88198(a1 + 208, a2);
  }
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 114);
  *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 108);
  sub_244DD1C14(&v62, *(void *)(a2 + 56), *(void *)(a2 + 64));
  sub_244DD1C14(v61, *(void *)(a2 + 40), *(void *)(a2 + 48));
  sub_244DD1C14(v60, *(void *)(a2 + 72), *(void *)(a2 + 80));
  uint64_t v59 = 0;
  sub_244CB62B8((uint64_t)v56);
  v57[1] = 0;
  v57[2] = 0;
  v57[0] = &unk_26F9536C8;
  char v58 = 0;
  sub_244CCCDE0((uint64_t)&v44);
  sub_244CCCDE0((uint64_t)&v47);
  sub_244CCCDE0((uint64_t)&v48);
  sub_244CCCDE0((uint64_t)&v49);
  sub_244CCCDE0((uint64_t)&v50);
  sub_244CCCDE0((uint64_t)&v51);
  sub_244CCCDE0((uint64_t)&v52);
  sub_244CCCDE0((uint64_t)&v53);
  sub_244CCCDE0((uint64_t)&v54);
  sub_244CCCDE0((uint64_t)&v55);
  sub_244DCE7A0((uint64_t)v56, (uint64_t)&v39);
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_244CCF9D0((uint64_t)&v44, v56, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    uint64_t v6 = sub_244CCC170((uint64_t)&v44);
    uint64_t v7 = sub_244CCCF30(v6);
    sub_244CCC220(v7);
    if (!v63
      || (unsigned int v8 = (__n128 *)sub_244CCFD28((uint64_t)&v44), *a3 = *v8,
                                                       a3[1].n128_u64[0] = v8[1].n128_u64[0],
                                                       !a3->n128_u32[0])
      && (a3->n128_u64[0] = 0,
          a3->n128_u64[1] = 0,
          a3[1].n128_u64[0] = 0,
          sub_244DCE890(v8, &v62, a3),
          !a3->n128_u32[0]))
    {
      if (!v61[1]) {
        goto LABEL_50;
      }
      int v9 = (__n128 *)sub_244CCFDD8((uint64_t)&v44);
      *a3 = *v9;
      a3[1].n128_u64[0] = v9[1].n128_u64[0];
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_244DCE974(v9, (uint64_t)v61, a3);
        if (!a3->n128_u32[0])
        {
          LOBYTE(v39) = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          a3->n128_u64[0] = 0;
          sub_244DCEA58((unsigned char *)a1, a2, (uint64_t)&v39, a3);
          if (!a3->n128_u32[0])
          {
            if (!(_BYTE)v39) {
              goto LABEL_50;
            }
            uint64_t v10 = sub_244CCFE30((uint64_t)&v44);
            *a3 = v44;
            a3[1].n128_u64[0] = v45;
            if (!a3->n128_u32[0])
            {
              uint64_t v11 = v10;
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              sub_24479DC08(&v39);
              sub_244CCDED8(v11, a3);
              if (!a3->n128_u32[0])
              {
LABEL_50:
                a3->n128_u64[0] = 0;
                a3->n128_u64[1] = 0;
                a3[1].n128_u64[0] = 0;
                uint64_t v12 = sub_244CCFE88((uint64_t)&v44);
                *a3 = *(__n128 *)v12;
                a3[1].n128_u64[0] = *(void *)(v12 + 16);
                if (!a3->n128_u32[0])
                {
                  char v43 = 0;
                  sub_244CB62B8((uint64_t)&v39);
                  long long v13 = v46[3];
                  long long v15 = *v46;
                  long long v14 = v46[1];
                  long long v41 = v46[2];
                  long long v42 = v13;
                  long long v39 = v15;
                  long long v40 = v14;
                  uint64_t v16 = sub_244CCFD80((uint64_t)&v44);
                  *a3 = v44;
                  a3[1].n128_u64[0] = v45;
                  if (!a3->n128_u32[0])
                  {
                    int v17 = (__n128 *)v16;
                    if (!v63
                      || (a3->n128_u64[0] = 0,
                          a3->n128_u64[1] = 0,
                          a3[1].n128_u64[0] = 0,
                          sub_244DCEB10(a1, v16, &v62, v60, &v43, a3),
                          !a3->n128_u32[0]))
                    {
                      a3->n128_u64[0] = 0;
                      a3->n128_u64[1] = 0;
                      a3[1].n128_u64[0] = 0;
                      unint64_t v18 = v17[1].n128_u64[1];
                      if (*(_WORD *)(v18 + 60) != 21169)
                      {
                        int v20 = 175;
                        int v21 = 3;
                        goto LABEL_27;
                      }
                      unsigned int v19 = *(_DWORD *)(v18 + 52);
                      if (v19 <= 4)
                      {
                        int v20 = 176;
                        int v21 = 11;
LABEL_27:
                        a3->n128_u32[0] = v21;
                        a3->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
LABEL_28:
                        a3[1].n128_u32[0] = v20;
                        goto LABEL_6;
                      }
                      *(_DWORD *)(v18 + 52) = v19 - 5;
                      *(_DWORD *)(v18 + 40) += 5;
                      a3->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
                      a3[1].n128_u32[0] = 179;
                      if (!v43)
                      {
                        uint64_t v22 = v46;
                        long long v23 = v39;
                        long long v24 = v40;
                        long long v25 = v42;
                        void v46[2] = v41;
                        v22[3] = v25;
                        _OWORD *v22 = v23;
                        v22[1] = v24;
                        sub_244CCCE18((uint64_t)&v44);
                        goto LABEL_33;
                      }
                      a3->n128_u64[0] = 0;
                      a3->n128_u64[1] = 0;
                      a3[1].n128_u64[0] = 0;
                      sub_244CCBA3C(v17, a3);
                      if (!a3->n128_u32[0])
                      {
LABEL_33:
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_244CCF478((uint64_t)&v44, (uint64_t)a3);
                        if (a3->n128_u32[0]) {
                          goto LABEL_6;
                        }
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_2446DE160((uint64_t)v56, &v59, a3);
                        if (a3->n128_u32[0]) {
                          goto LABEL_6;
                        }
                        if (*(unsigned char *)(a2 + 24))
                        {
                          uint64_t v26 = *(void *)(a1 + 8);
                          sub_24479DD24(a2, (uint64_t)&v37);
                          uint64_t v27 = sub_2446F7170(&v37);
                          char v28 = sub_244D66048(v26, v27, a1, 1u);
                          if ((_BYTE)v37) {
                            (*(void (**)(uint64_t))(*(void *)v38 + 32))(v38);
                          }
                          if (v28)
                          {
                            sub_2447EA4BC(a1 + 16);
                            *(void *)(a1 + 32) = v28;
                            v28[5] = a1 + 16;
                            int v29 = *(_DWORD *)(a2 + 104);
                            uint64_t v30 = sub_244CA1E70(a1 + 16);
                            if (v29) {
                              sub_244D645B4(v30, *(_DWORD *)(a2 + 104));
                            }
                            else {
                              sub_244D64578(v30, 2000);
                            }
                            a3->n128_u64[0] = 0;
                            a3->n128_u64[1] = 0;
                            a3[1].n128_u64[0] = 0;
                            uint64_t v33 = sub_244CA1E70(a1 + 16);
                            __int16 v37 = 1;
                            sub_244D645BC(v33, 0x10000u, 3, (uint64_t *)&v59, &v37, (uint64_t)a3);
                            if (a3->n128_u32[0]) {
                              goto LABEL_6;
                            }
                            int v34 = (uint64_t *)sub_2446F7170((unsigned char *)(a2 + 24));
                            uint64_t v35 = sub_244D879D8(*v34);
                            *(void *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
                            *(unsigned char *)(a1 + 72) = v36;
                            sub_244DCD644(a1, 1);
                            a3->n128_u32[0] = 0;
                            a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                            int v20 = 1263;
                          }
                          else
                          {
                            int v31 = (uint64_t *)sub_2446F7170((unsigned char *)(a2 + 24));
                            uint64_t v32 = sub_244D879D8(*v31);
                            if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 40))(v32))
                            {
                              a3->n128_u32[0] = 11;
                              a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                              int v20 = 1239;
                            }
                            else
                            {
                              a3->n128_u32[0] = 3;
                              a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                              int v20 = 1243;
                            }
                          }
                        }
                        else
                        {
                          a3->n128_u32[0] = 119;
                          a3->n128_u64[1] = (unint64_t)"src/app/ReadClient.cpp";
                          int v20 = 1232;
                        }
                        goto LABEL_28;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_6:
  sub_244CA539C(v57);
  if (v59) {
    sub_244CC8A0C(v59);
  }
}

uint64_t sub_244DD17BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a2 == 22)
  {
    int v4 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "ICD device is inactive, skipping scheduling resubscribe within DefaultResubscribePolicy", buf, 2u);
    }
    double result = sub_244CC4E58(2u);
    if (result) {
      double result = sub_244CC4DE0(0xDu, 2);
    }
    *(_DWORD *)a3 = 22;
    *(void *)(a3 + 8) = "src/app/ReadClient.cpp";
    int v5 = 1271;
    goto LABEL_9;
  }
  uint64_t v6 = result;
  if (*(unsigned char *)(result + 48))
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/app/ReadClient.cpp";
    int v5 = 1274;
LABEL_9:
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
  unsigned int v8 = sub_244DCDA88(result);
  int v9 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(v6 + 72);
    uint64_t v11 = *(void *)(v6 + 64);
    int v12 = *(_DWORD *)(v6 + 328);
    *(_OWORD *)int buf = *(_OWORD *)a2;
    *(void *)int v17 = *(void *)(a2 + 16);
    long long v13 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)int buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v11);
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)int v17 = v11;
    *(_WORD *)&void v17[4] = 1024;
    *(_DWORD *)&v17[6] = v12;
    __int16 v18 = 1024;
    unsigned int v19 = v8;
    __int16 v20 = 2080;
    int v21 = v13;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Will try to resubscribe to %02x:%08X%08X at retry index %u after %ums due to error %s", buf, 0x2Au);
  }
  if (sub_244CC4E58(2u))
  {
    *(_OWORD *)int buf = *(_OWORD *)a2;
    *(void *)int v17 = *(void *)(a2 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xDu, 2);
  }
  v14[0] = 0;
  double result = sub_244DCDB14(v6, v8, v14, *(_DWORD *)a2 == 50, a3);
  if (v14[0]) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  }
  return result;
}

void sub_244DD1A58(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 105))
  {
    int v4 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 134218242;
      uint64_t v8 = a1;
      __int16 v9 = 2080;
      uint64_t v10 = a2;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "ReadClient[%p] triggering resubscribe, reason: %s", buf, 0x16u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    uint64_t v5 = *(void *)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v5 + 72))(v5, sub_244DCDC44, a1);
    *(unsigned char *)(a1 + 105) = 0;
    sub_244DCDC44(v6, a1);
  }
}

uint64_t sub_244DD1B98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 80) == 1 && *(unsigned char *)(result + 48) == 3)
  {
    memset(v4, 0, sizeof(v4));
    double result = sub_244DD0C0C(result, &v5, (uint64_t)v4);
    if (LODWORD(v4[0]))
    {
      char v3 = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 4) = v5;
      char v3 = 1;
    }
    *(unsigned char *)a2 = v3;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void *sub_244DD1C14(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3) {
      sub_244E24C2C();
    }
  }
  return result;
}

uint64_t sub_244DD1C38(void ***a1, uint64_t a2)
{
  if ((void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) == **a1
    && *((unsigned __int8 *)*a1 + 8) == v4
    && *(unsigned char *)(a2 + 57) == 2
    && **a1[1] >= *(void *)(a2 + 136))
  {
    sub_244D85724(a2);
  }
  return 0;
}

double sub_244DD1CD0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = a1 + 64;
  *(void *)(a1 + 72) = a1 + 64;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1;
  *(void *)(a1 + 96) = sub_244DD1D10;
  *(void *)(a1 + 104) = a1 + 104;
  *(void *)(a1 + 112) = a1 + 104;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1;
  *(void *)(a1 + 136) = sub_244DD1EB8;
  return result;
}

void **sub_244DD1D10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v13 = (void *)a1;
  int v5 = sub_244DBE094();
  sub_244DC2B98((uint64_t)v5);
  if (sub_244DC0290((uint64_t)v5, *(unsigned char *)(a1 + 8)))
  {
    *(void *)uint64_t v11 = v5[183];
    uint64_t v12 = sub_244DBF5C0((uint64_t)v5);
    uint64_t v6 = sub_244DD22A0(v5 + 205, (uint64_t)v5, v11, &v12);
    if (v6)
    {
      sub_244CA57C0((uint64_t)v6, a3, a1);
      *(_DWORD *)(a1 + 16) = 0;
      uint64_t v7 = *((void *)sub_244DBE094() + 218);
      if (v7) {
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v7 + 24))(v11);
      }
      return sub_244DD2350(&v13);
    }
    __int16 v9 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "no resource for ReadHandler creation", v11, 2u);
    }
    if (sub_244CC4E58(2u)) {
LABEL_12:
    }
      sub_244CC4DE0(0x23u, 2);
  }
  else
  {
    uint64_t v8 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "no resource for subscription resumption", v11, 2u);
    }
    if (sub_244CC4E58(2u)) {
      goto LABEL_12;
    }
  }
  return sub_244DD2350(&v13);
}

void **sub_244DD1EB8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  int v5 = sub_244DBE094();
  uint64_t v6 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)int buf = *(_OWORD *)a3;
    uint64_t v14 = *(void *)(a3 + 16);
    uint64_t v7 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Failed to establish CASE for subscription-resumption with error '%s'", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)int buf = *(_OWORD *)a3;
    uint64_t v14 = *(void *)(a3 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xDu, 1);
  }
  sub_244DC2B98((uint64_t)v5);
  uint64_t v8 = v5[218];
  if (v8)
  {
    if (*((_DWORD *)a1 + 4) > 0xAu)
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, void, void, void))(*(void *)v8 + 32))(buf, v8, *a1, *((unsigned __int8 *)a1 + 8), *((unsigned int *)a1 + 3));
    }
    else
    {
      __int16 v9 = sub_244DBE094();
      sub_244DBEF18((uint64_t)v9);
      ++*((_DWORD *)a1 + 4);
      (*(void (**)(uint8_t *__return_ptr, uint64_t, void *))(*(void *)v8 + 24))(buf, v8, a1);
    }
  }
  else
  {
    uint64_t v10 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Failed to get subscription resumption storage", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xDu, 1);
    }
  }
  return sub_244DD2350(&v12);
}

void *sub_244DD20E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *a1 = *a3;
  *((unsigned char *)a1 + 8) = *((unsigned char *)a3 + 8);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a3 + 3);
  *((_WORD *)a1 + 10) = *((_WORD *)a3 + 10);
  *((_WORD *)a1 + 11) = *((_WORD *)a3 + 11);
  *((unsigned char *)a1 + 24) = *((unsigned char *)a3 + 24);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
  uint64_t v8 = a3[5];
  if (v8)
  {
    double result = sub_244CB352C((void **)a1 + 4, 12 * v8);
    if (!a1[4])
    {
      *(_DWORD *)a4 = 11;
      *(void *)(a4 + 8) = "src/app/SubscriptionResumptionSessionEstablisher.cpp";
      int v22 = 63;
      goto LABEL_12;
    }
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    a1[5] = v8;
    do
    {
      uint64_t v12 = (uint64_t *)(a3[4] + v10);
      uint64_t v13 = a1[4] + v10;
      uint64_t v14 = *v12;
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v12 + 2);
      *(void *)uint64_t v13 = v14;
      ++v11;
      v10 += 12;
    }
    while (v11 < a1[5]);
  }
  uint64_t v15 = a3[7];
  if (v15)
  {
    double result = sub_244CB352C((void **)a1 + 6, 12 * v15);
    if (!a1[6])
    {
      *(_DWORD *)a4 = 11;
      *(void *)(a4 + 8) = "src/app/SubscriptionResumptionSessionEstablisher.cpp";
      int v22 = 75;
      goto LABEL_12;
    }
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    a1[7] = v15;
    do
    {
      __int16 v18 = (uint64_t *)(a3[6] + v16);
      uint64_t v19 = a1[6] + v16;
      uint64_t v20 = *v18;
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
      *(void *)uint64_t v19 = v20;
      ++v17;
      v16 += 12;
    }
    while (v17 < a1[7]);
  }
  char v21 = *((unsigned char *)a1 + 8);
  uint64_t v23 = *a1;
  char v24 = v21;
  double result = sub_244DBAA8C(a2, &v23, a1 + 8, a1 + 13, 1, 0, 0);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/app/SubscriptionResumptionSessionEstablisher.cpp";
  int v22 = 85;
LABEL_12:
  *(_DWORD *)(a4 + 16) = v22;
  return result;
}

void *sub_244DD22A0(unint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_244CC4D84(0xE0uLL);
  __int16 v9 = v8;
  if (v8)
  {
    sub_244CA57BC(v8, a2 + 40, *a3, *a4);
    uint64_t v10 = sub_244CC4D84(0x18uLL);
    if (v10)
    {
      *uint64_t v10 = v9;
      v10[1] = a1 + 2;
      void v10[2] = 0;
      void v10[2] = a1[4];
      *(void *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      unint64_t v11 = a1[1];
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11) {
        a1[1] = v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void **sub_244DD2350(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    char v3 = (void (*)(void *))v2[15];
    if (v3)
    {
      v2[15] = 0;
      v3(v2 + 13);
    }
    unsigned __int8 v4 = (void (*)(void *))v2[10];
    if (v4)
    {
      v2[10] = 0;
      v4(v2 + 8);
    }
    v2[7] = 0;
    int v5 = (void *)v2[6];
    if (v5)
    {
      j__free(v5);
      v2[6] = 0;
    }
    v2[5] = 0;
    uint64_t v6 = (void *)v2[4];
    if (v6)
    {
      j__free(v6);
      v2[4] = 0;
    }
    j__free(v2);
  }
  return a1;
}

uint64_t sub_244DD23D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26F958AE0;
  *(void *)(a1 + 8) = a2;
  sub_244CCCDE0(a1 + 16);
  sub_244CCCDE0(a1 + 56);
  sub_244CCCDE0(a1 + 96);
  sub_244CCCDE0(a1 + 136);
  sub_244CCCDE0(a1 + 176);
  sub_244CCCDE0(a1 + 216);
  sub_244CCCDE0(a1 + 256);
  sub_244CCCDE0(a1 + 296);
  *(unsigned char *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 368;
  *(void *)(a1 + 376) = a1 + 368;
  sub_244CB62B8(a1 + 384);
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = &unk_26F9536C8;
  *(unsigned char *)(a1 + 472) = 0;
  sub_244CB62B8(a1 + 480);
  *(void *)(a1 + 544) = 1;
  *(void *)(a1 + 552) = &unk_26F958B90;
  *(void *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 582) = 0;
  *(void *)(a1 + 572) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(void *)(a1 + 584) = a1 + 552;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 594) = 0;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(void *)(a1 + 610) = 0;
  return a1;
}

uint64_t sub_244DD2500(uint64_t a1, void *a2, uint64_t a3)
{
  sub_244DD23D4(a1, a3);
  if (*a2)
  {
    *(void *)(a1 + 544) = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
    *(void *)(a1 + 584) = *a2;
  }
  uint64_t v5 = a2[1];
  if (v5) {
    sub_244DD2578(a1, v5);
  }
  return a1;
}

uint64_t sub_244DD2578(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 608)) {
    sub_244E2AA90();
  }
  *(void *)(result + 600) = a2;
  return result;
}

void *sub_244DD259C(void *a1)
{
  *a1 = &unk_26F958AE0;
  sub_244DD25F0(a1);
  sub_244CA539C(a1 + 56);
  sub_244D86300(a1 + 46);
  return a1;
}

void *sub_244DD25F0(void *result)
{
  unsigned int v1 = result + 46;
  uint64_t v2 = (void *)result[47];
  if (v2 != result + 46)
  {
    char v3 = result;
    do
    {
      v2[2] = 0;
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
    while (1)
    {
      double result = (void *)v3[47];
      if (result == v1) {
        break;
      }
      sub_244D7E854(result);
    }
  }
  return result;
}

void sub_244DD2648(void *a1)
{
  sub_244DD259C(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244DD2680(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 613) || !*(void *)(a1 + 600))
  {
    int v3 = 65;
    int v4 = 3;
LABEL_3:
    *(_DWORD *)a2 = v4;
    *(void *)(a2 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a2 + 16) = v3;
    return;
  }
  if (*(unsigned char *)(a1 + 614))
  {
LABEL_18:
    int v4 = 0;
    int v3 = 102;
    goto LABEL_3;
  }
  sub_244DBB7F0(a1 + 384);
  unint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 72))(*(void *)(a1 + 600));
  sub_244CC8F5C(v6, 0x26u, &v9);
  if (v9)
  {
    sub_2447945A0(a1 + 448, &v9, 0);
    sub_244CB6318(a1 + 384, a1 + 448, 0xFFFFFFFF, (uint64_t)v10);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v7 = (_OWORD *)(a1 + 16);
    *(void *)(a2 + 16) = 0;
    sub_244CCEBD8(a1 + 16, (void *)(a1 + 384), (void *)a2);
    int v8 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_15;
    }
    if (*(unsigned char *)(a1 + 615))
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CCEDA0(a1 + 16, (void *)a2);
      if (*(_DWORD *)a2) {
        goto LABEL_13;
      }
    }
    sub_244CCC170(a1 + 16);
    int v8 = 0;
    *(_OWORD *)a2 = *v7;
    *(void *)(a2 + 16) = *(void *)(a1 + 32);
    if (*(_DWORD *)a2) {
      goto LABEL_15;
    }
    int v8 = 1;
    sub_244CCEC50(a1 + 16, 1);
    *(_OWORD *)a2 = *v7;
    *(void *)(a2 + 16) = *(void *)(a1 + 32);
    if (*(_DWORD *)a2)
    {
LABEL_13:
      int v8 = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 614) = 1;
      sub_244DD284C(a1, 1);
    }
  }
  else
  {
    int v8 = 0;
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a2 + 16) = 74;
  }
LABEL_15:
  if (v9) {
    sub_244CC8A0C(v9);
  }
  if (v8) {
    goto LABEL_18;
  }
}

uint64_t sub_244DD284C(uint64_t a1, char a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 608) = a2;
  int v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = *(char *)(a1 + 608);
    if (v4 > 6) {
      uint64_t v5 = "N/A";
    }
    else {
      uint64_t v5 = off_2651A9880[v4];
    }
    *(_DWORD *)int buf = 68157954;
    int v8 = 10;
    __int16 v9 = 2080;
    uint64_t v10 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "Command handler moving to [%10.10s]", buf, 0x12u);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0xDu, 3);
  }
  return result;
}

uint64_t sub_244DD2974(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 608)) {
    sub_244E2AAF8();
  }
  sub_244DD2578(a1, a2);
  sub_244DD5804(v9, a1);
  uint64_t v7 = sub_244DD29F8(a1, a3, a4);
  *(unsigned char *)(a1 + 617) = 1;
  sub_244DD57B0((uint64_t)v9);
  sub_24479DFF4(v9);
  return v7;
}

uint64_t sub_244DD29F8(uint64_t a1, void *a2, int a3)
{
  sub_244CB3988((uint64_t)v17);
  __int16 v18 = 0;
  sub_244CCF15C((uint64_t)v16);
  sub_244CCF15C((uint64_t)v15);
  sub_2446DE1E4((uint64_t)v17, a2);
  sub_244CCF054((uint64_t)v16, (uint64_t)v17, v14);
  if (LODWORD(v14[0])) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(a1 + 600);
  if (!v6) {
    sub_244E2AB60();
  }
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v6 + 40))(v14);
  if (LOBYTE(v14[0])) {
    *(unsigned char *)(a1 + 613) = 1;
  }
  sub_244CCBBC8((int *)v16, (char *)(a1 + 611), v14);
  if (LODWORD(v14[0])
    || (sub_244CCE5E4((int *)v16, (char *)(a1 + 612), v14), LODWORD(v14[0]))
    || (sub_244CCE5F4((int *)v16, (uint64_t)v15, v14), LODWORD(v14[0])))
  {
LABEL_8:
    unsigned __int8 v7 = 0x80;
    goto LABEL_9;
  }
  if (*(unsigned __int8 *)(a1 + 612) == a3)
  {
    void v14[2] = v16[2];
    void v14[3] = v16[3];
    uint64_t v14[4] = v16[4];
    v14[0] = v16[0];
    v14[1] = v16[1];
    sub_244DD3048(a1, (int *)v14, (uint64_t)v12);
    if (v12[0]) {
      goto LABEL_8;
    }
    sub_244CB3988((uint64_t)v12);
    sub_244CCF1AC((uint64_t)v15, (uint64_t)v12);
    unint64_t v11 = 0;
    sub_244CB5F2C((uint64_t)v12, &v11, 0, v14);
    if (LODWORD(v14[0])) {
      goto LABEL_8;
    }
    if (v11 >= 2) {
      *(unsigned char *)(a1 + 615) = 1;
    }
    while (1)
    {
      sub_244CB4E58((uint64_t)v12, v14);
      if (LODWORD(v14[0])) {
        break;
      }
      if (v13 != 256) {
        goto LABEL_8;
      }
      sub_244CCF15C((uint64_t)v14);
      sub_244CCFA34((uint64_t)v14, (uint64_t)v12, v10);
      if (LODWORD(v10[0])) {
        goto LABEL_8;
      }
      if (*(unsigned char *)(a1 + 613)) {
        int v9 = sub_244DD3334(a1, (int *)v14);
      }
      else {
        int v9 = sub_244DD3C08((void **)a1, (int *)v14);
      }
      unsigned __int8 v7 = v9;
      if (v9) {
        goto LABEL_9;
      }
    }
    if (LODWORD(v14[0]) != 33) {
      goto LABEL_8;
    }
    sub_244CCF0D0((uint64_t)v16, v14);
    if (LODWORD(v14[0])) {
      unsigned __int8 v7 = 0x80;
    }
    else {
      unsigned __int8 v7 = 0;
    }
  }
  else
  {
    unsigned __int8 v7 = -55;
  }
LABEL_9:
  if (v18) {
    sub_244CC8A0C(v18);
  }
  return v7;
}

void sub_244DD2C3C(uint64_t a1@<X0>, __int16 *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __int16 v15 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  int v16 = *((_DWORD *)a2 + 1);
  int v17 = a3;
  uint64_t v12 = *(void *)a2;
  int v13 = v8;
  char v14 = 0;
  char v9 = *(unsigned char *)(a1 + 610);
  *(unsigned char *)(a1 + 610) = 1;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  sub_244DD2D48(a1, (uint64_t)&v12, a5);
  unsigned __int32 v10 = a5->n128_u32[0];
  *(unsigned char *)(a1 + 610) = v9;
  if (!v10)
  {
    if (*(unsigned char *)(a1 + 608) == 3 && (uint64_t v11 = *(void *)(a1 + 160)) != 0)
    {
      a5->n128_u64[0] = 0;
      a5->n128_u64[1] = 0;
      a5[1].n128_u64[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v11, 1);
      if (!a5->n128_u32[0]) {
        sub_244DD2E10(a1, 0, a5);
      }
    }
    else
    {
      a5->n128_u32[0] = 3;
      a5->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
      a5[1].n128_u32[0] = 136;
    }
  }
}

void sub_244DD2D48(uint64_t a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 584) + 16))(v6);
  if (v7)
  {
    sub_244DD4D70(a1, (uint64_t)v6, *(unsigned __int8 *)(a2 + 12), a3);
  }
  else
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
    a3[1].n128_u32[0] = 623;
  }
}

uint64_t sub_244DD2DF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 608) == 3) {
    return *(void *)(a1 + 160);
  }
  else {
    return 0;
  }
}

void sub_244DD2E10(uint64_t a1@<X0>, int a2@<W1>, __n128 *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 608) != 3)
  {
    int v6 = 681;
    int v5 = 3;
    goto LABEL_10;
  }
  if (!a2
    || (a3->n128_u64[0] = 0,
        a3->n128_u64[1] = 0,
        a3[1].n128_u64[0] = 0,
        sub_244CB7708(*(void *)(a1 + 160), *(_DWORD *)(a1 + 352), (uint64_t)a3),
        !a3->n128_u32[0]))
  {
    if (!*(unsigned char *)(a1 + 594)
      || (a3->n128_u64[0] = 0, a3->n128_u64[1] = 0, a3[1].n128_u64[0] = 0, sub_244CCD088(), !a3->n128_u32[0]))
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCBA3C((__n128 *)(a1 + 136), a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_244CCBA3C((__n128 *)(a1 + 96), a3);
        if (!a3->n128_u32[0])
        {
          sub_244DD284C(a1, 4);
          int v5 = 0;
          int v6 = 696;
LABEL_10:
          a3->n128_u32[0] = v5;
          a3->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
          a3[1].n128_u32[0] = v6;
        }
      }
    }
  }
}

void sub_244DD2F04(__n128 *a1@<X0>, __int16 *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  if (a1[38].n128_u8[5] || !a1[37].n128_u64[1])
  {
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
    int v6 = 145;
LABEL_3:
    a5[1].n128_u32[0] = v6;
    return;
  }
  a1[38].n128_u8[8] = 0;
  __n128 v13 = 0uLL;
  unint64_t v14 = 0;
  sub_244DD2C3C((uint64_t)a1, a2, a3, a4, &v13);
  if (!v13.n128_u32[0])
  {
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.h";
    int v6 = 304;
    goto LABEL_3;
  }
  sub_244DD5030((uint64_t)a1, (uint64_t)&v11);
  if (v11.n128_u32[0] || a1[38].n128_u8[0] != 4 || v13.n128_u32[0] != 11) {
    goto LABEL_8;
  }
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  sub_244DD4F3C(a1, a5);
  if (!a5->n128_u32[0])
  {
    sub_244DD2C3C((uint64_t)a1, a2, a3, a4, &v11);
    __n128 v13 = v11;
    unint64_t v14 = v12;
    if (v11.n128_u32[0]) {
      sub_244DD5030((uint64_t)a1, (uint64_t)&v11);
    }
LABEL_8:
    *a5 = v13;
    a5[1].n128_u64[0] = v14;
  }
}

void sub_244DD3048(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v30 = 0;
  sub_244CCF15C((uint64_t)v29);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CCE5F4(a2, (uint64_t)v29, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CB3988((uint64_t)v27);
    sub_244CCF1AC((uint64_t)v29, (uint64_t)v27);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB5F2C((uint64_t)v27, &v30, 0, (void *)a3);
    if (!*(_DWORD *)a3)
    {
      unint64_t v6 = v30;
      if (*(unsigned char *)(a1 + 613))
      {
        if (v30 == 1)
        {
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
          int v7 = 168;
        }
        else
        {
          *(_DWORD *)a3 = 47;
          *(void *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
          int v7 = 167;
        }
        goto LABEL_9;
      }
      if (v30 > *(void *)(a1 + 544))
      {
        *(_DWORD *)a3 = 47;
        *(void *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
        int v7 = 174;
LABEL_9:
        *(_DWORD *)(a3 + 16) = v7;
        return;
      }
      sub_244CB4E58((uint64_t)v27, v24);
      for (int i = v24[0]; !LODWORD(v24[0]); int i = v24[0])
      {
        if (v28 != 256)
        {
          *(_DWORD *)a3 = 47;
          *(void *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
          int v7 = 181;
          goto LABEL_9;
        }
        sub_244CCF15C((uint64_t)v24);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCFA34((uint64_t)v24, (uint64_t)v27, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        sub_244CCF15C((uint64_t)v23);
        v21[0] = 0;
        uint64_t v22 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = 0;
        sub_244CCCCBC((int *)v24, (uint64_t)v23, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CCD0B8(v23, (uint64_t)v21, (void *)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        LOBYTE(v19) = 0;
        char v20 = 0;
        __int16 v18 = 0;
        sub_244CCBCC0((int *)v24, &v18, v17);
        if (LODWORD(v17[0]))
        {
          if (LODWORD(v17[0]) != 33)
          {
            uint64_t v15 = v17[1];
            uint64_t v16 = v17[2];
            *(void *)a3 = v17[0];
            *(void *)(a3 + 8) = v15;
            *(void *)(a3 + 16) = v16;
            return;
          }
          if (v6 >= 2)
          {
            *(_DWORD *)a3 = 47;
            *(void *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
            int v7 = 199;
            goto LABEL_9;
          }
        }
        else
        {
          __int16 v19 = v18;
          char v20 = 1;
        }
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        (*(void (**)(void, _WORD *, __int16 *))(**(void **)(a1 + 584) + 32))(*(void *)(a1 + 584), v21, &v19);
        if (*(_DWORD *)a3) {
          return;
        }
        sub_244CB4E58((uint64_t)v27, v24);
      }
      int v9 = HIDWORD(v24[0]);
      unsigned __int32 v10 = (const char *)v24[1];
      int v11 = v25;
      int v12 = v26;
      BOOL v13 = i == 33;
      if (i == 33)
      {
        int i = 0;
        unsigned __int32 v10 = "src/app/CommandHandlerImpl.cpp";
      }
      *(_DWORD *)a3 = i;
      *(_DWORD *)(a3 + 4) = v9;
      *(void *)(a3 + 8) = v10;
      if (v13) {
        int v14 = 214;
      }
      else {
        int v14 = v11;
      }
      *(_DWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 20) = v12;
      if (v13) {
        sub_244CCF0D0((uint64_t)a2, (void *)a3);
      }
    }
  }
}

uint64_t sub_244DD3334(uint64_t a1, int *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  long long v36 = xmmword_2651A986C;
  int v37 = 0;
  sub_244CCF15C((uint64_t)v32);
  sub_244CB3988((uint64_t)v30);
  uint64_t v29 = 0;
  int v28 = -65536;
  uint64_t v4 = sub_244DAC8EC();
  sub_244CCCCBC(a2, (uint64_t)v32, buf);
  if (*(_DWORD *)buf) {
    return 128;
  }
  sub_244CCD138(v32, (int *)&v29 + 1, &v29, buf);
  if (*(_DWORD *)buf) {
    return 128;
  }
  uint64_t v6 = *(void *)(a1 + 600);
  if (!v6) {
    sub_244E2AC00();
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v6 + 40))(buf);
  int v7 = *(unsigned __int16 *)sub_2446D1880(buf);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  int v9 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIWORD(HIDWORD(v29));
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = WORD2(v29);
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&unsigned char buf[22] = WORD1(v29);
    *(_WORD *)&unsigned char buf[26] = 1024;
    *(_DWORD *)&uint8_t buf[28] = (unsigned __int16)v29;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "Received group command for Group=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", buf, 0x20u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  sub_244CCCFE0(a2, (uint64_t)v30, buf);
  if (*(_DWORD *)buf)
  {
    if (*(_DWORD *)buf != 33) {
      return 1;
    }
    unsigned __int32 v10 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIWORD(HIDWORD(v29));
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = WORD2(v29);
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&unsigned char buf[22] = WORD1(v29);
      *(_WORD *)&unsigned char buf[26] = 1024;
      *(_DWORD *)&uint8_t buf[28] = (unsigned __int16)v29;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "Received command without data for Group=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", buf, 0x20u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    sub_244CB39B8((uint64_t)v30, (uint64_t)&unk_244EC3BE0, 2uLL);
    sub_244CB4E58((uint64_t)v30, buf);
    long long v36 = *(_OWORD *)&buf[4];
    int v37 = *(_DWORD *)&buf[20];
    if (*(_DWORD *)buf) {
      return 128;
    }
  }
  if ((sub_24484AE30(SHIDWORD(v29), v29) & 1) == 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v4 + 120))(v4, v8, 0);
    if (v11)
    {
      uint64_t v12 = v11;
      if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v11 + 24))(v11, &v28))
      {
        do
        {
          if (v7 == (unsigned __int16)v28)
          {
            BOOL v13 = sub_244CC8484(0xDu, "DataManagement");
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 67110144;
              *(_DWORD *)&uint8_t buf[4] = HIWORD(v28);
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = HIWORD(HIDWORD(v29));
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = WORD2(v29);
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&unsigned char buf[22] = WORD1(v29);
              *(_WORD *)&unsigned char buf[26] = 1024;
              *(_DWORD *)&uint8_t buf[28] = (unsigned __int16)v29;
              _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_INFO, "Processing group command for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", buf, 0x20u);
            }
            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(0xDu, 3);
            }
            LOWORD(v26) = HIWORD(v28);
            HIDWORD(v26) = HIDWORD(v29);
            int v27 = v29;
            *(_DWORD *)int buf = 0;
            uint8_t buf[8] = 0;
            uint8_t buf[40] = 0;
            *(void *)&long long v34 = v26;
            *((void *)&v34 + 1) = v29;
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 88))(v25, a1);
            *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)v25;
            if (buf[40])
            {
              *(_OWORD *)&buf[21] = *(_OWORD *)&v25[13];
            }
            else
            {
              *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)&v25[16];
              uint8_t buf[40] = 1;
            }
            int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
            HIDWORD(v34) = HIDWORD(v34) & 0xFFFFFFFE | v14;
            if (!(*(unsigned int (**)(void, unsigned char *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), buf))
            {
              uint64_t v15 = sub_244DD6398();
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 88))(buf, a1);
              (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t *, unsigned char *))(*(void *)v15 + 24))(v25, v15, &v26, buf);
              int v16 = *(_DWORD *)v25;
              long long v36 = *(_OWORD *)&v25[4];
              int v37 = *(_DWORD *)&v25[20];
              if (*(_DWORD *)v25)
              {
                int v17 = sub_244CC8484(0xDu, "DataManagement");
                if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                {
                  int v18 = HIWORD(v28);
                  int v19 = HIWORD(HIDWORD(v29));
                  int v20 = WORD2(v29);
                  unsigned int v23 = WORD1(v29);
                  int v24 = (unsigned __int16)v29;
                  *(_DWORD *)int buf = v16;
                  *(_OWORD *)&uint8_t buf[4] = v36;
                  *(_DWORD *)&buf[20] = v37;
                  char v21 = sub_244CB7B34((const char **)buf, 1);
                  *(_DWORD *)int buf = 67110402;
                  *(_DWORD *)&uint8_t buf[4] = v18;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v19;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&uint8_t buf[16] = v20;
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&unsigned char buf[22] = v23;
                  *(_WORD *)&unsigned char buf[26] = 1024;
                  *(_DWORD *)&uint8_t buf[28] = v24;
                  *(_WORD *)&unsigned char buf[32] = 2080;
                  *(void *)&buf[34] = v21;
                  _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Error when calling PreCommandReceived for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X : %s", buf, 0x2Au);
                }
                if (sub_244CC4E58(1u))
                {
                  *(_DWORD *)int buf = v16;
                  *(_OWORD *)&uint8_t buf[4] = v36;
                  *(_DWORD *)&buf[20] = v37;
                  sub_244CB7B34((const char **)buf, 1);
                  sub_244CC4DE0(0xDu, 1);
                }
              }
              else
              {
                *(_OWORD *)int buf = v30[0];
                *(_OWORD *)&uint8_t buf[16] = v30[1];
                uint64_t v35 = v31;
                *(_OWORD *)&unsigned char buf[32] = v30[2];
                long long v34 = v30[3];
                (*(void (**)(void, uint64_t, uint64_t *, unsigned char *))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a1, &v26, buf);
                uint64_t v22 = sub_244DD6398();
                (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 88))(v25, a1);
                (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v22 + 32))(v22, &v26, v25);
              }
            }
          }
        }
        while (((*(uint64_t (**)(uint64_t, int *))(*(void *)v12 + 24))(v12, &v28) & 1) != 0);
      }
      (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_244DD3C08(void **a1, int *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_244CCF15C((uint64_t)v15);
  *(_WORD *)int v14 = 0;
  *(void *)&uint64_t v14[4] = 0;
  sub_244CB3988((uint64_t)v13);
  sub_244CCCCBC(a2, (uint64_t)v15, &buf);
  if (!buf)
  {
    sub_244CCD0B8(v15, (uint64_t)v14, &buf);
    if (!buf)
    {
      LODWORD(buf) = 0;
      LOBYTE(v18) = 0;
      char v24 = 0;
      uint64_t v25 = *(void *)v14;
      int v26 = *(_DWORD *)&v14[8];
      int v27 = 0;
      ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v18, a1);
      char v24 = 1;
      int v27 = ((uint64_t (*)(void **))(*a1)[9])(a1);
      int v5 = (*(uint64_t (**)(void *, uint64_t *))(*a1[1] + 24))(a1[1], &buf);
      if (v5)
      {
        v16[0] = v5;
        v16[1] = 0;
        ((void (*)(void *__return_ptr, void **, unsigned char *, unsigned char *, void))(*a1)[2])(v12, a1, v14, v16, 0);
        int v6 = v12[0];
      }
      else
      {
        sub_244CCCFE0(a2, (uint64_t)v13, &buf);
        int v7 = buf;
        if (buf == 33)
        {
          uint64_t v8 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 67110144;
            HIDWORD(buf) = *(unsigned __int16 *)v14;
            LOWORD(v18) = 1024;
            *(_DWORD *)((char *)&v18 + 2) = HIWORD(*(_DWORD *)&v14[4]);
            HIWORD(v18) = 1024;
            int v19 = *(unsigned __int16 *)&v14[4];
            __int16 v20 = 1024;
            int v21 = HIWORD(*(_DWORD *)&v14[8]);
            __int16 v22 = 1024;
            int v23 = *(unsigned __int16 *)&v14[8];
            _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Received command without data for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
          }
          if (sub_244CC4E58(3u)) {
            sub_244CC4DE0(0xDu, 3);
          }
          sub_244CB39B8((uint64_t)v13, (uint64_t)&unk_244EC3BE0, 2uLL);
          sub_244CB4E58((uint64_t)v13, &buf);
          int v7 = buf;
        }
        if (!v7)
        {
          int v9 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 67110144;
            HIDWORD(buf) = *(unsigned __int16 *)v14;
            LOWORD(v18) = 1024;
            *(_DWORD *)((char *)&v18 + 2) = HIWORD(*(_DWORD *)&v14[4]);
            HIWORD(v18) = 1024;
            int v19 = *(unsigned __int16 *)&v14[4];
            __int16 v20 = 1024;
            int v21 = HIWORD(*(_DWORD *)&v14[8]);
            __int16 v22 = 1024;
            int v23 = *(unsigned __int16 *)&v14[8];
            _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "Received command for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
          }
          if (sub_244CC4E58(3u)) {
            sub_244CC4DE0(0xDu, 3);
          }
          uint64_t v10 = sub_244DD6398();
          ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&buf, a1);
          (*(void (**)(void *__return_ptr, uint64_t, unsigned char *, uint64_t *))(*(void *)v10 + 24))(v12, v10, v14, &buf);
          if (!LODWORD(v12[0]))
          {
            (*(void (**)(void *, void **, unsigned char *, unsigned char *))(*a1[1] + 32))(a1[1], a1, v14, v13);
            uint64_t v11 = sub_244DD6398();
            ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&buf, a1);
            (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v11 + 32))(v11, v14, &buf);
            return 0;
          }
        }
        LOWORD(v12[0]) = 133;
        ((void (*)(uint64_t *__return_ptr, void **, unsigned char *, void *, void))(*a1)[2])(&buf, a1, v14, v12, 0);
        int v6 = buf;
      }
      return v6 != 0;
    }
  }
  return 128;
}

uint64_t sub_244DD40F8(uint64_t a1)
{
  *(unsigned char *)(a1 + 611) = 0;
  *(void *)(a1 + 600) = 0;
  sub_244DD284C(a1, 6);
  if (*(void *)(a1 + 360)) {
    sub_244E2ACA0((uint64_t *)(a1 + 360));
  }
  sub_244DD25F0((void *)a1);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v3();
  }
  return result;
}

void *sub_244DD4188(uint64_t a1, void *a2)
{
  return sub_244D7E808((void *)(a1 + 368), a2);
}

void *sub_244DD4190(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 368);
  int v3 = (void *)(a1 + 368);
  do
    int v3 = (void *)v3[1];
  while (v3 != a2 && v3 != v2);
  if (v3 == v2) {
    sub_244E2AD3C();
  }

  return sub_244D7E854(a2);
}

void *sub_244DD41DC(uint64_t a1, void *a2)
{
  return sub_244D7E808((void *)(a1 + 368), a2);
}

void *sub_244DD41F0(__n128 *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  --a1[22].n128_u64[1];
  uint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unint64_t v5 = a1[22].n128_u64[1];
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "Decreasing reference count for CommandHandlerImpl, remaining %u", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  uint64_t result = sub_244DD4190((uint64_t)a1, a2);
  if (!a1[22].n128_u64[1])
  {
    if (a1[37].n128_u64[1])
    {
      if (a1[38].n128_u8[5]) {
        return (void *)sub_244DD40F8((uint64_t)a1);
      }
      __n128 v11 = 0uLL;
      uint64_t v12 = 0;
      sub_244DD51A8(a1, 0, &v11);
      if (!v11.n128_u32[0]) {
        return (void *)sub_244DD40F8((uint64_t)a1);
      }
      int v7 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(__n128 *)uint64_t buf = v11;
        uint64_t v14 = v12;
        uint64_t v8 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Failed to finalize command response: %s", buf, 0xCu);
      }
      if (!sub_244CC4E58(1u)) {
        return (void *)sub_244DD40F8((uint64_t)a1);
      }
      *(__n128 *)uint64_t buf = v11;
      uint64_t v14 = v12;
      sub_244CB7B34((const char **)buf, 1);
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v10 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Skipping command response: response sender is null", buf, 2u);
      }
      if (!sub_244CC4E58(2u)) {
        return (void *)sub_244DD40F8((uint64_t)a1);
      }
      uint64_t v9 = 2;
    }
    sub_244CC4DE0(0xDu, v9);
    return (void *)sub_244DD40F8((uint64_t)a1);
  }
  return result;
}

void sub_244DD4440(uint64_t a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 613) || !*(void *)(a1 + 600))
  {
    a3->n128_u32[0] = 0;
    a3->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
    a3[1].n128_u32[0] = 552;
  }
  else
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_244DD4520(a1, a3);
    if (!a3->n128_u32[0])
    {
      uint64_t v6 = sub_244CCCD88(a1 + 216);
      *a3 = *(__n128 *)(a1 + 216);
      a3[1].n128_u64[0] = *(void *)(a1 + 232);
      if (!a3->n128_u32[0])
      {
        int v7 = (__n128 *)v6;
        sub_244CCF63C(v6, a2);
        *a3 = *v7;
        a3[1].n128_u64[0] = v7[1].n128_u64[0];
        if (!a3->n128_u32[0])
        {
          sub_244DD46D0((__n128 *)a1, a3);
        }
      }
    }
  }
}

void sub_244DD4520(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244DD2680(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 608);
    if (v4 != 1)
    {
      if (v4 != 4)
      {
        *(_DWORD *)a2 = 3;
        a2[1] = "src/app/CommandHandlerImpl.cpp";
        int v14 = 705;
LABEL_16:
        *((_DWORD *)a2 + 4) = v14;
        return;
      }
      if (!*(_DWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 16))
      {
        unint64_t v5 = *(long long **)(a1 + 40);
        long long v6 = v5[3];
        long long v8 = *v5;
        long long v7 = v5[1];
        *(_OWORD *)(a1 + 512) = v5[2];
        *(_OWORD *)(a1 + 528) = v6;
        *(_OWORD *)(a1 + 480) = v8;
        *(_OWORD *)(a1 + 496) = v7;
        *(unsigned char *)(a1 + 609) = 4;
        *(unsigned char *)(a1 + 616) = 1;
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 584) + 16))(&v15);
    if (!v18)
    {
      int v14 = 712;
      int v13 = 3;
      goto LABEL_15;
    }
    *(_WORD *)(a1 + 592) = v16;
    *(unsigned char *)(a1 + 594) = v17;
    sub_244DD284C(a1, 2);
    uint64_t v9 = sub_244CCCAF8(a1 + 56);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
    a2[2] = *(void *)(a1 + 72);
    if (!*(_DWORD *)a2)
    {
      uint64_t v10 = sub_244CCE9D0(v9);
      *(_OWORD *)a2 = *(_OWORD *)v10;
      a2[2] = *(void *)(v10 + 16);
      if (!*(_DWORD *)a2)
      {
        uint64_t v11 = v10;
        uint64_t v12 = sub_244CCCD30(v10);
        *(_OWORD *)a2 = *(_OWORD *)v11;
        a2[2] = *(void *)(v11 + 16);
        if (!*(_DWORD *)a2)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          sub_244CCD3DC(v12, (uint64_t)a2);
          if (!*(_DWORD *)a2)
          {
            sub_244DD284C(a1, 3);
            int v13 = 0;
            int v14 = 725;
LABEL_15:
            *(_DWORD *)a2 = v13;
            a2[1] = "src/app/CommandHandlerImpl.cpp";
            goto LABEL_16;
          }
        }
      }
    }
  }
}

void sub_244DD46D0(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  if (a1[38].n128_u8[0] != 3)
  {
    int v6 = 730;
    int v5 = 3;
    goto LABEL_8;
  }
  int v4 = (__n128 *)((char *)a1 + 216);
  if (!a1[37].n128_u8[2]
    || (a2->n128_u64[0] = 0, a2->n128_u64[1] = 0, a2[1].n128_u64[0] = 0, sub_244CCD088(), !a2->n128_u32[0]))
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    sub_244CCBA3C(v4, a2);
    if (!a2->n128_u32[0])
    {
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      sub_244CCBA3C(a1 + 6, a2);
      if (!a2->n128_u32[0])
      {
        sub_244DD284C((uint64_t)a1, 4);
        int v5 = 0;
        int v6 = 741;
LABEL_8:
        a2->n128_u32[0] = v5;
        a2->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
        a2[1].n128_u32[0] = v6;
      }
    }
  }
}

void sub_244DD47A0(__n128 *a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  a1[38].n128_u8[8] = 0;
  __n128 v9 = 0uLL;
  unint64_t v10 = 0;
  sub_244DD4440((uint64_t)a1, a2, &v9);
  if (v9.n128_u32[0])
  {
    sub_244DD5030((uint64_t)a1, (uint64_t)&v7);
    if (!v7.n128_u32[0] && a1[38].n128_u8[0] == 4 && v9.n128_u32[0] == 11)
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244DD4F3C(a1, a3);
      if (a3->n128_u32[0]) {
        return;
      }
      sub_244DD4440((uint64_t)a1, a2, &v7);
      __n128 v9 = v7;
      unint64_t v10 = v8;
      if (v7.n128_u32[0]) {
        sub_244DD5030((uint64_t)a1, (uint64_t)&v7);
      }
    }
    *a3 = v9;
    a3[1].n128_u64[0] = v10;
  }
  else
  {
    a3->n128_u32[0] = 0;
    a3->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.h";
    a3[1].n128_u32[0] = 304;
  }
}

uint64_t sub_244DD48A0(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  uint64_t result = (uint64_t)(*(void *(**)(long long *__return_ptr))(*(void *)a1 + 16))(&v4);
  if (v4)
  {
    uint64_t v2 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)uint64_t buf = v4;
      uint64_t v7 = v5;
      int v3 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "Failed to add command status: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      *(_OWORD *)uint64_t buf = v4;
      uint64_t v7 = v5;
      sub_244CB7B34((const char **)buf, 1);
      uint64_t result = sub_244CC4DE0(0xDu, 1);
    }
    if (v4 != 11) {
      sub_244E2ADDC();
    }
  }
  return result;
}

void sub_244DD49E8(__n128 *a1@<X0>, unsigned __int16 *a2@<X1>, uint8_t *a3@<X2>, const char *a4@<X3>, __n128 *a5@<X8>)
{
  *(void *)((char *)&v47[1] + 6) = *MEMORY[0x263EF8340];
  uint8_t v9 = *a3;
  if (*a3)
  {
    unint64_t v10 = "no additional context";
    if (a4) {
      unint64_t v10 = a4;
    }
    unint64_t v30 = v10;
    int v11 = a3[1];
    uint64_t v12 = sub_244CC8484(0xDu, "DataManagement");
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v13)
      {
        int v14 = *a2;
        int v15 = HIWORD(*((_DWORD *)a2 + 1));
        int v16 = (unsigned __int16)*((_DWORD *)a2 + 1);
        int v27 = HIWORD(*((_DWORD *)a2 + 2));
        int v28 = (unsigned __int16)*((_DWORD *)a2 + 2);
        int v17 = *a3;
        char v18 = sub_244CCFFC4(v17);
        if (*a3 >= 2u)
        {
          v31[0] = 0;
        }
        else
        {
          v31[0] = a3[1];
          if (v31[0]) {
            v31[1] = a3[2];
          }
        }
        int v24 = *sub_2446F9190(v31);
        *(_DWORD *)uint64_t buf = 67111170;
        int v33 = v14;
        __int16 v34 = 1024;
        int v35 = v15;
        __int16 v36 = 1024;
        int v37 = v16;
        __int16 v38 = 1024;
        int v39 = v27;
        __int16 v40 = 1024;
        int v41 = v28;
        __int16 v42 = 1024;
        int v43 = v17;
        __int16 v44 = 2080;
        unint64_t v45 = v18;
        __int16 v46 = 1024;
        LODWORD(v47[0]) = v24;
        WORD2(v47[0]) = 2080;
        *(void *)((char *)v47 + 6) = v30;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X status 0x%02x (%s) ClusterSpecificCode=%u (%s)", buf, 0x40u);
      }
      if (sub_244CC4E58(1u))
      {
        sub_244CCFFC4(*a3);
        if (*a3 >= 2u)
        {
          buf[0] = 0;
        }
        else
        {
          buf[0] = a3[1];
          if (buf[0]) {
            buf[1] = a3[2];
          }
        }
        sub_2446F9190(buf);
        goto LABEL_22;
      }
    }
    else
    {
      if (v13)
      {
        int v19 = *a2;
        int v20 = HIWORD(*((_DWORD *)a2 + 1));
        int v21 = (unsigned __int16)*((_DWORD *)a2 + 1);
        int v22 = HIWORD(*((_DWORD *)a2 + 2));
        int v29 = (unsigned __int16)*((_DWORD *)a2 + 2);
        int v23 = *a3;
        *(_DWORD *)uint64_t buf = 67110914;
        int v33 = v19;
        __int16 v34 = 1024;
        int v35 = v20;
        __int16 v36 = 1024;
        int v37 = v21;
        __int16 v38 = 1024;
        int v39 = v22;
        __int16 v40 = 1024;
        int v41 = v29;
        __int16 v42 = 1024;
        int v43 = v23;
        __int16 v44 = 2080;
        unint64_t v45 = sub_244CCFFC4(v23);
        __int16 v46 = 2080;
        v47[0] = v30;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X status 0x%02x (%s) (%s)", buf, 0x3Au);
      }
      if (sub_244CC4E58(1u))
      {
        sub_244CCFFC4(*a3);
LABEL_22:
        sub_244CC4DE0(0xDu, 1);
      }
    }
    buf[0] = *a3;
    uint8_t v9 = buf[0];
    buf[1] = 0;
    if (buf[0] > 1u) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  *(_WORD *)uint64_t buf = 0;
LABEL_24:
  uint8_t v25 = a3[1];
  if (v25)
  {
    uint8_t v26 = a3[2];
    buf[0] = v9;
    buf[1] = v25;
    buf[2] = v26;
  }
LABEL_26:
  sub_244DD47A0(a1, (uint64_t)buf, a5);
}

void sub_244DD4D70(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  sub_244DD2680(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    if (*(unsigned char *)(a1 + 610)
      || *(unsigned char *)(a1 + 608) != 4
      || (a4->n128_u64[0] = 0,
          a4->n128_u64[1] = 0,
          a4[1].n128_u64[0] = 0,
          sub_244DD4F3C((__n128 *)a1, a4),
          !a4->n128_u32[0]))
    {
      int v8 = *(unsigned __int8 *)(a1 + 608);
      if (v8 != 4 && v8 != 1) {
        goto LABEL_22;
      }
      if (!*(_DWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 16))
      {
        unint64_t v10 = *(long long **)(a1 + 40);
        long long v11 = v10[3];
        long long v13 = *v10;
        long long v12 = v10[1];
        *(_OWORD *)(a1 + 512) = v10[2];
        *(_OWORD *)(a1 + 528) = v11;
        *(_OWORD *)(a1 + 480) = v13;
        *(_OWORD *)(a1 + 496) = v12;
        *(unsigned char *)(a1 + 609) = v8;
        *(unsigned char *)(a1 + 616) = 1;
      }
      if (v8 != 4 && v8 != 1)
      {
LABEL_22:
        int v20 = 651;
        int v19 = 3;
        goto LABEL_23;
      }
      __int16 v14 = *(_WORD *)(a2 + 12);
      *(unsigned char *)(a1 + 594) = *(unsigned char *)(a2 + 14);
      *(_WORD *)(a1 + 592) = v14;
      sub_244DD284C(a1, 2);
      uint64_t v15 = sub_244CCCAF8(a1 + 56);
      *a4 = *(__n128 *)(a1 + 56);
      a4[1].n128_u64[0] = *(void *)(a1 + 72);
      if (!a4->n128_u32[0])
      {
        uint64_t v16 = sub_244CCCA48(v15);
        *a4 = *(__n128 *)v16;
        a4[1].n128_u64[0] = *(void *)(v16 + 16);
        if (!a4->n128_u32[0])
        {
          uint64_t v17 = v16;
          uint64_t v18 = sub_244CCD034(v16);
          *a4 = *(__n128 *)v17;
          a4[1].n128_u64[0] = *(void *)(v17 + 16);
          if (!a4->n128_u32[0])
          {
            a4->n128_u64[0] = 0;
            a4->n128_u64[1] = 0;
            a4[1].n128_u64[0] = 0;
            sub_244CCD3DC(v18, (uint64_t)a4);
            if (!a4->n128_u32[0])
            {
              if (!a3
                || (a4->n128_u64[0] = 0,
                    a4->n128_u64[1] = 0,
                    a4[1].n128_u64[0] = 0,
                    sub_244CB7594(*(void **)(v17 + 24), 1, 21, (_DWORD *)(a1 + 352), (uint64_t)a4),
                    !a4->n128_u32[0]))
              {
                sub_244DD284C(a1, 3);
                int v19 = 0;
                int v20 = 673;
LABEL_23:
                a4->n128_u32[0] = v19;
                a4->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
                a4[1].n128_u32[0] = v20;
              }
            }
          }
        }
      }
    }
  }
}

void sub_244DD4F3C(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  sub_244DD51A8(a1, 1, a2);
  if (!a2->n128_u32[0])
  {
    if (a1[38].n128_u8[6]) {
      sub_244E2AF1C();
    }
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    sub_244DD2680((uint64_t)a1, (uint64_t)a2);
    if (a2->n128_u32[0])
    {
      unint64_t v4 = a1[37].n128_u64[1];
      if (!v4) {
        sub_244E2AE7C();
      }
      uint64_t v5 = *(void (**)(void))(*(void *)v4 + 64);
      v5();
    }
  }
}

__n128 sub_244DD4FE8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 608);
  BOOL v2 = v1 == 4 || v1 == 1;
  if (v2 && !*(_DWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 16))
  {
    int v3 = *(long long **)(a1 + 40);
    __n128 result = (__n128)v3[2];
    long long v5 = v3[3];
    long long v7 = *v3;
    long long v6 = v3[1];
    *(__n128 *)(a1 + 512) = result;
    *(_OWORD *)(a1 + 528) = v5;
    *(_OWORD *)(a1 + 480) = v7;
    *(_OWORD *)(a1 + 496) = v6;
    *(unsigned char *)(a1 + 609) = v1;
    *(unsigned char *)(a1 + 616) = 1;
  }
  return result;
}

uint64_t sub_244DD5030@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(result + 616))
  {
    int v10 = 756;
LABEL_10:
    int v9 = 3;
    goto LABEL_11;
  }
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 608) & 0xFE) != 2)
  {
    int v10 = 757;
    goto LABEL_10;
  }
  unint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long v11 = 0;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "Rolling back response", v11, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  sub_244CCCE18(v3 + 56);
  long long v5 = *(_OWORD **)(v3 + 40);
  long long v6 = *(_OWORD *)(v3 + 480);
  long long v7 = *(_OWORD *)(v3 + 496);
  long long v8 = *(_OWORD *)(v3 + 528);
  void v5[2] = *(_OWORD *)(v3 + 512);
  void v5[3] = v8;
  *long long v5 = v6;
  v5[1] = v7;
  sub_244CCCE18(v3 + 16);
  __n128 result = sub_244DD284C(v3, *(unsigned char *)(v3 + 609));
  int v9 = 0;
  *(unsigned char *)(v3 + 616) = 0;
  int v10 = 765;
LABEL_11:
  *(_DWORD *)a2 = v9;
  *(void *)(a2 + 8) = "src/app/CommandHandlerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v10;
  return result;
}

uint64_t sub_244DD514C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 617)) {
    sub_244E2B05C();
  }
  uint64_t v1 = *(void *)(a1 + 600);
  if (!v1) {
    sub_244E2AFBC();
  }
  BOOL v2 = *(uint64_t (**)(void))(*(void *)v1 + 32);

  return v2();
}

void sub_244DD51A8(__n128 *a1@<X0>, int a2@<W1>, __n128 *a3@<X8>)
{
  int v9 = 0;
  if (a1[38].n128_u8[0] != 4)
  {
    int v8 = 808;
    int v7 = 3;
LABEL_10:
    a3->n128_u32[0] = v7;
    a3->n128_u64[1] = (unint64_t)"src/app/CommandHandlerImpl.cpp";
    a3[1].n128_u32[0] = v8;
    goto LABEL_11;
  }
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_244CCEAA8((uint64_t)&a1[3].n128_i64[1], a3);
  if (!a3->n128_u32[0])
  {
    if (!a2 || (sub_244CCECC0((uint64_t)&a1[1]), *a3 = a1[1], a3[1].n128_u64[0] = a1[2].n128_u64[0], !a3->n128_u32[0]))
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_244CCEE00(a1 + 1, a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_2446DE160((uint64_t)&a1[24], &v9, a3);
        if (!a3->n128_u32[0])
        {
          unint64_t v6 = a1[37].n128_u64[1];
          if (!v6) {
            sub_244E2B0FC();
          }
          (*(void (**)(unint64_t, _WORD **))(*(void *)v6 + 56))(v6, &v9);
          int v7 = 0;
          a1[38].n128_u8[6] = 0;
          a1[38].n128_u8[8] = 0;
          int v8 = 823;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_11:
  if (v9) {
    sub_244CC8A0C(v9);
  }
}

const char *sub_244DD52E4(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 608);
  if (v1 > 6) {
    return "N/A";
  }
  else {
    return off_2651A9880[v1];
  }
}

uint64_t sub_244DD530C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 600);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t sub_244DD533C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 617)) {
    sub_244E2B23C();
  }
  uint64_t v1 = *(void *)(a1 + 600);
  if (!v1) {
    sub_244E2B19C();
  }
  BOOL v2 = *(uint64_t (**)(void))(*(void *)v1 + 24);

  return v2();
}

uint64_t sub_244DD5398(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 612);
}

void *sub_244DD53A0(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  uint64_t result = (*(void *(**)(long long *__return_ptr))(*(void *)a1 + 56))(&v7);
  if (v7)
  {
    long long v5 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)uint64_t buf = v7;
      uint64_t v10 = v8;
      unint64_t v6 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Adding response failed: %s. Returning failure instead.", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)uint64_t buf = v7;
      uint64_t v10 = v8;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0xDu, 1);
    }
    *(_WORD *)uint64_t buf = 1;
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint8_t *, void))(*(void *)a1 + 24))(a1, a2, buf, 0);
  }
  return result;
}

uint64_t sub_244DD5524(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 600);
  if (!v1) {
    sub_244E2B2DC();
  }
  BOOL v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);

  return v2();
}

uint64_t sub_244DD5574(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v4 = 256;
  char v5 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, void))(*(void *)a1 + 16))(a1, a2, &v4, 0);
}

uint64_t sub_244DD55C8(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v4 = 257;
  char v5 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, void))(*(void *)a1 + 16))(a1, a2, &v4, 0);
}

void sub_244DD561C()
{
}

uint64_t sub_244DD5630@<X0>(uint64_t result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    __int16 v4 = (unsigned __int16 *)(result + 16);
    while (*v4 != *a2 || *((_DWORD *)v4 + 1) != *((_DWORD *)a2 + 1) || *((_DWORD *)v4 + 2) != *((_DWORD *)a2 + 2))
    {
      v4 += 8;
      if (!--v3) {
        goto LABEL_7;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)v4;
    char v5 = 1;
  }
  else
  {
LABEL_7:
    char v5 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244DD5694@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 16);
    LOBYTE(v2) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_244DD56B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    int v5 = 89;
    LODWORD(v4) = 11;
  }
  else
  {
    *(void *)&long long v6 = *(void *)a2;
    DWORD2(v6) = *(_DWORD *)(a2 + 8);
    WORD6(v6) = *(_WORD *)a3;
    BYTE14(v6) = *(unsigned char *)(a3 + 2);
    *(_OWORD *)(result + 16) = v6;
    *(void *)(result + 8) = 1;
    int v5 = 108;
  }
  *(_DWORD *)a4 = v4;
  *(void *)(a4 + 8) = "src/app/CommandPathRegistry.h";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

uint64_t sub_244DD5720(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, result);
    *(void *)(v3 + 16) = a2;
  }
  return result;
}

uint64_t sub_244DD577C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_244DD57B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 112))(result, a1);
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

void *sub_244DD5804(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, a1);
    a1[2] = a2;
  }
  return a1;
}

void *sub_244DD5868()
{
  return &unk_268EC3198;
}

uint64_t *sub_244DD5874(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    do
    {
      uint64_t v2 = *(void *)(v1 + 16);
      *(void *)(v1 + 16) = 0;
      uint64_t v1 = v2;
    }
    while (v2);
  }
  *uint64_t result = 0;
  return result;
}

uint64_t sub_244DD5894@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    int v5 = (uint64_t *)result;
    uint64_t v6 = *(void *)result;
    if (*(void *)result)
    {
      while (1)
      {
        uint64_t result = sub_244CB2770(v6, a2);
        if (result) {
          break;
        }
        uint64_t v6 = *(void *)(v6 + 16);
        if (!v6)
        {
          uint64_t v7 = *v5;
          goto LABEL_8;
        }
      }
      uint64_t v10 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Duplicate command handler registration failed", v11, 2u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(0x23u, 1);
      }
      int v8 = 57;
      int v9 = 3;
    }
    else
    {
      uint64_t v7 = 0;
LABEL_8:
      int v9 = 0;
      *(void *)(a2 + 16) = v7;
      *int v5 = a2;
      int v8 = 64;
    }
  }
  else
  {
    int v8 = 50;
    int v9 = 47;
  }
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/app/CommandHandlerInterfaceRegistry.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned char *sub_244DD59A0(unsigned char *result, int a2)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
    {
      while (1)
      {
        uint64_t v6 = v2;
        uint64_t result = (unsigned char *)(v2 + 8);
        int v7 = *(unsigned __int8 *)(v2 + 8);
        uint64_t v2 = *(void *)(v2 + 16);
        if (v7)
        {
          uint64_t result = sub_2446D1880(result);
          if (*(unsigned __int16 *)result == a2) {
            break;
          }
        }
        uint64_t v5 = v6;
        if (!v2) {
          return result;
        }
      }
      int v8 = (void *)(v5 + 16);
      if (!v5) {
        int v8 = v4;
      }
      *int v8 = *(void *)(v6 + 16);
      *(void *)(v6 + 16) = 0;
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_244DD5A2C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    int v8 = 100;
    int v9 = 47;
    goto LABEL_14;
  }
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (!*result)
  {
LABEL_13:
    int v8 = 124;
    int v9 = 16;
    goto LABEL_14;
  }
  uint64_t result = (uint64_t *)sub_244CB2770(*result, a2);
  if ((result & 1) == 0)
  {
    uint64_t v10 = v5;
    while (1)
    {
      uint64_t v5 = *(void *)(v10 + 16);
      if (!v5) {
        goto LABEL_13;
      }
      uint64_t result = (uint64_t *)sub_244CB2770(*(void *)(v10 + 16), a2);
      uint64_t v7 = v10;
      uint64_t v10 = v5;
      if (result) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  int v9 = 0;
  if (v7) {
    uint64_t v11 = (uint64_t *)(v7 + 16);
  }
  else {
    uint64_t v11 = v4;
  }
  *uint64_t v11 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  int v8 = 118;
LABEL_14:
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/app/CommandHandlerInterfaceRegistry.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_244DD5AF4(uint64_t *a1, int a2, int a3)
{
  for (uint64_t i = *a1; i; uint64_t i = *(void *)(i + 16))
  {
    if ((!*(unsigned char *)(i + 8) || *(unsigned __int16 *)sub_2446D1880((unsigned char *)(i + 8)) == a2) && *(_DWORD *)(i + 12) == a3) {
      break;
    }
  }
  return i;
}

void sub_244DD5B5C(uint64_t a1@<X1>, __int16 a2@<W2>, uint64_t a3@<X8>)
{
  if (!a1)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/app/StatusResponse.cpp";
    int v6 = 28;
LABEL_12:
    *(_DWORD *)(a3 + 16) = v6;
    return;
  }
  sub_244CC8F5C(0x4AAuLL, 0x26u, &v13);
  if (!v13)
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/app/StatusResponse.cpp";
    int v6 = 30;
    goto LABEL_12;
  }
  sub_244CB62B8((uint64_t)v10);
  v11[1] = 0;
  _OWORD v11[2] = 0;
  v11[0] = &unk_26F9536C8;
  char v12 = 0;
  sub_2447945A0((uint64_t)v11, &v13, 0);
  sub_244CB6318((uint64_t)v10, (uint64_t)v11, 0xFFFFFFFF, (uint64_t)&v8);
  sub_244CCCDE0((uint64_t)&v8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CCF9D0((uint64_t)&v8, v10, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CCF8DC((uint64_t)&v8);
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_2446DE160((uint64_t)v10, &v13, (void *)a3);
      if (!*(_DWORD *)a3)
      {
        sub_244D64578(a1, 2000);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        __int16 v7 = a2;
        sub_244D645BC(a1, 0x10000u, 1, (uint64_t *)&v13, &v7, a3);
        if (!*(_DWORD *)a3)
        {
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/app/StatusResponse.cpp";
          *(_DWORD *)(a3 + 16) = 44;
        }
      }
    }
  }
  sub_244CA539C(v11);
  if (v13) {
    sub_244CC8A0C(v13);
  }
}

void sub_244DD5D28(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_244CCF15C((uint64_t)v12);
  sub_244CB3988((uint64_t)v10);
  uint64_t v11 = 0;
  sub_2446DE1E4((uint64_t)v10, a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCF054((uint64_t)v12, (uint64_t)v10, a3);
  if (!*(_DWORD *)a3)
  {
    *(_WORD *)uint64_t v9 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CCF890(v12, v9, a3);
    if (!*(_DWORD *)a3)
    {
      int v6 = sub_244CC8484(0x23u, "InteractionModel");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = v9[0];
        long long v8 = sub_244CCFFC4(v9[0]);
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v8;
        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Received status response, status is 0x%02x (%s)", buf, 0x12u);
      }
      if (sub_244CC4E58(2u))
      {
        sub_244CCFFC4(v9[0]);
        sub_244CC4DE0(0x23u, 2);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CCF0D0((uint64_t)v12, a3);
      if (!*(_DWORD *)a3)
      {
        sub_244CCF6E8(v9, (uint64_t)buf);
        *(_OWORD *)a2 = *(_OWORD *)buf;
        *(void *)(a2 + 16) = *(void *)&buf[16];
        *(_DWORD *)a3 = 0;
        a3[1] = "src/app/StatusResponse.cpp";
        *((_DWORD *)a3 + 4) = 63;
      }
    }
  }
  if (v11) {
    sub_244CC8A0C(v11);
  }
}

uint64_t sub_244DD5EF4(uint64_t a1, uint64_t a2)
{
  if (sub_244DD5F80(a1, a2)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a2 + 24);
  if (v6 == 1) {
    int v7 = (unsigned __int8 *)a2;
  }
  else {
    int v7 = 0;
  }
  if (v5) {
    long long v8 = 0;
  }
  else {
    long long v8 = (int *)a1;
  }
  if (v5 == 1 && v6 == 0)
  {
    int v7 = (unsigned __int8 *)a1;
    long long v8 = (int *)a2;
  }
  else if (v6 != 1 || v5 != 0)
  {
    return 0;
  }

  return sub_244DD5FEC(v7, v8);
}

uint64_t sub_244DD5F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  int v5 = *(_DWORD *)(a2 + 24);
  BOOL v6 = v5 == v4;
  BOOL v9 = v5 == -1;
  BOOL v7 = v5 == -1;
  if (v9) {
    BOOL v6 = 0;
  }
  if (v4 == -1) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = v6;
  }
  BOOL v9 = v4 == -1 || !v6;
  if (!v9)
  {
    uint64_t v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_26F958BF0[v4])(&v11, a1);
  }
  return result;
}

uint64_t sub_244DD5FEC(unsigned __int8 *a1, int *a2)
{
  unsigned int v3 = *a1;
  if (v3 >= 2)
  {
    int v5 = *a2;
LABEL_6:
    int v4 = v3 | 0x500;
    return v5 == v4;
  }
  v7[0] = a1[1];
  if (!v7[0])
  {
    int v5 = *a2;
    if (!(v3 | *a2)) {
      return 1;
    }
    goto LABEL_6;
  }
  v7[1] = a1[2];
  if (v3 != 1) {
    return 0;
  }
  int v4 = *sub_24479DC2C(v7) | 0x600;
  int v5 = *a2;
  return v5 == v4;
}

unsigned char *sub_244DD6084@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  if (!result) {
    goto LABEL_13;
  }
  int v3 = *((_DWORD *)result + 6);
  if (v3 != 1)
  {
    if (!v3)
    {
      *(_OWORD *)a2 = *(_OWORD *)result;
      *(void *)(a2 + 16) = *((void *)result + 2);
      return result;
    }
LABEL_13:
    sub_24479F5F0();
  }
  int v4 = *result;
  if (*result)
  {
    if (v4 == 1 && (v7[0] = result[1]) != 0)
    {
      v7[1] = result[2];
      uint64_t result = sub_24479DC2C(v7);
      int v4 = *result;
      int v5 = 103;
      int v6 = 1536;
    }
    else
    {
      int v5 = 104;
      int v6 = 1280;
    }
    *(_DWORD *)a2 = v6 | v4;
    *(void *)(a2 + 8) = "src/app/data-model-provider/ActionReturnStatus.cpp";
    *(_DWORD *)(a2 + 16) = v5;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/app/data-model-provider/ActionReturnStatus.cpp";
    *(_DWORD *)(a2 + 16) = 98;
  }
  return result;
}

unsigned char *sub_244DD6150@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  if (!result) {
    goto LABEL_8;
  }
  int v2 = *((_DWORD *)result + 6);
  if (!v2)
  {
    long long v4 = *(_OWORD *)result;
    uint64_t v5 = *((void *)result + 2);
    return sub_244CD0398(a2, (int *)&v4);
  }
  if (v2 != 1) {
LABEL_8:
  }
    sub_24479F5F0();
  *a2 = *result;
  int v3 = result[1];
  a2[1] = v3;
  if (v3) {
    a2[2] = result[2];
  }
  return result;
}

BOOL sub_244DD61C0(int *a1)
{
  if (!a1) {
    goto LABEL_7;
  }
  int v1 = a1[6];
  if (v1 == 1)
  {
    int v2 = *(unsigned __int8 *)a1;
    return v2 == 0;
  }
  if (v1) {
LABEL_7:
  }
    sub_24479F5F0();
  int v2 = *a1;
  return v2 == 0;
}

_DWORD *sub_244DD6200(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(!result[6] && (*result == 11 || *result == 25));
  }
  return result;
}

char *sub_244DD6228(unsigned __int8 *a1, void *a2)
{
  if (!a1) {
    goto LABEL_10;
  }
  int v3 = *((_DWORD *)a1 + 6);
  if (v3 != 1)
  {
    if (!v3)
    {
      long long v8 = *(_OWORD *)a1;
      uint64_t v9 = *((void *)a1 + 2);
      return sub_244CB7B34((const char **)&v8, 1);
    }
LABEL_10:
    sub_24479F5F0();
  }
  a2[2] = 0;
  *(unsigned char *)*a2 = 0;
  int v6 = sub_244CCFFC4(*a1);
  sub_244CC6578(a2, "%s(%d)", v6, *a1);
  if (*a1 <= 1u)
  {
    LOBYTE(v8) = a1[1];
    if ((_BYTE)v8)
    {
      BYTE1(v8) = a1[2];
      BOOL v7 = sub_24479DC2C(&v8);
      sub_244CC6578(a2, ", Code %d", *v7);
    }
  }
  return (char *)*a2;
}

BOOL sub_244DD62FC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

uint64_t sub_244DD6310(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_244DD631C(a2, a3);
}

uint64_t sub_244DD631C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  if (v2 != *a2) {
    return 0;
  }
  unsigned __int8 v3 = (a1[1] != 0) ^ (a2[1] != 0);
  if (v3) {
    return 0;
  }
  BOOL v4 = v2 > 1 || a1[1] == 0;
  BOOL v5 = v4;
  if (v4)
  {
    int v6 = 0;
  }
  else
  {
    unsigned __int8 v3 = a1[2];
    int v6 = 1;
  }
  BOOL v7 = v2 >= 2 || a2[1] == 0;
  int v8 = !v7;
  if (v6 != v8) {
    return 0;
  }
  if (a2[2] == v3) {
    return 1;
  }
  return v5;
}

uint64_t sub_244DD6398()
{
  return qword_268EBE0E8;
}

uint64_t sub_244DD63A4(uint64_t a1)
{
  uint64_t v1 = qword_268EBE0E8;
  qword_268EBE0E8 = a1;
  return v1;
}

void sub_244DD63B8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/app/util/MatterCallbacks.cpp";
  *(_DWORD *)(a1 + 16) = 53;
}

void sub_244DD63D4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/app/util/MatterCallbacks.h";
  *(_DWORD *)(a1 + 16) = 60;
}

uint64_t sub_244DD63F8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = 0;
  *(void *)(a1 + 304) = a2;
  long long v5 = *a3;
  *(void *)(a1 + 296) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 280) = v5;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  do
  {
    int v6 = &v13[v4];
    *(void *)int v6 = 0;
    *((void *)v6 + 1) = 0;
    *((unsigned char *)v6 + 16) = 1;
    *((_WORD *)v6 + 9) = 5540;
    *((_DWORD *)v6 + 5) = 0;
    *((void *)v6 + 3) = 0;
    uint64_t result = sub_244D6A0B8();
    *((void *)v6 + 4) = result;
    *((_DWORD *)v6 + 10) = v8;
    *((_WORD *)v6 + 22) = 0;
    *((unsigned char *)v6 + 46) = 0;
    v4 += 3;
  }
  while (v4 != 15);
  uint64_t v9 = 0;
  LOWORD(v14) = 0;
  do
  {
    uint64_t v10 = a1 + v9 * 16;
    *(_OWORD *)(v10 + 32) = v13[v9];
    int v11 = DWORD1(v13[v9 + 1]);
    *(_DWORD *)(v10 + 48) = v13[v9 + 1];
    *(_DWORD *)(v10 + 52) = v11;
    uint64_t v12 = *(void *)&v13[v9 + 2];
    *(void *)(v10 + 56) = *((void *)&v13[v9 + 1] + 1);
    *(void *)(v10 + 64) = v12;
    *(void *)(v10 + 71) = *(void *)((char *)&v13[v9 + 2] + 7);
    v9 += 3;
  }
  while (v9 != 15);
  *(_WORD *)(a1 + 272) = v14;
  return result;
}

uint64_t sub_244DD6508(uint64_t a1, int *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)std::string __str = 0;
  uint64_t v24 = a1 + 280;
  uint8_t v25 = a2;
  sub_244D7E694((uint64_t)__str);
  unsigned int v4 = sub_244DB1208(a2);
  int v5 = sub_244DD6714(a1 + 32, (long long *)a2, v4);
  sub_244CDC098((uint64_t)a2, __str, 0x4CuLL);
  uint64_t v7 = *(void *)(a1 + 280);
  uint64_t v6 = *(void *)(a1 + 288);
  int v8 = sub_244CC8484(0x22u, "Discovery");
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v9)
    {
      *(_DWORD *)uint64_t buf = 136316418;
      uint64_t v12 = __str;
      __int16 v13 = 1024;
      unsigned int v14 = v4;
      __int16 v15 = 1024;
      int v16 = HIDWORD(v6);
      __int16 v17 = 1024;
      int v18 = v6;
      __int16 v19 = 1024;
      int v20 = HIDWORD(v7);
      __int16 v21 = 1024;
      int v22 = v7;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "%s: new best score: %u (for %08X%08X-%08X%08X)", buf, 0x2Au);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      return sub_244CC4DE0(0x22u, 2);
    }
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)uint64_t buf = 136316418;
      uint64_t v12 = __str;
      __int16 v13 = 1024;
      unsigned int v14 = v4;
      __int16 v15 = 1024;
      int v16 = HIDWORD(v6);
      __int16 v17 = 1024;
      int v18 = v6;
      __int16 v19 = 1024;
      int v20 = HIDWORD(v7);
      __int16 v21 = 1024;
      int v22 = v7;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "%s: score has not improved: %u (for %08X%08X-%08X%08X)", buf, 0x2Au);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      return sub_244CC4DE0(0x22u, 2);
    }
  }
  return result;
}

uint64_t sub_244DD6714(uint64_t a1, long long *a2, unsigned int a3)
{
  unint64_t v6 = 0;
  uint64_t v7 = a1;
  while (v6 < *(unsigned __int8 *)(a1 + 240))
  {
    int v18 = *(_DWORD *)(v7 + 20);
    if (sub_244DB1208((int *)v7) < a3) {
      break;
    }
    ++v6;
    v7 += 48;
    if (v6 == 5) {
      return 0;
    }
  }
  unint64_t v9 = *(unsigned __int8 *)(a1 + 240);
  if (v9 > v6)
  {
    uint64_t v10 = a1 + 48 * *(unsigned __int8 *)(a1 + 240) + 20;
    do
    {
      if (v9 <= 4)
      {
        int v11 = (long long *)(a1 + 48 * (v9 - 1));
        long long v12 = *v11;
        *(_DWORD *)(v10 - 4) = *((_DWORD *)v11 + 4);
        *(_OWORD *)(v10 - 20) = v12;
        *(_DWORD *)uint64_t v10 = *((_DWORD *)v11 + 5);
        *(void *)(v10 + 4) = *((void *)v11 + 3);
        uint64_t v13 = *((void *)v11 + 4);
        *(void *)(v10 + 19) = *(void *)((char *)v11 + 39);
        *(void *)(v10 + 12) = v13;
      }
      --v9;
      v10 -= 48;
    }
    while (v6 < v9);
    LODWORD(v9) = *(unsigned __int8 *)(a1 + 240);
  }
  if (v9 < 5) {
    *(unsigned char *)(a1 + 240) = v9 + 1;
  }
  long long v14 = *a2;
  *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)uint64_t v7 = v14;
  *(_DWORD *)(v7 + 20) = *((_DWORD *)a2 + 5);
  *(void *)(v7 + 24) = *((void *)a2 + 3);
  uint64_t v15 = *((void *)a2 + 4);
  *(void *)(v7 + 39) = *(void *)((char *)a2 + 39);
  *(void *)(v7 + 32) = v15;
  if (!sub_244CBEE00((_DWORD *)v7))
  {
    *(_DWORD *)(v7 + 20) = 0;
    int v16 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v17 = 0;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "Lookup clearing interface for non LL address", v17, 2u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x22u, 3);
    }
  }
  return 1;
}

uint64_t sub_244DD68C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 - *(void *)(a1 + 304);
  unint64_t v3 = *(unsigned int *)(a1 + 296);
  if (v2 < v3) {
    return (v3 - v2);
  }
  if (*(unsigned __int8 *)(a1 + 272) > *(unsigned __int8 *)(a1 + 273)) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a1 + 300);
  if (v2 < v3) {
    return (v3 - v2);
  }
  int v5 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Unexpected timeout: lookup should have been cleaned already.", v6, 2u);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    sub_244CC4DE0(0x22u, 1);
    return 0;
  }
  return result;
}

void sub_244DD6990(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v5 = a2 - *(void *)(a1 + 304);
  unint64_t v6 = sub_244CC8484(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 280);
    uint64_t v7 = *(void *)(a1 + 288);
    *(_DWORD *)uint64_t buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v7);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 1024;
    int v13 = HIDWORD(v8);
    *(_WORD *)long long v14 = 1024;
    *(_DWORD *)&void v14[2] = v8;
    *(_WORD *)&_DWORD v14[6] = 2048;
    *(void *)&unsigned char v14[8] = v5;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Checking node lookup status for %08X%08X-%08X%08X after %lu ms", buf, 0x24u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0x22u, 2);
  }
  if (v5 >= *(unsigned int *)(a1 + 296))
  {
    if (*(unsigned __int8 *)(a1 + 272) > *(unsigned __int8 *)(a1 + 273))
    {
      sub_244DD7BF4(a1 + 32, (uint64_t)buf);
      *(_DWORD *)(a3 + 48) = 2;
      *(_OWORD *)a3 = *(_OWORD *)buf;
      int v10 = *(_DWORD *)v14;
      *(_DWORD *)(a3 + 16) = v13;
      *(_DWORD *)(a3 + 20) = v10;
      uint64_t v11 = *(void *)&v14[12];
      *(void *)(a3 + 24) = *(void *)&v14[4];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)&v14[19];
      return;
    }
    if (v5 >= *(unsigned int *)(a1 + 300))
    {
      *(_DWORD *)(a3 + 48) = 1;
      *(_DWORD *)a3 = 50;
      *(void *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      *(_DWORD *)(a3 + 16) = 123;
      return;
    }
  }
  else
  {
    unint64_t v9 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Keeping DNSSD lookup active", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0x22u, 2);
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 48) = 0;
}

uint64_t sub_244DD6BB8@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)uint64_t buf = a2;
  uint64_t result = sub_244D7E618((uint64_t)buf);
  if (*(void *)(a1 + 16))
  {
    uint64_t v9 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    sub_244DD63F8(a3, v9, a2);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    int v10 = sub_244DB12A8();
    uint64_t result = (*(uint64_t (**)(uint64_t *, long long *))(*v10 + 48))(v10, a2);
    if (*(_DWORD *)a4) {
      return result;
    }
    sub_244D7E808((void *)(a1 + 32), (void *)(a3 + 8));
    sub_244DD6D9C(a1);
    uint64_t v11 = sub_244CC8484(0x22u, "Discovery");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      unint64_t v14 = HIDWORD(*(void *)a2);
      *(_DWORD *)uint64_t buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(v12);
      __int16 v18 = 1024;
      int v19 = v12;
      __int16 v20 = 1024;
      int v21 = v14;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Lookup started for %08X%08X-%08X%08X", buf, 0x1Au);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0x22u, 2);
    }
    int v15 = 0;
    int v16 = 198;
  }
  else
  {
    int v16 = 190;
    int v15 = 3;
  }
  *(_DWORD *)a4 = v15;
  a4[1] = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
  *((_DWORD *)a4 + 4) = v16;
  return result;
}

uint64_t sub_244DD6D9C(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), sub_244DD79D8, a1);
  uint64_t result = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  unint64_t v3 = (void *)(a1 + 32);
  unsigned int v4 = *(void **)(a1 + 40);
  if (v4 != (void *)(a1 + 32))
  {
    uint64_t v5 = result;
    unsigned int v6 = -1;
    do
    {
      if (v4) {
        uint64_t v7 = (uint64_t)(v4 - 1);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t result = sub_244DD68C8(v7, v5);
      if (result < v6) {
        unsigned int v6 = result;
      }
      unsigned int v4 = (void *)v4[1];
    }
    while (v4 != v3);
    if (v6 != -1)
    {
      long long v16 = 0uLL;
      uint64_t v17 = 0;
      uint64_t result = (uint64_t)(*(void *(**)(long long *__return_ptr))(**(void **)(a1 + 16) + 40))(&v16);
      if (v16)
      {
        uint64_t v8 = sub_244CC8484(0x22u, "Discovery");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)uint64_t buf = v16;
          uint64_t v19 = v17;
          uint64_t v9 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)uint64_t buf = 136315138;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Timer schedule error %s assumed permanent", buf, 0xCu);
        }
        uint64_t result = sub_244CC4E58(1u);
        if (result)
        {
          *(_OWORD *)uint64_t buf = v16;
          uint64_t v19 = v17;
          sub_244CB7B34((const char **)buf, 1);
          uint64_t result = sub_244CC4DE0(0x22u, 1);
        }
        int v10 = *(void **)(a1 + 40);
        while (v10 != v3)
        {
          uint64_t v11 = v10 - 1;
          if (!v10) {
            uint64_t v11 = 0;
          }
          *(_OWORD *)uint64_t buf = *(_OWORD *)(v11 + 35);
          uint64_t v12 = v11[3];
          sub_244D7E854(v10);
          int v10 = *(void **)(a1 + 40);
          uint64_t v13 = sub_244DB12A8();
          (*(void (**)(uint64_t *, uint8_t *))(*v13 + 56))(v13, buf);
          long long v14 = v16;
          uint64_t v15 = v17;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint8_t *, long long *))(*(void *)v12 + 24))(v12, buf, &v14);
        }
      }
    }
  }
  return result;
}

uint64_t sub_244DD705C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result + 32;
  uint64_t v5 = result + 32;
  do
    uint64_t v5 = *(void *)(v5 + 8);
  while (v5 != a2 + 8 && v5 != v4);
  if (v5 == v4)
  {
    if (*(unsigned __int8 *)(a2 + 272) <= *(unsigned __int8 *)(a2 + 273))
    {
      *(_DWORD *)a3 = 216;
      *(void *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      int v7 = 204;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 24);
      long long v11 = *(_OWORD *)(a2 + 280);
      sub_244DD7BF4(a2 + 32, (uint64_t)v10);
      v9[1] = &v11;
      v9[0] = 2;
      unsigned char v9[2] = v10;
      sub_244D7E694((uint64_t)v9);
      uint64_t result = (*(uint64_t (**)(uint64_t, long long *, unsigned char *))(*(void *)v8 + 16))(v8, &v11, v10);
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      int v7 = 213;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
    int v7 = 203;
  }
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void *sub_244DD717C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = a2 + 1;
  if (a2[1]) {
    BOOL v7 = a2[2] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    int v8 = 218;
    int v9 = 47;
  }
  else
  {
    sub_244D7E854(result);
    uint64_t v12 = sub_244DB12A8();
    (*(void (**)(uint64_t *, void *))(*v12 + 56))(v12, a2 + 35);
    sub_244DD6D9C(a1);
    v17[0] = a2 + 35;
    v17[1] = 116;
    unsigned char v17[2] = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
    void v17[3] = 225;
    uint64_t result = (void *)sub_244D7E710((uint64_t)v17);
    if (!a3)
    {
      uint64_t v13 = a2[3];
      int v14 = 116;
      uint64_t v15 = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      int v16 = 229;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, int *))(*(void *)v13 + 24))(v13, a2 + 35, &v14);
    }
    int v9 = 0;
    int v8 = 239;
  }
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t sub_244DD729C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 16) = a2;
  uint64_t v5 = sub_244DB12A8();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v5 + 40))(v5, a1 + 8);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
  *(_DWORD *)(a3 + 16) = 246;
  return result;
}

uint64_t sub_244DD7308(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    uint64_t v1 = result;
    unint64_t v2 = (void *)(result + 32);
    for (uint64_t i = *(void **)(result + 40); i != v2; uint64_t i = *(void **)(v1 + 40))
    {
      uint64_t v4 = i - 1;
      if (!i) {
        uint64_t v4 = 0;
      }
      long long v12 = *(_OWORD *)(v4 + 35);
      uint64_t v5 = v4[3];
      sub_244D7E854(i);
      v11[1] = 115;
      void v11[3] = 264;
      v11[0] = &v12;
      _OWORD v11[2] = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      sub_244D7E710((uint64_t)v11);
      unsigned int v6 = sub_244DB12A8();
      (*(void (**)(uint64_t *, long long *))(*v6 + 56))(v6, &v12);
      int v8 = 115;
      int v9 = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      int v10 = 270;
      (*(void (**)(uint64_t, long long *, int *))(*(void *)v5 + 24))(v5, &v12, &v8);
    }
    sub_244DD6D9C(v1);
    *(void *)(v1 + 16) = 0;
    BOOL v7 = sub_244DB12A8();
    return (*(uint64_t (**)(uint64_t *, void))(*v7 + 40))(v7, 0);
  }
  return result;
}

uint64_t sub_244DD7474(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != a1 + 32)
  {
    unsigned int v6 = (long long *)(a2 + 16);
    do
    {
      uint64_t v26 = v4;
      uint64_t v7 = v4 - 8;
      BOOL v8 = v4 == 0;
      uint64_t v4 = *(void *)(v4 + 8);
      if (v8) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v7;
      }
      if (*(void *)(v9 + 280) == *(void *)(a2 + 168) && *(void *)(v9 + 288) == *(void *)(a2 + 176))
      {
        long long v17 = 0uLL;
        char v18 = 1;
        __int16 v19 = 5540;
        int v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = sub_244D6A0B8();
        int v23 = v10;
        __int16 v24 = 0;
        char v25 = 0;
        __int16 v19 = *(_WORD *)(a2 + 96);
        int v20 = *(_DWORD *)a2;
        uint64_t v11 = sub_244DD75C4(a2);
        uint64_t v22 = v11;
        LOWORD(v23) = v12;
        HIBYTE(v24) = *(unsigned char *)(a2 + 139);
        LOBYTE(v24) = *(unsigned char *)(a2 + 140);
        if (*(unsigned char *)(a2 + 142)) {
          char v25 = *(unsigned char *)(a2 + 141);
        }
        if (*(void *)(a2 + 8))
        {
          unint64_t v13 = 0;
          int v14 = v6;
          do
          {
            long long v15 = *v14++;
            long long v17 = v15;
            uint64_t v11 = sub_244DD6508(v9, (int *)&v17);
            ++v13;
          }
          while (v13 < *(void *)(a2 + 8));
        }
        sub_244DD7624(v11, &v26);
      }
    }
    while (v4 != v3);
  }
  return sub_244DD6D9C(a1);
}

uint64_t sub_244DD75C4(uint64_t a1)
{
  uint64_t v2 = sub_244D6A0B8();
  LODWORD(v3) = *(_DWORD *)(a1 + 144);
  if (*(unsigned char *)(a1 + 148)) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v2;
  }
  LODWORD(v4) = *(_DWORD *)(a1 + 152);
  if (*(unsigned char *)(a1 + 156)) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = HIDWORD(v2);
  }
  return v3 | (v4 << 32);
}

void sub_244DD7624(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*a2) {
    uint64_t v3 = *a2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  sub_244DD6990(v3, v4, (uint64_t)&v17);
  int v5 = v19;
  if (v19)
  {
    unsigned int v6 = (void *)*a2;
    uint64_t v7 = *a2 - 8;
    if (!*a2) {
      uint64_t v7 = 0;
    }
    long long v16 = *(_OWORD *)(v7 + 280);
    uint64_t v8 = *(void *)(v7 + 24);
    sub_244D7E854(v6);
    uint64_t v9 = sub_244DB12A8();
    (*(void (**)(uint64_t *, long long *))(*v9 + 56))(v9, &v16);
    if (v5 == 2)
    {
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&long long v14 = &v16;
      *(_DWORD *)uint64_t buf = 1;
      *((void *)&v14 + 1) = &v17;
      sub_244D7E694((uint64_t)buf);
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v8 + 16))(v8, &v16, &v17);
    }
    else if (v5 == 1)
    {
      *(void *)uint64_t buf = &v16;
      long long v14 = v17;
      uint64_t v15 = v18;
      sub_244D7E710((uint64_t)buf);
      long long v11 = v17;
      uint64_t v12 = v18;
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v8 + 24))(v8, &v16, &v11);
    }
    else
    {
      int v10 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Unexpected lookup state (not success or fail).", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0x22u, 1);
      }
    }
  }
}

uint64_t sub_244DD7858(uint64_t a1, uint64_t a2)
{
  return sub_244DD7474(a1 - 8, a2);
}

uint64_t sub_244DD7860(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 40);
  while (v3 != v2)
  {
    uint64_t v5 = v3;
    uint64_t v3 = *(void *)(v3 + 8);
    sub_244DD7624(a1, &v5);
  }

  return sub_244DD6D9C(a1);
}

uint64_t sub_244DD78C8(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v4 = (void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5 != v4)
  {
    do
    {
      uint64_t v8 = (void *)v5[1];
      uint64_t v9 = v5 - 1;
      if (!v5) {
        uint64_t v9 = 0;
      }
      if (v9[35] == *a2 && v9[36] == a2[1])
      {
        uint64_t v10 = v9[3];
        sub_244D7E854(v5);
        long long v11 = sub_244DB12A8();
        (*(void (**)(uint64_t *, void *))(*v11 + 56))(v11, a2);
        long long v13 = *a3;
        uint64_t v14 = *((void *)a3 + 2);
        (*(void (**)(uint64_t, void *, long long *))(*(void *)v10 + 24))(v10, a2, &v13);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  return sub_244DD6D9C(a1);
}

uint64_t sub_244DD79D0(uint64_t a1, void *a2, long long *a3)
{
  return sub_244DD78C8(a1 - 8, a2, a3);
}

uint64_t sub_244DD79D8(uint64_t a1, uint64_t a2)
{
  return sub_244DD7860(a2);
}

uint64_t *sub_244DD79E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268EC31D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268EC31D0))
  {
    qword_268EC31A0 = (uint64_t)&unk_26F958CB0;
    qword_268EC31A8 = (uint64_t)&unk_26F958D08;
    unk_268EC31B0 = 0;
    qword_268EC31C0 = (uint64_t)&qword_268EC31C0;
    unk_268EC31C8 = &qword_268EC31C0;
    __cxa_guard_release(&qword_268EC31D0);
  }
  return &qword_268EC31A0;
}

uint64_t sub_244DD7A78(void *a1)
{
  *a1 = &unk_26F958CB0;
  a1[1] = &unk_26F958D08;
  sub_244D86300(a1 + 4);

  return nullsub_13(a1, v2);
}

void sub_244DD7AF0(void *a1)
{
  *a1 = &unk_26F958CB0;
  a1[1] = &unk_26F958D08;
  sub_244D86300(a1 + 4);
  nullsub_13(a1, v2);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DD7B7C(void *a1)
{
  uint64_t v1 = a1 - 1;
  *(a1 - 1) = &unk_26F958CB0;
  *a1 = &unk_26F958D08;
  sub_244D86300(a1 + 3);

  return nullsub_13(v1, v2);
}

void sub_244DD7BEC(uint64_t a1)
{
}

__n128 sub_244DD7BF4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 241);
  if (*(unsigned __int8 *)(a1 + 240) <= v2) {
    sub_244E2B37C();
  }
  *(unsigned char *)(a1 + 241) = v2 + 1;
  uint64_t v3 = a1 + 48 * v2;
  __n128 result = *(__n128 *)v3;
  *(_OWORD *)a2 = *(_OWORD *)v3;
  int v5 = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(a2 + 20) = v5;
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(a2 + 24) = *(void *)(v3 + 24);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 39) = *(void *)(v3 + 39);
  return result;
}

const char *sub_244DD7C4C(unint64_t a1)
{
  if ((_WORD)a1 || WORD1(a1) > 4u) {
    return "----";
  }
  else {
    return *(char **)((char *)off_2651A9B08 + ((uint64_t)(a1 >> 16 << 48) >> 45));
  }
}

const char *sub_244DD7C84(unint64_t a1, int a2)
{
  if ((_WORD)a1 || WORD1(a1) > 4u) {
    return "----";
  }
  uint64_t v2 = (uint64_t)(a1 >> 16 << 48) >> 45;
  uint64_t v3 = *(void *)((char *)&unk_244EC3D58 + v2);
  uint64_t v4 = *(char **)((char *)&off_2651A9B30 + v2) + 8;
  uint64_t v5 = 16 * v3;
  __n128 result = "----";
  while (*(v4 - 8) != a2)
  {
    v4 += 16;
    v5 -= 16;
    if (!v5) {
      return result;
    }
  }
  return *(const char **)v4;
}

int *sub_244DD7CF8@<X0>(int *result@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    *((void *)result + 3) = a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    __n128 result = sub_244D663E0(a2, 0, 0, (uint64_t)result, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return result;
    }
    int v4 = 0;
    int v5 = 51;
  }
  else
  {
    int v5 = 45;
    int v4 = 3;
  }
  *(_DWORD *)a3 = v4;
  a3[1] = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *((_DWORD *)a3 + 4) = v5;
  return result;
}

int *sub_244DD7D70(uint64_t a1)
{
  __n128 result = *(int **)(a1 + 24);
  if (result)
  {
    sub_244D664A4(result, 0, 0, (uint64_t)v3);
    __n128 result = (int *)sub_244D674DC(*(void *)(a1 + 24), a1 + 8);
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

void sub_244DD7DC0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((*(_DWORD *)(a3 + 264) - 1) < 2
    || (*(void *)a4 = 0,
        *(void *)(a4 + 8) = 0,
        *(void *)(a4 + 16) = 0,
        sub_244DD7E20(a1, a2, a3, a4),
        !*(_DWORD *)a4))
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a4 + 16) = 73;
  }
}

void sub_244DD7E20(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_2651A9B58;
  *(void *)(a4 + 16) = 186;
  long long v13 = 0;
  __int16 v12 = 0;
  uint64_t v6 = sub_244D66048(*(void *)(a1 + 24), a2, a1 + 8, 1u);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    sub_244CC8F5C(0x18uLL, 0x26u, buf);
    uint64_t v8 = *(void *)buf;
    long long v13 = *(_WORD **)buf;
    if (*(void *)buf)
    {
      sub_244CECD5C(*(char **)(*(void *)buf + 8), 8uLL, a4);
      if (!*(_DWORD *)a4)
      {
        sub_244CC8AE4(v8, 8uLL, 0);
        sub_244CE84D0(&v11, *(void *)(v8 + 8));
        sub_244DD8A38(a3 + 264, v11);
        __int16 v12 = 3;
        sub_244D645B4(v7, 500);
        sub_244D645BC(v7, 0, 0, (uint64_t *)&v13, &v12, (uint64_t)buf);
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(void *)(a4 + 16) = v15;
        if (!*(_DWORD *)a4) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      *(_DWORD *)a4 = 11;
      *(void *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
      *(_DWORD *)(a4 + 16) = 196;
    }
    sub_244D64B58(v7);
  }
  else
  {
    *(_DWORD *)a4 = 11;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a4 + 16) = 193;
  }
  *(_DWORD *)(a3 + 264) = 0;
  uint64_t v9 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    uint64_t v15 = *(void *)(a4 + 16);
    uint64_t v10 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Failed to send message counter synchronization request with error:%s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    uint64_t v15 = *(void *)(a4 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xBu, 1);
  }
LABEL_13:
  if (v13) {
    sub_244CC8A0C(v13);
  }
}

void sub_244DD8074(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_244DD807C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, void **a6@<X5>, void *a7@<X8>)
{
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  uint64_t result = sub_244DD8128(a1, a2, a5, a6, a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a3, a4);
    if (!*(_DWORD *)a7)
    {
      *(_DWORD *)a7 = 0;
      a7[1] = "src/protocols/secure_channel/MessageCounterManager.cpp";
      *((_DWORD *)a7 + 4) = 89;
    }
  }
  return result;
}

uint64_t sub_244DD8128@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, long long *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t result = sub_244DB66F4(a2, a4, a5);
  if (!*(_DWORD *)a5)
  {
    for (uint64_t i = 0; i != 240; i += 40)
    {
      uint64_t v11 = a1 + i;
      if (!*(void *)(a1 + i + 64))
      {
        int v13 = 0;
        long long v15 = *a3;
        *(_DWORD *)(v11 + 48) = *((_DWORD *)a3 + 4);
        *(_OWORD *)(v11 + 32) = v15;
        *(_DWORD *)(v11 + 52) = *((_DWORD *)a3 + 5);
        *(void *)(v11 + 56) = *((void *)a3 + 3);
        *(void *)(v11 + 64) = *a4;
        *a4 = 0;
        int v14 = 137;
        goto LABEL_11;
      }
    }
    __int16 v12 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "MCSP ReceiveTable Already Full", v16, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      int v13 = 11;
      uint64_t result = sub_244CC4DE0(0xBu, 1);
      int v14 = 142;
    }
    else
    {
      int v14 = 142;
      int v13 = 11;
    }
LABEL_11:
    *(_DWORD *)a5 = v13;
    a5[1] = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *((_DWORD *)a5 + 4) = v14;
  }
  return result;
}

uint64_t sub_244DD8264@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, void **a6@<X5>, void *a7@<X8>)
{
  return sub_244DD807C(a1 - 16, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_244DD826C@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *(_DWORD *)(a3 + 16) = 96;
  return result;
}

uint64_t sub_244DD8290@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*((_WORD *)a3 + 2))
  {
LABEL_2:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a5 + 16) = 110;
    return result;
  }
  int v5 = *a3;
  if (*((_WORD *)a3 + 3)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (v6) {
    return sub_244DD82E4(a2, a4, a5);
  }
  if (*((_WORD *)a3 + 3)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == 1;
  }
  if (!v7) {
    goto LABEL_2;
  }
  return sub_244DD84E0(result, a2, a4, a5);
}

uint64_t sub_244DD82E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = xmmword_2651A9B70;
  *(void *)(a3 + 16) = 252;
  uint64_t v5 = *(void *)(*(void *)a2 + 8);
  uint64_t v6 = *(void *)(*(void *)a2 + 24);
  BOOL v7 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Received MsgCounterSyncReq request", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  if (v5)
  {
    if (v6 == 8)
    {
      sub_244CE84D0(&v13, v5);
      uint64_t result = sub_244DD8A6C(a1, a3);
      if (!*(_DWORD *)a3) {
        return result;
      }
      goto LABEL_12;
    }
    int v9 = 260;
    int v10 = 24;
  }
  else
  {
    int v9 = 259;
    int v10 = 13;
  }
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *(_DWORD *)(a3 + 16) = v9;
LABEL_12:
  uint64_t v11 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a3 + 16);
    __int16 v12 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Failed to handle MsgCounterSyncReq message with error:%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a3 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(0xBu, 1);
  }
  return result;
}

uint64_t sub_244DD84E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_2651A9B88;
  *(void *)(a4 + 16) = 277;
  uint64_t v8 = *(int **)(*(void *)a3 + 8);
  uint64_t v9 = *(void *)(*(void *)a3 + 24);
  int v10 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "Received MsgCounterSyncResp response", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  if (!*(unsigned char *)(a2 + 88)) {
    sub_244E2B41C();
  }
  if (*(void *)(*(void *)a3 + 24) != 12)
  {
    int v16 = 288;
LABEL_15:
    int v17 = 24;
    goto LABEL_16;
  }
  if (!v8)
  {
    int v16 = 290;
    int v17 = 13;
LABEL_16:
    *(_DWORD *)a4 = v17;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a4 + 16) = v16;
    goto LABEL_17;
  }
  if (v9 != 12)
  {
    int v16 = 291;
    goto LABEL_15;
  }
  int v11 = *v8;
  if (!*v8)
  {
    int v16 = 294;
    int v17 = 174;
    goto LABEL_16;
  }
  uint64_t v12 = (uint64_t)(v8 + 1);
  sub_24479B4A8(a2, &v21);
  uint64_t v13 = sub_244D879D8(v21) + 264;
  sub_244CE84D0(&v20, v12);
  sub_244DD8B70(v13, v11, v20, (uint64_t)buf);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  *(void *)(a4 + 16) = v23;
  (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
  if (!*(_DWORD *)a4)
  {
    sub_24479B4A8(a2, buf);
    uint64_t v14 = sub_244D879D8(*(uint64_t *)buf);
    sub_244DD88AC(a1, *(void *)(v14 + 72));
    return (*(uint64_t (**)(void))(**(void **)buf + 32))(*(void *)buf);
  }
LABEL_17:
  uint64_t v18 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    uint64_t v23 = *(void *)(a4 + 16);
    int v19 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v19;
    _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_ERROR, "Failed to handle MsgCounterSyncResp message with error:%s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    uint64_t v23 = *(void *)(a4 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(0xBu, 1);
  }
  return result;
}

uint64_t sub_244DD87C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_244DD8290(a1 - 8, a2, a3, a4, a5);
}

uint64_t sub_244DD87D0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 88))
  {
    sub_24479B4A8(a2, &v5);
    *(_DWORD *)(sub_244D879D8(v5) + 264) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    uint64_t v3 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "MCSP Timeout! On a already released session.", v4, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0xBu, 1);
    }
  }
  return result;
}

void sub_244DD88AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 88);
  do
  {
    BOOL v7 = (_WORD **)(a1 + v4 + 64);
    uint64_t v6 = (uint64_t)*v7;
    if (!*v7) {
      goto LABEL_14;
    }
    int v11 = 0;
    v12[0] = 0;
    uint8_t v12[16] = 0;
    v12[32] = 0;
    int v13 = 0;
    char v14 = 0;
    __int16 v10 = 0;
    sub_244DB5FC4((uint64_t)&v11, *(void *)(v6 + 8), *(void *)(v6 + 24), &v10, (uint64_t)v9);
    if (*(_DWORD *)v9)
    {
      uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "MessageCounterManager::ProcessPendingMessages: Failed to decode PacketHeader", v9, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0xBu, 1);
      }
    }
    else
    {
      if (!v12[0] || *(void *)sub_2446F7170(v12) != a2) {
        goto LABEL_14;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, a1 + v4 + 32, a1 + v4 + 64, 0);
    }
    if (*v7) {
      sub_244CC8A0C(*v7);
    }
    *BOOL v7 = 0;
LABEL_14:
    v4 += 40;
  }
  while (v4 != 240);
}

uint64_t sub_244DD8A38(uint64_t result, void *a2)
{
  if (*(_DWORD *)result) {
    sub_244E2B4C0();
  }
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = 0;
  *(void *)(result + 8) = *a2;
  return result;
}

uint64_t sub_244DD8A6C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 88)) {
    sub_244E2B564();
  }
  sub_24479B4A8(a1, &v8);
  uint64_t v3 = v8;
  BOOL v4 = (*(unsigned int (**)(uint64_t))(*(void *)v8 + 16))(v8) == 3
    || (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3) == 4;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  if (v4) {
    int v6 = 45;
  }
  else {
    int v6 = 47;
  }
  if (v4) {
    int v7 = 246;
  }
  else {
    int v7 = 236;
  }
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

void sub_244DD8B70(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)a1 == 1)
  {
    if (*(void *)(a1 + 8) == *a3)
    {
      *(_DWORD *)a1 = 2;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = a2;
      uint64_t v7 = a1 + 16;
      int v8 = 0;
      sub_244CE389C(&v7, 0x20uLL);
      int v6 = 0;
      int v5 = 86;
    }
    else
    {
      int v5 = 78;
      int v6 = 47;
    }
  }
  else
  {
    int v5 = 74;
    int v6 = 3;
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
  *(_DWORD *)(a4 + 16) = v5;
}

void sub_244DD8C18(void *a1)
{
  sub_244DD8CD8(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244DD8C50(uint64_t a1)
{
  return sub_244DD8CD8((void *)(a1 - 8));
}

void sub_244DD8C58(uint64_t a1)
{
  sub_244DD8CD8((void *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

void *sub_244DD8C94(uint64_t a1)
{
  return sub_244DD8CD8((void *)(a1 - 16));
}

void sub_244DD8C9C(uint64_t a1)
{
  sub_244DD8CD8((void *)(a1 - 16));

  JUMPOUT(0x245695FA0);
}

void *sub_244DD8CD8(void *a1)
{
  *a1 = &unk_26F958D80;
  a1[1] = &unk_26F958DD8;
  a1[2] = &unk_26F958E18;
  for (uint64_t i = 33; i != 3; i -= 5)
  {
    uint64_t v3 = (_WORD *)a1[i];
    if (v3) {
      sub_244CC8A0C(v3);
    }
    a1[i] = 0;
  }
  return a1;
}

void *sub_244DD8D78(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  if (HIDWORD(v4))
  {
    char v6 = (v5 != 0) | 2;
    BOOL v7 = 1;
LABEL_7:
    v6 |= 0x10u;
    goto LABEL_8;
  }
  unint64_t v8 = HIDWORD(v5);
  BOOL v7 = HIDWORD(v5) != 0;
  BOOL v9 = v5 != 0;
  if (v4) {
    char v6 = v9 | 2;
  }
  else {
    char v6 = v9;
  }
  if (v8) {
    goto LABEL_7;
  }
LABEL_8:
  sub_244CC5784(a2, *(unsigned char *)(a1 + 8) | *(unsigned char *)(a1 + 9) & 0xF);
  sub_244CC5784(a2, v6);
  sub_244CC57A8(a2, *(unsigned __int16 *)(a1 + 12), 2);
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    unint64_t v11 = *(void *)(a1 + 24);
    if (!v11) {
      goto LABEL_18;
    }
    if (v7) {
      goto LABEL_14;
    }
LABEL_16:
    unint64_t v11 = v11;
    uint64_t v12 = a2;
    uint64_t v13 = 4;
    goto LABEL_17;
  }
  if (!v7)
  {
    sub_244CC57A8(a2, *(void *)(a1 + 16), 4);
    unint64_t v11 = *(void *)(a1 + 24);
    if (!v11) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  sub_244CC57A8(a2, v10, 8);
  unint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
LABEL_14:
    uint64_t v12 = a2;
    uint64_t v13 = 8;
LABEL_17:
    sub_244CC57A8(v12, v11, v13);
  }
LABEL_18:
  sub_244CC57A8(a2, *(unsigned __int16 *)(a1 + 40), 2);
  char v14 = *(const void **)(a1 + 32);
  if (v14) {
    sub_244CC572C(a2, v14, *(unsigned __int16 *)(a1 + 40));
  }
  uint64_t v15 = *(const void **)(a1 + 48);
  if (v15) {
    sub_244CC572C(a2, v15, *(void *)(a1 + 56));
  }
  return a2;
}

void sub_244DD8EC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v22 = 0;
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  unint64_t v7 = *(void *)(*(void *)a2 + 24);
  uint64_t v17 = v6;
  uint64_t v18 = v6;
  unint64_t v19 = v7;
  LODWORD(v20) = 0;
  *((void *)&v20 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v21) = 330;
  if (!v6) {
    unint64_t v19 = 0;
  }
  char v23 = 0;
  sub_244CC5424((uint64_t)&v17, &v23);
  sub_244CC5424((uint64_t)&v17, (unsigned char *)(a1 + 10));
  sub_244CC54EC((uint64_t)&v17, (_WORD *)(a1 + 12));
  *(_OWORD *)a3 = v20;
  *(void *)(a3 + 16) = v21;
  if (!*(_DWORD *)a3)
  {
    char v8 = v23;
    char v9 = v23 & 0xF;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 9) = v9;
    *(unsigned char *)(a1 + 8) = v8 & 0xF0;
    if ((*(unsigned char *)(a1 + 10) & 2) != 0)
    {
      if ((*(unsigned char *)(a1 + 10) & 0x10) != 0)
      {
        sub_244CC55C4((uint64_t)&v17, (void *)(a1 + 16));
        *(_OWORD *)a3 = v20;
        *(void *)(a3 + 16) = v21;
        if (*(_DWORD *)a3) {
          return;
        }
      }
      else
      {
        sub_244CC5558((uint64_t)&v17, &v22);
        *(_OWORD *)a3 = v20;
        *(void *)(a3 + 16) = v21;
        if (*(_DWORD *)a3) {
          return;
        }
        *(void *)(a1 + 16) = v22;
      }
    }
    *(void *)(a1 + 24) = 0;
    if (*(unsigned char *)(a1 + 10))
    {
      if ((*(unsigned char *)(a1 + 10) & 0x10) != 0)
      {
        sub_244CC55C4((uint64_t)&v17, (void *)(a1 + 24));
        *(_OWORD *)a3 = v20;
        *(void *)(a3 + 16) = v21;
        if (*(_DWORD *)a3) {
          return;
        }
      }
      else
      {
        sub_244CC5558((uint64_t)&v17, &v22);
        *(_OWORD *)a3 = v20;
        *(void *)(a3 + 16) = v21;
        if (*(_DWORD *)a3) {
          return;
        }
        *(void *)(a1 + 24) = v22;
      }
    }
    sub_244CC54EC((uint64_t)&v17, (_WORD *)(a1 + 40));
    *(_OWORD *)a3 = v20;
    *(void *)(a3 + 16) = v21;
    if (!*(_DWORD *)a3)
    {
      unint64_t v10 = *(unsigned __int16 *)(a1 + 40);
      unint64_t v11 = v19;
      if (v19 >= v10)
      {
        __int16 v14 = v18 - v17;
        *(void *)(a1 + 32) = v6 + v18 - v17;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        if (v11 > v10)
        {
          unsigned __int16 v15 = v10 + v14;
          *(void *)(a1 + 48) = v6 + v15;
          *(void *)(a1 + 56) = (unsigned __int16)(*(_WORD *)(*(void *)a2 + 24) - v15);
        }
        int v16 = *(_WORD **)(a1 + 64);
        if (v16) {
          sub_244CC8A0C(v16);
        }
        int v13 = 0;
        *(void *)(a1 + 64) = *(void *)a2;
        *(void *)a2 = 0;
        int v12 = 154;
      }
      else
      {
        int v12 = 138;
        int v13 = 13;
      }
      *(_DWORD *)a3 = v13;
      *(void *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
      *(_DWORD *)(a3 + 16) = v12;
    }
  }
}

uint64_t sub_244DD9120(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_244DD9170(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  snprintf(__str, 0xFFuLL, "%.*s", *(unsigned __int16 *)(a1 + 40), *(const char **)(a1 + 32));
  if (a2 == 4)
  {
    unint64_t v5 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "ReceiveInit", buf, 2u);
    }
    if (sub_244CC4E58(4u)) {
      goto LABEL_10;
    }
  }
  else if (a2 == 1)
  {
    unint64_t v4 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "SendInit", buf, 2u);
    }
    if (sub_244CC4E58(4u)) {
LABEL_10:
    }
      sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v6 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 9) | *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v21[0]) = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "  Proposed Transfer Control: 0x%X", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  char v8 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(unsigned __int8 *)(a1 + 10);
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v21[0]) = v9;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "  Range Control: 0x%X", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  unint64_t v10 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int16 *)(a1 + 12);
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v21[0]) = v11;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "  Proposed Max Block Size: %u", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  int v12 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 67109376;
    LODWORD(v21[0]) = HIDWORD(v13);
    WORD2(v21[0]) = 1024;
    *(_DWORD *)((char *)v21 + 6) = v13;
    _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "  Start Offset: 0x%08X%08X", buf, 0xEu);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  __int16 v14 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 67109376;
    LODWORD(v21[0]) = HIDWORD(v15);
    WORD2(v21[0]) = 1024;
    *(_DWORD *)((char *)v21 + 6) = v15;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "  Proposed Max Length: 0x%08X%08X", buf, 0xEu);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  int v16 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v21[0]) = v17;
    _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "  File Designator Length: %u", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v18 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    v21[0] = __str;
    _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_DEFAULT, "  File Designator: %s", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(4u);
  if (result) {
    return sub_244CC4DE0(0x26u, 4);
  }
  return result;
}

uint64_t sub_244DD967C(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 56);
  if (v2 != *(void *)(a2 + 56)) {
    return 0;
  }
  size_t v5 = *(unsigned __int16 *)(a1 + 40);
  if (v5 != *(unsigned __int16 *)(a2 + 40)) {
    return 0;
  }
  if (!*(_WORD *)(a1 + 40))
  {
    BOOL v6 = 1;
    if (v2) {
      goto LABEL_5;
    }
LABEL_7:
    BOOL v7 = 1;
    goto LABEL_8;
  }
  BOOL v6 = memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), v5) == 0;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_5:
  BOOL v7 = memcmp(*(const void **)(a1 + 48), *(const void **)(a2 + 48), v2) == 0;
LABEL_8:
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0;
  }
  BOOL v8 = *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12) && v6;
  return v8 & v7;
}

void *sub_244DD9768(uint64_t a1, void *a2)
{
  sub_244CC5784(a2, *(unsigned char *)(a1 + 8) | *(unsigned char *)(a1 + 9) & 0xF);
  sub_244CC57A8(a2, *(unsigned __int16 *)(a1 + 10), 2);
  unint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    sub_244CC572C(a2, v4, *(void *)(a1 + 24));
  }
  return a2;
}

void sub_244DD97CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v16 = 0;
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  uint64_t v7 = *(void *)(*(void *)a2 + 24);
  uint64_t v11 = v6;
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  LODWORD(v14) = 0;
  *((void *)&v14 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v15) = 330;
  if (!v6) {
    uint64_t v13 = 0;
  }
  sub_244CC5424((uint64_t)&v11, &v16);
  sub_244CC54EC((uint64_t)&v11, (_WORD *)(a1 + 10));
  *(_OWORD *)a3 = v14;
  *(void *)(a3 + 16) = v15;
  if (!*(_DWORD *)a3)
  {
    char v8 = v16;
    *(unsigned char *)(a1 + 9) = v16 & 0xF;
    *(unsigned char *)(a1 + 8) = v8 & 0xF0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v9 = v13;
    if (v13)
    {
      *(void *)(a1 + 16) = v6 + v12 - v11;
      *(void *)(a1 + 24) = v9;
    }
    unint64_t v10 = *(_WORD **)(a1 + 32);
    if (v10) {
      sub_244CC8A0C(v10);
    }
    *(void *)(a1 + 32) = *(void *)a2;
    *(void *)a2 = 0;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
    *(_DWORD *)(a3 + 16) = 256;
  }
}

uint64_t sub_244DD98DC(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_244DD992C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t v2 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "SendAccept", buf, 2u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v3 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 9) | *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "  Transfer Control: 0x%X", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  size_t v5 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int16 *)(a1 + 10);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v6;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "  Max Block Size: %u", buf, 8u);
  }
  uint64_t result = sub_244CC4E58(4u);
  if (result) {
    return sub_244CC4DE0(0x26u, 4);
  }
  return result;
}

BOOL sub_244DD9B00(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 24);
  if (v2 != *(void *)(a2 + 24)) {
    return 0;
  }
  BOOL v5 = !v2 || memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v2) == 0;
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
  {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10)) {
    return v5;
  }
  return 0;
}

void *sub_244DD9B8C(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  if (HIDWORD(v4))
  {
    char v6 = (v5 != 0) | 2;
    BOOL v7 = 1;
LABEL_7:
    v6 |= 0x10u;
    goto LABEL_8;
  }
  unint64_t v8 = HIDWORD(v5);
  BOOL v7 = HIDWORD(v5) != 0;
  BOOL v9 = v5 != 0;
  if (v4) {
    char v6 = v9 | 2;
  }
  else {
    char v6 = v9;
  }
  if (v8) {
    goto LABEL_7;
  }
LABEL_8:
  sub_244CC5784(a2, *(unsigned char *)(a1 + 8) | *(unsigned char *)(a1 + 10) & 0xF);
  sub_244CC5784(a2, v6);
  sub_244CC57A8(a2, *(unsigned __int16 *)(a1 + 12), 2);
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    unint64_t v11 = *(void *)(a1 + 24);
    if (!v11) {
      goto LABEL_18;
    }
    if (v7) {
      goto LABEL_14;
    }
LABEL_16:
    unint64_t v11 = v11;
    uint64_t v12 = a2;
    uint64_t v13 = 4;
    goto LABEL_17;
  }
  if (!v7)
  {
    sub_244CC57A8(a2, *(void *)(a1 + 16), 4);
    unint64_t v11 = *(void *)(a1 + 24);
    if (!v11) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  sub_244CC57A8(a2, v10, 8);
  unint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
LABEL_14:
    uint64_t v12 = a2;
    uint64_t v13 = 8;
LABEL_17:
    sub_244CC57A8(v12, v11, v13);
  }
LABEL_18:
  long long v14 = *(const void **)(a1 + 32);
  if (v14) {
    sub_244CC572C(a2, v14, *(void *)(a1 + 40));
  }
  return a2;
}

double sub_244DD9CB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v19 = 0;
  unsigned int v18 = 0;
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  uint64_t v7 = *(void *)(*(void *)a2 + 24);
  uint64_t v13 = v6;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  LODWORD(v16) = 0;
  *((void *)&v16 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v17) = 330;
  if (!v6) {
    uint64_t v15 = 0;
  }
  sub_244CC5424((uint64_t)&v13, &v19);
  sub_244CC5424((uint64_t)&v13, (unsigned char *)(a1 + 9));
  sub_244CC54EC((uint64_t)&v13, (_WORD *)(a1 + 12));
  double result = *(double *)&v16;
  *(_OWORD *)a3 = v16;
  *(void *)(a3 + 16) = v17;
  if (!*(_DWORD *)a3)
  {
    char v9 = v19;
    char v10 = v19 & 0xF;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 10) = v10;
    *(unsigned char *)(a1 + 8) = v9 & 0xF0;
    if ((*(unsigned char *)(a1 + 9) & 2) != 0)
    {
      if ((*(unsigned char *)(a1 + 9) & 0x10) != 0)
      {
        sub_244CC55C4((uint64_t)&v13, (void *)(a1 + 16));
        double result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(void *)(a3 + 16) = v17;
        if (*(_DWORD *)a3) {
          return result;
        }
      }
      else
      {
        sub_244CC5558((uint64_t)&v13, &v18);
        double result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(void *)(a3 + 16) = v17;
        if (*(_DWORD *)a3) {
          return result;
        }
        *(void *)(a1 + 16) = v18;
      }
    }
    *(void *)(a1 + 24) = 0;
    if (*(unsigned char *)(a1 + 9))
    {
      if ((*(unsigned char *)(a1 + 9) & 0x10) != 0)
      {
        sub_244CC55C4((uint64_t)&v13, (void *)(a1 + 24));
        double result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(void *)(a3 + 16) = v17;
        if (*(_DWORD *)a3) {
          return result;
        }
      }
      else
      {
        sub_244CC5558((uint64_t)&v13, &v18);
        double result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(void *)(a3 + 16) = v17;
        if (*(_DWORD *)a3) {
          return result;
        }
        *(void *)(a1 + 24) = v18;
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v11 = v15;
    if (v15)
    {
      *(void *)(a1 + 32) = v6 + v14 - v13;
      *(void *)(a1 + 40) = v11;
    }
    uint64_t v12 = *(_WORD **)(a1 + 48);
    if (v12) {
      sub_244CC8A0C(v12);
    }
    *(void *)(a1 + 48) = *(void *)a2;
    *(void *)a2 = 0;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
    *(_DWORD *)(a3 + 16) = 393;
  }
  return result;
}

uint64_t sub_244DD9EA4(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_244DD9EF4(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  size_t v2 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "ReceiveAccept", buf, 2u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v3 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 10) | *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "  Transfer Control: 0x%X", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  unint64_t v5 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 9);
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = v6;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "  Range Control: 0x%X", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v7 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int16 *)(a1 + 12);
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = v8;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "  Max Block Size: %u", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  char v9 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 67109376;
    int v13 = HIDWORD(v10);
    __int16 v14 = 1024;
    int v15 = v10;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "  Length: 0x%08X%08X", buf, 0xEu);
  }
  uint64_t result = sub_244CC4E58(4u);
  if (result) {
    return sub_244CC4DE0(0x26u, 4);
  }
  return result;
}

BOOL sub_244DDA1D8(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  BOOL v5 = !v2 || memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), v2) == 0;
  if (*(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12))
  {
    return 0;
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return v5;
  }
  return 0;
}

void *sub_244DDA284(uint64_t a1, void *a2)
{
  return sub_244CC57A8(a2, *(unsigned int *)(a1 + 8), 4);
}

double sub_244DDA298@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 24);
  v6[0] = *(void *)(*(void *)a2 + 8);
  v6[1] = v6[0];
  uint64_t v7 = v4;
  LODWORD(v8) = 0;
  *((void *)&v8 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v9) = 330;
  if (!v6[0]) {
    uint64_t v7 = 0;
  }
  sub_244CC5558((uint64_t)v6, (_DWORD *)(a1 + 8));
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_244DDA318(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v2) + 16);
}

BOOL sub_244DDA368(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t sub_244DDA37C(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 20:
      uint64_t v4 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "BlockAckEOF", buf, 2u);
      }
      if (sub_244CC4E58(4u)) {
        goto LABEL_15;
      }
      break;
    case 19:
      BOOL v5 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "BlockAck", buf, 2u);
      }
      if (sub_244CC4E58(4u)) {
        goto LABEL_15;
      }
      break;
    case 16:
      uint64_t v3 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "BlockQuery", buf, 2u);
      }
      if (sub_244CC4E58(4u)) {
LABEL_15:
      }
        sub_244CC4DE0(0x26u, 4);
      break;
  }
  int v6 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "  Block Counter: %u", buf, 8u);
  }
  uint64_t result = sub_244CC4E58(4u);
  if (result) {
    return sub_244CC4DE0(0x26u, 4);
  }
  return result;
}

void *sub_244DDA590(uint64_t a1, void *a2)
{
  sub_244CC57A8(a2, *(unsigned int *)(a1 + 8), 4);
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    sub_244CC572C(a2, v4, *(void *)(a1 + 24));
  }
  return a2;
}

void sub_244DDA5DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  uint64_t v7 = *(void *)(*(void *)a2 + 24);
  uint64_t v10 = v6;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  LODWORD(v13) = 0;
  *((void *)&v13 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v14) = 330;
  if (!v6) {
    uint64_t v12 = 0;
  }
  sub_244CC5558((uint64_t)&v10, (_DWORD *)(a1 + 8));
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  if (!*(_DWORD *)a3)
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v8 = v12;
    if (v12)
    {
      *(void *)(a1 + 16) = v6 + v11 - v10;
      *(void *)(a1 + 24) = v8;
    }
    uint64_t v9 = *(_WORD **)(a1 + 32);
    if (v9) {
      sub_244CC8A0C(v9);
    }
    *(void *)(a1 + 32) = *(void *)a2;
    *(void *)a2 = 0;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
    *(_DWORD *)(a3 + 16) = 510;
  }
}

uint64_t sub_244DDA6C8(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_244DDA718(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2 == 18)
  {
    uint64_t v4 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "BlockEOF", buf, 2u);
    }
    if (sub_244CC4E58(4u)) {
      goto LABEL_10;
    }
  }
  else if (a2 == 17)
  {
    uint64_t v3 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "Block", buf, 2u);
    }
    if (sub_244CC4E58(4u)) {
LABEL_10:
    }
      sub_244CC4DE0(0x26u, 4);
  }
  BOOL v5 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 67109120;
    int v11 = v6;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "  Block Counter: %u", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v7 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 67109120;
    int v11 = v8;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "  Data Length: %u", buf, 8u);
  }
  uint64_t result = sub_244CC4E58(4u);
  if (result) {
    return sub_244CC4DE0(0x26u, 4);
  }
  return result;
}

BOOL sub_244DDA948(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 24);
  if (v2 != *(void *)(a2 + 24)) {
    return 0;
  }
  if (v2) {
    BOOL v5 = memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v2) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && v5;
}

void *sub_244DDA9B4(uint64_t a1, void *a2)
{
  return a2;
}

double sub_244DDA9FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)a2 + 24);
  v7[0] = *(void *)(*(void *)a2 + 8);
  v7[1] = v7[0];
  uint64_t v8 = v5;
  LODWORD(v9) = 0;
  *((void *)&v9 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v10) = 330;
  if (!v7[0]) {
    uint64_t v8 = 0;
  }
  sub_244CC5558((uint64_t)v7, (_DWORD *)(a1 + 8));
  sub_244CC55C4((uint64_t)v7, (void *)(a1 + 16));
  double result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(void *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_244DDAA94(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v2) + 16);
}

BOOL sub_244DDAAE4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_244DDAB10(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  size_t v2 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "BlockQueryWithSkip", buf, 2u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v3 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "  Block Counter: %u", buf, 8u);
  }
  if (sub_244CC4E58(4u)) {
    sub_244CC4DE0(0x26u, 4);
  }
  uint64_t v5 = sub_244CC8484(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 67109376;
    int v9 = HIDWORD(v6);
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "  Bytes To Skip: 0x%08X%08X", buf, 0xEu);
  }
  uint64_t result = sub_244CC4E58(4u);
  if (result) {
    return sub_244CC4DE0(0x26u, 4);
  }
  return result;
}

void *sub_244DDACE0(void *a1)
{
  *a1 = &unk_26F958EA0;
  size_t v2 = (_WORD *)a1[8];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[8] = 0;
  return a1;
}

void sub_244DDAD30(void *a1)
{
  *a1 = &unk_26F958EA0;
  size_t v2 = (_WORD *)a1[8];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[8] = 0;

  JUMPOUT(0x245695FA0);
}

void *sub_244DDADA0(void *a1)
{
  *a1 = &unk_26F958F08;
  size_t v2 = (_WORD *)a1[4];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[4] = 0;
  return a1;
}

void sub_244DDADF0(void *a1)
{
  *a1 = &unk_26F958F08;
  size_t v2 = (_WORD *)a1[4];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[4] = 0;

  JUMPOUT(0x245695FA0);
}

void *sub_244DDAE60(void *a1)
{
  *a1 = &unk_26F958F60;
  size_t v2 = (_WORD *)a1[6];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[6] = 0;
  return a1;
}

void sub_244DDAEB0(void *a1)
{
  *a1 = &unk_26F958F60;
  size_t v2 = (_WORD *)a1[6];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[6] = 0;

  JUMPOUT(0x245695FA0);
}

void *sub_244DDAF20(void *a1)
{
  *a1 = &unk_26F959010;
  size_t v2 = (_WORD *)a1[4];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[4] = 0;
  return a1;
}

void sub_244DDAF70(void *a1)
{
  *a1 = &unk_26F959010;
  size_t v2 = (_WORD *)a1[4];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[4] = 0;

  JUMPOUT(0x245695FA0);
}

void sub_244DDAFE0()
{
}

void sub_244DDAFF4(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 43);
  int v4 = sub_244CC8484(0xCu, "BDX");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = sub_244DDF7A0((uint64_t)a2, *a2);
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v52 = (void *)v5;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "Got an event %s", buf, 0xCu);
  }
  if (sub_244CC4E58(3u))
  {
    sub_244DDF7A0((uint64_t)a2, *a2);
    sub_244CC4DE0(0xCu, 3);
  }
  switch(*a2)
  {
    case 0u:
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      return;
    case 1u:
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      sub_244DDBCC4(a1, (uint64_t)a2, (uint64_t)&v48);
      if (v48)
      {
        uint64_t v6 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          long long v27 = v48;
          uint64_t v28 = v49;
          uint64_t v7 = sub_244CB7B34((const char **)&v27, 1);
          *(_DWORD *)uint64_t buf = 136315650;
          uint64_t v52 = v7;
          __int16 v53 = 2080;
          uint64_t v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
          __int16 v55 = 1024;
          int v56 = 66;
          _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        if (sub_244CC4E58(1u))
        {
          long long v25 = v48;
          uint64_t v26 = v49;
          sub_244CB7B34((const char **)&v25, 1);
          sub_244CC4DE0(0, 1);
        }
      }
      if (a2[8]) {
        return;
      }
      if (a2[9] != 2) {
        return;
      }
      if (*((unsigned char *)a2 + 20) != 20) {
        return;
      }
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      LODWORD(v23) = 0;
      *((void *)&v23 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      int v24 = 70;
      sub_244DDBA4C(a1, &v23, (uint64_t)&v48);
      if (!v48) {
        return;
      }
      uint64_t v8 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        long long v21 = v48;
        uint64_t v22 = v49;
        int v9 = sub_244CB7B34((const char **)&v21, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        uint64_t v52 = v9;
        __int16 v53 = 2080;
        uint64_t v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v55 = 1024;
        int v56 = 70;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_244CC4E58(1u)) {
        return;
      }
      long long v19 = v48;
      uint64_t v20 = v49;
      sub_244CB7B34((const char **)&v19, 1);
      break;
    case 2u:
      sub_244DDB980(a1, v50);
      __int16 v10 = (int *)v50;
      goto LABEL_21;
    case 4u:
      sub_244DDBC18(a1, (uint64_t)a2, (uint64_t)v29);
      __int16 v10 = (int *)v29;
LABEL_21:
      sub_244DDB700(a1, v10);
      return;
    case 9u:
      int v11 = sub_244CC8484(0xCu, "BDX");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = a2[8];
        *(_DWORD *)uint64_t buf = 67109120;
        LODWORD(v52) = v12;
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Got StatusReport %x", buf, 8u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0xCu, 1);
      }
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      LODWORD(v46) = 172;
      *((void *)&v46 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      int v47 = 54;
      sub_244DDBA4C(a1, &v46, (uint64_t)&v48);
      if (!v48) {
        return;
      }
      long long v13 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v44 = v48;
        uint64_t v45 = v49;
        uint64_t v14 = sub_244CB7B34((const char **)&v44, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        uint64_t v52 = v14;
        __int16 v53 = 2080;
        uint64_t v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v55 = 1024;
        int v56 = 54;
        _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_244CC4E58(1u)) {
        return;
      }
      long long v42 = v48;
      uint64_t v43 = v49;
      sub_244CB7B34((const char **)&v42, 1);
      break;
    case 0xAu:
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      LODWORD(v40) = 172;
      *((void *)&v40 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      int v41 = 57;
      sub_244DDBA4C(a1, &v40, (uint64_t)&v48);
      if (!v48) {
        return;
      }
      int v15 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        long long v38 = v48;
        uint64_t v39 = v49;
        uint64_t v16 = sub_244CB7B34((const char **)&v38, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        uint64_t v52 = v16;
        __int16 v53 = 2080;
        uint64_t v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v55 = 1024;
        int v56 = 57;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_244CC4E58(1u)) {
        return;
      }
      long long v36 = v48;
      uint64_t v37 = v49;
      sub_244CB7B34((const char **)&v36, 1);
      break;
    case 0xBu:
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      LODWORD(v34) = 50;
      *((void *)&v34 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      int v35 = 60;
      sub_244DDBA4C(a1, &v34, (uint64_t)&v48);
      if (!v48) {
        return;
      }
      uint64_t v17 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        long long v32 = v48;
        uint64_t v33 = v49;
        unsigned int v18 = sub_244CB7B34((const char **)&v32, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        uint64_t v52 = v18;
        __int16 v53 = 2080;
        uint64_t v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v55 = 1024;
        int v56 = 60;
        _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_244CC4E58(1u)) {
        return;
      }
      long long v30 = v48;
      uint64_t v31 = v49;
      sub_244CB7B34((const char **)&v30, 1);
      break;
    default:
      sub_24479F5F0();
  }
  sub_244CC4DE0(0, 1);
}

void sub_244DDB700(uint64_t a1, int *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v2 = *a2;
  if (*a2)
  {
    long long v22 = *(_OWORD *)(a2 + 1);
    LODWORD(v23) = a2[5];
    uint64_t v5 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v19 = v2;
      long long v20 = v22;
      int v21 = v23;
      uint64_t v6 = sub_244CB7B34((const char **)&v19, 1);
      *(_DWORD *)uint64_t buf = 136315650;
      long long v25 = v6;
      __int16 v26 = 2080;
      long long v27 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      __int16 v28 = 1024;
      int v29 = 165;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_244CC4E58(1u))
    {
      int v16 = v2;
      long long v17 = v22;
      int v18 = v23;
      sub_244CB7B34((const char **)&v16, 1);
      sub_244CC4DE0(0, 1);
    }
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    long long v14 = *(_OWORD *)a2;
    uint64_t v15 = *((void *)a2 + 2);
    __int16 v7 = sub_244DDFAF0((int *)&v14);
    sub_244DDE468(a1 + 16, v7, (uint64_t)&v22);
    if (v22)
    {
      uint64_t v8 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        long long v12 = v22;
        uint64_t v13 = v23;
        int v9 = sub_244CB7B34((const char **)&v12, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        long long v25 = v9;
        __int16 v26 = 2080;
        long long v27 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v28 = 1024;
        int v29 = 166;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        long long v10 = v22;
        uint64_t v11 = v23;
        sub_244CB7B34((const char **)&v10, 1);
        sub_244CC4DE0(0, 1);
      }
    }
  }
}

uint64_t sub_244DDB980@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 136);
  if (*(void *)(a1 + 368))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = (uint64_t)sub_244DDC4A4((void *)(a1 + 280), a1 + 16, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 368) + 16);
      return v5();
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    *((_DWORD *)a2 + 4) = 137;
  }
  return result;
}

void sub_244DDBA4C(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 145);
  uint64_t v6 = *(void *)(a1 + 368);
  if (v6)
  {
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    (*(void (**)(long long *__return_ptr))(*(void *)v6 + 24))(&v17);
    if (v17)
    {
      __int16 v7 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        long long v13 = v17;
        uint64_t v14 = v18;
        uint64_t v8 = sub_244CB7B34((const char **)&v13, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        long long v20 = v8;
        __int16 v21 = 2080;
        long long v22 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v23 = 1024;
        int v24 = 148;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        long long v11 = v17;
        uint64_t v12 = v18;
        sub_244CB7B34((const char **)&v11, 1);
        sub_244CC4DE0(0, 1);
      }
    }
    sub_244DDC064(a1);
    int v9 = 0;
    int v10 = 150;
  }
  else
  {
    int v10 = 146;
    int v9 = 3;
  }
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
  *(_DWORD *)(a3 + 16) = v10;
}

uint64_t sub_244DDBC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 155);
  if (*(void *)(a1 + 368))
  {
    sub_2446C1098(v7, *(void *)(a2 + 16), *(void *)(a2 + 24));
    return (*(uint64_t (**)(void, uint64_t, void *))(**(void **)(a1 + 368) + 32))(*(void *)(a1 + 368), a1 + 280, v7);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    *(_DWORD *)(a3 + 16) = 156;
  }
  return result;
}

void sub_244DDBCC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 115);
  uint64_t v6 = *(void *)(a1 + 256);
  if (!v6)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    *(_DWORD *)(a3 + 16) = 117;
    return;
  }
  if (*(unsigned __int16 *)(a2 + 16) | *(unsigned __int16 *)(a2 + 18))
  {
    int v7 = *(unsigned __int8 *)(a2 + 20);
  }
  else
  {
    int v7 = *(unsigned __int8 *)(a2 + 20);
    if (v7 == 64)
    {
      __int16 v8 = 0;
      goto LABEL_8;
    }
  }
  __int16 v8 = 1;
LABEL_8:
  __int16 v12 = v8;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244D645BC(v6, *(_DWORD *)(a2 + 16), v7, (uint64_t *)(a2 + 8), &v12, a3);
  if (*(_DWORD *)a3)
  {
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 16);
    sub_244DDBA4C(a1, &v10, (uint64_t)v9);
  }
}

void sub_244DDBDA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD **a4@<X3>, long long *a5@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 91);
  if (!a2)
  {
    *(_DWORD *)a5 = 3;
    *((void *)a5 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    int v12 = 93;
LABEL_20:
    *((_DWORD *)a5 + 4) = v12;
    return;
  }
  if (*(_WORD *)(a3 + 4)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(unsigned __int16 *)(a3 + 6) == 2;
  }
  if (!v10 || *(unsigned char *)a3 != 1) {
    goto LABEL_9;
  }
  sub_24479B4A8(a2, buf);
  int v13 = *(unsigned __int8 *)(*(void *)buf + 24);
  (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
  sub_24479B4A8(a2, buf);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)buf + 48))(*(void *)buf);
  (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
  if (!v13)
  {
    *(_DWORD *)a5 = 47;
    *((void *)a5 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    int v12 = 100;
    goto LABEL_20;
  }
  if (!v14)
  {
    *(_DWORD *)a5 = 47;
    *((void *)a5 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    int v12 = 101;
    goto LABEL_20;
  }
  *(unsigned char *)(a1 + 336) = v13;
  *(void *)(a1 + 344) = v14;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  sub_244DE0318((void *)a1, *(void *)(a1 + 360), 0, 16, 1024, 300000, 50, a5);
  if (!*(_DWORD *)a5)
  {
LABEL_9:
    sub_244DDFC98(a1, a2, (unsigned __int8 *)a3, a4, a5);
    return;
  }
  long long v15 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    long long v19 = *a5;
    uint64_t v20 = *((void *)a5 + 2);
    uint64_t v16 = sub_244CB7B34((const char **)&v19, 1);
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v16;
    __int16 v22 = 2080;
    __int16 v23 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    __int16 v24 = 1024;
    int v25 = 107;
    _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
  }
  if (sub_244CC4E58(1u))
  {
    long long v17 = *a5;
    uint64_t v18 = *((void *)a5 + 2);
    sub_244CB7B34((const char **)&v17, 1);
    sub_244CC4DE0(0, 1);
  }
}

double sub_244DDC064(uint64_t a1)
{
  sub_244D6A434("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 171);
  sub_244DDFBA0(a1);
  uint64_t v2 = *(void *)(a1 + 256);
  if (v2)
  {
    *(unsigned char *)(a1 + 352) = 1;
    sub_244D64B58(v2);
    *(unsigned char *)(a1 + 352) = 0;
    *(void *)(a1 + 256) = 0;
  }

  return sub_244DDC76C(a1 + 280);
}

void sub_244DDC0CC(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 360) + 80))(buf);
  if (!*(unsigned char *)(a1 + 352))
  {
    *(void *)(a1 + 256) = 0;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    LODWORD(v8) = 172;
    *((void *)&v8 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    int v9 = 203;
    sub_244DDBA4C(a1, &v8, (uint64_t)&v10);
    if (v10)
    {
      uint64_t v2 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        long long v6 = v10;
        uint64_t v7 = v11;
        uint64_t v3 = sub_244CB7B34((const char **)&v6, 1);
        *(_DWORD *)uint64_t buf = 136315650;
        int v13 = v3;
        __int16 v14 = 2080;
        long long v15 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        __int16 v16 = 1024;
        int v17 = 203;
        _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        long long v4 = v10;
        uint64_t v5 = v11;
        sub_244CB7B34((const char **)&v4, 1);
        sub_244CC4DE0(0, 1);
      }
    }
  }
}

BOOL sub_244DDC280(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (!v2 || !*(unsigned char *)(v2 + 88)) {
    return 0;
  }
  sub_24479B4A8(v2, &v6);
  BOOL v4 = v6[24] == a2;
  (*(void (**)(void))(*(void *)v6 + 32))();
  return v4;
}

void *sub_244DDC304(void *a1)
{
  *a1 = &unk_26F9590C0;
  a1[1] = &unk_26F959110;
  sub_244DDC064((uint64_t)a1);

  return sub_244DDFB2C(a1);
}

void sub_244DDC378(void *a1)
{
  *a1 = &unk_26F9590C0;
  a1[1] = &unk_26F959110;
  sub_244DDC064((uint64_t)a1);
  sub_244DDFB2C(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244DDC400(void *a1)
{
  uint64_t v1 = a1 - 1;
  *(a1 - 1) = &unk_26F9590C0;
  *a1 = &unk_26F959110;
  sub_244DDC064((uint64_t)(a1 - 1));

  return sub_244DDFB2C(v1);
}

void sub_244DDC474(uint64_t a1)
{
}

uint64_t sub_244DDC47C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 376) + 24))();
}

void *sub_244DDC4A4@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (result[6])
    {
      int v4 = 31;
      int v5 = 3;
    }
    else
    {
      size_t v6 = *(unsigned __int16 *)(a2 + 88);
      if (v6 > 0x20)
      {
        int v4 = 36;
        int v5 = 30;
      }
      else
      {
        uint64_t v7 = *(const void **)(a2 + 80);
        result[6] = a2;
        *((unsigned char *)result + 8) = v6;
        uint64_t result = memcpy((char *)result + 9, v7, v6);
        int v5 = 0;
        int v4 = 41;
      }
    }
  }
  else
  {
    int v4 = 30;
    int v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void sub_244DDC538(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244DDC5C8(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      v5[0] = 16;
      __int16 v6 = *(_WORD *)(v4 + 32);
      long long v7 = *(_OWORD *)(v4 + 16);
      sub_244DDD6EC(v4, v5, (uint64_t)a2);
    }
    else
    {
      *(_DWORD *)a2 = 3;
      a2[1] = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      *((_DWORD *)a2 + 4) = 47;
    }
  }
}

BOOL sub_244DDC5C8@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = sub_244D6A434("src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp", 89);
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(void *)(a1 + 64))
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      int v5 = 93;
    }
    else
    {
      *(_DWORD *)a2 = 3;
      *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      int v5 = 91;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
    int v5 = 90;
  }
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

void sub_244DDC650(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244DDC5C8(a1, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (*(void *)(a1 + 48))
    {
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      __int16 v6 = sub_244DDFAF0((int *)&v7);
      sub_244DDE468(*(void *)(a1 + 48), v6, (uint64_t)a3);
    }
    else
    {
      *(_DWORD *)a3 = 3;
      a3[1] = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      *((_DWORD *)a3 + 4) = 61;
    }
  }
}

void sub_244DDC6EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244DDC5C8(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      sub_244DDE288(v4, (uint64_t)a2);
    }
    else
    {
      *(_DWORD *)a2 = 3;
      a2[1] = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      *((_DWORD *)a2 + 4) = 70;
    }
  }
}

double sub_244DDC76C(uint64_t a1)
{
  sub_244D6A434("src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp", 89);
  if (*(unsigned char *)(a1 + 56) && *(void *)(a1 + 64))
  {
    if (*(void *)(a1 + 48))
    {
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return result;
}

void sub_244DDC7D0()
{
}

uint64_t sub_244DDC7E4(uint64_t a1)
{
  sub_24479476C(&v2, a1 + 9, *(unsigned __int8 *)(a1 + 8));
  return v2;
}

uint64_t sub_244DDC814(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

int *sub_244DDC81C@<X0>(int *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    if (a3)
    {
      *((void *)result + 1) = a2;
      *((void *)result + 2) = a3;
      return sub_244D663E0(a3, 0x20000, 1u, (uint64_t)result, a4);
    }
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/protocols/bdx/BdxTransferServer.cpp";
    int v4 = 27;
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/protocols/bdx/BdxTransferServer.cpp";
    int v4 = 26;
  }
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

void *sub_244DDC878@<X0>(void *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v10 = a1[1];
  uint64_t v11 = v5;
  uint64_t v9 = a1 + 4;
  double result = sub_244DDCD60(a1 + 5, &v11, (uint64_t *)&v9, &v10);
  if (result)
  {
    int v7 = 0;
    *a2 = result;
    int v8 = 41;
  }
  else
  {
    int v8 = 38;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferServer.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void *sub_244DDC8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = a3;
  return sub_244DDCD60((unint64_t *)(a1 + 8), &v6, &v4, &v5);
}

void sub_244DDC938(uint64_t a1, void (***a2)(void))
{
}

void sub_244DDC940(uint64_t a1, void (***a2)(void))
{
}

uint64_t sub_244DDC948(uint64_t result)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)(result + 8);
  if (*(void *)(result + 8))
  {
    double result = *(void *)(result + 16);
    if (result)
    {
      long long v8 = 0uLL;
      uint64_t v9 = 0;
      double result = (uint64_t)sub_244D664A4((int *)result, 0x20000, 1u, (uint64_t)&v8);
      if (v8)
      {
        uint64_t v2 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        {
          long long v6 = v8;
          uint64_t v7 = v9;
          uint64_t v3 = sub_244CB7B34((const char **)&v6, 1);
          *(_DWORD *)uint64_t buf = 136315650;
          uint64_t v11 = v3;
          __int16 v12 = 2080;
          int v13 = "src/protocols/bdx/BdxTransferServer.cpp";
          __int16 v14 = 1024;
          int v15 = 55;
          _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        double result = sub_244CC4E58(1u);
        if (result)
        {
          long long v4 = v8;
          uint64_t v5 = v9;
          sub_244CB7B34((const char **)&v4, 1);
          double result = sub_244CC4DE0(0, 1);
        }
      }
      *uint64_t v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

void sub_244DDCAB8(void *a1)
{
  sub_244DDCAF0(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244DDCAF0(void *a1)
{
  *a1 = &unk_26F9591D8;
  sub_244DDC948((uint64_t)a1);
  a1[4] = &unk_26F959228;
  sub_244CC6478(a1 + 7, (uint64_t)(a1 + 5), (unsigned int (*)(uint64_t))sub_244DDCC64);
  sub_244DDCD30(a1 + 5);
  return a1;
}

void *sub_244DDCB7C(void *a1)
{
  *a1 = &unk_26F959228;
  sub_244CC6478(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_244DDCC64);
  sub_244DDCD30(a1 + 1);
  return a1;
}

void sub_244DDCBE0(void *a1)
{
  *a1 = &unk_26F959228;
  sub_244CC6478(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_244DDCC64);
  sub_244DDCD30(a1 + 1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DDCC64(uint64_t a1, void (***a2)(void))
{
  return 0;
}

void sub_244DDCC80(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    long long v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E2B608();
    }
    uint64_t v5 = v4;
    *long long v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

uint64_t *sub_244DDCD30(uint64_t *result)
{
  if (!byte_268EC3510)
  {
    if (*result) {
      sub_244E2B6C0(result);
    }
  }
  return result;
}

void *sub_244DDCD60(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  long long v8 = sub_244CC4D84(0x180uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    sub_244DDCE10((uint64_t)v8, *a2, *a3, *a4);
    uint64_t v10 = sub_244CC4D84(0x18uLL);
    if (v10)
    {
      *uint64_t v10 = v9;
      v10[1] = a1 + 2;
      void v10[2] = 0;
      void v10[2] = a1[4];
      *(void *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      unint64_t v11 = a1[1];
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11) {
        a1[1] = v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_244DDCE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26F959280;
  *(void *)(a1 + 8) = &unk_26F9592D0;
  sub_244DDCF1C(a1 + 16);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 500;
  *(void *)a1 = &unk_26F9590C0;
  *(void *)(a1 + 8) = &unk_26F959110;
  *(void *)(a1 + 280) = &unk_26F959160;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a4;
  *(void *)(a1 + 368) = a2;
  *(void *)(a1 + 376) = a3;
  return a1;
}

double sub_244DDCF1C(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(_WORD *)(a1 + 6) = 0;
  *(unsigned char *)(a1 + 9) = 0;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 58) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 114) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 172) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 180) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 232) = 1;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

void sub_244DDCF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = 0;
  long long v6 = *(_WORD **)(a2 + 8);
  if (v6) {
    sub_244CC8A0C(v6);
  }
  *(_WORD *)(a2 + 16) = 95;
  *(void *)(a2 + 8) = 0;
  if (*(unsigned char *)(a1 + 232))
  {
    *(void *)(a1 + 224) = a3;
    *(unsigned char *)(a1 + 232) = 0;
  }
  if (*(unsigned char *)(a1 + 233) && a3 - *(void *)(a1 + 224) >= (unint64_t)*(unsigned int *)(a1 + 216))
  {
    *(_WORD *)a2 = 11;
    uint64_t v7 = *(_WORD **)(a2 + 8);
    if (v7) {
      sub_244CC8A0C(v7);
    }
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 95;
    *(unsigned char *)(a1 + 2) = 8;
    *(unsigned char *)(a1 + 233) = 0;
  }
  else
  {
    switch(*(_WORD *)a1)
    {
      case 1:
        unint64_t v8 = *(unsigned int *)(a1 + 176) | ((unint64_t)*(unsigned __int16 *)(a1 + 180) << 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        *(_WORD *)a2 = 1;
        uint64_t v10 = *(_WORD **)(a2 + 8);
        if (v10) {
          sub_244CC8A0C(v10);
        }
        *(void *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 16) = v8;
        *(unsigned char *)(a2 + 20) = BYTE4(v8);
        *(void *)(a1 + 224) = a3;
        break;
      case 2:
        long long v23 = *(_OWORD *)(a1 + 56);
        long long v24 = *(_OWORD *)(a1 + 72);
        long long v25 = *(_OWORD *)(a1 + 88);
        uint64_t v26 = *(void *)(a1 + 104);
        uint64_t v11 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        __int16 v12 = 2;
        goto LABEL_18;
      case 3:
        long long v23 = *(_OWORD *)(a1 + 112);
        long long v24 = *(_OWORD *)(a1 + 128);
        *(void *)&long long v25 = *(void *)(a1 + 144);
        uint64_t v11 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        __int16 v12 = 3;
        goto LABEL_18;
      case 4:
        long long v23 = *(_OWORD *)(a1 + 152);
        *(void *)&long long v24 = *(void *)(a1 + 168);
        uint64_t v11 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        __int16 v12 = 4;
LABEL_18:
        *(_WORD *)a2 = v12;
        int v13 = *(_WORD **)(a2 + 8);
        if (v13) {
          sub_244CC8A0C(v13);
        }
        *(void *)(a2 + 8) = v11;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v24;
        *(_OWORD *)(a2 + 48) = v25;
        *(void *)(a2 + 64) = v26;
        break;
      case 5:
        __int16 v14 = 5;
        goto LABEL_27;
      case 6:
        uint64_t v15 = *(void *)(a1 + 184);
        *(_WORD *)a2 = 6;
        uint64_t v16 = *(_WORD **)(a2 + 8);
        if (v16) {
          sub_244CC8A0C(v16);
        }
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = v15;
        break;
      case 7:
        __int16 v14 = 7;
        goto LABEL_27;
      case 8:
        __int16 v14 = 8;
LABEL_27:
        *(_WORD *)a2 = v14;
        goto LABEL_28;
      case 9:
        __int16 v18 = *(_WORD *)(a1 + 48);
        __int16 v19 = 9;
        goto LABEL_33;
      case 0xA:
        __int16 v18 = *(_WORD *)(a1 + 48);
        __int16 v19 = 10;
LABEL_33:
        *(_WORD *)a2 = v19;
        uint64_t v20 = *(_WORD **)(a2 + 8);
        if (v20) {
          sub_244CC8A0C(v20);
        }
        *(void *)(a2 + 8) = 0;
        *(_WORD *)(a2 + 16) = v18;
        break;
      default:
        *(_WORD *)a2 = 0;
LABEL_28:
        int v17 = *(_WORD **)(a2 + 8);
        if (v17) {
          sub_244CC8A0C(v17);
        }
        *(void *)(a2 + 8) = 0;
        *(_WORD *)(a2 + 16) = 95;
        break;
    }
    if (!*(_WORD *)a2 && *(unsigned char *)(a1 + 2) == 8)
    {
      __int16 v21 = *(_WORD *)(a1 + 48);
      *(_WORD *)a2 = 10;
      __int16 v22 = *(_WORD **)(a2 + 8);
      if (v22) {
        sub_244CC8A0C(v22);
      }
      *(void *)(a2 + 8) = 0;
      *(_WORD *)(a2 + 16) = v21;
    }
    *(_WORD *)a1 = 0;
  }
}

uint64_t sub_244DDD23C@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_244DDD24C@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = 1;
  *(void *)(a3 + 8) = *a2;
  *a2 = 0;
  *(_DWORD *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 20) = BYTE4(result);
  return result;
}

__n128 sub_244DDD270@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = 2;
  *(void *)(a3 + 8) = *a2;
  *a2 = 0;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 32) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a3 + 48) = result;
  *(void *)(a3 + 64) = *(void *)(a1 + 48);
  return result;
}

__n128 sub_244DDD2A0@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 32) = v4;
  *(void *)(a3 + 48) = *(void *)(a1 + 32);
  *(_WORD *)a3 = 3;
  *(void *)(a3 + 8) = *a2;
  *a2 = 0;
  return result;
}

uint64_t sub_244DDD2C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 6;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = result;
  return result;
}

__n128 sub_244DDD2D8@<Q0>(__n128 *a1@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  a3->n128_u16[0] = 4;
  a3->n128_u64[1] = *a2;
  *a2 = 0;
  __n128 result = *a1;
  a3[1] = *a1;
  a3[2].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

void sub_244DDD300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);

  sub_244DDCF90(a1, a2, v4);
}

void sub_244DDD370(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 2))
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a5 + 16) = 144;
  }
  else
  {
    *(unsigned char *)(a1 + 3) = a2;
    *(_DWORD *)(a1 + 216) = a4;
    *(unsigned char *)(a1 + 4) = *a3;
    __int16 v7 = *((_WORD *)a3 + 1);
    *(_WORD *)(a1 + 6) = v7;
    uint64_t v8 = *((void *)a3 + 1);
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = *((void *)a3 + 2);
    *(void *)(a1 + 24) = v9;
    __int16 v14 = &unk_26F958EA0;
    char v15 = *a3;
    __int16 v16 = 0;
    __int16 v17 = v7;
    uint64_t v18 = v8;
    uint64_t v19 = v9;
    uint64_t v20 = *((void *)a3 + 3);
    __int16 v21 = *((_WORD *)a3 + 16);
    uint64_t v10 = *((void *)a3 + 6);
    uint64_t v22 = *((void *)a3 + 5);
    uint64_t v23 = v10;
    long long v24 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    sub_244DDD53C((uint64_t)&v14, (_WORD **)(a1 + 40), a5);
    if (!*(_DWORD *)a5)
    {
      if (*(unsigned char *)(a1 + 3) == 1) {
        int v11 = 1;
      }
      else {
        int v11 = 4;
      }
      __int16 v12 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v13, 2u);
      }
      if (sub_244CC4E58(4u)) {
        sub_244CC4DE0(0x26u, 4);
      }
      sub_244DD9170((uint64_t)&v14, v11);
      *(unsigned char *)(a1 + 2) = 2;
      *(unsigned char *)(a1 + 233) = 1;
      *(_WORD *)a1 = 1;
      *(_DWORD *)(a1 + 176) = 0x20000;
      *(unsigned char *)(a1 + 180) = v11;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
      *(_DWORD *)(a5 + 16) = 181;
    }
    __int16 v14 = &unk_26F958EA0;
    if (v24) {
      sub_244CC8A0C(v24);
    }
  }
}

void sub_244DDD53C(uint64_t a1@<X0>, _WORD **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_244CC8F5C(v6 + 16, 0x26u, &v13);
  uint64_t v7 = *(void *)(v13 + 8);
  uint64_t v8 = v7 + *(void *)(v13 + 24);
  unint64_t v9 = sub_244CC8B50(v13);
  if (v9 >= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v14 = v8;
  unint64_t v15 = v10;
  uint64_t v16 = 0;
  if (!v7) {
    unint64_t v15 = 0;
  }
  __int16 v17 = (_WORD *)v13;
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 8))(a1, &v14);
    sub_244CC9354(&v14, (uint64_t *)&v17, &v13);
    if (*a2) {
      sub_244CC8A0C(*a2);
    }
    uint64_t v11 = v13;
    *a2 = (_WORD *)v13;
    if (v11)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
      int v12 = 43;
    }
    else
    {
      *(_DWORD *)a3 = 11;
      *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
      int v12 = 41;
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v12 = 35;
  }
  *(_DWORD *)(a3 + 16) = v12;
  if (v17) {
    sub_244CC8A0C(v17);
  }
}

uint64_t sub_244DDD6A4@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, __int16 a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v6 = *(unsigned __int8 *)(result + 2);
  if (*(unsigned char *)(result + 2))
  {
    int v7 = 187;
    int v6 = 3;
  }
  else
  {
    *(unsigned char *)(result + 3) = a2;
    *(_DWORD *)(result + 216) = a5;
    *(unsigned char *)(result + 4) = a3;
    *(_WORD *)(result + 6) = a4;
    int v7 = 197;
    *(unsigned char *)(result + 2) = 1;
  }
  *(_DWORD *)a6 = v6;
  *(void *)(a6 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a6 + 16) = v7;
  return result;
}

void sub_244DDD6EC(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 2) != 3)
  {
    int v5 = 206;
    goto LABEL_5;
  }
  if (*(_WORD *)a1)
  {
    int v5 = 207;
LABEL_5:
    int v6 = 3;
LABEL_6:
    *(_DWORD *)a3 = v6;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    return;
  }
  if ((*a2 & *(unsigned char *)(a1 + 56)) == 0)
  {
    int v5 = 211;
    goto LABEL_12;
  }
  unsigned int v7 = *((unsigned __int16 *)a2 + 1);
  if (v7 > *(unsigned __int16 *)(a1 + 58))
  {
    int v5 = 212;
LABEL_12:
    int v6 = 47;
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 32) = v7;
  if (*(unsigned char *)(a1 + 3) == 1)
  {
    *(void *)(a1 + 16) = *((void *)a2 + 1);
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    uint64_t v16 = &unk_26F958F60;
    char v18 = 0;
    char v17 = *a2;
    LOBYTE(v19) = *(unsigned char *)(a1 + 9);
    __int16 v20 = *((_WORD *)a2 + 1);
    long long v21 = *(_OWORD *)(a2 + 8);
    uint64_t v8 = *((void *)a2 + 4);
    uint64_t v22 = (_WORD *)*((void *)a2 + 3);
    uint64_t v23 = v8;
    long long v24 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_244DDD53C((uint64_t)&v16, (_WORD **)(a1 + 40), a3);
    char v9 = 0;
    int v10 = *(_DWORD *)a3;
    if (!*(_DWORD *)a3)
    {
      uint64_t v11 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v15, 2u);
      }
      if (sub_244CC4E58(4u)) {
        sub_244CC4DE0(0x26u, 4);
      }
      char v9 = 5;
      sub_244DD9EF4((uint64_t)&v16);
    }
    uint64_t v16 = &unk_26F958F60;
    int v12 = v24;
    if (v24) {
LABEL_21:
    }
      sub_244CC8A0C(v12);
  }
  else
  {
    uint64_t v16 = &unk_26F958F08;
    char v17 = *a2;
    char v18 = *(unsigned char *)(a1 + 9);
    __int16 v19 = *((_WORD *)a2 + 1);
    uint64_t v13 = *((void *)a2 + 4);
    *(void *)&long long v21 = *((void *)a2 + 3);
    *((void *)&v21 + 1) = v13;
    uint64_t v22 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_244DDD53C((uint64_t)&v16, (_WORD **)(a1 + 40), a3);
    int v10 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      char v9 = 0;
    }
    else
    {
      uint64_t v14 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v15, 2u);
      }
      if (sub_244CC4E58(4u)) {
        sub_244CC4DE0(0x26u, 4);
      }
      char v9 = 2;
      sub_244DD992C((uint64_t)&v16);
    }
    uint64_t v16 = &unk_26F958F08;
    int v12 = v22;
    if (v22) {
      goto LABEL_21;
    }
  }
  if (!v10)
  {
    *(unsigned char *)(a1 + 2) = 4;
    if (*(unsigned char *)(a1 + 3) == 1)
    {
      if (*(unsigned char *)(a1 + 8) != 32)
      {
LABEL_38:
        int v6 = 0;
        *(_WORD *)a1 = 1;
        *(_DWORD *)(a1 + 176) = 0x20000;
        *(unsigned char *)(a1 + 180) = v9;
        int v5 = 266;
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(a1 + 3) || *(unsigned char *)(a1 + 8) != 16)
    {
      goto LABEL_38;
    }
    *(unsigned char *)(a1 + 233) = 1;
    goto LABEL_38;
  }
}

void sub_244DDDA0C(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 2) == 3)
  {
    if (!*(_WORD *)a1)
    {
      sub_244DDDA84(a1, a2);
      int v6 = 0;
      *(unsigned char *)(a1 + 2) = 7;
      int v5 = 277;
      goto LABEL_7;
    }
    int v5 = 272;
  }
  else
  {
    int v5 = 271;
  }
  int v6 = 3;
LABEL_7:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a3 + 16) = v5;
}

void sub_244DDDA84(uint64_t a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(_WORD *)(a1 + 48) = a2;
  sub_244D63DA8((uint64_t)&v17, 1, 0x20000, a2);
  unint64_t v3 = sub_244D63FB4(&v17);
  sub_244CC8F5C(v3 + 16, 0x26u, buf);
  uint64_t v4 = *(void *)(*(void *)buf + 8);
  uint64_t v5 = v4 + *(void *)(*(void *)buf + 24);
  unint64_t v6 = sub_244CC8B50(*(uint64_t *)buf);
  if (v6 >= v3) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t v13 = v5;
  unint64_t v14 = v7;
  uint64_t v15 = 0;
  if (!v4) {
    unint64_t v14 = 0;
  }
  uint64_t v16 = *(_WORD **)buf;
  if (*(void *)buf)
  {
    sub_244D63F44(&v17, &v13);
    sub_244CC9354(&v13, (uint64_t *)&v16, (uint64_t *)buf);
    uint64_t v8 = *(_WORD **)(a1 + 40);
    if (v8) {
      sub_244CC8A0C(v8);
    }
    uint64_t v9 = *(void *)buf;
    *(void *)(a1 + 40) = *(void *)buf;
    if (v9)
    {
      *(_WORD *)a1 = 1;
      *(_DWORD *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 180) = 64;
    }
    else
    {
      int v10 = sub_244CC8484(0xCu, "BDX");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 11;
        *(void *)&uint8_t buf[8] = "src/protocols/bdx/BdxTransferSession.cpp";
        *(_DWORD *)&uint8_t buf[16] = 900;
        uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)uint64_t buf = 136315394;
        *(void *)&uint8_t buf[4] = "PrepareStatusReport";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v11;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "%s: error preparing message: %s", buf, 0x16u);
      }
      if (sub_244CC4E58(1u))
      {
        *(_DWORD *)uint64_t buf = 11;
        *(void *)&uint8_t buf[8] = "src/protocols/bdx/BdxTransferSession.cpp";
        *(_DWORD *)&uint8_t buf[16] = 900;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0xCu, 1);
      }
      *(_WORD *)a1 = 10;
    }
    int v12 = v16;
    *(unsigned char *)(a1 + 2) = 8;
    *(unsigned char *)(a1 + 233) = 0;
    if (v12) {
      sub_244CC8A0C(v12);
    }
  }
  else
  {
    *(_WORD *)a1 = 10;
    *(unsigned char *)(a1 + 2) = 8;
    *(unsigned char *)(a1 + 233) = 0;
  }
  if (v18) {
    sub_244CC8A0C(v18);
  }
}

void sub_244DDDCB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2) != 4)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v4 = 284;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 3))
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v4 = 285;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v4;
    return;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v4 = 286;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 233))
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v4 = 287;
    goto LABEL_5;
  }
  uint64_t v8 = &unk_26F958FB8;
  int v9 = *(_DWORD *)(a1 + 212);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_244DDD53C((uint64_t)&v8, (_WORD **)(a1 + 40), a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t v5 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v7, 2u);
    }
    if (sub_244CC4E58(4u)) {
      sub_244CC4DE0(0x26u, 4);
    }
    sub_244DDA37C((uint64_t)&v8, 16);
    *(unsigned char *)(a1 + 233) = 1;
    int v6 = *(_DWORD *)(a1 + 212);
    *(_DWORD *)(a1 + 208) = v6;
    *(_DWORD *)(a1 + 212) = v6 + 1;
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(unsigned char *)(a1 + 180) = 16;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v4 = 304;
    goto LABEL_5;
  }
}

void sub_244DDDE7C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 2) != 4)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 311;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 3))
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 312;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v5;
    return;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 313;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 233))
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 314;
    goto LABEL_5;
  }
  int v9 = &unk_26F959068;
  int v10 = *(_DWORD *)(a1 + 212);
  uint64_t v11 = *a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244DDD53C((uint64_t)&v9, (_WORD **)(a1 + 40), a3);
  if (!*(_DWORD *)a3)
  {
    int v6 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v8, 2u);
    }
    if (sub_244CC4E58(4u)) {
      sub_244CC4DE0(0x26u, 4);
    }
    sub_244DDAB10((uint64_t)&v9);
    *(unsigned char *)(a1 + 233) = 1;
    int v7 = *(_DWORD *)(a1 + 212);
    *(_DWORD *)(a1 + 208) = v7;
    *(_DWORD *)(a1 + 212) = v7 + 1;
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(unsigned char *)(a1 + 180) = 21;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 332;
    goto LABEL_5;
  }
}

void sub_244DDE048(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 2) != 4)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 337;
    goto LABEL_7;
  }
  if (*(unsigned char *)(a1 + 3) != 1)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 338;
    goto LABEL_7;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 339;
LABEL_7:
    *(_DWORD *)(a3 + 16) = v5;
    return;
  }
  if (*(unsigned char *)(a1 + 233))
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 340;
    goto LABEL_7;
  }
  uint64_t v7 = *a2;
  if (!*a2 || (unint64_t v8 = a2[1], v8 > *(unsigned __int16 *)(a1 + 32)))
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v5 = 343;
    goto LABEL_7;
  }
  unint64_t v14 = &unk_26F959010;
  unint64_t v17 = v8;
  char v18 = 0;
  int v15 = *(_DWORD *)(a1 + 204);
  uint64_t v16 = v7;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244DDD53C((uint64_t)&v14, (_WORD **)(a1 + 40), a3);
  if (!*(_DWORD *)a3)
  {
    int v9 = *((unsigned __int8 *)a2 + 16);
    if (*((unsigned char *)a2 + 16)) {
      unsigned __int8 v10 = 18;
    }
    else {
      unsigned __int8 v10 = 17;
    }
    uint64_t v11 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v13, 2u);
    }
    if (sub_244CC4E58(4u)) {
      sub_244CC4DE0(0x26u, 4);
    }
    sub_244DDA718((uint64_t)&v14, v10);
    if (v9) {
      *(unsigned char *)(a1 + 2) = 5;
    }
    *(unsigned char *)(a1 + 233) = 1;
    int v12 = *(_DWORD *)(a1 + 204);
    *(_DWORD *)(a1 + 200) = v12;
    *(_DWORD *)(a1 + 204) = v12 + 1;
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(unsigned char *)(a1 + 180) = v10;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a3 + 16) = 369;
  }
  unint64_t v14 = &unk_26F959010;
  if (v18) {
    sub_244CC8A0C(v18);
  }
}

void sub_244DDE288(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 3))
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v3 = 374;
LABEL_22:
    *(_DWORD *)(a2 + 16) = v3;
    return;
  }
  int v5 = *(unsigned __int8 *)(a1 + 2);
  if ((v5 | 2) != 6)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v3 = 376;
    goto LABEL_22;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v3 = 377;
    goto LABEL_22;
  }
  uint64_t v11 = &unk_26F958FB8;
  int v12 = *(_DWORD *)(a1 + 200);
  if (v5 == 6) {
    unsigned __int8 v6 = 20;
  }
  else {
    unsigned __int8 v6 = 19;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_244DDD53C((uint64_t)&v11, (_WORD **)(a1 + 40), a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t v7 = sub_244CC8484(0x26u, "Automation");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int8 v10 = 0;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v10, 2u);
    }
    if (sub_244CC4E58(4u)) {
      sub_244CC4DE0(0x26u, 4);
    }
    sub_244DDA37C((uint64_t)&v11, v6);
    int v8 = *(unsigned __int8 *)(a1 + 2);
    if (v8 == 6)
    {
      char v9 = 0;
      *(unsigned char *)(a1 + 2) = 7;
    }
    else
    {
      if (v8 != 4 || *(unsigned char *)(a1 + 8) != 16) {
        goto LABEL_21;
      }
      *(_DWORD *)(a1 + 208) = v12 + 1;
      char v9 = 1;
    }
    *(unsigned char *)(a1 + 233) = v9;
LABEL_21:
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(unsigned char *)(a1 + 180) = v6;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    int v3 = 408;
    goto LABEL_22;
  }
}

void sub_244DDE468(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 2);
  BOOL v5 = v4 > 8;
  int v6 = (1 << v4) & 0x181;
  if (v5 || v6 == 0)
  {
    sub_244DDDA84(a1, a2);
    int v9 = 0;
    int v8 = 419;
  }
  else
  {
    int v8 = 415;
    int v9 = 3;
  }
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

void sub_244DDE4D4(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 6) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  uint64_t v2 = *(_WORD **)(a1 + 40);
  if (v2) {
    sub_244CC8A0C(v2);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 232) = 1;
}

void sub_244DDE538(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = *a3;
  if (!*a3)
  {
    int v7 = 450;
    int v8 = 47;
    goto LABEL_5;
  }
  if (*(_WORD *)(a2 + 4))
  {
    int v7 = 464;
    int v8 = 42;
LABEL_5:
    *(_DWORD *)a5 = v8;
    *(void *)(a5 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a5 + 16) = v7;
    return;
  }
  if (*(_WORD *)(a2 + 6) == 2)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    int v12 = v6;
    *a3 = 0;
    sub_244DDE64C((_WORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v12, a5);
    if (v12) {
      sub_244CC8A0C(v12);
    }
    if (!*(_DWORD *)a5)
    {
      int v8 = 0;
      *(void *)(a1 + 224) = a4;
LABEL_18:
      int v7 = 467;
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 464;
    int v8 = 42;
    if (*(_WORD *)(a2 + 6) || *(unsigned char *)a2 != 64) {
      goto LABEL_5;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    uint64_t v11 = v6;
    *a3 = 0;
    sub_244DDE90C(a1, &v11, (void *)a5);
    if (v11) {
      sub_244CC8A0C(v11);
    }
    if (!*(_DWORD *)a5)
    {
      int v8 = 0;
      goto LABEL_18;
    }
  }
}

void sub_244DDE64C(_WORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3)
  {
    if (*a1)
    {
      int v6 = 474;
      int v7 = 3;
    }
    else
    {
      int v9 = *a2;
      unsigned __int8 v10 = sub_244CC8484(0x26u, "Automation");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Handling received BDX Message", buf, 2u);
      }
      if (sub_244CC4E58(4u)) {
        sub_244CC4DE0(0x26u, 4);
      }
      int v6 = 513;
      int v7 = 42;
      switch(v9)
      {
        case 1:
        case 4:
          uint64_t v20 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDEA0C((uint64_t)a1, v9, (uint64_t *)&v20);
          uint64_t v11 = v20;
          if (!v20) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 2:
          __int16 v19 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDEBCC((uint64_t)a1, (uint64_t *)&v19);
          uint64_t v11 = v19;
          if (!v19) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 5:
          char v18 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDED58((uint64_t)a1, (uint64_t *)&v18);
          uint64_t v11 = v18;
          if (!v18) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 16:
          unint64_t v17 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDEEF4((uint64_t)a1, &v17);
          uint64_t v11 = v17;
          if (!v17) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 17:
          int v15 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDF128((uint64_t)a1, (uint64_t *)&v15);
          uint64_t v11 = v15;
          if (!v15) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 18:
          unint64_t v14 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDF2DC((uint64_t)a1, (uint64_t *)&v14);
          uint64_t v11 = v14;
          if (!v14) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 19:
          uint64_t v13 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDF474((uint64_t)a1, &v13);
          uint64_t v11 = v13;
          if (!v13) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 20:
          int v12 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDF590((uint64_t)a1, &v12);
          uint64_t v11 = v12;
          if (!v12) {
            goto LABEL_12;
          }
          goto LABEL_11;
        case 21:
          uint64_t v16 = (_WORD *)*a3;
          *a3 = 0;
          sub_244DDF008((uint64_t)a1, &v16);
          uint64_t v11 = v16;
          if (!v16) {
            goto LABEL_12;
          }
LABEL_11:
          sub_244CC8A0C(v11);
LABEL_12:
          int v7 = 0;
          int v6 = 516;
          break;
        default:
          break;
      }
    }
  }
  else
  {
    int v6 = 473;
    int v7 = 47;
  }
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a4 + 16) = v6;
}

void sub_244DDE90C(uint64_t a1@<X0>, _WORD **a2@<X2>, void *a3@<X8>)
{
  if (*a2)
  {
    *(unsigned char *)(a1 + 2) = 8;
    *(unsigned char *)(a1 + 233) = 0;
    sub_244CBF9C8(&v9);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v8 = *a2;
    *a2 = 0;
    sub_244D63DD8((uint64_t)&v9, (uint64_t *)&v8, (uint64_t)a3);
    if (v8) {
      sub_244CC8A0C(v8);
    }
    int v8 = 0;
    if (!*(_DWORD *)a3)
    {
      if (*(_DWORD *)((char *)&v9 + 2) == 0x20000)
      {
        int v6 = 0;
        *(_WORD *)(a1 + 48) = HIWORD(v9);
        *(_WORD *)a1 = 9;
        int v7 = 541;
      }
      else
      {
        int v7 = 535;
        int v6 = 42;
      }
      *(_DWORD *)a3 = v6;
      a3[1] = "src/protocols/bdx/BdxTransferSession.cpp";
      *((_DWORD *)a3 + 4) = v7;
    }
    if (v10) {
      sub_244CC8A0C(v10);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/protocols/bdx/BdxTransferSession.cpp";
    *((_DWORD *)a3 + 4) = 528;
  }
}

void sub_244DDEA0C(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 2) != 1)
  {
LABEL_4:
    sub_244DDDA84(a1, 24);
    return;
  }
  if (*(unsigned char *)(a1 + 3) == 1)
  {
    if (a2 != 4) {
      goto LABEL_4;
    }
  }
  else if (a2 != 1)
  {
    goto LABEL_4;
  }
  unint64_t v14 = &unk_26F958EA0;
  __int16 v15 = 0;
  char v16 = 0;
  unsigned __int16 v17 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  __int16 v21 = 0;
  uint64_t v23 = 0;
  long long v24 = 0;
  uint64_t v22 = 0;
  memset(v13, 0, sizeof(v13));
  sub_244CC8F2C(*a3);
  int v12 = (_WORD *)*a3;
  sub_244DD8EC4((uint64_t)&v14, (uint64_t)&v12, (uint64_t)v13);
  if (v12) {
    sub_244CC8A0C(v12);
  }
  int v12 = 0;
  if (LODWORD(v13[0]))
  {
    sub_244DDDA84(a1, 22);
  }
  else
  {
    sub_244DDF6A8(a1, &v15);
    *(unsigned char *)(a1 + 9) = 0;
    unsigned __int16 v6 = v17;
    unsigned int v7 = *(unsigned __int16 *)(a1 + 6);
    if (v17 < v7) {
      LOWORD(v7) = v17;
    }
    *(_WORD *)(a1 + 32) = v7;
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    *(void *)(a1 + 16) = v18;
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 56) = v15;
    *(_WORD *)(a1 + 58) = v6;
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v20;
    *(_WORD *)(a1 + 88) = v21;
    uint64_t v10 = v23;
    *(void *)(a1 + 96) = v22;
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = *(_WORD **)(a1 + 40);
    if (v11) {
      sub_244CC8A0C(v11);
    }
    *(void *)(a1 + 40) = *a3;
    *a3 = 0;
    *(_WORD *)a1 = 2;
    *(unsigned char *)(a1 + 2) = 3;
    sub_244DD9170((uint64_t)&v14, a2);
  }
  unint64_t v14 = &unk_26F958EA0;
  if (v24) {
    sub_244CC8A0C(v24);
  }
}

void sub_244DDEBCC(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 3) == 1 && *(unsigned char *)(a1 + 2) == 2)
  {
    uint64_t v10 = &unk_26F958F08;
    int v11 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v12 = 0;
    memset(v9, 0, sizeof(v9));
    sub_244CC8F2C(*a2);
    uint64_t v8 = (_WORD *)*a2;
    sub_244DD97CC((uint64_t)&v10, (uint64_t)&v8, (uint64_t)v9);
    if (v8) {
      sub_244CC8A0C(v8);
    }
    uint64_t v8 = 0;
    if (LODWORD(v9[0]))
    {
      sub_244DDDA84(a1, 22);
    }
    else
    {
      memset(v7, 0, sizeof(v7));
      sub_244DDF700(a1, (unsigned __int8 *)&v11, (uint64_t)v7);
      if (!LODWORD(v7[0]))
      {
        __int16 v4 = HIWORD(v11);
        *(_WORD *)(a1 + 32) = HIWORD(v11);
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a1 + 8);
        *(_WORD *)(a1 + 114) = v4;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 16);
        uint64_t v5 = v13;
        *(void *)(a1 + 136) = v12;
        *(void *)(a1 + 144) = v5;
        unsigned __int16 v6 = *(_WORD **)(a1 + 40);
        if (v6) {
          sub_244CC8A0C(v6);
        }
        *(void *)(a1 + 40) = *a2;
        *a2 = 0;
        *(_WORD *)a1 = 3;
        *(unsigned char *)(a1 + 233) = *(unsigned char *)(a1 + 8) == 32;
        *(unsigned char *)(a1 + 2) = 4;
        sub_244DD992C((uint64_t)&v10);
      }
    }
    uint64_t v10 = &unk_26F958F08;
    if (v14) {
      sub_244CC8A0C(v14);
    }
  }
  else
  {
    sub_244DDDA84(a1, 24);
  }
}

void sub_244DDED58(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 3) || *(unsigned char *)(a1 + 2) != 2)
  {
    sub_244DDDA84(a1, 24);
  }
  else
  {
    int v11 = &unk_26F958F60;
    __int16 v12 = 0;
    char v13 = 0;
    __int16 v14 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    unsigned __int16 v17 = 0;
    memset(v10, 0, sizeof(v10));
    sub_244CC8F2C(*a2);
    uint64_t v9 = (_WORD *)*a2;
    sub_244DD9CB4((uint64_t)&v11, (uint64_t)&v9, (uint64_t)v10);
    if (v9) {
      sub_244CC8A0C(v9);
    }
    uint64_t v9 = 0;
    if (LODWORD(v10[0]))
    {
      sub_244DDDA84(a1, 22);
    }
    else
    {
      memset(v8, 0, sizeof(v8));
      sub_244DDF700(a1, (unsigned __int8 *)&v12, (uint64_t)v8);
      if (!LODWORD(v8[0]))
      {
        __int16 v4 = v14;
        *(_WORD *)(a1 + 32) = v14;
        long long v5 = v15;
        *(_OWORD *)(a1 + 16) = v15;
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a1 + 8);
        *(_WORD *)(a1 + 114) = v4;
        *(_OWORD *)(a1 + 120) = v5;
        uint64_t v6 = *((void *)&v16 + 1);
        *(void *)(a1 + 136) = v16;
        *(void *)(a1 + 144) = v6;
        unsigned int v7 = *(_WORD **)(a1 + 40);
        if (v7) {
          sub_244CC8A0C(v7);
        }
        *(void *)(a1 + 40) = *a2;
        *a2 = 0;
        *(_WORD *)a1 = 3;
        *(unsigned char *)(a1 + 233) = *(unsigned char *)(a1 + 8) == 16;
        *(unsigned char *)(a1 + 2) = 4;
        sub_244DD9EF4((uint64_t)&v11);
      }
    }
    int v11 = &unk_26F958F60;
    if (v17) {
      sub_244CC8A0C(v17);
    }
  }
}

void sub_244DDEEF4(uint64_t a1, _WORD **a2)
{
  if (*(unsigned char *)(a1 + 3) == 1 && *(unsigned char *)(a1 + 2) == 4 && *(unsigned char *)(a1 + 233))
  {
    uint64_t v8 = &unk_26F958FB8;
    int v9 = 0;
    memset(v7, 0, sizeof(v7));
    uint64_t v6 = *a2;
    *a2 = 0;
    sub_244DDA298((uint64_t)&v8, (uint64_t)&v6, (uint64_t)v7);
    if (v6) {
      sub_244CC8A0C(v6);
    }
    uint64_t v6 = 0;
    if (LODWORD(v7[0]))
    {
      uint64_t v3 = a1;
      __int16 v4 = 22;
    }
    else
    {
      int v5 = v9;
      if (v9 == *(_DWORD *)(a1 + 204))
      {
        *(_WORD *)a1 = 5;
        *(unsigned char *)(a1 + 233) = 0;
        *(_DWORD *)(a1 + 208) = v5;
        sub_244DDA37C((uint64_t)&v8, 16);
        return;
      }
      uint64_t v3 = a1;
      __int16 v4 = 23;
    }
    sub_244DDDA84(v3, v4);
  }
  else
  {
    sub_244DDDA84(a1, 24);
  }
}

void sub_244DDF008(uint64_t a1, _WORD **a2)
{
  if (*(unsigned char *)(a1 + 3) == 1 && *(unsigned char *)(a1 + 2) == 4 && *(unsigned char *)(a1 + 233))
  {
    uint64_t v8 = &unk_26F959068;
    int v9 = 0;
    uint64_t v10 = 0;
    memset(v7, 0, sizeof(v7));
    uint64_t v6 = *a2;
    *a2 = 0;
    sub_244DDA9FC((uint64_t)&v8, (uint64_t)&v6, (uint64_t)v7);
    if (v6) {
      sub_244CC8A0C(v6);
    }
    uint64_t v6 = 0;
    if (LODWORD(v7[0]))
    {
      uint64_t v3 = a1;
      __int16 v4 = 22;
    }
    else
    {
      int v5 = v9;
      if (v9 == *(_DWORD *)(a1 + 204))
      {
        *(_WORD *)a1 = 6;
        *(unsigned char *)(a1 + 233) = 0;
        *(_DWORD *)(a1 + 208) = v5;
        *(void *)(a1 + 184) = v10;
        sub_244DDAB10((uint64_t)&v8);
        return;
      }
      uint64_t v3 = a1;
      __int16 v4 = 23;
    }
    sub_244DDDA84(v3, v4);
  }
  else
  {
    sub_244DDDA84(a1, 24);
  }
}

void sub_244DDF128(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 3) && *(unsigned char *)(a1 + 2) == 4 && *(unsigned char *)(a1 + 233))
  {
    __int16 v12 = &unk_26F959010;
    int v13 = 0;
    unint64_t v15 = 0;
    long long v16 = 0;
    uint64_t v14 = 0;
    memset(v11, 0, sizeof(v11));
    sub_244CC8F2C(*a2);
    uint64_t v10 = (_WORD *)*a2;
    sub_244DDA5DC((uint64_t)&v12, (uint64_t)&v10, (uint64_t)v11);
    if (v10) {
      sub_244CC8A0C(v10);
    }
    uint64_t v10 = 0;
    if (LODWORD(v11[0])) {
      goto LABEL_7;
    }
    int v6 = v13;
    if (v13 != *(_DWORD *)(a1 + 208))
    {
      uint64_t v4 = a1;
      __int16 v5 = 23;
      goto LABEL_8;
    }
    unint64_t v7 = v15;
    if (!v15 || v15 > *(unsigned __int16 *)(a1 + 32))
    {
LABEL_7:
      uint64_t v4 = a1;
      __int16 v5 = 22;
    }
    else
    {
      unint64_t v8 = *(void *)(a1 + 24);
      if (!v8 || *(void *)(a1 + 192) + v15 <= v8)
      {
        *(void *)(a1 + 152) = v14;
        *(void *)(a1 + 160) = v7;
        *(unsigned char *)(a1 + 168) = 0;
        *(_DWORD *)(a1 + 172) = v6;
        int v9 = *(_WORD **)(a1 + 40);
        if (v9)
        {
          sub_244CC8A0C(v9);
          unint64_t v7 = v15;
          int v6 = v13;
        }
        *(void *)(a1 + 40) = *a2;
        *a2 = 0;
        *(_WORD *)a1 = 4;
        *(void *)(a1 + 192) += v7;
        *(_DWORD *)(a1 + 200) = v6;
        *(unsigned char *)(a1 + 233) = 0;
        sub_244DDA718((uint64_t)&v12, 17);
        goto LABEL_9;
      }
      uint64_t v4 = a1;
      __int16 v5 = 20;
    }
LABEL_8:
    sub_244DDDA84(v4, v5);
LABEL_9:
    __int16 v12 = &unk_26F959010;
    if (v16) {
      sub_244CC8A0C(v16);
    }
    return;
  }

  sub_244DDDA84(a1, 24);
}

void sub_244DDF2DC(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 3) && *(unsigned char *)(a1 + 2) == 4 && *(unsigned char *)(a1 + 233))
  {
    int v11 = &unk_26F959010;
    int v12 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v13 = 0;
    memset(v10, 0, sizeof(v10));
    sub_244CC8F2C(*a2);
    int v9 = (_WORD *)*a2;
    sub_244DDA5DC((uint64_t)&v11, (uint64_t)&v9, (uint64_t)v10);
    if (v9) {
      sub_244CC8A0C(v9);
    }
    int v9 = 0;
    if (!LODWORD(v10[0]))
    {
      int v6 = v12;
      if (v12 != *(_DWORD *)(a1 + 208))
      {
        uint64_t v4 = a1;
        __int16 v5 = 23;
        goto LABEL_17;
      }
      unint64_t v7 = v14;
      if (v14 <= *(unsigned __int16 *)(a1 + 32))
      {
        *(void *)(a1 + 152) = v13;
        *(void *)(a1 + 160) = v7;
        *(unsigned char *)(a1 + 168) = 1;
        *(_DWORD *)(a1 + 172) = v6;
        unint64_t v8 = *(_WORD **)(a1 + 40);
        if (v8)
        {
          sub_244CC8A0C(v8);
          unint64_t v7 = v14;
          int v6 = v12;
        }
        *(void *)(a1 + 40) = *a2;
        *a2 = 0;
        *(_WORD *)a1 = 4;
        *(void *)(a1 + 192) += v7;
        *(_DWORD *)(a1 + 200) = v6;
        *(unsigned char *)(a1 + 233) = 0;
        *(unsigned char *)(a1 + 2) = 6;
        sub_244DDA718((uint64_t)&v11, 18);
        goto LABEL_18;
      }
    }
    uint64_t v4 = a1;
    __int16 v5 = 22;
LABEL_17:
    sub_244DDDA84(v4, v5);
LABEL_18:
    int v11 = &unk_26F959010;
    if (v15) {
      sub_244CC8A0C(v15);
    }
    return;
  }

  sub_244DDDA84(a1, 24);
}

void sub_244DDF474(uint64_t a1, _WORD **a2)
{
  if (*(unsigned char *)(a1 + 3) == 1 && *(unsigned char *)(a1 + 2) == 4 && *(unsigned char *)(a1 + 233))
  {
    unint64_t v7 = &unk_26F958FB8;
    int v8 = 0;
    memset(v6, 0, sizeof(v6));
    __int16 v5 = *a2;
    *a2 = 0;
    sub_244DDA298((uint64_t)&v7, (uint64_t)&v5, (uint64_t)v6);
    if (v5) {
      sub_244CC8A0C(v5);
    }
    __int16 v5 = 0;
    if (LODWORD(v6[0]))
    {
      uint64_t v3 = a1;
      __int16 v4 = 22;
    }
    else
    {
      if (v8 == *(_DWORD *)(a1 + 200))
      {
        *(_WORD *)a1 = 7;
        *(unsigned char *)(a1 + 233) = *(unsigned char *)(a1 + 8) == 32;
        sub_244DDA37C((uint64_t)&v7, 19);
        return;
      }
      uint64_t v3 = a1;
      __int16 v4 = 23;
    }
    sub_244DDDA84(v3, v4);
  }
  else
  {
    sub_244DDDA84(a1, 24);
  }
}

void sub_244DDF590(uint64_t a1, _WORD **a2)
{
  if (*(unsigned char *)(a1 + 3) == 1 && *(unsigned char *)(a1 + 2) == 5 && *(unsigned char *)(a1 + 233))
  {
    unint64_t v7 = &unk_26F958FB8;
    int v8 = 0;
    memset(v6, 0, sizeof(v6));
    __int16 v5 = *a2;
    *a2 = 0;
    sub_244DDA298((uint64_t)&v7, (uint64_t)&v5, (uint64_t)v6);
    if (v5) {
      sub_244CC8A0C(v5);
    }
    __int16 v5 = 0;
    if (LODWORD(v6[0]))
    {
      uint64_t v3 = a1;
      __int16 v4 = 22;
    }
    else
    {
      if (v8 == *(_DWORD *)(a1 + 200))
      {
        *(_WORD *)a1 = 8;
        *(unsigned char *)(a1 + 233) = 0;
        *(unsigned char *)(a1 + 2) = 7;
        sub_244DDA37C((uint64_t)&v7, 20);
        return;
      }
      uint64_t v3 = a1;
      __int16 v4 = 23;
    }
    sub_244DDDA84(v3, v4);
  }
  else
  {
    sub_244DDDA84(a1, 24);
  }
}

void sub_244DDF6A8(uint64_t a1, unsigned char *a2)
{
  if ((*a2 & 0x30) == 0 || (int v2 = (*(unsigned char *)(a1 + 4) & *a2), (*(unsigned char *)(a1 + 4) & *a2) == 0))
  {
    sub_244DDDA84(a1, 80);
    return;
  }
  if ((v2 & 0xFFFFFFBF) == 0)
  {
    char v3 = 64;
LABEL_11:
    *(unsigned char *)(a1 + 8) = v3;
    return;
  }
  if ((v2 & 0xFFFFFFDF) == 0)
  {
    char v3 = 32;
    goto LABEL_11;
  }
  if ((v2 & 0xFFFFFFEF) == 0)
  {
    char v3 = 16;
    goto LABEL_11;
  }
}

void sub_244DDF700(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  if ((v4 & 0xFFFFFFBF) != 0)
  {
    if ((v4 & 0xFFFFFFDF) != 0)
    {
      if ((v4 & 0xFFFFFFEF) != 0)
      {
        sub_244DDDA84(a1, 22);
        int v5 = 869;
LABEL_11:
        int v7 = 172;
        goto LABEL_12;
      }
      char v6 = 16;
    }
    else
    {
      char v6 = 32;
    }
  }
  else
  {
    char v6 = 64;
  }
  if ((*(unsigned char *)(a1 + 4) & v6) == 0)
  {
    sub_244DDDA84(a1, 80);
    int v5 = 880;
    goto LABEL_11;
  }
  int v7 = 0;
  *(unsigned char *)(a1 + 8) = v6;
  int v5 = 883;
LABEL_12:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a3 + 16) = v5;
}

const char *sub_244DDF7A0(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xB) {
    return "Unknown";
  }
  else {
    return (&off_2651A9BA0)[(__int16)a2];
  }
}

__n128 sub_244DDF7C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 3;
  *(void *)(a2 + 8) = 0;
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 48) = *(void *)(a1 + 32);
  return result;
}

uint64_t sub_244DDF7E8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  v15[1] = *MEMORY[0x263EF8340];
  v14[0] = result;
  v14[1] = a2;
  if (a2 <= 0x17)
  {
    *(_DWORD *)a5 = 30;
    *(void *)(a5 + 8) = "src/protocols/bdx/BdxUri.cpp";
    int v8 = 43;
    goto LABEL_16;
  }
  uint64_t v6 = result;
  if (*(_DWORD *)result == 980968546 && *(_WORD *)(result + 4) == 12079)
  {
    __n128 result = sub_244CC5A68(result + 6, 0x10uLL, (uint64_t)v15, 8);
    if (result == 8)
    {
      unint64_t v11 = bswap64(v15[0]);
      *a3 = v11;
      if (v11 - 1 <= 0xFFFFFFEFFFFFFFFELL)
      {
        if (*(unsigned char *)(v6 + 22) == 47)
        {
          __n128 result = sub_244DDF948(v14, 0x17uLL);
          int v12 = 0;
          *a4 = result;
          a4[1] = v13;
          int v8 = 57;
        }
        else
        {
          int v8 = 53;
          int v12 = 224;
        }
        goto LABEL_15;
      }
      int v8 = 52;
    }
    else
    {
      int v8 = 49;
    }
    int v12 = 71;
LABEL_15:
    *(_DWORD *)a5 = v12;
    *(void *)(a5 + 8) = "src/protocols/bdx/BdxUri.cpp";
    goto LABEL_16;
  }
  *(_DWORD *)a5 = 223;
  *(void *)(a5 + 8) = "src/protocols/bdx/BdxUri.cpp";
  int v8 = 44;
LABEL_16:
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_244DDF948(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 < a2) {
    sub_244E22B88();
  }
  sub_24479476C(&v4, *a1 + a2, v2 - a2);
  return v4;
}

unint64_t sub_244DDF988@<X0>(unint64_t result@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v17[1] = *MEMORY[0x263EF8340];
  if (a3)
  {
    v17[0] = bswap64(result);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    __n128 result = (unint64_t)sub_244CC58A0((char *)v17, 8, v16, 0x10uLL, 1u, (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    int v9 = *(void **)a4;
    size_t v10 = *(void *)(a4 + 8);
    bzero(*(void **)a4, v10);
    uint64_t v13 = v9;
    unint64_t v14 = v10 - 1;
    unint64_t v15 = 0;
    if (!v9) {
      unint64_t v14 = 0;
    }
    sub_244CC572C(&v13, "bdx://", 6uLL);
    sub_244CC572C(&v13, v16, 0x10uLL);
    sub_244CC56BC(&v13, "/");
    __n128 result = (unint64_t)sub_244CC572C(&v13, a2, a3);
    if (v14 >= v15)
    {
      __n128 result = sub_244CEB124(a4, v15);
      int v12 = 0;
      int v11 = 84;
    }
    else
    {
      int v11 = 81;
      int v12 = 25;
    }
    *(_DWORD *)a5 = v12;
    a5[1] = "src/protocols/bdx/BdxUri.cpp";
  }
  else
  {
    *(_DWORD *)a5 = 30;
    a5[1] = "src/protocols/bdx/BdxUri.cpp";
    int v11 = 62;
  }
  *((_DWORD *)a5 + 4) = v11;
  return result;
}

uint64_t sub_244DDFAF0(int *a1)
{
  int v1 = *a1;
  if (*a1 == 166) {
    int v2 = 81;
  }
  else {
    int v2 = 95;
  }
  if (v1 == 108) {
    int v3 = 80;
  }
  else {
    int v3 = v2;
  }
  if (v1 == 47) {
    unsigned int v4 = 22;
  }
  else {
    unsigned int v4 = v3;
  }
  if (v1 == 3) {
    return 24;
  }
  else {
    return v4;
  }
}

void *sub_244DDFB2C(void *a1)
{
  *a1 = &unk_26F959280;
  a1[1] = &unk_26F9592D0;
  sub_244DDFBA0((uint64_t)a1);
  int v2 = (_WORD *)a1[7];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[7] = 0;
  return a1;
}

uint64_t sub_244DDFBA0(uint64_t a1)
{
  sub_244DDE4D4(a1 + 16);
  int v2 = sub_244CC8484(0xCu, "BDX");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "Stop polling for messages", v4, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xCu, 2);
  }
  uint64_t result = *(void *)(a1 + 264);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void (*)(uint64_t, void *), uint64_t))(*(void *)result + 72))(result, sub_244DDFC88, a1);
  }
  return result;
}

void sub_244DDFC88(uint64_t a1, void *a2)
{
  if (a2) {
    sub_244DE0050(a2);
  }
}

void sub_244DDFC98(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _WORD **a4@<X3>, void *a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 256)) {
    *(void *)(a1 + 256) = a2;
  }
  int v9 = sub_244CC8484(0xCu, "BDX");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = *a3;
    int v11 = HIWORD(*((_DWORD *)a3 + 1));
    int v12 = (unsigned __int16)*((_DWORD *)a3 + 1);
    *(_DWORD *)uint64_t buf = 136315906;
    *(void *)&uint8_t buf[4] = "OnMessageReceived";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v12;
    __int16 v18 = 1024;
    int v19 = v11;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "%s: message 0x%x protocol (%u, %u)", buf, 0x1Eu);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xCu, 3);
  }
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  long long v16 = *a4;
  *a4 = 0;
  uint64_t v13 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  sub_244DDE538(a1 + 16, (uint64_t)a3, &v16, v13, (uint64_t)a5);
  if (v16) {
    sub_244CC8A0C(v16);
  }
  long long v16 = 0;
  if (*(_DWORD *)a5)
  {
    unint64_t v14 = sub_244CC8484(0xCu, "BDX");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)a5;
      *(void *)&uint8_t buf[16] = a5[2];
      unint64_t v15 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "failed to handle message: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)a5;
      *(void *)&uint8_t buf[16] = a5[2];
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0xCu, 1);
    }
  }
  *(_WORD *)(*(void *)(a1 + 256) + 8) |= 0x40u;
}

void sub_244DDFF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v4 = sub_244CC8484(0xCu, "BDX");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int16 *)(a2 + 112);
    *(_DWORD *)uint64_t buf = 136315650;
    int v8 = "OnResponseTimeout";
    if (sub_244D64530(a2)) {
      int v6 = 105;
    }
    else {
      int v6 = 114;
    }
    __int16 v9 = 1024;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "%s, ec: %u%c", buf, 0x18u);
  }
  if (sub_244CC4E58(1u))
  {
    sub_244D64530(a2);
    sub_244CC4DE0(0xCu, 1);
  }
  *(void *)(a1 + 256) = 0;
  sub_244DDE4D4(a1 + 16);
}

void sub_244DE0050(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __int16 v6 = 0;
  int v7 = 0;
  __int16 v8 = 95;
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  sub_244DDCF90(v2, (uint64_t)&v6, v3);
  (*(void (**)(void *, __int16 *))(*a1 + 56))(a1, &v6);
  uint64_t v4 = a1[33];
  if (v4)
  {
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v4 + 40))(buf);
  }
  else
  {
    int v5 = sub_244CC8484(0xCu, "BDX");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      int v10 = "PollForOutput";
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "%s mSystemLayer is null", buf, 0xCu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xCu, 1);
    }
  }
  if (v7) {
    sub_244CC8A0C(v7);
  }
}

uint64_t sub_244DE01FC(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 264);
  if (v1) {
    return (uint64_t)(*(void *(**)(uint8_t *__return_ptr))(*(void *)v1 + 40))(buf);
  }
  uint64_t v3 = sub_244CC8484(0xCu, "BDX");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    int v5 = "ScheduleImmediatePoll";
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "%s mSystemLayer is null", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result) {
    return sub_244CC4DE0(0xCu, 1);
  }
  return result;
}

void *sub_244DE0318@<X0>(void *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, void *a8@<X8>)
{
  if (a2)
  {
    __int16 v9 = result;
    *((_DWORD *)result + 68) = a7;
    result[33] = a2;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    uint64_t result = (void *)sub_244DDD6A4((uint64_t)(result + 2), a3, a4, a5, a6, (uint64_t)a8);
    if (*(_DWORD *)a8) {
      return result;
    }
    int v10 = sub_244CC8484(0xCu, "BDX");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Start polling for messages", v13, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xCu, 2);
    }
    uint64_t result = (*(void *(**)(uint8_t *__return_ptr))(*(void *)v9[33] + 40))(v13);
    int v11 = 0;
    int v12 = 116;
  }
  else
  {
    int v12 = 107;
    int v11 = 47;
  }
  *(_DWORD *)a8 = v11;
  a8[1] = "src/protocols/bdx/TransferFacilitator.cpp";
  *((_DWORD *)a8 + 4) = v12;
  return result;
}

void sub_244DE0460(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, int a5@<W4>, int a6@<W5>, void *a7@<X8>)
{
  if (a2)
  {
    *(_DWORD *)(a1 + 272) = a6;
    *(void *)(a1 + 264) = a2;
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
    sub_244DDD370(a1 + 16, a3, a4, a5, (uint64_t)a7);
    if (*(_DWORD *)a7) {
      return;
    }
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 264) + 40))(v11);
    int v9 = 0;
    int v10 = 130;
  }
  else
  {
    int v10 = 122;
    int v9 = 47;
  }
  *(_DWORD *)a7 = v9;
  a7[1] = "src/protocols/bdx/TransferFacilitator.cpp";
  *((_DWORD *)a7 + 4) = v10;
}

uint64_t sub_244DE0530(uint64_t result, void *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (*a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  int v5 = sub_244C98F4C(a2);
  uint64_t v6 = 0;
  __int16 v60 = v5 + 1;
  int v7 = (char *)v5 + 98;
  uint64_t v8 = v4;
  while (1)
  {
    if (*(unsigned char *)(v8 + 98))
    {
      int v9 = (uint64_t *)(v8 + 8);
      if (*(void *)(v8 + 8))
      {
        if (sub_244CBEB84((_DWORD *)(v8 + 16), &xmmword_268EC34EC))
        {
          sub_244D7F7F0(buf, v8 + 16, *v9);
          sub_244D7F7F0(&v61, (uint64_t)(v5 + 2), *v60);
          if (!strcmp((const char *)(v8 + 98), v7) && *(unsigned __int16 *)(v8 + 96) == *((unsigned __int16 *)v5 + 48))
          {
            if (*(void *)&v66[4] > 5uLL || v62 >= 6) {
              sub_244E2B77C();
            }
            if (*(void *)&v66[4] == v62) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    ++v6;
    uint64_t v8 = v4 + 424 * v6;
    if (v6 == 10)
    {
      uint64_t v17 = 10;
      do
      {
        if (!*(unsigned char *)(v4 + 98) || !*(void *)(v4 + 8) || !sub_244CBEB84((_DWORD *)(v4 + 16), &xmmword_268EC34EC))
        {
          *(_DWORD *)uint64_t v4 = *(_DWORD *)v5;
          long long v19 = *(_OWORD *)v60;
          *(_OWORD *)(v4 + 24) = *(_OWORD *)(v5 + 3);
          *(_OWORD *)(v4 + 8) = v19;
          long long v20 = *(_OWORD *)(v5 + 5);
          long long v21 = *(_OWORD *)(v5 + 7);
          long long v22 = *(_OWORD *)(v5 + 9);
          *(_OWORD *)(v4 + 88) = *(_OWORD *)(v5 + 11);
          *(_OWORD *)(v4 + 72) = v22;
          *(_OWORD *)(v4 + 56) = v21;
          *(_OWORD *)(v4 + 40) = v20;
          long long v23 = *(_OWORD *)(v5 + 13);
          long long v24 = *(_OWORD *)(v5 + 15);
          long long v25 = *(_OWORD *)(v5 + 17);
          *(_OWORD *)(v4 + 147) = *(_OWORD *)((char *)v5 + 147);
          *(_OWORD *)(v4 + 136) = v25;
          *(_OWORD *)(v4 + 120) = v24;
          *(_OWORD *)(v4 + 104) = v23;
          long long v26 = *(_OWORD *)(v5 + 21);
          long long v27 = *(_OWORD *)(v5 + 23);
          long long v28 = *(_OWORD *)(v5 + 25);
          *(_OWORD *)(v4 + 216) = *(_OWORD *)(v5 + 27);
          *(_OWORD *)(v4 + 200) = v28;
          *(_OWORD *)(v4 + 184) = v27;
          *(_OWORD *)(v4 + 168) = v26;
          long long v29 = *(_OWORD *)(v5 + 29);
          long long v30 = *(_OWORD *)(v5 + 31);
          long long v31 = *(_OWORD *)(v5 + 35);
          *(_OWORD *)(v4 + 264) = *(_OWORD *)(v5 + 33);
          *(_OWORD *)(v4 + 280) = v31;
          *(_OWORD *)(v4 + 248) = v30;
          *(_OWORD *)(v4 + 232) = v29;
          long long v32 = *(_OWORD *)(v5 + 37);
          long long v33 = *(_OWORD *)(v5 + 39);
          long long v34 = *(_OWORD *)(v5 + 43);
          *(_OWORD *)(v4 + 328) = *(_OWORD *)(v5 + 41);
          *(_OWORD *)(v4 + 344) = v34;
          *(_OWORD *)(v4 + 296) = v32;
          *(_OWORD *)(v4 + 312) = v33;
          long long v35 = *(_OWORD *)(v5 + 45);
          long long v36 = *(_OWORD *)(v5 + 47);
          long long v37 = *(_OWORD *)(v5 + 49);
          *(_OWORD *)(v4 + 403) = *(_OWORD *)((char *)v5 + 403);
          *(_OWORD *)(v4 + 376) = v36;
          *(_OWORD *)(v4 + 392) = v37;
          *(_OWORD *)(v4 + 360) = v35;
          goto LABEL_37;
        }
        v4 += 424;
        --v17;
      }
      while (v17);
      __int16 v18 = sub_244CC8484(0x22u, "Discovery");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)__n128 v66 = v7;
        _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_ERROR, "Failed to add discovered node with hostname %s- Insufficient space", buf, 0xCu);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        return sub_244CC4DE0(0x22u, 1);
      }
      return result;
    }
  }
  char v58 = v7;
  uint64_t v59 = v3;
  if (!*(void *)&v66[4])
  {
    int8x8_t v11 = 0;
    goto LABEL_25;
  }
  unint64_t v10 = 0;
  int8x8_t v11 = 0;
  do
  {
    unint64_t v12 = v62;
    if (!v62) {
      goto LABEL_22;
    }
    unint64_t v13 = 0;
    while (((1 << v13) & *(void *)&v11) != 0)
    {
LABEL_18:
      if (++v13 >= v12) {
        goto LABEL_22;
      }
    }
    unint64_t v14 = (_DWORD *)sub_244DE0B14(buf, v10);
    unint64_t v15 = (_DWORD *)sub_244DE0B14(&v61, v13);
    if (!sub_244CBEB38(v14, v15))
    {
      unint64_t v12 = v62;
      goto LABEL_18;
    }
    if (v13 >= 5) {
      abort();
    }
    *(void *)&v11 |= 1 << v13;
LABEL_22:
    ++v10;
  }
  while (v10 < *(void *)&v66[4]);
LABEL_25:
  int8x8_t v63 = v11;
  char v64 = 1;
  uint64_t v16 = sub_244DE0B40(&v63, 0, (uint64_t)&v63, 5u, &v64);
  uint64_t v3 = v59;
  int v7 = v58;
  if (v16 != v62) {
    goto LABEL_26;
  }
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v5;
  long long v38 = *(_OWORD *)(v5 + 3);
  *(_OWORD *)int v9 = *(_OWORD *)v60;
  *(_OWORD *)(v8 + 24) = v38;
  long long v39 = *(_OWORD *)(v5 + 5);
  long long v40 = *(_OWORD *)(v5 + 7);
  long long v41 = *(_OWORD *)(v5 + 11);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v5 + 9);
  *(_OWORD *)(v8 + 88) = v41;
  *(_OWORD *)(v8 + 40) = v39;
  *(_OWORD *)(v8 + 56) = v40;
  long long v42 = *(_OWORD *)(v5 + 13);
  long long v43 = *(_OWORD *)(v5 + 15);
  long long v44 = *(_OWORD *)(v5 + 17);
  *(_OWORD *)(v8 + 147) = *(_OWORD *)((char *)v5 + 147);
  *(_OWORD *)(v8 + 120) = v43;
  *(_OWORD *)(v8 + 136) = v44;
  *(_OWORD *)(v8 + 104) = v42;
  uint64_t v45 = v4 + 424 * v6;
  long long v46 = *(_OWORD *)(v5 + 21);
  long long v47 = *(_OWORD *)(v5 + 23);
  long long v48 = *(_OWORD *)(v5 + 25);
  *(_OWORD *)(v45 + 216) = *(_OWORD *)(v5 + 27);
  *(_OWORD *)(v45 + 200) = v48;
  *(_OWORD *)(v45 + 184) = v47;
  *(_OWORD *)(v45 + 168) = v46;
  long long v49 = *(_OWORD *)(v5 + 29);
  long long v50 = *(_OWORD *)(v5 + 31);
  long long v51 = *(_OWORD *)(v5 + 35);
  *(_OWORD *)(v45 + 264) = *(_OWORD *)(v5 + 33);
  *(_OWORD *)(v45 + 280) = v51;
  *(_OWORD *)(v45 + 248) = v50;
  *(_OWORD *)(v45 + 232) = v49;
  long long v52 = *(_OWORD *)(v5 + 37);
  long long v53 = *(_OWORD *)(v5 + 39);
  long long v54 = *(_OWORD *)(v5 + 43);
  *(_OWORD *)(v45 + 328) = *(_OWORD *)(v5 + 41);
  *(_OWORD *)(v45 + 344) = v54;
  *(_OWORD *)(v45 + 296) = v52;
  *(_OWORD *)(v45 + 312) = v53;
  long long v55 = *(_OWORD *)(v5 + 45);
  long long v56 = *(_OWORD *)(v5 + 47);
  long long v57 = *(_OWORD *)(v5 + 49);
  *(_OWORD *)(v45 + 403) = *(_OWORD *)((char *)v5 + 403);
  *(_OWORD *)(v45 + 376) = v56;
  *(_OWORD *)(v45 + 392) = v57;
  *(_OWORD *)(v45 + 360) = v55;
LABEL_37:
  uint64_t result = *(void *)(v3 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v5);
  }
  return result;
}

void sub_244DE09BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v4 = 10;
  do
  {
    *(_DWORD *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 144) = 0;
    *(unsigned char *)(v3 + 148) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    *(unsigned char *)(v3 + 156) = 0;
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 162) = 0;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 127) = 0u;
    sub_244DB4A8C(v3);
    *(_OWORD *)(v3 + 168) = 0u;
    int v5 = (_OWORD *)(v3 + 168);
    *(_OWORD *)((char *)v5 + 2sub_244D6A434("src/app/CommandHandler.cpp", 35) = 0u;
    v5[13] = 0u;
    v5[14] = 0u;
    v5[11] = 0u;
    v5[12] = 0u;
    v5[9] = 0u;
    v5[10] = 0u;
    v5[7] = 0u;
    unsigned char v5[8] = 0u;
    v5[5] = 0u;
    v5[6] = 0u;
    void v5[3] = 0u;
    v5[4] = 0u;
    v5[1] = 0u;
    char v5[2] = 0u;
    uint64_t v3 = (uint64_t)(v5 + 16);
    --v4;
  }
  while (v4);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/controller/AbstractDnssdDiscoveryController.cpp";
  *(_DWORD *)(a2 + 16) = 104;
}

uint64_t sub_244DE0A90(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (a2 > 9) {
    return 0;
  }
  uint64_t v4 = v3 + 424 * a2;
  if (!*(unsigned char *)(v4 + 98) || !*(void *)(v4 + 8)) {
    return 0;
  }
  if (sub_244CBEB84((_DWORD *)(v4 + 16), &xmmword_268EC34EC)) {
    return v4;
  }
  return 0;
}

uint64_t sub_244DE0B14(void *a1, unint64_t a2)
{
  if (a1[1] <= a2) {
    sub_244E2B8CC();
  }
  return *a1 + 16 * a2;
}

uint64_t sub_244DE0B40(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_244DE0B60(a1, a2, v5);
  }
  else {
    return sub_244DE0C04((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_244DE0B60(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_244DE0C04(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_244DE0CB0(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F959388;
  bzero((void *)(a1 + 8), 0x2A0uLL);
  *(void *)(a1 + 560) = "src/controller/CommissioningDelegate.h";
  *(_DWORD *)(a1 + 568) = 116;
  *(unsigned char *)(a1 + 578) = 0;
  *(unsigned char *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 604) = 0;
  *(unsigned char *)(a1 + 624) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(unsigned char *)(a1 + 676) = 0;
  *(_WORD *)(a1 + 680) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 712) = &unk_26F9593F8;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 736) = &unk_26F956F80;
  *(unsigned char *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  uint64_t v2 = 1144;
  *(unsigned char *)(a1 + 784) = 0;
  do
  {
    uint64_t v3 = a1 + v2;
    *(_DWORD *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 0;
    v2 += 40;
  }
  while (v3 + 40 != a1 + 1224);
  uint64_t v4 = 1352;
  do
  {
    uint64_t v5 = a1 + v4;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 16) = 0;
    *(unsigned char *)(v5 + 24) = 0;
    v4 += 32;
  }
  while (v5 + 32 != a1 + 1672);
  *(unsigned char *)(a1 + 1800) = 0;
  *(_WORD *)(a1 + 1808) = -1;
  *(_WORD *)(a1 + 1812) = -1;
  *(_WORD *)(a1 + 1816) = -1;
  *(void *)(a1 + 1820) = 0;
  *(void *)(a1 + 1826) = 0;
  *(_WORD *)(a1 + 1834) = 514;
  *(_DWORD *)(a1 + 1840) = 0;
  *(_WORD *)(a1 + 1844) = 257;
  *(void *)(a1 + 1848) = 0;
  *(unsigned char *)(a1 + 1856) = 1;
  *(_WORD *)(a1 + 1864) = 0;
  *(void *)(a1 + 1868) = 0;
  *(_WORD *)(a1 + 1876) = 0;
  *(_DWORD *)(a1 + 1880) = 0;
  *(void *)(a1 + 1912) = 0;
  *(_WORD *)(a1 + 1920) = 0;
  *(void *)(a1 + 1928) = 0;
  *(_WORD *)(a1 + 1936) = 0;
  *(_WORD *)(a1 + 2802) = 0;
  *(_WORD *)(a1 + 3704) = 0;
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1888) = 0;
  *(_WORD *)(a1 + 1904) = 0;
  bzero(v8, 0x2A0uLL);
  *(void *)&v9[175] = "src/controller/CommissioningDelegate.h";
  int v10 = 116;
  char v11 = 0;
  char v12 = 0;
  char v13 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  (*(void (**)(void *__return_ptr, uint64_t, unsigned char *))(*(void *)a1 + 16))(v7, a1, v8);
  if (v8[376]) {
    sub_244CED784(v9, 16);
  }
  return a1;
}

uint64_t sub_244DE0F18(uint64_t a1)
{
  *(void *)a1 = &unk_26F959388;
  uint64_t v2 = *(void **)(a1 + 1912);
  if (v2) {
    j__free(v2);
  }
  *(_WORD *)(a1 + 1920) = 0;
  *(void *)(a1 + 1912) = 0;
  uint64_t v3 = *(void **)(a1 + 1928);
  if (v3) {
    j__free(v3);
  }
  *(_WORD *)(a1 + 1936) = 0;
  *(void *)(a1 + 1928) = 0;
  *(void *)(a1 + 712) = &unk_26F9593F8;
  sub_244D87F44(a1 + 736);
  if (*(unsigned char *)(a1 + 384)) {
    sub_244CED784(a1 + 385, 16);
  }
  return a1;
}

void sub_244DE0FBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1912);
  if (v2) {
    j__free(v2);
  }
  *(_WORD *)(a1 + 1920) = 0;
  *(void *)(a1 + 1912) = 0;
}

void sub_244DE0FF0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1928);
  if (v2) {
    j__free(v2);
  }
  *(_WORD *)(a1 + 1936) = 0;
  *(void *)(a1 + 1928) = 0;
}

void *sub_244DE1024(void *a1)
{
  *a1 = &unk_26F9593F8;
  sub_244D87F44(a1 + 3);
  return a1;
}

void sub_244DE106C(uint64_t a1)
{
  sub_244DE0F18(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244DE10A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 704) = a2;
  return result;
}

uint64_t sub_244DE10AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_244CC8484(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v13 = 0;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Checking ICD registration parameters", v13, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(9u, 2);
  }
  if (!*(unsigned char *)(a1 + 632))
  {
    uint8x8_t v8 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v13 = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Missing ICD symmetric key!", v13, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    int v7 = 77;
    if ((result & 1) == 0) {
      goto LABEL_31;
    }
LABEL_30:
    uint64_t result = sub_244CC4DE0(9u, 1);
LABEL_31:
    int v6 = 47;
    goto LABEL_32;
  }
  v13[0] = *(unsigned char *)(a1 + 632);
  long long v14 = *(_OWORD *)(a1 + 640);
  uint64_t result = (uint64_t)sub_2446D18A4(v13);
  if (*(void *)(result + 8) != 16)
  {
    uint8x8_t v9 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v13 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Invalid ICD symmetric key length!", v13, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    int v7 = 82;
    if ((result & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a1 + 600))
  {
    int v10 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v13 = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Missing ICD check-in node id!", v13, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    int v7 = 87;
    if ((result & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a1 + 616))
  {
    char v11 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v13 = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Missing ICD monitored subject!", v13, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    int v7 = 92;
    if ((result & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a1 + 656))
  {
    char v12 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v13 = 0;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Missing ICD Client Type!", v13, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    int v7 = 97;
    if (!result) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  int v6 = 0;
  int v7 = 99;
LABEL_32:
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

unsigned char *sub_244DE13A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 264))
  {
    if (!*(unsigned char *)(a1 + 272)) {
      goto LABEL_69;
    }
    v142[0] = *(unsigned char *)(a2 + 264);
    long long v6 = *(_OWORD *)(a2 + 288);
    long long v143 = *(_OWORD *)(a2 + 272);
    long long v144 = v6;
    uint64_t v7 = *(void *)sub_244DE2554(v142);
    v139[0] = *(unsigned char *)(a1 + 272);
    if (v139[0])
    {
      long long v8 = *(_OWORD *)(a1 + 296);
      long long v140 = *(_OWORD *)(a1 + 280);
      long long v141 = v8;
    }
    if (v7 != *(void *)sub_244DE2554(v139)) {
      goto LABEL_69;
    }
    v136[0] = *(unsigned char *)(a2 + 264);
    if (v136[0])
    {
      long long v9 = *(_OWORD *)(a2 + 288);
      long long v137 = *(_OWORD *)(a2 + 272);
      long long v138 = v9;
    }
    uint64_t v10 = *((void *)sub_244DE2554(v136) + 2);
    v133[0] = *(unsigned char *)(a1 + 272);
    if (v133[0])
    {
      long long v11 = *(_OWORD *)(a1 + 296);
      long long v134 = *(_OWORD *)(a1 + 280);
      long long v135 = v11;
    }
    if (v10 != *((void *)sub_244DE2554(v133) + 2)) {
      goto LABEL_69;
    }
  }
  v131[0] = *(unsigned char *)(a2 + 304);
  if (v131[0]) {
    long long v132 = *(_OWORD *)(a2 + 312);
  }
  v129[0] = *(unsigned char *)(a1 + 312);
  if (v129[0]) {
    long long v130 = *(_OWORD *)(a1 + 320);
  }
  if (sub_244DE2578(v131, v129)) {
    goto LABEL_69;
  }
  v127[0] = *(unsigned char *)(a2 + 328);
  if (v127[0]) {
    long long v128 = *(_OWORD *)(a2 + 336);
  }
  v125[0] = *(unsigned char *)(a1 + 336);
  if (v125[0]) {
    long long v126 = *(_OWORD *)(a1 + 344);
  }
  if (sub_244DE2578(v127, v125)) {
    goto LABEL_69;
  }
  v123[0] = *(unsigned char *)(a2 + 352);
  if (v123[0]) {
    long long v124 = *(_OWORD *)(a2 + 360);
  }
  v121[0] = *(unsigned char *)(a1 + 360);
  if (v121[0]) {
    long long v122 = *(_OWORD *)(a1 + 368);
  }
  if (sub_244DE2578(v123, v121)) {
    goto LABEL_69;
  }
  if (*(unsigned char *)(a2 + 376))
  {
    v120 = sub_2446F9190((unsigned char *)(a2 + 376));
    v119[0] = 1;
    if (!*(unsigned char *)(a1 + 384))
    {
LABEL_69:
      uint64_t v13 = a1 + 8;
      sub_244DE2630(a1 + 8, (unsigned __int8 *)a2);
      *(unsigned char *)(a1 + 1905) = 0;
LABEL_70:
      sub_244DE29EC((unsigned char *)v13);
      goto LABEL_71;
    }
  }
  else
  {
    v119[0] = 0;
    if (!*(unsigned char *)(a1 + 384))
    {
      v117[0] = 0;
      goto LABEL_34;
    }
  }
  v118 = sub_2446F9190((unsigned char *)(a1 + 384));
  v117[0] = 1;
  if (v119[0])
  {
    uint64_t v12 = *(void *)sub_2446F7170(v119);
    if (v12 != *(void *)sub_2446F7170(v117)) {
      goto LABEL_69;
    }
  }
LABEL_34:
  v115[0] = *(unsigned char *)(a2 + 416);
  if (v115[0]) {
    long long v116 = *(_OWORD *)(a2 + 424);
  }
  v113[0] = *(unsigned char *)(a1 + 424);
  if (v113[0]) {
    long long v114 = *(_OWORD *)(a1 + 432);
  }
  if (sub_244DE2578(v115, v113)) {
    goto LABEL_69;
  }
  v111[0] = *(unsigned char *)(a2 + 440);
  if (v111[0]) {
    long long v112 = *(_OWORD *)(a2 + 448);
  }
  v109[0] = *(unsigned char *)(a1 + 448);
  if (v109[0]) {
    long long v110 = *(_OWORD *)(a1 + 456);
  }
  if (sub_244DE2578(v111, v109)) {
    goto LABEL_69;
  }
  v107[0] = *(unsigned char *)(a2 + 464);
  if (v107[0]) {
    long long v108 = *(_OWORD *)(a2 + 472);
  }
  v105[0] = *(unsigned char *)(a1 + 472);
  if (v105[0]) {
    long long v106 = *(_OWORD *)(a1 + 480);
  }
  if (sub_244DE2578(v107, v105)) {
    goto LABEL_69;
  }
  v103[0] = *(unsigned char *)(a2 + 488);
  if (v103[0]) {
    long long v104 = *(_OWORD *)(a2 + 496);
  }
  v101[0] = *(unsigned char *)(a1 + 496);
  if (v101[0]) {
    long long v102 = *(_OWORD *)(a1 + 504);
  }
  if (sub_244DE2578(v103, v101)) {
    goto LABEL_69;
  }
  v99[0] = *(unsigned char *)(a2 + 16);
  if (v99[0]) {
    long long v100 = *(_OWORD *)(a2 + 24);
  }
  v97[0] = *(unsigned char *)(a1 + 24);
  if (v97[0]) {
    long long v98 = *(_OWORD *)(a1 + 32);
  }
  if (sub_244DE25D4(v99, v97)) {
    goto LABEL_69;
  }
  v95[0] = *(unsigned char *)(a2 + 40);
  if (v95[0]) {
    long long v96 = *(_OWORD *)(a2 + 48);
  }
  v93[0] = *(unsigned char *)(a1 + 48);
  if (v93[0]) {
    long long v94 = *(_OWORD *)(a1 + 56);
  }
  if (sub_244DE25D4(v95, v93)) {
    goto LABEL_69;
  }
  v91[0] = *(unsigned char *)(a2 + 632);
  if (v91[0]) {
    long long v92 = *(_OWORD *)(a2 + 640);
  }
  v89[0] = *(unsigned char *)(a1 + 640);
  if (v89[0]) {
    long long v90 = *(_OWORD *)(a1 + 648);
  }
  if (sub_244DE2578(v91, v89)) {
    goto LABEL_69;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    buf[0] = *(unsigned char *)(a2 + 64);
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 72);
    *(void *)&long long v87 = *(void *)(a2 + 88);
    if (sub_2446D18A4(buf)[16])
    {
      v145[0] = *(unsigned char *)(a2 + 64);
      if (v145[0])
      {
        long long v146 = *(_OWORD *)(a2 + 72);
        uint64_t v147 = *(void *)(a2 + 88);
      }
      BOOL v76 = sub_2446D18A4(v145);
      if (!v76[16]) {
        goto LABEL_234;
      }
      uint64_t v77 = *(void *)v76;
      uint64_t v13 = a1 + 8;
      sub_244DE2630(a1 + 8, (unsigned __int8 *)a2);
      *(unsigned char *)(a1 + 1905) = 0;
      if (v77 == a1 + 1672) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
  uint64_t v13 = a1 + 8;
  sub_244DE2630(a1 + 8, (unsigned __int8 *)a2);
  *(unsigned char *)(a1 + 1905) = 0;
LABEL_71:
  if (*(unsigned char *)(a2 + 240))
  {
    buf[0] = *(unsigned char *)(a2 + 240);
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 248);
    long long v14 = sub_2446D18A4(buf);
    size_t v15 = *((void *)v14 + 1);
    if (v15 >= 0xFF)
    {
      long long v28 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "Thread operational data set is too large", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      uint64_t result = sub_244DE29EC((unsigned char *)v13);
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      int v27 = 151;
      goto LABEL_224;
    }
    memcpy((void *)(a1 + 888), *(const void **)v14, v15);
    char v16 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "Setting thread operational dataset from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    sub_2446C1098(&v88, a1 + 888, v15);
    *(unsigned char *)(v13 + 240) = 1;
    *(_OWORD *)(v13 + 248) = v88;
    *(_WORD *)(v13 + 594) = 1;
  }
  if (*(unsigned char *)(a2 + 176))
  {
    buf[0] = *(unsigned char *)(a2 + 176);
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 184);
    long long v87 = *(_OWORD *)(a2 + 200);
    char v17 = sub_244DE2554(buf);
    size_t v18 = *((void *)v17 + 1);
    if (v18 > 0x20 || (size_t v19 = *((void *)v17 + 3), v19 >= 0x41))
    {
      long long v29 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_ERROR, "Wifi credentials are too large", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      uint64_t result = sub_244DE29EC((unsigned char *)v13);
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      int v27 = 167;
      goto LABEL_224;
    }
    long long v20 = (const void *)*((void *)v17 + 2);
    memcpy((void *)(a1 + 792), *(const void **)v17, v18);
    memcpy((void *)(a1 + 824), v20, v19);
    long long v21 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_DEFAULT, "Setting wifi credentials from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    sub_2446C1098(&v85, a1 + 792, v18);
    sub_2446C1098(&v84, a1 + 824, v19);
    *(unsigned char *)(v13 + 176) = 1;
    *(_OWORD *)(v13 + 184) = v85;
    *(_OWORD *)(v13 + 200) = v84;
    *(_WORD *)(v13 + 592) = 1;
  }
  if (*(unsigned char *)(a2 + 216))
  {
    buf[0] = *(unsigned char *)(a2 + 216);
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 224);
    long long v22 = sub_2446D18A4(buf);
    long long v23 = *(const void **)v22;
    size_t v24 = *((void *)v22 + 1);
    *(void *)uint64_t buf = a1 + 1142;
    *(void *)&uint8_t buf[8] = 2;
    if (v24 > 2)
    {
      long long v25 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v145 = 67109120;
        *(_DWORD *)&v145[4] = v24;
        _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_ERROR, "Country code is too large: %u", v145, 8u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      uint64_t result = sub_244DE29EC((unsigned char *)v13);
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      int v27 = 189;
      goto LABEL_224;
    }
    memcpy((void *)(a1 + 1142), v23, v24);
    sub_244CEB124((uint64_t)buf, v24);
    sub_24479476C(&v83, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
    *(unsigned char *)(v13 + 216) = 1;
    *(_OWORD *)(v13 + 224) = v83;
  }
  int v30 = *(unsigned __int8 *)(a2 + 152);
  long long v31 = sub_244CC8484(9u, "Controller");
  BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
  if (v30)
  {
    if (v32)
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_DEFAULT, "Setting attestation nonce from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    buf[0] = *(unsigned char *)(a2 + 152);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 160);
    }
    uint64_t result = sub_2446D18A4(buf);
    if (*((void *)result + 1) != 32)
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      int v27 = 197;
      goto LABEL_224;
    }
    buf[0] = *(unsigned char *)(a2 + 152);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 160);
    }
    long long v33 = *(const void **)sub_2446D18A4(buf);
    v145[0] = *(unsigned char *)(a2 + 152);
    if (v145[0]) {
      long long v146 = *(_OWORD *)(a2 + 160);
    }
    long long v34 = sub_2446D18A4(v145);
    memcpy((void *)(a1 + 1938), v33, *((void *)v34 + 1));
  }
  else
  {
    if (v32)
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v31, OS_LOG_TYPE_DEFAULT, "Setting attestation nonce to random value", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    sub_244CECD5C((char *)(a1 + 1938), 0x20uLL, (uint64_t)buf);
  }
  sub_2446C1098(&v82, a1 + 1938, 32);
  *(unsigned char *)(v13 + 152) = 1;
  *(_OWORD *)(v13 + 160) = v82;
  int v35 = *(unsigned __int8 *)(a2 + 128);
  long long v36 = sub_244CC8484(9u, "Controller");
  BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    if (v37)
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v36, OS_LOG_TYPE_DEFAULT, "Setting CSR nonce from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    buf[0] = *(unsigned char *)(a2 + 128);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 136);
    }
    uint64_t result = sub_2446D18A4(buf);
    if (*((void *)result + 1) != 32)
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      int v27 = 210;
      goto LABEL_224;
    }
    buf[0] = *(unsigned char *)(a2 + 128);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 136);
    }
    long long v38 = *(const void **)sub_2446D18A4(buf);
    v145[0] = *(unsigned char *)(a2 + 128);
    if (v145[0]) {
      long long v146 = *(_OWORD *)(a2 + 136);
    }
    long long v39 = sub_2446D18A4(v145);
    memcpy((void *)(a1 + 1970), v38, *((void *)v39 + 1));
  }
  else
  {
    if (v37)
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v36, OS_LOG_TYPE_DEFAULT, "Setting CSR nonce to random value", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    sub_244CECD5C((char *)(a1 + 1970), 0x20uLL, (uint64_t)buf);
  }
  uint64_t result = sub_2446C1098(&v81, a1 + 1970, 32);
  *(unsigned char *)(v13 + 128) = 1;
  *(_OWORD *)(v13 + 136) = v81;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v40 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v40, OS_LOG_TYPE_DEFAULT, "Setting DST offsets from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    buf[0] = *(unsigned char *)(a2 + 40);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 48);
    }
    long long v41 = sub_244DE2554(buf);
    if (*((void *)v41 + 1) >= 0xAuLL) {
      uint64_t v42 = 10;
    }
    else {
      uint64_t v42 = *((void *)v41 + 1);
    }
    if (v42)
    {
      unint64_t v43 = 0;
      long long v44 = (_OWORD *)(a1 + 1352);
      do
      {
        buf[0] = *(unsigned char *)(a2 + 40);
        if (buf[0]) {
          *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 48);
        }
        uint64_t v45 = sub_244DE2554(buf);
        long long v46 = (_OWORD *)sub_244DE2A68(v45, v43);
        long long v47 = v46[1];
        *long long v44 = *v46;
        v44[1] = v47;
        v44 += 2;
        ++v43;
      }
      while (v42 != v43);
    }
    uint64_t result = sub_244DD1C14(buf, a1 + 1352, v42);
    *(unsigned char *)(v13 + 40) = 1;
    *(_OWORD *)(v13 + 48) = *(_OWORD *)buf;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v48 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v48, OS_LOG_TYPE_DEFAULT, "Setting Time Zone from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    uint64_t v79 = a3;
    buf[0] = *(unsigned char *)(a2 + 16);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 24);
    }
    long long v49 = sub_244DE2554(buf);
    if (*((void *)v49 + 1) >= 2uLL) {
      uint64_t v50 = 2;
    }
    else {
      uint64_t v50 = *((void *)v49 + 1);
    }
    if (v50)
    {
      unint64_t v51 = 0;
      long long v52 = (_OWORD *)(a2 + 24);
      long long v53 = (_OWORD *)(a1 + 1168);
      uint64_t v54 = a1 + 1224;
      do
      {
        buf[0] = *(unsigned char *)(a2 + 16);
        if (buf[0]) {
          *(_OWORD *)&uint8_t buf[8] = *v52;
        }
        long long v55 = sub_244DE2554(buf);
        uint64_t v56 = sub_244DE2A94(v55, v51);
        *(_OWORD *)((char *)v53 - 24) = *(_OWORD *)v56;
        int v57 = *(unsigned __int8 *)(v56 + 16);
        *((unsigned char *)v53 - 8) = v57;
        if (v57) {
          *long long v53 = *(_OWORD *)(v56 + 24);
        }
        buf[0] = *(unsigned char *)(a2 + 16);
        if (buf[0]) {
          *(_OWORD *)&uint8_t buf[8] = *v52;
        }
        char v58 = sub_244DE2554(buf);
        if (!*(unsigned char *)(sub_244DE2A94(v58, v51) + 16)) {
          goto LABEL_184;
        }
        v145[0] = *(unsigned char *)(a2 + 16);
        if (v145[0]) {
          long long v146 = *v52;
        }
        uint64_t v59 = sub_244DE2554(v145);
        uint64_t v60 = sub_244DE2A94(v59, v51);
        if (*((void *)sub_24479DC08((unsigned char *)(v60 + 16)) + 1) <= 0x40uLL)
        {
          sub_244D7F7F0(v145, v54, 64);
          buf[0] = *(unsigned char *)(a2 + 16);
          if (buf[0]) {
            *(_OWORD *)&uint8_t buf[8] = *v52;
          }
          uint64_t v61 = sub_244DE2554(buf);
          uint64_t v62 = sub_244DE2A94(v61, v51);
          int8x8_t v63 = sub_24479DC08((unsigned char *)(v62 + 16));
          size_t v64 = *((void *)v63 + 1);
          uint64_t v65 = v146;
          if ((unint64_t)v146 >= v64)
          {
            memcpy(*(void **)v145, *(const void **)v63, v64);
            sub_244CEB124((uint64_t)v145, v64);
            uint64_t v65 = v146;
          }
          sub_24479476C(buf, *(uint64_t *)v145, v65);
          *((unsigned char *)v53 - 8) = 1;
          *long long v53 = *(_OWORD *)buf;
        }
        else
        {
LABEL_184:
          *((unsigned char *)v53 - 8) = 0;
        }
        ++v51;
        long long v53 = (_OWORD *)((char *)v53 + 40);
        v54 += 2;
      }
      while (v50 != v51);
    }
    uint64_t result = sub_244DD1C14(buf, a1 + 1144, v50);
    *(unsigned char *)(v13 + 16) = 1;
    *(_OWORD *)(v13 + 24) = *(_OWORD *)buf;
    a3 = v79;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    __n128 v66 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v66, OS_LOG_TYPE_DEFAULT, "Setting Default NTP from parameters", buf, 2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(9u, 2);
    }
    buf[0] = *(unsigned char *)(a2 + 64);
    if (buf[0])
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 72);
      *(void *)&long long v87 = *(void *)(a2 + 88);
    }
    uint64_t result = sub_2446D18A4(buf);
    if (result[16])
    {
      v145[0] = *(unsigned char *)(a2 + 64);
      if (v145[0])
      {
        long long v146 = *(_OWORD *)(a2 + 72);
        uint64_t v147 = *(void *)(a2 + 88);
      }
      uint64_t result = sub_2446D18A4(v145);
      if (result[16])
      {
        if (*((void *)result + 1) > 0x80uLL) {
          goto LABEL_208;
        }
        sub_244D7F7F0(v145, a1 + 1672, 128);
        buf[0] = *(unsigned char *)(a2 + 64);
        if (buf[0])
        {
          *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 72);
          *(void *)&long long v87 = *(void *)(a2 + 88);
        }
        uint64_t v67 = sub_2446D18A4(buf);
        if (v67[16])
        {
          size_t v68 = *((void *)v67 + 1);
          if ((unint64_t)v146 >= v68)
          {
            memcpy(*(void **)v145, *(const void **)v67, v68);
            sub_244CEB124((uint64_t)v145, v68);
          }
          buf[0] = *(unsigned char *)(a2 + 64);
          if (buf[0])
          {
            *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 72);
            *(void *)&long long v87 = *(void *)(a2 + 88);
          }
          uint64_t v69 = sub_2446D18A4(buf);
          if (v69[16])
          {
            uint64_t result = sub_24479476C(&v80, a1 + 1672, *((void *)v69 + 1));
            *(unsigned char *)(v13 + 64) = 1;
            *(_OWORD *)(v13 + 72) = v80;
            *(unsigned char *)(v13 + 88) = 1;
            goto LABEL_208;
          }
        }
      }
LABEL_234:
      sub_244DE5470();
      return sub_244DE2554(v78);
    }
  }
LABEL_208:
  if (*(unsigned char *)(a2 + 668) && *(unsigned char *)(a2 + 632))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = (unsigned char *)sub_244DE10AC(a2, a3);
    if (*(_DWORD *)a3) {
      return result;
    }
    int v70 = (void *)(a1 + 3770);
    buf[0] = *(unsigned char *)(a2 + 632);
    if (buf[0]) {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a2 + 640);
    }
    uint64_t v71 = *(const void **)sub_2446D18A4(buf);
    v145[0] = *(unsigned char *)(a2 + 632);
    if (v145[0]) {
      long long v146 = *(_OWORD *)(a2 + 640);
    }
    char v72 = sub_2446D18A4(v145);
    memcpy(v70, v71, *((void *)v72 + 1));
    *(unsigned char *)(v13 + 632) = 1;
    *(void *)(v13 + 640) = v70;
    *(void *)(v13 + 648) = 16;
    buf[0] = *(unsigned char *)(a2 + 600);
    if (buf[0]) {
      *(void *)&uint8_t buf[8] = *(void *)(a2 + 608);
    }
    uint64_t v73 = *(void *)sub_2446F7170(buf);
    *(unsigned char *)(v13 + 600) = 1;
    *(void *)(v13 + 608) = v73;
    buf[0] = *(unsigned char *)(a2 + 616);
    if (buf[0]) {
      *(void *)&uint8_t buf[8] = *(void *)(a2 + 624);
    }
    uint64_t v74 = *(void *)sub_2446F7170(buf);
    *(unsigned char *)(v13 + 616) = 1;
    *(void *)(v13 + 624) = v74;
    buf[0] = *(unsigned char *)(a2 + 656);
    if (buf[0]) {
      buf[1] = *(unsigned char *)(a2 + 657);
    }
    uint64_t result = sub_244DE2AC4(buf);
    char v75 = *result;
    *(unsigned char *)(v13 + 656) = 1;
    *(unsigned char *)(v13 + 657) = v75;
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  int v27 = 281;
LABEL_224:
  *(_DWORD *)(a3 + 16) = v27;
  return result;
}

unsigned char *sub_244DE2554(unsigned char *a1)
{
  if (!*a1) {
    sub_244E22468();
  }
  return a1 + 8;
}

BOOL sub_244DE2578(unsigned char *a1, unsigned char *a2)
{
  if (!*a1) {
    return 0;
  }
  if (!*a2) {
    return 1;
  }
  uint64_t v3 = *(void *)sub_2446D18A4(a1);
  return v3 != *(void *)sub_2446D18A4(a2);
}

BOOL sub_244DE25D4(unsigned char *a1, unsigned char *a2)
{
  if (!*a1) {
    return 0;
  }
  if (!*a2) {
    return 1;
  }
  uint64_t v3 = *(void *)sub_244DE2554(a1);
  return v3 != *(void *)sub_244DE2554(a2);
}

uint64_t sub_244DE2630(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  *(unsigned char *)a1 = v4;
  if (v4) {
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 1);
  }
  int v5 = a2[4];
  *(unsigned char *)(a1 + 4) = v5;
  if (v5) {
    *(_WORD *)(a1 + 6) = *((_WORD *)a2 + 3);
  }
  int v6 = a2[8];
  *(unsigned char *)(a1 + 8) = v6;
  if (v6) {
    *(unsigned char *)(a1 + 9) = a2[9];
  }
  int v7 = a2[16];
  *(unsigned char *)(a1 + 16) = v7;
  if (v7) {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  int v8 = a2[40];
  *(unsigned char *)(a1 + 40) = v8;
  if (v8) {
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  }
  int v9 = a2[64];
  *(unsigned char *)(a1 + 64) = v9;
  if (v9)
  {
    long long v10 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v10;
  }
  int v11 = a2[96];
  *(unsigned char *)(a1 + 96) = v11;
  if (v11)
  {
    long long v12 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v12;
  }
  int v13 = a2[128];
  *(unsigned char *)(a1 + 128) = v13;
  if (v13) {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  }
  int v14 = a2[152];
  *(unsigned char *)(a1 + 152) = v14;
  if (v14) {
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  }
  int v15 = a2[176];
  *(unsigned char *)(a1 + 176) = v15;
  if (v15)
  {
    long long v16 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v16;
  }
  int v17 = a2[216];
  *(unsigned char *)(a1 + 216) = v17;
  if (v17) {
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
  }
  int v18 = a2[240];
  *(unsigned char *)(a1 + 240) = v18;
  if (v18) {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  }
  int v19 = a2[264];
  *(unsigned char *)(a1 + 264) = v19;
  if (v19)
  {
    long long v20 = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 288) = v20;
  }
  int v21 = a2[304];
  *(unsigned char *)(a1 + 304) = v21;
  if (v21) {
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  }
  int v22 = a2[328];
  *(unsigned char *)(a1 + 328) = v22;
  if (v22) {
    *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  }
  int v23 = a2[352];
  *(unsigned char *)(a1 + 352) = v23;
  if (v23) {
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  }
  if (*(unsigned char *)(a1 + 376)) {
    sub_244CED784(a1 + 377, 16);
  }
  int v24 = a2[376];
  *(unsigned char *)(a1 + 376) = v24;
  if (v24) {
    *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
  }
  int v25 = a2[400];
  *(unsigned char *)(a1 + 400) = v25;
  if (v25) {
    *(void *)(a1 + 408) = *((void *)a2 + 51);
  }
  int v26 = a2[416];
  *(unsigned char *)(a1 + 416) = v26;
  if (v26) {
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  }
  int v27 = a2[440];
  *(unsigned char *)(a1 + 440) = v27;
  if (v27) {
    *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
  }
  int v28 = a2[464];
  *(unsigned char *)(a1 + 464) = v28;
  if (v28) {
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  }
  int v29 = a2[488];
  *(unsigned char *)(a1 + 488) = v29;
  if (v29) {
    *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
  }
  int v30 = a2[512];
  *(unsigned char *)(a1 + 512) = v30;
  if (v30) {
    *(void *)(a1 + 520) = *((void *)a2 + 65);
  }
  int v31 = a2[528];
  *(unsigned char *)(a1 + 528) = v31;
  if (v31) {
    *(_WORD *)(a1 + 530) = *((_WORD *)a2 + 265);
  }
  int v32 = a2[532];
  *(unsigned char *)(a1 + 532) = v32;
  if (v32) {
    *(_WORD *)(a1 + 534) = *((_WORD *)a2 + 267);
  }
  int v33 = a2[536];
  *(unsigned char *)(a1 + 536) = v33;
  if (v33) {
    *(unsigned char *)(a1 + 537) = a2[537];
  }
  int v34 = a2[538];
  *(unsigned char *)(a1 + 538) = v34;
  if (v34) {
    *(unsigned char *)(a1 + 539) = a2[539];
  }
  int v35 = a2[540];
  *(unsigned char *)(a1 + 540) = v35;
  if (v35) {
    *(unsigned char *)(a1 + 541) = a2[541];
  }
  long long v36 = *((_OWORD *)a2 + 34);
  *(void *)(a1 + 560) = *((void *)a2 + 70);
  *(_OWORD *)(a1 + 544) = v36;
  int v37 = a2[568];
  *(unsigned char *)(a1 + 568) = v37;
  if (v37) {
    *(unsigned char *)(a1 + 569) = a2[569];
  }
  int v38 = a2[570];
  *(unsigned char *)(a1 + 570) = v38;
  if (v38) {
    *(_WORD *)(a1 + 572) = *((_WORD *)a2 + 286);
  }
  int v39 = a2[574];
  *(unsigned char *)(a1 + 574) = v39;
  if (v39) {
    *(unsigned char *)(a1 + 575) = a2[575];
  }
  int v40 = a2[576];
  *(unsigned char *)(a1 + 576) = v40;
  if (v40) {
    *(unsigned char *)(a1 + 577) = a2[577];
  }
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  int v41 = a2[592];
  *(unsigned char *)(a1 + 592) = v41;
  if (v41) {
    *(unsigned char *)(a1 + 593) = a2[593];
  }
  int v42 = a2[594];
  *(unsigned char *)(a1 + 594) = v42;
  if (v42) {
    *(unsigned char *)(a1 + 595) = a2[595];
  }
  int v43 = a2[596];
  *(unsigned char *)(a1 + 596) = v43;
  if (v43) {
    *(unsigned char *)(a1 + 597) = a2[597];
  }
  int v44 = a2[600];
  *(unsigned char *)(a1 + 600) = v44;
  if (v44) {
    *(void *)(a1 + 608) = *((void *)a2 + 76);
  }
  int v45 = a2[616];
  *(unsigned char *)(a1 + 616) = v45;
  if (v45) {
    *(void *)(a1 + 624) = *((void *)a2 + 78);
  }
  int v46 = a2[632];
  *(unsigned char *)(a1 + 632) = v46;
  if (v46) {
    *(_OWORD *)(a1 + 640) = *((_OWORD *)a2 + 40);
  }
  int v47 = a2[656];
  *(unsigned char *)(a1 + 656) = v47;
  if (v47) {
    *(unsigned char *)(a1 + 657) = a2[657];
  }
  int v48 = a2[660];
  *(unsigned char *)(a1 + 660) = v48;
  if (v48) {
    *(_DWORD *)(a1 + 664) = *((_DWORD *)a2 + 166);
  }
  *(_WORD *)(a1 + 668) = *((_WORD *)a2 + 334);
  return a1;
}

unsigned char *sub_244DE29EC(unsigned char *result)
{
  uint64_t v1 = result;
  result[128] = 0;
  result[152] = 0;
  result[176] = 0;
  result[216] = 0;
  result[240] = 0;
  result[264] = 0;
  result[304] = 0;
  result[328] = 0;
  result[352] = 0;
  if (result[376]) {
    uint64_t result = (unsigned char *)sub_244CED784(result + 377, 16);
  }
  v1[376] = 0;
  v1[416] = 0;
  v1[440] = 0;
  v1[464] = 0;
  v1[488] = 0;
  v1[16] = 0;
  v1[40] = 0;
  v1[64] = 0;
  v1[632] = 0;
  return result;
}

uint64_t sub_244DE2A68(void *a1, unint64_t a2)
{
  if (a1[1] <= a2) {
    sub_244E2B974();
  }
  return *a1 + 32 * a2;
}

uint64_t sub_244DE2A94(void *a1, unint64_t a2)
{
  if (a1[1] <= a2) {
    sub_244E2B974();
  }
  return *a1 + 40 * a2;
}

unsigned char *sub_244DE2AC4(unsigned char *a1)
{
  if (!*a1) {
    sub_244E22468();
  }
  return a1 + 1;
}

uint64_t sub_244DE2AE8(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_244DE2AF0(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = sub_244DE2CEC(a1, a2, a3);
  int v6 = *a3;
  int v7 = sub_244CC8484(9u, "Controller");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = sub_244DEA240(a2);
      *(_OWORD *)uint64_t buf = *(_OWORD *)a3;
      *(void *)&uint8_t buf[16] = *((void *)a3 + 2);
      long long v10 = sub_244CB7B34((const char **)buf, 1);
      int v11 = sub_244DEA240(v5);
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v10;
      *(_WORD *)&unsigned char buf[22] = 2080;
      int v14 = v11;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Going from commissioning step '%s' with lastErr = '%s' -> '%s'", buf, 0x20u);
    }
    if (sub_244CC4E58(2u))
    {
      sub_244DEA240(a2);
      *(_OWORD *)uint64_t buf = *(_OWORD *)a3;
      *(void *)&uint8_t buf[16] = *((void *)a3 + 2);
      sub_244CB7B34((const char **)buf, 1);
      sub_244DEA240(v5);
LABEL_10:
      sub_244CC4DE0(9u, 2);
    }
  }
  else
  {
    if (v8)
    {
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = sub_244DEA240(a2);
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = sub_244DEA240(v5);
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Commissioning stage next step: '%s' -> '%s'", buf, 0x16u);
    }
    if (sub_244CC4E58(2u))
    {
      sub_244DEA240(a2);
      sub_244DEA240(v5);
      goto LABEL_10;
    }
  }
  return v5;
}

uint64_t sub_244DE2CEC(uint64_t a1, char a2, _DWORD *a3)
{
  if (*(unsigned char *)(a1 + 681)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *a3 == 0;
  }
  if (v3)
  {
    while (2)
    {
      LOBYTE(result) = 2;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          if (!*(void *)(a1 + 1824))
          {
            LOBYTE(result) = 3;
            return result;
          }
          return sub_244DE2AF0(a1, 19);
        case 3:
          LOBYTE(result) = 4;
          return result;
        case 4:
          LOBYTE(result) = 5;
          return result;
        case 5:
          if (*(unsigned char *)(a1 + 1840)) {
            LOBYTE(result) = 6;
          }
          else {
            LOBYTE(result) = 10;
          }
          return result;
        case 6:
          a2 = 7;
          if (*(unsigned char *)(a1 + 1841))
          {
            a2 = 7;
            LOBYTE(result) = 7;
            if (*(unsigned char *)(a1 + 24)) {
              return result;
            }
          }
          continue;
        case 7:
          a2 = 8;
          if (*(unsigned char *)(a1 + 1904))
          {
            a2 = 8;
            LOBYTE(result) = 8;
            if (*(unsigned char *)(a1 + 48)) {
              return result;
            }
          }
          continue;
        case 8:
          a2 = 9;
          if (*(unsigned char *)(a1 + 1842))
          {
            a2 = 9;
            LOBYTE(result) = 9;
            if (*(unsigned char *)(a1 + 72)) {
              return result;
            }
          }
          continue;
        case 9:
          LOBYTE(result) = 10;
          return result;
        case 10:
          LOBYTE(result) = 11;
          return result;
        case 11:
          LOBYTE(result) = 12;
          return result;
        case 12:
          LOBYTE(result) = 13;
          return result;
        case 13:
          LOBYTE(result) = 14;
          return result;
        case 14:
          LOBYTE(result) = 15;
          return result;
        case 15:
          LOBYTE(result) = 16;
          return result;
        case 16:
          LOBYTE(result) = 17;
          return result;
        case 17:
          LOBYTE(result) = 18;
          return result;
        case 18:
          LOBYTE(result) = 19;
          return result;
        case 19:
          a2 = 20;
          if (*(unsigned char *)(a1 + 1843))
          {
            a2 = 20;
            LOBYTE(result) = 20;
            if (*(unsigned char *)(a1 + 104)) {
              return result;
            }
          }
          continue;
        case 20:
          a2 = 22;
          if (!*(unsigned char *)(a1 + 1905)) {
            continue;
          }
          if (*(unsigned char *)(a1 + 608))
          {
            LOBYTE(result) = 21;
            if (*(unsigned char *)(a1 + 624))
            {
              if (*(unsigned char *)(a1 + 640)) {
                LOBYTE(result) = 22;
              }
              else {
                LOBYTE(result) = 21;
              }
            }
          }
          else
          {
            LOBYTE(result) = 21;
          }
          return result;
        case 21:
          LOBYTE(result) = 22;
          return result;
        case 22:
          if (*(unsigned char *)(a1 + 1800))
          {
            if (sub_244DE3490(a1))
            {
              LOBYTE(result) = 35;
            }
            else
            {
              BOOL v8 = sub_244CC8484(9u, "Controller");
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "No NetworkScan enabled or WiFi/Thread endpoint not specified, skipping ScanNetworks", buf, 2u);
              }
              if (sub_244CC4E58(2u)) {
                sub_244CC4DE0(9u, 2);
              }
              LOBYTE(result) = sub_244DE3148(a1, 0, (uint64_t)a3);
            }
            return result;
          }
          sub_244DE3528(a1);
          v11[0] = *(unsigned char *)(a1 + 604);
          if (!v11[0]) {
            goto LABEL_75;
          }
          v11[1] = *(unsigned char *)(a1 + 605);
          int v7 = v11;
LABEL_74:
          if (!*sub_2446D18C8(v7)) {
            goto LABEL_75;
          }
          goto LABEL_5;
        case 23:
          LOBYTE(result) = 25;
          return result;
        case 24:
          LOBYTE(result) = 26;
          return result;
        case 25:
          LOBYTE(result) = 27;
          return result;
        case 26:
          LOBYTE(result) = 28;
          return result;
        case 27:
          v10[0] = *(unsigned char *)(a1 + 604);
          if (v10[0])
          {
            v10[1] = *(unsigned char *)(a1 + 605);
            if (*sub_2446D18C8(v10))
            {
              sub_244DE3528(a1);
              goto LABEL_5;
            }
          }
          sub_244DE3528(a1);
LABEL_75:
          LOBYTE(result) = 29;
          break;
        case 28:
          sub_244DE3528(a1);
          v9[0] = *(unsigned char *)(a1 + 604);
          if (!v9[0]) {
            goto LABEL_75;
          }
          v9[1] = *(unsigned char *)(a1 + 605);
          int v7 = v9;
          goto LABEL_74;
        case 29:
          LOBYTE(result) = 30;
          return result;
        case 30:
          LOBYTE(result) = 33;
          return result;
        case 31:
          LOBYTE(result) = 32;
          return result;
        case 32:
          goto LABEL_5;
        case 33:
          LOBYTE(result) = 31;
          return result;
        case 35:
          LOBYTE(result) = 36;
          return result;
        case 36:
        case 38:
        case 39:
          return sub_244DE3148(a1, 0, (uint64_t)a3);
        case 37:
          if (*(_WORD *)(a1 + 1808)) {
            LOBYTE(result) = 39;
          }
          else {
            LOBYTE(result) = 38;
          }
          return result;
        default:
          LOBYTE(result) = 0;
          return result;
      }
      break;
    }
  }
  else
  {
LABEL_5:
    LOBYTE(result) = 34;
  }
  return result;
}

uint64_t sub_244DE3148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_244DE3414(a1))
  {
    if (*(_WORD *)(a1 + 1808)) {
      unsigned __int8 v5 = 24;
    }
    else {
      unsigned __int8 v5 = 23;
    }
    if (*(_WORD *)(a1 + 1808)) {
      unsigned __int8 v6 = 23;
    }
    else {
      unsigned __int8 v6 = 24;
    }
    if (*(unsigned char *)(a1 + 680)) {
      return v6;
    }
    else {
      return v5;
    }
  }
  else if (!*(unsigned char *)(a1 + 184) || *(__int16 *)(a1 + 1808) == -1)
  {
    if (!*(unsigned char *)(a1 + 248) || *(__int16 *)(a1 + 1812) == -1)
    {
      BOOL v8 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Required network information not provided in commissioning parameters", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      int v9 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(a1 + 184)) {
          long long v10 = "yes";
        }
        else {
          long long v10 = "no";
        }
        if (*(unsigned char *)(a1 + 248)) {
          int v11 = "yes";
        }
        else {
          int v11 = "no";
        }
        *(_DWORD *)uint64_t buf = 136315394;
        int v17 = v10;
        __int16 v18 = 2080;
        int v19 = v11;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Parameters supplied: wifi (%s) thread (%s)", buf, 0x16u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      long long v12 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (*(__int16 *)(a1 + 1808) == -1) {
          int v13 = "no";
        }
        else {
          int v13 = "yes";
        }
        if (*(__int16 *)(a1 + 1812) == -1) {
          int v14 = "no";
        }
        else {
          int v14 = "yes";
        }
        *(_DWORD *)uint64_t buf = 136315394;
        int v17 = v13;
        __int16 v18 = 2080;
        int v19 = v14;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Device supports: wifi (%s) thread(%s)", buf, 0x16u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      *(_DWORD *)(a3 + 16) = 335;
      return 34;
    }
    else
    {
      return 24;
    }
  }
  else
  {
    return 23;
  }
}

BOOL sub_244DE3414(uint64_t a1)
{
  v3[0] = *(unsigned char *)(a1 + 548);
  if (v3[0]
    && (v3[1] = *(unsigned char *)(a1 + 549), *sub_2446D18C8(v3))
    && *(unsigned char *)(a1 + 184)
    && *(__int16 *)(a1 + 1808) != -1
    && *(unsigned char *)(a1 + 248))
  {
    return *(__int16 *)(a1 + 1812) != -1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_244DE3490(uint64_t a1)
{
  v4[0] = *(unsigned char *)(a1 + 600);
  if (v4[0])
  {
    v4[1] = *(unsigned char *)(a1 + 601);
    if (*sub_2446D18C8(v4))
    {
      if (*(__int16 *)(a1 + 1808) != -1) {
        return 1;
      }
    }
  }
  v3[0] = *(unsigned char *)(a1 + 602);
  if (v3[0] && (v3[1] = *(unsigned char *)(a1 + 603), *sub_2446D18C8(v3))) {
    return *(__int16 *)(a1 + 1812) != -1;
  }
  else {
    return 0;
  }
}

uint64_t sub_244DE3528(uint64_t result)
{
  if (*(unsigned char *)(result + 12))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 696);
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 688);
      unsigned int v4 = *(unsigned __int8 *)(v3 + 4344);
      v8[0] = *(unsigned char *)(result + 12);
      __int16 v9 = *(_WORD *)(result + 14);
      unsigned int v5 = *(unsigned __int16 *)sub_2446D1880(v8);
      sub_244DE35F8(v1, *(void *)(v1 + 696), 4, (uint64_t)v6);
      v10[0] = v6[0];
      if (v6[0]) {
        int v11 = v7;
      }
      return sub_244DF5808(v3, v2, v4, v5, v10, (uint64_t)sub_244DE37D4, (void (*)(uint64_t, long long *))sub_244DE38A8, 1);
    }
  }
  return result;
}

void *sub_244DE35F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a3 > 26)
  {
    if (a3 == 28)
    {
      int v10 = *(unsigned __int8 *)(a1 + 1814);
    }
    else
    {
      if (a3 != 27)
      {
LABEL_14:
        unsigned int v6 = 2000;
        goto LABEL_15;
      }
      BOOL v8 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int8 *)(a1 + 1810);
        LODWORD(buf) = 67109120;
        HIDWORD(buf) = v9;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Setting wifi connection time min = %u", (uint8_t *)&buf, 8u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(9u, 2);
      }
      int v10 = *(unsigned __int8 *)(a1 + 1810);
    }
    unsigned int v6 = 1000 * v10;
    goto LABEL_15;
  }
  unsigned int v6 = 7000;
  if (a3 != 15 && a3 != 19) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 48))(&buf, a2);
  if ((_BYTE)buf)
  {
    long long v12 = (uint64_t *)sub_24479DC08(&buf);
    uint64_t result = (void *)sub_244D87C24(*v12, v6);
    int v13 = buf;
    if (result <= 0x7530) {
      int v14 = 30000;
    }
    else {
      int v14 = (int)result;
    }
    *(unsigned char *)a4 = 1;
    *(_DWORD *)(a4 + 4) = v14;
    if (v13) {
      return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
  }
  else
  {
    if (v6 <= 0x7530) {
      int v15 = 30000;
    }
    else {
      int v15 = v6;
    }
    *(unsigned char *)a4 = 1;
    *(_DWORD *)(a4 + 4) = v15;
  }
  return result;
}

uint64_t sub_244DE37D4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_244CC8484(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "ExtendFailsafe received ArmFailSafe response errorCode=%u", buf, 8u);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result) {
    return sub_244CC4DE0(9u, 2);
  }
  return result;
}

uint64_t sub_244DE38A8(uint64_t a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_244CC8484(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    long long v8 = *a2;
    uint64_t v9 = *((void *)a2 + 2);
    int v4 = sub_244CB7B34((const char **)&v8, 1);
    *(_DWORD *)uint64_t buf = 136315138;
    int v11 = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "ExtendFailsafe received failure response %s\n", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(2u);
  if (result)
  {
    long long v6 = *a2;
    uint64_t v7 = *((void *)a2 + 2);
    sub_244CB7B34((const char **)&v6, 1);
    return sub_244CC4DE0(9u, 2);
  }
  return result;
}

uint64_t sub_244DE39AC(uint64_t a1, unsigned char *a2)
{
  uint64_t result = 0;
  switch(*a2)
  {
    case 0x17:
    case 0x1B:
      uint64_t result = *(unsigned __int16 *)(a1 + 1808);
      break;
    case 0x18:
    case 0x1C:
      uint64_t result = *(unsigned __int16 *)(a1 + 1812);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_244DE3A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    if (a3 && ((*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a3 + 48))(buf, a3), buf[0]))
    {
      (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
      *(unsigned char *)(a1 + 681) = 0;
      *(void *)(a1 + 688) = a2;
      *(void *)(a1 + 696) = a3;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a3 + 48))(buf, a3);
      long long v8 = (uint64_t *)sub_2446F7170(buf);
      int v9 = *(unsigned __int8 *)(sub_244D879D8(*v8) + 112);
      if (buf[0]) {
        (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
      }
      *(unsigned char *)(a1 + 1800) = v9 == 2;
      *(_OWORD *)uint64_t buf = xmmword_2651A9C00;
      uint64_t v20 = 609;
      uint64_t v10 = sub_244DE2AF0(a1, 1u, (int *)buf);
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(a1 + 688);
      uint64_t v13 = *(void *)(a1 + 696);
      switch((int)v10)
      {
        case 23:
        case 27:
          uint64_t v11 = *(unsigned __int16 *)(a1 + 1808);
          break;
        case 24:
        case 28:
          uint64_t v11 = *(unsigned __int16 *)(a1 + 1812);
          break;
        default:
          break;
      }
      sub_244DE35F8(a1, *(void *)(a1 + 696), v10, (uint64_t)v18);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))loc_244DFCF74)(v12, v13, v10, a1 + 8, a1, v11, v18);
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/controller/AutoCommissioner.cpp";
      int v16 = 614;
    }
    else
    {
      int v14 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Device proxy secure session error", buf, 2u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(9u, 1);
      }
      *(_DWORD *)a4 = 47;
      *(void *)(a4 + 8) = "src/controller/AutoCommissioner.cpp";
      int v16 = 597;
    }
  }
  else
  {
    uint64_t v17 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Invalid DeviceCommissioner", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      uint64_t result = sub_244CC4DE0(9u, 1);
    }
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/controller/AutoCommissioner.cpp";
    int v16 = 591;
  }
  *(_DWORD *)(a4 + 16) = v16;
  return result;
}

void sub_244DE3D24(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, long long *a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17 = a1 + 2402;
  uint64_t v24 = a1 + 2402;
  uint64_t v25 = 400;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  sub_244D95190(a6, a7, (uint64_t)&v24, (uint64_t)a9);
  if (!*(_DWORD *)a9)
  {
    sub_2446C1098(&v23, v24, v25);
    *(unsigned char *)(a1 + 312) = 1;
    *(_OWORD *)(a1 + 320) = v23;
    *(void *)&long long v23 = a1 + 2002;
    *((void *)&v23 + 1) = 400;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    sub_244D95190(a2, a3, (uint64_t)&v23, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      sub_2446C1098(&v22, v23, *((uint64_t *)&v23 + 1));
      *(unsigned char *)(a1 + 336) = 1;
      *(_OWORD *)(a1 + 344) = v22;
      uint64_t v18 = *(void *)(a1 + 688);
      uint64_t v19 = *(void *)(a1 + 696);
      sub_244DE35F8(a1, v19, 18, (uint64_t)v21);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, unsigned char *))loc_244DFCF74)(v18, v19, 18, a1 + 8, a1, 0, v21);
      if (a5)
      {
        *(void *)&long long v22 = v17;
        *((void *)&v22 + 1) = 400;
        a9[1] = 0;
        a9[2] = 0;
        *a9 = 0;
        sub_244D95190(a4, a5, (uint64_t)&v22, (uint64_t)a9);
        if (*(_DWORD *)a9) {
          return;
        }
        sub_2446C1098(&v20, v22, *((uint64_t *)&v22 + 1));
        *(unsigned char *)(a1 + 360) = 1;
        *(_OWORD *)(a1 + 368) = v20;
      }
      else
      {
        *(unsigned char *)(a1 + 360) = 1;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
      }
      sub_244DE3EEC(a1 + 8, a8);
      *(unsigned char *)(a1 + 408) = 1;
      *(void *)(a1 + 416) = a10;
      *(_DWORD *)a9 = 0;
      a9[1] = "src/controller/AutoCommissioner.cpp";
      *((_DWORD *)a9 + 4) = 696;
    }
  }
}

uint64_t sub_244DE3EEC(uint64_t a1, long long *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v4 = *a2;
  if (*(unsigned char *)(a1 + 376)) {
    sub_244CED784(a1 + 377, 16);
  }
  *(unsigned char *)(a1 + 376) = 1;
  *(_OWORD *)(a1 + 377) = v4;
  sub_244CED784(&v4, 16);
  return a1;
}

void sub_244DE3F80(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  unsigned __int8 v74 = 0;
  unsigned __int8 v76 = 0;
  unsigned __int8 v78 = 0;
  unsigned __int8 v80 = 0;
  long long v72 = *a2;
  uint64_t v73 = *((void *)a2 + 2);
  int v8 = *(_DWORD *)a2;
  int v9 = sub_244CC8484(9u, "Controller");
  uint64_t v10 = v9;
  if (!v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = sub_244DEA240(*((unsigned __int8 *)a3 + 104));
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Successfully finished commissioning step '%s'", buf, 0xCu);
    }
    if (sub_244CC4E58(2u))
    {
      sub_244DEA240(*((unsigned __int8 *)a3 + 104));
      sub_244CC4DE0(9u, 2);
    }
    int v19 = *((unsigned __int8 *)a3 + 104);
    switch(*((unsigned char *)a3 + 104))
    {
      case 3:
        long long v20 = sub_244DE4CE8(a3);
        long long v21 = v20[1];
        *(_OWORD *)(a1 + 1808) = *v20;
        *(_OWORD *)(a1 + 1824) = v21;
        long long v22 = v20[4];
        long long v23 = v20[5];
        long long v24 = v20[3];
        *(_OWORD *)(a1 + 1840) = v20[2];
        *(_OWORD *)(a1 + 1888) = v23;
        *(_OWORD *)(a1 + 1872) = v22;
        *(_OWORD *)(a1 + 1856) = v24;
        if (!*(unsigned char *)(a1 + 8))
        {
          __int16 v25 = *(_WORD *)(a1 + 1832);
          if (v25)
          {
            *(unsigned char *)(a1 + 8) = 1;
            *(_WORD *)(a1 + 10) = v25;
          }
        }
        __int16 v26 = *(_WORD *)(a1 + 1820);
        *(unsigned char *)(a1 + 536) = 1;
        *(_WORD *)(a1 + 538) = v26;
        __int16 v27 = *(_WORD *)(a1 + 1822);
        *(unsigned char *)(a1 + 540) = 1;
        *(_WORD *)(a1 + 542) = v27;
        LOBYTE(v27) = *(unsigned char *)(a1 + 1834);
        *(unsigned char *)(a1 + 544) = 1;
        *(unsigned char *)(a1 + 545) = v27;
        LOBYTE(v27) = *(unsigned char *)(a1 + 1835);
        *(unsigned char *)(a1 + 546) = 1;
        *(unsigned char *)(a1 + 547) = v27;
        *(unsigned char *)(a1 + 1904) = 0;
        LOBYTE(v27) = *(unsigned char *)(a1 + 1856);
        *(unsigned char *)(a1 + 548) = 1;
        *(unsigned char *)(a1 + 549) = v27;
        if (*(unsigned char *)(a1 + 677))
        {
          uint64_t v28 = *(void *)(a1 + 1848);
          if (v28)
          {
            *(unsigned char *)(a1 + 520) = 1;
            *(void *)(a1 + 528) = v28;
          }
        }
        if (*(unsigned char *)(a1 + 676))
        {
          if (*(unsigned char *)(a1 + 1864) && *(unsigned char *)(a1 + 1865))
          {
            *(unsigned char *)(a1 + 1905) = 1;
            int v29 = sub_244CC8484(9u, "Controller");
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_INFO, "AutoCommissioner: ICD supports the check-in protocol.", buf, 2u);
            }
            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(9u, 3);
            }
          }
          else if (*(unsigned char *)(a1 + 668))
          {
            uint64_t v69 = sub_244CC8484(9u, "Controller");
            if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl(&dword_2446BD000, v69, OS_LOG_TYPE_INFO, "AutoCommissioner: Clear ICD StayActiveDurationMsec", buf, 2u);
            }
            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(9u, 3);
            }
            *(unsigned char *)(a1 + 668) = 0;
          }
        }
        goto LABEL_71;
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
      case 0xD:
      case 0xE:
      case 0x10:
        goto LABEL_71;
      case 7:
        *(unsigned char *)(a1 + 1904) = *(unsigned char *)sub_244DE4D10(a3);
        goto LABEL_71;
      case 0xA:
        int v37 = sub_244D91E1C(a3);
        sub_244DE4D38(a1, (uint64_t)v37, (uint64_t)buf);
        goto LABEL_71;
      case 0xB:
        int v38 = sub_244D91E1C(a3);
        sub_244DE4E54(a1, (uint64_t)v38, (uint64_t)buf);
        goto LABEL_71;
      case 0xC:
        int v39 = sub_244D91E40(a3);
        int v40 = sub_244D91E40(a3);
        size_t v41 = v39[1];
        if (v41 >= 0x385)
        {
          int v42 = sub_244CC8484(9u, "Controller");
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            uint64_t v43 = v39[1];
            *(_DWORD *)uint64_t buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v43;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = 900;
            _os_log_impl(&dword_2446BD000, v42, OS_LOG_TYPE_ERROR, "AutoCommissioner attestationElements buffer size %u larger than cache size %u", buf, 0xEu);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(9u, 1);
          }
          *(_DWORD *)a4 = 4;
          a4[1] = "src/controller/AutoCommissioner.cpp";
          int v36 = 825;
          goto LABEL_84;
        }
        uint64_t v61 = v40;
        memcpy((void *)(a1 + 2804), (const void *)*v39, v41);
        *(_WORD *)(a1 + 2802) = v39[1];
        sub_2446C1098(buf, a1 + 2804, v39[1]);
        *(unsigned char *)(a1 + 424) = 1;
        uint64_t v62 = (_OWORD *)(a1 + 432);
        *(_OWORD *)(a1 + 432) = *(_OWORD *)buf;
        int8x8_t v63 = sub_244CC8484(9u, "Controller");
        if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
        {
          int v64 = *((_DWORD *)v39 + 2);
          buf[0] = *(unsigned char *)(a1 + 424);
          if (buf[0]) {
            *(_OWORD *)&uint8_t buf[8] = *v62;
          }
          uint64_t v65 = *((void *)sub_2446D18A4(buf) + 1);
          *(_DWORD *)long long v88 = 67109376;
          *(_DWORD *)&v88[4] = v64;
          *(_WORD *)&v88[8] = 1024;
          *(_DWORD *)&v88[10] = v65;
          _os_log_impl(&dword_2446BD000, v63, OS_LOG_TYPE_INFO, "AutoCommissioner setting attestationElements buffer size %u/%u", v88, 0xEu);
        }
        if (sub_244CC4E58(3u))
        {
          buf[0] = *(unsigned char *)(a1 + 424);
          if (buf[0]) {
            *(_OWORD *)&uint8_t buf[8] = *v62;
          }
          sub_2446D18A4(buf);
          sub_244CC4DE0(9u, 3);
        }
        size_t v66 = v61[3];
        if (v66 >= 0x41)
        {
          uint64_t v67 = sub_244CC8484(9u, "Controller");
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            uint64_t v68 = v61[3];
            *(_DWORD *)uint64_t buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v68;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = 64;
            _os_log_impl(&dword_2446BD000, v67, OS_LOG_TYPE_ERROR, "AutoCommissioner attestationSignature buffer size %u larger than cache size %u", buf, 0xEu);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(9u, 1);
          }
          *(_DWORD *)a4 = 4;
          a4[1] = "src/controller/AutoCommissioner.cpp";
          int v36 = 840;
          goto LABEL_84;
        }
        memcpy((void *)(a1 + 3706), (const void *)v61[2], v66);
        *(_WORD *)(a1 + 3704) = v61[3];
        sub_2446C1098(buf, a1 + 3706, v61[3]);
        *(unsigned char *)(a1 + 448) = 1;
        *(_OWORD *)(a1 + 456) = *(_OWORD *)buf;
        uint64_t v70 = *(void *)(a1 + 704);
        if (!v70) {
          goto LABEL_71;
        }
        *(void *)uint64_t buf = a1 + 1970;
        *(void *)&uint8_t buf[8] = 32;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v70 + 40))(v70, buf);
        if (!*(_DWORD *)a4)
        {
          sub_2446C1098(&v71, a1 + 1970, 32);
          *(unsigned char *)(a1 + 136) = 1;
          *(_OWORD *)(a1 + 144) = v71;
          goto LABEL_71;
        }
        return;
      case 0xF:
        *(_OWORD *)uint64_t buf = *(_OWORD *)sub_244DE4F74(a3);
        long long v44 = *((_OWORD *)sub_244DE4F74(a3) + 1);
        *(unsigned char *)(a1 + 272) = 1;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 296) = v44;
        goto LABEL_71;
      case 0x11:
        uint64_t v50 = sub_244DE4F9C(a3);
        uint64_t v51 = *v50;
        unint64_t v52 = v50[1];
        long long v53 = sub_244DE4F9C(a3);
        uint64_t v54 = v53[2];
        unint64_t v55 = v53[3];
        uint64_t v56 = sub_244DE4F9C(a3);
        uint64_t v57 = v56[4];
        unint64_t v58 = v56[5];
        uint64_t v59 = (long long *)sub_244DE4F9C(a3)[6];
        uint64_t v60 = sub_244DE4F9C(a3);
        sub_244DE3D24(a1, v51, v52, v54, v55, v57, v58, v59, a4, v60[7]);
        return;
      default:
        if ((v19 - 30) < 2)
        {
          int v32 = sub_244DE4FC4(a3);
          *(void *)(a1 + 720) = v32[1];
          *(void *)(a1 + 728) = v32[2];
          sub_244D88198(a1 + 736, (uint64_t)(v32 + 3));
          char v33 = *((unsigned char *)v32 + 72);
          *(void *)(a1 + 776) = v32[8];
          *(unsigned char *)(a1 + 784) = v33;
          goto LABEL_71;
        }
        if (v19 != 34) {
          goto LABEL_71;
        }
        if (sub_244DE3414(a1) && *(unsigned char *)(a1 + 680)) {
          *(unsigned char *)(a1 + 680) = 0;
        }
        int v34 = *(void **)(a1 + 1928);
        if (v34) {
          j__free(v34);
        }
        *(_WORD *)(a1 + 1936) = 0;
        *(void *)(a1 + 1928) = 0;
        int v35 = *(void **)(a1 + 1912);
        if (v35) {
          j__free(v35);
        }
        *(_WORD *)(a1 + 1920) = 0;
        *(void *)(a1 + 1912) = 0;
        *(void *)(a1 + 696) = 0;
        *(_OWORD *)&uint8_t buf[8] = 0u;
        *(void *)uint64_t buf = &unk_26F9593F8;
        long long v84 = 0u;
        long long v83 = &unk_26F956F80;
        char v85 = 0;
        uint64_t v86 = 0;
        char v87 = 0;
        *(_OWORD *)(a1 + 720) = 0u;
        sub_244D881F0(a1 + 736, (uint64_t)&v83);
        *(void *)(a1 + 776) = v86;
        *(unsigned char *)(a1 + 784) = v87;
        *(void *)uint64_t buf = &unk_26F9593F8;
        sub_244D87F44(&v83);
        memset(v88, 0, 14);
        *(_OWORD *)uint64_t buf = 0u;
        *(void *)(a1 + 1808) = 0xFFFF0000FFFFLL;
        *(_DWORD *)(a1 + 1816) = 0xFFFF;
        *(void *)(a1 + 1820) = *(void *)v88;
        *(void *)(a1 + 1826) = 0;
        *(_WORD *)(a1 + 1834) = 514;
        *(void *)(a1 + 1836) = 0;
        *(_DWORD *)(a1 + 1844) = 257;
        *(void *)(a1 + 1848) = 0;
        *(unsigned char *)(a1 + 1856) = 1;
        *(_OWORD *)(a1 + 1857) = 0u;
        *(void *)(a1 + 1873) = 0;
        *(void *)(a1 + 1880) = 0;
        *(_OWORD *)(a1 + 1888) = *(_OWORD *)buf;
        *(unsigned char *)(a1 + 1904) = 0;
        *(_DWORD *)a4 = 0;
        a4[1] = "src/controller/AutoCommissioner.cpp";
        int v36 = 889;
        break;
    }
    goto LABEL_84;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = sub_244DEA240(*((unsigned __int8 *)a3 + 104));
    *(_OWORD *)uint64_t buf = *a2;
    *(void *)&uint8_t buf[16] = *((void *)a2 + 2);
    uint64_t v12 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v12;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Error on commissioning step '%s': '%s'", buf, 0x16u);
  }
  if (sub_244CC4E58(1u))
  {
    sub_244DEA240(*((unsigned __int8 *)a3 + 104));
    *(_OWORD *)uint64_t buf = *a2;
    *(void *)&uint8_t buf[16] = *((void *)a2 + 2);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(9u, 1);
  }
  char v13 = *((unsigned char *)a3 + 104);
  unsigned __int8 v74 = 1;
  char v75 = v13;
  uint64_t v14 = *a3;
  if (*a3 == 8)
  {
    char v30 = *(unsigned char *)sub_244DE4CC0(a3);
    unsigned __int8 v80 = 1;
    char v81 = v30;
    if (sub_244DE3490(a1))
    {
      if (!v72)
      {
        long long v72 = *a2;
        uint64_t v73 = *((void *)a2 + 2);
      }
      *(_DWORD *)a2 = 0;
      *((void *)a2 + 1) = "src/controller/AutoCommissioner.cpp";
      *((_DWORD *)a2 + 4) = 745;
      *((unsigned char *)a3 + 104) = 35;
    }
  }
  else if (v14 == 7)
  {
    char v31 = *(unsigned char *)sub_244DE4C98(a3);
    unsigned __int8 v78 = 1;
    char v79 = v31;
  }
  else if (v14 == 6)
  {
    __int16 v15 = *(_WORD *)sub_244DE4C70(a3);
    unsigned __int8 v76 = 1;
    __int16 v77 = v15;
    if (*(_WORD *)sub_244DE4C70(a3) == 306 || *(_WORD *)sub_244DE4C70(a3) == 305)
    {
      int v16 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Failed device attestation. Device vendor and/or product ID do not match the IDs expected. Verify DAC certificate chain and certification declaration to ensure spec rules followed.", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
    }
    if (*((unsigned char *)a3 + 104) == 13)
    {
      uint64_t v17 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Failed verifying attestation information. Now checking DAC chain revoked status.", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
      *(_DWORD *)a2 = 0;
      *((void *)a2 + 1) = "src/controller/AutoCommissioner.cpp";
      *((_DWORD *)a2 + 4) = 724;
      goto LABEL_71;
    }
  }
  if (*(_DWORD *)a2
    && sub_244DE3414(a1)
    && !*(unsigned char *)(a1 + 680)
    && *sub_244CA1A1C(&v74) >= 0x17u
    && *sub_244CA1A1C(&v74) <= 0x21u)
  {
    *(unsigned char *)(a1 + 680) = 1;
    *(_DWORD *)a2 = 0;
    *((void *)a2 + 1) = "src/controller/AutoCommissioner.cpp";
    *((_DWORD *)a2 + 4) = 758;
    *((unsigned char *)a3 + 104) = 37;
  }
LABEL_71:
  uint64_t v45 = sub_244DE2AF0(a1, *((unsigned __int8 *)a3 + 104), (int *)a2);
  if (!v45)
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/controller/AutoCommissioner.cpp";
    int v36 = 898;
LABEL_84:
    *((_DWORD *)a4 + 4) = v36;
    return;
  }
  if (!v72)
  {
    long long v72 = *a2;
    uint64_t v73 = *((void *)a2 + 2);
  }
  *(void *)(a1 + 568) = v73;
  *(_OWORD *)(a1 + 552) = v72;
  int v46 = v74;
  *(unsigned char *)(a1 + 576) = v74;
  if (v46) {
    *(unsigned char *)(a1 + 577) = v75;
  }
  int v47 = v76;
  *(unsigned char *)(a1 + 578) = v76;
  if (v47) {
    *(_WORD *)(a1 + 580) = v77;
  }
  int v48 = v78;
  *(unsigned char *)(a1 + 582) = v78;
  if (v48) {
    *(unsigned char *)(a1 + 583) = v79;
  }
  int v49 = v80;
  *(unsigned char *)(a1 + 584) = v80;
  if (v49) {
    *(unsigned char *)(a1 + 585) = v81;
  }
  sub_244DE4FEC(a1, v45, (uint64_t)a4);
}

void *sub_244DE4C70(void *a1)
{
  if (*a1 != 6) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244DE4C98(void *a1)
{
  if (*a1 != 7) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244DE4CC0(void *a1)
{
  if (*a1 != 8) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244DE4CE8(void *a1)
{
  if (*a1 != 5) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244DE4D10(void *a1)
{
  if (*a1 != 9) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void sub_244DE4D38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5 = *(void *)(a2 + 8);
  if (!v5)
  {
    uint64_t v11 = *(void **)(a1 + 1928);
    if (v11) {
      j__free(v11);
    }
    int v9 = 0;
    *(_WORD *)(a1 + 1936) = 0;
    *(void *)(a1 + 1928) = 0;
    int v10 = 1009;
    goto LABEL_17;
  }
  if (v5 > 0x258)
  {
    int v10 = 1012;
LABEL_16:
    int v9 = 47;
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 1936))
  {
    uint64_t v7 = *(void **)(a1 + 1928);
    if (v7) {
      j__free(v7);
    }
    *(_WORD *)(a1 + 1936) = 0;
    *(void *)(a1 + 1928) = 0;
    size_t v5 = *(void *)(a2 + 8);
    if (v5 >> 16)
    {
      int v10 = 1018;
      goto LABEL_16;
    }
  }
  int v8 = *(void **)(a1 + 1928);
  if (!v8)
  {
    size_t v5 = (size_t)sub_244CC4D84(v5);
    *(void *)(a1 + 1928) = v5;
    if (!v5)
    {
      int v10 = 1023;
      int v9 = 11;
      goto LABEL_17;
    }
    int v8 = (void *)v5;
    LOWORD(v5) = *(_WORD *)(a2 + 8);
  }
  *(_WORD *)(a1 + 1936) = v5;
  memcpy(v8, *(const void **)a2, (unsigned __int16)v5);
  sub_2446C1098(&v12, *(void *)(a1 + 1928), *(unsigned __int16 *)(a1 + 1936));
  int v9 = 0;
  *(unsigned char *)(a1 + 472) = 1;
  *(_OWORD *)(a1 + 480) = v12;
  int v10 = 1028;
LABEL_17:
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a3 + 16) = v10;
}

void sub_244DE4E54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5 = *(void *)(a2 + 8);
  if (!v5)
  {
    uint64_t v11 = *(void **)(a1 + 1912);
    if (v11) {
      j__free(v11);
    }
    int v9 = 0;
    *(_WORD *)(a1 + 1920) = 0;
    *(void *)(a1 + 1912) = 0;
    int v10 = 972;
    goto LABEL_17;
  }
  if (v5 > 0x258)
  {
    int v10 = 975;
LABEL_16:
    int v9 = 47;
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 1920))
  {
    uint64_t v7 = *(void **)(a1 + 1912);
    if (v7) {
      j__free(v7);
    }
    *(_WORD *)(a1 + 1920) = 0;
    *(void *)(a1 + 1912) = 0;
    size_t v5 = *(void *)(a2 + 8);
    if (v5 >> 16)
    {
      int v10 = 981;
      goto LABEL_16;
    }
  }
  int v8 = *(void **)(a1 + 1912);
  if (!v8)
  {
    size_t v5 = (size_t)sub_244CC4D84(v5);
    *(void *)(a1 + 1912) = v5;
    if (!v5)
    {
      int v10 = 986;
      int v9 = 11;
      goto LABEL_17;
    }
    int v8 = (void *)v5;
    LOWORD(v5) = *(_WORD *)(a2 + 8);
  }
  *(_WORD *)(a1 + 1920) = v5;
  memcpy(v8, *(const void **)a2, (unsigned __int16)v5);
  sub_2446C1098(&v12, *(void *)(a1 + 1912), *(unsigned __int16 *)(a1 + 1920));
  int v9 = 0;
  *(unsigned char *)(a1 + 496) = 1;
  *(_OWORD *)(a1 + 504) = v12;
  int v10 = 991;
LABEL_17:
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a3 + 16) = v10;
}

void *sub_244DE4F74(void *a1)
{
  if (*a1 != 2) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244DE4F9C(void *a1)
{
  if (*a1 != 3) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

void *sub_244DE4FC4(void *a1)
{
  if (*a1 != 4) {
    sub_244E28CCC();
  }
  return a1 + 1;
}

uint64_t sub_244DE4FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 0xFE) == 0x20 || a2 == 34 && *(void *)(a1 + 776))
  {
    uint64_t v6 = a1 + 712;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a1 + 696);
  if (v6)
  {
LABEL_6:
    if (a2 == 8)
    {
      buf[0] = *(unsigned char *)(a1 + 48);
      if (buf[0]) {
        long long v21 = *(_OWORD *)(a1 + 56);
      }
      if (*((void *)sub_244DE2554(buf) + 1) > (unint64_t)*(unsigned __int8 *)(a1 + 1845))
      {
        buf[0] = *(unsigned char *)(a1 + 48);
        if (buf[0]) {
          long long v21 = *(_OWORD *)(a1 + 56);
        }
        int v10 = sub_244DE2554(buf);
        uint64_t v11 = sub_244DE52DC(v10, 0, *(unsigned __int8 *)(a1 + 1845));
        *(unsigned char *)(a1 + 48) = 1;
        *(void *)(a1 + 56) = v11;
        *(void *)(a1 + 64) = v12;
      }
    }
    else
    {
      if (a2 != 7)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(a1 + 688);
        switch((int)a2)
        {
          case 23:
          case 27:
            uint64_t v13 = *(unsigned __int16 *)(a1 + 1808);
            break;
          case 24:
          case 28:
            uint64_t v13 = *(unsigned __int16 *)(a1 + 1812);
            break;
          default:
            goto LABEL_21;
        }
        goto LABEL_21;
      }
      buf[0] = *(unsigned char *)(a1 + 24);
      if (buf[0]) {
        long long v21 = *(_OWORD *)(a1 + 32);
      }
      if (*((void *)sub_244DE2554(buf) + 1) > (unint64_t)*(unsigned __int8 *)(a1 + 1844))
      {
        buf[0] = *(unsigned char *)(a1 + 24);
        if (buf[0]) {
          long long v21 = *(_OWORD *)(a1 + 32);
        }
        uint64_t v7 = sub_244DE2554(buf);
        uint64_t v8 = sub_244DE528C(v7, 0, *(unsigned __int8 *)(a1 + 1844));
        *(unsigned char *)(a1 + 24) = 1;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 40) = v9;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 688);
LABEL_21:
    sub_244DE35F8(a1, v6, a2, (uint64_t)v19);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))loc_244DFCF74)(v14, v6, a2, a1 + 8, a1, v13, v19);
    int v16 = 0;
    int v17 = 954;
    goto LABEL_22;
  }
  uint64_t v18 = sub_244CC8484(9u, "Controller");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_ERROR, "Invalid device for commissioning", buf, 2u);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result) {
    uint64_t result = sub_244CC4DE0(9u, 1);
  }
  int v17 = 929;
  int v16 = 3;
LABEL_22:
  *(_DWORD *)a3 = v16;
  *(void *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a3 + 16) = v17;
  return result;
}

uint64_t sub_244DE5260(uint64_t a1, int a2)
{
  if ((a2 & 0xFE) == 0x20 || a2 == 34 && *(void *)(a1 + 776)) {
    return a1 + 712;
  }
  else {
    return *(void *)(a1 + 696);
  }
}

uint64_t sub_244DE528C(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4) {
    sub_244E2537C();
  }
  if (v5 < a3) {
    sub_244E25420();
  }
  sub_244DD1C14(&v7, *a1 + 40 * a2, a3);
  return v7;
}

uint64_t sub_244DE52DC(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4) {
    sub_244E2537C();
  }
  if (v5 < a3) {
    sub_244E25420();
  }
  sub_244DD1C14(&v7, *a1 + 32 * a2, a3);
  return v7;
}

void sub_244DE5328(void *a1)
{
  *a1 = &unk_26F9593F8;
  sub_244D87F44(a1 + 3);

  JUMPOUT(0x245695FA0);
}

void *sub_244DE538C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v5, a1);
    uint64_t v2 = (uint64_t *)sub_2446F7170(&v5);
    uint64_t v3 = sub_244D879D8(*v2);
    sub_244D85724(v3);
    if ((_BYTE)v5) {
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
  }
  uint64_t result = sub_244D87ED0((void *)(a1 + 24));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  return result;
}

unsigned char *sub_244DE5460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24479DD24(a1 + 24, a2);
}

uint64_t sub_244DE5468(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

double sub_244DE5470()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  *(void *)&double result = sub_244DE5488(v0, v1, v2).n128_u64[0];
  return result;
}

__n128 sub_244DE5488@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    BOOL v4 = sub_244CC8484(9u, "Controller");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Device Controller Factory already initialized...", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(9u, 1);
    }
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/controller/CHIPDeviceControllerFactory.cpp";
    *(_DWORD *)(a3 + 16) = 58;
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)(a2 + 106);
    *(void *)(a1 + 16) = *(void *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 72);
    *(void *)(a1 + 32) = *(void *)(a2 + 80);
    *(void *)(a1 + 40) = *(void *)(a2 + 16);
    *(void *)(a1 + 48) = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 104);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    long long v7 = *(_OWORD *)(a2 + 32);
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v9 = *(_OWORD *)(a2 + 96);
    v11[5] = *(_OWORD *)(a2 + 80);
    _DWORD v11[6] = v9;
    long long v10 = *(_OWORD *)(a2 + 64);
    void v11[3] = v8;
    void v11[4] = v10;
    unsigned char v11[2] = v7;
    sub_244DE55A8(a1, (uint64_t)v11, (void *)a3);
  }
  return result;
}

void sub_244DE55A8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  long long v6 = *(void (*****)(void))(a1 + 8);
  if (v6)
  {
    sub_244DE686C(*(void *)(a1 + 8));
    sub_244DE6D7C(v6 + 21, 0);
    j__free(v6);
    *(void *)(v4 + 8) = 0;
  }
  uint64_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  if (byte_26B0D4370)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/include/platform/PlatformManager.h";
    *((_DWORD *)a3 + 4) = 372;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a1 = sub_244D779EC((uint64_t)&byte_26B0D4370, a3);
    int v31 = *(_DWORD *)a3;
    byte_26B0D4370 = *(_DWORD *)a3 == 0;
    if (v31) {
      goto LABEL_41;
    }
  }
  *(void *)&long long v80 = sub_244D6A430(a1);
  long long v7 = sub_244D6C5A4();
  *(void *)&long long v81 = v7;
  long long v9 = sub_244D6C634();
  *((void *)&v80 + 1) = v9;
  if (!*(void *)(a2 + 64) && !*(void *)(a2 + 80))
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    int v32 = 135;
    goto LABEL_40;
  }
  if (!*(void *)(a2 + 40))
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    int v32 = 136;
    goto LABEL_40;
  }
  long long v10 = &xmmword_268EC3488;
  if (!byte_268EC34D8)
  {
    byte_268EC34D8 = 1;
    xmmword_268EC3488 = 0u;
    unk_268EC3498 = 0u;
    xmmword_268EC34A8 = 0u;
    unk_268EC34B8 = 0u;
    xmmword_268EC34C8 = 0u;
    long long v10 = (long long *)sub_244CBB6E4((uint64_t)&xmmword_268EC3488);
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
  }
  uint64_t v11 = nullsub_13(v10, v8);
  *(void *)&long long v82 = v11;
  if (!v11)
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    int v32 = 147;
    goto LABEL_40;
  }
  uint64_t v12 = v11;
  uint64_t v13 = sub_244CC4D84(0x2F8uLL);
  uint64_t v14 = v13;
  if (v13)
  {
    bzero(v13 + 1, 0x2F0uLL);
    void *v14 = &unk_26F959470;
    void v14[3] = &unk_26F9594C8;
    sub_244DE72A8((uint64_t)(v14 + 5));
  }
  *(void *)&long long v84 = v14;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v61 = v7;
  DWORD1(v62) = 0;
  *((void *)&v62 + 1) = 0;
  LOBYTE(v62) = 2;
  WORD1(v62) = *(_WORD *)(a2 + 106);
  *(void *)uint64_t buf = v7;
  int v78 = 0;
  uint64_t v79 = 0;
  char v76 = 1;
  __int16 v77 = WORD1(v62);
  uint64_t v73 = v12;
  char v74 = 1;
  uint64_t v69 = v9;
  int v72 = 0;
  char v70 = 2;
  __int16 v71 = WORD1(v62);
  sub_244DE600C((uint64_t)v14, (uint64_t)&v61, (uint64_t)buf, &v73, (uint64_t)&v69, a3);
  if (!*(_DWORD *)a3)
  {
    __int16 v15 = sub_244CC4D84(0x118uLL);
    if (v15) {
      sub_244D88628((uint64_t)v15);
    }
    *(void *)&long long v85 = *(void *)(a2 + 16);
    *((void *)&v85 + 1) = v15;
    int v16 = sub_244CC4D84(0x10uLL);
    if (v16)
    {
      *int v16 = &unk_26F954038;
      v16[1] = &unk_26F954080;
    }
    *(void *)&long long v86 = v16;
    int v17 = sub_244CC4D84(0x130uLL);
    if (v17) {
      int v17 = (void *)sub_244D65F50();
    }
    *((void *)&v86 + 1) = v17;
    uint64_t v18 = sub_244CC4D84(0x110uLL);
    if (v18)
    {
      void *v18 = &unk_26F958D80;
      v18[1] = &unk_26F958DD8;
      void v18[2] = &unk_26F958E18;
      uint64_t v18[3] = 0;
      int v19 = v18 + 4;
      do
      {
        *(_OWORD *)int v19 = xmmword_268EC34EC;
        *((unsigned char *)v19 + 16) = 0;
        *((_WORD *)v19 + 9) = 5540;
        *(void *)((char *)v19 + 28) = 0;
        *(void *)((char *)v19 + 20) = 0;
        *((_DWORD *)v19 + 9) = 0;
        v19 += 5;
      }
      while (v19 != v18 + 34);
    }
    uint64_t v20 = *(void *)(a2 + 24);
    *(void *)&long long v87 = v18;
    *((void *)&v82 + 1) = v20;
    long long v21 = sub_244CC4D84(8uLL);
    long long v22 = v21;
    if (v21) {
      *long long v21 = &unk_26F952F98;
    }
    *((void *)&v90 + 1) = v21;
    long long v23 = sub_244CC4D84(0x50uLL);
    if (v23) {
      long long v23 = (void *)sub_244DCC49C(v23, v22);
    }
    uint64_t v24 = *(void *)(a2 + 40);
    uint64_t v91 = (uint64_t)v23;
    *(void *)&long long v83 = v24;
    __int16 v25 = (char *)sub_244CC4D84(0x60uLL);
    if (v25)
    {
      *(void *)__int16 v25 = &unk_26F9591D8;
      *((void *)v25 + 4) = &unk_26F959228;
      *(_OWORD *)(v25 + 72) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      v25[88] = 0;
      *(_OWORD *)(v25 + 56) = 0u;
      *((void *)v25 + 8) = v25 + 56;
      *((void *)v25 + 9) = v25 + 56;
    }
    __int16 v26 = *(void **)(a2 + 64);
    *((void *)&v87 + 1) = v25;
    *((void *)&v81 + 1) = v26;
    if (v26)
    {
      uint64_t v27 = 0;
    }
    else
    {
      sub_244DE6094((uint64_t *)buf);
      uint64_t v34 = *(void *)buf;
      if (!*(void *)buf)
      {
        *(_DWORD *)a3 = 11;
        a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
        int v32 = 200;
        goto LABEL_40;
      }
      uint64_t v61 = *(uint64_t **)(a2 + 8);
      long long v62 = *(_OWORD *)(a2 + 72);
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244DA1038(v34, &v61, (uint64_t)a3);
      __int16 v26 = *(void **)buf;
      if (*(_DWORD *)a3)
      {
        *(void *)uint64_t buf = 0;
        if (v26) {
          sub_244DE8C0C((uint64_t)buf, v26);
        }
        goto LABEL_41;
      }
      *((void *)&v81 + 1) = *(void *)buf;
      uint64_t v27 = *(void *)buf;
    }
    uint64_t v28 = *(void *)(a2 + 88);
    if (v28)
    {
      int v29 = 0;
      uint64_t v30 = *(void *)(a2 + 88);
    }
    else
    {
      int v35 = sub_244CC4D84(0x10uLL);
      int v29 = v35;
      if (v35)
      {
        *int v35 = &unk_26F953FA0;
        v35[1] = 0;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v36 = *(void *)(a2 + 8);
      if (!v36)
      {
        *(_DWORD *)a3 = 47;
        a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.h";
        *((_DWORD *)a3 + 4) = 41;
        if (!v35) {
          goto LABEL_41;
        }
        (*(void (**)(void *))*v35)(v35);
        goto LABEL_72;
      }
      uint64_t v28 = 0;
      v35[1] = v36;
      a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.h";
      *((_DWORD *)a3 + 4) = 43;
      uint64_t v30 = (uint64_t)v35;
    }
    *((void *)&v84 + 1) = v29;
    *((void *)&v83 + 1) = v28;
    int v37 = sub_244CC4D84(0x20uLL);
    int v29 = v37;
    if (v37)
    {
      void *v37 = &unk_26F9597C0;
      v37[1] = 0;
      v37[2] = 0;
      v37[3] = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      if (!v20)
      {
        *(_DWORD *)a3 = 47;
        a3[1] = "src/controller/CHIPDeviceControllerFactory.h";
        *((_DWORD *)a3 + 4) = 241;
LABEL_72:
        j__free(v29);
        goto LABEL_41;
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      if (!v20)
      {
        *(_DWORD *)a3 = 47;
        a3[1] = "src/controller/CHIPDeviceControllerFactory.h";
        int v32 = 241;
        goto LABEL_40;
      }
    }
    v37[2] = v20;
    v37[3] = v30;
    *(void *)&long long v90 = v37;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244DA1B10((uint64_t)v26, (uint64_t)v37, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      goto LABEL_72;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v38 = (uint64_t *)*((void *)&v85 + 1);
    int v39 = (int *)v87;
    if ((void)v87) {
      uint64_t v40 = v87 + 16;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = v80;
    uint64_t v42 = v84;
    uint64_t v60 = *((void *)&v81 + 1);
    sub_244D88860(*((uint64_t *)&v85 + 1), v80, v84, v40, *(void *)(a2 + 8), *((uint64_t *)&v81 + 1), v83, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v43 = (int *)*((void *)&v86 + 1);
      sub_244D65F54(*((uint64_t *)&v86 + 1), v38, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244DD7CF8(v39, v43, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CE4B20(v86, v43, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244DDC81C(*((int **)&v87 + 1), v41, v43, (uint64_t)a3);
            if (!*(_DWORD *)a3)
            {
              sub_2447A0188();
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              long long v44 = sub_244DB12A8();
              (*(void (**)(uint64_t *, void))(*v44 + 16))(v44, v81);
              if (!*(_DWORD *)a3)
              {
                uint64_t v59 = (uint64_t)v43;
                if (*(unsigned char *)(a2 + 104))
                {
                  uint64_t v45 = sub_244DE60DC();
                  *(void *)&long long v88 = v45;
                  a3[1] = 0;
                  a3[2] = 0;
                  *a3 = 0;
                  uint64_t v46 = v85;
                  uint64_t v47 = *((void *)&v82 + 1);
                  sub_244CD05D0(v45, v59, (uint64_t)v38, v60, v30, v85, *((uint64_t *)&v82 + 1), (uint64_t)a3);
                  if (*(_DWORD *)a3) {
                    goto LABEL_41;
                  }
                  unint64_t v58 = sub_2446D634C();
                  *((_WORD *)v58 + 16) = sub_244DB72C4(v42 + 40);
                  int v48 = sub_2446D634C();
                  sub_244DE6100((uint64_t)v48, v60);
                }
                else
                {
                  uint64_t v46 = v85;
                  uint64_t v47 = *((void *)&v82 + 1);
                }
                sub_244DE6120();
                uint64_t v50 = v49;
                *(void *)&long long v89 = v49;
                sub_244DE617C();
                *((void *)&v89 + 1) = v51;
                uint64_t v61 = v38;
                *(void *)&long long v62 = v30;
                *((void *)&v62 + 1) = v46;
                uint64_t v63 = v59;
                uint64_t v64 = v60;
                uint64_t v65 = v47;
                char v66 = 0;
                uint64_t v67 = v51;
                uint64_t v68 = v50;
                sub_244DE61D8();
                uint64_t v53 = v52;
                *((void *)&v88 + 1) = v52;
                a3[1] = 0;
                a3[2] = 0;
                *a3 = 0;
                sub_244DBA8BC(v52, (long long *)&v61, a3);
                if (*(_DWORD *)a3) {
                  goto LABEL_41;
                }
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                uint64_t v54 = sub_244DBE094();
                sub_244DBE0D0((uint64_t)v54, v59, v60, v91, v53, 0, a3);
                if (*(_DWORD *)a3) {
                  goto LABEL_41;
                }
                unint64_t v55 = sub_244DE624C((uint64_t)&v80);
                *(void *)(v4 + 8) = v55;
                char v56 = *(unsigned char *)(a2 + 104);
                v55[22] = v27;
                *((unsigned char *)v55 + 189) = v56;
                uint64_t v57 = sub_244CC8484(9u, "Controller");
                if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl(&dword_2446BD000, v57, OS_LOG_TYPE_INFO, "System State Initialized...", buf, 2u);
                }
                if (sub_244CC4E58(3u)) {
                  sub_244CC4DE0(9u, 3);
                }
                *(_DWORD *)a3 = 0;
                a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
                int v32 = 305;
LABEL_40:
                *((_DWORD *)a3 + 4) = v32;
              }
            }
          }
        }
      }
    }
  }
LABEL_41:
  char v33 = (void (***)(void))*((void *)&v84 + 1);
  *((void *)&v84 + 1) = 0;
  if (v33)
  {
    (**v33)(v33);
    j__free(v33);
  }
}

void sub_244DE5F50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 188))
    {
      uint64_t v3 = *(void *)(v2 + 24);
      __int16 v4 = *(_WORD *)a1;
      uint64_t v5 = *(void *)(a1 + 16);
      char v6 = *(unsigned char *)(a1 + 56);
      uint64_t v7 = *(void *)(v2 + 120);
      uint64_t v8 = *(void *)(v2 + 144);
      uint64_t v9 = *(void *)(v2 + 72);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      v13[0] = *(void *)v2;
      v13[1] = v5;
      v13[2] = v10;
      void v13[3] = v7;
      _OWORD v13[4] = 0;
      char v13[5] = v8;
      long long v14 = *(_OWORD *)(v2 + 8);
      uint64_t v15 = v9;
      long long v16 = *(_OWORD *)(a1 + 24);
      uint64_t v17 = v11;
      uint64_t v18 = v3;
      char v19 = v6;
      __int16 v20 = v4;
      sub_244DE55A8(a1, (uint64_t)v13, (void *)a2);
      return;
    }
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/controller/CHIPDeviceControllerFactory.cpp";
    int v12 = 81;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/controller/CHIPDeviceControllerFactory.cpp";
    int v12 = 80;
  }
  *(_DWORD *)(a2 + 16) = v12;
}

uint64_t sub_244DE600C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t v8 = a1 + 24;
  uint64_t result = sub_244DE89F4(a1 + 24, a1, a2, a3, a4, a5, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    return sub_244D8EDDC(a1, v8, (uint64_t)a6);
  }
  return result;
}

void *sub_244DE6094@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_244CC4D84(0xA58uLL);
  uint64_t v3 = (uint64_t)result;
  if (result)
  {
    bzero(result, 0xA58uLL);
    uint64_t result = (void *)sub_2446D7F64(v3);
  }
  *a1 = v3;
  return result;
}

void *sub_244DE60DC()
{
  uint64_t result = sub_244CC4D84(0x338uLL);
  if (result) {
    return (void *)sub_244DE8E44((uint64_t)result);
  }
  return result;
}

uint64_t sub_244DE6100(uint64_t result, uint64_t a2)
{
  if (!a2) {
    sub_244E2BA18();
  }
  *(void *)(result + 16) = a2;
  return result;
}

double sub_244DE6120()
{
  uint64_t v0 = (char *)sub_244CC4D84(0x40uLL);
  if (v0)
  {
    *((void *)v0 + 7) = 0;
    *(void *)uint64_t v0 = &unk_26F959890;
    double result = 0.0;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 8) = 0u;
    v0[56] = 0;
    *(_OWORD *)(v0 + 24) = 0u;
    *((void *)v0 + 4) = v0 + 24;
    *((void *)v0 + 5) = v0 + 24;
  }
  return result;
}

double sub_244DE617C()
{
  uint64_t v0 = (char *)sub_244CC4D84(0x40uLL);
  if (v0)
  {
    *((void *)v0 + 7) = 0;
    *(void *)uint64_t v0 = &unk_26F959960;
    double result = 0.0;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 8) = 0u;
    v0[56] = 0;
    *(_OWORD *)(v0 + 24) = 0u;
    *((void *)v0 + 4) = v0 + 24;
    *((void *)v0 + 5) = v0 + 24;
  }
  return result;
}

double sub_244DE61D8()
{
  uint64_t v0 = sub_244CC4D84(0x60uLL);
  if (v0)
  {
    v0[8] = 0;
    v0[9] = 0;
    void *v0 = &unk_26F958108;
    v0[1] = &unk_26F958138;
    double result = 0.0;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((unsigned char *)v0 + 64) = 0;
    v0[10] = 0;
    v0[11] = 0;
  }
  return result;
}

void *sub_244DE624C(uint64_t a1)
{
  uint64_t v2 = sub_244CC4D84(0xC0uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    long long v4 = *(_OWORD *)(a1 + 48);
    v13[2] = *(_OWORD *)(a1 + 32);
    void v13[3] = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    v13[0] = *(_OWORD *)a1;
    v13[1] = v5;
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void (****)(void))(a1 + 72);
    *(void *)(a1 + 72) = 0;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    long long v8 = *(_OWORD *)(a1 + 160);
    long long v20 = *(_OWORD *)(a1 + 144);
    long long v21 = v8;
    uint64_t v22 = *(void *)(a1 + 176);
    long long v9 = *(_OWORD *)(a1 + 96);
    long long v16 = *(_OWORD *)(a1 + 80);
    long long v17 = v9;
    long long v10 = *(_OWORD *)(a1 + 128);
    long long v18 = *(_OWORD *)(a1 + 112);
    long long v19 = v10;
    sub_244DE9B3C(v2, v13);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      (**v11)(v11);
      j__free(v11);
    }
  }
  return v3;
}

unsigned char *sub_244DE630C(unsigned char *result, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = *(void *)a3;
  *(void *)(a2 + 24) = *(void *)(a3 + 8);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 16);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 56);
  *(unsigned char *)(a2 + 88) = *(unsigned char *)(a3 + 88);
  *(unsigned char *)(a2 + 90) = *(unsigned char *)(a3 + 90);
  *(unsigned char *)(a2 + 91) = *(unsigned char *)(a3 + 91);
  *(void *)a2 = *((void *)result + 1);
  *(_WORD *)(a2 + 94) = *(_WORD *)(a3 + 72);
  *(unsigned char *)(a2 + 89) = *(unsigned char *)(a3 + 89);
  int v4 = *(unsigned __int8 *)(a3 + 92);
  uint64_t v3 = (unsigned char *)(a3 + 92);
  if (v4)
  {
    double result = sub_2446F9190(v3);
    *(unsigned char *)(a2 + 92) = 1;
    *(unsigned char *)(a2 + 93) = *result;
  }
  return result;
}

uint64_t sub_244DE63AC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 56)) {
    BOOL v2 = *(unsigned char *)(a2 + 36) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v3 = sub_2446D634C();
    return sub_244E1C208((uint64_t)v3);
  }
  return result;
}

void sub_244DE63F0(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(_WORD *)(a2 + 72))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244DE5F50((uint64_t)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      v15[0] = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      memset(&v15[8], 0, 48);
      *(_DWORD *)&v15[56] = 0x10000;
      char v16 = 0;
      sub_244DE630C(a1, (uint64_t)&v13, a2);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      unsigned char v8[2] = *(_OWORD *)v15;
      void v8[3] = *(_OWORD *)&v15[16];
      *(_OWORD *)long long v9 = *(_OWORD *)&v15[32];
      *(_OWORD *)&v9[12] = *(_OWORD *)&v15[44];
      v8[0] = v13;
      v8[1] = v14;
      char v10 = v16;
      if (v16) {
        char v11 = v17;
      }
      __int16 v12 = v18;
      sub_244DED710(a3, (uint64_t)v8, a4);
      if (!*(_DWORD *)a4) {
        sub_244DE63AC((uint64_t)a1, a3);
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a4 + 4) = 344;
  }
}

void sub_244DE6514(unsigned char *a1@<X0>, int8x16_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  if (a2[4].i16[4])
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244DE5F50((uint64_t)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      v17[0] = 0;
      long long v15 = 0u;
      long long v16 = 0u;
      memset(&v17[8], 0, 48);
      *(_DWORD *)&v17[56] = 0x10000;
      char v18 = 0;
      sub_244DE630C(a1, (uint64_t)&v15, (uint64_t)a2);
      *(void *)&v21[0] = a2[5].i64[0];
      *(int8x16_t *)((char *)v21 + 8) = vextq_s8(a2[6], a2[6], 8uLL);
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      unsigned char v8[2] = *(_OWORD *)v17;
      void v8[3] = *(_OWORD *)&v17[16];
      *(_OWORD *)long long v9 = *(_OWORD *)&v17[32];
      *(_OWORD *)&v9[12] = *(_OWORD *)&v17[44];
      v8[0] = v15;
      v8[1] = v16;
      char v10 = v18;
      if (v18) {
        char v11 = v19;
      }
      __int16 v12 = v20;
      long long v13 = v21[0];
      uint64_t v14 = *(void *)&v21[1];
      sub_244DEFE8C(a3, (uint64_t)v8, a4);
      if (!*(_DWORD *)a4) {
        sub_244DE63AC((uint64_t)a1, (uint64_t)a3);
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a4 + 4) = 362;
  }
}

void sub_244DE666C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 8))
  {
    int v4 = 387;
    int v3 = 3;
    goto LABEL_7;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  sub_244D77AA4((uint64_t)&byte_26B0D4370, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    int v3 = 0;
    int v4 = 393;
LABEL_7:
    *(_DWORD *)a2 = v3;
    a2[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a2 + 4) = v4;
  }
}

uint64_t sub_244DE670C(uint64_t a1)
{
  return sub_244DE6714(*(void *)(a1 + 8));
}

uint64_t sub_244DE6714(uint64_t result)
{
  if (atomic_fetch_add((atomic_uint *volatile)(result + 184), 1u) == -1) {
    sub_244E2BAB8();
  }
  if (*(unsigned char *)(result + 188)) {
    sub_244E2BB58();
  }
  return result;
}

BOOL sub_244DE674C(uint64_t a1)
{
  return sub_244DE6754(*(void *)(a1 + 8));
}

BOOL sub_244DE6754(uint64_t a1)
{
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 184), 0xFFFFFFFF);
  if (!add) {
    sub_244E2BBF8();
  }
  if (add == 1) {
    sub_244DE686C(a1);
  }
  return add == 1;
}

void sub_244DE6798(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244DE5F50(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_244DE6714(*(void *)(a1 + 8));
    *(_DWORD *)a2 = 0;
    a2[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a2 + 4) = 410;
  }
}