void sub_244C4F75C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_244C4F948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C4F9BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C4FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C4FFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C50204(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C503D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5044C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C505F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C50658()
{
}

void sub_244C50660()
{
}

uint64_t sub_244C50668(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C50818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C50878()
{
}

void sub_244C50880()
{
}

uint64_t sub_244C50888(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C50934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C509F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C50FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C510B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C513A4()
{
}

void sub_244C513AC()
{
}

uint64_t sub_244C513B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C51570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C515D0()
{
}

void sub_244C515D8()
{
}

uint64_t sub_244C515E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C517A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C51818(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C518C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C519B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C51A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C51FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5208C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5214C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5220C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C522CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5238C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5244C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5250C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C525CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C52674(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C52844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C528B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C52A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C52AC4()
{
}

void sub_244C52ACC()
{
}

uint64_t sub_244C52AD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C52C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C52CE4()
{
}

void sub_244C52CEC()
{
}

uint64_t sub_244C52CF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C52ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C52F40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C530EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5314C()
{
}

void sub_244C53154()
{
}

uint64_t sub_244C5315C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5336C()
{
}

void sub_244C53374()
{
}

uint64_t sub_244C5337C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C53428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C534E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C535A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C53668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C53728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C537E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C538A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C53968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C53A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C53AD0(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C53BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C53BC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C53D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C53E00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C53EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C53F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C54028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C540E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C541A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C54268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C54328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C543E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C54490(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C54584(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C54758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C547CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C549A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C54A14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C54BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C54C5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C54E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C54EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C55078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C550EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C552C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C55334(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C55508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5557C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C55750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C557C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C55984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C559F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C55BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C55C2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C55DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C55E60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5606C()
{
}

void sub_244C56074()
{
}

uint64_t sub_244C5607C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5628C()
{
}

void sub_244C56294()
{
}

uint64_t sub_244C5629C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C56460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C564C0()
{
}

void sub_244C564C8()
{
}

uint64_t sub_244C564D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5657C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5663C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C566FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C567BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5687C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5693C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C569FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C56FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C570BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5717C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C57224(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C57300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C573F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C574F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57508(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C575E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57600(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C576E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C576F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C577D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C577F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C578D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C578E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C579C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C579E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C57AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57AD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C57BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57BBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C57C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C57CA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C57E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C57EAC()
{
}

void sub_244C57EB4()
{
}

uint64_t sub_244C57EBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C58080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C580E0()
{
}

void sub_244C580E8()
{
}

uint64_t sub_244C580F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C582B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C58314()
{
}

void sub_244C5831C()
{
}

uint64_t sub_244C58324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C584D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C58534()
{
}

void sub_244C5853C()
{
}

uint64_t sub_244C58544(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C585F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C586B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C58770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C58830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C588F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C589B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C58A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C58B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C58BD8(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C58DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C58E40()
{
}

void sub_244C58E48()
{
}

uint64_t sub_244C58E50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C58EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C58FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5907C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5913C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C591FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C592BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C59364(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C595C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C59668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C59728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C597E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C598A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C59968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C59A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C59AD0(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C59BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C59BC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C59D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C59DF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C59FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5A02C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5A0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C5A360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5A7C8(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5A8BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5A988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5A9A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5AB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5ABAC()
{
}

void sub_244C5ABB4()
{
}

uint64_t sub_244C5ABBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5ADCC()
{
}

void sub_244C5ADD4()
{
}

uint64_t sub_244C5ADDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5AE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5AF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5B470(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5B65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5B6D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5B918(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5BB60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5BC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5BCC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C5BE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5BF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C2FC(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5C3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5C3F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5C4D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5C5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5C5B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5C660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5C960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5CF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5D020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5D0C8(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5D2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5D318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5D4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5D530()
{
}

void sub_244C5D538()
{
}

uint64_t sub_244C5D540(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5D710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5D770()
{
}

void sub_244C5D778()
{
}

uint64_t sub_244C5D780(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5D82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5D8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5D9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5DA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5DB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5DBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5DC94(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C5DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5DD88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5DFB0()
{
}

void sub_244C5DFB8()
{
}

uint64_t sub_244C5DFC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C5E20C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5E3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5E42C()
{
}

void sub_244C5E434()
{
}

uint64_t sub_244C5E43C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5E660()
{
}

void sub_244C5E668()
{
}

uint64_t sub_244C5E670(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5E834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5E894()
{
}

void sub_244C5E89C()
{
}

uint64_t sub_244C5E8A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5EAB4()
{
}

void sub_244C5EABC()
{
}

uint64_t sub_244C5EAC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5ECE8()
{
}

void sub_244C5ECF0()
{
}

uint64_t sub_244C5ECF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5EEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5EF1C()
{
}

void sub_244C5EF24()
{
}

uint64_t sub_244C5EF2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5F0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5F13C()
{
}

void sub_244C5F144()
{
}

uint64_t sub_244C5F14C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5F2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C5F35C()
{
}

void sub_244C5F364()
{
}

uint64_t sub_244C5F36C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C5F418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5F958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FDD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C5FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C60024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C600CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6018C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6024C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6030C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C603CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6048C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C60664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C606D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C60884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C608E4()
{
}

void sub_244C608EC()
{
}

uint64_t sub_244C608F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C60ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C60B40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C60CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C60D4C()
{
}

void sub_244C60D54()
{
}

uint64_t sub_244C60D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C60E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C60EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C60F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C61154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C61248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C61320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C613E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C614A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C61560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C61620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C616E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C618B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6192C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C61AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C61B38()
{
}

void sub_244C61B40()
{
}

uint64_t sub_244C61B48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C61D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C61D80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C61F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C61F8C()
{
}

void sub_244C61F94()
{
}

uint64_t sub_244C61F9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6214C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C621AC()
{
}

void sub_244C621B4()
{
}

uint64_t sub_244C621BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C62380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C623F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C625A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C62600()
{
}

void sub_244C62608()
{
}

uint64_t sub_244C62610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C627C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C62820()
{
}

void sub_244C62828()
{
}

uint64_t sub_244C62830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C629E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C62A40()
{
}

void sub_244C62A48()
{
}

uint64_t sub_244C62A50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C62C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C62C60()
{
}

void sub_244C62C68()
{
}

uint64_t sub_244C62C70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C62E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C62E80()
{
}

void sub_244C62E88()
{
}

uint64_t sub_244C62E90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C63040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C630A0()
{
}

void sub_244C630A8()
{
}

uint64_t sub_244C630B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C63260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C632C0()
{
}

void sub_244C632C8()
{
}

uint64_t sub_244C632D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6337C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6343C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C634FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C635BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6367C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6373C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C637FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C638BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6397C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C63F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C63FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C642C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C64554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C64720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C648EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C649AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C64B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C64D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C64E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C64F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C65004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C650DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C651D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C652A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C65368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6545C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C65534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C65628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C65700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C657F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C658CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C659C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C65A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C65B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C65C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C65D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C65E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C65F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C65FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C660F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C661C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C662BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C66394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C665D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C666C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C667A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6696C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C66B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C66D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C66ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C66F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C67050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C67110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C671D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C67290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C67468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C674DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C67710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C678BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6791C()
{
}

void sub_244C67924()
{
}

uint64_t sub_244C6792C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C67ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C67B3C()
{
}

void sub_244C67B44()
{
}

uint64_t sub_244C67B4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C67CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C67D5C()
{
}

void sub_244C67D64()
{
}

uint64_t sub_244C67D6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C67E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C67ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C67F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C681D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6845C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C684BC()
{
}

void sub_244C684C4()
{
}

uint64_t sub_244C684CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C686DC()
{
}

void sub_244C686E4()
{
}

uint64_t sub_244C686EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C688FC()
{
}

void sub_244C68904()
{
}

uint64_t sub_244C6890C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C68ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C68B1C()
{
}

void sub_244C68B24()
{
}

uint64_t sub_244C68B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C68BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C68F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C69290()
{
}

void sub_244C69298()
{
}

uint64_t sub_244C692A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6934C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6940C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C695D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C696CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C697A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C699E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C69FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A0A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6A388()
{
}

void sub_244C6A390()
{
}

uint64_t sub_244C6A398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6A5D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6A678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6A978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6AA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6AAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6ACD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6AD30()
{
}

void sub_244C6AD38()
{
}

uint64_t sub_244C6AD40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6AF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6AF64()
{
}

void sub_244C6AF6C()
{
}

uint64_t sub_244C6AF74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6B14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6B1C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6B3E0()
{
}

void sub_244C6B3E8()
{
}

uint64_t sub_244C6B3F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6B5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6B628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6B7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6B85C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6BA90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6BC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6BCC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6BEF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6C0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6C12C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6C360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6C520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6C594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6C754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6C7C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6C988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6C9FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6CBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6CC30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6CE78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6D0AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6D2E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6D50C()
{
}

void sub_244C6D514()
{
}

uint64_t sub_244C6D51C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C6D740()
{
}

void sub_244C6D748()
{
}

uint64_t sub_244C6D750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6D914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6D988(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6DBBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6DD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6DDF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6E024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6E1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6E258(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6E48C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6E64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C6E6C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C6E768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6E85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6E934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6EA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6EB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6EBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6ECCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6EDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6EE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6EF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6F064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6F158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6F230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6F324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6F3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6F4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6F5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6F6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6F794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6F888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6F960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6FA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6FB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6FC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6FCF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C6FEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C6FFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C70090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C70184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7025C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C70350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C70428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7051C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C705F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C706E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C707C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C708B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7098C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C70A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C70B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C70C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C70D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C70E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C70EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C70FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C710BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C711B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C71288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C71454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C71548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C71620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C71714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C717EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C718E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C719B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C71AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C71B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C71C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C71D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C71E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C71F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C72010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C720E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C721DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C722B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C723A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C72480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C72574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7264C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C72740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C72818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7290C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C729E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C72AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C72BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C72CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C72D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C72E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C72F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7303C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C73208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C732E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C733D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C734AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C735A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C73778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C73944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C73B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C73CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C73EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C73F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C74074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7414C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C74240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C74318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7440C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C744E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C745D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C746B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C747A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7487C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C74970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C74A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C74B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C74C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C74D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C74DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C74ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C74FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C750A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7526C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C75438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C75604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C756DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C757D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C758A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C75B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C75D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C75F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C75FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C760CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C761A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C76298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C76370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C76464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7653C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C76630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C76708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C767FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C768D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C769C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C76AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C76B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C76C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C76D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C76E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C76F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C770F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C771D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C772C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7739C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C77490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7765C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C77828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C779F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C77BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C77D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C77E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C77F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C78030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C781FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C782F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C783C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C784BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C78594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C787D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C78B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C78BC8(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C78CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C78CEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C78DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C78DFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C78EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C78EE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C78FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C78FC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C790A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C7918C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C79270(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C7933C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C79354(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C79438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C7951C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C795E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C79600(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C796CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C796E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C797B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C797C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C798A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C798C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C7998C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C799A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C79AB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C79B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C79DBC()
{
}

void sub_244C79DC4()
{
}

uint64_t sub_244C79DCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C79F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C7A004(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244C7A0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C7A278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7A660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  v5 = *(NSObject **)(a1 + 32);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = sub_244C7A6DC;
  v6[3] = &unk_26519B010;
  __int16 v7 = a5;
  v6[4] = a1;
  v6[5] = a4;
  v6[6] = a3;
  dispatch_async(v5, v6);
}

void sub_244C7A6DC(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)(a1 + 56);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "MTRDeviceAttestationDelegateBridge::OnDeviceAttestationFailed completed with result: %hu", buf, 8u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0, 2);
  }
  *(_WORD *)(v2 + 8) = *(_WORD *)(a1 + 56);
  id v5 = *(id *)(v2 + 24);
  if (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector())
  {
    v6 = (id *)(v2 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    if (WeakRetained)
    {
      sub_2446C1098(buf, *(void *)(*(void *)(a1 + 40) + 16), *(void *)(*(void *)(a1 + 40) + 24));
      v33 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v8, *(uint64_t *)buf, (void)v40);
      sub_2446C1098(buf, **(void **)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8));
      v10 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v9, *(uint64_t *)buf, (void)v40);
      v11 = *(uint64_t **)(a1 + 40);
      if (v11[4])
      {
        sub_2446C1098(buf, v11[2], v11[3]);
        v12 = *(uint64_t **)(a1 + 40);
        if (v12[4])
        {
          sub_2446C1098(&v38, v12[2], v12[3]);
          long long v40 = v38;
          uint8_t v13 = 1;
        }
        else
        {
          uint8_t v13 = 0;
        }
        buf[0] = v13;
        v19 = (uint64_t *)sub_2446D18A4(buf);
        v18 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v20, *v19, v19[1]);
      }
      else
      {
        v18 = 0;
      }
      v21 = [MTRDeviceAttestationDeviceInfo alloc];
      v23 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v22, *(unsigned __int16 *)(*(void *)(a1 + 40) + 48));
      v25 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v24, *(unsigned __int16 *)(*(void *)(a1 + 40) + 50));
      v27 = objc_msgSend_initWithDACCertificate_dacPAICertificate_certificateDeclaration_basicInformationVendorID_basicInformationProductID_(v21, v26, (uint64_t)v33, v10, v18, v23, v25);

      if (*(_WORD *)(a1 + 56))
      {
        LODWORD(v36) = 19;
        *((void *)&v36 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRDeviceAttestationDelegateBridge.mm";
        int v37 = 52;
        v28 = sub_244B26908((uint64_t)MTRError, &v36);
      }
      else
      {
        v28 = 0;
      }
      char v29 = objc_opt_respondsToSelector();
      id v31 = objc_loadWeakRetained(v6);
      uint64_t v32 = *(void *)(a1 + 48);
      if (v29) {
        objc_msgSend_deviceAttestationCompletedForController_opaqueDeviceHandle_attestationDeviceInfo_error_(v5, v30, (uint64_t)v31, v32, v27, v28);
      }
      else {
        objc_msgSend_deviceAttestation_completedForDevice_attestationDeviceInfo_error_(v5, v30, (uint64_t)v31, v32, v27, v28);
      }

      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (*(_WORD *)(a1 + 56) && ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0))
  {
    v14 = (id *)(v2 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    if (WeakRetained)
    {
      LODWORD(v34) = 19;
      *((void *)&v34 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRDeviceAttestationDelegateBridge.mm";
      int v35 = 71;
      v33 = sub_244B26908((uint64_t)MTRError, &v34);
      char v15 = objc_opt_respondsToSelector();
      v10 = objc_loadWeakRetained(v14);
      uint64_t v17 = *(void *)(a1 + 48);
      if (v15) {
        objc_msgSend_deviceAttestationFailedForController_opaqueDeviceHandle_error_(v5, v16, (uint64_t)v10, v17, v33);
      }
      else {
        objc_msgSend_deviceAttestation_failedForDevice_error_(v5, v16, (uint64_t)v10, v17, v33);
      }
LABEL_27:
    }
LABEL_28:
  }
}

void sub_244C7AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7ABA4(uint64_t a1)
{
  sub_244C7ABFC(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244C7ABDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(result + 40);
  *(unsigned char *)a2 = v2;
  if (v2) {
    *(_WORD *)(a2 + 2) = *(_WORD *)(result + 42);
  }
  return result;
}

uint64_t sub_244C7ABF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44);
}

uint64_t sub_244C7ABFC(uint64_t a1)
{
  *(void *)a1 = &unk_26F9527F0;

  objc_destroyWeak((id *)(a1 + 16));
  return a1;
}

void sub_244C7AD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C7AF78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    if (v9)
    {
      v10 = *(void **)(a1 + 40);
      uint64_t v11 = v10[7];
      v12 = objc_msgSend_controllerID(v10, v6, v7);
      char v15 = objc_msgSend_nodeID(*(void **)(a1 + 40), v13, v14);
      objc_msgSend_setXPCConnection_controllerID_deviceID_(v9, v16, v11, v12, v15);
    }
    long long v36 = objc_msgSend_proxy(v5, v6, v7);
    int v35 = objc_msgSend_controllerID(*(void **)(a1 + 40), v17, v18);
    v21 = objc_msgSend_nodeID(*(void **)(a1 + 40), v19, v20);
    uint64_t v24 = objc_msgSend_unsignedLongLongValue(v21, v22, v23);
    v27 = objc_msgSend_minInterval(*(void **)(a1 + 48), v25, v26);
    v30 = objc_msgSend_maxInterval(*(void **)(a1 + 48), v28, v29);
    uint64_t v32 = objc_msgSend_encodeXPCSubscribeParams_(MTRDeviceController, v31, *(void *)(a1 + 48));
    BOOL v33 = *(void *)(a1 + 32) != 0;
    v37[0] = MEMORY[0x263EF8330];
    v37[1] = 3221225472;
    v37[2] = sub_244C7B238;
    v37[3] = &unk_26519B038;
    id v38 = *(id *)(a1 + 56);
    id v40 = *(id *)(a1 + 64);
    id v41 = *(id *)(a1 + 72);
    id v39 = v5;
    objc_msgSend_subscribeWithController_nodeId_minInterval_maxInterval_params_shouldCache_completion_(v36, v34, (uint64_t)v35, v24, v27, v30, v32, v33, v37);
  }
}

void sub_244C7B19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7B238(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C7B304;
  block[3] = &unk_265199AD0;
  id v7 = v3;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_244C7B304(void *a1)
{
  if (a1[4]) {
    return (*(uint64_t (**)(void))(a1[5] + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(a1[6] + 16))();
  }
}

void sub_244C7B534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_244C7B5A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    uint64_t v24 = objc_msgSend_proxy(v5, v6, v7);
    uint64_t v23 = objc_msgSend_controllerID(*(void **)(a1 + 32), v9, v10);
    uint8_t v13 = objc_msgSend_nodeID(*(void **)(a1 + 32), v11, v12);
    uint64_t v16 = objc_msgSend_unsignedLongLongValue(v13, v14, v15);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 56);
    v21 = objc_msgSend_encodeXPCReadParams_(MTRDeviceController, v20, *(void *)(a1 + 64));
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    v25[2] = sub_244C7B798;
    v25[3] = &unk_26519B0B0;
    id v26 = *(id *)(a1 + 72);
    id v28 = *(id *)(a1 + 80);
    id v27 = v5;
    objc_msgSend_readAttributeWithController_nodeId_endpointId_clusterId_attributeId_params_completion_(v24, v22, (uint64_t)v23, v16, v17, v18, v19, v21, v25);
  }
}

void sub_244C7B734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_244C7B798(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = sub_244C7B884;
  v10[3] = &unk_26519B088;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_244C7B884(uint64_t *a1)
{
  int v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Attribute read", v6, 2u);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  uint64_t v4 = a1[7];
  id v5 = objc_msgSend_decodeXPCResponseValues_(MTRDeviceController, v3, a1[4]);
  (*(void (**)(uint64_t, void *, uint64_t))(v4 + 16))(v4, v5, a1[5]);
}

void sub_244C7B95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7BD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C7BDD8(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], a2, @"MTRErrorDomain", 6, 0);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
}

void sub_244C7BE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7BE68(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v7 = v5;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!*(unsigned char *)(v8 + 24))
  {
    if (v5)
    {
      *(unsigned char *)(v8 + 24) = 1;
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v6, (uint64_t)v13);
      if (++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == *(void *)(a1 + 64))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        uint64_t v11 = *(void *)(a1 + 40);
        id v12 = objc_msgSend_copy(*(void **)(a1 + 32), v9, v10);
        (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v12, 0);
      }
    }
  }
}

void sub_244C7BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7C1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  v30 = v28;

  _Unwind_Resume(a1);
}

void sub_244C7C26C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
  else
  {
    uint64_t v24 = objc_msgSend_proxy(v5, v6, v7);
    uint64_t v23 = objc_msgSend_controllerID(*(void **)(a1 + 32), v9, v10);
    v22 = objc_msgSend_nodeID(*(void **)(a1 + 32), v11, v12);
    uint64_t v15 = objc_msgSend_unsignedLongLongValue(v22, v13, v14);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    v25[2] = sub_244C7C450;
    v25[3] = &unk_26519B0B0;
    uint64_t v20 = *(void *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v28 = *(id *)(a1 + 88);
    id v27 = v5;
    objc_msgSend_writeAttributeWithController_nodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion_(v24, v21, (uint64_t)v23, v15, v16, v17, v19, v18, v20, v25);
  }
}

void sub_244C7C3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C7C450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = sub_244C7C53C;
  v10[3] = &unk_26519B088;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_244C7C53C(uint64_t *a1)
{
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Attribute written", v6, 2u);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  uint64_t v4 = a1[7];
  id v5 = objc_msgSend_decodeXPCResponseValues_(MTRDeviceController, v3, a1[4]);
  (*(void (**)(uint64_t, void *, uint64_t))(v4 + 16))(v4, v5, a1[5]);
}

void sub_244C7C614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  v30 = v28;

  _Unwind_Resume(a1);
}

void sub_244C7C904(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
  else
  {
    uint64_t v24 = objc_msgSend_proxy(v5, v6, v7);
    uint64_t v23 = objc_msgSend_controllerID(*(void **)(a1 + 32), v9, v10);
    v22 = objc_msgSend_nodeID(*(void **)(a1 + 32), v11, v12);
    uint64_t v15 = objc_msgSend_unsignedLongLongValue(v22, v13, v14);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    v25[2] = sub_244C7CAE8;
    v25[3] = &unk_26519B0B0;
    uint64_t v20 = *(void *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v28 = *(id *)(a1 + 88);
    id v27 = v5;
    objc_msgSend_invokeCommandWithController_nodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_completion_(v24, v21, (uint64_t)v23, v15, v16, v17, v19, v18, v20, v25);
  }
}

void sub_244C7CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C7CAE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = sub_244C7CBD4;
  v10[3] = &unk_26519B088;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_244C7CBD4(uint64_t *a1)
{
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Command invoked", v6, 2u);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  uint64_t v4 = a1[7];
  id v5 = objc_msgSend_decodeXPCResponseValues_(MTRDeviceController, v3, a1[4]);
  (*(void (**)(uint64_t, void *, uint64_t))(v4 + 16))(v4, v5, a1[5]);
}

void sub_244C7CCAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7CE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7CEA8(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], a2, @"MTRErrorDomain", 6, 0);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
}

void sub_244C7CF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7D174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  uint64_t v29 = v28;

  _Unwind_Resume(a1);
}

void sub_244C7D214(void **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Setup report handler", buf, 2u);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  if (v6)
  {
    (*((void (**)(void))a1[10] + 2))();
    (*((void (**)(void))a1[11] + 2))();
  }
  else
  {
    uint64_t v10 = objc_msgSend_xpcConnection(a1[4], v8, v9);
    v43 = v5;
    id v13 = objc_msgSend_controllerID(a1[4], v11, v12);
    uint64_t v16 = objc_msgSend_nodeID(a1[4], v14, v15);
    v48[0] = MEMORY[0x263EF8330];
    v48[1] = 3221225472;
    v48[2] = sub_244C7D668;
    v48[3] = &unk_26519B150;
    id v49 = a1[5];
    id v53 = a1[11];
    id v50 = a1[6];
    id v51 = a1[7];
    id v52 = a1[8];
    objc_msgSend_registerReportHandlerWithController_nodeID_handler_(v10, v17, (uint64_t)v13, v16, v48);

    v42 = objc_msgSend_proxy(v5, v18, v19);
    id v41 = objc_msgSend_controllerID(a1[4], v20, v21);
    id v40 = objc_msgSend_nodeID(a1[4], v22, v23);
    uint64_t v26 = objc_msgSend_unsignedLongLongValue(v40, v24, v25);
    id v28 = a1[6];
    id v27 = a1[7];
    uint64_t v29 = a1[8];
    uint64_t v32 = objc_msgSend_minInterval(a1[9], v30, v31);
    int v35 = objc_msgSend_maxInterval(a1[9], v33, v34);
    int v37 = objc_msgSend_encodeXPCSubscribeParams_(MTRDeviceController, v36, (uint64_t)a1[9]);
    v44[0] = MEMORY[0x263EF8330];
    v44[1] = 3221225472;
    v44[2] = sub_244C7DCA0;
    v44[3] = &unk_265199748;
    id v38 = a1[5];
    v44[4] = a1[4];
    id v45 = v38;
    id v47 = a1[10];
    id v46 = v43;
    objc_msgSend_subscribeAttributeWithController_nodeId_endpointId_clusterId_attributeId_minInterval_maxInterval_params_establishedHandler_(v42, v39, (uint64_t)v41, v26, v28, v27, v29, v32, v35, v37, v44);

    id v5 = v43;
  }
}

void sub_244C7D560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_244C7D668(uint64_t a1, void *a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v6 = a2;
  id v40 = a3;
  id v41 = v6;
  if (v6)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v8 = objc_msgSend_decodeXPCResponseValues_(MTRDeviceController, v7, (uint64_t)v6);
      uint64_t v9 = (void *)MEMORY[0x263EFF980];
      id v39 = v8;
      uint64_t v12 = objc_msgSend_count(v8, v10, v11);
      v42 = objc_msgSend_arrayWithCapacity_(v9, v13, v12);
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      id obj = v39;
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v50, v59, 16);
      if (!v16) {
        goto LABEL_27;
      }
      uint64_t v44 = *(void *)v51;
      while (1)
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v51 != v44) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v18, v15, @"attributePath");
          uint64_t v22 = a1;
          uint64_t v23 = v19;
          uint64_t v24 = *(void *)(a1 + 40);
          if (v24)
          {
            id v3 = objc_msgSend_endpoint(v19, v20, v21);
            uint64_t v22 = a1;
            if (!objc_msgSend_isEqualToNumber_(v3, v25, *(void *)(a1 + 40))) {
              goto LABEL_20;
            }
          }
          uint64_t v26 = *(void *)(v22 + 48);
          if (v26)
          {
            uint64_t v4 = objc_msgSend_cluster(v23, v20, v21);
            if ((objc_msgSend_isEqualToNumber_(v4, v27, *(void *)(a1 + 48)) & 1) == 0)
            {

              if (!v24) {
                goto LABEL_25;
              }
LABEL_20:

              goto LABEL_25;
            }
            if (!*(void *)(a1 + 56))
            {
              int isEqualToNumber = 1;
LABEL_16:

              if (!v24) {
                goto LABEL_23;
              }
              goto LABEL_17;
            }
          }
          else if (!*(void *)(v22 + 56))
          {
            int isEqualToNumber = 1;
            goto LABEL_22;
          }
          uint64_t v29 = objc_msgSend_attribute(v23, v20, v21);
          int isEqualToNumber = objc_msgSend_isEqualToNumber_(v29, v30, *(void *)(a1 + 56));

          if (v26) {
            goto LABEL_16;
          }
LABEL_22:
          if (!v24)
          {
LABEL_23:
            if (!isEqualToNumber) {
              goto LABEL_25;
            }
LABEL_24:
            objc_msgSend_addObject_(v42, v20, (uint64_t)v18);
            goto LABEL_25;
          }
LABEL_17:

          if (isEqualToNumber) {
            goto LABEL_24;
          }
LABEL_25:
        }
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v50, v59, 16);
        if (!v16)
        {
LABEL_27:

          if (objc_msgSend_count(v42, v31, v32))
          {
            BOOL v33 = sub_244CC8484(0, "NotSpecified");
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_INFO, "Report received", buf, 2u);
            }

            if (sub_244CC4E58(3u)) {
              sub_244CC4DE0(0, 3);
            }
            uint64_t v34 = *(NSObject **)(a1 + 32);
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = sub_244C7DC88;
            block[3] = &unk_265194FE8;
            id v49 = *(id *)(a1 + 64);
            id v47 = v42;
            id v48 = v40;
            dispatch_async(v34, block);
          }
          int v35 = obj;
          goto LABEL_39;
        }
      }
    }
    id v38 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2446BD000, v38, OS_LOG_TYPE_ERROR, "Unsupported report format", buf, 2u);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
  }
  else
  {
    long long v36 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2446BD000, v36, OS_LOG_TYPE_INFO, "Error report received", buf, 2u);
    }

    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0, 3);
    }
    int v37 = *(NSObject **)(a1 + 32);
    v54[0] = MEMORY[0x263EF8330];
    v54[1] = 3221225472;
    v54[2] = sub_244C7DC70;
    v54[3] = &unk_265194FE8;
    id v57 = *(id *)(a1 + 64);
    id v55 = 0;
    id v56 = v40;
    dispatch_async(v37, v54);

    int v35 = v57;
LABEL_39:
  }
}

void sub_244C7DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C7DC70(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_244C7DC88(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_244C7DCA0(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_xpcConnection(a1[4], a2, a3);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = sub_244C7DD90;
  v6[3] = &unk_265195238;
  id v7 = a1[5];
  id v9 = a1[7];
  id v8 = a1[6];
  objc_msgSend_callSubscriptionEstablishedHandler_(v4, v5, (uint64_t)v6);
}

void sub_244C7DD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244C7DD90(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = sub_244C7DE34;
  v3[3] = &unk_265194F48;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_244C7DE34(uint64_t a1)
{
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Subscription established", v4, 2u);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_244C7E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_244C7E12C(void **a1, const char *a2, uint64_t a3)
{
  id v4 = a1[4];
  id v5 = (void *)v4[7];
  id v6 = objc_msgSend_controllerID(v4, a2, a3);
  id v9 = objc_msgSend_nodeID(a1[4], v7, v8);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = sub_244C7E23C;
  v11[3] = &unk_265195038;
  id v12 = a1[5];
  id v13 = a1[6];
  objc_msgSend_deregisterReportHandlersWithController_nodeID_completion_(v5, v10, (uint64_t)v6, v9, v11);
}

void sub_244C7E210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244C7E23C(uint64_t a1)
{
}

void sub_244C7E248(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = a2;
  if (a4)
  {
    uint64_t v7 = a1 + 40;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), a2);
    uint64_t v7 = a1 + 48;
  }
  (*(void (**)(void))(*(void *)v7 + 16))();
}

void sub_244C7E2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7E404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7E41C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], a2, @"MTRErrorDomain", 6, 0);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
}

void sub_244C7E498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7E5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7E5E0(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], a2, @"MTRErrorDomain", 6, 0);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
}

void sub_244C7E65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244C7E80C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v9 = objc_msgSend_proxy(v5, v6, v7);
    id v12 = objc_msgSend_controllerID(*(void **)(a1 + 32), v10, v11);
    uint64_t v15 = objc_msgSend_nodeID(*(void **)(a1 + 32), v13, v14);
    uint64_t v16 = *(void *)(a1 + 56);
    double v17 = *(double *)(a1 + 64);
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = sub_244C7E9BC;
    v19[3] = &unk_26519B1C8;
    id v20 = *(id *)(a1 + 40);
    id v22 = *(id *)(a1 + 48);
    id v21 = v5;
    objc_msgSend_downloadLogWithController_nodeId_type_timeout_completion_(v9, v18, (uint64_t)v12, v15, v16, v19, v17);
  }
}

void sub_244C7E96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244C7E9BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = sub_244C7EAA8;
  v10[3] = &unk_26519B088;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_244C7EAA8(uint64_t *a1)
{
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "Download log", v6, 2u);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  uint64_t v4 = a1[7];
  id v5 = objc_msgSend_URLWithString_(NSURL, v3, a1[4]);
  (*(void (**)(uint64_t, void *, uint64_t))(v4 + 16))(v4, v5, a1[5]);
}

void sub_244C7EB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244C7ED34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = sub_244C7EDE8;
  v7[3] = &unk_265195038;
  id v8 = v4;
  id v5 = *(NSObject **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v6 = v4;
  dispatch_async(v5, v7);
}

void sub_244C7EDE8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    id v3 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "Failed to obtain XPC connection", v7, 2u);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], v4, @"MTRErrorDomain", 1, 0);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
}

void sub_244C7EF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C7EF10(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), a2);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_244C7EFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C7F438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  _Unwind_Resume(a1);
}

void sub_244C7F490(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained + 2;
    uint64_t v5 = WeakRetained;
    os_unfair_lock_lock(WeakRetained + 2);
    objc_msgSend__resetStorageBehaviorState(v5, v3, v4);
    os_unfair_lock_unlock(v2);
    id WeakRetained = v5;
  }
}

void sub_244C7F500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_244C7F634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)MTRDevice_Concrete;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_244C7F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_244C7FC4C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_244C7FD20(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = objc_msgSend__internalProperties(v5, v3, v4);
    objc_msgSend_performSelector_withObject_withObject_(v8, v7, (uint64_t)sel_device_internalStateUpdated_, v5, v6);
  }
}

void sub_244C7FDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C80470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_244C806FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_244C8072C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "%@ Timer expired, start Device Time Update", buf, 0xCu);
  }

  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0, 3);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend__performScheduledTimeUpdate(WeakRetained, v5, v6);
  }
  else
  {
    id v8 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "%@ MTRDevice no longer valid. No Timer Scheduled will be scheduled for a Device Time Update.", buf, 0xCu);
    }

    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0, 3);
    }
  }
}

void sub_244C808A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C80BA0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C80E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C810F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C8116C(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      uint64_t v10 = a1[6];
      *(_DWORD *)buf = 138413058;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "%@ _setUTCTime failed on endpoint %@, with parameters %@, error: %@", buf, 0x2Au);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
  }
}

void sub_244C81298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C814D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C8153C(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      uint64_t v10 = a1[6];
      *(_DWORD *)buf = 138413058;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "%@ _setDSTOffsets failed on endpoint %@, with parameters %@, error: %@", buf, 0x2Au);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
  }
}

void sub_244C81668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C81988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244C81DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244C81E3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = (void *)*((void *)WeakRetained + 4);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = sub_244C81F14;
    v6[3] = &unk_265193DC8;
    void v6[4] = WeakRetained;
    id v7 = *(id *)(a1 + 32);
    objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v4, v5, (uint64_t)v6, 0);
  }
}

void sub_244C81EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244C81F14(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = objc_msgSend_stringWithFormat_(NSString, v4, @"%@ and scheduled subscription is happening", *(void *)(a1 + 40));
  objc_msgSend__setupSubscriptionWithReason_(v3, v6, (uint64_t)v5);

  os_unfair_lock_unlock(v2);
}

void sub_244C81FA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C81FC8(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = objc_msgSend_stringWithFormat_(NSString, v4, @"%@ and subscription is needed", *(void *)(a1 + 40));
  objc_msgSend__setupSubscriptionWithReason_(v3, v6, (uint64_t)v5);

  os_unfair_lock_unlock(v2);
}

void sub_244C8205C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C82254(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ invalidate disconnecting ReadClient and SubscriptionCallback", buf, 0xCu);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v4);
  *(void *)(*(void *)(a1 + 32) + 352) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 360);
  if (v7)
  {
    uint64_t v8 = sub_2447E7674(v7);
    MEMORY[0x245695FA0](v8, 0x10A1C40E437F749);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  *(void *)(v6 + 360) = 0;
  objc_msgSend__changeInternalState_(*(void **)(a1 + 32), v5, 0, v9);
  os_unfair_lock_unlock(v4);
}

void sub_244C823AC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C82654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C826D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C828C4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_244C828F4(uint64_t a1, const char *a2)
{
  return objc_msgSend__triggerResubscribeWithReason_nodeLikelyReachable_(*(void **)(a1 + 32), a2, @"read-through skipped while not subscribed", 0);
}

void sub_244C8299C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_deviceCachePrimed_(v4, v3, *(void *)(a1 + 32));
  }
}

void sub_244C829FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C82CFC(uint64_t a1, void *a2)
{
  return objc_msgSend_device_stateChanged_(a2, (const char *)a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_244C82ED8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend__deviceInternalStateChanged_(v4, v3, *(void *)(a1 + 32));
  }
}

void sub_244C82F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C831B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_244C83258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_244C83348(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C83524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C835FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C83838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_244C83884(id *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 6;
  id WeakRetained = (void **)objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v4 = [MTRAsyncWorkItem alloc];
    uint64_t v7 = objc_msgSend_queue(WeakRetained, v5, v6);
    uint64_t v9 = objc_msgSend_initWithQueue_(v4, v8, (uint64_t)v7);

    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = sub_244C83AD0;
    v16[3] = &unk_26519B330;
    objc_copyWeak(&v19, v2);
    id v17 = a1[4];
    id v18 = a1[5];
    objc_msgSend_setReadyHandler_(v9, v10, (uint64_t)v16);
    __int16 v13 = objc_msgSend_concurrentSubscriptionPool(WeakRetained[4], v11, v12);
    objc_msgSend_enqueueWorkItem_description_(v13, v14, (uint64_t)v9, a1[4]);

    __int16 v15 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = WeakRetained;
      _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_DEFAULT, "%@ - enqueued in the subscription pool", buf, 0xCu);
    }

    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0, 2);
    }

    objc_destroyWeak(&v19);
  }
}

void sub_244C83A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  objc_destroyWeak(v17);
  _Unwind_Resume(a1);
}

void sub_244C83AD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v5 = a4;
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v7 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v13 = WeakRetained;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "%@ - work item is ready to attempt pooled subscription", buf, 0xCu);
    }

    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0, 2);
    }
    os_unfair_lock_lock(WeakRetained + 2);
    if (*(void *)&WeakRetained[32]._os_unfair_lock_opaque)
    {
      uint64_t v8 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        __int16 v13 = WeakRetained;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "%@ timer fired but already running in subscription pool - ignoring: %@", buf, 0x16u);
      }

      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0, 2);
      }
      os_unfair_lock_unlock(WeakRetained + 2);
      v5[2](v5, 0);
    }
    else
    {
      uint64_t v10 = MEMORY[0x2456969D0](v5);
      uint64_t v11 = *(void **)&WeakRetained[32]._os_unfair_lock_opaque;
      *(void *)&WeakRetained[32]._os_unfair_lock_opaque = v10;

      os_unfair_lock_unlock(WeakRetained + 2);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
    }
  }
}

void sub_244C83CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C83DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C83E1C(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel__handleResubscriptionNeededWithDelayOnDeviceQueue_, *(void *)(a1 + 40));
}

void sub_244C83FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  os_unfair_lock_unlock(v15);

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_244C8403C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)*((void *)WeakRetained + 4);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = sub_244C84128;
    v6[3] = &unk_265193E58;
    void v6[4] = v3;
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = sub_244C8413C;
    v5[3] = &unk_26519B380;
    v5[4] = v3;
    objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v4, v2, (uint64_t)v6, v5);
  }
}

void sub_244C84118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C84128(uint64_t a1, const char *a2)
{
  return objc_msgSend__triggerResubscribeWithReason_nodeLikelyReachable_(*(void **)(a1 + 32), a2, @"ResubscriptionNeeded timer fired", 0);
}

void sub_244C8413C(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "%@ could not dispatch to matter queue for resubscription - error %@", buf, 0x16u);
  }

  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0, 1);
  }
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v6);
  objc_msgSend__clearSubscriptionPoolWork(*(void **)(a1 + 32), v7, v8);
  os_unfair_lock_unlock(v6);
}

void sub_244C84264(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_244C84310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_244C847D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  _Unwind_Resume(a1);
}

void sub_244C84820(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)*((void *)WeakRetained + 4);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = sub_244C848CC;
    v5[3] = &unk_265193E58;
    v5[4] = v3;
    objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v4, v2, (uint64_t)v5, 0);
  }
}

void sub_244C848BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C848CC(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  objc_msgSend__reattemptSubscriptionNowIfNeededWithReason_(*(void **)(a1 + 32), v3, @"got subscription reset");

  os_unfair_lock_unlock(v2);
}

void sub_244C8492C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C84A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C84B54(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C84B70(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_deviceBecameActive_(v4, v3, *(void *)(a1 + 32));
  }
}

void sub_244C84BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C84C6C(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  if (*(void *)(*(void *)(a1 + 32) + 320) <= 1uLL)
  {
    id v3 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v4;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "%@ still not subscribed, marking the device as unreachable", buf, 0xCu);
    }

    if (sub_244CC4E58(2u))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      sub_244CC4DE0(0, 2);
    }
    objc_msgSend__changeState_(*(void **)(a1 + 32), v5, 2, v6);
  }
  os_unfair_lock_unlock(v2);
}

void sub_244C84D98(_Unwind_Exception *exception_object)
{
}

void sub_244C84E68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C84FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C853F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C857C4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C85E50(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_244C85E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel__persistClusterDataAsNeeded, a3);
}

void sub_244C860B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C862AC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C862D0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_deviceConfigurationChanged_(v4, v3, *(void *)(a1 + 32));
  }
}

void sub_244C86330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C865C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C86910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C86A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244C86A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = sub_244C9DDA0(v3, v6);
  uint64_t v9 = objc_msgSend__filteredAttributes_forInterestedPaths_(v4, v8, v5, v7);

  if (objc_msgSend_count(v9, v10, v11))
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = sub_244C86B70;
    v12[3] = &unk_265199E50;
    v12[4] = *(void *)(a1 + 32);
    id v13 = v9;
    sub_244C9DCB0((uint64_t)v3, v12);
  }
}

void sub_244C86B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C86B70(uint64_t a1, void *a2)
{
  return objc_msgSend_device_receivedAttributeReport_(a2, (const char *)a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_244C86CFC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_244C86DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_244C86E04(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412802;
    uint64_t v18 = v3;
    __int16 v19 = 2048;
    uint64_t v20 = v4;
    __int16 v21 = 2112;
    uint64_t v22 = v4;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ injected attribute report (%p) %@", buf, 0x20u);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = v12;
    uint64_t v11 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  objc_msgSend__handleReportBegin(*(void **)(a1 + 32), v5, v6, v11, v12, v13);
  uint64_t v9 = objc_msgSend_queue(*(void **)(a1 + 32), v7, v8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C86F88;
  block[3] = &unk_26519B3D0;
  uint64_t v10 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v15 = v10;
  char v16 = *(unsigned char *)(a1 + 48);
  dispatch_async(v9, block);
}

uint64_t sub_244C86F88(uint64_t a1, const char *a2)
{
  objc_msgSend__handleAttributeReport_fromSubscription_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 32);

  return MEMORY[0x270F9A6D0](v4, sel__handleReportEnd, v3);
}

void sub_244C87080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C87090(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel__handleEventReport_, *(void *)(a1 + 40));
}

void sub_244C87320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C87668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C87DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_244C87EBC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = sub_244C9DDB4(v3, v6);
  uint64_t v9 = objc_msgSend__filteredEvents_forInterestedPaths_(v4, v8, v5, v7);

  if (objc_msgSend_count(v9, v10, v11))
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = sub_244C87FEC;
    v12[3] = &unk_265199E50;
    v12[4] = a1[4];
    id v13 = v9;
    sub_244C9DCB0((uint64_t)v3, v12);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
}

void sub_244C87FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C87FEC(uint64_t a1, void *a2)
{
  return objc_msgSend_device_receivedEventReport_(a2, (const char *)a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_244C88290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_244C8859C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C886B0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_244C888F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_244C88A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C88C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C88CF4(void *a1)
{
  id v1 = a1;
  uint64_t v4 = objc_msgSend_cluster(v1, v2, v3);
  uint64_t v7 = objc_msgSend_unsignedLongValue(v4, v5, v6);

  uint64_t v10 = 0;
  switch(v7)
  {
    case '/':
      uint64_t v11 = objc_msgSend_attribute(v1, v8, v9);
      unint64_t v14 = objc_msgSend_unsignedLongValue(v11, v12, v13);

      BOOL v15 = v14 >= 0x1E;
      LODWORD(v16) = (0x28003858u >> v14) & 1;
      goto LABEL_5;
    case '3':
      id v17 = objc_msgSend_attribute(v1, v8, v9);
      uint64_t v20 = objc_msgSend_unsignedLongValue(v17, v18, v19);

      BOOL v21 = (v20 & 0xFFFFFFFFFFFFFFFELL) == 2;
      goto LABEL_17;
    case '5':
      uint64_t v22 = objc_msgSend_attribute(v1, v8, v9);
      unint64_t v25 = objc_msgSend_unsignedLongValue(v22, v23, v24);

      BOOL v15 = v25 >= 0x38;
      unint64_t v16 = (0xFFFFFFFFFFC040uLL >> v25) & 1;
LABEL_5:
      if (v15) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v16;
      }
      break;
    case '6':
      uint64_t v26 = objc_msgSend_attribute(v1, v8, v9);
      uint64_t v29 = objc_msgSend_unsignedLongValue(v26, v27, v28);

      BOOL v30 = (unint64_t)(v29 - 4) >= 9;
      goto LABEL_10;
    case '7':
      uint64_t v31 = objc_msgSend_attribute(v1, v8, v9);
      uint64_t v34 = objc_msgSend_unsignedLongValue(v31, v32, v33);

      BOOL v30 = (unint64_t)(v34 - 2) >= 7;
LABEL_10:
      uint64_t v10 = !v30;
      break;
    case '8':
      int v35 = objc_msgSend_attribute(v1, v8, v9);
      uint64_t v38 = objc_msgSend_unsignedLongValue(v35, v36, v37);

      if (v38) {
        BOOL v21 = v38 == 7;
      }
      else {
        BOOL v21 = 1;
      }
      goto LABEL_17;
    case '>':
      id v39 = objc_msgSend_attribute(v1, v8, v9);
      uint64_t v42 = objc_msgSend_unsignedLongValue(v39, v40, v41);

      BOOL v21 = (v42 & 0xFFFFFFFFFFFFFFFBLL) == 0;
LABEL_17:
      uint64_t v10 = v21;
      break;
    default:
      break;
  }

  return v10;
}

void sub_244C88EA4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_244C88FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C8921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C89458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C89478(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ subscription reset disconnecting ReadClient and SubscriptionCallback", buf, 0xCu);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v4);
  *(void *)(*(void *)(a1 + 32) + 352) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 360);
  if (v7)
  {
    uint64_t v8 = sub_2447E7674(v7);
    MEMORY[0x245695FA0](v8, 0x10A1C40E437F749);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  *(void *)(v6 + 360) = 0;
  objc_msgSend__doHandleSubscriptionError_(*(void **)(a1 + 32), v5, 0, v10);
  objc_msgSend__doHandleSubscriptionReset_(*(void **)(a1 + 32), v9, 0);
  os_unfair_lock_unlock(v4);
}

void sub_244C895DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C899D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  _Unwind_Resume(a1);
}

void sub_244C89A24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    objc_msgSend__markDeviceAsUnreachableIfNeverSubscribed(WeakRetained, v1, v2);
  }
}

void sub_244C89A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C89A88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v7 = a4;
  id v13 = a5;
  if (!v7)
  {
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    v22[2] = sub_244C8A618;
    v22[3] = &unk_26519B420;
    v22[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v22);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = sub_244C8A7D0;
    v21[3] = &unk_26519B420;
    v21[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v21);
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = sub_244C8A974;
    v20[3] = &unk_26519B380;
    v20[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v20);
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = sub_244C8AA98;
    v19[3] = &unk_26519B448;
    void v19[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v19);
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = sub_244C8ABDC;
    v18[3] = &unk_265193E58;
    v18[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v18);
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    v17[2] = sub_244C8ADD8;
    v17[3] = &unk_265193E58;
    v17[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v17);
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = sub_244C8AF20;
    v16[3] = &unk_265193E58;
    void v16[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v16);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = sub_244C8B004;
    v15[3] = &unk_265193E58;
    v15[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v15);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    v14[2] = sub_244C8B0E8;
    v14[3] = &unk_265193E58;
    v14[4] = *(void *)(a1 + 32);
    MEMORY[0x2456969D0](v14);
    operator new();
  }
  uint64_t v8 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v27 = v9;
    __int16 v28 = 2112;
    id v29 = v7;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "%@ getSessionForNode error %@", buf, 0x16u);
  }

  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0, 1);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 32);
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  v23[2] = sub_244C8A5D4;
  v23[3] = &unk_2651995E0;
  v23[4] = v10;
  id v24 = v7;
  id v25 = v13;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v11, v12, (uint64_t)v23, 0);
}

void sub_244C8A404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_244D87F44(v73 - 240);
  (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  sub_244C8B234(&a71);

  _Unwind_Resume(a1);
}

uint64_t sub_244C8A5D4(uint64_t a1, const char *a2)
{
  objc_msgSend__handleSubscriptionError_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);

  return objc_msgSend__handleSubscriptionReset_(v4, v3, v5);
}

void sub_244C8A618(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v16 = v5;
    __int16 v17 = 2048;
    id v18 = v3;
    __int16 v19 = 2112;
    id v20 = v3;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "%@ got attribute report (%p) %@", buf, 0x20u);
  }

  if (sub_244CC4E58(2u))
  {
    id v11 = v3;
    id v12 = v3;
    uint64_t v10 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  uint64_t v8 = objc_msgSend_queue(*(void **)(a1 + 32), v6, v7, v10, v11, v12);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C8A7C0;
  block[3] = &unk_265193DC8;
  void block[4] = *(void *)(a1 + 32);
  id v14 = v3;
  id v9 = v3;
  dispatch_async(v8, block);
}

void sub_244C8A7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C8A7C0(uint64_t a1, const char *a2)
{
  return objc_msgSend__handleAttributeReport_fromSubscription_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), 1);
}

void sub_244C8A7D0(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "%@ got event report %@", buf, 0x16u);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = v3;
    sub_244CC4DE0(0, 2);
  }
  uint64_t v8 = objc_msgSend_queue(*(void **)(a1 + 32), v6, v7, v10, v11);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C8A968;
  block[3] = &unk_265193DC8;
  void block[4] = *(void *)(a1 + 32);
  id v13 = v3;
  id v9 = v3;
  dispatch_async(v8, block);
}

void sub_244C8A94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C8A968(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel__handleEventReport_, *(void *)(a1 + 40));
}

void sub_244C8A974(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "%@ got subscription error %@", buf, 0x16u);
  }

  if (sub_244CC4E58(1u))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = v3;
    sub_244CC4DE0(0, 1);
  }
  objc_msgSend__handleSubscriptionError_(*(void **)(a1 + 32), v6, (uint64_t)v3, v7, v8);
}

void sub_244C8AA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8AA98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "%@ got resubscription error %@ delay %@", buf, 0x20u);
  }

  if (sub_244CC4E58(1u))
  {
    id v11 = v5;
    id v12 = v6;
    uint64_t v10 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 1);
  }
  objc_msgSend__handleResubscriptionNeededWithDelay_(*(void **)(a1 + 32), v9, (uint64_t)v6, v10, v11, v12);
}

void sub_244C8ABBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8ABDC(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(void *)__int16 v15 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ got subscription established", buf, 0xCu);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v4);
  id v6 = *(void **)(a1 + 32);
  if (v6[40] < 2uLL)
  {
    *(_DWORD *)buf = 1;
    *(void *)&v15[4] = "dwnpm_dev_initial_subscription_setup";
    int v16 = 0;
    char v17 = 3;
    sub_244D7E78C((uint64_t)buf);
    objc_msgSend__changeInternalState_(*(void **)(a1 + 32), v8, 2);
  }
  else
  {
    objc_msgSend__changeInternalState_(v6, v5, 4);
  }
  objc_msgSend__changeState_(*(void **)(a1 + 32), v7, 1, v12);
  id v11 = objc_msgSend_queue(*(void **)(a1 + 32), v9, v10);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C8ADD0;
  block[3] = &unk_265193E58;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v11, block);

  os_unfair_lock_unlock(v4);
}

void sub_244C8ADB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_244C8ADD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel__handleSubscriptionEstablished, a3);
}

void sub_244C8ADD8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v7 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ got subscription done", buf, 0xCu);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0, 2);
  }
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v4);
  *(void *)(*(void *)(a1 + 32) + 352) = 0;
  *(void *)(*(void *)(a1 + 32) + 360) = 0;
  objc_msgSend__doHandleSubscriptionReset_(*(void **)(a1 + 32), v5, 0);
  os_unfair_lock_unlock(v4);
}

void sub_244C8AF04(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_244C8AF20(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ got unsolicited message from publisher", buf, 0xCu);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  return objc_msgSend__handleUnsolicitedMessageFromPublisher(*(void **)(a1 + 32), v4, v5, v7);
}

uint64_t sub_244C8B004(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ got report begin", buf, 0xCu);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  return objc_msgSend__handleReportBegin(*(void **)(a1 + 32), v4, v5, v7);
}

void sub_244C8B0E8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "%@ got report end", buf, 0xCu);
  }

  if (sub_244CC4E58(2u))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    sub_244CC4DE0(0, 2);
  }
  id v6 = objc_msgSend_queue(*(void **)(a1 + 32), v4, v5, v7);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C8B22C;
  block[3] = &unk_265193E58;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
}

uint64_t sub_244C8B22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel__handleReportEnd, a3);
}

uint64_t *sub_244C8B234(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_2447E7674(v2);
    MEMORY[0x245695FA0](v3, 0x10A1C40E437F749);
  }
  return a1;
}

void sub_244C8B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C8B974(uint64_t a1, void *a2, void *a3)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v10 = v6;
  for (uint64_t i = 0; ; uint64_t i = 1)
  {
    if (!objc_msgSend_count(v10, v8, v9, v87, v88, v89, v90, v91, v92, v93))
    {
      uint64_t i = 2;
      goto LABEL_19;
    }
    if ((unint64_t)objc_msgSend_count(v7, v12, v13) >= 9)
    {
      id v56 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v59 = *(void *)(a1 + 64);
        uint64_t v60 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v57, v58);
        uint64_t v61 = *(void *)(a1 + 40);
        uint64_t v64 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v62, v63);
        uint64_t v67 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v65, v66);
        *(_DWORD *)buf = 134219010;
        uint64_t v95 = v59;
        __int16 v96 = 2048;
        uint64_t v97 = v60;
        __int16 v98 = 2112;
        uint64_t v99 = v61;
        __int16 v100 = 2048;
        uint64_t v101 = v64;
        __int16 v102 = 2048;
        uint64_t v103 = v67;
        _os_log_impl(&dword_2446BD000, v56, OS_LOG_TYPE_DEFAULT, "Batching read attribute work item [%llu]: cannot add more work, item is full [0x%016llX:%@:0x%llx:0x%llx]", buf, 0x34u);
      }

      if (sub_244CC4E58(2u)) {
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    __int16 v15 = objc_msgSend_objectAtIndexedSubscript_(v10, v14, 0);
    char v17 = objc_msgSend_objectAtIndexedSubscript_(v15, v16, 1);
    uint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(v7, v18, 0);
    uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v19, v20, 1);
    char isEqual = objc_msgSend_isEqual_(v17, v22, (uint64_t)v21);

    if ((isEqual & 1) == 0) {
      break;
    }
    uint64_t v26 = objc_msgSend_firstObject(v10, v24, v25);
    objc_msgSend_removeObjectAtIndex_(v10, v27, 0);
    objc_msgSend_addObject_(v7, v28, (uint64_t)v26);
    id v29 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 64);
      uint64_t v33 = objc_msgSend_count(v7, v30, v31);
      uint64_t v36 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v34, v35);
      uint64_t v37 = *(void *)(a1 + 40);
      uint64_t v40 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v38, v39);
      uint64_t v43 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v41, v42);
      *(_DWORD *)buf = 134219522;
      uint64_t v95 = v32;
      __int16 v96 = 2112;
      uint64_t v97 = (uint64_t)v26;
      __int16 v98 = 2048;
      uint64_t v99 = v33;
      __int16 v100 = 2048;
      uint64_t v101 = v36;
      __int16 v102 = 2112;
      uint64_t v103 = v37;
      __int16 v104 = 2048;
      uint64_t v105 = v40;
      __int16 v106 = 2048;
      uint64_t v107 = v43;
      _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_DEFAULT, "Batching read attribute work item [%llu]: added %@ (now %lu requests total) [0x%016llX:%@:0x%llx:0x%llx]", buf, 0x48u);
    }

    if (sub_244CC4E58(2u))
    {
      uint64_t v46 = *(void *)(a1 + 64);
      uint64_t v47 = objc_msgSend_count(v7, v44, v45);
      uint64_t v50 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v48, v49);
      uint64_t v51 = *(void *)(a1 + 40);
      uint64_t v92 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v52, v53);
      uint64_t v93 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v54, v55);
      uint64_t v90 = v50;
      uint64_t v91 = v51;
      v88 = v26;
      uint64_t v89 = v47;
      uint64_t v87 = v46;
      sub_244CC4DE0(0, 2);
    }
  }
  v70 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v73 = *(void *)(a1 + 64);
    uint64_t v74 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v71, v72);
    uint64_t v75 = *(void *)(a1 + 40);
    uint64_t v78 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v76, v77);
    uint64_t v81 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v79, v80);
    *(_DWORD *)buf = 134219010;
    uint64_t v95 = v73;
    __int16 v96 = 2048;
    uint64_t v97 = v74;
    __int16 v98 = 2112;
    uint64_t v99 = v75;
    __int16 v100 = 2048;
    uint64_t v101 = v78;
    __int16 v102 = 2048;
    uint64_t v103 = v81;
    _os_log_impl(&dword_2446BD000, v70, OS_LOG_TYPE_DEFAULT, "Batching read attribute work item [%llu]: cannot add more work, parameter mismatch [0x%016llX:%@:0x%llx:0x%llx]", buf, 0x34u);
  }

  if (sub_244CC4E58(2u))
  {
LABEL_18:
    objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v68, v69);
    objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v82, v83);
    objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v84, v85);
    sub_244CC4DE0(0, 2);
  }
LABEL_19:

  return i;
}

void sub_244C8BDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8BE88(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v7 = a2;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v8 = *(id *)(a1 + 32);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v35, v51, 16);
  if (v11)
  {
    uint64_t v12 = *(void *)v36;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v36 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        if (objc_msgSend_isEqual_(v14, v10, (uint64_t)v7))
        {
          __int16 v15 = sub_244CC8484(0, "NotSpecified");
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = a4;
            uint64_t v18 = a3;
            uint64_t v19 = *(void *)(a1 + 72);
            uint64_t v20 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 40), v16, v17);
            uint64_t v21 = *(void *)(a1 + 48);
            uint64_t v24 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v22, v23);
            uint64_t v27 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 64), v25, v26);
            *(_DWORD *)buf = 134219266;
            uint64_t v40 = v19;
            __int16 v41 = 2112;
            uint64_t v42 = v14;
            __int16 v43 = 2048;
            uint64_t v44 = v20;
            __int16 v45 = 2112;
            uint64_t v46 = v21;
            __int16 v47 = 2048;
            uint64_t v48 = v24;
            __int16 v49 = 2048;
            uint64_t v50 = v27;
            _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_DEFAULT, "Read attribute work item [%llu] report duplicate %@ [0x%016llX:%@:0x%llx:0x%llx]", buf, 0x3Eu);
            a3 = v18;
            a4 = v34;
          }

          if (sub_244CC4E58(2u))
          {
            objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 40), v28, v29);
            objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v30, v31);
            objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 64), v32, v33);
            sub_244CC4DE0(0, 2);
          }
          *a3 = 1;
          *a4 = 1;

          goto LABEL_15;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v35, v51, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }

  *a4 = 0;
LABEL_15:
}

void sub_244C8C0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8C104(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a4;
  if (objc_msgSend_count(*(void **)(a1 + 32), v9, v10))
  {
    uint64_t v13 = objc_msgSend_array(MEMORY[0x263EFF980], v11, v12);
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v14 = *(id *)(a1 + 32);
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v50, v54, 16);
    if (v17)
    {
      uint64_t v18 = *(void *)v51;
      do
      {
        uint64_t v19 = 0;
        do
        {
          if (*(void *)v51 != v18) {
            objc_enumerationMutation(v14);
          }
          uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(*((void *)&v50 + 1) + 8 * v19), v16, 0);
          objc_msgSend_addObject_(v13, v21, (uint64_t)v20);

          ++v19;
        }
        while (v17 != v19);
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v16, (uint64_t)&v50, v54, 16);
      }
      while (v17);
    }

    uint64_t v23 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v22, 0);
    uint64_t v25 = objc_msgSend_objectAtIndexedSubscript_(v23, v24, 1);

    __int16 v28 = objc_msgSend_null(MEMORY[0x263EFF9D0], v26, v27);
    if (objc_msgSend_isEqual_(v25, v29, (uint64_t)v28)) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v25;
    }
    id v31 = v30;

    uint64_t v34 = objc_msgSend_newBaseDevice(v7, v32, v33);
    long long v37 = objc_msgSend_queue(v7, v35, v36);
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 3221225472;
    v41[2] = sub_244C8C530;
    v41[3] = &unk_26519B4E8;
    uint64_t v48 = *(void *)(a1 + 72);
    id v42 = *(id *)(a1 + 40);
    id v43 = *(id *)(a1 + 48);
    id v44 = *(id *)(a1 + 56);
    id v45 = *(id *)(a1 + 64);
    id v46 = v7;
    uint64_t v49 = a3;
    id v47 = v8;
    objc_msgSend_readAttributePaths_eventPaths_params_includeDataVersion_queue_completion_(v34, v38, (uint64_t)v13, 0, v31, 1, v37, v41);
  }
  else
  {
    uint64_t v39 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 134217984;
      uint64_t v56 = v40;
      _os_log_impl(&dword_2446BD000, v39, OS_LOG_TYPE_ERROR, "Read attribute work item [%llu] contained no read requests", buf, 0xCu);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    (*((void (**)(id, void))v8 + 2))(v8, 0);
  }
}

void sub_244C8C468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8C530(uint64_t a1, void *a2, void *a3)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v10 = a3;
  if (v5)
  {
    uint64_t v11 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 80);
      uint64_t v15 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v12, v13);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v19 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v17, v18);
      uint64_t v22 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v20, v21);
      *(_DWORD *)buf = 134219522;
      uint64_t v75 = v14;
      __int16 v76 = 2048;
      id v77 = v5;
      __int16 v78 = 2112;
      uint64_t v79 = (uint64_t)v5;
      __int16 v80 = 2048;
      uint64_t v81 = v15;
      __int16 v82 = 2112;
      uint64_t v83 = v16;
      __int16 v84 = 2048;
      uint64_t v85 = v19;
      __int16 v86 = 2048;
      uint64_t v87 = v22;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Read attribute work item [%llu] result: (%p) %@  [0x%016llX:%@:0x%llX:0x%llX]", buf, 0x48u);
    }

    if (sub_244CC4E58(2u))
    {
      uint64_t v25 = *(void *)(a1 + 80);
      uint64_t v26 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v23, v24);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v72 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v28, v29);
      uint64_t v73 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v30, v31);
      uint64_t v70 = v26;
      uint64_t v71 = v27;
      id v68 = v5;
      id v69 = v5;
      uint64_t v67 = v25;
      sub_244CC4DE0(0, 2);
    }
    objc_msgSend__handleAttributeReport_fromSubscription_(*(void **)(a1 + 64), v23, (uint64_t)v5, 0, v67, v68, v69, v70, v71, v72, v73);
  }
  if (!v10) {
    goto LABEL_17;
  }
  if (*(uint64_t *)(a1 + 88) > 1)
  {
    long long v50 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = *(void *)(a1 + 80);
      uint64_t v54 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v51, v52);
      uint64_t v55 = *(void *)(a1 + 40);
      uint64_t v58 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v56, v57);
      uint64_t v61 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v59, v60);
      *(_DWORD *)buf = 134219266;
      uint64_t v75 = v53;
      __int16 v76 = 2112;
      id v77 = v10;
      __int16 v78 = 2048;
      uint64_t v79 = v54;
      __int16 v80 = 2112;
      uint64_t v81 = v55;
      __int16 v82 = 2048;
      uint64_t v83 = v58;
      __int16 v84 = 2048;
      uint64_t v85 = v61;
      _os_log_impl(&dword_2446BD000, v50, OS_LOG_TYPE_DEFAULT, "Read attribute work item [%llu] failed (giving up): %@   [0x%016llX:%@:0x%llx:0x%llx]", buf, 0x3Eu);
    }

    if (sub_244CC4E58(2u))
    {
      objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v62, v6);
      objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v63, v64);
      objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v65, v66);
      sub_244CC4DE0(0, 2);
    }
LABEL_17:
    uint64_t v49 = 0;
    goto LABEL_18;
  }
  uint64_t v32 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    uint64_t v35 = *(void *)(a1 + 80);
    uint64_t v36 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v33, v34);
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v40 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v38, v39);
    uint64_t v43 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v41, v42);
    *(_DWORD *)buf = 134219266;
    uint64_t v75 = v35;
    __int16 v76 = 2112;
    id v77 = v10;
    __int16 v78 = 2048;
    uint64_t v79 = v36;
    __int16 v80 = 2112;
    uint64_t v81 = v37;
    __int16 v82 = 2048;
    uint64_t v83 = v40;
    __int16 v84 = 2048;
    uint64_t v85 = v43;
    _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_ERROR, "Read attribute work item [%llu] failed (will retry): %@   [0x%016llX:%@:0x%llx:0x%llx]", buf, 0x3Eu);
  }

  if (sub_244CC4E58(1u))
  {
    objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v44, v6);
    uint64_t v49 = 1;
    objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v45, v46);
    objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 56), v47, v48);
    sub_244CC4DE0(0, 1);
  }
  else
  {
    uint64_t v49 = 1;
  }
LABEL_18:
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), v49, v6, v7, v8, v9);
}

void sub_244C8C910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8CE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Block_object_dispose((const void *)(v26 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_244C8CF50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  if (objc_msgSend_count(v7, v9, v10) == 1)
  {
    for (uint64_t i = 0; ; uint64_t i = 1)
    {
      if (!objc_msgSend_count(v8, v11, v12, v46, v47, v48))
      {
        uint64_t i = 2;
        goto LABEL_20;
      }
      uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(v8, v14, 0);
      uint64_t v17 = objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0);
      uint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(v7, v18, 0);
      uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v19, v20, 0);
      char isEqual = objc_msgSend_isEqual_(v17, v22, (uint64_t)v21);

      if ((isEqual & 1) == 0) {
        break;
      }
      uint64_t v26 = objc_msgSend_firstObject(v8, v24, v25);
      objc_msgSend_removeObjectAtIndex_(v8, v27, 0);
      objc_msgSend_replaceObjectAtIndex_withObject_(v7, v28, 0, v26);
      uint64_t v29 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = *(void *)(a1 + 40);
        uint64_t v33 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v30, v31);
        *(_DWORD *)buf = 134218498;
        uint64_t v50 = v32;
        __int16 v51 = 2112;
        uint64_t v52 = (uint64_t)v26;
        __int16 v53 = 2048;
        uint64_t v54 = v33;
        _os_log_impl(&dword_2446BD000, v29, OS_LOG_TYPE_DEFAULT, "Batching write attribute work item [%llu]: replaced with new write value %@ [0x%016llX]", buf, 0x20u);
      }

      if (sub_244CC4E58(2u))
      {
        uint64_t v36 = *(void *)(a1 + 40);
        id v47 = v26;
        uint64_t v48 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v34, v35);
        uint64_t v46 = v36;
        sub_244CC4DE0(0, 2);
      }
    }
    uint64_t v43 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v44;
      _os_log_impl(&dword_2446BD000, v43, OS_LOG_TYPE_DEFAULT, "Batching write attribute work item [%llu]: cannot replace with next work item due to path mismatch", buf, 0xCu);
    }

    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0, 2);
    }
  }
  else
  {
    uint64_t v37 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      uint64_t v50 = v40;
      __int16 v51 = 2048;
      uint64_t v52 = objc_msgSend_count(v7, v38, v39);
      _os_log_impl(&dword_2446BD000, v37, OS_LOG_TYPE_ERROR, "Batching write attribute work item [%llu]: Unexpected write request count %lu", buf, 0x16u);
    }

    if (sub_244CC4E58(1u))
    {
      objc_msgSend_count(v7, v41, v42);
      sub_244CC4DE0(0, 1);
    }
    uint64_t i = 0;
  }
LABEL_20:

  return i;
}

void sub_244C8D2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8D344(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  *a3 = 0;
  *a4 = 1;
}

void sub_244C8D354(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v40 = a4;
  uint64_t v39 = objc_msgSend_newBaseDevice(v6, v7, v8);
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, 0);
  uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(v10, v11, 0);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v10, v13, 2);
  uint64_t v17 = objc_msgSend_null(MEMORY[0x263EFF9D0], v15, v16);

  if (v14 == v17)
  {

    uint64_t v14 = 0;
  }
  uint64_t v37 = objc_msgSend_endpoint(v12, v18, v19);
  long long v38 = v14;
  uint64_t v22 = objc_msgSend_cluster(v12, v20, v21);
  uint64_t v25 = objc_msgSend_attribute(v12, v23, v24);
  uint64_t v27 = objc_msgSend_objectAtIndexedSubscript_(v10, v26, 1);
  __int16 v28 = v6;
  uint64_t v31 = objc_msgSend_queue(v6, v29, v30);
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 3221225472;
  v41[2] = sub_244C8D66C;
  v41[3] = &unk_26519B580;
  uint64_t v32 = *(void *)(a1 + 56);
  uint64_t v46 = *(void *)(a1 + 48);
  uint64_t v47 = v32;
  id v33 = v10;
  id v42 = v33;
  id v36 = v28;
  id v43 = v36;
  id v44 = *(id *)(a1 + 40);
  id v34 = v40;
  id v45 = v34;
  objc_msgSend__writeAttributeWithEndpointID_clusterID_attributeID_value_timedWriteTimeout_queue_completion_(v39, v35, (uint64_t)v37, v22, v25, v27, v38, v31, v41, v28);
}

void sub_244C8D58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_244C8D66C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 134218242;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Write attribute work item [%llu] failed: %@", buf, 0x16u);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, 3);
      uint64_t v11 = *(void **)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v15 = objc_msgSend_unsignedLongLongValue(v10, v13, v14);
      objc_msgSend_removeExpectedValueForAttributePath_expectedValueID_(v11, v16, v12, v15);
    }
  }
  (*(void (**)(void, void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), 0);
}

void sub_244C8D7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_244C8E50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_244C8E6C0(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  *a3 = 0;
  *a4 = 1;
}

void sub_244C8E6D0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  v44[0] = MEMORY[0x263EF8330];
  v44[1] = 3221225472;
  v44[2] = sub_244C8EA4C;
  v44[3] = &unk_26519B5D0;
  id v45 = *(id *)(a1 + 32);
  id v49 = *(id *)(a1 + 112);
  id v46 = *(id *)(a1 + 40);
  id v9 = v7;
  id v47 = v9;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 120);
  id v48 = v10;
  uint64_t v51 = v11;
  id v37 = v8;
  id v50 = v37;
  uint64_t v14 = (void (**)(void, void, void))MEMORY[0x2456969D0](v44);
  if (!*(void *)(a1 + 56))
  {
    uint64_t v20 = 0;
LABEL_6:
    id v36 = (void *)v20;
    long long v38 = v14;
    uint64_t v18 = objc_msgSend_newBaseDevice(v9, v12, v13);
    uint64_t v26 = *(void *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 80);
    uint64_t v27 = *(void *)(a1 + 88);
    uint64_t v28 = *(void *)(a1 + 96);
    uint64_t v29 = *(void *)(a1 + 104);
    uint64_t v32 = objc_msgSend_queue(v9, v30, v31);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    v39[2] = sub_244C8EBA0;
    v39[3] = &unk_26519B5F8;
    uint64_t v42 = *(void *)(a1 + 128);
    uint64_t v43 = a3;
    __int16 v19 = v37;
    id v40 = v37;
    id v41 = v38;
    char v35 = 0;
    uint64_t v33 = v25;
    uint64_t v15 = v36;
    objc_msgSend__invokeCommandWithEndpointID_clusterID_commandID_commandFields_timedInvokeTimeout_serverSideProcessingTimeout_logCall_queue_completion_(v18, v34, v26, v33, v27, v28, v36, v29, v35, v32, v39);

    uint64_t v14 = (void (**)(void, void, void))v38;
    goto LABEL_7;
  }
  uint64_t v15 = objc_msgSend_now(MEMORY[0x263EFF910], v12, v13);
  if (objc_msgSend_compare_(v15, v16, *(void *)(a1 + 64)) != 1)
  {
    uint64_t v21 = NSNumber;
    objc_msgSend_timeIntervalSinceDate_(*(void **)(a1 + 64), v17, (uint64_t)v15);
    uint64_t v20 = objc_msgSend_numberWithDouble_(v21, v23, v24, v22 * 1000.0);

    goto LABEL_6;
  }
  uint64_t v18 = sub_244B27814((uint64_t)MTRError, 0x94u);
  ((void (**)(void, void, void *))v14)[2](v14, 0, v18);
  __int16 v19 = v37;
LABEL_7:
}

void sub_244C8E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_244C8EA4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_244C8EB88;
  block[3] = &unk_265194FE8;
  id v14 = *(id *)(a1 + 64);
  id v8 = v5;
  id v12 = v8;
  id v9 = v6;
  id v13 = v9;
  dispatch_async(v7, block);
  if (v9 && *(void *)(a1 + 40)) {
    objc_msgSend_removeExpectedValuesForAttributePaths_expectedValueID_(*(void **)(a1 + 48), v10, *(void *)(a1 + 56), *(void *)(a1 + 80));
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_244C8EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C8EB88(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_244C8EBA0(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[6];
    *(_DWORD *)buf = 134218498;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    id v19 = v5;
    __int16 v20 = 2112;
    id v21 = v6;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Invoke work item [%llu] received command response: %@ error: %@", buf, 0x20u);
  }

  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0, 2);
  }
  if (!v6) {
    goto LABEL_11;
  }
  objc_msgSend_domain(v6, v9, v10);
  id v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v13 != @"MTRInteractionErrorDomain" || objc_msgSend_code(v6, v11, v12) != 156)
  {

    goto LABEL_11;
  }
  BOOL v14 = a1[7] < 5;

  if (!v14)
  {
LABEL_11:
    (*(void (**)(void, id, id))(a1[5] + 16))(a1[5], v5, v6);
    goto LABEL_12;
  }
  (*(void (**)(void, uint64_t, uint64_t))(a1[4] + 16))(a1[4], 1, v15);
LABEL_12:
}

void sub_244C8ED40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8EE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v15 = v14;

  _Unwind_Resume(a1);
}

void sub_244C8EEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  BOOL v14 = v13;

  _Unwind_Resume(a1);
}

void sub_244C8EFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C8F558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  _Unwind_Resume(a1);
}

void sub_244C8F660(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    objc_msgSend__performScheduledExpirationCheck(WeakRetained, v1, v2);
  }
}

void sub_244C8F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C8F724(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C8F7B4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_244C8F9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8FC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C8FDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C90000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C900F8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_244C902FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C904F8(_Unwind_Exception *a1)
{
  id v6 = v3;

  _Unwind_Resume(a1);
}

void sub_244C908A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C90964(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 360);
  if (v5)
  {
    unsigned __int16 v6 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 40), v3, v4);
    sub_244B2FD64(v5, v6);
  }

  os_unfair_lock_unlock(v2);
}

void sub_244C909E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C90CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C90D80(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  if (*(void *)(*(void *)(a1 + 32) + 360))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v3 = *(id *)(a1 + 40);
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v16, v20, 16);
    if (v7)
    {
      uint64_t v8 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v3);
          }
          uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          __int16 v11 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v5, v6);
          unsigned int v14 = objc_msgSend_unsignedLongLongValue(v10, v12, v13);
          LOWORD(v15[0]) = v11;
          v15[1] = v14;
          sub_244B2FDC0(*(void *)(*(void *)(a1 + 32) + 360), v15);
        }
        uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v16, v20, 16);
      }
      while (v7);
    }
  }
  os_unfair_lock_unlock(v2);
}

void sub_244C90EE0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C91094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244C910F4(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  lock = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(lock);
  if (*(void *)(*(void *)(a1 + 32) + 360))
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id obj = *(id *)(a1 + 40);
    uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v28, v32, 16);
    if (v5)
    {
      uint64_t v6 = *(void *)v29;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v29 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v28 + 1) + 8 * v7);
          id v9 = objc_msgSend_endpoint(*(void **)(a1 + 48), v3, v4, lock);
          unsigned __int16 v12 = objc_msgSend_unsignedLongLongValue(v9, v10, v11);
          uint64_t v15 = objc_msgSend_cluster(*(void **)(a1 + 48), v13, v14);
          int v18 = objc_msgSend_unsignedLongLongValue(v15, v16, v17);
          int v21 = objc_msgSend_unsignedLongLongValue(v8, v19, v20);
          unsigned __int16 v24 = v12;
          int v26 = v18;
          int v27 = v21;
          char v25 = 0;

          sub_244B2FE1C(*(void *)(*(void *)(a1 + 32) + 360), &v24);
          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v28, v32, 16);
      }
      while (v5);
    }
  }
  os_unfair_lock_unlock(lock);
}

void sub_244C91288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, void *a10)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_244C915A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9209C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35)
{
  _Unwind_Resume(a1);
}

void sub_244C92560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_244C92848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_unfair_lock_t lock, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C92930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C92A84(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_244C92BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v11;

  _Unwind_Resume(a1);
}

void sub_244C92EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C9330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_244C9355C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C936DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C9377C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C939DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C93A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C93BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C93C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C93D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C93DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C93EE0(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_244C93FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C940A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C941C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9426C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C94308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C944D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C945B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C94708(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_244C94D68(uint64_t a1, const char *a2)
{
  return objc_msgSend__triggerResubscribeWithReason_nodeLikelyReachable_(*(void **)(a1 + 32), a2, @"SPI client indicated the device may now be reachable", 1);
}

void sub_244C94DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C94E18(uint64_t a1)
{
  sub_2447E7674(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244C94E50(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  v45[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16))
  {
    uint64_t v8 = [MTREventPath alloc];
    uint64_t v10 = objc_msgSend_initWithPath_(v8, v9, a2);
    uint64_t v11 = (void *)v10;
    if (a4)
    {
      unsigned __int16 v12 = *(void **)(a1 + 16);
      v44[0] = @"eventPath";
      v44[1] = @"error";
      v45[0] = v10;
      uint64_t v13 = sub_244B27140((uint64_t)MTRError, a4);
      v45[1] = v13;
      uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v14, (uint64_t)v45, v44, 2);
      objc_msgSend_addObject_(v12, v16, (uint64_t)v15);
    }
    else if (a3)
    {
      uint64_t v13 = sub_2447D5B3C(a3, 0);
      if (v13)
      {
        int v18 = *(void **)(a1 + 16);
        long long v19 = objc_msgSend_eventReportForHeader_andData_(MTRBaseDevice, v17, a2, v13);
        objc_msgSend_addObject_(v18, v20, (uint64_t)v19);
      }
      else
      {
        char v25 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v41 = v11;
          _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_ERROR, "Failed to decode event data for path %@", buf, 0xCu);
        }

        if (sub_244CC4E58(1u)) {
          sub_244CC4DE0(0, 1);
        }
        int v26 = *(void **)(a1 + 16);
        v39[0] = v11;
        v38[0] = @"eventPath";
        v38[1] = @"error";
        LODWORD(v31) = 176;
        *((void *)&v31 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRDevice_Concrete.mm";
        int v32 = 4245;
        int v27 = sub_244B26908((uint64_t)MTRError, &v31);
        v39[1] = v27;
        long long v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v28, (uint64_t)v39, v38, 2);
        objc_msgSend_addObject_(v26, v30, (uint64_t)v29);
      }
    }
    else
    {
      int v21 = *(void **)(a1 + 16);
      v43[0] = v10;
      v42[0] = @"eventPath";
      v42[1] = @"error";
      LODWORD(v33) = 47;
      *((void *)&v33 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRDevice_Concrete.mm";
      int v34 = 4237;
      uint64_t v13 = sub_244B26908((uint64_t)MTRError, &v33);
      v43[1] = v13;
      uint64_t v23 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v22, (uint64_t)v43, v42, 2);
      objc_msgSend_addObject_(v21, v24, (uint64_t)v23);
    }
    sub_244B2F584(a1);
  }
  else
  {
    int v35 = 3;
    id v36 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice_Concrete.mm";
    int v37 = 4227;
    sub_244B2F754(a1, (uint64_t)&v35, 1);
  }
}

void sub_244C95190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C95210(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  v54[2] = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(a2 + 14) < 2u)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v8 = [MTRAttributePath alloc];
      uint64_t v10 = objc_msgSend_initWithPath_(v8, v9, a2);
      uint64_t v11 = (void *)v10;
      if (*a4)
      {
        unsigned __int16 v12 = *(void **)(a1 + 8);
        v53[0] = @"attributePath";
        v53[1] = @"error";
        v54[0] = v10;
        uint64_t v13 = sub_244B27140((uint64_t)MTRError, a4);
        v54[1] = v13;
        uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v14, (uint64_t)v54, v53, 2);
        objc_msgSend_addObject_(v12, v16, (uint64_t)v15);
      }
      else if (a3)
      {
        int v18 = *(unsigned __int8 *)(a2 + 16);
        uint64_t v17 = (unsigned char *)(a2 + 16);
        if (v18)
        {
          long long v19 = NSNumber;
          uint64_t v20 = sub_2446F12CC(v17);
          uint64_t v13 = objc_msgSend_numberWithUnsignedInt_(v19, v21, *(unsigned int *)v20);
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v25 = sub_2447D5B3C(a3, v13);
        uint64_t v15 = (void *)v25;
        if (v25)
        {
          int v27 = *(void **)(a1 + 8);
          v45[0] = @"attributePath";
          v45[1] = @"data";
          v46[0] = v11;
          v46[1] = v25;
          long long v28 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v26, (uint64_t)v46, v45, 2);
          objc_msgSend_addObject_(v27, v29, (uint64_t)v28);
        }
        else
        {
          long long v30 = sub_244CC8484(0, "NotSpecified");
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v50 = v11;
            _os_log_impl(&dword_2446BD000, v30, OS_LOG_TYPE_ERROR, "Failed to decode attribute data for path %@", buf, 0xCu);
          }

          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0, 1);
          }
          long long v31 = *(void **)(a1 + 8);
          v48[0] = v11;
          v47[0] = @"attributePath";
          v47[1] = @"error";
          LODWORD(v35) = 176;
          *((void *)&v35 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framewo"
                                  "rk/CHIP/MTRDevice_Concrete.mm";
          int v36 = 4284;
          long long v28 = sub_244B26908((uint64_t)MTRError, &v35);
          v48[1] = v28;
          long long v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v32, (uint64_t)v48, v47, 2);
          objc_msgSend_addObject_(v31, v34, (uint64_t)v33);
        }
      }
      else
      {
        uint64_t v22 = *(void **)(a1 + 8);
        v52[0] = v10;
        v51[0] = @"attributePath";
        v51[1] = @"error";
        LODWORD(v37) = 47;
        *((void *)&v37 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRDevice_Concrete.mm";
        int v38 = 4275;
        uint64_t v13 = sub_244B26908((uint64_t)MTRError, &v37);
        v52[1] = v13;
        uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v23, (uint64_t)v52, v51, 2);
        objc_msgSend_addObject_(v22, v24, (uint64_t)v15);
      }

      sub_244B2F584(a1);
    }
    else
    {
      int v39 = 3;
      id v40 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice_Concrete.mm";
      int v41 = 4265;
      sub_244B2F754(a1, (uint64_t)&v39, 1);
    }
  }
  else
  {
    int v42 = 3;
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice_Concrete.mm";
    int v44 = 4259;
    sub_244B2F754(a1, (uint64_t)&v42, 1);
  }
}

void sub_244C955E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9566C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(_DWORD *)(a1 + 192);
  if (v8 > 0xE)
  {
    LODWORD(v9) = 5538000;
    goto LABEL_5;
  }
  uint64_t v9 = 10000 * sub_244CC5F04(v8);
  if (v9) {
LABEL_5:
  }
    uint64_t v9 = 30 * (int)v9 / 0x64u + sub_244CE98FC() % (v9 - 30 * (int)v9 / 0x64u);
  uint64_t v10 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a2 + 72);
    uint64_t v12 = *(void *)(a2 + 64);
    int v13 = *(_DWORD *)(a1 + 192);
    long long v21 = *(_OWORD *)a3;
    uint64_t v22 = *(void *)(a3 + 16);
    uint64_t v14 = sub_244CB7B34((const char **)&v21, 1);
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v12);
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)unsigned __int16 v24 = v12;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v13;
    __int16 v25 = 1024;
    int v26 = v9;
    __int16 v27 = 2080;
    long long v28 = v14;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Will try to resubscribe to %02x:%08X%08X at retry index %u after %ums due to error %s", buf, 0x2Au);
  }

  if (sub_244CC4E58(2u))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    *(void *)unsigned __int16 v24 = *(void *)(a3 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xDu, 2);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v20[0] = 0;
  sub_244DCDB14(a2, 0xFFFFFFFF, v20, *(_DWORD *)a3 == 50, (uint64_t)a4);
  sub_24479DF48((uint64_t)v20);
  if (!*(_DWORD *)a4)
  {
    ++*(_DWORD *)(a1 + 192);
    long long v18 = *(_OWORD *)a3;
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v15 = sub_244B26908((uint64_t)MTRError, &v18);
    uint64_t v17 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v16, v9);
    sub_244B2FC14(a1, v15, v17);

    *(_DWORD *)a4 = 0;
    a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice_Concrete.mm";
    *((_DWORD *)a4 + 4) = 4336;
  }
}

void sub_244C95904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C95944(uint64_t result, uint64_t a2, unsigned __int8 *a3, char a4)
{
  *(void *)result = &unk_26F944F00;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = result + 48;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = result + 72;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 112) = result + 120;
  *(unsigned char *)(result + 136) = 0;
  *(void *)(result + 160) = 0;
  *(void *)(result + 152) = result + 160;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = &unk_26F953058;
  *(_WORD *)(result + 184) = 0;
  *(unsigned char *)(result + 186) = 0;
  *(unsigned char *)(result + 200) = 0;
  *(void *)(result + 188) = 0;
  *(_DWORD *)(result + 195) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 232) = result;
  *(_WORD *)(result + 240) = -1;
  *(_DWORD *)(result + 244) = -1;
  *(unsigned char *)(result + 248) = a4;
  int v4 = *a3;
  *(unsigned char *)(result + 136) = v4;
  if (v4) {
    *(void *)(result + 144) = *((void *)a3 + 1);
  }
  return result;
}

void *sub_244C95A14(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = &unk_26F952950;
  a1[1] = v3;
  a1[2] = 0;
  int v4 = (objc_class *)MEMORY[0x263EFF9A0];
  id v5 = v3;
  id v6 = objc_alloc_init(v4);
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;

  return a1;
}

void sub_244C95A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C95AB0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int16 *a4@<X3>, uint64_t a5@<X8>)
{
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDemuxingStorage.mm", 247);
  if (!a3 && *a4)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    *(_DWORD *)(a5 + 16) = 249;
    return;
  }
  objc_msgSend_stringWithUTF8String_(NSString, v10, a2);
  id v26 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v26, v11, @"g/"))
  {
    uint64_t v15 = sub_244C95D24(a1, v26);
    if (v15)
    {
LABEL_6:
      if ((unint64_t)objc_msgSend_length(v15, v13, v14) < 0x10000)
      {
        unsigned __int16 v21 = objc_msgSend_length(v15, v16, v17);
        if (v21 <= *a4)
        {
          *a4 = v21;
          if (v21)
          {
            id v22 = v15;
            __int16 v25 = (const void *)objc_msgSend_bytes(v22, v23, v24);
            memcpy(a3, v25, *a4);
          }
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRDemuxingStorage.mm";
          int v18 = 290;
        }
        else
        {
          *(_DWORD *)a5 = 25;
          *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRDemuxingStorage.mm";
          int v18 = 280;
        }
      }
      else
      {
        *(_DWORD *)a5 = 159;
        *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRDemuxingStorage.mm";
        int v18 = 275;
      }
      *(_DWORD *)(a5 + 16) = v18;

      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (!objc_msgSend_hasPrefix_(v26, v12, @"f/"))
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    int v20 = 267;
LABEL_21:
    *(_DWORD *)(a5 + 16) = v20;
    goto LABEL_22;
  }
  unsigned __int8 v28 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  sub_244C95E54(v26, &v28, a5);
  if (!*(_DWORD *)a5)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    id v27 = v26;
    sub_244C96070(v26, &v27, a5);
    id v19 = v27;

    if (!*(_DWORD *)a5)
    {
      uint64_t v15 = sub_244C961AC(a1, v28, v19);
      id v26 = v19;
      if (v15) {
        goto LABEL_6;
      }
LABEL_20:
      *(_DWORD *)a5 = 160;
      *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDemuxingStorage.mm";
      int v20 = 271;
      goto LABEL_21;
    }
    id v26 = v19;
  }
LABEL_22:
}

void sub_244C95D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_244C95D24(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (sub_244C96A80(v3))
  {
    id v5 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 16), v4, (uint64_t)v3);
  }
  else
  {
    id v6 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v9 = v3;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "MTRDemuxingStorage reading unknown global key: %@", buf, 0xCu);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    id v5 = 0;
  }

  return v5;
}

void sub_244C95E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C95E54(void *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a1;
  if (objc_msgSend_hasPrefix_(v5, v6, @"f/"))
  {
    unsigned int v8 = objc_msgSend_componentsSeparatedByString_(v5, v7, @"/");
    if ((unint64_t)objc_msgSend_count(v8, v9, v10) <= 2)
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDemuxingStorage.mm";
      *(_DWORD *)(a3 + 16) = 50;
LABEL_17:

      goto LABEL_18;
    }
    uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(v8, v11, 1);
    uint64_t v14 = objc_msgSend_scannerWithString_(MEMORY[0x263F08B08], v13, (uint64_t)v12);
    long long v16 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x263F08708], v15, @"0123456789abcdefABCDEF");
    id v19 = objc_msgSend_invertedSet(v16, v17, v18);

    if (objc_msgSend_scanCharactersFromSet_intoString_(v14, v20, (uint64_t)v19, 0))
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDemuxingStorage.mm";
      int v22 = 61;
LABEL_16:
      *(_DWORD *)(a3 + 16) = v22;

      goto LABEL_17;
    }
    unsigned int v26 = 0;
    if (objc_msgSend_scanHexInt_(v14, v21, (uint64_t)&v26))
    {
      if (objc_msgSend_isAtEnd(v14, v23, v24))
      {
        if (v26 <= 0xFF)
        {
          int v25 = 0;
          *a2 = v26;
          int v22 = 79;
LABEL_15:
          *(_DWORD *)a3 = v25;
          *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRDemuxingStorage.mm";
          goto LABEL_16;
        }
        int v22 = 75;
      }
      else
      {
        int v22 = 71;
      }
    }
    else
    {
      int v22 = 66;
    }
    int v25 = 47;
    goto LABEL_15;
  }
  *(_DWORD *)a3 = 47;
  *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RDemuxingStorage.mm";
  *(_DWORD *)(a3 + 16) = 44;
LABEL_18:
}

void sub_244C9601C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C96070(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v19 = a1;
  if (objc_msgSend_hasPrefix_(v19, v5, @"f/"))
  {
    uint64_t v7 = objc_msgSend_componentsSeparatedByString_(v19, v6, @"/");
    if ((unint64_t)objc_msgSend_count(v7, v8, v9) >= 3)
    {
      uint64_t v14 = objc_msgSend_count(v7, v10, v11);
      long long v16 = objc_msgSend_subarrayWithRange_(v7, v15, 2, v14 - 2);

      objc_msgSend_componentsJoinedByString_(v16, v17, @"/");
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      int v13 = 0;
      *a2 = v18;
      int v12 = 100;
      uint64_t v7 = v16;
    }
    else
    {
      int v12 = 95;
      int v13 = 47;
    }
    *(_DWORD *)a3 = v13;
    *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    *(_DWORD *)(a3 + 16) = v12;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    *(_DWORD *)(a3 + 16) = 89;
  }
}

void sub_244C96188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_244C961AC(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (sub_244C96B6C(v5))
  {
    id v6 = sub_244C96C38(a2, v5);
    unsigned int v8 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 16), v7, (uint64_t)v6);
  }
  else
  {
    unsigned int v8 = 0;
  }

  return v8;
}

void sub_244C96234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C96250(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  if (a3 || !a4)
  {
    objc_msgSend_stringWithUTF8String_(NSString, a2, (uint64_t)a2);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    if (a3) {
      objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v9, a3, a4);
    }
    else {
    uint64_t v11 = objc_msgSend_data(MEMORY[0x263EFF8F8], v9, v10);
    }
    if (objc_msgSend_hasPrefix_(v15, v12, @"g/"))
    {
      sub_244C9642C(a1, v15, v11, a5);
    }
    else if (objc_msgSend_hasPrefix_(v15, v13, @"f/"))
    {
      unsigned __int8 v17 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      sub_244C95E54(v15, &v17, a5);
      if (*(_DWORD *)a5)
      {
        id v14 = v15;
      }
      else
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        id v16 = v15;
        sub_244C96070(v15, &v16, a5);
        id v14 = v16;

        if (!*(_DWORD *)a5) {
          sub_244C96588(a1, v17, v14, v11, (int *)a5);
        }
      }
      id v15 = v14;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDemuxingStorage.mm";
      *(_DWORD *)(a5 + 16) = 317;
    }
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    *(_DWORD *)(a5 + 16) = 296;
  }
}

void sub_244C96404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C9642C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  if (sub_244C96A80(v7))
  {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 16), v9, (uint64_t)v8, v7);
    int v10 = 0;
    int v11 = 419;
  }
  else
  {
    int v12 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v7;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "MTRDemuxingStorage setting unknown global key: %@", buf, 0xCu);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    int v11 = 372;
    int v10 = 159;
  }
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RDemuxingStorage.mm";
  *(_DWORD *)(a4 + 16) = v11;
}

void sub_244C96568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C96588(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, void *a4@<X3>, int *a5@<X8>)
{
  id v22 = a3;
  id v9 = a4;
  if (objc_msgSend_isEqualToString_(v22, v10, @"n"))
  {
    int v11 = sub_2446D67B8(*(unsigned __int8 **)(a1 + 8), a2);
    id v14 = v11;
    if (!v11)
    {
      *a5 = 159;
      *((void *)a5 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDemuxingStorage.mm";
      int v18 = 381;
      goto LABEL_11;
    }
    *(void *)a5 = 0;
    *((void *)a5 + 1) = 0;
    *((void *)a5 + 2) = 0;
    uint64_t v15 = objc_msgSend_controllerDataStore(v11, v12, v13);
    unsigned __int8 v17 = v15;
    if (v15)
    {
      objc_msgSend_storeLastLocallyUsedNOC_(v15, v16, (uint64_t)v9);
    }
    else
    {
      *(void *)a5 = 0;
      *((void *)a5 + 1) = 0;
      *((void *)a5 + 2) = 0;
    }

    int v19 = *a5;
    if (v19) {
      goto LABEL_12;
    }
  }
  if (sub_244C96B6C(v22))
  {
    int v20 = sub_244C96C38(a2, v22);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 16), v21, (uint64_t)v9, v20);
    *a5 = 0;
    *((void *)a5 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    a5[4] = 419;

    goto LABEL_12;
  }
  *a5 = 159;
  *((void *)a5 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RDemuxingStorage.mm";
  int v18 = 391;
LABEL_11:
  a5[4] = v18;
LABEL_12:
}

void sub_244C966F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C96730(uint64_t a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  objc_msgSend_stringWithUTF8String_(NSString, a2, (uint64_t)a2);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v8, v5, @"g/"))
  {
    sub_244C96880(a1, v8, (uint64_t)a3);
  }
  else if (objc_msgSend_hasPrefix_(v8, v6, @"f/"))
  {
    unsigned __int8 v10 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244C95E54(v8, &v10, (uint64_t)a3);
    if (*(_DWORD *)a3)
    {
      id v7 = v8;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      id v9 = v8;
      sub_244C96070(v8, &v9, (uint64_t)a3);
      id v7 = v9;

      if (!*(_DWORD *)a3) {
        sub_244C969BC(a1, v10, v7, (uint64_t)a3);
      }
    }
    id v8 = v7;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDemuxingStorage.mm";
    *((_DWORD *)a3 + 4) = 339;
  }
}

void sub_244C96868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C96880(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v5 = a2;
  if (sub_244C96A80(v5))
  {
    sub_244C96D0C(a1, v5, a3);
  }
  else
  {
    id v6 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "MTRDemuxingStorage deleting unknown global key: %@", buf, 0xCu);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    *(_DWORD *)a3 = 160;
    *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    *(_DWORD *)(a3 + 16) = 402;
  }
}

void sub_244C969A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C969BC(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = a3;
  if (sub_244C96B6C(v8))
  {
    id v7 = sub_244C96C38(a2, v8);
    sub_244C96D0C(a1, v7, a4);
  }
  else
  {
    *(_DWORD *)a4 = 160;
    *(void *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDemuxingStorage.mm";
    *(_DWORD *)(a4 + 16) = 411;
  }
}

void sub_244C96A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C96A80(void *a1)
{
  id v1 = a1;
  if ((objc_msgSend_isEqualToString_(v1, v2, @"g/fidx") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v3, @"g/fs/c") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v4, @"g/fs/n") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v5, @"g/lkgt") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v6, @"g/gdc") & 1) != 0)
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v1, v7, @"g/gcc");
  }

  return isEqualToString;
}

void sub_244C96B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_244C96B38(uint64_t a1, const char *a2)
{
  uint64_t v2 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 16), a2, (uint64_t)a2);

  return v2;
}

uint64_t sub_244C96B6C(void *a1)
{
  id v1 = a1;
  if ((objc_msgSend_isEqualToString_(v1, v2, @"n") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v3, @"i") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v4, @"r") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v5, @"m") & 1) != 0
    || (objc_msgSend_isEqualToString_(v1, v6, @"o") & 1) != 0
    || (objc_msgSend_hasPrefix_(v1, v7, @"gk/") & 1) != 0)
  {
    uint64_t hasPrefix = 1;
  }
  else
  {
    uint64_t hasPrefix = objc_msgSend_hasPrefix_(v1, v8, @"k/");
  }

  return hasPrefix;
}

void sub_244C96C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_244C96C38(unsigned int a1, void *a2)
{
  id v3 = a2;
  int v4 = NSString;
  id v5 = v3;
  uint64_t v8 = objc_msgSend_UTF8String(v5, v6, v7);
  unsigned __int8 v10 = objc_msgSend_stringWithFormat_(v4, v9, @"f/%x/%s", a1, v8);

  return v10;
}

void sub_244C96CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C96CC8@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 16), a2, a3, a2);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RDemuxingStorage.mm";
  *(_DWORD *)(a4 + 16) = 419;
  return result;
}

void sub_244C96D0C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v9 = a2;
  id v6 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 16), v5, (uint64_t)v9);

  if (v6)
  {
    objc_msgSend_removeObjectForKey_(*(void **)(a1 + 16), v7, (uint64_t)v9);
    int v8 = 0;
  }
  else
  {
    int v8 = 160;
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RDemuxingStorage.mm";
  *(_DWORD *)(a3 + 16) = 428;
}

void sub_244C96DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C96DBC(uint64_t a1)
{
  return a1;
}

void sub_244C96DF0(uint64_t a1)
{
  JUMPOUT(0x245695FA0);
}

__n128 sub_244C96F8C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  *(unsigned char *)a1 = v2;
  if (v2)
  {
    long long v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    long long v4 = *(_OWORD *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 40) = v4;
    long long v6 = *(_OWORD *)(a2 + 88);
    long long v7 = *(_OWORD *)(a2 + 104);
    long long v8 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 132) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 88) = v6;
    int v9 = a2[148];
    *(unsigned char *)(a1 + 148) = v9;
    if (v9)
    {
      uint64_t v10 = *((void *)a2 + 19);
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
      *(void *)(a1 + 152) = v10;
    }
    long long v11 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v11;
    __n128 result = *((__n128 *)a2 + 12);
    long long v13 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
    *(__n128 *)(a1 + 192) = result;
    *(_OWORD *)(a1 + 208) = v13;
    *(_DWORD *)(a1 + 236) = *((_DWORD *)a2 + 59);
  }
  return result;
}

void sub_244C97164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C971BC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v17 = a2;
  id v10 = a3;
  id v11 = a4;
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 70);
  if (*(void *)(a1 + 40))
  {
    a5->n128_u32[0] = 3;
    a5->n128_u64[1] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/F"
                                        "ramework/CHIP/MTRCommissionableBrowser.mm";
    int v12 = 72;
LABEL_9:
    a5[1].n128_u32[0] = v12;
    goto LABEL_10;
  }
  if (*(void *)(a1 + 48))
  {
    a5->n128_u32[0] = 3;
    a5->n128_u64[1] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/F"
                                        "ramework/CHIP/MTRCommissionableBrowser.mm";
    int v12 = 73;
    goto LABEL_9;
  }
  if (*(void *)(a1 + 32))
  {
    a5->n128_u32[0] = 3;
    a5->n128_u64[1] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/F"
                                        "ramework/CHIP/MTRCommissionableBrowser.mm";
    int v12 = 74;
    goto LABEL_9;
  }
  if (*(void *)(a1 + 56))
  {
    a5->n128_u32[0] = 3;
    a5->n128_u64[1] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/F"
                                        "ramework/CHIP/MTRCommissionableBrowser.mm";
    int v12 = 75;
    goto LABEL_9;
  }
  objc_storeStrong((id *)(a1 + 40), a2);
  objc_storeStrong((id *)(a1 + 48), a3);
  objc_storeStrong((id *)(a1 + 32), a4);
  id v13 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  id v14 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v13;

  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  sub_244D77E00(a1 + 16, 0, a5);
  if (!a5->n128_u32[0])
  {
    a5->n128_u64[0] = 0;
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    uint64_t v15 = sub_244DB12A8();
    id v16 = sub_244D6C5A4();
    (*(void (**)(uint64_t *, uint64_t *))(*v15 + 16))(v15, v16);
    if (!a5->n128_u32[0])
    {
      a5->n128_u64[0] = 0;
      a5->n128_u64[1] = 0;
      a5[1].n128_u64[0] = 0;
      LOBYTE(v19) = 0;
      *((void *)&v19 + 1) = 0;
      uint64_t v20 = 0;
      sub_244D7ED8C((uint64_t)__str, 0x21uLL, &v19, 2, (uint64_t)a5);
      if (!a5->n128_u32[0])
      {
        uint32_t v18 = 0;
        sub_244D7418C(__str, 0, &v18, a1 + 8, a5);
      }
    }
  }
LABEL_10:
}

void sub_244C9742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C974C0(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X8>)
{
  id v6 = a2;
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 99);
  long long v7 = *(void **)(a1 + 40);
  if (!v7)
  {
    int v15 = 101;
LABEL_12:
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/F"
                                        "ramework/CHIP/MTRCommissionableBrowser.mm";
    a3[1].n128_u32[0] = v15;
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 48))
  {
    int v15 = 102;
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 32))
  {
    int v15 = 103;
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 56))
  {
    int v15 = 104;
    goto LABEL_12;
  }
  *(void *)(a1 + 40) = 0;

  long long v8 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

  int v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  sub_244C978A4(a1, v10, v11);
  sub_244C97AA8(a1, v12, v13);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  id v14 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;

  objc_storeStrong((id *)(a1 + 24), a2);
  if (qword_26B0D43B0 != -1) {
    dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
  }
  sub_244D77ED0(v16);
  sub_244D742BC(a1 + 8, a3);
LABEL_13:
}

void sub_244C97608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_244C977E4(id *a1)
{
  return a1;
}

void sub_244C978A4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned __int16 v21 = objc_msgSend_mutableCopy(MEMORY[0x263EFFA78], a2, a3);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = *(id *)(a1 + 56);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v23, v27, 16);
  if (v6)
  {
    uint64_t v7 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v10 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v5, v9, v21);
        uint64_t v13 = objc_msgSend_instanceName(v10, v11, v12);
        int v15 = objc_msgSend_stringWithUTF8String_(NSString, v14, (uint64_t)"BLE");
        char isEqual = objc_msgSend_isEqual_(v13, v16, (uint64_t)v15);

        if ((isEqual & 1) == 0)
        {
          uint32_t v18 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v5, v9);
          objc_msgSend_setObject_forKeyedSubscript_(v21, v19, (uint64_t)v18, v9);
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v23, v27, 16);
    }
    while (v6);
  }

  uint64_t v20 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v21;
}

void sub_244C97A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_244C97AA8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  int v41 = objc_msgSend_mutableCopy(MEMORY[0x263EFFA78], a2, a3);
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = *(id *)(a1 + 56);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v48, v54, 16);
  if (v6)
  {
    uint64_t v43 = *(void *)v49;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v49 != v43) {
          objc_enumerationMutation(obj);
        }
        long long v8 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v5, (uint64_t)v8);
        uint64_t v12 = objc_msgSend_interfaces(v9, v10, v11);

        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        id v13 = v12;
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v44, v53, 16);
        if (v16)
        {
          uint64_t v17 = *(void *)v45;
          do
          {
            for (uint64_t j = 0; j != v16; ++j)
            {
              if (*(void *)v45 != v17) {
                objc_enumerationMutation(v13);
              }
              long long v19 = objc_msgSend_objectForKeyedSubscript_(v13, v15, *(void *)(*((void *)&v44 + 1) + 8 * j));
              uint64_t v22 = v19;
              if (v19)
              {
                objc_msgSend_resolutionData(v19, v20, v21);
                BOOL v23 = v52 == 0;

                if (!v23) {
                  continue;
                }
              }
              id v24 = v8;
              id v27 = (char *)objc_msgSend_UTF8String(v24, v25, v26);
              sub_244D746CC(v27);
            }
            uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v15, (uint64_t)&v44, v53, 16);
          }
          while (v16);
        }

        uint64_t v29 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v28, (uint64_t)v8);
        int v32 = objc_msgSend_instanceName(v29, v30, v31);
        int v34 = objc_msgSend_stringWithUTF8String_(NSString, v33, (uint64_t)"BLE");
        int isEqual = objc_msgSend_isEqual_(v32, v35, (uint64_t)v34);

        if (isEqual)
        {
          int v38 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v37, (uint64_t)v8);
          objc_msgSend_setObject_forKeyedSubscript_(v41, v39, (uint64_t)v38, v8);
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v48, v54, 16);
    }
    while (v6);
  }

  id v40 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v41;
}

void sub_244C97D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_244C97DE0(id *a1)
{
  JUMPOUT(0x245695FA0);
}

void sub_244C97E4C(uint64_t a1, void *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 169);
  if (!*a2)
  {
    long long v4 = sub_244C98F4C(a2);
    long long v50 = objc_msgSend_stringWithUTF8String_(NSString, v5, (uint64_t)(v4 + 30));
    uint64_t v7 = objc_msgSend_objectForKey_(*(void **)(a1 + 56), v6, (uint64_t)v50);

    if (v7)
    {
      long long v48 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v8, (uint64_t)v50);
      objc_msgSend_setInstanceName_(v48, v9, (uint64_t)v50);
      uint64_t v11 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v10, *((unsigned __int16 *)v4 + 91));
      objc_msgSend_setVendorID_(v48, v12, (uint64_t)v11);

      id v14 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v13, *((unsigned __int16 *)v4 + 92));
      objc_msgSend_setProductID_(v48, v15, (uint64_t)v14);

      uint64_t v17 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v16, *((unsigned __int16 *)v4 + 90));
      objc_msgSend_setDiscriminator_(v48, v18, (uint64_t)v17);

      objc_msgSend_setCommissioningMode_(v48, v19, *((unsigned char *)v4 + 188) != 0);
      long long v49 = objc_msgSend_interfaces(v48, v20, v21);
      BOOL v23 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v22, *(unsigned int *)v4);
      long long v25 = objc_msgSend_objectForKeyedSubscript_(v49, v24, (uint64_t)v23);
      v60[0] = 1;
      int v61 = *(_DWORD *)v4;
      long long v26 = *(_OWORD *)(v4 + 15);
      long long v68 = *(_OWORD *)(v4 + 13);
      long long v69 = v26;
      v70[0] = *(_OWORD *)(v4 + 17);
      *(_OWORD *)((char *)v70 + 11) = *(_OWORD *)((char *)v4 + 147);
      long long v27 = *(_OWORD *)(v4 + 7);
      long long v64 = *(_OWORD *)(v4 + 5);
      long long v65 = v27;
      long long v28 = *(_OWORD *)(v4 + 11);
      long long v66 = *(_OWORD *)(v4 + 9);
      long long v67 = v28;
      long long v29 = *(_OWORD *)(v4 + 3);
      long long v62 = *(_OWORD *)(v4 + 1);
      long long v63 = v29;
      objc_msgSend_setResolutionData_(v25, v30, (uint64_t)v60);

      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      id v31 = v49;
      uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v54, v59, 16);
      if (v34)
      {
        uint64_t v35 = *(void *)v55;
        do
        {
          for (uint64_t i = 0; i != v34; ++i)
          {
            if (*(void *)v55 != v35) {
              objc_enumerationMutation(v31);
            }
            long long v37 = *(void **)(*((void *)&v54 + 1) + 8 * i);
            int v38 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v33, *(unsigned int *)v4);
            if ((objc_msgSend_isEqual_(v37, v39, (uint64_t)v38) & 1) != 0
              || (objc_msgSend_objectForKeyedSubscript_(v31, v40, (uint64_t)v37),
                  int v41 = objc_claimAutoreleasedReturnValue(),
                  (long long v44 = v41) == 0))
            {
            }
            else
            {
              objc_msgSend_resolutionData(v41, v42, v43);
              BOOL v45 = v58 == 0;

              if (!v45)
              {
                long long v47 = v31;
                goto LABEL_16;
              }
            }
          }
          uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v33, (uint64_t)&v54, v59, 16);
        }
        while (v34);
      }

      long long v46 = *(NSObject **)(a1 + 32);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = sub_244C98F70;
      block[3] = &unk_26519B670;
      uint64_t v53 = a1;
      id v52 = v48;
      dispatch_async(v46, block);
      long long v47 = v52;
LABEL_16:
    }
  }
}

void sub_244C981D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_244C98278(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 218);
  if (*(void *)(a1 + 40) && *(void *)(a1 + 48) && *(void *)(a1 + 32))
  {
    int v4 = *(_DWORD *)(a1 + 64) + 1;
    *(_DWORD *)(a1 + 64) = v4;
    *(_DWORD *)buf = 2;
    *(void *)&v35[4] = "dwnfw_onnet_devices_added";
    *(_DWORD *)&v35[12] = v4;
    v35[16] = 1;
    sub_244D7E78C((uint64_t)buf);
    uint64_t v6 = objc_msgSend_stringWithUTF8String_(NSString, v5, a2);
    long long v8 = objc_msgSend_objectForKey_(*(void **)(a1 + 56), v7, (uint64_t)v6);
    BOOL v9 = v8 == 0;

    if (v9)
    {
      uint64_t v11 = objc_alloc_init(MTRCommissionableBrowserResult);
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 56), v12, (uint64_t)v11, v6);

      id v13 = objc_alloc_init(MEMORY[0x263EFF9A0]);
      int v15 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v14, (uint64_t)v6);
      objc_msgSend_setInterfaces_(v15, v16, (uint64_t)v13);
    }
    uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v10, (uint64_t)v6);
    uint64_t v20 = objc_msgSend_interfaces(v17, v18, v19);

    uint64_t v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v21, *(unsigned int *)(a2 + 92));
    BOOL v23 = objc_alloc_init(MTRCommissionableBrowserResultInterfaces);
    objc_msgSend_setObject_forKeyedSubscript_(v20, v24, (uint64_t)v23, v22);

    __n128 v32 = 0uLL;
    uint64_t v33 = 0;
    uint32_t v31 = *(_DWORD *)(a2 + 92);
    sub_244D74560(a2, &v31, a1, &v32);
    if (v32.n128_u32[0])
    {
      long long v25 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        __n128 v29 = v32;
        uint64_t v30 = v33;
        long long v26 = sub_244CB7B34((const char **)&v29, 1);
        *(_DWORD *)buf = 136315650;
        *(void *)uint64_t v35 = v26;
        *(_WORD *)&v35[8] = 2080;
        *(void *)&v35[10] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRCommissionableBrowser.mm";
        __int16 v36 = 1024;
        int v37 = 236;
        _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }

      if (sub_244CC4E58(1u))
      {
        __n128 v27 = v32;
        uint64_t v28 = v33;
        sub_244CB7B34((const char **)&v27, 1);
        sub_244CC4DE0(0, 1);
      }
    }
  }
}

void sub_244C9854C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C985D0(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 241);
  if (*(void *)(a1 + 40) && *(void *)(a1 + 48) && *(void *)(a1 + 32))
  {
    int v4 = *(_DWORD *)(a1 + 68) + 1;
    *(_DWORD *)(a1 + 68) = v4;
    int v35 = 2;
    __int16 v36 = "dwnfw_onnet_devices_removed";
    int v37 = v4;
    char v38 = 1;
    sub_244D7E78C((uint64_t)&v35);
    uint64_t v6 = objc_msgSend_stringWithUTF8String_(NSString, v5, a2);
    long long v8 = objc_msgSend_objectForKey_(*(void **)(a1 + 56), v7, (uint64_t)v6);
    BOOL v9 = v8 == 0;

    if (!v9)
    {
      uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v10, (uint64_t)v6);
      id v14 = objc_msgSend_interfaces(v11, v12, v13);
      uint64_t v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v15, *(unsigned int *)(a2 + 92));
      uint32_t v18 = objc_msgSend_objectForKeyedSubscript_(v14, v17, (uint64_t)v16);
      uint64_t v21 = v18;
      if (!v18 || (objc_msgSend_resolutionData(v18, v19, v20), BOOL v22 = (_BYTE)v35 == 0, v21, v22)) {
        sub_244D746CC((char *)a2);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v14, v23, 0, v16);
      if (!objc_msgSend_count(v14, v24, v25))
      {
        uint64_t v28 = objc_msgSend_instanceName(v11, v26, v27);
        BOOL v29 = v28 == 0;

        if (!v29)
        {
          uint32_t v31 = *(NSObject **)(a1 + 32);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = sub_244C98F7C;
          block[3] = &unk_26519B670;
          uint64_t v34 = a1;
          id v33 = v11;
          dispatch_async(v31, block);
        }
        objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 56), v30, 0, v6);
      }
    }
  }
}

void sub_244C98814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C98864(uint64_t a1)
{
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 286);

  sub_244C97AA8(a1, v2, v3);
}

void sub_244C988A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 295);
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = objc_alloc_init(MTRCommissionableBrowserResult);
    long long v8 = objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)"BLE");
    objc_msgSend_setInstanceName_(v6, v9, (uint64_t)v8);

    uint64_t v11 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v10, *(unsigned __int16 *)(a3 + 3));
    objc_msgSend_setVendorID_(v6, v12, (uint64_t)v11);

    id v14 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v13, *(unsigned __int16 *)(a3 + 5));
    objc_msgSend_setProductID_(v6, v15, (uint64_t)v14);

    uint64_t v17 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v16, *(_WORD *)(a3 + 1) & 0xFFF);
    objc_msgSend_setDiscriminator_(v6, v18, (uint64_t)v17);

    objc_msgSend_setCommissioningMode_(v6, v19, 1);
    sub_244DECA74((uint64_t)&v30, a2, 0);
    long long v49 = v30;
    long long v56 = v37;
    long long v57 = v38;
    *(_OWORD *)char v58 = *(_OWORD *)v39;
    *(_OWORD *)&v58[12] = *(_OWORD *)&v39[12];
    long long v53 = v34;
    long long v54 = v35;
    v48[0] = 1;
    int v50 = v31;
    int v51 = v32;
    uint64_t v52 = v33;
    long long v55 = v36;
    char v59 = v40;
    if (v40)
    {
      uint64_t v60 = v41;
      int v61 = v42;
      char v40 = 0;
    }
    long long v62 = v43;
    uint64_t v63 = v44;
    long long v64 = v45;
    *(_OWORD *)long long v65 = *(_OWORD *)v46;
    *(_OWORD *)&v65[9] = *(_OWORD *)&v46[9];
    int v66 = v47;
    objc_msgSend_setParams_(v6, v20, (uint64_t)v48);
    int v21 = *(_DWORD *)(a1 + 72) + 1;
    *(_DWORD *)(a1 + 72) = v21;
    LODWORD(v30) = 2;
    *((void *)&v30 + 1) = "dwnfw_ble_devices_added";
    int v31 = v21;
    LOBYTE(v32) = 1;
    sub_244D7E78C((uint64_t)&v30);
    BOOL v23 = objc_msgSend_stringWithFormat_(NSString, v22, @"%@", a2);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 56), v24, (uint64_t)v6, v23);
    uint64_t v25 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = sub_244C98F88;
    block[3] = &unk_26519B670;
    uint64_t v28 = v6;
    uint64_t v29 = a1;
    long long v26 = v6;
    dispatch_async(v25, block);
  }
}

void sub_244C98B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C98BD4(uint64_t a1, uint64_t a2)
{
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 318);
  if (*(void *)(a1 + 40))
  {
    long long v5 = objc_msgSend_stringWithFormat_(NSString, v4, @"%@", a2);
    uint64_t v7 = objc_msgSend_objectForKey_(*(void **)(a1 + 56), v6, (uint64_t)v5);

    if (v7)
    {
      BOOL v9 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 56), v8, (uint64_t)v5);
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 56), v10, 0, v5);
      int v11 = *(_DWORD *)(a1 + 76) + 1;
      *(_DWORD *)(a1 + 76) = v11;
      int v17 = 2;
      uint32_t v18 = "dwnfw_ble_devices_removed";
      int v19 = v11;
      char v20 = 1;
      sub_244D7E78C((uint64_t)&v17);
      uint64_t v12 = *(NSObject **)(a1 + 32);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = sub_244C98F94;
      block[3] = &unk_26519B670;
      id v15 = v9;
      uint64_t v16 = a1;
      id v13 = v9;
      dispatch_async(v12, block);
    }
  }
}

void sub_244C98D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C98D48(uint64_t a1)
{
  id v1 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
}

void sub_244C98D54(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
}

void sub_244C98DA8(id *a1)
{
  JUMPOUT(0x245695FA0);
}

void sub_244C98E18(uint64_t a1, uint64_t a2)
{
}

void sub_244C98E20(uint64_t a1, uint64_t a2)
{
}

void sub_244C98E28(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  sub_244D6A434("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRCommissionableBrowser.mm", 286);

  sub_244C97AA8(v1, v2, v3);
}

void sub_244C98E6C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
}

void sub_244C98EC0(id *a1)
{
  JUMPOUT(0x245695FA0);
}

void sub_244C98F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_244C98F38(uint64_t a1, uint64_t a2)
{
}

void sub_244C98F40(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
}

void *sub_244C98F4C(void *a1)
{
  if (*a1) {
    sub_244E20FE0();
  }
  return a1 + 1;
}

uint64_t sub_244C98F70(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(*(void *)(a1 + 40) + 40), sel_controller_didFindCommissionableDevice_, *(void *)(*(void *)(a1 + 40) + 48));
}

uint64_t sub_244C98F7C(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(*(void *)(a1 + 40) + 40), sel_controller_didRemoveCommissionableDevice_, *(void *)(*(void *)(a1 + 40) + 48));
}

uint64_t sub_244C98F88(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(*(void *)(a1 + 40) + 40), sel_controller_didFindCommissionableDevice_, *(void *)(*(void *)(a1 + 40) + 48));
}

uint64_t sub_244C98F94(uint64_t a1)
{
  return MEMORY[0x270F9A6D0](*(void *)(*(void *)(a1 + 40) + 40), sel_controller_didRemoveCommissionableDevice_, *(void *)(*(void *)(a1 + 40) + 48));
}

void sub_244C99140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C9915C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20) != 1) {
    sub_244E210C0();
  }
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_244C99184(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_244E21190();
  }
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_244C991AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20) != 3) {
    sub_244E21260();
  }
  return *(unsigned int *)(a1 + 16);
}

void sub_244C99250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C99314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C993A4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_sharedInstance(MTRMetricsCollector, a2, a3);

  if (v3)
  {
    int v4 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_DEFAULT, "Initialized metrics collection backend for Darwin", v10, 2u);
    }

    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0, 2);
    }
    uint64_t v7 = objc_msgSend_sharedInstance(MTRMetricsCollector, v5, v6);
    objc_msgSend_registerTracingBackend(v7, v8, v9);
  }
}

void sub_244C9946C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9947C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_sharedInstance(MTRMetricsCollector, a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_unregisterTracingBackend(v5, v3, v4);
}

void sub_244C994CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C99534()
{
  v0 = objc_alloc_init(MTRMetricsCollector);
  uint64_t v1 = (void *)qword_268EBE9B0;
  qword_268EBE9B0 = (uint64_t)v0;

  if (qword_268EBE9B0)
  {
    uint64_t v2 = qword_268EBE9B0 + 24;
    sub_244D5DC68(v2, (uint64_t)&unk_26F952AE8);
  }
}

uint64_t sub_244C9959C(uint64_t a1, long long *a2)
{
  uint64_t result = qword_268EBE9B0;
  if (qword_268EBE9B0)
  {
    long long v3 = *a2;
    uint64_t v4 = *((void *)a2 + 2);
    return objc_msgSend_handleMetricEvent_((void *)qword_268EBE9B0, (const char *)a2, (uint64_t)&v3);
  }
  return result;
}

void sub_244C9965C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C99738(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C99818(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C99A44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C99C1C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C99CAC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C99DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C99F18(uint64_t result)
{
  if (result) {
    *(void *)(result + 16) = 2;
  }
  return result;
}

unint64_t sub_244C99F28(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = *(void *)(result + 16);
    BOOL v2 = v1 >= 3;
    unint64_t v3 = v1 - 3;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_244C99F3C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = v7 - 2;
    if (v7 == 2)
    {
      uint64_t v9 = 3;
LABEL_6:
      a1[2] = v9;
      uint64_t v10 = a1[3];
      int v11 = (void *)MEMORY[0x2456969D0](a1[4]);
      uint64_t v12 = a1[1];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = sub_244C9A054;
      block[3] = &unk_26519B6B8;
      uint64_t v18 = v8;
      uint64_t v19 = v10;
      id v15 = v5;
      id v16 = v11;
      id v17 = v6;
      id v13 = v11;
      dispatch_async(v12, block);

      goto LABEL_7;
    }
    if (v7 >= 3)
    {
      uint64_t v9 = v7 + 1;
      goto LABEL_6;
    }
  }
LABEL_7:
}

uint64_t sub_244C9A054(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[7];
  unint64_t v3 = sub_244CC8484(0, "NotSpecified");
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = a1[4];
      uint64_t v7 = a1[7];
      uint64_t v6 = a1[8];
      *(_DWORD *)buf = 138412802;
      uint64_t v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "MTRAsyncWorkQueue<%@> executing work item [%llu] (retry %zd)", buf, 0x20u);
    }

    if (sub_244CC4E58(2u)) {
LABEL_9:
    }
      sub_244CC4DE0(0, 2);
  }
  else
  {
    if (v4)
    {
      uint64_t v9 = a1[4];
      uint64_t v10 = a1[8];
      *(_DWORD *)buf = 138412546;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "MTRAsyncWorkQueue<%@> executing work item [%llu]", buf, 0x16u);
    }

    if (sub_244CC4E58(2u)) {
      goto LABEL_9;
    }
  }
  uint64_t v11 = a1[5];
  if (v11) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(v11 + 16))(v11, a1[4], a1[7], a1[6]);
  }
  else {
    return (*(uint64_t (**)(void, void, uint64_t))(a1[6] + 16))(a1[6], 0, v8);
  }
}

void sub_244C9A208(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16) != 1)
  {
    dispatch_block_t block = (dispatch_block_t)MEMORY[0x2456969D0](*(void *)(a1 + 40));
    sub_244C9A28C((void *)a1);
    uint64_t v2 = block;
    if (block)
    {
      dispatch_async(*(dispatch_queue_t *)(a1 + 8), block);
      uint64_t v2 = block;
    }
  }
}

void sub_244C9A28C(void *a1)
{
  if (a1)
  {
    a1[2] = 1;
    uint64_t v2 = (void *)a1[4];
    a1[4] = 0;

    unint64_t v3 = (void *)a1[5];
    a1[5] = 0;

    BOOL v4 = (void *)a1[8];
    a1[8] = 0;

    uint64_t v5 = (void *)a1[10];
    a1[10] = 0;
  }
}

BOOL sub_244C9A2F8(BOOL result)
{
  if (result) {
    return *(void *)(result + 16) == 1;
  }
  return result;
}

void sub_244C9A51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9A5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  os_unfair_lock_unlock(v14);

  _Unwind_Resume(a1);
}

void sub_244C9A69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9A93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  os_unfair_lock_unlock(v16);
  _Unwind_Resume(a1);
}

void sub_244C9A998(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (*(void *)(a1 + 32) <= *(void *)(a1 + 40))
    {
      unint64_t v6 = objc_msgSend_count(*(void **)(a1 + 24), v4, v5);
      unint64_t v9 = *(void *)(a1 + 32);
      if (v6 >= v9 && v9 != *(void *)(a1 + 40))
      {
        uint64_t v10 = objc_msgSend_count(*(void **)(a1 + 24), v7, v8);
        uint64_t v12 = *(void *)(a1 + 32);
        if (v10 != v12)
        {
          if (*(void *)a2)
          {
            id v13 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 24), v11, v12);
            ++*(void *)(a1 + 32);
            objc_msgSend_batchingHandler(v13, v14, v15);
            uint64_t v18 = (uint64_t (**)(void, void, void))objc_claimAutoreleasedReturnValue();
            if (v18)
            {
              while (1)
              {
                unint64_t v19 = objc_msgSend_count(*(void **)(a1 + 24), v16, v17);
                unint64_t v21 = *(void *)(a1 + 32);
                if (v19 <= v21) {
                  break;
                }
                BOOL v22 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 24), v20, v21);
                uint64_t v27 = objc_msgSend_batchingHandler(v22, v23, v24);
                if (!v27) {
                  goto LABEL_30;
                }
                uint64_t v28 = objc_msgSend_batchingID(v22, v25, v26);
                LOBYTE(v28) = v28 == objc_msgSend_batchingID(v13, v29, v30);

                if ((v28 & 1) == 0) {
                  goto LABEL_30;
                }
                uint64_t v33 = objc_msgSend_batchableData(v13, v31, v32);
                long long v36 = objc_msgSend_batchableData(v22, v34, v35);
                uint64_t v37 = ((uint64_t (**)(void, void *, void *))v18)[2](v18, v33, v36);

                switch(v37)
                {
                  case 2:
                    long long v38 = sub_244CC8484(0, "NotSpecified");
                    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v41 = *(void *)(a2 + 8);
                      uint64_t v42 = objc_msgSend_uniqueID(v22, v39, v40);
                      uint64_t v45 = objc_msgSend_uniqueID(v13, v43, v44);
                      *(_DWORD *)buf = 138412802;
                      uint64_t v71 = v41;
                      __int16 v72 = 2048;
                      uint64_t v73 = v42;
                      __int16 v74 = 2048;
                      uint64_t v75 = v45;
                      _os_log_impl(&dword_2446BD000, v38, OS_LOG_TYPE_DEFAULT, "MTRAsyncWorkQueue<%@> fully merged work item [%llu] into %llu", buf, 0x20u);
                    }

                    if (sub_244CC4E58(2u))
                    {
                      uint64_t v48 = *(void *)(a2 + 8);
                      uint64_t v68 = objc_msgSend_uniqueID(v22, v46, v47);
                      uint64_t v69 = objc_msgSend_uniqueID(v13, v49, v50);
                      uint64_t v67 = v48;
                      sub_244CC4DE0(0, 2);
                    }
                    objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 24), v46, 1, v67, v68, v69);
                    break;
                  case 0:
                    goto LABEL_30;
                  case 1:
                    long long v54 = sub_244CC8484(0, "NotSpecified");
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v58 = *(void *)(a2 + 8);
                      uint64_t v59 = objc_msgSend_uniqueID(v22, v56, v57);
                      uint64_t v62 = objc_msgSend_uniqueID(v13, v60, v61);
                      *(_DWORD *)buf = 138412802;
                      uint64_t v71 = v58;
                      __int16 v72 = 2048;
                      uint64_t v73 = v59;
                      __int16 v74 = 2048;
                      uint64_t v75 = v62;
                      _os_log_impl(&dword_2446BD000, v54, OS_LOG_TYPE_DEFAULT, "MTRAsyncWorkQueue<%@> partially merged work item [%llu] into %llu", buf, 0x20u);
                    }

                    if (sub_244CC4E58(2u))
                    {
                      objc_msgSend_uniqueID(v22, v63, v64);
                      objc_msgSend_uniqueID(v13, v65, v66);
                      sub_244CC4DE0(0, 2);
                    }
LABEL_30:

                    goto LABEL_31;
                }
              }
            }
LABEL_31:
            sub_244C9B2E4((os_unfair_lock *)a1, v13, (void **)a2);
          }
          else
          {
            int v51 = sub_244CC8484(0, "NotSpecified");
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v71 = 0;
              _os_log_impl(&dword_2446BD000, v51, OS_LOG_TYPE_ERROR, "MTRAsyncWorkQueue<%@> context has been lost, dropping queued work items", buf, 0xCu);
            }

            if (sub_244CC4E58(1u))
            {
              uint64_t v67 = 0;
              sub_244CC4DE0(0, 1);
            }
            objc_msgSend_removeAllObjects(*(void **)(a1 + 24), v52, v53, v67);
          }
        }
      }
    }
  }
}

void sub_244C9AD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9AFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  os_unfair_lock_unlock(v20);
  _Unwind_Resume(a1);
}

void sub_244C9B038(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 24), v8, v9);

        if (v10 == v7) {
          break;
        }
        if ((unint64_t)++v9 >= *(void *)(a1 + 40)) {
          goto LABEL_19;
        }
      }
      if (a4)
      {
        uint64_t v11 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(a3 + 8);
          *(_DWORD *)buf = 138412546;
          uint64_t v31 = v14;
          __int16 v32 = 2048;
          uint64_t v33 = objc_msgSend_uniqueID(v7, v12, v13);
          _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "MTRAsyncWorkQueue<%@> retry needed for work item [%llu]", buf, 0x16u);
        }

        if (sub_244CC4E58(2u))
        {
          objc_msgSend_uniqueID(v7, v15, v16);
          sub_244CC4DE0(0, 2);
        }
        sub_244C9B2E4(a1, v7, a3);
      }
      else
      {
        sub_244C9A28C(v7);
        objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 24), v17, v9);
        uint64_t v18 = sub_244CC8484(0, "NotSpecified");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(a3 + 8);
          uint64_t v22 = objc_msgSend_count(*(void **)(a1 + 24), v19, v20);
          *(_DWORD *)buf = 138412802;
          uint64_t v31 = v21;
          __int16 v32 = 2048;
          uint64_t v33 = v22;
          __int16 v34 = 2048;
          uint64_t v35 = objc_msgSend_uniqueID(v7, v23, v24);
          _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_DEFAULT, "MTRAsyncWorkQueue<%@, items count: %lu> completed work item [%llu]", buf, 0x20u);
        }

        if (sub_244CC4E58(2u))
        {
          objc_msgSend_count(*(void **)(a1 + 24), v25, v26);
          objc_msgSend_uniqueID(v7, v27, v28);
          sub_244CC4DE0(0, 2);
        }
        uint64_t v29 = *(void *)(a1 + 32);
        if (v29)
        {
          *(void *)(a1 + 32) = v29 - 1;
          sub_244C9A998(a1, a3);
        }
      }
    }
  }
LABEL_19:
}

void sub_244C9B2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9B2E4(os_unfair_lock *a1, void *a2, void **a3)
{
  id v5 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner(a1 + 2);
    objc_initWeak(&location, a1);
    unint64_t v6 = *a3;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = sub_244C9B3C0;
    v7[3] = &unk_26519B6E0;
    objc_copyWeak(&v9, &location);
    uint64_t v8 = v5;
    sub_244C99F3C(v8, v6, v7);

    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
}

uint64_t sub_244C9B3C0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (os_unfair_lock *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    sub_244C9B718((uint64_t)v8, WeakRetained);
    os_unfair_lock_lock(WeakRetained + 2);
    id v5 = *(void **)(a1 + 32);
    if (v5 && v5[2] == 1)
    {
      uint64_t v6 = 0;
    }
    else
    {
      sub_244C9B038((uint64_t)WeakRetained, v5, (uint64_t)v8, a2 == 1);
      uint64_t v6 = 1;
    }
    os_unfair_lock_unlock(WeakRetained + 2);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_244C9B478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
  os_unfair_lock_unlock(v11);

  _Unwind_Resume(a1);
}

void sub_244C9B638(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_244C9B6C4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_244C9B718(uint64_t a1, os_unfair_lock *a2)
{
  unint64_t v3 = a2 + 2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  BOOL v4 = a2;
  os_unfair_lock_assert_not_owner(v3);
  id WeakRetained = objc_loadWeakRetained(v4 + 2);

  uint64_t v6 = *(void **)a1;
  *(void *)a1 = WeakRetained;

  uint64_t v9 = objc_msgSend_description(*(void **)a1, v7, v8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;

  return a1;
}

void sub_244C9B790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9BA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_244C9BAE0(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    v56.receiver = a1;
    v56.super_class = (Class)MTRServerEndpoint;
    a1 = objc_msgSendSuper2(&v56, sel_init);
    if (a1)
    {
      uint64_t v15 = objc_msgSend_copy(v9, v13, v14);
      uint64_t v16 = (void *)a1[10];
      a1[10] = v15;

      uint64_t v19 = objc_msgSend_copy(v10, v17, v18);
      uint64_t v20 = (void *)a1[11];
      a1[11] = v19;

      id v21 = objc_alloc_init(MEMORY[0x263EFF9C0]);
      uint64_t v22 = (void *)a1[1];
      a1[1] = v21;

      id v23 = objc_alloc_init(MEMORY[0x263EFF980]);
      uint64_t v24 = (void *)a1[2];
      a1[2] = v23;

      uint64_t v27 = objc_msgSend_set(MEMORY[0x263EFFA08], v25, v26);
      uint64_t v28 = (void *)a1[12];
      a1[12] = v27;

      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v29 = v11;
      uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v52, v58, 16);
      if (v33)
      {
        uint64_t v34 = *(void *)v53;
        do
        {
          uint64_t v35 = 0;
          do
          {
            if (*(void *)v53 != v34) {
              objc_enumerationMutation(v29);
            }
            uint64_t v36 = objc_msgSend_copy(*(void **)(*((void *)&v52 + 1) + 8 * v35), v31, v32);
            objc_msgSend_addAccessGrant_(a1, v37, (uint64_t)v36);

            ++v35;
          }
          while (v33 != v35);
          uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v31, (uint64_t)&v52, v58, 16);
        }
        while (v33);
      }

      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v38 = v12;
      uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v48, v57, 16);
      if (v42)
      {
        uint64_t v43 = *(void *)v49;
        do
        {
          uint64_t v44 = 0;
          do
          {
            if (*(void *)v49 != v43) {
              objc_enumerationMutation(v38);
            }
            uint64_t v45 = objc_msgSend_copy(*(void **)(*((void *)&v48 + 1) + 8 * v44), v40, v41, (void)v48);
            objc_msgSend_addServerCluster_(a1, v46, (uint64_t)v45);

            ++v44;
          }
          while (v42 != v44);
          uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v40, (uint64_t)&v48, v57, 16);
        }
        while (v42);
      }
    }
  }

  return a1;
}

void sub_244C9BD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9BE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9BE78(uint64_t a1)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      id v5 = objc_msgSend_copy(*(void **)(a1 + 8), v2, v3);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      id v8[2] = sub_244C9BF58;
      v8[3] = &unk_265193DC8;
      v8[4] = a1;
      id v9 = v5;
      id v6 = v5;
      objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(WeakRetained, v7, (uint64_t)v8, 0);
    }
  }
}

void sub_244C9BF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_244C9BF58(uint64_t a1)
{
}

void sub_244C9BFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C9C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C9C38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9C5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244C9C604(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (a1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v4 = *(id *)(a1 + 16);
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v33, v40, 16);
    if (v7)
    {
      uint64_t v8 = *(void *)v34;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v34 != v8) {
            objc_enumerationMutation(v4);
          }
          if ((objc_msgSend_associateWithController_(*(void **)(*((void *)&v33 + 1) + 8 * i), v6, (uint64_t)v3) & 1) == 0)
          {

            goto LABEL_20;
          }
        }
        uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v33, v40, 16);
        if (v7) {
          continue;
        }
        break;
      }
    }

    uint64_t v12 = objc_msgSend_copy(*(void **)(a1 + 8), v10, v11);
    uint64_t v13 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v12;

    unint64_t v16 = objc_msgSend_count(*(void **)(a1 + 16), v14, v15);
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v17 = *(id *)(a1 + 16);
    uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v29, v39, 16);
    if (v21)
    {
      uint64_t v22 = *(void *)v30;
      while (2)
      {
        for (uint64_t j = 0; j != v21; ++j)
        {
          if (*(void *)v30 != v22) {
            objc_enumerationMutation(v17);
          }
          uint64_t v24 = objc_msgSend_clusterID(*(void **)(*((void *)&v29 + 1) + 8 * j), v19, v20);
          char isEqual = objc_msgSend_isEqual_(v24, v25, (uint64_t)&unk_26F9CD7C8);

          if (isEqual)
          {

            goto LABEL_22;
          }
        }
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v19, (uint64_t)&v29, v39, 16);
        if (v21) {
          continue;
        }
        break;
      }
    }

    ++v16;
LABEL_22:
    if (v16 < 0xFF) {
      operator new[]();
    }
    uint64_t v27 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v38 = v16;
      _os_log_impl(&dword_2446BD000, v27, OS_LOG_TYPE_ERROR, "Unable to create endpoint with %llu clusters; it's too many",
        buf,
        0xCu);
    }

    if (sub_244CC4E58(1u))
    {
      sub_244CC4DE0(0, 1);
      a1 = 0;
    }
    else
    {
LABEL_20:
      a1 = 0;
    }
  }

  return a1;
}

void sub_244C9CBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9CEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9D028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9D1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9D380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void MTRSetLogCallback(MTRLogType logTypeThreshold, MTRLogCallback callback)
{
  id v8 = callback;
  +[MTRDeviceControllerFactory initialize]_0();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_268EBE9C0);
  if (v8)
  {
    sub_244CC4DD0((unint64_t)sub_244C9D658);
    if (logTypeThreshold <= MTRLogTypeError) {
      MTRLogType v3 = MTRLogTypeError;
    }
    else {
      MTRLogType v3 = logTypeThreshold;
    }
    if ((unint64_t)v3 >= MTRLogTypeDetail) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = v3;
    }
    sub_244CC4E48(v4);
    uint64_t v5 = MEMORY[0x2456969D0](v8);
    id v6 = (void *)qword_268EBE9C8;
    qword_268EBE9C8 = v5;
  }
  else
  {
    uint64_t v7 = (void *)qword_268EBE9C8;
    qword_268EBE9C8 = 0;

    sub_244CC4E48(0);
    sub_244CC4DD0(0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_268EBE9C0);
}

void sub_244C9D62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_244C9D658(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_268EBE9C0);
  unint64_t v16 = (void (**)(id, uint64_t, void *, void *))MEMORY[0x2456969D0](qword_268EBE9C8);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_268EBE9C0);
  if (v16)
  {
    id v8 = [NSString alloc];
    id v10 = objc_msgSend_stringWithUTF8String_(NSString, v9, a3);
    uint64_t v12 = objc_msgSend_initWithFormat_arguments_(v8, v11, (uint64_t)v10, a4);

    uint64_t v14 = objc_msgSend_stringWithUTF8String_(NSString, v13, a1);
    if (a2 >= 3) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = a2;
    }
    v16[2](v16, v15, v14, v12);
  }
}

void sub_244C9D75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_244C9D794(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend_localTimeZone(MEMORY[0x263EFFA18], a2, a3);
  if (v5)
  {
    id v6 = objc_msgSend_arrayWithCapacity_(MEMORY[0x263EFF980], v4, a1);
    objc_msgSend_daylightSavingTimeOffset(v5, v7, v8);
    double v10 = v9;
    uint64_t v13 = objc_msgSend_nextDaylightSavingTimeTransition(v5, v11, v12);
    uint64_t v16 = v13;
    if (a1)
    {
      id v17 = (void *)v13;
      uint64_t v18 = &unk_26F9CD7E0;
      while (1)
      {
        uint64_t v19 = objc_alloc_init(MTRTimeSynchronizationClusterDSTOffsetStruct);
        uint64_t v22 = objc_msgSend_numberWithDouble_(NSNumber, v20, v21, v10);
        objc_msgSend_setOffset_(v19, v23, (uint64_t)v22);

        objc_msgSend_setValidStarting_(v19, v24, (uint64_t)v18);
        if (v17)
        {
          uint64_t v45 = 0;
          if (!sub_244B2BE50(v17, (char *)&v45, v26))
          {
            uint64_t v43 = sub_244CC8484(0, "NotSpecified");
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t v44 = 0;
              _os_log_impl(&dword_2446BD000, v43, OS_LOG_TYPE_ERROR, "Future daylight savings transition is before Matter epoch start?", v44, 2u);
            }

            if (sub_244CC4E58(1u)) {
              sub_244CC4DE0(0, 1);
            }

            uint64_t v41 = 0;
            goto LABEL_19;
          }
          uint64_t v28 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v27, v45);
          objc_msgSend_setValidUntil_(v19, v29, (uint64_t)v28);
        }
        else
        {
          objc_msgSend_setValidUntil_(v19, v25, 0);
        }
        objc_msgSend_addObject_(v6, v30, (uint64_t)v19);
        long long v33 = objc_msgSend_validUntil(v19, v31, v32);

        if (!v33)
        {

          unint64_t v38 = v18;
          uint64_t v16 = (uint64_t)v17;
          goto LABEL_18;
        }
        objc_msgSend_daylightSavingTimeOffsetForDate_(v5, v34, (uint64_t)v17);
        double v10 = v35;
        unint64_t v38 = objc_msgSend_validUntil(v19, v36, v37);

        uint64_t v16 = objc_msgSend_nextDaylightSavingTimeTransitionAfterDate_(v5, v39, (uint64_t)v17);

        id v17 = (void *)v16;
        uint64_t v18 = v38;
        if (!--a1) {
          goto LABEL_18;
        }
      }
    }
    unint64_t v38 = &unk_26F9CD7E0;
LABEL_18:
    uint64_t v41 = objc_msgSend_copy(v6, v14, v15);
    uint64_t v18 = v38;
    id v17 = (void *)v16;
LABEL_19:
  }
  else
  {
    uint64_t v40 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2446BD000, v40, OS_LOG_TYPE_ERROR, "Could not retrieve local time zone. Unable to determine DST offsets.", buf, 2u);
    }

    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0, 1);
    }
    uint64_t v41 = 0;
  }

  return v41;
}

void sub_244C9DAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_244C9DB30(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)MTRDeviceDelegateInfo;
    uint64_t v13 = (id *)objc_msgSendSuper2(&v23, sel_init);
    a1 = v13;
    if (v13)
    {
      objc_storeWeak(v13 + 2, v9);
      a1[1] = v9;
      objc_storeStrong(a1 + 3, a3);
      uint64_t v16 = objc_msgSend_copy(v11, v14, v15);
      id v17 = a1[4];
      a1[4] = (id)v16;

      uint64_t v20 = objc_msgSend_copy(v12, v18, v19);
      id v21 = a1[5];
      a1[5] = (id)v20;
    }
  }

  return a1;
}

void sub_244C9DC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_244C9DCB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    BOOL v5 = WeakRetained != 0;
    if (WeakRetained)
    {
      id v6 = *(NSObject **)(a1 + 24);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      id v8[2] = sub_244C9DD8C;
      v8[3] = &unk_265194F48;
      id v10 = v3;
      id v9 = WeakRetained;
      dispatch_async(v6, v8);
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

uint64_t sub_244C9DD8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_244C9DDA0(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 32, 1);
  }
  return result;
}

id sub_244C9DDB4(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 40, 1);
  }
  return result;
}

id *sub_244C9DDC8(id *WeakRetained)
{
  if (WeakRetained)
  {
    id WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 2);
    uint64_t v1 = vars8;
  }
  return WeakRetained;
}

uint64_t sub_244C9DDF8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_244C9DF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9E02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)MTRDevice;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_244C9E1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9E2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9E420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9E598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9EA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_unfair_lock_t lock, void *a12, void *a13, void *a14)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_244C9ED74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  os_unfair_lock_unlock(v19);
  _Unwind_Resume(a1);
}

void sub_244C9EDD4(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  BOOL v5 = v3;
  if (v3 && (id WeakRetained = objc_loadWeakRetained((id *)v3 + 2)) != 0)
  {
    uint64_t v7 = WeakRetained;
    if (WeakRetained == *(id *)(a1 + 48))
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v5);
      uint64_t v8 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        uint64_t v15 = v9;
        __int16 v16 = 2112;
        id v17 = v5;
        __int16 v18 = 2048;
        uint64_t v19 = v10;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "%@ removing delegate info %@ for %p", buf, 0x20u);
      }

      if (sub_244CC4E58(2u)) {
LABEL_7:
      }
        sub_244CC4DE0(0, 2);
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v5);
    id v11 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      if (v5) {
        uint64_t v13 = (void *)v5[1];
      }
      else {
        uint64_t v13 = 0;
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2048;
      id v17 = v13;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "%@ removing delegate info for nil delegate %p", buf, 0x16u);
    }

    uint64_t v7 = 0;
    if (sub_244CC4E58(2u)) {
      goto LABEL_7;
    }
  }
}

void sub_244C9EFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9F060(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C9F3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9F51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_244C9F540(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_244C9DCB0(a2, *(void **)(a1 + 32));
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

void sub_244C9F5E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_244C9F734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9F88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9FA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9FB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244C9FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_244CA00C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA037C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_244CA03F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  LODWORD(v3) = 47;
  *((void *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice.mm";
  int v4 = 455;
  uint64_t v2 = sub_244B26908((uint64_t)MTRError, &v3);
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);
}

void sub_244CA0468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244CA0478(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_244CA0490(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (!v8)
  {
    if (objc_msgSend_count(v5, v6, v7) != 1)
    {
      uint64_t v9 = 0;
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], v10, @"MTRErrorDomain", 13, 0);
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
    id v11 = *(objc_class **)(a1 + 40);
    if (v11)
    {
      id v12 = [v11 alloc];
      uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v5, v13, 0);
      id v16 = 0;
      uint64_t v9 = objc_msgSend_initWithResponseValue_error_(v12, v15, (uint64_t)v14, &v16);
      id v8 = v16;

      goto LABEL_7;
    }
    id v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_7:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_244CA05B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA07D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  LODWORD(v3) = 3;
  *((void *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice.mm";
  int v4 = 501;
  uint64_t v2 = sub_244B26908((uint64_t)MTRError, &v3);
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);
}

void sub_244CA0848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0A4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  LODWORD(v3) = 3;
  *((void *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice.mm";
  int v4 = 512;
  uint64_t v2 = sub_244B26908((uint64_t)MTRError, &v3);
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);
}

void sub_244CA0AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0CC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  LODWORD(v3) = 3;
  *((void *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDevice.mm";
  int v4 = 523;
  uint64_t v2 = sub_244B26908((uint64_t)MTRError, &v3);
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);
}

void sub_244CA0D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA0FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA1140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_244CA12A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_244CA12D8(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned char *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = (unsigned char *)(result + 8);
  if (*(unsigned char *)(result + 8))
  {
    BOOL result = sub_244CA1440(result, a3);
    if (result)
    {
      if (*(unsigned char *)(v6 + 24)) {
        return result;
      }
      goto LABEL_12;
    }
    uint64_t v9 = *(void *)(v6 + 32);
    uint64_t v10 = sub_244CA14BC(v7);
    int v11 = *((_DWORD *)v10 + 2);
    uint64_t v20 = *(void *)v10;
    int v21 = v11;
    __int16 v22 = 0;
    char v23 = 0;
    char v24 = 0;
    char v17 = *(unsigned char *)(v6 + 24);
    if (*(unsigned char *)(v6 + 25)) {
      char v19 = *(unsigned char *)(v6 + 26);
    }
    BOOL result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, char *))(*(void *)v9 + 16))(v9, a2, &v20, &v17);
  }
  if (*((unsigned __int8 *)a3 + 14) >= 2u)
  {
    LODWORD(v15) = 3;
    *((void *)&v15 + 1) = "src/app/ChunkedWriteCallback.cpp";
    int v16 = 49;
    BOOL result = sub_24479B818((uint64_t)&v20, &v15);
    *a4 = v20;
    int v12 = BYTE1(v20);
    a4[1] = BYTE1(v20);
    if (v12) {
      a4[2] = BYTE2(v20);
    }
  }
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v13 = *(void *)a3;
  *(_DWORD *)(v6 + 20) = *((_DWORD *)a3 + 2);
  *(void *)(v6 + 12) = v13;
LABEL_12:
  *(unsigned char *)(v6 + 24) = *a4;
  int v14 = a4[1];
  *(unsigned char *)(v6 + 25) = v14;
  if (v14) {
    *(unsigned char *)(v6 + 26) = a4[2];
  }
  return result;
}

BOOL sub_244CA1440(uint64_t a1, unsigned __int16 *a2)
{
  if (*((unsigned __int8 *)a2 + 14) >= 2u
    && (v3 = *(unsigned __int8 *)(a1 + 8), uint64_t v2 = (unsigned char *)(a1 + 8), v3)
    && (id v5 = sub_244CA14BC(v2), *(unsigned __int16 *)v5 == *a2)
    && *((_DWORD *)v5 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)v5 + 2) == *((_DWORD *)a2 + 2))
  {
    return *((unsigned char *)a2 + 14) == 4;
  }
  else
  {
    return 0;
  }
}

unsigned char *sub_244CA14BC(unsigned char *a1)
{
  if (!*a1) {
    sub_244E21330();
  }
  return a1 + 4;
}

uint64_t sub_244CA14E0(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 24))(v3, a2, &v5);
}

uint64_t sub_244CA1538(uint64_t a1, uint64_t a2)
{
  int v5 = *(unsigned __int8 *)(a1 + 8);
  int v4 = (unsigned char *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = sub_244CA14BC(v4);
    int v8 = *((_DWORD *)v7 + 2);
    uint64_t v13 = *(void *)v7;
    int v14 = v8;
    __int16 v15 = 0;
    char v16 = 0;
    char v17 = 0;
    char v10 = *(unsigned char *)(a1 + 24);
    if (*(unsigned char *)(a1 + 25)) {
      char v12 = *(unsigned char *)(a1 + 26);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *, char *))(*(void *)v6 + 16))(v6, a2, &v13, &v10);
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 24) = 0;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), a2);
}

void *sub_244CA161C(void *result)
{
  *BOOL result = &unk_26F952B18;
  return result;
}

void sub_244CA163C(void *a1)
{
  *a1 = &unk_26F952B18;
  JUMPOUT(0x245695FA0);
}

void sub_244CA166C(uint64_t a1@<X0>, unsigned __int8 *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  LOBYTE(v21) = 0;
  if (*(unsigned char *)(a1 + 696) != 1 || *((_WORD *)a2 + 2) != 0 || *((_WORD *)a2 + 3) != 1 || *a2 != 1)
  {
    int v11 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_INFO, "CommandResponseSender: Unexpected message type %d", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    if (*(unsigned char *)(a1 + 696) == 2)
    {
      sub_244DD5B5C(*(void *)(a1 + 688), 0, (uint64_t)buf);
      *(_DWORD *)a4 = 42;
      *(void *)(a4 + 8) = "src/app/CommandResponseSender.cpp";
      int v13 = 58;
LABEL_17:
      *(_DWORD *)(a4 + 16) = v13;
      return;
    }
    __int16 v21 = 257;
    uint64_t v16 = 0x3A0000003ALL;
    int v14 = 42;
    __int16 v15 = "src/app/CommandResponseSender.cpp";
    goto LABEL_25;
  }
  *(_OWORD *)buf = xmmword_26519B778;
  uint64_t v23 = 35;
  sub_244DD5D28(a3, (uint64_t)buf, &v18);
  int v14 = v18;
  if (v18)
  {
    int v4 = HIDWORD(v18);
    __int16 v15 = v19;
    uint64_t v16 = v20;
LABEL_23:
    LOBYTE(v21) = 1;
    char v17 = 0x80;
LABEL_24:
    HIBYTE(v21) = v17;
LABEL_25:
    sub_244CA1A1C(&v21);
    sub_244DD5B5C(*(void *)(a1 + 688), 0, (uint64_t)buf);
    goto LABEL_26;
  }
  int v14 = *(_DWORD *)buf;
  if (*(_DWORD *)buf)
  {
    uint64_t v16 = v23;
    __int16 v15 = *(const char **)&buf[8];
    int v4 = *(_DWORD *)&buf[4];
    goto LABEL_23;
  }
  sub_244CA18F8(a1, &v18);
  int v14 = v18;
  int v4 = HIDWORD(v18);
  __int16 v15 = v19;
  uint64_t v16 = v20;
  if (v18)
  {
    char v17 = 1;
    LOBYTE(v21) = 1;
    goto LABEL_24;
  }
  if (*(void *)(a1 + 24))
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/CommandResponseSender.cpp";
    int v13 = 54;
    goto LABEL_17;
  }
  int v14 = 0;
LABEL_26:
  sub_244CA1D3C(a1, 2);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1);
  *(_DWORD *)a4 = v14;
  *(_DWORD *)(a4 + 4) = v4;
  *(void *)(a4 + 8) = v15;
  *(void *)(a4 + 16) = v16;
}

void sub_244CA18F8(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (void *)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    sub_244CC9214((void **)(a1 + 24), v9);
    __int16 v8 = 0;
    if (*v4 || *(unsigned char *)(a1 + 697))
    {
      __int16 v8 = 1;
      uint64_t v5 = sub_244CA1E70(a1 + 672);
      sub_244D64578(v5, 2000);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v6 = sub_244CA1E70(a1 + 672);
    sub_244D645BC(v6, 0x10000u, 9, (uint64_t *)v9, &v8, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/app/CommandResponseSender.cpp";
      *((_DWORD *)a2 + 4) = 163;
    }
    if (v9[0]) {
      sub_244CC8A0C(v9[0]);
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 697))
    {
      sub_244DD5B5C(*(void *)(a1 + 688), 0, (uint64_t)v9);
      *(unsigned char *)(a1 + 697) = 0;
      *(_DWORD *)a2 = 0;
      a2[1] = "src/app/CommandResponseSender.cpp";
      int v7 = 149;
    }
    else
    {
      *(_DWORD *)a2 = 3;
      a2[1] = "src/app/CommandResponseSender.cpp";
      int v7 = 143;
    }
    *((_DWORD *)a2 + 4) = v7;
  }
}

unsigned char *sub_244CA1A1C(unsigned char *a1)
{
  if (!*a1) {
    sub_244E213F8();
  }
  return a1 + 1;
}

uint64_t sub_244CA1A40(uint64_t a1)
{
  sub_244CA1D3C(a1, 2);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 16);

  return v2();
}

uint64_t sub_244CA1AA0(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    unint64_t v3 = *(char *)(a1 + 696);
    if (v3 > 3) {
      int v4 = "N/A";
    }
    else {
      int v4 = (&off_26519B790)[v3];
    }
    *(_DWORD *)buf = 68157954;
    int v7 = 10;
    __int16 v8 = 2080;
    uint64_t v9 = v4;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_INFO, "CommandResponseSender: Timed out waiting for response from requester mState=[%10.10s]", buf, 0x12u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  sub_244CA1D3C(a1, 2);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1);
}

const char *sub_244CA1BFC(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 696);
  if (v1 > 3) {
    return "N/A";
  }
  else {
    return (&off_26519B790)[v1];
  }
}

uint64_t sub_244CA1C24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 696)) {
    sub_244E2149C();
  }
  memset(v5, 0, sizeof(v5));
  sub_244CA18F8(a1, v5);
  if (LODWORD(v5[0]))
  {
    uint64_t v2 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "Failed to send InvokeResponseMessage", v4, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xDu, 1);
    }
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 24) && !*(unsigned char *)(a1 + 697))
  {
LABEL_7:
    sub_244CA1D3C(a1, 2);
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1);
  }
  sub_244CA1D3C(a1, 1);
  uint64_t result = sub_244CA1E70(a1 + 672);
  *(void *)(result + 40) = a1;
  return result;
}

uint64_t sub_244CA1D3C(uint64_t result, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(result + 696) != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)(result + 696) = a2;
    unint64_t v3 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      unint64_t v4 = *(char *)(v2 + 696);
      if (v4 > 3) {
        uint64_t v5 = "N/A";
      }
      else {
        uint64_t v5 = (&off_26519B790)[v4];
      }
      *(_DWORD *)buf = 68157954;
      int v7 = 10;
      __int16 v8 = 2080;
      uint64_t v9 = v5;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "Command response sender moving to [%10.10s]", buf, 0x12u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      return sub_244CC4DE0(0xDu, 3);
    }
  }
  return result;
}

uint64_t sub_244CA1E70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (!result) {
    sub_244E2153C();
  }
  return result;
}

uint64_t sub_244CA1E90(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 696) == 3)
  {
    sub_244CA1D3C(a1, 2);
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 16);
    return v2();
  }
  else
  {
    return sub_244CA1C24(a1);
  }
}

uint64_t sub_244CA1F20(uint64_t a1)
{
  return sub_244CA1E90(a1 - 8);
}

uint64_t sub_244CA1F28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_244CA1F58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_244CA1F88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 24))();
  }
  else {
    return 1;
  }
}

uint64_t sub_244CA1FBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 24))();
  }
  else {
    return 1;
  }
}

void *sub_244CA1FF0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  if (!a2) {
    sub_244E215DC();
  }
  if (*(unsigned char *)(a1 + 696)) {
    sub_244E216E4();
  }
  uint64_t v8 = a1 + 672;
  sub_2447EA4BC(a1 + 672);
  *(void *)(a1 + 688) = a2;
  *(void *)(a2 + 40) = v8;
  uint64_t v9 = sub_244CA1E70(a1 + 672);
  *(_WORD *)(v9 + 8) |= 0x40u;
  sub_244DD5804(v11, a1 + 48);
  if (sub_244DD2974(a1 + 48, a1 + 16, a3, a4))
  {
    if (*(unsigned char *)(a1 + 696)) {
      sub_244E21644();
    }
    sub_244DD5B5C(*(void *)(a1 + 688), 0, (uint64_t)v12);
    sub_244CA1D3C(a1, 3);
  }
  sub_244DD57B0((uint64_t)v11);
  return sub_24479DFF4(v11);
}

uint64_t sub_244CA20D0(uint64_t a1)
{
  if (*(void *)(a1 + 688) && (uint64_t v1 = a1 + 672, *(unsigned char *)(sub_244CA1E70(a1 + 672) + 88)))
  {
    uint64_t v2 = sub_244CA1E70(v1);
    sub_24479B4A8(v2, &v6);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
    (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    if (v3) {
      return 63902;
    }
    else {
      return 1194;
    }
  }
  else
  {
    uint64_t v5 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Session not available. Unable to infer session-specific buffer capacities.", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xDu, 1);
    }
    return 1194;
  }
}

uint64_t sub_244CA21F4(uint64_t a1)
{
  return sub_244CA20D0(a1 - 16);
}

void *sub_244CA21FC(void *a1)
{
  *a1 = &unk_26F952B68;
  a1[1] = &unk_26F952C00;
  a1[2] = &unk_26F952C38;
  a1[84] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 84));
  sub_244DD2644(a1 + 6);
  uint64_t v2 = (_WORD *)a1[3];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[3] = 0;
  return a1;
}

void sub_244CA22B8(void *a1)
{
  *a1 = &unk_26F952B68;
  a1[1] = &unk_26F952C00;
  a1[2] = &unk_26F952C38;
  a1[84] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 84));
  sub_244DD2644(a1 + 6);
  uint64_t v2 = (_WORD *)a1[3];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[3] = 0;

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CA2394(uint64_t a1)
{
  return *(void *)(a1 + 688);
}

uint64_t sub_244CA239C(uint64_t a1)
{
  if (!*(void *)(a1 + 688)) {
    sub_244E217F0();
  }
  uint64_t v1 = sub_244CA1E70(a1 + 672);
  sub_24479B4A8(v1, &v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
}

uint64_t sub_244CA2434(uint64_t a1)
{
  if (!*(void *)(a1 + 688)) {
    sub_244E21890();
  }
  uint64_t v1 = sub_244CA1E70(a1 + 672);
  sub_24479B4A8(v1, &v4);
  uint64_t v2 = v4[24];
  (*(void (**)(unsigned __int8 *))(*(void *)v4 + 32))(v4);
  return v2;
}

uint64_t sub_244CA24A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(void *)(a1 + 688)) {
    sub_244E21930();
  }
  uint64_t v3 = sub_244CA1E70(a1 + 672);
  sub_24479B4A8(v3, &v6);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6) == 3)
  {
    *(_WORD *)(a2 + 2) = *(_WORD *)(sub_244D87AD4(v6) + 44);
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  *(unsigned char *)a2 = v4;
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
}

void sub_244CA2560(uint64_t a1)
{
  if (*(void *)(a1 + 688))
  {
    uint64_t v1 = sub_244CA1E70(a1 + 672);
    sub_244D67B88(v1 + 8, (uint64_t)v2);
  }
}

void *sub_244CA2598(void *result, uint64_t *a2)
{
  if (*((unsigned char *)result + 696)) {
    sub_244E219D0();
  }
  if (result[3])
  {
    uint64_t v2 = (void *)result[3];
    return sub_244CC8B70(v2, a2);
  }
  else
  {
    result[3] = *a2;
    *a2 = 0;
  }
  return result;
}

uint64_t sub_244CA25E8(uint64_t result)
{
  *(unsigned char *)(result + 697) = 1;
  return result;
}

void sub_244CA25F4(void *a1)
{
  *(a1 - 1) = &unk_26F952B68;
  *a1 = &unk_26F952C00;
  a1[1] = &unk_26F952C38;
  a1[83] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 83));
  sub_244DD2644(a1 + 5);
  uint64_t v2 = (_WORD *)a1[2];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[2] = 0;
}

void sub_244CA26AC(void *a1)
{
  *(a1 - 1) = &unk_26F952B68;
  *a1 = &unk_26F952C00;
  a1[1] = &unk_26F952C38;
  a1[83] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 83));
  sub_244DD2644(a1 + 5);
  uint64_t v2 = (_WORD *)a1[2];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[2] = 0;

  JUMPOUT(0x245695FA0);
}

void sub_244CA2788(void *a1)
{
  *(a1 - 2) = &unk_26F952B68;
  *(a1 - 1) = &unk_26F952C00;
  *a1 = &unk_26F952C38;
  a1[82] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 82));
  sub_244DD2644(a1 + 4);
  uint64_t v2 = (_WORD *)a1[1];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[1] = 0;
}

void sub_244CA2840(void *a1)
{
  *(a1 - 2) = &unk_26F952B68;
  *(a1 - 1) = &unk_26F952C00;
  *a1 = &unk_26F952C38;
  a1[82] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 82));
  sub_244DD2644(a1 + 4);
  uint64_t v2 = (_WORD *)a1[1];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[1] = 0;

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CA291C(uint64_t a1)
{
  return *(void *)(a1 + 672);
}

uint64_t sub_244CA2924(uint64_t a1)
{
  return sub_244CA239C(a1 - 16);
}

uint64_t sub_244CA292C(uint64_t a1)
{
  return sub_244CA2434(a1 - 16);
}

uint64_t sub_244CA2934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244CA24A4(a1 - 16, a2);
}

void sub_244CA293C(uint64_t a1)
{
}

void *sub_244CA2944(uint64_t a1, uint64_t *a2)
{
  return sub_244CA2598((void *)(a1 - 16), a2);
}

uint64_t sub_244CA294C(uint64_t result)
{
  *(unsigned char *)(result + 681) = 1;
  return result;
}

void sub_244CA296C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_244CA298C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    if (a3[1] < 0x10000uLL) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 24))(result, a2, *a3, (unsigned __int16)a3[1]);
    }
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/app/DefaultAttributePersistenceProvider.cpp";
    int v5 = 35;
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/app/DefaultAttributePersistenceProvider.cpp";
    int v5 = 28;
  }
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

uint64_t sub_244CA2A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (!result)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/app/DefaultAttributePersistenceProvider.cpp";
    int v11 = 42;
    goto LABEL_7;
  }
  __int16 v7 = -1;
  uint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  if (v9 < 0xFFFF) {
    __int16 v7 = v9;
  }
  unsigned __int16 v12 = v7;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)result + 16))(result, a2, v8, &v12);
  if (!*(_DWORD *)a4)
  {
    uint64_t result = sub_2446C1548((uint64_t)a3, v12);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/DefaultAttributePersistenceProvider.cpp";
    int v11 = 47;
LABEL_7:
    *(_DWORD *)(a4 + 16) = v11;
  }
  return result;
}

uint64_t sub_244CA2ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = sub_244CA2A08(a1, a2, a5, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    unint64_t v11 = a5[1];
    uint64_t result = sub_244CB2C20(a3);
    if (result)
    {
      if (!v11 || (uint64_t result = sub_244CB2C40((unsigned __int8 *)*a5), v11 - 1 < result))
      {
        int v12 = 60;
LABEL_10:
        int v13 = 3;
LABEL_14:
        *(_DWORD *)a6 = v13;
        a6[1] = "src/app/DefaultAttributePersistenceProvider.cpp";
        *((_DWORD *)a6 + 4) = v12;
        return result;
      }
    }
    else
    {
      uint64_t result = sub_244CB2C30(a3);
      if (result)
      {
        if (v11 < 2 || (uint64_t result = sub_244CB2C50((unsigned __int16 *)*a5), v11 - 2 < result))
        {
          int v12 = 67;
          goto LABEL_10;
        }
      }
      else if (v11 != a4)
      {
        int v12 = 72;
        int v13 = 47;
        goto LABEL_14;
      }
    }
    int v13 = 0;
    int v12 = 74;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_244CA2BB0@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_244CA2E90("g/a/%x/%x/%x", (uint64_t)v8, *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2));
  return sub_244CA298C(a1, (uint64_t)v8, a3, a4);
}

uint64_t sub_244CA2C48@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  sub_244CA2E90("g/a/%x/%x/%x", (uint64_t)v10, *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2));
  return sub_244CA2ACC(a1, (uint64_t)v10, *(unsigned __int8 *)(a3 + 14), *(unsigned __int16 *)(a3 + 12), a4, a5);
}

uint64_t sub_244CA2CEC@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_244CA2E90("g/sa/%x/%x/%x", (uint64_t)v8, *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2));
  return sub_244CA298C(a1, (uint64_t)v8, a3, a4);
}

uint64_t sub_244CA2D84@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_244CA2CEC(a1 - 8, a2, a3, a4);
}

uint64_t sub_244CA2D8C@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_244CA2E90("g/sa/%x/%x/%x", (uint64_t)v8, *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2));
  return sub_244CA2A08(a1, (uint64_t)v8, a3, a4);
}

uint64_t sub_244CA2E24@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_244CA2D8C(a1 - 8, a2, a3, a4);
}

uint64_t sub_244CA2E2C()
{
  return qword_268EBE9D0;
}

uint64_t sub_244CA2E38(uint64_t result)
{
  if (result) {
    qword_268EBE9D0 = result;
  }
  return result;
}

uint64_t sub_244CA2E48()
{
  return qword_268EBE9D8;
}

uint64_t sub_244CA2E54(uint64_t result)
{
  if (result) {
    qword_268EBE9D8 = result;
  }
  return result;
}

void sub_244CA2E64()
{
}

void sub_244CA2E78()
{
}

uint64_t sub_244CA2E90@<X0>(char *__format@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  *(unsigned char *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return vsnprintf((char *)a2, 0x21uLL, __format, va);
}

uint64_t *sub_244CA2ED4()
{
  return &qword_26B0D4310;
}

uint64_t sub_244CA2EE0(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    if (*((_DWORD *)a1 + 6) == 3)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      a1[2] = a2;
      unint64_t v11 = a3 - 1;
      uint64_t v12 = a3;
      do
      {
        unint64_t v13 = v9 + 1;
        uint64_t v14 = a4 + 96 * v9;
        if (v9 >= v11) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v14 + 96;
        }
        uint64_t v16 = a5 + 16 * v9;
        char v17 = *(unsigned char *)(v16 + 12);
        sub_244CB35DC(v14, *(void *)v16, *(_DWORD *)(v16 + 8));
        *(void *)(v14 + 64) = v10;
        *(void *)(v14 + 72) = v15;
        *(unsigned char *)(v14 + 80) = v17;
        unint64_t v9 = v13;
        uint64_t v10 = v14;
        *(void *)(v14 + 16) = 0;
        *(void *)(v14 + 24) = 0;
      }
      while (v13 != v12);
      a1[4] = a6;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 32))(a6);
      a1[5] = result;
      a1[1] = a4;
      a1[3] = 1;
      a1[8] = a7;
      return result;
    }
    uint64_t v20 = sub_244CC8484(0x1Au, "EventLogging");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_ERROR, "Invalid EventManagement State", v24, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x1Au, 1);
    }
  }
  else
  {
    char v19 = sub_244CC8484(0x1Au, "EventLogging");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "Invalid aNumBuffers", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(0x1Au, 1);
    }
  }
  return result;
}

uint64_t sub_244CA30B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result = sub_244CB35DC(a1, a2, a3);
  *(void *)(a1 + 64) = a4;
  *(void *)(a1 + 72) = a5;
  *(unsigned char *)(a1 + 80) = a6;
  return result;
}

void sub_244CA30F8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v15);
  sub_244CB3988((uint64_t)v14);
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    int v11 = *(_DWORD *)(v4 + 56);
    long long v9 = *(_OWORD *)(v4 + 24);
    long long v10 = *(_OWORD *)(v4 + 40);
    long long v8 = *(_OWORD *)(v4 + 8);
    long long v12 = *(_OWORD *)(v4 + 64);
    long long v13 = *(_OWORD *)(v4 + 80);
    *(void *)(v4 + 24) = sub_244CA3358;
    sub_244CB6318((uint64_t)v15, v4, 0xFFFFFFFF, (uint64_t)buf);
    sub_244CB3A10((uint64_t)v14, a1, *(_DWORD *)(a1 + 56), (uint64_t)buf);
    sub_244CB4E58((uint64_t)v14, buf);
    long long v16 = v19;
    int v5 = *(_DWORD *)buf;
    int v17 = v20;
    if (*(_DWORD *)buf) {
      goto LABEL_5;
    }
    sub_244CB711C(v15, (uint64_t)v14, (uint64_t)buf);
    long long v16 = v19;
    int v5 = *(_DWORD *)buf;
    int v17 = v20;
    if (*(_DWORD *)buf
      || (sub_244CB6414((uint64_t)v15, (uint64_t)buf), v16 = v19, int v5 = *(_DWORD *)buf, v17 = v20, *(_DWORD *)buf))
    {
LABEL_5:
      *(_DWORD *)(v4 + 56) = v11;
      *(_OWORD *)(v4 + 24) = v9;
      *(_OWORD *)(v4 + 40) = v10;
      *(_OWORD *)(v4 + 8) = v8;
      *(_OWORD *)(v4 + 64) = v12;
      *(_OWORD *)(v4 + 80) = v13;
    }
    else
    {
      uint64_t v6 = sub_244CC8484(0x1Au, "EventLogging");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = *(unsigned __int8 *)(v4 + 80);
        *(_DWORD *)buf = 67109120;
        LODWORD(v19) = v7;
        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "Copy Event to next buffer with priority %u", buf, 8u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0x1Au, 3);
      }
      int v5 = 0;
    }
    *(_DWORD *)a2 = v5;
    *(_OWORD *)(a2 + 4) = v16;
    *(_DWORD *)(a2 + 20) = v17;
  }
  else
  {
    *(_DWORD *)a2 = 47;
    *(void *)(a2 + 8) = "src/app/EventManagement.cpp";
    *(_DWORD *)(a2 + 16) = 137;
  }
}

void sub_244CA3358(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 11;
  *(void *)(a1 + 8) = "src/app/EventManagement.h";
  *(_DWORD *)(a1 + 16) = 522;
}

void sub_244CA3378(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  unint64_t v4 = a2;
  *(_OWORD *)a4 = xmmword_26519B7B0;
  a4[2] = 169;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7;
  while (v8)
  {
    if (*(unsigned int *)(v8 + 40) < a2)
    {
      *(_DWORD *)a4 = 25;
      a4[1] = "src/app/EventManagement.cpp";
      int v11 = 181;
      goto LABEL_23;
    }
    uint64_t v8 = *(void *)(v8 + 72);
    if (!v8 || *(unsigned __int8 *)(v8 + 80) > a3) {
      break;
    }
  }
  if (!v7)
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/app/EventManagement.cpp";
    int v11 = 188;
LABEL_23:
    *((_DWORD *)a4 + 4) = v11;
    return;
  }
  if ((*(_DWORD *)(v7 + 40) - *(_DWORD *)(v7 + 56)) >= a2)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/EventManagement.cpp";
    int v11 = 191;
    goto LABEL_23;
  }
  while (1)
  {
    while (v4 > (*(_DWORD *)(v7 + 40) - *(_DWORD *)(v7 + 56)))
    {
      uint64_t v14 = v7;
      unint64_t v15 = 0;
      *(void *)(v7 + 16) = &v14;
      *(void *)(v7 + 24) = sub_244CA35A4;
      sub_244CB35F8(v7, a4);
      if (*(_DWORD *)a4)
      {
        unint64_t v9 = v15;
        if (!v15) {
          return;
        }
        uint64_t v10 = *(void *)(v7 + 72);
        if (!v10)
        {
          *(_DWORD *)a4 = 3;
          a4[1] = "src/app/EventManagement.cpp";
          int v11 = 211;
          goto LABEL_23;
        }
        if (v15 > (*(_DWORD *)(v10 + 40) - *(_DWORD *)(v10 + 56)))
        {
          *(void *)(v7 + 88) = v4;
          unint64_t v4 = v9;
          uint64_t v7 = v10;
        }
        else
        {
          sub_244CA30F8(v7, (uint64_t)&v12);
          *(_OWORD *)a4 = v12;
          a4[2] = v13;
          if (*(_DWORD *)a4) {
            return;
          }
          *(void *)(v7 + 24) = 0;
          sub_244CB35F8(v7, &v12);
          *(_OWORD *)a4 = v12;
          a4[2] = v13;
          if (*(_DWORD *)a4) {
            return;
          }
        }
      }
    }
    if (v7 == *(void *)(a1 + 8)) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 64);
    unint64_t v4 = *(void *)(v7 + 88);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/EventManagement.cpp";
    *((_DWORD *)a4 + 4) = 256;
  }
  *(void *)(v7 + 24) = 0;
  *(void *)(*(void *)(a1 + 8) + 16) = 0;
}

BOOL sub_244CA3584(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  return !v2 || *(unsigned __int8 *)(v2 + 80) > a2;
}

void sub_244CA35A4(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB4E58(a2, a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t v24 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CB4C90(a2, (_DWORD *)&v24 + 1, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB4E58(a2, a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB4C90(a2, &v24, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          int v16 = 0;
          long long v17 = xmmword_244EADF80;
          unsigned __int8 v18 = 0;
          int v19 = 0;
          __int16 v20 = 0;
          int v21 = 0;
          uint64_t v22 = 0;
          char v23 = 0;
          long long v14 = 0uLL;
          uint64_t v15 = 0;
          sub_244CB5C44(a2, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CA499C, (uint64_t)&v16, 0, (uint64_t)&v14);
          if (v14 == 33)
          {
            LODWORD(v14) = 0;
            *((void *)&v14 + 1) = "src/app/EventManagement.cpp";
            LODWORD(v15) = 826;
          }
          *(_OWORD *)a3 = v14;
          a3[2] = v15;
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB4D00(a2, v24, (uint64_t)a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB4D00(a2, SHIDWORD(v24), (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                int v6 = v18;
                uint64_t v7 = *a1;
                uint64_t v8 = *(void *)(*a1 + 72);
                if (v8 && *(unsigned __int8 *)(v8 + 80) <= v18)
                {
                  uint64_t v11 = *(unsigned int *)(a2 + 56);
                  int v13 = 849;
                  int v12 = 33;
                }
                else
                {
                  unint64_t v9 = sub_244CC8484(0x1Au, "EventLogging");
                  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
                  {
                    int v10 = *(unsigned __int8 *)(v7 + 80);
                    *(_DWORD *)buf = 67109888;
                    int v26 = v10;
                    __int16 v27 = 1024;
                    int v28 = HIDWORD(v22);
                    __int16 v29 = 1024;
                    int v30 = v22;
                    __int16 v31 = 1024;
                    int v32 = v6;
                    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Dropped 1 event from buffer with priority %u and event number  0x%08X%08X due to overflow: event priority_level: %u", buf, 0x1Au);
                  }
                  if (sub_244CC4E58(2u)) {
                    sub_244CC4DE0(0x1Au, 2);
                  }
                  uint64_t v11 = 0;
                  int v12 = 0;
                  int v13 = 844;
                }
                a1[1] = v11;
                *(_DWORD *)a3 = v12;
                a3[1] = "src/app/EventManagement.cpp";
                *((_DWORD *)a3 + 4) = v13;
              }
            }
          }
        }
      }
    }
  }
}

void *sub_244CA3858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, __n128 *a5@<X8>)
{
  sub_244CB62B8((uint64_t)v27);
  v29[1] = 0;
  v29[2] = 0;
  v29[0] = &unk_26F9536C8;
  char v30 = 0;
  char v10 = *(unsigned char *)(a3 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  long long v14 = v27;
  char v15 = v10;
  uint64_t v16 = v11;
  char v17 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v18 = 0;
  char v23 = 1;
  __int16 v24 = 0;
  uint64_t v25 = 0;
  v26[0] = 0;
  *(void *)((char *)v26 + 5) = 0;
  sub_244CC8F5C(0x200uLL, 0x26u, &v13);
  if (v13)
  {
    sub_2447945A0((uint64_t)v29, &v13, 0);
    sub_244CB6318((uint64_t)v27, (uint64_t)v29, 0xFFFFFFFF, (uint64_t)v31);
    uint64_t v20 = *(void *)(a1 + 40);
    long long v19 = *(_OWORD *)(a1 + 48);
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    a5->n128_u64[0] = 0;
    sub_244CA39BC((uint64_t *)&v14, a2, a3, a5);
    if (!a5->n128_u32[0]) {
      *a4 = v28;
    }
  }
  else
  {
    a5->n128_u32[0] = 11;
    a5->n128_u64[1] = (unint64_t)"src/app/EventManagement.cpp";
    a5[1].n128_u32[0] = 275;
  }
  if (v13) {
    sub_244CC8A0C(v13);
  }
  return sub_244CA539C(v29);
}

double sub_244CA39BC@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  if (a1[7] < (unint64_t)a1[2])
  {
    a4->n128_u32[0] = 0;
    a4->n128_u64[1] = (unint64_t)"src/app/EventManagement.cpp";
    int v5 = 292;
LABEL_12:
    a4[1].n128_u32[0] = v5;
    return v9.n128_f64[0];
  }
  if (!a3)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/app/EventManagement.cpp";
    int v5 = 295;
    goto LABEL_12;
  }
  sub_244CCCDE0((uint64_t)&v20);
  sub_244CCCDE0((uint64_t)&v22);
  sub_244CCCDE0((uint64_t)&v23);
  sub_244CCCDE0((uint64_t)&v24);
  sub_244CCCDE0((uint64_t)&v25);
  sub_244CCCDE0((uint64_t)&v26);
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  v9.n128_u64[0] = sub_244CCF9D0((uint64_t)&v20, (void *)*a1, (uint64_t)a4).n128_u64[0];
  if (!a4->n128_u32[0])
  {
    uint64_t v10 = sub_244CCCAA0((uint64_t)&v20);
    v9.n128_u64[0] = v20.n128_u64[0];
    *a4 = v20;
    a4[1].n128_u64[0] = v21;
    if (!a4->n128_u32[0])
    {
      uint64_t v11 = (__n128 *)v10;
      uint64_t v12 = sub_244CCCD30(v10);
      __n128 v9 = *v11;
      *a4 = *v11;
      a4[1].n128_u64[0] = v11[1].n128_u64[0];
      if (!a4->n128_u32[0])
      {
        __n128 v18 = 0uLL;
        unint64_t v19 = 0;
        uint64_t v13 = sub_244CCCF30(v12);
        uint64_t v14 = sub_244CCCF88(v13);
        char v15 = (__n128 *)sub_244CCC278(v14);
        sub_244CCBA3C(v15, &v18);
        v9.n128_u64[0] = v18.n128_u64[0];
        *a4 = v18;
        a4[1].n128_u64[0] = v19;
        if (!a4->n128_u32[0])
        {
          uint64_t v16 = sub_244CCC1C8((uint64_t)v11);
          sub_244CCDC48(v16);
          __n128 v9 = *v11;
          *a4 = *v11;
          a4[1].n128_u64[0] = v11[1].n128_u64[0];
          if (!a4->n128_u32[0])
          {
            if (*(unsigned char *)(a3 + 16)) {
              sub_244CCDCA0((uint64_t)v11);
            }
            else {
              sub_244CCDCF8((uint64_t)v11);
            }
            __n128 v9 = *v11;
            *a4 = *v11;
            a4[1].n128_u64[0] = v11[1].n128_u64[0];
            if (!a4->n128_u32[0])
            {
              a4->n128_u64[0] = 0;
              a4->n128_u64[1] = 0;
              a4[1].n128_u64[0] = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, *a1);
              if (!a4->n128_u32[0])
              {
                if (*(unsigned char *)(a3 + 33)) {
                  sub_244CB68B8();
                }
                a4->n128_u64[0] = 0;
                a4->n128_u64[1] = 0;
                a4[1].n128_u64[0] = 0;
                v9.n128_u64[0] = sub_244CCBA3C(v11, a4).n128_u64[0];
                if (!a4->n128_u32[0])
                {
                  a4->n128_u64[0] = 0;
                  a4->n128_u64[1] = 0;
                  a4[1].n128_u64[0] = 0;
                  v9.n128_u64[0] = sub_244CCBA3C(&v20, a4).n128_u64[0];
                  if (!a4->n128_u32[0])
                  {
                    a4->n128_u64[0] = 0;
                    a4->n128_u64[1] = 0;
                    a4[1].n128_u64[0] = 0;
                    v9.n128_f64[0] = sub_244CB6414(*a1, (uint64_t)a4);
                    if (!a4->n128_u32[0])
                    {
                      *((unsigned char *)a1 + 80) = 0;
                      a4->n128_u32[0] = 0;
                      a4->n128_u64[1] = (unint64_t)"src/app/EventManagement.cpp";
                      int v5 = 337;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v9.n128_f64[0];
}

uint64_t sub_244CA3C44(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_244CA2EE0(&qword_26B0D4310, a1, a2, a3, a4, a5, a6);
}

void sub_244CA3C68()
{
  dword_26B0D4328 = 3;
  qword_26B0D4318 = 0;
  unk_26B0D4320 = 0;
}

uint64_t sub_244CA3C80(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  do
  {
    uint64_t result = v2;
    uint64_t v2 = *(void *)(v2 + 72);
  }
  while (v2 && *(unsigned __int8 *)(v2 + 80) <= a2);
  return result;
}

void sub_244CA3CA0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 48);
  id v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v3;
  uint64_t v9 = *(void *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 4)
  {
    int v6 = *(unsigned __int8 **)(a2 + 8);
    if (!v6[80] && v6[40] == v6[24]) {
      goto LABEL_10;
    }
LABEL_13:
    sub_244CB711C(*(char **)a2, (uint64_t)v8, a3);
    return;
  }
  if (v5 != 3)
  {
    if (v5 == 0xFFFFFFFE00000001)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
      *(_DWORD *)(a3 + 16) = 381;
      return;
    }
    goto LABEL_13;
  }
  uint64_t v7 = *(unsigned __int8 **)(a2 + 8);
  if (v7[80] || v7[40] != v7[24]) {
    goto LABEL_13;
  }
LABEL_10:

  sub_244CB68CC();
}

uint64_t sub_244CA3D9C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 32) + 16))(buf);
  int v2 = *(_DWORD *)buf;
  long long v6 = *(_OWORD *)v9;
  int v7 = *(_DWORD *)&v9[16];
  if (*(_DWORD *)buf)
  {
    long long v3 = sub_244CC8484(0x1Au, "EventLogging");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v2;
      *(_OWORD *)uint64_t v9 = v6;
      *(_DWORD *)&v9[16] = v7;
      long long v4 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v9 = "VendEventNumber";
      *(_WORD *)&v9[8] = 2080;
      *(void *)&v9[10] = v4;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "%s Advance() failed with %s", buf, 0x16u);
    }
    if (sub_244CC4E58(1u))
    {
      *(_DWORD *)buf = v2;
      *(_OWORD *)uint64_t v9 = v6;
      *(_DWORD *)&v9[16] = v7;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0x1Au, 1);
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
  *(void *)(a1 + 40) = result;
  return result;
}

double sub_244CA3F34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_244D6A434("src/app/EventManagement.cpp", 416);
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/app/EventManagement.cpp";
    *(_DWORD *)(a5 + 16) = 417;
  }
  else
  {
    return sub_244CA3FDC(a1, a2, a3, a4, a5);
  }
  return result;
}

double sub_244CA3FDC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v44);
  *(_OWORD *)a5 = xmmword_26519B7C8;
  *(void *)(a5 + 16) = 425;
  unsigned int v43 = 0;
  *a4 = 0;
  char v10 = *((unsigned char *)a3 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  __int16 v29 = v44;
  char v30 = v10;
  uint64_t v31 = v11;
  char v32 = 0;
  uint64_t v33 = 0;
  char v34 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  char v39 = 1;
  __int16 v40 = 0;
  uint64_t v41 = 0;
  v42[0] = 0;
  *(void *)((char *)v42 + 5) = 0;
  (*((void (**)(_UNKNOWN **, uint64_t *))*off_268EBD1B0 + 6))(off_268EBD1B0, &v23);
  if (*(_DWORD *)a5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 4))(off_268EBD1B0) - *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v13 = v23;
    uint64_t v12 = 1;
  }
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  sub_244CB6318((uint64_t)v44, *(void *)(a1 + 8), 0xFFFFFFFF, (uint64_t)buf);
  __int16 v28 = *((_WORD *)a3 + 16);
  uint64_t v24 = *a3;
  int v25 = *((_DWORD *)a3 + 2);
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v35 = *(void *)(a1 + 56);
  uint64_t v36 = v14;
  sub_244CA3858(a1, a2, (uint64_t)&v24, &v43, (__n128 *)buf);
  *(_OWORD *)a5 = *(_OWORD *)buf;
  *(void *)(a5 + 16) = *(void *)v47;
  if (*(_DWORD *)a5
    || (sub_244CA3378(a1, v43, *((unsigned __int8 *)a3 + 32), buf),
        *(_OWORD *)a5 = *(_OWORD *)buf,
        *(void *)(a5 + 16) = *(void *)v47,
        *(_DWORD *)a5)
    || (sub_244CA39BC((uint64_t *)&v29, a2, (uint64_t)&v24, (__n128 *)buf),
        *(_OWORD *)a5 = *(_OWORD *)buf,
        *(void *)(a5 + 16) = *(void *)v47,
        *(_DWORD *)a5))
  {
    char v15 = sub_244CC8484(0x1Au, "EventLogging");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a5;
      *(void *)uint64_t v47 = *(void *)(a5 + 16);
      uint64_t v16 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Log event with error %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)buf = *(_OWORD *)a5;
      *(void *)uint64_t v47 = *(void *)(a5 + 16);
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0x1Au, 1);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) += v45;
    *a4 = *(void *)(a1 + 40);
    sub_244CA3D9C(a1);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v13;
    __n128 v18 = sub_244CC8484(0x1Au, "EventLogging");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *a4;
      unint64_t v20 = HIDWORD(*a4);
      if ((_BYTE)v26) {
        unint64_t v21 = "Epoch";
      }
      else {
        unint64_t v21 = "Sys";
      }
      *(_DWORD *)buf = 67111426;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v19;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)uint64_t v47 = v28;
      *(_WORD *)&v47[4] = 1024;
      *(_DWORD *)&v47[6] = (unsigned __int16)v24;
      __int16 v48 = 1024;
      int v49 = HIWORD(HIDWORD(v24));
      __int16 v50 = 1024;
      int v51 = WORD2(v24);
      __int16 v52 = 1024;
      int v53 = v25;
      __int16 v54 = 2080;
      long long v55 = v21;
      __int16 v56 = 1024;
      int v57 = HIDWORD(v27);
      __int16 v58 = 1024;
      int v59 = v27;
      _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_INFO, "LogEvent event number: 0x%08X%08X priority: %u, endpoint id:  0x%x cluster id: 0x%04X_%04X event id: 0x%x %s timestamp: 0x%08X%08X", buf, 0x42u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0x1Au, 3);
    }
    uint64_t v22 = sub_244DBE094();
    sub_244DCBAA8((uint64_t)v22 + 1360, (uint64_t)&v24, *(_DWORD *)(a1 + 28), (uint64_t)buf);
    double result = *(double *)buf;
    *(_OWORD *)a5 = *(_OWORD *)buf;
    *(void *)(a5 + 16) = *(void *)v47;
  }
  return result;
}

void sub_244CA4454(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_244CB3988((uint64_t)v19);
  v17[1] = a3;
  uint64_t v18 = 0;
  v17[0] = a2;
  sub_244CB3B04((uint64_t)v19, a1);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB4C90((uint64_t)v19, (_DWORD *)&v18 + 1, a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB7594(a2, 256, 21, (_DWORD *)&v18 + 1, a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244CB4E58((uint64_t)v19, (void *)a4);
      if (!*(_DWORD *)a4)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB4C90((uint64_t)v19, &v18, a4);
        if (!*(_DWORD *)a4)
        {
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244CB7594(a2, 1, 21, &v18, a4);
          if (!*(_DWORD *)a4)
          {
            sub_244CB5C44((uint64_t)v19, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CA3CA0, (uint64_t)v17, 0, (uint64_t)v13);
            int v8 = v13[0];
            int v9 = v13[1];
            char v10 = v14;
            int v11 = v15;
            int v12 = v16;
            if (v13[0] == 33)
            {
              int v8 = 0;
              char v10 = "src/app/EventManagement.cpp";
              int v11 = 518;
            }
            *(_DWORD *)a4 = v8;
            *(_DWORD *)(a4 + 4) = v9;
            *(void *)(a4 + 8) = v10;
            *(_DWORD *)(a4 + 16) = v11;
            *(_DWORD *)(a4 + 20) = v12;
            if (!v8)
            {
              *(void *)a4 = 0;
              *(void *)(a4 + 8) = 0;
              *(void *)(a4 + 16) = 0;
              sub_244CB7708((uint64_t)a2, v18, a4);
              if (!*(_DWORD *)a4)
              {
                *(void *)a4 = 0;
                *(void *)(a4 + 8) = 0;
                *(void *)(a4 + 16) = 0;
                sub_244CB7708((uint64_t)a2, SHIDWORD(v18), a4);
                if (!*(_DWORD *)a4)
                {
                  *(void *)a4 = 0;
                  *(void *)(a4 + 8) = 0;
                  *(void *)(a4 + 16) = 0;
                  sub_244CB6414((uint64_t)a2, a4);
                  if (!*(_DWORD *)a4)
                  {
                    *(_DWORD *)a4 = 0;
                    *(void *)(a4 + 8) = "src/app/EventManagement.cpp";
                    *(_DWORD *)(a4 + 16) = 524;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

double sub_244CA4620@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 56) < *(void *)(a1 + 16))
  {
    *(_DWORD *)a3 = 192;
    *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
    int v4 = 532;
LABEL_25:
    *(_DWORD *)(a3 + 16) = v4;
    return result;
  }
  int v7 = (unsigned char *)(a2 + 48);
  if (*(unsigned char *)(a2 + 48))
  {
    if (!*sub_2446F9190((unsigned char *)(a2 + 48))
      || (int v9 = *(unsigned __int8 *)(a1 + 88), v9 != *sub_2446F9190(v7)))
    {
      *(_DWORD *)a3 = 192;
      *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
      int v4 = 539;
      goto LABEL_25;
    }
  }
  uint64_t v10 = *(void *)(a1 + 72);
  if (!v10)
  {
LABEL_23:
    *(void *)a3 = 192;
    *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
    *(void *)&double result = 543;
    *(void *)(a3 + 16) = 543;
    return result;
  }
  int v11 = *(unsigned __int16 *)(a2 + 32);
  int v12 = *(_DWORD *)(a2 + 36);
  while (1)
  {
    int v13 = *(unsigned __int16 *)(v10 + 8);
    if ((v13 == 0xFFFF || v13 == v11) && (*(_DWORD *)v10 == -1 || *(_DWORD *)v10 == *(_DWORD *)(a2 + 28)))
    {
      int v16 = *(_DWORD *)(v10 + 4);
      if (v16 == -1 || v16 == v12) {
        break;
      }
    }
    uint64_t v10 = *(void *)(v10 + 16);
    if (!v10) {
      goto LABEL_23;
    }
  }
  int v24 = *(_DWORD *)(a2 + 28);
  __int16 v25 = v11;
  char v26 = 4;
  int v27 = v12;
  char v28 = 1;
  unsigned int v18 = sub_244BCAD2C();
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  uint64_t v19 = sub_244D908A4();
  sub_244D90050(v19, a1 + 88, (uint64_t)&v24, v18, &v22);
  int v20 = v22;
  if (!v22)
  {
    int v21 = 550;
    goto LABEL_31;
  }
  if (v22 == 165 || v22 == 168)
  {
    int v21 = 569;
    int v20 = 192;
LABEL_31:
    *(_DWORD *)a3 = v20;
    *(_DWORD *)(a3 + 4) = 0;
    *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
    *(_DWORD *)(a3 + 16) = v21;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  double result = *(double *)&v22;
  *(_OWORD *)a3 = v22;
  *(void *)(a3 + 16) = v23;
  return result;
}

void sub_244CA47EC(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_244CB3988((uint64_t)v24);
  uint64_t v23 = 0;
  sub_244CB3B04((uint64_t)v24, a1);
  if (!a3) {
    sub_244E21D30();
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB4C90((uint64_t)v24, (_DWORD *)&v23 + 1, a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB4E58((uint64_t)v24, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244CB4C90((uint64_t)v24, &v23, a4);
      if (!*(_DWORD *)a4)
      {
        sub_244CB5C44((uint64_t)v24, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CA499C, a3, 0, (uint64_t)&v18);
        if (*(_DWORD *)a3 == 5)
        {
          int v8 = v18;
          int v9 = v19;
          uint64_t v10 = v20;
          int v11 = v21;
          int v12 = v22;
          if (v18 == 33)
          {
            int v8 = 0;
            uint64_t v10 = "src/app/EventManagement.cpp";
            int v11 = 598;
          }
          *(_DWORD *)a4 = v8;
          *(_DWORD *)(a4 + 4) = v9;
          *(void *)(a4 + 8) = v10;
          *(_DWORD *)(a4 + 16) = v11;
          *(_DWORD *)(a4 + 20) = v12;
          if (!v8)
          {
            *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 8);
            *(void *)(a2 + 56) = *(void *)(a3 + 40);
            sub_244CA4620(a2, a3, (uint64_t)&v18);
            int v14 = v18;
            int v13 = v19;
            int v15 = v22;
            if (v18)
            {
              if (v18 == 192)
              {
                int v14 = 0;
                int v16 = 612;
                char v17 = "src/app/EventManagement.cpp";
              }
              else
              {
                char v17 = v20;
                int v16 = v21;
              }
            }
            else
            {
              int v16 = 608;
              char v17 = "src/app/EventManagement.cpp";
              int v14 = 171;
            }
            *(_DWORD *)a4 = v14;
            *(_DWORD *)(a4 + 4) = v13;
            *(void *)(a4 + 8) = v17;
            *(_DWORD *)(a4 + 16) = v16;
            *(_DWORD *)(a4 + 20) = v15;
          }
        }
        else
        {
          *(_DWORD *)a4 = 47;
          *(void *)(a4 + 8) = "src/app/EventManagement.cpp";
          *(_DWORD *)(a4 + 16) = 593;
        }
      }
    }
  }
}

void sub_244CA499C(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v8);
  sub_244CB3B04((uint64_t)v8, a1);
  uint64_t v6 = v9;
  if (!v9)
  {
    sub_244CCF15C((uint64_t)v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCEFC8((uint64_t)v7, a1, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCCEB8(v7, (_WORD *)(a2 + 32), a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCCEC8(v7, (_DWORD *)(a2 + 28), a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCBCD0(v7, (_DWORD *)(a2 + 36), a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(_DWORD *)a2 |= 1u;
    uint64_t v6 = v9;
  }
  if (v6 == 2)
  {
    LOWORD(v7[0]) = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CB3F40((uint64_t)v8, v7, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(unsigned char *)(a2 + 24) = v7[0];
    *(_DWORD *)a2 |= 4u;
    uint64_t v6 = v9;
  }
  if (v6 == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB3EFC((uint64_t)v8, (void *)(a2 + 40), (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    uint64_t v6 = v9;
  }
  if (v6 == 4)
  {
    *(void *)int v7 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CB3EFC((uint64_t)v8, v7, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(unsigned char *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = *(void *)v7;
    uint64_t v6 = v9;
  }
  if (v6 == 3)
  {
    *(void *)int v7 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CB3EFC((uint64_t)v8, v7, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    *(unsigned char *)(a2 + 8) = 1;
    *(void *)(a2 + 16) = *(void *)v7;
    uint64_t v6 = v9;
  }
  if (v6 != 0xFFFFFFFE00000001)
  {
LABEL_17:
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/EventManagement.cpp";
    *((_DWORD *)a3 + 4) = 807;
    return;
  }
  LOBYTE(v7[0]) = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB3E8C((uint64_t)v8, v7, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(unsigned char *)(a2 + 48) = 1;
    *(unsigned char *)(a2 + 49) = v7[0];
    goto LABEL_17;
  }
}

double sub_244CA4BD4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  int v19 = 0;
  long long v20 = xmmword_244EADF80;
  char v21 = 0;
  int v22 = 0;
  __int16 v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CA47EC(a1, a2, (uint64_t)&v19, (uint64_t)a3);
  if (*(_DWORD *)a3 == 171)
  {
    int v7 = *(long long **)a2;
    long long v8 = *(_OWORD *)(*(void *)a2 + 16);
    long long v15 = *(_OWORD *)*(void *)a2;
    long long v16 = v8;
    long long v9 = v7[3];
    long long v17 = v7[2];
    long long v18 = v9;
    sub_244CA4454(a1, v7, a2, (uint64_t)&v13);
    double result = *(double *)&v13;
    *(_OWORD *)a3 = v13;
    a3[2] = v14;
    if (*(_DWORD *)a3 && *(_DWORD *)a3 != 33)
    {
      uint64_t v10 = *(long long **)a2;
      long long v11 = v16;
      long long *v10 = v15;
      v10[1] = v11;
      double result = *(double *)&v17;
      long long v12 = v18;
      v10[2] = v17;
      v10[3] = v12;
    }
    else
    {
      *(void *)(a2 + 32) = *(void *)(a2 + 48);
      *(unsigned char *)(a2 + 80) = 0;
      ++*(void *)(a2 + 64);
    }
  }
  return result;
}

void sub_244CA4CC8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X8>)
{
  *(_OWORD *)a7 = xmmword_26519B7E0;
  *(void *)(a7 + 16) = 652;
  sub_244CB3988((uint64_t)v30);
  sub_244CB35A4((uint64_t)v29, 0, 0);
  v29[0] = &unk_26F952E30;
  v29[8] = 0;
  uint64_t v14 = *a4;
  uint64_t v17 = a2;
  char v18 = 3;
  uint64_t v19 = v14;
  char v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v27 = 1;
  v28[0] = *a6;
  *(_OWORD *)((char *)v28 + 13) = *(_OWORD *)((char *)a6 + 13);
  uint64_t v25 = 0;
  uint64_t v26 = a3;
  sub_244CA4E5C(a1, (uint64_t)v30, 2u, (uint64_t)v29, a7);
  int v15 = *(_DWORD *)a7;
  if (!*(_DWORD *)a7)
  {
    sub_244CB5C44((uint64_t)v30, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CA4BD4, (uint64_t)&v17, 0, a7);
    int v15 = *(_DWORD *)a7;
    if (*(_DWORD *)a7 == 33)
    {
      *(_DWORD *)a7 = 0;
      *(void *)(a7 + 8) = "src/app/EventManagement.cpp";
      *(_DWORD *)(a7 + 16) = 666;
LABEL_7:
      uint64_t v16 = v24 + 1;
      goto LABEL_8;
    }
  }
  if (v15 != 25 && v15 != 11) {
    goto LABEL_7;
  }
  uint64_t v16 = v24;
LABEL_8:
  *a4 = v16;
  *a5 += v25;
}

uint64_t sub_244CA4E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 8);
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = *(void *)(v8 + 72);
  }
  while (v8 && *(unsigned __int8 *)(v8 + 80) <= a3);
  *(void *)(a4 + 64) = v9;
  sub_244CB3988((uint64_t)v12);
  long long v11 = &unk_26F952EE8;
  sub_244CA519C((uint64_t)&v11, a4);
  uint64_t result = sub_244CB3B04(a2, (uint64_t)v12);
  *(_DWORD *)a5 = 0;
  *(void *)(a5 + 8) = "src/app/EventManagement.cpp";
  *(_DWORD *)(a5 + 16) = 753;
  return result;
}

void sub_244CA4F18(uint64_t a1@<X0>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v12);
  uint64_t v11 = 0;
  sub_244CB3B04((uint64_t)v12, a1);
  sub_244CB4C90((uint64_t)v12, (_DWORD *)&v11 + 1, (uint64_t)v10);
  if (LODWORD(v10[0]))
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
    int v6 = 693;
  }
  else
  {
    sub_244CB54B4((uint64_t)v12, 1, v10);
    if (LODWORD(v10[0]))
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
      int v6 = 694;
    }
    else
    {
      sub_244CB4C90((uint64_t)v12, &v11, (uint64_t)v10);
      if (LODWORD(v10[0]))
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
        int v6 = 695;
      }
      else
      {
        do
        {
          sub_244CB4E58((uint64_t)v12, v10);
          if (LODWORD(v10[0]))
          {
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
            int v6 = 725;
            goto LABEL_19;
          }
        }
        while (v13 != 0xFFFFFFFE00000001);
        char v9 = 0;
        sub_244CB3E8C((uint64_t)v12, &v9, (uint64_t)v10);
        if (LODWORD(v10[0]))
        {
          int v6 = 702;
        }
        else
        {
          if (v9 == *a2)
          {
            uint64_t v7 = *(void *)(v14 + 32);
            if (v15 == v7) {
              uint64_t v8 = (unsigned char *)(v15 + *(unsigned int *)(v14 + 40) - 1);
            }
            else {
              uint64_t v8 = (unsigned char *)(v7 + v15 + ~v7);
            }
            unsigned char *v8 = 0;
          }
          int v6 = 722;
        }
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/app/EventManagement.cpp";
      }
    }
  }
LABEL_19:
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_244CA50B0(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v7 = a2;
  sub_244CB3988((uint64_t)v6);
  sub_244CB35A4((uint64_t)v5, 0, 0);
  v5[0] = &unk_26F952E30;
  v5[8] = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CA4E5C(a1, (uint64_t)v6, 2u, (uint64_t)v5, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB5C44((uint64_t)v6, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CA4F18, (uint64_t)&v7, 0, (uint64_t)a3);
    if (*(_DWORD *)a3 == 33)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/EventManagement.cpp";
      *((_DWORD *)a3 + 4) = 738;
    }
  }
}

void sub_244CA519C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    sub_244CB3A10(a1 + 8, a2, *(_DWORD *)(v2 + 56), (uint64_t)v6);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)(a2 + 64) + 56);
    for (uint64_t i = *(void *)(*(void *)(a2 + 64) + 64); i; uint64_t i = *(void *)(i + 64))
    {
      sub_244CB35A4((uint64_t)v6, 0, 0);
      uint64_t v7 = i;
      *(_DWORD *)(a1 + 68) += *(_DWORD *)(i + 56);
    }
  }
}

uint64_t sub_244CA5224(uint64_t result, void *a2, _DWORD *a3)
{
  *a2 = *(void *)(result + 40);
  *a3 = *(_DWORD *)(result + 28);
  return result;
}

uint64_t sub_244CA523C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244CB37F8(a1, a2, a3);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/app/EventManagement.cpp";
  *(_DWORD *)(a4 + 16) = 886;
  return result;
}

void *sub_244CA5280@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1[8];
  *(_OWORD *)a5 = xmmword_26519B7F8;
  *(void *)(a5 + 16) = 909;
  uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)v9 + 24))(v12);
  if (!*a4)
  {
    uint64_t v11 = *(void *)(a1[8] + 64);
    if (v11)
    {
      a1[8] = v11;
      *a3 = 0;
      return (void *)(*(uint64_t (**)(void *, uint64_t, void *, _DWORD *))(*a1 + 24))(a1, a2, a3, a4);
    }
  }
  return result;
}

void sub_244CA5360()
{
}

void sub_244CA5374()
{
}

void sub_244CA5388()
{
}

void *sub_244CA539C(void *a1)
{
  *a1 = &unk_26F9536C8;
  uint64_t v2 = (_WORD *)a1[2];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[2] = 0;
  long long v3 = (_WORD *)a1[1];
  if (v3) {
    sub_244CC8A0C(v3);
  }
  a1[1] = 0;
  return a1;
}

void sub_244CA53FC()
{
}

void sub_244CA5410()
{
  qword_26B0D4318 = 0;
  unk_26B0D4320 = 0;
  qword_26B0D4310 = (uint64_t)&unk_26F952E98;
  dword_26B0D4328 = 3;
  qword_26B0D4348 = 0;
  unk_26B0D4334 = 0;
  unk_26B0D432C = 0;
  unk_26B0D4339 = 0;
}

uint64_t sub_244CA5454()
{
  return 3600;
}

uint64_t sub_244CA545C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_26F952F40;
  sub_244CAB494(a1 + 8, a6, 0);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = &unk_26F956F80;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = &unk_26F945360;
  *(void *)(a1 + 152) = a1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = a2;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = -1;
  *(unsigned char *)(a1 + 206) = 0;
  *(_DWORD *)(a1 + 208) = 768;
  *(void *)(a1 + 216) = 0;
  if (!a3) {
    sub_244E21DE8();
  }
  sub_2447EA4BC(a1 + 144);
  *(void *)(a1 + 160) = a3;
  *(void *)(a3 + 40) = a1 + 144;
  *(unsigned char *)(a1 + 211) = a4;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 64) = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192))
                                   + 1448);
  *(unsigned char *)(a1 + 210) = 0;
  sub_244CA560C(a1, 2, 1);
  uint64_t v11 = sub_244CA1E70(a1 + 144);
  sub_24479B4A8(v11, &v13);
  sub_244D88328((void *)(a1 + 104), &v13);
  (*(void (**)(uint64_t))(*(void *)v13 + 32))(v13);
  if (!a5) {
    sub_244E21E88();
  }
  *(void *)(a1 + 216) = a5;
  return a1;
}

uint64_t sub_244CA560C(uint64_t result, char a2, int a3)
{
  int v3 = *(unsigned __int8 *)(result + 208);
  if (v3 != 1)
  {
    LOBYTE(v4) = 0;
    if (a3) {
      goto LABEL_11;
    }
LABEL_9:
    char v6 = *(unsigned char *)(result + 210) & ~a2;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 211))
  {
    unsigned int v5 = *(unsigned __int8 *)(result + 210);
    if ((v5 & 2) == 0)
    {
      int v4 = (v5 >> 4) & 1;
      if (*(void *)(result + 40) > *(void *)(result + 48)) {
        LOBYTE(v4) = 1;
      }
      if (a3) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  LOBYTE(v4) = 1;
  if (!a3) {
    goto LABEL_9;
  }
LABEL_11:
  char v6 = *(unsigned char *)(result + 210) | a2;
LABEL_12:
  *(unsigned char *)(result + 210) = v6;
  if (v3 == 1) {
    char v7 = v4;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0
    && (!*(unsigned char *)(result + 211)
     || (v6 & 2) != 0
     || *(void *)(result + 40) > *(void *)(result + 48)
     || (v6 & 0x10) != 0))
  {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 216) + 24))(*(void *)(result + 216), result);
  }
  return result;
}

uint64_t sub_244CA56D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26F952F40;
  sub_244CAB494(a1 + 8, a4, 0);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = &unk_26F956F80;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = &unk_26F945360;
  *(void *)(a1 + 152) = a1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = a2;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = -1;
  *(unsigned char *)(a1 + 206) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 208) = 16777984;
  if (!a3) {
    sub_244E21F28();
  }
  *(void *)(a1 + 216) = a3;
  return a1;
}

uint64_t sub_244CA57C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a3 + 12);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a3 + 20);
  *(_WORD *)(a1 + 78) = *(_WORD *)(a3 + 22);
  sub_244CA560C(a1, 8, *(unsigned __int8 *)(a3 + 24));
  if (*(void *)(a3 + 40))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a3 + 32) + v6;
      uint64_t v9 = *(void *)v8;
      LODWORD(v8) = *(unsigned __int16 *)(v8 + 8) | 0xFFFF0000;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      int v24 = v8;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
      sub_244DC1844(v10, (uint64_t *)(a1 + 168), &v23, &v20);
      if (v20) {
        return sub_244CA5A38(a1, 0);
      }
      ++v7;
      v6 += 12;
    }
    while (v7 < *(void *)(a3 + 40));
  }
  if (*(void *)(a3 + 56))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a3 + 48) + v11;
      uint64_t v14 = *(void *)v13;
      LODWORD(v13) = *(unsigned __int16 *)(v13 + 8) | (*(unsigned __int8 *)(v13 + 10) << 16);
      uint64_t v22 = 0;
      uint64_t v23 = v14;
      int v24 = v13;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
      sub_244DC1B94(v15, (uint64_t *)(a1 + 176), &v23, &v20);
      if (v20) {
        return sub_244CA5A38(a1, 0);
      }
      ++v12;
      v11 += 12;
    }
    while (v12 < *(void *)(a3 + 56));
  }
  sub_244D88328((void *)(a1 + 104), a2);
  sub_244CA560C(a1, 4, 1);
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))(*(void *)(a1 + 192));
  if (v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, a1);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 216) + 16))(*(void *)(a1 + 216), a1);
  uint64_t result = sub_244CA5C70(a1, 1);
  for (uint64_t i = *(void *)(a1 + 168); i; uint64_t i = *(void *)(i + 16))
  {
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
    uint64_t result = sub_244DCB76C((unint64_t *)(v19 + 1360), i, &v20);
  }
  return result;
}

uint64_t sub_244CA5A38(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 211);
  if (!a2 && v3 == 1)
  {
    uint64_t v4 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192)) + 1744);
    if (v4)
    {
      uint64_t v5 = sub_244CA8E44(a1);
      if (v5) {
        uint64_t v6 = *(void *)(v5 + 72);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = sub_244CA8E44(a1);
      if (v7) {
        uint64_t v8 = *(unsigned __int8 *)(v7 + 24);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 32))(&buf, v4, v6, v8, *(unsigned int *)(a1 + 72));
    }
    int v3 = *(unsigned __int8 *)(a1 + 211);
  }
  if (v3 == 1)
  {
    if (*(unsigned char *)(a1 + 128))
    {
      uint64_t v9 = sub_2446F7170((unsigned char *)(a1 + 128));
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v9 + 48))(*(void *)v9);
      int v12 = v11;
    }
    else
    {
      int v12 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v13 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t buf = __PAIR64__(*(_DWORD *)(a1 + 72), 67109888);
      __int16 v16 = 1024;
      int v17 = HIDWORD(v10);
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 1024;
      int v21 = v12;
      _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "Subscription id 0x%x from node <%08X%08X, %d> torn down", (uint8_t *)&buf, 0x1Au);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
  }
  sub_244CA5C70(a1, 3);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), a1);
}

uint64_t sub_244CA5C70(uint64_t result, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v2 = *(unsigned __int8 *)(result + 208);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    if (a2 != 2 && v2 == 2)
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(result + 192) + 32))(*(void *)(result + 192));
      sub_244DCB820(v5 + 1360);
    }
    *(unsigned char *)(v4 + 208) = a2;
    uint64_t v6 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      unint64_t v7 = *(char *)(v4 + 208);
      if (v7 > 3) {
        uint64_t v8 = "N/A";
      }
      else {
        uint64_t v8 = (&off_26519B840)[v7];
      }
      *(_DWORD *)unint64_t buf = 136315138;
      unsigned __int8 v11 = v8;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "IM RH moving to [%s]", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      uint64_t result = sub_244CC4DE0(0xDu, 3);
    }
    if (a2 == 1)
    {
      if (*(unsigned char *)(v4 + 208) == 1 && (!*(unsigned char *)(v4 + 211) || (*(unsigned char *)(v4 + 210) & 2) != 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v4 + 192) + 32))(*(void *)(v4 + 192));
        return sub_244DCB224(v9 + 1360, buf);
      }
      else
      {
        return (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 216) + 24))(*(void *)(v4 + 216), v4);
      }
    }
  }
  return result;
}

uint64_t sub_244CA5E68(uint64_t a1)
{
  *(void *)a1 = &unk_26F952F40;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 216) + 40))(*(void *)(a1 + 216), a1);
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))(*(void *)(a1 + 192));
  if ((*(unsigned char *)(a1 + 210) & 4) != 0 && v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, a1);
  }
  if (*(unsigned char *)(a1 + 208) == 2)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
    sub_244DCB820(v3 + 1360);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
  sub_244DC17F8(v4, (void **)(a1 + 168));
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
  sub_244DC1B48(v5, (void **)(a1 + 176));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
  sub_244DC1C94(v6, (void **)(a1 + 184));
  *(void *)(a1 + 144) = &unk_26F945360;
  sub_2447EA4BC(a1 + 144);
  sub_244D87F44(a1 + 104);
  return a1;
}

void sub_244CA602C(uint64_t a1)
{
  sub_244CA5E68(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CA6064(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 211) == 1) {
    sub_244CA616C(a1, a2, &v7);
  }
  else {
    sub_244CA6694(a1, a2, (uint64_t)&v7);
  }
  long long v10 = v8;
  int v11 = v9;
  if (!v7) {
    return sub_244CA560C(a1, 16, 1);
  }
  if ((v7 & 0xFF000700) == 0x600 || (v7 & 0xFF000700) == 0x500)
  {
    int v4 = v7;
    long long v5 = v10;
    int v6 = v11;
    sub_24479B818((uint64_t)&v7, (long long *)&v4);
  }
  sub_244DD5B5C(*(void *)(a1 + 160), 0, (uint64_t)&v7);
  return sub_244CA5A38(a1, 1);
}

void sub_244CA616C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v26);
  char v27 = 0;
  sub_2446DE1E4(v6, a2);
  sub_244CCF15C((uint64_t)v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCF054((uint64_t)v25, (uint64_t)v26, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_39;
  }
  sub_244CCF15C((uint64_t)v24);
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  sub_244CCFBBC(v25, (uint64_t)v24, &v22);
  if (v22)
  {
    if (v22 != 33) {
      goto LABEL_6;
    }
    LODWORD(v22) = 0;
    *((void *)&v22 + 1) = "src/app/ReadHandler.cpp";
    int v7 = 703;
    goto LABEL_5;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CA8150(a1, (uint64_t)v24, (uint64_t)a3);
  if (*(_DWORD *)a3) {
    goto LABEL_39;
  }
  sub_244CCF15C((uint64_t)v21);
  sub_244CCFC30(v25, (uint64_t)v21, &buf);
  long long v22 = buf;
  uint64_t v23 = v29;
  if (buf)
  {
    if (v22 == 33)
    {
      LODWORD(v22) = 0;
      *((void *)&v22 + 1) = "src/app/ReadHandler.cpp";
      int v7 = 712;
LABEL_5:
      LODWORD(v23) = v7;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CA8310(a1, (uint64_t)v21, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      goto LABEL_39;
    }
  }
LABEL_6:
  *(_OWORD *)a3 = v22;
  a3[2] = v23;
  if (*(_DWORD *)a3) {
    goto LABEL_39;
  }
  sub_244CCF15C((uint64_t)v21);
  sub_244CCF23C(v25, (uint64_t)v21, &buf);
  long long v22 = buf;
  uint64_t v23 = v29;
  if (buf)
  {
    if (v22 == 33)
    {
      LODWORD(v22) = 0;
      *((void *)&v22 + 1) = "src/app/ReadHandler.cpp";
      int v8 = 725;
LABEL_10:
      LODWORD(v23) = v8;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CA8560(a1, (uint64_t)v21, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      goto LABEL_39;
    }
    sub_244CCF15C((uint64_t)&buf);
    sub_244CCFCA4(v25, (uint64_t)&buf, &v19);
    long long v22 = v19;
    uint64_t v23 = v20;
    if (v19)
    {
      if (v19 != 33) {
        goto LABEL_11;
      }
      LODWORD(v22) = 0;
      *((void *)&v22 + 1) = "src/app/ReadHandler.cpp";
      int v8 = 734;
      goto LABEL_10;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CA86CC(a1, (uint64_t)&buf, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      goto LABEL_39;
    }
  }
LABEL_11:
  *(_OWORD *)a3 = v22;
  a3[2] = v23;
  if (*(_DWORD *)a3) {
    goto LABEL_39;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCCEB8(v25, (_WORD *)(a1 + 76), a3);
  if (*(_DWORD *)a3) {
    goto LABEL_39;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCBCC0(v25, (_WORD *)(a1 + 80), a3);
  if (*(_DWORD *)a3) {
    goto LABEL_39;
  }
  unsigned int v9 = *(unsigned __int16 *)(a1 + 80);
  *(_WORD *)(a1 + 78) = v9;
  if (*(unsigned __int16 *)(a1 + 76) > v9)
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/app/ReadHandler.cpp";
    int v10 = 747;
LABEL_31:
    *((_DWORD *)a3 + 4) = v10;
    goto LABEL_39;
  }
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))(*(void *)(a1 + 192));
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_244CA1E70(a1 + 144);
    sub_24479B4A8(v13, &v19);
    uint64_t v14 = sub_244D879D8(v19);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(&buf, v12, a1, v14);
    LODWORD(v12) = buf;
    (*(void (**)(void))(*(void *)v19 + 32))(v19);
    if (v12)
    {
      *(_DWORD *)a3 = 104;
      a3[1] = "src/app/ReadHandler.cpp";
      int v10 = 809;
      goto LABEL_31;
    }
  }
  uint64_t v15 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int16 *)(a1 + 76);
    int v17 = *(unsigned __int16 *)(a1 + 78);
    LODWORD(buf) = 67109376;
    DWORD1(buf) = v16;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v17;
    _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_DEFAULT, "Final negotiated min/max parameters: Min = %ds, Max = %ds", (uint8_t *)&buf, 0xEu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xDu, 2);
  }
  LOBYTE(buf) = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CCFD18(v25, (char *)&buf, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CA560C(a1, 8, buf);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CECD5C((char *)(a1 + 72), 4uLL, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CCF0D0((uint64_t)v25, a3);
      if (!*(_DWORD *)a3)
      {
        sub_244CA5C70(a1, 1);
        uint64_t v18 = sub_244CA1E70(a1 + 144);
        *(_WORD *)(v18 + 8) |= 0x40u;
        sub_244CA8874(a1);
        *(_DWORD *)a3 = 0;
        a3[1] = "src/app/ReadHandler.cpp";
        int v10 = 829;
        goto LABEL_31;
      }
    }
  }
LABEL_39:
  if (v27) {
    sub_244CC8A0C(v27);
  }
}

void sub_244CA6694(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v27);
  char v28 = 0;
  sub_244CCF15C((uint64_t)v26);
  sub_244CCF15C((uint64_t)v25);
  sub_244CCF15C((uint64_t)v24);
  sub_244CCF15C((uint64_t)v23);
  sub_2446DE1E4((uint64_t)v27, a2);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CCF054((uint64_t)v26, (uint64_t)v27, (void *)a3);
  if (*(_DWORD *)a3) {
    goto LABEL_2;
  }
  sub_244CCF1C8(v26, (uint64_t)v23, &v20);
  if (v20)
  {
    if (v20 != 33)
    {
      uint64_t v12 = v21;
      uint64_t v13 = v22;
      *(void *)a3 = v20;
      *(void *)(a3 + 8) = v12;
      *(void *)(a3 + 16) = v13;
      goto LABEL_2;
    }
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
    *(_DWORD *)(a3 + 16) = 442;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CA8150(a1, (uint64_t)v23, a3);
    if (*(_DWORD *)a3) {
      goto LABEL_2;
    }
    sub_244CCF15C((uint64_t)&v20);
    sub_244CCF23C(v26, (uint64_t)&v20, v17);
    int v8 = HIDWORD(v17[0]);
    int v9 = v19;
    if (LODWORD(v17[0]) == 33)
    {
      int v11 = 451;
      int v10 = "src/app/ReadHandler.cpp";
    }
    else
    {
      int v10 = (const char *)v17[1];
      int v11 = v18;
      if (LODWORD(v17[0]))
      {
        *(_DWORD *)a3 = v17[0];
        *(_DWORD *)(a3 + 4) = v8;
        *(void *)(a3 + 8) = v10;
        *(_DWORD *)(a3 + 16) = v11;
        *(_DWORD *)(a3 + 20) = v9;
        goto LABEL_2;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CA8310(a1, (uint64_t)&v20, a3);
      if (*(_DWORD *)a3) {
        goto LABEL_2;
      }
    }
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v8;
    *(void *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 16) = v11;
    *(_DWORD *)(a3 + 20) = v9;
  }
  sub_244CCEB54(v26, (uint64_t)v25, &v20);
  uint64_t v6 = v20;
  if (v20 != 33)
  {
    if (v20) {
      goto LABEL_23;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CA8560(a1, (uint64_t)v25, a3);
    if (*(_DWORD *)a3) {
      goto LABEL_2;
    }
    sub_244CCE5F4(v26, (uint64_t)v24, &v20);
    uint64_t v6 = v20;
    if (v20 != 33)
    {
      if (!v20)
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CA86CC(a1, (uint64_t)v24, a3);
        if (*(_DWORD *)a3) {
          goto LABEL_2;
        }
        goto LABEL_14;
      }
LABEL_23:
      uint64_t v14 = v21;
      int v15 = v22;
      int v16 = HIDWORD(v22);
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 16) = v15;
      *(_DWORD *)(a3 + 20) = v16;
      goto LABEL_2;
    }
  }
LABEL_14:
  LOBYTE(v20) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_244CCF2B0(v26, (char *)&v20, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CA560C(a1, 8, v20);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCF0D0((uint64_t)v26, (void *)a3);
    if (!*(_DWORD *)a3)
    {
      sub_244CA5C70(a1, 1);
      uint64_t v7 = sub_244CA1E70(a1 + 144);
      *(_WORD *)(v7 + 8) |= 0x40u;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
      *(_DWORD *)(a3 + 16) = 491;
    }
  }
LABEL_2:
  if (v28) {
    sub_244CC8A0C(v28);
  }
}

void sub_244CA6964(uint64_t a1@<X0>, void *a2@<X2>, unsigned char *a3@<X3>, uint64_t a4@<X8>)
{
  *a3 = 1;
  long long v16 = xmmword_26519B810;
  uint64_t v17 = 234;
  sub_244DD5D28(a2, (uint64_t)&v16, &v13);
  int v7 = v13;
  if (v13)
  {
    int v8 = HIDWORD(v13);
    int v9 = v14;
    uint64_t v10 = v15;
LABEL_12:
    *(_DWORD *)a4 = v7;
    *(_DWORD *)(a4 + 4) = v8;
    *(void *)(a4 + 8) = v9;
    *(void *)(a4 + 16) = v10;
    return;
  }
  *a3 = 0;
  int v7 = v16;
  int v8 = DWORD1(v16);
  int v9 = (const char *)*((void *)&v16 + 1);
  uint64_t v10 = v17;
  if (v16) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 208) != 2)
  {
    LODWORD(v10) = 277;
    int v7 = 3;
    int v9 = "src/app/ReadHandler.cpp";
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 210))
  {
    uint64_t v11 = sub_244CA1E70(a1 + 144);
    int v7 = 0;
    *(_WORD *)(v11 + 8) |= 0x40u;
LABEL_11:
    sub_244CA5C70(a1, 1);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 211) == 1)
  {
    if ((*(unsigned char *)(a1 + 210) & 2) != 0)
    {
      sub_244CA6B4C(a1, &v13);
      int v7 = v13;
      int v8 = HIDWORD(v13);
      int v9 = v14;
      uint64_t v10 = v15;
      sub_244CA560C(a1, 4, 1);
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))(*(void *)(a1 + 192));
      if (v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, a1);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 216) + 16))(*(void *)(a1 + 216), a1);
    }
    else
    {
      int v7 = 0;
    }
    goto LABEL_11;
  }
  sub_244CA5A38(a1, 0);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/app/ReadHandler.cpp";
  *(_DWORD *)(a4 + 16) = 268;
}

void sub_244CA6B4C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  sub_244CC8F5C(0x4AAuLL, 0x26u, &v20);
  if (v20)
  {
    sub_244CB62B8((uint64_t)buf);
    v33[1] = 0;
    v33[2] = 0;
    v33[0] = &unk_26F9536C8;
    char v34 = 0;
    sub_2447945A0((uint64_t)v33, &v20, 0);
    sub_244CB6318((uint64_t)buf, (uint64_t)v33, 0xFFFFFFFF, (uint64_t)v15);
    sub_244CCCDE0((uint64_t)v15);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CCF9D0((uint64_t)v15, buf, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v4 = sub_244CCB9E4((uint64_t)v15);
      uint64_t v5 = sub_244CCC220(v4);
      sub_244CCF478(v5, (uint64_t)a2);
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_2446DE160((uint64_t)buf, &v20, a2);
        if (!*(_DWORD *)a2)
        {
          if (*(void *)(a1 + 160))
          {
            sub_244CA560C(a1, 2, 0);
            uint64_t v6 = sub_244CA1E70(a1 + 144);
            *(_WORD *)uint64_t v21 = 0;
            sub_244D645BC(v6, 0x10000u, 4, (uint64_t *)&v20, v21, (uint64_t)a2);
          }
          else
          {
            int v9 = sub_244CC8484(0, "NotSpecified");
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v13[0]) = 3;
              v13[1] = "src/app/ReadHandler.cpp";
              int v14 = 681;
              uint64_t v10 = sub_244CB7B34(v13, 1);
              *(_DWORD *)uint64_t v21 = 136315650;
              uint64_t v22 = v10;
              __int16 v23 = 2080;
              int v24 = "src/app/ReadHandler.cpp";
              __int16 v25 = 1024;
              int v26 = 681;
              _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", v21, 0x1Cu);
            }
            if (sub_244CC4E58(1u))
            {
              LODWORD(v11[0]) = 3;
              v11[1] = "src/app/ReadHandler.cpp";
              int v12 = 681;
              sub_244CB7B34(v11, 1);
              sub_244CC4DE0(0, 1);
            }
            *(_DWORD *)a2 = 3;
            a2[1] = "src/app/ReadHandler.cpp";
            *((_DWORD *)a2 + 4) = 681;
          }
        }
      }
    }
    sub_244CA539C(v33);
  }
  else
  {
    int v7 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v18[0]) = 11;
      v18[1] = "src/app/ReadHandler.cpp";
      int v19 = 671;
      int v8 = sub_244CB7B34(v18, 1);
      *(_DWORD *)long long buf = 136315650;
      char v28 = v8;
      __int16 v29 = 2080;
      uint64_t v30 = "src/app/ReadHandler.cpp";
      __int16 v31 = 1024;
      int v32 = 671;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_244CC4E58(1u))
    {
      LODWORD(v16[0]) = 11;
      v16[1] = "src/app/ReadHandler.cpp";
      int v17 = 671;
      sub_244CB7B34(v16, 1);
      sub_244CC4DE0(0, 1);
    }
    *(_DWORD *)a2 = 11;
    a2[1] = "src/app/ReadHandler.cpp";
    *((_DWORD *)a2 + 4) = 671;
  }
  if (v20) {
    sub_244CC8A0C(v20);
  }
}

void sub_244CA6EF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 208) != 1)
  {
    uint64_t v6 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v38[0]) = 3;
      v38[1] = "src/app/ReadHandler.cpp";
      int v39 = 287;
      int v7 = sub_244CB7B34(v38, 1);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "src/app/ReadHandler.cpp";
      __int16 v41 = 1024;
      int v42 = 287;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_244CC4E58(1u))
    {
      LODWORD(v36[0]) = 3;
      v36[1] = "src/app/ReadHandler.cpp";
      int v37 = 287;
      sub_244CB7B34(v36, 1);
      sub_244CC4DE0(0, 1);
    }
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/app/ReadHandler.cpp";
    int v8 = 287;
    goto LABEL_22;
  }
  if ((*(unsigned char *)(a1 + 210) & 3) != 0)
  {
    uint64_t v4 = sub_244CA1E70(a1 + 144);
    sub_24479B4A8(v4, buf);
    sub_244D88328((void *)(a1 + 104), (uint64_t *)buf);
    (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
  }
  else
  {
    if (*(void *)(a1 + 160))
    {
      int v9 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v34[0]) = 3;
        v34[1] = "src/app/ReadHandler.cpp";
        int v35 = 294;
        uint64_t v10 = sub_244CB7B34(v34, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "src/app/ReadHandler.cpp";
        __int16 v41 = 1024;
        int v42 = 294;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        LODWORD(v32[0]) = 3;
        v32[1] = "src/app/ReadHandler.cpp";
        int v33 = 294;
        sub_244CB7B34(v32, 1);
        sub_244CC4DE0(0, 1);
      }
      *(_DWORD *)a2 = 3;
      *(void *)(a2 + 8) = "src/app/ReadHandler.cpp";
      int v8 = 294;
      goto LABEL_22;
    }
    if (!*(unsigned char *)(a1 + 128))
    {
      long long v16 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v30[0]) = 3;
        v30[1] = "src/app/ReadHandler.cpp";
        int v31 = 295;
        int v17 = sub_244CB7B34(v30, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "src/app/ReadHandler.cpp";
        __int16 v41 = 1024;
        int v42 = 295;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        LODWORD(v28[0]) = 3;
        v28[1] = "src/app/ReadHandler.cpp";
        int v29 = 295;
        sub_244CB7B34(v28, 1);
        sub_244CC4DE0(0, 1);
      }
      *(_DWORD *)a2 = 3;
      *(void *)(a2 + 8) = "src/app/ReadHandler.cpp";
      int v8 = 295;
      goto LABEL_22;
    }
    uint64_t v13 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192)) + 88);
    sub_24479DD24(a1 + 104, (uint64_t)buf);
    int v14 = sub_2446F7170(buf);
    uint64_t v15 = sub_244D66048(v13, v14, a1, 1u);
    if (buf[0]) {
      (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
    }
    if (!v15)
    {
      int v18 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v26[0]) = 3;
        v26[1] = "src/app/ReadHandler.cpp";
        int v27 = 302;
        int v19 = sub_244CB7B34(v26, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "src/app/ReadHandler.cpp";
        __int16 v41 = 1024;
        int v42 = 302;
        _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        LODWORD(v24[0]) = 3;
        v24[1] = "src/app/ReadHandler.cpp";
        int v25 = 302;
        sub_244CB7B34(v24, 1);
        sub_244CC4DE0(0, 1);
      }
      *(_DWORD *)a2 = 3;
      *(void *)(a2 + 8) = "src/app/ReadHandler.cpp";
      int v8 = 302;
      goto LABEL_22;
    }
    sub_2447EA4BC(a1 + 144);
    *(void *)(a1 + 160) = v15;
    void v15[5] = a1 + 144;
  }
  uint64_t v5 = *(void *)(a1 + 160);
  if (v5)
  {
    sub_244DD5B5C(v5, 0, a2);
    return;
  }
  uint64_t v11 = sub_244CC8484(0, "NotSpecified");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v22[0]) = 3;
    v22[1] = "src/app/ReadHandler.cpp";
    int v23 = 306;
    int v12 = sub_244CB7B34(v22, 1);
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "src/app/ReadHandler.cpp";
    __int16 v41 = 1024;
    int v42 = 306;
    _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
  }
  if (sub_244CC4E58(1u))
  {
    LODWORD(v20[0]) = 3;
    v20[1] = "src/app/ReadHandler.cpp";
    int v21 = 306;
    sub_244CB7B34(v20, 1);
    sub_244CC4DE0(0, 1);
  }
  *(_DWORD *)a2 = 3;
  *(void *)(a2 + 8) = "src/app/ReadHandler.cpp";
  int v8 = 306;
LABEL_22:
  *(_DWORD *)(a2 + 16) = v8;
}

void sub_244CA758C(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 208) != 1)
  {
    int v12 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v46[0]) = 3;
      v46[1] = "src/app/ReadHandler.cpp";
      int v47 = 312;
      uint64_t v13 = sub_244CB7B34(v46, 1);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "src/app/ReadHandler.cpp";
      __int16 v49 = 1024;
      int v50 = 312;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_244CC4E58(1u))
    {
      LODWORD(v44[0]) = 3;
      v44[1] = "src/app/ReadHandler.cpp";
      int v45 = 312;
      sub_244CB7B34(v44, 1);
      sub_244CC4DE0(0, 1);
    }
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/app/ReadHandler.cpp";
    int v14 = 312;
    goto LABEL_29;
  }
  if ((*(unsigned char *)(a1 + 210) & 3) != 0)
  {
    uint64_t v8 = sub_244CA1E70(a1 + 144);
    sub_24479B4A8(v8, buf);
    sub_244D88328((void *)(a1 + 104), (uint64_t *)buf);
    (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
  }
  else
  {
    if (*(void *)(a1 + 160))
    {
      uint64_t v15 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v42[0]) = 3;
        v42[1] = "src/app/ReadHandler.cpp";
        int v43 = 320;
        long long v16 = sub_244CB7B34(v42, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "src/app/ReadHandler.cpp";
        __int16 v49 = 1024;
        int v50 = 320;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        LODWORD(v40[0]) = 3;
        v40[1] = "src/app/ReadHandler.cpp";
        int v41 = 320;
        sub_244CB7B34(v40, 1);
        sub_244CC4DE0(0, 1);
      }
      *(_DWORD *)a4 = 3;
      *(void *)(a4 + 8) = "src/app/ReadHandler.cpp";
      int v14 = 320;
      goto LABEL_29;
    }
    if (!*(unsigned char *)(a1 + 128))
    {
      int v24 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v38[0]) = 3;
        v38[1] = "src/app/ReadHandler.cpp";
        int v39 = 321;
        int v25 = sub_244CB7B34(v38, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "src/app/ReadHandler.cpp";
        __int16 v49 = 1024;
        int v50 = 321;
        _os_log_impl(&dword_2446BD000, v24, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        LODWORD(v36[0]) = 3;
        v36[1] = "src/app/ReadHandler.cpp";
        int v37 = 321;
        sub_244CB7B34(v36, 1);
        sub_244CC4DE0(0, 1);
      }
      *(_DWORD *)a4 = 3;
      *(void *)(a4 + 8) = "src/app/ReadHandler.cpp";
      int v14 = 321;
      goto LABEL_29;
    }
    uint64_t v19 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192)) + 88);
    sub_24479DD24(a1 + 104, (uint64_t)buf);
    uint64_t v20 = sub_2446F7170(buf);
    int v21 = sub_244D66048(v19, v20, a1, 1u);
    if (buf[0]) {
      (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
    }
    if (!v21)
    {
      int v26 = sub_244CC8484(0, "NotSpecified");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v34[0]) = 3;
        v34[1] = "src/app/ReadHandler.cpp";
        int v35 = 328;
        int v27 = sub_244CB7B34(v34, 1);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "src/app/ReadHandler.cpp";
        __int16 v49 = 1024;
        int v50 = 328;
        _os_log_impl(&dword_2446BD000, v26, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_244CC4E58(1u))
      {
        LODWORD(v32[0]) = 3;
        v32[1] = "src/app/ReadHandler.cpp";
        int v33 = 328;
        sub_244CB7B34(v32, 1);
        sub_244CC4DE0(0, 1);
      }
      *(_DWORD *)a4 = 3;
      *(void *)(a4 + 8) = "src/app/ReadHandler.cpp";
      int v14 = 328;
      goto LABEL_29;
    }
    sub_2447EA4BC(a1 + 144);
    *(void *)(a1 + 160) = v21;
    void v21[5] = a1 + 144;
  }
  if (!*(void *)(a1 + 160))
  {
    int v17 = sub_244CC8484(0, "NotSpecified");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v30[0]) = 3;
      v30[1] = "src/app/ReadHandler.cpp";
      int v31 = 332;
      int v18 = sub_244CB7B34(v30, 1);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "src/app/ReadHandler.cpp";
      __int16 v49 = 1024;
      int v50 = 332;
      _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_244CC4E58(1u))
    {
      LODWORD(v28[0]) = 3;
      v28[1] = "src/app/ReadHandler.cpp";
      int v29 = 332;
      sub_244CB7B34(v28, 1);
      sub_244CC4DE0(0, 1);
    }
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/app/ReadHandler.cpp";
    int v14 = 332;
LABEL_29:
    *(_DWORD *)(a4 + 16) = v14;
    return;
  }
  if ((*(unsigned char *)(a1 + 210) & 1) == 0) {
    *(void *)(a1 + 56) = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192))
  }
                                     + 1448);
  sub_244CA560C(a1, 1, a3);
  if (*(unsigned char *)(a1 + 211) == 1) {
    int v9 = 1;
  }
  else {
    int v9 = a3;
  }
  uint64_t v10 = sub_244CA1E70(a1 + 144);
  sub_244D64578(v10, 2000);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v11 = sub_244CA1E70(a1 + 144);
  *(_WORD *)long long buf = v9;
  sub_244D645BC(v11, 0x10000u, 5, a2, buf, a4);
  if (!*(_DWORD *)a4)
  {
    if (v9)
    {
      sub_244CA5C70(a1, 2);
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
      sub_244DCB820(v22 + 1360);
    }
    if (*(unsigned char *)(a1 + 211) == 1 && (*(unsigned char *)(a1 + 210) & 3) == 0) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 216) + 32))(*(void *)(a1 + 216), a1);
    }
  }
  if ((a3 & 1) == 0)
  {
    *(void *)(a1 + 48) = *(void *)(a1 + 56);
    sub_244CA560C(a1, 16, 0);
    uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
    sub_244DC1C94(v23, (void **)(a1 + 184));
  }
}

void sub_244CA7D8C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_OWORD *)a5 = xmmword_26519B828;
  *(void *)(a5 + 16) = 379;
  char v12 = 1;
  if (*((_WORD *)a3 + 2) || (*((_WORD *)a3 + 3) == 1 ? (BOOL v9 = *a3 == 1) : (BOOL v9 = 0), !v9))
  {
    uint64_t v10 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = *a3;
      *(_DWORD *)long long buf = 67109120;
      int v14 = v11;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "ReadHandler:: Msg type %d not supported", buf, 8u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    *(_DWORD *)a5 = 42;
    *(void *)(a5 + 8) = "src/app/ReadHandler.cpp";
    *(_DWORD *)(a5 + 16) = 388;
    goto LABEL_14;
  }
  sub_244CA6964(a1, a4, &v12, a5);
  if (v12) {
LABEL_14:
  }
    sub_244DD5B5C(a2, 0, (uint64_t)buf);
  if (*(_DWORD *)a5) {
    sub_244CA5A38(a1, 0);
  }
}

BOOL sub_244CA7F20(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 211) != 1) {
    return 0;
  }
  uint64_t v4 = sub_244CA8E44(a1);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 72);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_24479B4A8(a2, &v11);
  if (v5 == *(void *)(sub_244D879D8(v11) + 72))
  {
    uint64_t v7 = sub_244CA8E44(a1);
    if (v7) {
      int v8 = *(unsigned __int8 *)(v7 + 24);
    }
    else {
      int v8 = 0;
    }
    sub_24479B4A8(a2, &v10);
    BOOL v6 = v8 == v10[24];
    (*(void (**)(void))(*(void *)v10 + 32))();
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
  return v6;
}

uint64_t sub_244CA8028(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_244D64530(a2)) {
      int v6 = 105;
    }
    else {
      int v6 = 114;
    }
    *(_DWORD *)long long buf = 67109376;
    int v9 = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Time out! failed to receive status response from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_244CC4E58(1u))
  {
    sub_244D64530(a2);
    sub_244CC4DE0(0xDu, 1);
  }
  return sub_244CA5A38(a1, 1);
}

void sub_244CA8150(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v18);
  sub_244CCF1AC(a2, (uint64_t)v18);
  while (1)
  {
    sub_244CB4E58((uint64_t)v18, &v14);
    int v6 = v14;
    if (v14) {
      break;
    }
    if (v19 != 256)
    {
      *(_DWORD *)a3 = 36;
      *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
      *(_DWORD *)(a3 + 16) = 501;
      return;
    }
    uint64_t v16 = -1;
    int v17 = -1;
    sub_244CCF15C((uint64_t)&v14);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCEFC8((uint64_t)&v14, (uint64_t)v18, a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CCBF60((int *)&v14, (int *)&v16, a3);
      if (!*(_DWORD *)a3)
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
        sub_244DC1844(v7, (uint64_t *)(a1 + 168), &v16, (void *)a3);
        if (!*(_DWORD *)a3) {
          continue;
        }
      }
    }
    return;
  }
  int v8 = DWORD1(v14);
  int v9 = DWORD1(v15);
  if (v14 == 33)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
    sub_244DC1944(v10, (_DWORD **)(a1 + 168));
    sub_244CAB494((uint64_t)&v14, 0, *(void *)(a1 + 168));
    int v6 = 0;
    long long v11 = v15;
    *(_OWORD *)(a1 + 8) = v14;
    *(_OWORD *)(a1 + 24) = v11;
    int v12 = 514;
    uint64_t v13 = "src/app/ReadHandler.cpp";
  }
  else
  {
    uint64_t v13 = (const char *)*((void *)&v14 + 1);
    int v12 = v15;
  }
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v8;
  *(void *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v9;
}

void sub_244CA8310(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v24);
  sub_244CCF1AC(a2, (uint64_t)v24);
  sub_244CB4E58((uint64_t)v24, v17);
  int v6 = v17[0];
  if (LODWORD(v17[0]))
  {
LABEL_2:
    int v7 = HIDWORD(v17[0]);
    int v8 = (const char *)v17[1];
    int v9 = v18;
    int v10 = v19;
    BOOL v11 = v6 == 33;
    if (v6 == 33)
    {
      int v6 = 0;
      int v8 = "src/app/ReadHandler.cpp";
    }
    *(_DWORD *)a3 = v6;
    *(_DWORD *)(a3 + 4) = v7;
    *(void *)(a3 + 8) = v8;
    if (v11) {
      int v12 = 545;
    }
    else {
      int v12 = v9;
    }
    *(_DWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 20) = v10;
  }
  else
  {
    while (1)
    {
      if (v25 != 256)
      {
        *(_DWORD *)a3 = 36;
        *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
        int v14 = 527;
        goto LABEL_23;
      }
      int v20 = -1;
      char v21 = 0;
      __int16 v23 = -1;
      sub_244CCF15C((uint64_t)v17);
      sub_244CCF15C((uint64_t)v16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CCFA34((uint64_t)v16, (uint64_t)v24, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      int v15 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      sub_244CCD0A8(v16, &v15, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      char v21 = 1;
      int v22 = v15;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      sub_244CCCCBC(v16, (uint64_t)v17, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CCCEB8((int *)v17, &v23, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CCCEC8((int *)v17, &v20, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      if (v23 == -1 || v20 == -1 || !v21) {
        break;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
      sub_244DC1CE0(v13, (void *)(a1 + 184), (uint64_t)&v20, (void *)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      sub_244CB4E58((uint64_t)v24, v17);
      int v6 = v17[0];
      if (LODWORD(v17[0])) {
        goto LABEL_2;
      }
    }
    *(_DWORD *)a3 = 215;
    *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
    int v14 = 538;
LABEL_23:
    *(_DWORD *)(a3 + 16) = v14;
  }
}

void sub_244CA8560(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v18);
  sub_244CCF1AC(a2, (uint64_t)v18);
  while (1)
  {
    sub_244CB4E58((uint64_t)v18, v12);
    int v6 = v12[0];
    if (LODWORD(v12[0])) {
      break;
    }
    if (v19 != 256)
    {
      *(_DWORD *)a3 = 36;
      *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
      *(_DWORD *)(a3 + 16) = 557;
      return;
    }
    uint64_t v15 = -1;
    __int16 v16 = -1;
    char v17 = 0;
    sub_244CCF15C((uint64_t)v12);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCEFC8((uint64_t)v12, (uint64_t)v18, a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CCE0BC((int *)v12, (uint64_t)&v15, a3);
      if (!*(_DWORD *)a3)
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
        sub_244DC1B94(v7, (uint64_t *)(a1 + 176), &v15, (void *)a3);
        if (!*(_DWORD *)a3) {
          continue;
        }
      }
    }
    return;
  }
  int v8 = HIDWORD(v12[0]);
  int v9 = (const char *)v12[1];
  int v10 = v13;
  int v11 = v14;
  if (LODWORD(v12[0]) == 33)
  {
    int v6 = 0;
    int v9 = "src/app/ReadHandler.cpp";
    int v10 = 568;
  }
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v8;
  *(void *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v11;
}

void sub_244CA86CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3988((uint64_t)v14);
  sub_244CCF1AC(a2, (uint64_t)v14);
  while (1)
  {
    sub_244CB4E58((uint64_t)v14, v11);
    int v6 = v11[0];
    if (LODWORD(v11[0])) {
      break;
    }
    if (v15 != 256)
    {
      *(_DWORD *)a3 = 36;
      *(void *)(a3 + 8) = "src/app/ReadHandler.cpp";
      *(_DWORD *)(a3 + 16) = 581;
      return;
    }
    sub_244CCF15C((uint64_t)v11);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CCFA34((uint64_t)v11, (uint64_t)v14, (void *)a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CCBCB0((int *)v11, (void *)(a1 + 88), (void *)a3);
      if (!*(_DWORD *)a3) {
        continue;
      }
    }
    return;
  }
  int v7 = HIDWORD(v11[0]);
  int v8 = (const char *)v11[1];
  int v9 = v12;
  int v10 = v13;
  if (LODWORD(v11[0]) == 33)
  {
    int v6 = 0;
    int v8 = "src/app/ReadHandler.cpp";
    int v9 = 589;
  }
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v7;
  *(void *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v10;
}

const char *sub_244CA87DC(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 208);
  if (v1 > 3) {
    return "N/A";
  }
  else {
    return (&off_26519B840)[v1];
  }
}

BOOL sub_244CA8804(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 210))
  {
    unint64_t v3 = *(void *)(a1 + 96);
    return !v3 || *(void *)(a1 + 88) > v3;
  }
  unint64_t v2 = *(void *)(a2 + 40);
  if (!v2 || *(void *)(a1 + 88) > v2) {
    return 1;
  }
  sub_244CA5224(a2, (void *)(a1 + 96), (_DWORD *)(a1 + 200));
  return 0;
}

uint64_t sub_244CA886C(uint64_t a1, char a2)
{
  return sub_244CA560C(a1, a2, 0);
}

void sub_244CA8874(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192)) + 1744);
  if (v2)
  {
    uint64_t v3 = sub_244CA8E44(a1);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 72);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v12 = v4;
    uint64_t v5 = sub_244CA8E44(a1);
    if (v5) {
      char v6 = *(unsigned char *)(v5 + 24);
    }
    else {
      char v6 = 0;
    }
    char v13 = v6;
    int v7 = *(_DWORD *)(a1 + 76);
    int v14 = *(_DWORD *)(a1 + 72);
    int v15 = 0;
    int v16 = v7;
    BOOL v17 = (*(unsigned char *)(a1 + 210) & 8) != 0;
    *(_OWORD *)int v18 = 0u;
    *(_OWORD *)uint64_t v19 = 0u;
    sub_244CA8A98((uint64_t)&v12, *(void *)(a1 + 168), (uint64_t)buf);
    if (!*(_DWORD *)buf)
    {
      sub_244CA8BA0((uint64_t)&v12, *(void *)(a1 + 176), (uint64_t)buf);
      if (!*(_DWORD *)buf)
      {
        long long v10 = 0uLL;
        uint64_t v11 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v2 + 24))(&v10, v2, &v12);
        if (v10)
        {
          int v8 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)long long buf = v10;
            uint64_t v21 = v11;
            int v9 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Failed to save subscription info error: '%s", buf, 0xCu);
          }
          if (sub_244CC4E58(1u))
          {
            *(_OWORD *)long long buf = v10;
            uint64_t v21 = v11;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0xDu, 1);
          }
        }
      }
    }
    v19[1] = 0;
    if (v19[0])
    {
      j__free(v19[0]);
      v19[0] = 0;
    }
    v18[1] = 0;
    if (v18[0]) {
      j__free(v18[0]);
    }
  }
}

void sub_244CA8A98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1 + 32;
  char v6 = *(void **)(a1 + 32);
  *(void *)(v7 + 8) = 0;
  if (v6)
  {
    j__free(v6);
    *(void *)uint64_t v7 = 0;
  }
  if (!a2)
  {
    int v13 = 0;
    int v14 = 89;
    goto LABEL_16;
  }
  unint64_t v8 = 0;
  size_t v9 = 0;
  uint64_t v10 = a2;
  do
  {
    ++v9;
    uint64_t v10 = *(void *)(v10 + 16);
    v8 += 12;
  }
  while (v10);
  if (v8 >> 16)
  {
    int v14 = 98;
LABEL_15:
    int v13 = 11;
    goto LABEL_16;
  }
  sub_2447E6744((void **)v7, v9, 0xCuLL);
  if (!*(void *)v7)
  {
    int v14 = 100;
    goto LABEL_15;
  }
  *(void *)(a1 + 40) = v9;
  if (v9)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)v7 + v11;
      *(_WORD *)(v12 + 8) = *(_WORD *)(a2 + 8);
      *(_DWORD *)uint64_t v12 = *(_DWORD *)a2;
      *(_DWORD *)(v12 + 4) = *(_DWORD *)(a2 + 4);
      a2 = *(void *)(a2 + 16);
      v11 += 12;
      --v9;
    }
    while (v9);
  }
  int v13 = 0;
  int v14 = 107;
LABEL_16:
  *(_DWORD *)a3 = v13;
  *(void *)(a3 + 8) = "src/app/SubscriptionResumptionStorage.h";
  *(_DWORD *)(a3 + 16) = v14;
}

void sub_244CA8BA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1 + 48;
  char v6 = *(void **)(a1 + 48);
  *(void *)(v7 + 8) = 0;
  if (v6)
  {
    j__free(v6);
    *(void *)uint64_t v7 = 0;
  }
  if (!a2)
  {
    int v13 = 0;
    int v14 = 114;
    goto LABEL_16;
  }
  unint64_t v8 = 0;
  size_t v9 = 0;
  uint64_t v10 = a2;
  do
  {
    ++v9;
    uint64_t v10 = *(void *)(v10 + 16);
    v8 += 12;
  }
  while (v10);
  if (v8 >> 16)
  {
    int v14 = 123;
LABEL_15:
    int v13 = 11;
    goto LABEL_16;
  }
  sub_2447E6744((void **)v7, v9, 0xCuLL);
  if (!*(void *)v7)
  {
    int v14 = 125;
    goto LABEL_15;
  }
  *(void *)(a1 + 56) = v9;
  if (v9)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)v7 + v11;
      *(_WORD *)(v12 + 8) = *(_WORD *)(a2 + 8);
      *(_DWORD *)uint64_t v12 = *(_DWORD *)a2;
      *(_DWORD *)(v12 + 4) = *(_DWORD *)(a2 + 4);
      *(unsigned char *)(v12 + 10) = *(unsigned char *)(a2 + 10);
      a2 = *(void *)(a2 + 16);
      v11 += 12;
      --v9;
    }
    while (v9);
  }
  int v13 = 0;
  int v14 = 132;
LABEL_16:
  *(_DWORD *)a3 = v13;
  *(void *)(a3 + 8) = "src/app/SubscriptionResumptionStorage.h";
  *(_DWORD *)(a3 + 16) = v14;
}

double sub_244CA8CB0(uint64_t a1)
{
  sub_244CAB494((uint64_t)v4, 0, *(void *)(a1 + 168));
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)(a1 + 8) = v4[0];
  *(_OWORD *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 204) = -1;
  *(unsigned char *)(a1 + 206) = 0;
  return result;
}

uint64_t sub_244CA8D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 40) = *(void *)(v4 + 1448);
  if (v5)
  {
    int v6 = *(unsigned __int16 *)(a2 + 8);
    if ((v6 == 0xFFFF || v6 == *(unsigned __int16 *)(a1 + 16))
      && (*(_DWORD *)a2 == -1 || *(_DWORD *)a2 == *(_DWORD *)(a1 + 20)))
    {
      size_t v9 = sub_244CC8484(0xDu, "DataManagement");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "The dirty path intersects the cluster we are currently reporting; reset the iterator to the beginning of that cluster",
          v11,
          2u);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0xDu, 3);
      }
      sub_244CAB8D8(a1 + 8);
      *(_WORD *)(a1 + 204) = -1;
      *(unsigned char *)(a1 + 206) = 0;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 216) + 24))(*(void *)(a1 + 216), a1);
}

uint64_t sub_244CA8E44(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 128);
  unint64_t v1 = (unsigned char *)(a1 + 128);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)sub_2446F7170(v1);

  return sub_244D879D8(v3);
}

uint64_t sub_244CA8E84(uint64_t a1)
{
  return sub_244CA560C(a1, 16, 1);
}

uint64_t sub_244CA8E90(uint64_t a1)
{
  uint64_t v1 = sub_244CA8E44(a1);
  if (v1 && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 80))(v1) & 1) != 0) {
    return 63902;
  }
  else {
    return 1194;
  }
}

uint64_t sub_244CA8EE0()
{
  v0 = *(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24) + 40);

  return v0();
}

uint64_t sub_244CA8F6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

uint64_t sub_244CA8F94()
{
  v0 = *(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24) + 72);

  return v0();
}

uint64_t sub_244CA9008()
{
  v0 = *(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)sub_244DBE094() + 11) + 88) + 24) + 56);

  return v0();
}

uint64_t sub_244CA907C()
{
  return (*((uint64_t (**)(void))*off_268EBD1B0 + 2))();
}

void sub_244CA90AC()
{
}

uint64_t sub_244CA90C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 24))
  {
    int v4 = 75;
    int v5 = 3;
  }
  else if (a2)
  {
    uint64_t v6 = result;
    *(void *)(result + 272) = a2;
    double result = sub_244CA9138(result, 1);
    int v5 = 0;
    *(unsigned char *)(v6 + 248) = 0;
    *(unsigned char *)(v6 + 232) = 0;
    int v4 = 88;
  }
  else
  {
    int v4 = 76;
    int v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/app/WriteHandler.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_244CA9138(uint64_t a1, char a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 281) = a2;
  uint64_t v3 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = *(char *)(a1 + 281);
    if (v4 > 3) {
      int v5 = "N/A";
    }
    else {
      int v5 = (&off_26519B890)[v4];
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v8 = v5;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "IM WH moving to [%s]", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(3u);
  if (result) {
    return sub_244CC4DE0(0xDu, 3);
  }
  return result;
}

uint64_t sub_244CA9250(uint64_t result)
{
  if (*(unsigned char *)(result + 281))
  {
    uint64_t v1 = result;
    sub_244CA92B8(result);
    sub_2447EA4BC(v1 + 8);
    *(unsigned char *)(v1 + 280) &= ~2u;
    return sub_244CA9138(v1, 0);
  }
  return result;
}

uint64_t sub_244CA92B8(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(result + 232);
  if (*(unsigned char *)(result + 232) && (*(unsigned char *)(result + 280) & 8) != 0)
  {
    int v2 = (unsigned __int16 *)sub_244CA14BC((unsigned char *)(result + 232));
    uint64_t result = sub_244CA9E6C((uint64_t)v2, v2);
  }
  unsigned char *v1 = 0;
  return result;
}

uint64_t sub_244CA9304(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_2447A3394(a2);
  if (v2)
  {
    BOOL v3 = *(unsigned __int8 *)(v2 + 14) == 72;
    int v4 = 1;
  }
  else
  {
    BOOL v3 = 0;
    int v4 = 0;
  }
  return v3 | (v4 << 8);
}

uint64_t sub_244CA9344(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  sub_244CC8F5C(0x4AAuLL, 0x26u, &v13);
  if (!v13) {
    return 1;
  }
  sub_244CB62B8((uint64_t)v10);
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_26F9536C8;
  char v12 = 0;
  sub_2447945A0((uint64_t)v11, &v13, 0);
  sub_244CB6318((uint64_t)v10, (uint64_t)v11, 0xFFFFFFFF, (uint64_t)&v14);
  sub_244CCF9D0(a1 + 32, v10, (uint64_t)&v14);
  if (v14.n128_u32[0] || (sub_244CCF2C0(a1 + 32), *(_DWORD *)(a1 + 32)))
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = sub_244CA949C((unsigned char *)a1, a3, a4);
    if (!v8)
    {
      if (sub_244CA97BC(a2))
      {
        uint64_t v8 = 0;
      }
      else
      {
        __n128 v14 = 0uLL;
        uint64_t v15 = 0;
        sub_244CA9858(a1, (uint64_t)v10, &v14);
        uint64_t v8 = v14.n128_u32[0] != 0;
      }
    }
  }
  sub_244CA539C(v11);
  if (v13) {
    sub_244CC8A0C(v13);
  }
  return v8;
}

uint64_t sub_244CA949C(unsigned char *a1, void *a2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_244CB3988((uint64_t)v24);
  uint64_t v25 = 0;
  sub_244CCF15C((uint64_t)v23);
  sub_244CCF15C((uint64_t)v22);
  sub_244CB3988((uint64_t)v21);
  sub_2446DE1E4((uint64_t)v24, a2);
  sub_244CCF054((uint64_t)v23, (uint64_t)v24, &buf);
  uint64_t v7 = buf;
  if (!buf)
  {
    unsigned __int8 v20 = (a1[280] & 2) != 0;
    sub_244CCBBC8(v23, (char *)&v20, &buf);
    uint64_t v7 = buf;
    if (buf == 33 || !buf)
    {
      char v13 = a1[280];
      a1[280] = v13 & 0xFD | (2 * v20);
      unsigned __int8 v20 = v13 & 1;
      sub_244CCE5E4(v23, (char *)&v20, &buf);
      uint64_t v7 = buf;
      if (!buf)
      {
        char v14 = a1[280];
        a1[280] = v14 & 0xFE | v20;
        unsigned __int8 v20 = (v14 & 4) != 0;
        sub_244CCF2B0(v23, (char *)&v20, &buf);
        uint64_t v7 = buf;
        if (buf == 33 || !buf)
        {
          int v15 = v20;
          a1[280] = a1[280] & 0xFB | (4 * v20);
          if (v15)
          {
            uint64_t v16 = sub_244CA1E70((uint64_t)(a1 + 8));
            BOOL v17 = sub_244CA97BC(v16);
            uint64_t v7 = 0x2A0000002ALL;
            if (v17 || (a1[280] & 1) != 0)
            {
              LODWORD(v3) = 653;
              uint64_t v8 = "src/app/WriteHandler.cpp";
              goto LABEL_3;
            }
          }
          sub_244CCE5F4(v23, (uint64_t)v22, &buf);
          uint64_t v7 = buf;
          if (!buf)
          {
            if ((a1[280] ^ a3))
            {
              uint64_t v11 = 201;
              goto LABEL_8;
            }
            sub_244CCF1AC((uint64_t)v22, (uint64_t)v21);
            uint64_t v18 = sub_244CA1E70((uint64_t)(a1 + 8));
            if (sub_244CA97BC(v18)) {
              sub_244CAA828(a1, (uint64_t)v21, (uint64_t)&buf);
            }
            else {
              sub_244CAA184((uint64_t)a1, (uint64_t)v21, (unint64_t *)&buf);
            }
            uint64_t v8 = (const char *)*((void *)&buf + 1);
            uint64_t v7 = buf;
            uint64_t v3 = v27;
            if (buf) {
              goto LABEL_3;
            }
            sub_244CCF0D0((uint64_t)v23, &buf);
            uint64_t v7 = buf;
            if (!buf)
            {
              uint64_t v11 = 0;
              goto LABEL_8;
            }
          }
        }
      }
    }
  }
  uint64_t v8 = (const char *)*((void *)&buf + 1);
  uint64_t v3 = v27;
LABEL_3:
  uint64_t v19 = v7;
  uint64_t v9 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(void *)&long long buf = v19;
    *((void *)&buf + 1) = v8;
    uint64_t v27 = v3;
    uint64_t v10 = sub_244CB7B34((const char **)&buf, 1);
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Failed to process write request: %s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(void *)&long long buf = v19;
    *((void *)&buf + 1) = v8;
    uint64_t v27 = v3;
    sub_244CB7B34((const char **)&buf, 1);
    sub_244CC4DE0(0xDu, 1);
  }
  uint64_t v11 = 128;
LABEL_8:
  if (v25) {
    sub_244CC8A0C(v25);
  }
  return v11;
}

BOOL sub_244CA97BC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v1 = (unsigned char *)(a1 + 88);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_2446F7170(v1);
  uint64_t v4 = *(void *)v3;
  return (*(unsigned int (**)(void))(**(void **)v3 + 16))(*(void *)v3) == 3
      || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) == 4;
}

void sub_244CA9858(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  *a3 = (__n128)xmmword_26519B878;
  a3[1].n128_u64[0] = 239;
  uint64_t v11 = 0;
  if (*(unsigned char *)(a1 + 281) != 2)
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/WriteHandler.cpp";
    int v7 = 242;
LABEL_7:
    a3[1].n128_u32[0] = v7;
    goto LABEL_8;
  }
  sub_244CA9D34(a1, a2, &v11, a3);
  if (a3->n128_u32[0]) {
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 24))
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/app/WriteHandler.cpp";
    int v7 = 247;
    goto LABEL_7;
  }
  uint64_t v5 = sub_244CA1E70(a1 + 8);
  sub_244D64578(v5, 2000);
  uint64_t v6 = sub_244CA1E70(a1 + 8);
  __int16 v8 = (*(unsigned char *)(a1 + 280) & 4) != 0;
  sub_244D645BC(v6, 0x10000u, 7, (uint64_t *)&v11, &v8, (uint64_t)&v9);
  *a3 = v9;
  a3[1].n128_u64[0] = v10;
  if (!a3->n128_u32[0]) {
    sub_244CA9138(a1, 3);
  }
LABEL_8:
  if (v11) {
    sub_244CC8A0C(v11);
  }
}

uint64_t sub_244CA997C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  sub_244CA99E8(a1 + 8, a2);
  uint64_t v8 = sub_244CA9344(a1, a2, a3, a4);
  if (v8 || (*(unsigned char *)(a1 + 280) & 4) == 0) {
    sub_244CA9250(a1);
  }
  return v8;
}

void sub_244CA99E8(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_244E2210C();
  }
  sub_2447EA4BC(a1);
  *(void *)(a1 + 16) = a2;
  *(void *)(a2 + 40) = a1;
}

uint64_t sub_244CA9A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) != a2) {
    sub_244E2221C();
  }
  if (sub_244CA97BC(a2)) {
    sub_244E221B4();
  }
  if (*((_WORD *)a3 + 2)) {
    goto LABEL_4;
  }
  int v15 = *((unsigned __int16 *)a3 + 3);
  int v16 = *a3;
  if (v15 == 1 && v16 == 6)
  {
    uint64_t result = sub_244CA9344(a1, a2, a4, 0);
    if (result)
    {
      sub_244DD5B5C(a2, 0, (uint64_t)buf);
    }
    else if ((*(unsigned char *)(a1 + 280) & 4) != 0)
    {
LABEL_19:
      int v14 = 0;
      int v13 = 218;
      goto LABEL_9;
    }
    uint64_t result = sub_244CA9250(a1);
    goto LABEL_19;
  }
  if (v15 == 1 && v16 == 1)
  {
    *(_OWORD *)long long buf = xmmword_26519B860;
    uint64_t v19 = 193;
    sub_244DD5D28(a4, (uint64_t)buf, v17);
  }
LABEL_4:
  unint64_t v10 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = *a3;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_INFO, "Unexpected message type %d", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xDu, 3);
  }
  sub_244DD5B5C(a2, 0, (uint64_t)buf);
  uint64_t result = sub_244CA9250(a1);
  int v13 = 200;
  int v14 = 42;
LABEL_9:
  *(_DWORD *)a5 = v14;
  *(void *)(a5 + 8) = "src/app/WriteHandler.cpp";
  *(_DWORD *)(a5 + 16) = v13;
  return result;
}

uint64_t sub_244CA9C10(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244CC8484(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_244D64530(a2)) {
      int v6 = 105;
    }
    else {
      int v6 = 114;
    }
    *(_DWORD *)long long buf = 67109376;
    int v9 = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "Time out! failed to receive status response from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_244CC4E58(1u))
  {
    sub_244D64530(a2);
    sub_244CC4DE0(0xDu, 1);
  }
  return sub_244CA9250(a1);
}

void sub_244CA9D34(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD **a3@<X2>, __n128 *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 281) != 2)
  {
    int v10 = 230;
    int v9 = 3;
    goto LABEL_7;
  }
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  uint64_t v7 = a1 + 32;
  a4[1].n128_u64[0] = 0;
  uint64_t v8 = (__n128 *)sub_244CCBBC0(a1 + 32);
  sub_244CCBA3C(v8, a4);
  if (!a4->n128_u32[0])
  {
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_244CCF478(v7, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      sub_2446DE160(a2, a3, a4);
      if (!a4->n128_u32[0])
      {
        int v9 = 0;
        int v10 = 234;
LABEL_7:
        a4->n128_u32[0] = v9;
        a4->n128_u64[1] = (unint64_t)"src/app/WriteHandler.cpp";
        a4[1].n128_u32[0] = v10;
      }
    }
  }
}

uint64_t sub_244CA9DF8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = sub_244CB24F4();
  uint64_t result = sub_244CB27DC(v3, *a2, *((_DWORD *)a2 + 1));
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v5();
  }
  return result;
}

uint64_t sub_244CA9E6C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = sub_244CB24F4();
  uint64_t result = sub_244CB27DC(v3, *a2, *((_DWORD *)a2 + 1));
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v5();
  }
  return result;
}

unsigned char *sub_244CA9EE8@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = result + 232;
  if (!result[232] || (uint64_t v4 = (uint64_t)result, (result[280] & 8) == 0))
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/app/WriteHandler.cpp";
    int v5 = 288;
    goto LABEL_15;
  }
  int v17 = -65536;
  uint64_t v6 = sub_244DAC8EC();
  uint64_t v7 = sub_244CA1E70(v4 + 8);
  sub_24479B4A8(v7, &v15);
  int v8 = *(unsigned __int16 *)(sub_244D87AD4(v15) + 44);
  (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
  uint64_t v9 = sub_244CAA120(v4);
  int v10 = sub_244CA14BC(v3);
  int v11 = *((_DWORD *)v10 + 2);
  uint64_t v15 = *(void *)v10;
  int v16 = v11;
  *(unsigned char *)(v4 + 232) = 0;
  uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 120))(v6, v9, 0);
  if (!result)
  {
    int v5 = 301;
    int v14 = 11;
    goto LABEL_14;
  }
  uint64_t v12 = result;
  if (!(*(unsigned int (**)(unsigned char *, int *))(*(void *)result + 24))(result, &v17))
  {
LABEL_11:
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)v12 + 32))(v12);
    int v14 = 0;
    int v5 = 319;
    goto LABEL_14;
  }
  while (v8 != (unsigned __int16)v17)
  {
LABEL_10:
    if (((*(uint64_t (**)(unsigned char *, int *))(*(void *)v12 + 24))(v12, &v17) & 1) == 0) {
      goto LABEL_11;
    }
  }
  LOWORD(v15) = HIWORD(v17);
  uint64_t result = *(unsigned char **)(v4 + 272);
  if (result)
  {
    uint64_t v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)result + 16))(result, v4, &v15);
    if ((v13 & 1) == 0) {
      sub_244CA9E6C(v13, (unsigned __int16 *)&v15);
    }
    goto LABEL_10;
  }
  int v5 = 312;
  int v14 = 3;
LABEL_14:
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + 8) = "src/app/WriteHandler.cpp";
LABEL_15:
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_244CAA120(uint64_t a1)
{
  uint64_t v1 = sub_244CA1E70(a1 + 8);
  sub_24479B4A8(v1, &v4);
  uint64_t v2 = v4[24];
  (*(void (**)(unsigned __int8 *))(*(void *)v4 + 32))(v4);
  return v2;
}

void sub_244CAA184(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v7 = sub_244CA1E70(a1 + 8);
    sub_24479B4A8(v7, v50);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)v50[0] + 64))(v52);
    (*(void (**)(void))(*(void *)v50[0] + 32))(v50[0]);
    LODWORD(v3) = 375;
    while (1)
    {
      sub_244CB4E58(a2, v50);
      unint64_t v8 = v50[0];
      if (LODWORD(v50[0])) {
        break;
      }
      sub_244CB3988((uint64_t)v51);
      sub_244CCF15C((uint64_t)v50);
      sub_244CCF15C((uint64_t)v49);
      *(_WORD *)long long v46 = 0;
      void v46[2] = 0;
      char v47 = 0;
      *(void *)&v46[4] = 0;
      *(_DWORD *)&v46[11] = 0;
      long long v9 = *(_OWORD *)(a2 + 48);
      void v44[2] = *(_OWORD *)(a2 + 32);
      v44[3] = v9;
      uint64_t v45 = *(void *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 16);
      v44[0] = *(_OWORD *)a2;
      v44[1] = v10;
      sub_244CCFA34((uint64_t)v50, (uint64_t)v44, &v40);
      unint64_t v8 = v40.n128_u64[0];
      if (v40.n128_u32[0]
        || (sub_244CCB8FC((int *)v50, (uint64_t)v49, &v40), unint64_t v8 = v40.n128_u64[0], v40.n128_u32[0])
        || (sub_244CCBEE8(v49, v46, 0, &v40), unint64_t v8 = v40.n128_u64[0], v40.n128_u32[0])
        || (sub_244CCB980((int *)v50, (uint64_t)v51, &v40), unint64_t v8 = v40.n128_u64[0], v40.n128_u32[0]))
      {
        __int16 v23 = (const char *)v40.n128_u64[1];
        unint64_t v3 = v41.n128_u64[0];
LABEL_34:
        unint64_t v30 = v3;
        goto LABEL_35;
      }
      if (!v46[14])
      {
        uint64_t v12 = sub_2447A3394((uint64_t)v46);
        if (v12)
        {
          if (*(unsigned char *)(v12 + 14) == 72) {
            v46[14] = 1;
          }
        }
      }
      uint64_t v11 = *(void *)(a1 + 272);
      if (!v11)
      {
        unint64_t v8 = 0x300000003;
        __int16 v23 = "src/app/WriteHandler.cpp";
        goto LABEL_34;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v11 + 16))(v11, a1, v46) & 1) == 0
        && (v46[14] < 2u || sub_244CAA670((unsigned char *)(a1 + 232), (unsigned __int16 *)v46)))
      {
        if ((*(unsigned char *)(a1 + 280) & 8) != 0
          && !sub_244CAA670((unsigned char *)(a1 + 232), (unsigned __int16 *)v46)
          && *(unsigned char *)(a1 + 232))
        {
          uint64_t v13 = (unsigned __int16 *)sub_244CA14BC((unsigned char *)(a1 + 232));
          sub_244CA9E6C((uint64_t)v13, v13);
        }
        BOOL v14 = sub_244CAA670((unsigned char *)(a1 + 232), (unsigned __int16 *)v46);
        int v15 = v46[14];
        if (!v14 && v46[14])
        {
          sub_244CA9DF8(v14, (unsigned __int16 *)v46);
          *(unsigned char *)(a1 + 280) |= 0x10u;
          int v15 = v46[14];
        }
        *(unsigned char *)(a1 + 280) = *(unsigned char *)(a1 + 280) & 0xF7 | (8 * (v15 != 0));
        *(unsigned char *)(a1 + 232) = 1;
        *(void *)(a1 + 236) = *(void *)v46;
        *(_DWORD *)(a1 + 244) = *(_DWORD *)&v46[8];
        uint64_t v16 = sub_244DD6398();
        (*(void (**)(uint64_t, uint64_t, void, unsigned char *))(*(void *)v16 + 16))(v16, 1, 0, v46);
        sub_244CB62B8((uint64_t)&v40);
        int v39 = 0;
        int v17 = *(__n128 **)(sub_244CCBBC0(a1 + 32) + 24);
        __n128 v18 = v17[3];
        __n128 v20 = *v17;
        __n128 v19 = v17[1];
        __n128 v42 = v17[2];
        __n128 v43 = v18;
        __n128 v40 = v20;
        __n128 v41 = v19;
        sub_244CCB970((int *)v50, &v39, &v37);
        unint64_t v8 = v37.n128_u64[0];
        if (v37.n128_u32[0] != 33)
        {
          if (v37.n128_u32[0])
          {
            __int16 v23 = (const char *)v37.n128_u64[1];
            unint64_t v30 = v38;
            goto LABEL_35;
          }
          char v47 = 1;
          int v48 = v39;
        }
        sub_2447A33A4(v52, (unsigned __int16 *)v46, (uint64_t)v51, a1, (uint64_t)&v37);
        unsigned __int32 v21 = v37.n128_u32[0];
        unsigned __int32 v22 = v37.n128_u32[1];
        __int16 v23 = (const char *)v37.n128_u64[1];
        unint64_t v32 = v38;
        if (v37.n128_u32[0])
        {
          uint64_t v24 = sub_244CCBBC0(a1 + 32);
          uint64_t v25 = *(__n128 **)(v24 + 24);
          __n128 v27 = v42;
          __n128 v26 = v43;
          __n128 v28 = v41;
          __n128 *v25 = v40;
          v25[1] = v28;
          v25[2] = v27;
          v25[3] = v26;
          sub_244CCCE18(v24);
          *(void *)&long long v34 = __PAIR64__(v22, v21);
          *((void *)&v34 + 1) = v23;
          unint64_t v35 = v32;
          sub_24479B818((uint64_t)v36, &v34);
          sub_244CAA6D4(a1, (uint64_t)v46, v36, &v37);
          unsigned __int32 v21 = v37.n128_u32[0];
          unsigned __int32 v22 = v37.n128_u32[1];
          __int16 v23 = (const char *)v37.n128_u64[1];
          unint64_t v32 = v38;
        }
        uint64_t v29 = sub_244DD6398();
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v29 + 16))(v29, 1, 1, v46);
        if (v21)
        {
          unint64_t v8 = __PAIR64__(v22, v21);
          unint64_t v30 = v32;
          goto LABEL_35;
        }
      }
      else
      {
        v37.n128_u16[0] = 156;
        sub_244CAA6D4(a1, (uint64_t)v46, &v37, &v40);
      }
    }
    unint64_t v30 = v50[2];
    if (LODWORD(v50[0]) == 33)
    {
      LODWORD(v8) = 0;
      LODWORD(v30) = 431;
      if ((*(unsigned char *)(a1 + 280) & 4) == 0)
      {
        unint64_t v31 = v8;
        unint64_t v33 = v30;
        sub_244CA92B8(a1);
        unint64_t v8 = v31;
        unint64_t v30 = v33;
      }
      __int16 v23 = "src/app/WriteHandler.cpp";
    }
    else
    {
      __int16 v23 = (const char *)v50[1];
    }
LABEL_35:
    *a3 = v8;
    a3[1] = (unint64_t)v23;
    a3[2] = v30;
  }
  else
  {
    *(_DWORD *)a3 = 172;
    a3[1] = (unint64_t)"src/app/WriteHandler.cpp";
    *((_DWORD *)a3 + 4) = 347;
  }
}

BOOL sub_244CAA670(unsigned char *a1, unsigned __int16 *a2)
{
  if (*a1 && (unint64_t v3 = sub_244CAB470(a1), *(unsigned __int16 *)v3 == *a2) && *((_DWORD *)v3 + 1) == *((_DWORD *)a2 + 1)) {
    return *((_DWORD *)v3 + 2) == *((_DWORD *)a2 + 2);
  }
  else {
    return 0;
  }
}

void sub_244CAA6D4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v8 = sub_244CCBBC0(a1 + 32);
  uint64_t v9 = sub_244CCCAF8(v8);
  long long v10 = (__n128 *)v9;
  if (*a3) {
    *(unsigned char *)(a1 + 280) &= ~0x10u;
  }
  *a4 = *(__n128 *)v8;
  a4[1].n128_u64[0] = *(void *)(v8 + 16);
  if (!a4->n128_u32[0])
  {
    uint64_t v11 = sub_244CCCD30(v9);
    *a4 = *v10;
    a4[1].n128_u64[0] = v10[1].n128_u64[0];
    if (!a4->n128_u32[0])
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      sub_244CCC500(v11, a2, (uint64_t)a4);
      if (!a4->n128_u32[0])
      {
        uint64_t v12 = sub_244CCCD88((uint64_t)v10);
        *a4 = *v10;
        a4[1].n128_u64[0] = v10[1].n128_u64[0];
        if (!a4->n128_u32[0])
        {
          uint64_t v13 = (__n128 *)v12;
          sub_244CCF63C(v12, (uint64_t)a3);
          *a4 = *v13;
          a4[1].n128_u64[0] = v13[1].n128_u64[0];
          if (!a4->n128_u32[0])
          {
            a4->n128_u64[0] = 0;
            a4->n128_u64[1] = 0;
            a4[1].n128_u64[0] = 0;
            sub_244CCBA3C(v10, a4);
            if (!a4->n128_u32[0])
            {
              sub_244CA9138(a1, 2);
              a4->n128_u32[0] = 0;
              a4->n128_u64[1] = (unint64_t)"src/app/WriteHandler.cpp";
              a4[1].n128_u32[0] = 732;
            }
          }
        }
      }
    }
  }
}

void sub_244CAA810(uint64_t a1@<X0>, _OWORD *a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

unsigned char *sub_244CAA828@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (!*((void *)result + 3))
  {
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/app/WriteHandler.cpp";
    *(_DWORD *)(a3 + 16) = 449;
    return result;
  }
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = (uint64_t)(result + 8);
  uint64_t v7 = sub_244CA1E70((uint64_t)(result + 8));
  sub_24479B4A8(v7, v56);
  uint64_t v8 = sub_244D87AD4(v56[0]);
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v8 + 64))(v61);
  (*(void (**)(uint64_t))(*(void *)v56[0] + 32))(v56[0]);
  uint64_t v9 = sub_244CA1E70(v6);
  sub_24479B4A8(v9, v56);
  int v10 = *(unsigned __int16 *)(sub_244D87AD4(v56[0]) + 44);
  (*(void (**)(uint64_t))(*(void *)v56[0] + 32))(v56[0]);
  unsigned int v49 = sub_244CAA120(v5);
  sub_244CB4E58(a2, v56);
  if (LODWORD(v56[0])) {
    goto LABEL_3;
  }
  int v48 = (unsigned char *)(v5 + 232);
  while (2)
  {
    sub_244CB3988((uint64_t)v59);
    sub_244CCF15C((uint64_t)v56);
    sub_244CCF15C((uint64_t)v55);
    *(_WORD *)int v53 = 0;
    void v53[2] = 0;
    char v54 = 0;
    *(void *)&v53[4] = 0;
    *(_DWORD *)&v53[11] = 0;
    long long v16 = *(_OWORD *)(a2 + 48);
    void v51[2] = *(_OWORD *)(a2 + 32);
    v51[3] = v16;
    uint64_t v52 = *(void *)(a2 + 64);
    long long v17 = *(_OWORD *)(a2 + 16);
    v51[0] = *(_OWORD *)a2;
    v51[1] = v17;
    sub_244CCFA34((uint64_t)v56, (uint64_t)v51, &buf);
    int v11 = buf;
    if (buf
      || (sub_244CCB8FC((int *)v56, (uint64_t)v55, &buf), (int v11 = buf) != 0)
      || (sub_244CCBD10(v55, (uint64_t)v53, 0, &buf), (int v11 = buf) != 0))
    {
      uint64_t v13 = (const char *)*((void *)&buf + 1);
      unsigned int v12 = DWORD1(buf);
      int v14 = v71;
      int v15 = DWORD1(v71);
      goto LABEL_4;
    }
    sub_244CCB980((int *)v56, (uint64_t)v59, &buf);
    int v11 = buf;
    unsigned int v12 = DWORD1(buf);
    int v15 = DWORD1(v71);
    if (buf)
    {
      uint64_t v13 = (const char *)*((void *)&buf + 1);
      int v14 = v71;
      goto LABEL_4;
    }
    if (!v53[14]) {
      v53[14] = sub_244CB3B68((uint64_t)v59) == 22;
    }
    __n128 v18 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 67110144;
      DWORD1(buf) = v10;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = HIWORD(*(_DWORD *)&v53[4]);
      HIWORD(buf) = 1024;
      LODWORD(v71) = *(unsigned __int16 *)&v53[4];
      WORD2(v71) = 1024;
      *(_DWORD *)((char *)&v71 + 6) = HIWORD(*(_DWORD *)&v53[8]);
      WORD5(v71) = 1024;
      HIDWORD(v71) = *(unsigned __int16 *)&v53[8];
      _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_INFO, "Received group attribute write for Group=%u Cluster=0x%04X_%04X attribute=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xDu, 3);
    }
    uint64_t v19 = sub_244DAC8EC();
    uint64_t v20 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v19 + 120))(v19, v49, 0);
    if (!v20)
    {
      int v14 = 486;
      int v11 = 11;
      uint64_t v13 = "src/app/WriteHandler.cpp";
      goto LABEL_4;
    }
    uint64_t v21 = v20;
    BOOL v22 = (*(unsigned char *)(v5 + 280) & 8) != 0 && !sub_244CAA670(v48, (unsigned __int16 *)v53) && *v48 != 0;
    int v23 = 0;
    LOBYTE(v47) = 0;
    int v50 = -65536;
    while ((*(unsigned int (**)(uint64_t, int *))(*(void *)v21 + 24))(v21, &v50))
    {
      if (v10 == (unsigned __int16)v50)
      {
        *(_WORD *)int v53 = HIWORD(v50);
        if (v23)
        {
          if (!v22) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v24 = sub_2447A3394((uint64_t)v53);
          int v25 = v53[14];
          if (v24)
          {
            int v23 = 1;
            __n128 v26 = (unsigned char *)(v5 + 232);
            if (!v53[14] && *(unsigned char *)(v24 + 14) == 72)
            {
              int v25 = 1;
              v53[14] = 1;
            }
          }
          else
          {
            int v23 = 0;
            __n128 v26 = (unsigned char *)(v5 + 232);
          }
          LOWORD(buf) = -1;
          DWORD1(buf) = *(_DWORD *)&v53[4];
          DWORD2(buf) = *(unsigned __int16 *)v53;
          BYTE2(buf) = 0;
          LOBYTE(v71) = 0;
          BYTE14(buf) = v25;
          WORD6(buf) = *(_WORD *)&v53[12];
          int v47 = (v25 != 0) & ~sub_244CAA670(v26, (unsigned __int16 *)&buf);
          if (!v22) {
            goto LABEL_37;
          }
        }
        __n128 v27 = sub_244CA14BC(v48);
        int v28 = *((_DWORD *)v27 + 2);
        *(void *)&long long buf = *(void *)v27;
        DWORD2(buf) = v28;
        LOWORD(buf) = HIWORD(v50);
        uint64_t v29 = *(void *)(v5 + 272);
        if (!v29)
        {
          int v14 = 528;
          goto LABEL_62;
        }
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v29 + 16))(v29, v5, &buf);
        if (v30) {
          sub_244CA9E6C(v30, (unsigned __int16 *)&buf);
        }
LABEL_37:
        uint64_t v31 = *(void *)(v5 + 272);
        if (!v31)
        {
          int v14 = 535;
LABEL_62:
          (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
          uint64_t v13 = "src/app/WriteHandler.cpp";
          int v11 = 3;
          goto LABEL_4;
        }
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v31 + 16))(v31, v5, v53);
        if (v32)
        {
          unint64_t v33 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 67110144;
            DWORD1(buf) = HIWORD(v50);
            WORD4(buf) = 1024;
            *(_DWORD *)((char *)&buf + 10) = HIWORD(*(_DWORD *)&v53[4]);
            HIWORD(buf) = 1024;
            LODWORD(v71) = *(unsigned __int16 *)&v53[4];
            WORD2(v71) = 1024;
            *(_DWORD *)((char *)&v71 + 6) = HIWORD(*(_DWORD *)&v53[8]);
            WORD5(v71) = 1024;
            HIDWORD(v71) = *(unsigned __int16 *)&v53[8];
            _os_log_impl(&dword_2446BD000, v33, OS_LOG_TYPE_INFO, "Writing attribute endpoint=%u Cluster=0x%04X_%04X attribute=0x%04X_%04X is conflict with other write transactions.", (uint8_t *)&buf, 0x20u);
          }
          if (sub_244CC4E58(3u)) {
            sub_244CC4DE0(0xDu, 3);
          }
        }
        else
        {
          if (v47) {
            sub_244CA9DF8(v32, (unsigned __int16 *)v53);
          }
          long long v34 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 67110144;
            DWORD1(buf) = HIWORD(v50);
            WORD4(buf) = 1024;
            *(_DWORD *)((char *)&buf + 10) = HIWORD(*(_DWORD *)&v53[4]);
            HIWORD(buf) = 1024;
            LODWORD(v71) = *(unsigned __int16 *)&v53[4];
            WORD2(v71) = 1024;
            *(_DWORD *)((char *)&v71 + 6) = HIWORD(*(_DWORD *)&v53[8]);
            WORD5(v71) = 1024;
            HIDWORD(v71) = *(unsigned __int16 *)&v53[8];
            _os_log_impl(&dword_2446BD000, v34, OS_LOG_TYPE_INFO, "Processing group attribute write for endpoint=%u Cluster=0x%04X_%04X attribute=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
          }
          if (sub_244CC4E58(3u)) {
            sub_244CC4DE0(0xDu, 3);
          }
          long long v71 = v59[1];
          long long v72 = v59[2];
          long long v73 = v59[3];
          uint64_t v74 = v60;
          long long buf = v59[0];
          uint64_t v35 = sub_244DD6398();
          (*(void (**)(uint64_t, uint64_t, void, unsigned char *))(*(void *)v35 + 16))(v35, 1, 0, v53);
          sub_2447A33A4(v61, (unsigned __int16 *)v53, (uint64_t)&buf, v5, (uint64_t)&v62);
          unsigned int v36 = v62;
          unsigned int v12 = HIDWORD(v62);
          int v15 = *(_DWORD *)v65;
          if (v62)
          {
            uint64_t v46 = v63;
            int v45 = v64;
            log = sub_244CC8484(0xDu, "DataManagement");
            if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
            {
              int v41 = HIWORD(v50);
              int v39 = HIWORD(*(_DWORD *)&v53[4]);
              int v40 = *(unsigned __int16 *)&v53[4];
              int v42 = HIWORD(*(_DWORD *)&v53[8]);
              int v43 = *(unsigned __int16 *)&v53[8];
              uint64_t v62 = (const char *)__PAIR64__(v12, v36);
              uint64_t v63 = v46;
              int v64 = v45;
              *(_DWORD *)long long v65 = v15;
              __n128 v37 = sub_244CB7B34(&v62, 1);
              LODWORD(v62) = 67110402;
              HIDWORD(v62) = v41;
              LOWORD(v63) = 1024;
              *(_DWORD *)((char *)&v63 + 2) = v39;
              HIWORD(v63) = 1024;
              int v64 = v40;
              *(_WORD *)long long v65 = 1024;
              *(_DWORD *)&v65[2] = v42;
              __int16 v66 = 1024;
              int v67 = v43;
              __int16 v68 = 2080;
              uint64_t v69 = v37;
              _os_log_impl(&dword_2446BD000, log, OS_LOG_TYPE_ERROR, "WriteClusterData Endpoint=%u Cluster=0x%04X_%04X Attribute =0x%04X_%04X failed: %s", (uint8_t *)&v62, 0x2Au);
            }
            if (sub_244CC4E58(1u))
            {
              uint64_t v62 = (const char *)__PAIR64__(v12, v36);
              uint64_t v63 = v46;
              int v64 = v45;
              *(_DWORD *)long long v65 = v15;
              sub_244CB7B34(&v62, 1);
              sub_244CC4DE0(0xDu, 1);
            }
          }
          uint64_t v38 = sub_244DD6398();
          (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v38 + 16))(v38, 1, 1, v53);
        }
      }
    }
    *(_WORD *)int v53 = -1;
    *(unsigned char *)(v5 + 280) = *(unsigned char *)(v5 + 280) & 0xF7 | (8 * (v53[14] != 0));
    *(unsigned char *)(v5 + 232) = 1;
    *(_DWORD *)(v5 + 244) = *(_DWORD *)&v53[8];
    *(void *)(v5 + 236) = *(void *)v53;
    (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
    sub_244CB4E58(a2, v56);
    if (!LODWORD(v56[0])) {
      continue;
    }
    break;
  }
LABEL_3:
  sub_244CA9EE8((unsigned char *)v5, (uint64_t)v56);
  int v11 = v56[0];
  unsigned int v12 = HIDWORD(v56[0]);
  uint64_t v13 = (const char *)v56[1];
  int v14 = v57;
  int v15 = v58;
LABEL_4:
  uint64_t result = sub_244CA9EE8((unsigned char *)v5, (uint64_t)v56);
  *(_DWORD *)a3 = v11;
  *(_DWORD *)(a3 + 4) = v12;
  *(void *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 16) = v14;
  *(_DWORD *)(a3 + 20) = v15;
  return result;
}

void sub_244CAB2B0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  unsigned int v4 = *a3;
  __int16 v7 = v4;
  if (v4 <= 1)
  {
    unsigned __int8 v5 = a3[1];
    if (v5)
    {
      unsigned __int8 v6 = a3[2];
      LOBYTE(v7) = v4 != 0;
      HIBYTE(v7) = v5;
      unsigned __int8 v8 = v6;
    }
  }
  sub_244CAA6D4(a1, a2, &v7, a4);
}

void sub_244CAB308(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  __int16 v4 = 256;
  char v5 = a3;
  sub_244CAB2B0(a1, a2, (unsigned __int8 *)&v4, a4);
}

void sub_244CAB338(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  __int16 v4 = 257;
  char v5 = a3;
  sub_244CAB2B0(a1, a2, (unsigned __int8 *)&v4, a4);
}

const char *sub_244CAB368(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 281);
  if (v1 > 3) {
    return "N/A";
  }
  else {
    return (&off_26519B890)[v1];
  }
}

void *sub_244CAB390(void *a1)
{
  *a1 = &unk_26F953000;
  a1[1] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 1));
  return a1;
}

void sub_244CAB3F0(void *a1)
{
  *a1 = &unk_26F953000;
  a1[1] = &unk_26F945360;
  sub_2447EA4BC((uint64_t)(a1 + 1));

  JUMPOUT(0x245695FA0);
}

unsigned char *sub_244CAB470(unsigned char *a1)
{
  if (!*a1) {
    sub_244E22468();
  }
  return a1 + 4;
}

uint64_t sub_244CAB494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 20) = -1;
  *(unsigned char *)(a1 + 28) = -1;
  *(_WORD *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 30) = -1;
  sub_244CAB4E4(a1);
  return a1;
}

uint64_t sub_244CAB4E4(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(int **)a1;
  if (!*(void *)a1)
  {
LABEL_26:
    uint64_t result = 0;
    *(void *)&v14[1] = 0;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    *(void *)(a1 + 11) = *(void *)v14;
    *(unsigned char *)(a1 + 19) = v14[8];
    return result;
  }
  while (1)
  {
    BOOL v3 = *((__int16 *)v2 + 4) == -1 || *v2 == -1 || v2[1] == -1;
    *(unsigned char *)(a1 + 10) = v3;
    unsigned int v4 = *(unsigned __int16 *)(a1 + 20);
    if (v4 == 0xFFFF) {
      break;
    }
LABEL_11:
    if (v4 < *(unsigned __int16 *)(a1 + 22))
    {
      while (1)
      {
        if (sub_244855CE8((unsigned __int16)v4))
        {
          int v6 = sub_2448565A0(*(unsigned __int16 *)(a1 + 20));
          unsigned int v7 = *(unsigned __int8 *)(a1 + 28);
          if (v7 == 255)
          {
            sub_244CAB7CC(a1, *(int **)a1, v6);
            *(_WORD *)(a1 + 24) = -1;
            *(unsigned char *)(a1 + 30) = -1;
            unsigned int v7 = *(unsigned __int8 *)(a1 + 28);
          }
          if (v7 < *(unsigned __int8 *)(a1 + 29)) {
            break;
          }
        }
LABEL_24:
        LOWORD(v4) = *(_WORD *)(a1 + 20) + 1;
        *(_WORD *)(a1 + 20) = v4;
        *(unsigned char *)(a1 + 28) = -1;
        *(_WORD *)(a1 + 24) = -1;
        *(unsigned char *)(a1 + 30) = -1;
        if (*(unsigned __int16 *)(a1 + 22) <= (unsigned __int16)v4) {
          goto LABEL_25;
        }
      }
      while (1)
      {
        sub_244856E1C(v6, v7, 1, (uint64_t)v14);
        int v8 = *(_DWORD *)sub_2446F12CC(v14);
        unsigned int v9 = *(unsigned __int16 *)(a1 + 24);
        if (v9 == 0xFFFF)
        {
          if (*(unsigned __int8 *)(a1 + 30) != 255) {
            goto LABEL_20;
          }
          sub_244CAB824(a1, *(void *)a1, v6, v8);
          unsigned int v9 = *(unsigned __int16 *)(a1 + 24);
        }
        if (v9 < *(unsigned __int16 *)(a1 + 26))
        {
          sub_2448576E4(v6, v8, v9, (uint64_t)v14);
          int v13 = *(_DWORD *)sub_2446F12CC(v14);
          *(_DWORD *)(a1 + 12) = v8;
          *(_DWORD *)(a1 + 16) = v13;
          *(_WORD *)(a1 + 8) = v6;
          ++*(_WORD *)(a1 + 24);
          return 1;
        }
LABEL_20:
        uint64_t v10 = *(unsigned __int8 *)(a1 + 30);
        if (v10 < *(unsigned __int8 *)(a1 + 31))
        {
          int v12 = dword_244EAE0FC[v10];
          *(_DWORD *)(a1 + 12) = v8;
          *(_DWORD *)(a1 + 16) = v12;
          *(_WORD *)(a1 + 8) = v6;
          *(unsigned char *)(a1 + 30) = v10 + 1;
          return 1;
        }
        LOBYTE(v7) = *(unsigned char *)(a1 + 28) + 1;
        *(unsigned char *)(a1 + 28) = v7;
        *(_WORD *)(a1 + 24) = -1;
        *(unsigned char *)(a1 + 30) = -1;
        if (*(unsigned __int8 *)(a1 + 29) <= v7) {
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    uint64_t v2 = *(int **)(*(void *)a1 + 16);
    *(void *)a1 = v2;
    *(_WORD *)(a1 + 20) = -1;
    if (!v2) {
      goto LABEL_26;
    }
  }
  int v5 = *((unsigned __int16 *)v2 + 4);
  if (v5 == 0xFFFF || *v2 == -1 || v2[1] == -1)
  {
    sub_244CAB780(a1, (uint64_t)v2);
    *(unsigned char *)(a1 + 28) = -1;
    unsigned int v4 = *(unsigned __int16 *)(a1 + 20);
    goto LABEL_11;
  }
  *(_WORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *v2;
  *(void *)(a1 + 16) = v2[1];
  return 1;
}

uint64_t sub_244CAB780(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 == 0xFFFF)
  {
    *(_WORD *)(a1 + 20) = 0;
    uint64_t result = sub_244855D0C();
  }
  else
  {
    int v4 = sub_2448562B0(v3);
    *(_WORD *)(a1 + 20) = v4;
    uint64_t result = (v4 + 1);
  }
  *(_WORD *)(a1 + 22) = result;
  return result;
}

uint64_t sub_244CAB7CC(uint64_t a1, int *a2, int a3)
{
  int v4 = *a2;
  if (v4 == -1)
  {
    *(unsigned char *)(a1 + 28) = 0;
    uint64_t result = sub_2448569FC(a3, 1);
  }
  else
  {
    int v5 = sub_244856354(a3, v4, 64);
    *(unsigned char *)(a1 + 28) = v5;
    uint64_t result = (v5 + 1);
  }
  *(unsigned char *)(a1 + 29) = result;
  return result;
}

uint64_t sub_244CAB824(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == -1)
  {
    *(_WORD *)(a1 + 24) = 0;
    uint64_t result = sub_244857668(a3, a4);
    *(_WORD *)(a1 + 26) = result;
    *(unsigned char *)(a1 + 30) = 0;
    char v9 = 3;
  }
  else
  {
    uint64_t result = sub_244857688(a3, a4, v5);
    *(_WORD *)(a1 + 24) = result;
    *(_WORD *)(a1 + 26) = result + 1;
    *(unsigned char *)(a1 + 30) = -1;
    if (((result + 1) & 0x10000) != 0)
    {
      uint64_t v8 = 0;
      while (dword_244EAE0FC[v8] != *(_DWORD *)(a2 + 4))
      {
        if (++v8 == 3) {
          goto LABEL_6;
        }
      }
      *(unsigned char *)(a1 + 30) = v8;
      char v9 = v8 + 1;
    }
    else
    {
LABEL_6:
      char v9 = 0;
    }
  }
  *(unsigned char *)(a1 + 31) = v9;
  return result;
}

uint64_t sub_244CAB8D8(uint64_t a1)
{
  if (*(void *)a1)
  {
    if (*(_DWORD *)(*(void *)a1 + 4) == -1)
    {
      *(_WORD *)(a1 + 24) = -1;
      *(unsigned char *)(a1 + 30) = -1;
      return sub_244CAB4E4(a1);
    }
  }
  return a1;
}

uint64_t sub_244CAB904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))();
}

uint64_t sub_244CAB92C(uint64_t a1)
{
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  char v7 = 0;
  __int16 v6 = 0;
  sub_244CAB9E4(a1, (unsigned __int16 *)(a1 + 8), &v6, 1, (uint64_t)&v8);
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  long long v4 = v8;
  uint64_t v5 = v9;
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v2 + 72))(v2, &v4);
}

void sub_244CAB9E4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned char *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 8;
  if (*a2 == *(unsigned __int16 *)(a1 + 8)
    && *((_DWORD *)a2 + 1) == *(_DWORD *)(a1 + 12)
    && *((_DWORD *)a2 + 2) == *(_DWORD *)(a1 + 16))
  {
    if ((a4 & 1) == 0)
    {
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/app/BufferedReadCallback.cpp";
      int v8 = 185;
      goto LABEL_14;
    }
    if (*a3)
    {
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/app/BufferedReadCallback.cpp";
      int v8 = 195;
LABEL_14:
      *(_DWORD *)(a5 + 16) = v8;
      return;
    }
  }
  if (!*(unsigned char *)(a1 + 22))
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/app/BufferedReadCallback.cpp";
    int v8 = 201;
    goto LABEL_14;
  }
  __int16 v11 = 0;
  sub_244CB3988((uint64_t)v9);
  uint64_t v10 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  sub_244CABBC0(a1, (uint64_t)v9, (void *)a5);
  if (!*(_DWORD *)a5)
  {
    *(unsigned char *)(a1 + 22) = 1;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    sub_244CB4E58((uint64_t)v9, (void *)a5);
    if (!*(_DWORD *)a5)
    {
      (*(void (**)(void, uint64_t, unsigned char *, __int16 *))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), v7, v9, &v11);
      sub_244CAC6AC((uint64_t *)(a1 + 32));
      *(void *)&v12[1] = 0;
      *(_DWORD *)&v12[8] = 0;
      *(_WORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 10) = 0;
      *(void *)(a1 + 11) = *(void *)v12;
      *(unsigned char *)(a1 + 19) = 0;
      *(_WORD *)(a1 + 20) = 0;
      *(unsigned char *)(a1 + 22) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/app/BufferedReadCallback.cpp";
      *(_DWORD *)(a5 + 16) = 227;
    }
  }
  if (v10) {
    j__free(v10);
  }
}

void sub_244CABBC0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __int16 v6 = *(uint64_t **)(a1 + 32);
  uint64_t v7 = *(uint64_t **)(a1 + 40);
  if (v6 == v7)
  {
    size_t v10 = 4;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *v6++;
      v8 += *(void *)(v9 + 16);
    }
    while (v6 != v7);
    size_t v10 = v8 + 4;
  }
  uint64_t v19 = sub_244CC4D90(v10, 1uLL);
  if (v19)
  {
    int v20 = 0;
    sub_244CAC5EC((uint64_t)v17, (uint64_t *)&v19, v10);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB7594(v17, 256, 22, &v20, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      int v12 = *(void **)(a1 + 32);
      __int16 v11 = *(void **)(a1 + 40);
      while (v12 != v11)
      {
        sub_244CB3988((uint64_t)v15);
        long long v16 = 0;
        sub_2446DE1E4((uint64_t)v15, v12);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB4E58((uint64_t)v15, a3);
        if (*(_DWORD *)a3)
        {
          if (v16) {
            sub_244CC8A0C(v16);
          }
          goto LABEL_8;
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB7128((char *)v17, 256, (uint64_t)v15, (uint64_t)a3);
        int v13 = *(_DWORD *)a3;
        if (v16) {
          sub_244CC8A0C(v16);
        }
        if (v13) {
          goto LABEL_8;
        }
        ++v12;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB7708((uint64_t)v17, v20, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        sub_244CABDB4((uint64_t)v17, &v19, v15);
        uint64_t v14 = (uint64_t)v19;
        if ((void **)(a2 + 72) != &v19)
        {
          *(void *)(a2 + 72) = v19;
          uint64_t v19 = 0;
        }
        sub_244CB39B8(a2, v14, v10);
        *(_DWORD *)a3 = 0;
        a3[1] = "src/app/BufferedReadCallback.cpp";
        *((_DWORD *)a3 + 4) = 101;
      }
    }
LABEL_8:
    if (v18) {
      j__free(v18);
    }
    if (v19) {
      j__free(v19);
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/app/BufferedReadCallback.cpp";
    *((_DWORD *)a3 + 4) = 80;
  }
}

void sub_244CABDB4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB6414(a1, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    __int16 v6 = (void *)(a1 + 64);
    if ((void *)(a1 + 64) != a2)
    {
      *a2 = *v6;
      void *v6 = 0;
    }
    sub_244CB62E0(a1, 0, 0);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVWriter.h";
    *((_DWORD *)a3 + 4) = 1316;
  }
}

void *sub_244CABE38@<X0>(int64x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB62B8((uint64_t)v26);
  v27[1] = 0;
  v27[2] = 0;
  v27[0] = &unk_26F9536C8;
  char v28 = 0;
  sub_244CC8F5C(0x4AAuLL, 0x26u, &v29);
  int v25 = v29;
  if (!v29)
  {
    int v9 = 121;
    int v10 = 11;
LABEL_7:
    *(_DWORD *)a3 = v10;
    *(void *)(a3 + 8) = "src/app/BufferedReadCallback.cpp";
    *(_DWORD *)(a3 + 16) = v9;
    goto LABEL_8;
  }
  sub_2447945A0((uint64_t)v27, &v25, 0);
  sub_244CB6318((uint64_t)v26, (uint64_t)v27, 0xFFFFFFFF, (uint64_t)&v29);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB7128(v26, 256, a2, a3);
  if (!*(_DWORD *)a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_2446DE160((uint64_t)v26, &v25, (void *)a3);
    if (!*(_DWORD *)a3)
    {
      sub_244CC889C(&v25);
      unint64_t v6 = a1[3].u64[0];
      uint64_t v7 = (void *)a1[2].i64[1];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v12 = a1[2].i64[0];
        uint64_t v13 = ((uint64_t)v7 - v12) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          abort();
        }
        uint64_t v14 = v6 - v12;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        uint64_t v32 = a1 + 3;
        if (v16) {
          long long v17 = (char *)sub_244CAC704((uint64_t)a1[3].i64, v16);
        }
        else {
          long long v17 = 0;
        }
        __n128 v18 = &v17[8 * v13];
        uint64_t v19 = &v17[8 * v16];
        uint64_t v31 = v19;
        *(void *)__n128 v18 = v25;
        uint64_t v8 = v18 + 8;
        int v25 = 0;
        v30.i64[1] = (uint64_t)(v18 + 8);
        uint64_t v21 = (void *)a1[2].i64[0];
        int v20 = (void *)a1[2].i64[1];
        if (v20 == v21)
        {
          int64x2_t v23 = vdupq_n_s64((unint64_t)v20);
        }
        else
        {
          do
          {
            uint64_t v22 = *--v20;
            *((void *)v18 - 1) = v22;
            v18 -= 8;
            void *v20 = 0;
          }
          while (v20 != v21);
          int64x2_t v23 = a1[2];
          uint64_t v8 = (void *)v30.i64[1];
          uint64_t v19 = v31;
        }
        a1[2].i64[0] = (uint64_t)v18;
        a1[2].i64[1] = (uint64_t)v8;
        int64x2_t v30 = v23;
        uint64_t v24 = a1[3].i64[0];
        a1[3].i64[0] = (uint64_t)v19;
        uint64_t v31 = (char *)v24;
        uint64_t v29 = (_WORD *)v23.i64[0];
        sub_244CAC73C((uint64_t)&v29);
      }
      else
      {
        *uint64_t v7 = v25;
        uint64_t v8 = v7 + 1;
        int v25 = 0;
      }
      int v10 = 0;
      a1[2].i64[1] = (uint64_t)v8;
      int v9 = 135;
      goto LABEL_7;
    }
  }
LABEL_8:
  if (v25) {
    sub_244CC8A0C(v25);
  }
  return sub_244CA539C(v27);
}

void sub_244CAC054(int64x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v7 = *(unsigned __int8 *)(a2 + 14);
  if (v7 == 4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CABE38(a1, a3, (uint64_t)a4);
LABEL_9:
    if (*(_DWORD *)a4) {
      return;
    }
    goto LABEL_10;
  }
  if (v7 != 1)
  {
LABEL_10:
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/BufferedReadCallback.cpp";
    int v8 = 170;
LABEL_12:
    *((_DWORD *)a4 + 4) = v8;
    return;
  }
  int v12 = 0;
  if (sub_244CB3B68(a3) != 22)
  {
    *(_DWORD *)a4 = 35;
    a4[1] = "src/app/BufferedReadCallback.cpp";
    int v8 = 145;
    goto LABEL_12;
  }
  sub_244CAC6AC(a1[2].i64);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CB4C90(a3, &v12, (uint64_t)a4);
  while (!*(_DWORD *)a4)
  {
    sub_244CB4E58(a3, v11);
    if (LODWORD(v11[0]))
    {
      if (LODWORD(v11[0]) == 33)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_244CB4D00(a3, v12, (uint64_t)a4);
        goto LABEL_9;
      }
      uint64_t v9 = v11[1];
      uint64_t v10 = v11[2];
      *a4 = v11[0];
      a4[1] = v9;
      a4[2] = v10;
      return;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CABE38(a1, a3, (uint64_t)a4);
  }
}

void sub_244CAC1A0(int64x2_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  sub_244CAB9E4((uint64_t)a1, (unsigned __int16 *)a2, a4, 0, (uint64_t)&v15);
  int v8 = v15;
  long long v18 = v16;
  int v19 = v17;
  if (v15) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(a2 + 14)) {
    BOOL v10 = *a4 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    sub_244CAC054(a1, a2, a3, &v15);
    int v8 = v15;
    long long v18 = v16;
    int v19 = v17;
    if (v15)
    {
LABEL_2:
      uint64_t v9 = a1[3].i64[1];
      int v12 = v8;
      long long v13 = v18;
      int v14 = v19;
      (*(void (**)(uint64_t, int *))(*(void *)v9 + 72))(v9, &v12);
      return;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1[3].i64[1] + 48))(a1[3].i64[1], a2, a3, a4);
  }
  uint64_t v11 = *(void *)a2;
  a1[1].i32[0] = *(_DWORD *)(a2 + 8);
  a1->i64[1] = v11;
  LOBYTE(v11) = *(unsigned char *)(a2 + 14);
  a1[1].i16[2] = *(_WORD *)(a2 + 12);
  a1[1].i8[6] = v11;
  LODWORD(v11) = *(unsigned __int8 *)(a2 + 16);
  a1[1].i8[8] = v11;
  if (v11) {
    a1[1].i32[3] = *(_DWORD *)(a2 + 20);
  }
}

uint64_t sub_244CAC320(uint64_t a1)
{
  *(void *)a1 = &unk_26F953058;
  int v3 = (void **)(a1 + 32);
  sub_244CAC658(&v3);
  return a1;
}

uint64_t sub_244CAC378(uint64_t a1)
{
  *(void *)a1 = &unk_26F953058;
  int v3 = (void **)(a1 + 32);
  sub_244CAC658(&v3);
  return MEMORY[0x245695FA0](a1, 0x10A1C405D84613CLL);
}

uint64_t sub_244CAC3E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 40))();
}

uint64_t sub_244CAC40C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 56))();
}

uint64_t sub_244CAC434(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 64))(v3, a2, &v5);
}

uint64_t sub_244CAC48C(uint64_t a1, long long *a2)
{
  sub_244CAC6AC((uint64_t *)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 56);
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v4 + 72))(v4, &v6);
}

uint64_t sub_244CAC4FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))();
}

uint64_t sub_244CAC524(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))();
}

uint64_t sub_244CAC54C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
}

uint64_t sub_244CAC574(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 104))();
}

uint64_t sub_244CAC59C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 112))();
}

uint64_t sub_244CAC5C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 120))();
}

uint64_t sub_244CAC5EC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  sub_244CB62B8(a1);
  *(void *)(v6 + 64) = 0;
  uint64_t v7 = (uint64_t *)(v6 + 64);
  if ((uint64_t *)(v6 + 64) == a2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    *uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = *v7;
  }
  sub_244CB62E0(a1, v8, a3);
  return a1;
}

void sub_244CAC658(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_244CAC6AC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_244CAC6AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(_WORD **)(v4 - 8);
      v4 -= 8;
      long long v5 = v6;
      if (v6) {
        sub_244CC8A0C(v5);
      }
      *(void *)(v3 - 8) = 0;
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  a1[1] = v2;
}

void *sub_244CAC704(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_2447A0110();
  }
  return operator new(8 * a2);
}

uint64_t sub_244CAC73C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_244CAC774(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v5 = (void *)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    uint64_t v6 = *(_WORD **)(i - 8);
    if (v6) {
      sub_244CC8A0C(v6);
    }
    void *v5 = 0;
  }
}

uint64_t sub_244CAC7D4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 136) = 1;
  *(void *)(result + 144) = a2;
  return result;
}

uint64_t sub_244CAC7E4(uint64_t a1)
{
  return a1 + 176;
}

uint64_t sub_244CAC7EC(uint64_t result, uint64_t *a2, unsigned char *a3)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v3;
  *(unsigned char *)(result + 12) = *a3;
  LODWORD(v3) = a3[1];
  *(unsigned char *)(result + 13) = v3;
  if (v3) {
    *(unsigned char *)(result + 14) = a3[2];
  }
  return result;
}

uint64_t sub_244CAC81C@<X0>(uint64_t result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = *a2;
  unsigned int v8 = *((_DWORD *)a2 + 1);
  if (v7 == 0xFFFF || v8 == -1)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/app/ClusterStateCache.cpp";
    int v10 = 441;
LABEL_11:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  uint64_t result = sub_244CAC8CC(result, v7, v8, (uint64_t)&v12);
  *(_OWORD *)a4 = v12;
  *(void *)(a4 + 16) = v13;
  if (!*(_DWORD *)a4)
  {
    int v11 = *(unsigned __int8 *)(result + 32);
    *(unsigned char *)a3 = v11;
    if (v11) {
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 36);
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/ClusterStateCache.cpp";
    int v10 = 446;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_244CAC8CC(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = sub_244CACD8C(a1, a2, a4);
  if (*(_DWORD *)a4) {
    return 0;
  }
  uint64_t v10 = *(void *)(v6 + 8);
  uint64_t v8 = v6 + 8;
  uint64_t v9 = v10;
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v11 = v8;
  do
  {
    unsigned int v12 = *(_DWORD *)(v9 + 32);
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      int v14 = (uint64_t *)v9;
    }
    else {
      int v14 = (uint64_t *)(v9 + 8);
    }
    if (v13) {
      uint64_t v11 = v9;
    }
    uint64_t v9 = *v14;
  }
  while (*v14);
  if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a3)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a4 + 16) = 361;
    return v11 + 40;
  }
  else
  {
LABEL_14:
    uint64_t result = 0;
    *(_DWORD *)a4 = 16;
    *(void *)(a4 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a4 + 16) = 357;
  }
  return result;
}

void sub_244CAC984(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unsigned int v7 = *(void **)(a1 + 120);
  long long v5 = (void *)(a1 + 120);
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v9 = v5;
  do
  {
    unint64_t v10 = v6[6];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unsigned int v12 = v6;
    }
    else {
      unsigned int v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 != v5 && v9[6] <= a2)
  {
    *(_DWORD *)a4 = 0;
    sub_244CB3988((uint64_t)v14);
    int v15 = 0;
    sub_244CC8F2C(v9[10]);
    BOOL v13 = (_WORD *)v9[10];
    sub_2446DE1E4((uint64_t)v14, &v13);
    if (v13) {
      sub_244CC8A0C(v13);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB4E58((uint64_t)v14, a4);
    if (!*(_DWORD *)a4)
    {
      sub_244CB3B04(a3, (uint64_t)v14);
      *(_DWORD *)a4 = 0;
      a4[1] = "src/app/ClusterStateCache.cpp";
      *((_DWORD *)a4 + 4) = 326;
    }
    if (v15) {
      sub_244CC8A0C(v15);
    }
  }
  else
  {
LABEL_12:
    *(_DWORD *)a4 = 16;
    a4[1] = "src/app/ClusterStateCache.cpp";
    *((_DWORD *)a4 + 4) = 397;
  }
}

void *sub_244CACA98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  long long v5 = *(void **)(a1 + 120);
  uint64_t v3 = (void *)(a1 + 120);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[6];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v3 && v6[6] <= a2)
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a3 + 16) = 401;
    return v6 + 4;
  }
  else
  {
LABEL_12:
    uint64_t result = 0;
    *(_DWORD *)a3 = 16;
    *(void *)(a3 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a3 + 16) = 397;
  }
  return result;
}

uint64_t *sub_244CACB18@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244CAF87C(a1 + 152, a2);
  if ((uint64_t *)(a1 + 160) == result)
  {
    int v10 = 494;
    int v9 = 16;
  }
  else
  {
    *a3 = *((unsigned char *)result + 40);
    int v8 = *((unsigned __int8 *)result + 41);
    a3[1] = v8;
    int v9 = 0;
    if (v8) {
      a3[2] = *((unsigned char *)result + 42);
    }
    int v10 = 498;
  }
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = "src/app/ClusterStateCache.cpp";
  *(_DWORD *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_244CACBA0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v3 = a2;
  return sub_244CAF958(a1 + 16, &v3);
}

uint64_t sub_244CACBCC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = a1 + 24;
  uint64_t v3 = v4;
  if (v4)
  {
    unsigned int v5 = *(unsigned __int16 *)a2;
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != result && v5 >= *(unsigned __int16 *)(v6 + 32)) {
      return sub_244CAFE2C(v6 + 40, a2 + 1);
    }
  }
  return result;
}

uint64_t sub_244CACC1C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = a1 + 24;
  uint64_t v3 = v4;
  if (v4)
  {
    unsigned int v5 = *a2;
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != result && v5 >= *(unsigned __int16 *)(v6 + 32))
    {
      uint64_t v12 = *(void *)(v6 + 48);
      uint64_t v10 = v6 + 48;
      uint64_t v11 = v12;
      if (v12)
      {
        unsigned int v13 = *((_DWORD *)a2 + 1);
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(_DWORD *)(v11 + 32);
          BOOL v16 = v15 >= v13;
          if (v15 >= v13) {
            int v17 = (uint64_t *)v11;
          }
          else {
            int v17 = (uint64_t *)(v11 + 8);
          }
          if (v16) {
            uint64_t v14 = v11;
          }
          uint64_t v11 = *v17;
        }
        while (*v17);
        if (v14 != v10 && v13 >= *(_DWORD *)(v14 + 32)) {
          return sub_244CAFED4(v14 + 40, (unsigned int *)a2 + 2);
        }
      }
    }
  }
  return result;
}

void sub_244CACCAC(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)(a1 + 120);
  sub_2447E7C50(a1 + 112, *(void **)(a1 + 120));
  *(v4 - 1) = v4;
  void *v4 = 0;
  v4[1] = 0;
  if (a2) {
    *(unsigned char *)(a1 + 136) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 160);
  unsigned int v5 = (void *)(a1 + 160);
  sub_244794718((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  void *v5 = 0;
  v5[1] = 0;
}

uint64_t sub_244CACD0C@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(__int16 *)(result + 240) == -1 || *(_DWORD *)(result + 244) == -1)
  {
    int v4 = 692;
    int v3 = 3;
  }
  else
  {
    int v3 = 0;
    *a2 = *(void *)(result + 240);
    int v4 = 690;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/app/ClusterStateCache.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

BOOL sub_244CACD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int16 *)(a2 + 8) < *(unsigned __int16 *)(a3 + 8) || *(_DWORD *)a2 < *(_DWORD *)a3;
}

BOOL sub_244CACD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a2 + 16) < *(void *)(a3 + 16);
}

uint64_t sub_244CACD8C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v3 = a1 + 24;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(unsigned __int16 *)(v6 + 32) <= a2)
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a3 + 16) = 340;
    return v6 + 40;
  }
  else
  {
LABEL_12:
    uint64_t result = 0;
    *(_DWORD *)a3 = 16;
    *(void *)(a3 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a3 + 16) = 336;
  }
  return result;
}

uint64_t sub_244CACE0C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = sub_244CAC8CC(a1, a2, a3, a5);
  if (*(_DWORD *)a5) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v9 = v7 + 8;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = v9;
  do
  {
    unsigned int v13 = *(_DWORD *)(v10 + 32);
    BOOL v14 = v13 >= a4;
    if (v13 >= a4) {
      unsigned int v15 = (uint64_t *)v10;
    }
    else {
      unsigned int v15 = (uint64_t *)(v10 + 8);
    }
    if (v14) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v15;
  }
  while (*v15);
  if (v12 != v9 && *(_DWORD *)(v12 + 32) <= a4)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a5 + 16) = 383;
    return v12 + 40;
  }
  else
  {
LABEL_14:
    uint64_t result = 0;
    *(_DWORD *)a5 = 16;
    *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a5 + 16) = 379;
  }
  return result;
}

void sub_244CACEC4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v57 = -1;
  uint64_t v10 = a1 + 24;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v11 = a1 + 16;
  if (!v9) {
    goto LABEL_12;
  }
  unsigned int v12 = *a2;
  uint64_t v13 = a1 + 24;
  do
  {
    unsigned int v14 = *(unsigned __int16 *)(v9 + 32);
    BOOL v15 = v14 >= v12;
    if (v14 >= v12) {
      BOOL v16 = (uint64_t *)v9;
    }
    else {
      BOOL v16 = (uint64_t *)(v9 + 8);
    }
    if (v15) {
      uint64_t v13 = v9;
    }
    uint64_t v9 = *v16;
  }
  while (*v16);
  if (v13 == v10 || v12 < *(unsigned __int16 *)(v13 + 32)) {
LABEL_12:
  }
    uint64_t v13 = a1 + 24;
  if (!a3)
  {
    if (*(unsigned char *)(a1 + 248))
    {
      LOWORD(v58) = *(_WORD *)a4;
      if (BYTE1(v58)) {
        BYTE2(v58) = *(unsigned char *)(a4 + 2);
      }
      uint64_t v57 = 0;
    }
    else
    {
      if (*(unsigned char *)(a4 + 1)) {
        int v19 = 8;
      }
      else {
        int v19 = 5;
      }
      LODWORD(v58) = v19;
      uint64_t v57 = 2;
    }
LABEL_62:
    if (v13 == v10)
    {
      unint64_t v30 = *(void *)(a1 + 104);
      uint64_t v31 = *(_WORD **)(a1 + 96);
      if ((unint64_t)v31 >= v30)
      {
        uint64_t v33 = *(void *)(a1 + 88);
        uint64_t v34 = (uint64_t)v31 - v33;
        if ((uint64_t)v31 - v33 <= -3) {
          abort();
        }
        uint64_t v35 = v34 >> 1;
        unint64_t v36 = v30 - v33;
        if (v36 <= (v34 >> 1) + 1) {
          unint64_t v37 = v35 + 1;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v36 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v38 = v37;
        }
        if (v38) {
          int v39 = (char *)sub_244CB0320(a1 + 104, v38);
        }
        else {
          int v39 = 0;
        }
        int v41 = &v39[2 * v35];
        int v42 = &v39[2 * v38];
        *(_WORD *)int v41 = *a2;
        uint64_t v32 = v41 + 2;
        uint64_t v44 = *(char **)(a1 + 88);
        int v43 = *(char **)(a1 + 96);
        if (v43 != v44)
        {
          do
          {
            __int16 v45 = *((_WORD *)v43 - 1);
            v43 -= 2;
            *((_WORD *)v41 - 1) = v45;
            v41 -= 2;
          }
          while (v43 != v44);
          int v43 = *(char **)(a1 + 88);
        }
        *(void *)(a1 + 88) = v41;
        *(void *)(a1 + 96) = v32;
        *(void *)(a1 + 104) = v42;
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *uint64_t v31 = *a2;
        uint64_t v32 = v31 + 1;
      }
      *(void *)(a1 + 96) = v32;
    }
    *(void *)uint64_t v52 = a2;
    uint64_t v46 = sub_244CAFF8C(v11, a2, (uint64_t)&unk_244E79D97, (_WORD **)v52);
    *(void *)uint64_t v52 = a2 + 2;
    int v47 = sub_244CB024C((uint64_t)(v46 + 20), (unsigned int *)a2 + 1, (uint64_t)&unk_244E79D97, (_DWORD **)v52);
    *(void *)uint64_t v52 = a2 + 4;
    int v48 = sub_244CB0354((uint64_t)(v47 + 10), (unsigned int *)a2 + 2, (uint64_t)&unk_244E79D97, (_DWORD **)v52);
    sub_244CAD608((uint64_t)(v48 + 10), &v57);
    if (*(unsigned char *)(a1 + 248)) {
      sub_244CB041C((uint64_t **)(a1 + 40), a2, (uint64_t)a2);
    }
    *(_DWORD *)a5 = 0;
    a5[1] = "src/app/ClusterStateCache.cpp";
    int v40 = 178;
    goto LABEL_85;
  }
  unsigned int v56 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244CAD3E0(a3, &v56, a5);
  if (*(_DWORD *)a5) {
    goto LABEL_86;
  }
  if (!*(unsigned char *)(a1 + 248))
  {
    if (v57 == 1)
    {
      uint64_t v59 = 0;
      if (v58)
      {
        j__free(v58);
        int v58 = 0;
      }
    }
    LODWORD(v58) = v56;
    uint64_t v57 = 2;
LABEL_38:
    *(void *)uint64_t v52 = a2;
    uint64_t v20 = sub_244CAFF8C(v11, a2, (uint64_t)&unk_244E79D97, (_WORD **)v52);
    *(void *)uint64_t v52 = a2 + 2;
    *((unsigned char *)sub_244CB024C((uint64_t)(v20 + 20), (unsigned int *)a2 + 1, (uint64_t)&unk_244E79D97, (_DWORD **)v52) + 72) = 0;
    int v21 = *(unsigned __int16 *)(a1 + 240);
    if (v21 != 0xFFFF)
    {
      int v22 = *(_DWORD *)(a1 + 244);
      if (v22 != -1 && (v21 != *a2 || v22 != *((_DWORD *)a2 + 1))) {
        sub_244CAD570((unsigned __int16 *)a1);
      }
    }
    int64x2_t v23 = *(void **)(a1 + 64);
    if (v23 != (void *)(a1 + 72))
    {
      while (1)
      {
        int v24 = *((unsigned __int16 *)v23 + 18);
        BOOL v25 = v24 == 0xFFFF || v24 == *a2;
        if (v25)
        {
          int v26 = *((_DWORD *)v23 + 7);
          BOOL v27 = v26 == -1 || v26 == *((_DWORD *)a2 + 1);
          if (v27 && *((_DWORD *)v23 + 8) == -1) {
            break;
          }
        }
        char v28 = (void *)v23[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            char v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (void *)v23[2];
            BOOL v25 = *v29 == (void)v23;
            int64x2_t v23 = v29;
          }
          while (!v25);
        }
        int64x2_t v23 = v29;
        if (v29 == (void *)(a1 + 72)) {
          goto LABEL_61;
        }
      }
      *(void *)uint64_t v52 = a2;
      unsigned int v49 = sub_244CAFF8C(v11, a2, (uint64_t)&unk_244E79D97, (_WORD **)v52);
      *(void *)uint64_t v52 = a2 + 2;
      int v50 = sub_244CB024C((uint64_t)(v49 + 20), (unsigned int *)a2 + 1, (uint64_t)&unk_244E79D97, (_DWORD **)v52);
      int v51 = *((unsigned __int8 *)a2 + 16);
      *((unsigned char *)v50 + 64) = v51;
      if (v51) {
        v50[17] = *((_DWORD *)a2 + 5);
      }
    }
LABEL_61:
    *(void *)(a1 + 240) = *(void *)a2;
    goto LABEL_62;
  }
  uint64_t v55 = 0;
  uint64_t v17 = v56;
  char v54 = sub_244CC4D90(v56, 1uLL);
  if (!v54)
  {
    *(_DWORD *)a5 = 11;
    a5[1] = "src/app/ClusterStateCache.cpp";
    int v40 = 96;
LABEL_85:
    *((_DWORD *)a5 + 4) = v40;
    goto LABEL_86;
  }
  uint64_t v55 = v17;
  sub_244CAC5EC((uint64_t)v52, (uint64_t *)&v54, v56);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_244CB7128(v52, 256, a3, (uint64_t)a5);
  if (*(_DWORD *)a5 || (*a5 = 0, a5[1] = 0, a5[2] = 0, sub_244CABDB4((uint64_t)v52, &v54, a5), *(_DWORD *)a5))
  {
    char v18 = 0;
  }
  else
  {
    sub_244CAD4F8(&v57, &v54);
    char v18 = 1;
  }
  if (v53) {
    j__free(v53);
  }
  uint64_t v55 = 0;
  if (v54) {
    j__free(v54);
  }
  if (v18) {
    goto LABEL_38;
  }
LABEL_86:
  if (v57 == 1)
  {
    uint64_t v59 = 0;
    if (v58) {
      j__free(v58);
    }
  }
}

void sub_244CAD3E0(uint64_t a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v10);
  sub_244CB3B04((uint64_t)v10, a1);
  unint64_t v6 = v11;
  unsigned int v12 = sub_244CC4D90(v11, 1uLL);
  if (v12)
  {
    unint64_t v13 = v6;
    sub_244CAC5EC((uint64_t)v7, (uint64_t *)&v12, v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB7128(v7, 256, (uint64_t)v10, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a2 = v8;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CABDB4((uint64_t)v7, &v12, a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/app/ClusterStateCache.cpp";
        *((_DWORD *)a3 + 4) = 65;
      }
    }
    if (v9) {
      j__free(v9);
    }
    unint64_t v13 = 0;
    if (v12) {
      j__free(v12);
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/app/ClusterStateCache.cpp";
    *((_DWORD *)a3 + 4) = 60;
  }
}

void sub_244CAD4F8(void *a1, void *a2)
{
  uint64_t v4 = a1 + 1;
  if (*a1 == 1)
  {
    a1[2] = 0;
    uint64_t v5 = (void *)a1[1];
    if (v5) {
      j__free(v5);
    }
  }
  void *v4 = 0;
  v4[1] = 0;
  if (v4 != a2)
  {
    a1[2] = a2[1];
    a2[1] = 0;
    a1[1] = *a2;
    *a2 = 0;
  }
  *a1 = 1;
}

unsigned __int16 *sub_244CAD570(unsigned __int16 *result)
{
  if ((__int16)result[120] != -1)
  {
    unint64_t v1 = result + 122;
    if (*((_DWORD *)result + 61) != -1)
    {
      uint64_t v3 = result + 120;
      uint64_t v2 = sub_244CAFF8C((uint64_t)(result + 8), result + 120, (uint64_t)&unk_244E79D97, &v3);
      uint64_t v3 = v1;
      uint64_t result = (unsigned __int16 *)sub_244CB024C((uint64_t)(v2 + 20), (unsigned int *)v1, (uint64_t)&unk_244E79D97, (_DWORD **)&v3);
      if (*((unsigned char *)result + 64))
      {
        *((unsigned char *)result + 72) = *((unsigned char *)result + 64);
        *((_DWORD *)result + 19) = *((_DWORD *)result + 17);
        *((unsigned char *)result + 64) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_244CAD608(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  if (*(void *)a1 == 1)
  {
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void **)(a1 + 8);
    if (v5)
    {
      j__free(v5);
      void *v4 = 0;
    }
  }
  *(void *)a1 = *a2;
  uint64_t v6 = *a2;
  if (*a2 == 2)
  {
    *(_DWORD *)uint64_t v4 = *((_DWORD *)a2 + 2);
  }
  else if (v6 == 1)
  {
    void *v4 = 0;
    v4[1] = 0;
    if ((uint64_t *)a1 != a2)
    {
      *(void *)(a1 + 16) = a2[2];
      a2[2] = 0;
      *(void *)(a1 + 8) = a2[1];
      a2[1] = 0;
    }
  }
  else
  {
    if (v6) {
      goto LABEL_15;
    }
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    int v7 = *((unsigned __int8 *)a2 + 9);
    *(unsigned char *)(a1 + 9) = v7;
    if (v7)
    {
      *(unsigned char *)(a1 + 10) = *((unsigned char *)a2 + 10);
      *((unsigned char *)a2 + 9) = 0;
    }
  }
  if (*a2 == 1)
  {
    a2[2] = 0;
    int v8 = (void *)a2[1];
    if (v8)
    {
      j__free(v8);
      a2[1] = 0;
    }
  }
LABEL_15:
  *a2 = -1;
  return a1;
}

void sub_244CAD6F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  if (!a3)
  {
    if (a4)
    {
      if (*(unsigned char *)(a1 + 248))
      {
        *(void *)int v19 = a2;
        unint64_t v13 = sub_244CB0614((uint64_t **)(a1 + 152), (unsigned __int16 *)a2, (uint64_t)&unk_244E79D97, (void **)v19);
        v13[40] = *a4;
        int v14 = a4[1];
        v13[41] = v14;
        if (v14) {
          v13[42] = a4[2];
        }
      }
    }
    goto LABEL_22;
  }
  uint64_t v9 = (unsigned char *)(a1 + 136);
  if (*(unsigned char *)(a1 + 136))
  {
    unint64_t v10 = *(void *)(a2 + 16);
    if (v10 <= *(void *)sub_24479DC08(v9))
    {
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
      int v15 = 192;
LABEL_23:
      *(_DWORD *)(a5 + 16) = v15;
      return;
    }
  }
  if (!*(unsigned char *)(a1 + 248))
  {
LABEL_21:
    *(unsigned char *)(a1 + 136) = 1;
    *(void *)(a1 + 144) = *(void *)(a2 + 16);
LABEL_22:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
    int v15 = 227;
    goto LABEL_23;
  }
  sub_244CC8F5C(0x4AAuLL, 0x26u, &v22);
  if (!v22)
  {
    *(_DWORD *)a5 = 11;
    *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
    int v15 = 197;
    goto LABEL_23;
  }
  sub_244CB62B8((uint64_t)v19);
  v20[1] = 0;
  v20[2] = 0;
  v20[0] = &unk_26F9536C8;
  char v21 = 0;
  sub_2447945A0((uint64_t)v20, &v22, 0);
  sub_244CB6318((uint64_t)v19, (uint64_t)v20, 0xFFFFFFFF, (uint64_t)v17);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_244CB7128(v19, 256, a3, a5);
  int v11 = 0;
  if (!*(_DWORD *)a5)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    sub_2446DE160((uint64_t)v19, &v22, (void *)a5);
    if (*(_DWORD *)a5)
    {
      int v11 = 0;
    }
    else
    {
      sub_244CC889C(&v22);
      long long v16 = *(_OWORD *)(a2 + 16);
      v17[0] = *(_OWORD *)a2;
      v17[1] = v16;
      void v17[2] = *(_OWORD *)(a2 + 32);
      char v18 = v22;
      int v22 = 0;
      sub_244CB0544(a1 + 112, (uint64_t)v17, (uint64_t)v17);
      if (v18) {
        sub_244CC8A0C(v18);
      }
      int v11 = 1;
    }
  }
  sub_244CA539C(v20);
  if (v22) {
    sub_244CC8A0C(v22);
  }
  if (v11) {
    goto LABEL_21;
  }
}

uint64_t sub_244CAD930(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 48);
  unint64_t v1 = *(void **)(a1 + 48);
  *(void *)(a1 + 240) = 0xFFFFFFFF0000FFFFLL;
  sub_244794718(a1 + 40, v1);
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  v2[6] = v2[5];
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)*(v2 - 5) + 24);

  return v3();
}

void sub_244CAD9A8(uint64_t a1)
{
  sub_244CAD570((unsigned __int16 *)a1);
  *(void *)(a1 + 240) = 0xFFFFFFFF0000FFFFLL;
  v14[0] = 0;
  v14[1] = 0;
  unint64_t v13 = (uint64_t *)v14;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 != (void *)(a1 + 48))
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a1, (uint64_t)v2 + 28);
      unint64_t v12 = *((unsigned __int16 *)v2 + 14) | ((unint64_t)*((unsigned int *)v2 + 8) << 32);
      sub_244CB06AC(&v13, (unsigned __int16 *)&v12, &v12);
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != (void *)(a1 + 48));
    uint64_t v6 = v13;
    if (v13 != (uint64_t *)v14)
    {
      do
      {
        (*(void (**)(void, uint64_t, void, void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), a1, *((unsigned __int16 *)v6 + 14), *((unsigned int *)v6 + 8));
        int v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            int v8 = v7;
            int v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            int v8 = (uint64_t *)v6[2];
            BOOL v5 = *v8 == (void)v6;
            uint64_t v6 = v8;
          }
          while (!v5);
        }
        uint64_t v6 = v8;
      }
      while (v8 != (uint64_t *)v14);
    }
  }
  uint64_t v9 = *(unsigned __int16 **)(a1 + 88);
  unint64_t v10 = *(unsigned __int16 **)(a1 + 96);
  while (v9 != v10)
  {
    unsigned int v11 = *v9++;
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), a1, v11);
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  sub_244794718((uint64_t)&v13, v14[0]);
}

uint64_t sub_244CADB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(a2 + 14) >= 2u) {
    sub_244E225C4();
  }
  sub_244CB3988((uint64_t)v11);
  if (a3)
  {
    int v8 = v11;
    sub_244CB3B04((uint64_t)v11, a3);
  }
  else
  {
    int v8 = 0;
  }
  sub_244CACEC4(a1, (unsigned __int16 *)a2, a3, a4, v10);
  return (*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2, v8, a4);
}

uint64_t sub_244CADC3C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (!(a3 | (unint64_t)a4)) {
    sub_244E22668();
  }
  sub_244CB3988((uint64_t)v11);
  if (a3)
  {
    int v8 = v11;
    sub_244CB3B04((uint64_t)v11, a3);
  }
  else
  {
    int v8 = 0;
  }
  sub_244CAD6F8(a1, a2, a3, a4, (uint64_t)&v10);
  return (*(uint64_t (**)(void, uint64_t, unsigned char *, char *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2, v8, a4);
}

void sub_244CADCFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, __n128 *a5@<X8>)
{
  *a5 = (__n128)xmmword_26519B8B0;
  a5[1].n128_u64[0] = 573;
  sub_244CB62B8((uint64_t)&v41);
  uint64_t v10 = *(void *)(a3 + 8);
  if (v10)
  {
    unsigned int v11 = *(unsigned int **)a3;
    uint64_t v12 = *(void *)a3 + 12 * v10;
    do
    {
      if (v11[1] == -1)
      {
        uint64_t v13 = *(void *)(a3 + 8);
        if (v13)
        {
          uint64_t v14 = *(void *)a3;
          uint64_t v15 = 12 * v13;
          while (*(_DWORD *)(v14 + 4) == -1 || !sub_244CADF70((uint64_t)v11, v14))
          {
            v14 += 12;
            v15 -= 12;
            if (!v15) {
              goto LABEL_9;
            }
          }
        }
        else
        {
LABEL_9:
          sub_244CB0798((uint64_t **)(a1 + 64), v11, (uint64_t)v11);
        }
      }
      v11 += 3;
    }
    while (v11 != (unsigned int *)v12);
  }
  uint64_t v38 = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  sub_244CADFD8(a1, (uint64_t *)&v38);
  *a4 = 0;
  long long v16 = v38;
  uint64_t v17 = v39;
  if (v38 == v39) {
    goto LABEL_37;
  }
  while (1)
  {
    char v18 = *(long long **)(a2 + 24);
    long long v19 = v18[3];
    long long v21 = *v18;
    long long v20 = v18[1];
    long long v43 = v18[2];
    long long v44 = v19;
    long long v41 = v21;
    long long v42 = v20;
    uint64_t v22 = *(void *)(a3 + 8);
    if (v22) {
      break;
    }
LABEL_27:
    v16 += 6;
    if (v16 == v17) {
      goto LABEL_36;
    }
  }
  uint64_t v23 = 12 * v22;
  uint64_t v24 = *(void *)a3 + 8;
  BOOL v25 = (unsigned __int16 *)v24;
  while (1)
  {
    int v27 = *v25;
    v25 += 6;
    int v26 = v27;
    if (v27 == 0xFFFF || v26 == *((unsigned __int16 *)v16 + 6))
    {
      int v29 = *(_DWORD *)(v24 - 8);
      if (v29 == -1 || v29 == *v16) {
        break;
      }
    }
    uint64_t v24 = (uint64_t)v25;
    v23 -= 12;
    if (!v23) {
      goto LABEL_27;
    }
  }
  sub_244CCD500(a2, (uint64_t)v16, a5);
  unsigned __int32 v31 = a5->n128_u32[0];
  if (!a5->n128_u32[0])
  {
    *a4 = 1;
    goto LABEL_27;
  }
  if (v31 == 11 || v31 == 25)
  {
    uint64_t v32 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v37 = 0;
      _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_DEFAULT, "OnUpdateDataVersionFilterList out of space; rolling back",
        (uint8_t *)&v37,
        2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    uint64_t v33 = *(_OWORD **)(a2 + 24);
    long long v34 = v41;
    long long v35 = v42;
    long long v36 = v44;
    v33[2] = v43;
    void v33[3] = v36;
    _OWORD *v33 = v34;
    v33[1] = v35;
    sub_244CCCE18(a2);
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/app/ClusterStateCache.cpp";
    a5[1].n128_u32[0] = 638;
  }
LABEL_36:
  long long v16 = v38;
LABEL_37:
  if (v16)
  {
    int v39 = v16;
    operator delete(v16);
  }
}

BOOL sub_244CADF70(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 8);
  BOOL result = 0;
  if (v2 == 0xFFFF || ((v3 = *(unsigned __int16 *)(a2 + 8), v3 != 0xFFFF) ? (BOOL v4 = v2 == v3) : (BOOL v4 = 1), v4))
  {
    if (*(_DWORD *)a1 == -1 || (*(_DWORD *)a2 != -1 ? (BOOL v5 = *(_DWORD *)a1 == *(_DWORD *)a2) : (BOOL v5 = 1), v5))
    {
      int v6 = *(_DWORD *)(a1 + 4);
      if (v6 == -1) {
        return 1;
      }
      int v7 = *(_DWORD *)(a2 + 4);
      if (v7 == -1 || v6 == v7) {
        return 1;
      }
    }
  }
  return result;
}

void sub_244CADFD8(uint64_t a1, uint64_t *a2)
{
  int v2 = a2;
  int v3 = *(void **)(a1 + 16);
  int v26 = (void *)(a1 + 24);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      BOOL v4 = (void *)v3[5];
      if (v4 != v3 + 6)
      {
        __int16 v25 = *((_WORD *)v3 + 16);
        do
        {
          if (*((unsigned char *)v4 + 72))
          {
            BOOL v5 = sub_2446F12CC((unsigned char *)v4 + 72);
            int v6 = (void *)v4[5];
            if (v6 != v4 + 6)
            {
              uint64_t v7 = 0;
              int v28 = *(_DWORD *)v5;
              int v29 = *((_DWORD *)v4 + 8);
              do
              {
                uint64_t v8 = v6[5];
                if (v8 == 2)
                {
                  unsigned int v9 = *(_DWORD *)sub_244CAE2C0(v6 + 5);
                }
                else if (v8 == 1)
                {
                  sub_244CB3988((uint64_t)&v33);
                  uint64_t v10 = *sub_244CAE2E8(v6 + 5);
                  unsigned int v11 = sub_244CAE2E8(v6 + 5);
                  sub_244CB39B8((uint64_t)&v33, v10, v11[1]);
                  uint64_t v30 = 0;
                  uint64_t v31 = 0;
                  uint64_t v32 = 0;
                  sub_244CB4E58((uint64_t)&v33, &v30);
                  if (v30) {
                    return;
                  }
                  uint64_t v30 = 0;
                  uint64_t v31 = 0;
                  uint64_t v32 = 0;
                  sub_244CB4F70((uint64_t)&v33, (uint64_t)&v30);
                  if (v30) {
                    return;
                  }
                  unsigned int v9 = v38;
                }
                else
                {
                  if (v8) {
                    sub_244E2270C();
                  }
                  if (*((unsigned char *)sub_244CAE29C(v6 + 5) + 1)) {
                    unsigned int v9 = 8;
                  }
                  else {
                    unsigned int v9 = 5;
                  }
                }
                uint64_t v12 = (void *)v6[1];
                if (v12)
                {
                  do
                  {
                    uint64_t v13 = v12;
                    uint64_t v12 = (void *)*v12;
                  }
                  while (v12);
                }
                else
                {
                  do
                  {
                    uint64_t v13 = (void *)v6[2];
                    BOOL v14 = *v13 == (void)v6;
                    int v6 = v13;
                  }
                  while (!v14);
                }
                v7 += v9;
                int v6 = v13;
              }
              while (v13 != v4 + 6);
              int v2 = a2;
              if (v7)
              {
                int v33 = v29;
                unsigned __int8 v34 = 1;
                int v35 = v28;
                __int16 v36 = v25;
                uint64_t v37 = v7;
                unint64_t v15 = a2[1];
                if (v15 >= a2[2])
                {
                  uint64_t v17 = sub_244CB0884(a2, (uint64_t)&v33);
                }
                else
                {
                  *(_DWORD *)unint64_t v15 = v29;
                  int v16 = v34;
                  *(unsigned char *)(v15 + 4) = v34;
                  if (v16)
                  {
                    *(_DWORD *)(v15 + 8) = v35;
                    unsigned __int8 v34 = 0;
                  }
                  *(_WORD *)(v15 + 12) = v36;
                  *(void *)(v15 + 16) = v37;
                  uint64_t v17 = v15 + 24;
                }
                a2[1] = v17;
              }
            }
          }
          char v18 = (void *)v4[1];
          if (v18)
          {
            do
            {
              long long v19 = v18;
              char v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              long long v19 = (void *)v4[2];
              BOOL v14 = *v19 == (void)v4;
              BOOL v4 = v19;
            }
            while (!v14);
          }
          BOOL v4 = v19;
        }
        while (v19 != v3 + 6);
      }
      long long v20 = (void *)v3[1];
      if (v20)
      {
        do
        {
          long long v21 = v20;
          long long v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          long long v21 = (void *)v3[2];
          BOOL v14 = *v21 == (void)v3;
          int v3 = v21;
        }
        while (!v14);
      }
      int v3 = v21;
    }
    while (v21 != v26);
  }
  uint64_t v22 = (int *)v2[1];
  unint64_t v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v2) >> 3));
  if (v22 == (int *)*v2) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  sub_244CB0AB4(*v2, v22, (uint64_t)&v33, v24, 1);
}

void *sub_244CAE29C(void *a1)
{
  if (*a1) {
    sub_244E227B0();
  }
  return a1 + 1;
}

void *sub_244CAE2C0(void *a1)
{
  if (*a1 != 2) {
    sub_244E227B0();
  }
  return a1 + 1;
}

void *sub_244CAE2E8(void *a1)
{
  if (*a1 != 1) {
    sub_244E227B0();
  }
  return a1 + 1;
}

uint64_t sub_244CAE31C(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  *(void *)BOOL result = &unk_26F953100;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = result + 48;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = result + 72;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 112) = result + 120;
  *(unsigned char *)(result + 136) = 0;
  *(void *)(result + 160) = 0;
  *(void *)(result + 152) = result + 160;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = &unk_26F953058;
  *(_WORD *)(result + 184) = 0;
  *(unsigned char *)(result + 186) = 0;
  *(unsigned char *)(result + 200) = 0;
  *(void *)(result + 188) = 0;
  *(_DWORD *)(result + 195) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 232) = result;
  *(_WORD *)(result + 240) = -1;
  *(_DWORD *)(result + 244) = -1;
  *(unsigned char *)(result + 248) = 0;
  int v3 = *a3;
  *(unsigned char *)(result + 136) = v3;
  if (v3) {
    *(void *)(result + 144) = *((void *)a3 + 1);
  }
  return result;
}

uint64_t sub_244CAE3F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 136);
  *(unsigned char *)a2 = v3;
  if (v3) {
    *(void *)(a2 + 8) = *(void *)(result + 144);
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/app/ClusterStateCache.h";
  *(_DWORD *)(a3 + 16) = 290;
  return result;
}

uint64_t sub_244CAE420(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v3 = a2;
  return sub_244CB1C38(a1 + 16, &v3);
}

uint64_t sub_244CAE44C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = a1 + 24;
  uint64_t v3 = v4;
  if (v4)
  {
    unsigned int v5 = *(unsigned __int16 *)a2;
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        unsigned int v9 = (uint64_t *)v3;
      }
      else {
        unsigned int v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != result && v5 >= *(unsigned __int16 *)(v6 + 32)) {
      return sub_244CB1CE0(v6 + 40, a2 + 1);
    }
  }
  return result;
}

uint64_t sub_244CAE49C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = a1 + 24;
  uint64_t v3 = v4;
  if (v4)
  {
    unsigned int v5 = *a2;
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        unsigned int v9 = (uint64_t *)v3;
      }
      else {
        unsigned int v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != result && v5 >= *(unsigned __int16 *)(v6 + 32))
    {
      uint64_t v12 = *(void *)(v6 + 48);
      uint64_t v10 = v6 + 48;
      uint64_t v11 = v12;
      if (v12)
      {
        unsigned int v13 = *((_DWORD *)a2 + 1);
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(_DWORD *)(v11 + 32);
          BOOL v16 = v15 >= v13;
          if (v15 >= v13) {
            uint64_t v17 = (uint64_t *)v11;
          }
          else {
            uint64_t v17 = (uint64_t *)(v11 + 8);
          }
          if (v16) {
            uint64_t v14 = v11;
          }
          uint64_t v11 = *v17;
        }
        while (*v17);
        if (v14 != v10 && v13 >= *(_DWORD *)(v14 + 32)) {
          return sub_244CB1D88(v14 + 40, (unsigned int *)a2 + 2);
        }
      }
    }
  }
  return result;
}

void sub_244CAE52C(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)(a1 + 120);
  sub_244CAF75C(a1 + 112, *(void **)(a1 + 120));
  *(v4 - 1) = v4;
  void *v4 = 0;
  v4[1] = 0;
  if (a2) {
    *(unsigned char *)(a1 + 136) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 160);
  unsigned int v5 = (void *)(a1 + 160);
  sub_244794718((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  void *v5 = 0;
  v5[1] = 0;
}

uint64_t sub_244CAE58C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = sub_244CAC8CC(a1, a2, a3, a5);
  if (*(_DWORD *)a5) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v9 = v7 + 8;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = v9;
  do
  {
    unsigned int v13 = *(_DWORD *)(v10 + 28);
    BOOL v14 = v13 >= a4;
    if (v13 >= a4) {
      unsigned int v15 = (uint64_t *)v10;
    }
    else {
      unsigned int v15 = (uint64_t *)(v10 + 8);
    }
    if (v14) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v15;
  }
  while (*v15);
  if (v12 != v9 && *(_DWORD *)(v12 + 28) <= a4)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a5 + 16) = 383;
    return v12 + 32;
  }
  else
  {
LABEL_14:
    uint64_t result = 0;
    *(_DWORD *)a5 = 16;
    *(void *)(a5 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a5 + 16) = 379;
  }
  return result;
}

void sub_244CAE644(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 24;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v10 = a1 + 16;
  if (!v8) {
    goto LABEL_12;
  }
  unsigned int v11 = *a2;
  uint64_t v12 = a1 + 24;
  do
  {
    unsigned int v13 = *(unsigned __int16 *)(v8 + 32);
    BOOL v14 = v13 >= v11;
    if (v13 >= v11) {
      unsigned int v15 = (uint64_t *)v8;
    }
    else {
      unsigned int v15 = (uint64_t *)(v8 + 8);
    }
    if (v14) {
      uint64_t v12 = v8;
    }
    uint64_t v8 = *v15;
  }
  while (*v15);
  if (v12 == v9 || v11 < *(unsigned __int16 *)(v12 + 32)) {
LABEL_12:
  }
    uint64_t v12 = a1 + 24;
  if (a3)
  {
    int v47 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_244CAD3E0(a3, &v47, a5);
    if (*(_DWORD *)a5) {
      return;
    }
    int v16 = v47;
    int v48 = a2;
    uint64_t v17 = sub_244CAFF8C(v10, a2, (uint64_t)&unk_244E79D97, &v48);
    int v48 = a2 + 2;
    *((unsigned char *)sub_244CB024C((uint64_t)(v17 + 20), (unsigned int *)a2 + 1, (uint64_t)&unk_244E79D97, (_DWORD **)&v48) + 72) = 0;
    int v18 = *(unsigned __int16 *)(a1 + 240);
    if (v18 != 0xFFFF)
    {
      int v19 = *(_DWORD *)(a1 + 244);
      if (v19 != -1 && (v18 != *a2 || v19 != *((_DWORD *)a2 + 1))) {
        sub_244CAD570((unsigned __int16 *)a1);
      }
    }
    long long v20 = *(void **)(a1 + 64);
    if (v20 != (void *)(a1 + 72))
    {
      while (1)
      {
        int v21 = *((unsigned __int16 *)v20 + 18);
        BOOL v22 = v21 == 0xFFFF || v21 == *a2;
        if (v22)
        {
          int v23 = *((_DWORD *)v20 + 7);
          BOOL v24 = v23 == -1 || v23 == *((_DWORD *)a2 + 1);
          if (v24 && *((_DWORD *)v20 + 8) == -1) {
            break;
          }
        }
        __int16 v25 = (void *)v20[1];
        if (v25)
        {
          do
          {
            int v26 = v25;
            __int16 v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            int v26 = (void *)v20[2];
            BOOL v22 = *v26 == (void)v20;
            long long v20 = v26;
          }
          while (!v22);
        }
        long long v20 = v26;
        if (v26 == (void *)(a1 + 72)) {
          goto LABEL_38;
        }
      }
      int v48 = a2;
      long long v44 = sub_244CAFF8C(v10, a2, (uint64_t)&unk_244E79D97, &v48);
      int v48 = a2 + 2;
      __int16 v45 = sub_244CB024C((uint64_t)(v44 + 20), (unsigned int *)a2 + 1, (uint64_t)&unk_244E79D97, (_DWORD **)&v48);
      int v46 = *((unsigned __int8 *)a2 + 16);
      *((unsigned char *)v45 + 64) = v46;
      if (v46) {
        v45[17] = *((_DWORD *)a2 + 5);
      }
    }
LABEL_38:
    *(void *)(a1 + 240) = *(void *)a2;
  }
  else if (*(unsigned char *)(a4 + 1))
  {
    int v16 = 8;
  }
  else
  {
    int v16 = 5;
  }
  if (v12 == v9)
  {
    unint64_t v27 = *(void *)(a1 + 104);
    int v28 = *(_WORD **)(a1 + 96);
    if ((unint64_t)v28 >= v27)
    {
      uint64_t v30 = *(void *)(a1 + 88);
      uint64_t v31 = (uint64_t)v28 - v30;
      if ((uint64_t)v28 - v30 <= -3) {
        abort();
      }
      uint64_t v32 = v31 >> 1;
      unint64_t v33 = v27 - v30;
      if (v33 <= (v31 >> 1) + 1) {
        unint64_t v34 = v32 + 1;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v35 = v34;
      }
      if (v35) {
        __int16 v36 = (char *)sub_244CB0320(a1 + 104, v35);
      }
      else {
        __int16 v36 = 0;
      }
      uint64_t v37 = &v36[2 * v32];
      unsigned int v38 = &v36[2 * v35];
      *(_WORD *)uint64_t v37 = *a2;
      int v29 = v37 + 2;
      uint64_t v40 = *(char **)(a1 + 88);
      int v39 = *(char **)(a1 + 96);
      if (v39 != v40)
      {
        do
        {
          __int16 v41 = *((_WORD *)v39 - 1);
          v39 -= 2;
          *((_WORD *)v37 - 1) = v41;
          v37 -= 2;
        }
        while (v39 != v40);
        int v39 = *(char **)(a1 + 88);
      }
      *(void *)(a1 + 88) = v37;
      *(void *)(a1 + 96) = v29;
      *(void *)(a1 + 104) = v38;
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      _WORD *v28 = *a2;
      int v29 = v28 + 1;
    }
    *(void *)(a1 + 96) = v29;
  }
  int v48 = a2;
  long long v42 = sub_244CAFF8C(v10, a2, (uint64_t)&unk_244E79D97, &v48);
  int v48 = a2 + 2;
  long long v43 = sub_244CB024C((uint64_t)(v42 + 20), (unsigned int *)a2 + 1, (uint64_t)&unk_244E79D97, (_DWORD **)&v48);
  int v48 = a2 + 4;
  *((_DWORD *)sub_244CB1E04((uint64_t)(v43 + 10), (unsigned int *)a2 + 2, (uint64_t)&unk_244E79D97, (unsigned int **)&v48)
  + 8) = v16;
  if (*(unsigned char *)(a1 + 248)) {
    sub_244CB041C((uint64_t **)(a1 + 40), a2, (uint64_t)a2);
  }
  *(_DWORD *)a5 = 0;
  a5[1] = "src/app/ClusterStateCache.cpp";
  *((_DWORD *)a5 + 4) = 178;
}

uint64_t sub_244CAE9D8(uint64_t a1)
{
  int v2 = (void *)(a1 + 48);
  unint64_t v1 = *(void **)(a1 + 48);
  *(void *)(a1 + 240) = 0xFFFFFFFF0000FFFFLL;
  sub_244794718(a1 + 40, v1);
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  v2[6] = v2[5];
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)*(v2 - 5) + 24);

  return v3();
}

void sub_244CAEA50(uint64_t a1)
{
  sub_244CAD570((unsigned __int16 *)a1);
  *(void *)(a1 + 240) = 0xFFFFFFFF0000FFFFLL;
  v14[0] = 0;
  v14[1] = 0;
  unsigned int v13 = (uint64_t *)v14;
  int v2 = *(void **)(a1 + 40);
  if (v2 != (void *)(a1 + 48))
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a1, (uint64_t)v2 + 28);
      unint64_t v12 = *((unsigned __int16 *)v2 + 14) | ((unint64_t)*((unsigned int *)v2 + 8) << 32);
      sub_244CB06AC(&v13, (unsigned __int16 *)&v12, &v12);
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          int v2 = v4;
        }
        while (!v5);
      }
      int v2 = v4;
    }
    while (v4 != (void *)(a1 + 48));
    uint64_t v6 = v13;
    if (v13 != (uint64_t *)v14)
    {
      do
      {
        (*(void (**)(void, uint64_t, void, void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), a1, *((unsigned __int16 *)v6 + 14), *((unsigned int *)v6 + 8));
        uint64_t v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v6[2];
            BOOL v5 = *v8 == (void)v6;
            uint64_t v6 = v8;
          }
          while (!v5);
        }
        uint64_t v6 = v8;
      }
      while (v8 != (uint64_t *)v14);
    }
  }
  uint64_t v9 = *(unsigned __int16 **)(a1 + 88);
  uint64_t v10 = *(unsigned __int16 **)(a1 + 96);
  while (v9 != v10)
  {
    unsigned int v11 = *v9++;
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), a1, v11);
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  sub_244794718((uint64_t)&v13, v14[0]);
}

uint64_t sub_244CAEC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(a2 + 14) >= 2u) {
    sub_244E225C4();
  }
  sub_244CB3988((uint64_t)v11);
  if (a3)
  {
    uint64_t v8 = v11;
    sub_244CB3B04((uint64_t)v11, a3);
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_244CAE644(a1, (unsigned __int16 *)a2, a3, a4, v10);
  return (*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2, v8, a4);
}

uint64_t sub_244CAECE4(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v2 + 72))(v2, &v4);
}

uint64_t sub_244CAED3C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (!(a3 | (unint64_t)a4)) {
    sub_244E22668();
  }
  sub_244CB3988((uint64_t)v11);
  if (a3)
  {
    uint64_t v8 = v11;
    sub_244CB3B04((uint64_t)v11, a3);
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_244CAD6F8(a1, a2, a3, a4, (uint64_t)&v10);
  return (*(uint64_t (**)(void, uint64_t, unsigned char *, char *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2, v8, a4);
}

uint64_t sub_244CAEDFC(uint64_t a1)
{
  unint64_t v1 = (void *)(a1 + 72);
  sub_244794718(a1 + 64, *(void **)(a1 + 72));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)*(v1 - 8) + 80);

  return v2();
}

uint64_t sub_244CAEE6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t sub_244CAEE94(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 64))(v3, a2, &v5);
}

uint64_t sub_244CAEEEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

void sub_244CAEF14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, __n128 *a5@<X8>)
{
  *a5 = (__n128)xmmword_26519B8B0;
  a5[1].n128_u64[0] = 573;
  sub_244CB62B8((uint64_t)&v41);
  uint64_t v10 = *(void *)(a3 + 8);
  if (v10)
  {
    unsigned int v11 = *(unsigned int **)a3;
    uint64_t v12 = *(void *)a3 + 12 * v10;
    do
    {
      if (v11[1] == -1)
      {
        uint64_t v13 = *(void *)(a3 + 8);
        if (v13)
        {
          uint64_t v14 = *(void *)a3;
          uint64_t v15 = 12 * v13;
          while (*(_DWORD *)(v14 + 4) == -1 || !sub_244CADF70((uint64_t)v11, v14))
          {
            v14 += 12;
            v15 -= 12;
            if (!v15) {
              goto LABEL_9;
            }
          }
        }
        else
        {
LABEL_9:
          sub_244CB0798((uint64_t **)(a1 + 64), v11, (uint64_t)v11);
        }
      }
      v11 += 3;
    }
    while (v11 != (unsigned int *)v12);
  }
  unsigned int v38 = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  sub_244CAF188(a1, (uint64_t *)&v38);
  *a4 = 0;
  int v16 = v38;
  uint64_t v17 = v39;
  if (v38 == v39) {
    goto LABEL_37;
  }
  while (1)
  {
    int v18 = *(long long **)(a2 + 24);
    long long v19 = v18[3];
    long long v21 = *v18;
    long long v20 = v18[1];
    long long v43 = v18[2];
    long long v44 = v19;
    long long v41 = v21;
    long long v42 = v20;
    uint64_t v22 = *(void *)(a3 + 8);
    if (v22) {
      break;
    }
LABEL_27:
    v16 += 6;
    if (v16 == v17) {
      goto LABEL_36;
    }
  }
  uint64_t v23 = 12 * v22;
  uint64_t v24 = *(void *)a3 + 8;
  __int16 v25 = (unsigned __int16 *)v24;
  while (1)
  {
    int v27 = *v25;
    v25 += 6;
    int v26 = v27;
    if (v27 == 0xFFFF || v26 == *((unsigned __int16 *)v16 + 6))
    {
      int v29 = *(_DWORD *)(v24 - 8);
      if (v29 == -1 || v29 == *v16) {
        break;
      }
    }
    uint64_t v24 = (uint64_t)v25;
    v23 -= 12;
    if (!v23) {
      goto LABEL_27;
    }
  }
  sub_244CCD500(a2, (uint64_t)v16, a5);
  unsigned __int32 v31 = a5->n128_u32[0];
  if (!a5->n128_u32[0])
  {
    *a4 = 1;
    goto LABEL_27;
  }
  if (v31 == 11 || v31 == 25)
  {
    uint64_t v32 = sub_244CC8484(0xDu, "DataManagement");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v37 = 0;
      _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_DEFAULT, "OnUpdateDataVersionFilterList out of space; rolling back",
        (uint8_t *)&v37,
        2u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xDu, 2);
    }
    unint64_t v33 = *(_OWORD **)(a2 + 24);
    long long v34 = v41;
    long long v35 = v42;
    long long v36 = v44;
    v33[2] = v43;
    void v33[3] = v36;
    _OWORD *v33 = v34;
    v33[1] = v35;
    sub_244CCCE18(a2);
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/app/ClusterStateCache.cpp";
    a5[1].n128_u32[0] = 638;
  }
LABEL_36:
  int v16 = v38;
LABEL_37:
  if (v16)
  {
    int v39 = v16;
    operator delete(v16);
  }
}

uint64_t sub_244CAF188(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  long long v4 = (void *)(a1 + 24);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      long long v5 = (void *)v3[5];
      if (v5 != v3 + 6)
      {
        __int16 v6 = *((_WORD *)v3 + 16);
        do
        {
          if (*((unsigned char *)v5 + 72))
          {
            uint64_t v7 = sub_2446F12CC((unsigned char *)v5 + 72);
            uint64_t v8 = (void *)v5[5];
            if (v8 != v5 + 6)
            {
              uint64_t v9 = 0;
              int v10 = *(_DWORD *)v7;
              int v11 = *((_DWORD *)v5 + 8);
              do
              {
                uint64_t v12 = (void *)v8[1];
                uint64_t v13 = v8;
                if (v12)
                {
                  do
                  {
                    uint64_t v14 = v12;
                    uint64_t v12 = (void *)*v12;
                  }
                  while (v12);
                }
                else
                {
                  do
                  {
                    uint64_t v14 = (void *)v13[2];
                    BOOL v15 = *v14 == (void)v13;
                    uint64_t v13 = v14;
                  }
                  while (!v15);
                }
                v9 += *((unsigned int *)v8 + 8);
                uint64_t v8 = v14;
              }
              while (v14 != v5 + 6);
              if (v9)
              {
                int v27 = *((_DWORD *)v5 + 8);
                unsigned __int8 v28 = 1;
                int v29 = v10;
                __int16 v30 = v6;
                uint64_t v31 = v9;
                unint64_t v16 = a2[1];
                if (v16 >= a2[2])
                {
                  uint64_t v18 = sub_244CB0884(a2, (uint64_t)&v27);
                }
                else
                {
                  *(_DWORD *)unint64_t v16 = v11;
                  int v17 = v28;
                  *(unsigned char *)(v16 + 4) = v28;
                  if (v17)
                  {
                    *(_DWORD *)(v16 + 8) = v29;
                    unsigned __int8 v28 = 0;
                  }
                  *(_WORD *)(v16 + 12) = v30;
                  *(void *)(v16 + 16) = v31;
                  uint64_t v18 = v16 + 24;
                }
                a2[1] = v18;
              }
            }
          }
          long long v19 = (void *)v5[1];
          if (v19)
          {
            do
            {
              long long v20 = v19;
              long long v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              long long v20 = (void *)v5[2];
              BOOL v15 = *v20 == (void)v5;
              long long v5 = v20;
            }
            while (!v15);
          }
          long long v5 = v20;
        }
        while (v20 != v3 + 6);
      }
      long long v21 = (void *)v3[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          long long v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v3[2];
          BOOL v15 = *v22 == (void)v3;
          uint64_t v3 = v22;
        }
        while (!v15);
      }
      uint64_t v3 = v22;
    }
    while (v22 != v4);
  }
  uint64_t v23 = (int *)a2[1];
  unint64_t v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - *a2) >> 3));
  if (v23 == (int *)*a2) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  return sub_244CB1EC4(*a2, v23, (uint64_t)&v27, v25, 1);
}

uint64_t sub_244CAF370(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t sub_244CAF398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

void sub_244CAF3C0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __int16 v6 = (void *)sub_244CACE0C(a1, *a2, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2), (uint64_t)&v11);
  *(_OWORD *)a4 = v11;
  a4[2] = v12;
  if (!*(_DWORD *)a4)
  {
    uint64_t v7 = v6;
    if (*v6 == 1)
    {
      uint64_t v9 = *sub_244CAE2E8(v6);
      int v10 = sub_244CAE2E8(v7);
      sub_244CB39B8(a3, v9, v10[1]);
      sub_244CB4E58(a3, a4);
    }
    else
    {
      if (*v6)
      {
        *(_DWORD *)a4 = 16;
        a4[1] = "src/app/ClusterStateCache.cpp";
        int v8 = 299;
      }
      else
      {
        *(_DWORD *)a4 = 202;
        a4[1] = "src/app/ClusterStateCache.cpp";
        int v8 = 294;
      }
      *((_DWORD *)a4 + 4) = v8;
    }
  }
}

void sub_244CAF4A0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 16;
  *(void *)(a1 + 8) = "src/app/ClusterStateCache.cpp";
  *(_DWORD *)(a1 + 16) = 309;
}

uint64_t sub_244CAF4C0@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244CACE0C(a1, *a2, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2), (uint64_t)&v10);
  *(_OWORD *)a4 = v10;
  *(void *)(a4 + 16) = v11;
  if (!*(_DWORD *)a4)
  {
    if (*(void *)result)
    {
      int v7 = 475;
      int v8 = 47;
    }
    else
    {
      uint64_t result = (uint64_t)sub_244CAE29C((void *)result);
      *a3 = *(unsigned char *)result;
      int v9 = *(unsigned __int8 *)(result + 1);
      a3[1] = v9;
      int v8 = 0;
      if (v9) {
        a3[2] = *(unsigned char *)(result + 2);
      }
      int v7 = 479;
    }
    *(_DWORD *)a4 = v8;
    *(void *)(a4 + 8) = "src/app/ClusterStateCache.cpp";
    *(_DWORD *)(a4 + 16) = v7;
  }
  return result;
}

void sub_244CAF568(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 47;
  *(void *)(a1 + 8) = "src/app/ClusterStateCache.cpp";
  *(_DWORD *)(a1 + 16) = 485;
}

uint64_t sub_244CAF588@<X0>(uint64_t a1@<X1>, long long *a2@<X2>, uint64_t a3@<X8>)
{
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  return sub_244DD17BC(a1, (uint64_t)&v4, a3);
}

uint64_t sub_244CAF5C0(uint64_t a1)
{
  *(void *)a1 = &unk_26F953100;
  *(void *)(a1 + 176) = &unk_26F953058;
  long long v4 = (void **)(a1 + 208);
  sub_244CAC658(&v4);
  sub_244794718(a1 + 152, *(void **)(a1 + 160));
  sub_244CAF75C(a1 + 112, *(void **)(a1 + 120));
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_244794718(a1 + 64, *(void **)(a1 + 72));
  sub_244794718(a1 + 40, *(void **)(a1 + 48));
  sub_244CAF7BC(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t sub_244CAF684(uint64_t a1)
{
  *(void *)a1 = &unk_26F953100;
  *(void *)(a1 + 176) = &unk_26F953058;
  long long v4 = (void **)(a1 + 208);
  sub_244CAC658(&v4);
  sub_244794718(a1 + 152, *(void **)(a1 + 160));
  sub_244CAF75C(a1 + 112, *(void **)(a1 + 120));
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_244794718(a1 + 64, *(void **)(a1 + 72));
  sub_244794718(a1 + 40, *(void **)(a1 + 48));
  sub_244CAF7BC(a1 + 16, *(void **)(a1 + 24));
  return MEMORY[0x245695FA0](a1, 0x10B1C40036DCBC2);
}

void sub_244CAF75C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_244CAF75C(a1, *a2);
    sub_244CAF75C(a1, a2[1]);
    long long v4 = (_WORD *)a2[10];
    if (v4) {
      sub_244CC8A0C(v4);
    }
    operator delete(a2);
  }
}

void sub_244CAF7BC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_244CAF7BC(a1, *a2);
    sub_244CAF7BC(a1, a2[1]);
    sub_244CAF81C((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void sub_244CAF81C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_244CAF81C(a1, *a2);
    sub_244CAF81C(a1, a2[1]);
    sub_244794718((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *sub_244CAF87C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t result = sub_244CAF8F0(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = *((unsigned __int16 *)result + 14);
  if (v5 < v6) {
    return v3;
  }
  if (v5 == v6)
  {
    unsigned int v7 = *((_DWORD *)a2 + 1);
    unsigned int v8 = *((_DWORD *)result + 8);
    if (v7 < v8 || v7 == v8 && *((_DWORD *)a2 + 2) < *((_DWORD *)result + 9)) {
      return v3;
    }
  }
  return result;
}

uint64_t *sub_244CAF8F0(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = *((_DWORD *)a2 + 1);
    while (1)
    {
      unsigned int v7 = *((unsigned __int16 *)a3 + 14);
      if (v7 >= v5)
      {
        if (v7 != v5) {
          goto LABEL_11;
        }
        unsigned int v8 = *((_DWORD *)a3 + 8);
        if (v8 >= v6) {
          break;
        }
      }
      ++a3;
LABEL_12:
      a3 = (uint64_t *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v8 == v6)
    {
      if (*((_DWORD *)a3 + 9) < *((_DWORD *)a2 + 2)) {
        ++a3;
      }
      else {
        uint64_t result = a3;
      }
      goto LABEL_12;
    }
LABEL_11:
    uint64_t result = a3;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_244CAF958(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32)) {
    return 0;
  }
  sub_244CAF9C0((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_244CAF9C0(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_244CAFA00(a1, (uint64_t *)a2);
  sub_2447E7D0C(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_244CAFA00(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_244CAFA74(v6, a2);
  return v3;
}

uint64_t *sub_244CAFA74(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    goto LABEL_8;
  }
LABEL_7:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unsigned int v8 = 0;
      uint64_t result = (uint64_t *)v2;
      goto LABEL_13;
    }
    unsigned int v7 = (uint64_t **)(v3[2] + 8);
  }
  else
  {
    v6[1] = (uint64_t *)v2;
    unsigned int v7 = (uint64_t **)v3[2];
  }
  unsigned int v8 = *v7;
LABEL_13:
  int v9 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v10 = a2[2];
    v3[2] = v10;
    *(void *)(v10 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    *(void *)(v11 + 16) = v3;
    uint64_t v12 = a2[1];
    v3[1] = v12;
    if (v12) {
      *(void *)(v12 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v9 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v13 = v8[2];
    if (*(uint64_t **)v13 == v8) {
      break;
    }
    if (!*((unsigned char *)v8 + 24))
    {
      *((unsigned char *)v8 + 24) = 1;
      *(unsigned char *)(v13 + 24) = 0;
      uint64_t v14 = v8[2];
      BOOL v15 = *(uint64_t **)(v14 + 8);
      uint64_t v16 = *v15;
      *(void *)(v14 + 8) = *v15;
      if (v16) {
        *(void *)(v16 + 16) = v14;
      }
      unsigned int v15[2] = *(void *)(v14 + 16);
      *(void *)(*(void *)(v14 + 16) + 8 * (**(void **)(v14 + 16) != v14)) = v15;
      uint64_t *v15 = v14;
      *(void *)(v14 + 16) = v15;
      if (result == (uint64_t *)*v8) {
        uint64_t result = v8;
      }
      unsigned int v8 = *(uint64_t **)(*v8 + 8);
    }
    int v17 = (uint64_t *)*v8;
    if (*v8 && !*((unsigned char *)v17 + 24))
    {
      uint64_t v18 = v8[1];
      if (!v18) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(unsigned char *)(v18 + 24))
      {
LABEL_57:
        *((unsigned char *)v17 + 24) = 1;
        *((unsigned char *)v8 + 24) = 0;
        int v27 = (uint64_t *)*v8;
        uint64_t v28 = *(void *)(*v8 + 8);
        uint64_t *v8 = v28;
        if (v28) {
          *(void *)(v28 + 16) = v8;
        }
        v27[2] = v8[2];
        *(void *)(v8[2] + 8 * (*(void *)v8[2] != (void)v8)) = v27;
        v27[1] = (uint64_t)v8;
        id v8[2] = (uint64_t)v27;
      }
      else
      {
        int v27 = v8;
      }
      uint64_t v29 = v27[2];
      *((unsigned char *)v27 + 24) = *(unsigned char *)(v29 + 24);
      *(unsigned char *)(v29 + 24) = 1;
      *(unsigned char *)(v27[1] + 24) = 1;
      __int16 v30 = (uint64_t **)v27[2];
      uint64_t v31 = v30[1];
      uint64_t v32 = *v31;
      v30[1] = (uint64_t *)*v31;
      if (v32) {
        *(void *)(v32 + 16) = v30;
      }
      v31[2] = (uint64_t)v30[2];
      v30[2][*v30[2] != (void)v30] = (uint64_t)v31;
      *uint64_t v31 = (uint64_t)v30;
      goto LABEL_73;
    }
    uint64_t v18 = v8[1];
    if (v18 && !*(unsigned char *)(v18 + 24)) {
      goto LABEL_56;
    }
    *((unsigned char *)v8 + 24) = 0;
    long long v19 = (uint64_t *)v8[2];
    if (v19 == result)
    {
      long long v19 = result;
LABEL_54:
      *((unsigned char *)v19 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v19 + 24)) {
      goto LABEL_54;
    }
LABEL_49:
    unsigned int v8 = *(uint64_t **)(v19[2] + 8 * (*(void *)v19[2] == (void)v19));
  }
  if (!*((unsigned char *)v8 + 24))
  {
    *((unsigned char *)v8 + 24) = 1;
    *(unsigned char *)(v13 + 24) = 0;
    long long v20 = (void *)v8[2];
    uint64_t v21 = *v20;
    uint64_t v22 = *(void *)(*v20 + 8);
    void *v20 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v20;
    }
    *(void *)(v21 + 16) = v20[2];
    *(void *)(v20[2] + 8 * (*(void *)v20[2] != (void)v20)) = v21;
    *(void *)(v21 + 8) = v20;
    v20[2] = v21;
    uint64_t v23 = (uint64_t **)v8[1];
    if (result == (uint64_t *)v23) {
      uint64_t result = v8;
    }
    unsigned int v8 = *v23;
  }
  uint64_t v24 = *v8;
  if (*v8 && !*(unsigned char *)(v24 + 24)) {
    goto LABEL_69;
  }
  uint64_t v25 = v8[1];
  if (!v25 || *(unsigned char *)(v25 + 24))
  {
    *((unsigned char *)v8 + 24) = 0;
    long long v19 = (uint64_t *)v8[2];
    if (*((unsigned char *)v19 + 24)) {
      BOOL v26 = v19 == result;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      goto LABEL_54;
    }
    goto LABEL_49;
  }
  if (v24 && !*(unsigned char *)(v24 + 24))
  {
LABEL_69:
    unint64_t v33 = v8;
  }
  else
  {
    *(unsigned char *)(v25 + 24) = 1;
    *((unsigned char *)v8 + 24) = 0;
    unint64_t v33 = (uint64_t *)v8[1];
    uint64_t v34 = *v33;
    v8[1] = *v33;
    if (v34) {
      *(void *)(v34 + 16) = v8;
    }
    v33[2] = v8[2];
    *(void *)(v8[2] + 8 * (*(void *)v8[2] != (void)v8)) = v33;
    uint64_t *v33 = (uint64_t)v8;
    id v8[2] = (uint64_t)v33;
  }
  uint64_t v35 = v33[2];
  *((unsigned char *)v33 + 24) = *(unsigned char *)(v35 + 24);
  *(unsigned char *)(v35 + 24) = 1;
  *(unsigned char *)(*v33 + 24) = 1;
  __int16 v30 = (uint64_t **)v33[2];
  uint64_t v31 = *v30;
  long long v36 = (uint64_t *)(*v30)[1];
  const char *v30 = v36;
  if (v36) {
    v36[2] = (uint64_t)v30;
  }
  v31[2] = (uint64_t)v30[2];
  v30[2][*v30[2] != (void)v30] = (uint64_t)v31;
  v31[1] = (uint64_t)v30;
LABEL_73:
  v30[2] = v31;
  return result;
}

uint64_t sub_244CAFE2C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_244CAFE94((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_244CAFE94(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_244CAFA00(a1, (uint64_t *)a2);
  sub_2447E7D6C(a2 + 40, *(void ***)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_244CAFED4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_244CAFF3C((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *sub_244CAFF3C(uint64_t **a1, uint64_t *a2)
{
  unsigned int v3 = sub_244CAFA00(a1, a2);
  if (a2[5] == 1)
  {
    a2[7] = 0;
    uint64_t v4 = (void *)a2[6];
    if (v4) {
      j__free(v4);
    }
  }
  operator delete(a2);
  return v3;
}

_WORD *sub_244CAFF8C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unsigned int v7 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (void *)v6;
        unsigned int v10 = *(unsigned __int16 *)(v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = (void *)(a1 + 8);
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    uint8_t v11[16] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 24;
    sub_244CB005C((uint64_t **)a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return v9;
}

uint64_t sub_244CB005C(uint64_t **a1, uint64_t a2, void *a3, void *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unsigned int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = (void *)*a3;
  }
  uint64_t result = sub_244CB00B4((uint64_t)a1[1], (uint64_t)a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_244CB00B4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = *(void *)(a2 + 16);
      if (*(unsigned char *)(v2 + 24)) {
        return result;
      }
      uint64_t v3 = *(void *)(v2 + 16);
      uint64_t v4 = *(uint64_t **)v3;
      if (*(void *)v3 == v2)
      {
        uint64_t v7 = *(void *)(v3 + 8);
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unsigned int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(void *)v2 == a2)
          {
            int v9 = *(uint64_t **)(a2 + 16);
          }
          else
          {
            int v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              uint64_t v3 = *(void *)(v2 + 16);
            }
            v9[2] = v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            uint64_t *v9 = v2;
            *(void *)(v2 + 16) = v9;
            uint64_t v3 = v9[2];
          }
          *((unsigned char *)v9 + 24) = 1;
          *(unsigned char *)(v3 + 24) = 0;
          uint64_t v12 = *(uint64_t **)v3;
          uint64_t v14 = *(void *)(*(void *)v3 + 8);
          *(void *)uint64_t v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          void v12[2] = *(void *)(v3 + 16);
          *(void *)(*(void *)(v3 + 16) + 8 * (**(void **)(v3 + 16) != v3)) = v12;
          v12[1] = v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unsigned int v5 = v4 + 3, v6))
      {
        if (*(void *)v2 == a2)
        {
          uint64_t v11 = *(void *)(a2 + 8);
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = *(void *)(v2 + 16);
          }
          *(void *)(a2 + 16) = v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          *(void *)(a2 + 8) = v2;
          *(void *)(v2 + 16) = a2;
          uint64_t v3 = *(void *)(a2 + 16);
        }
        else
        {
          a2 = *(void *)(a2 + 16);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(unsigned char *)(v3 + 24) = 0;
        uint64_t v12 = *(uint64_t **)(v3 + 8);
        uint64_t v13 = *v12;
        *(void *)(v3 + 8) = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        void v12[2] = *(void *)(v3 + 16);
        *(void *)(*(void *)(v3 + 16) + 8 * (**(void **)(v3 + 16) != v3)) = v12;
        uint64_t *v12 = v3;
LABEL_27:
        *(void *)(v3 + 16) = v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *(unsigned char *)(v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_DWORD *sub_244CB024C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (void *)v6;
        unsigned int v10 = *(_DWORD *)(v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = (void *)(a1 + 8);
LABEL_10:
    uint64_t v11 = operator new(0x50uLL);
    v11[8] = **a4;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *((void *)v11 + 5) = v11 + 12;
    sub_244CB005C((uint64_t **)a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return v9;
}

void *sub_244CB0320(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_2447A0110();
  }
  return operator new(2 * a2);
}

_DWORD *sub_244CB0354(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (void *)v6;
        unsigned int v10 = *(_DWORD *)(v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = (void *)(a1 + 8);
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = -1;
    sub_244CB005C((uint64_t **)a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return v9;
}

char *sub_244CB041C(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v5 = sub_244CB04A8((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (char *)operator new(0x28uLL);
    *(void *)(v6 + 28) = *(void *)a3;
    *((_DWORD *)v6 + 9) = *(_DWORD *)(a3 + 8);
    sub_244CB005C(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *sub_244CB04A8(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = *((_DWORD *)a3 + 1);
    unsigned int v8 = *((_DWORD *)a3 + 2);
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v4;
        unsigned int v10 = *((unsigned __int16 *)v4 + 14);
        if (v6 >= v10) {
          break;
        }
LABEL_8:
        uint64_t v4 = (uint64_t *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_19;
        }
      }
      if (v6 == v10)
      {
        unsigned int v11 = *((_DWORD *)v9 + 8);
        if (v7 < v11 || v7 == v11 && v8 < *((_DWORD *)v9 + 9)) {
          goto LABEL_8;
        }
        if (v10 >= v6)
        {
          unsigned int v12 = *((_DWORD *)v9 + 8);
          if (v12 >= v7 && (v12 != v7 || *((_DWORD *)v9 + 9) >= v8)) {
            goto LABEL_19;
          }
        }
      }
      else if (v10 >= v6)
      {
        goto LABEL_19;
      }
      uint64_t result = v9 + 1;
      uint64_t v4 = (uint64_t *)v9[1];
      if (!v4) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v9 = result;
LABEL_19:
  *a2 = v9;
  return result;
}

_OWORD *sub_244CB0544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (void *)(a1 + 8);
  unsigned int v5 = *(void **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    while (1)
    {
      while (1)
      {
        unsigned int v8 = v5;
        unint64_t v9 = v5[6];
        if (v7 >= v9) {
          break;
        }
        unsigned int v5 = (void *)*v8;
        unsigned int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unsigned int v5 = (void *)v8[1];
      if (!v5)
      {
        unsigned int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = (void *)(a1 + 8);
LABEL_10:
    unsigned int v10 = operator new(0x58uLL);
    long long v11 = *(_OWORD *)(a3 + 16);
    v10[2] = *(_OWORD *)a3;
    void v10[3] = v11;
    void v10[4] = *(_OWORD *)(a3 + 32);
    *((void *)v10 + 10) = *(void *)(a3 + 48);
    *(void *)(a3 + 48) = 0;
    sub_244CB005C((uint64_t **)a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return v8;
}

char *sub_244CB0614(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, void **a4)
{
  unsigned int v6 = sub_244CB04A8((uint64_t)a1, &v11, a2);
  unint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    unint64_t v7 = (char *)operator new(0x30uLL);
    int v9 = *((_DWORD *)*a4 + 2);
    *(void *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = v9;
    *((_WORD *)v7 + 20) = 0;
    v7[42] = 0;
    sub_244CB005C(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_244CB06AC(uint64_t **a1, unsigned __int16 *a2, void *a3)
{
  unsigned int v5 = sub_244CB0730((uint64_t)a1, &v9, a2);
  unsigned int v6 = (void *)*v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    unsigned int v6 = operator new(0x28uLL);
    *(void *)((char *)v6 + 28) = *a3;
    sub_244CB005C(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *sub_244CB0730(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *((unsigned __int16 *)v4 + 14);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unsigned int v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  unsigned int v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

char *sub_244CB0798(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v5 = sub_244CB0824((uint64_t)a1, &v9, a2);
  unsigned int v6 = (char *)*v5;
  if (!*v5)
  {
    unsigned int v7 = v5;
    unsigned int v6 = (char *)operator new(0x28uLL);
    *(void *)(v6 + 28) = *(void *)a3;
    *((_DWORD *)v6 + 9) = *(_DWORD *)(a3 + 8);
    sub_244CB005C(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *sub_244CB0824(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *((unsigned __int16 *)a3 + 4);
    unsigned int v7 = *a3;
    do
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *((unsigned __int16 *)v4 + 18);
        unsigned int v10 = *((_DWORD *)v8 + 7);
        if (v6 >= v9 && v7 >= v10) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_16;
        }
      }
      if (v9 >= v6 && v10 >= v7) {
        break;
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v8 = result;
  }
LABEL_16:
  *a2 = v8;
  return result;
}

uint64_t sub_244CB0884(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_244CB0A6C(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned int v12 = &v11[24 * v3];
  __p = v11;
  int v17 = v12;
  long long v19 = &v11[24 * v10];
  *(_DWORD *)unsigned int v12 = *(_DWORD *)a2;
  int v13 = *(unsigned __int8 *)(a2 + 4);
  v12[4] = v13;
  if (v13)
  {
    *((_DWORD *)v12 + 2) = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(a2 + 4) = 0;
  }
  *((_WORD *)v12 + 6) = *(_WORD *)(a2 + 12);
  *(void *)&v11[24 * v3 + 16] = *(void *)(a2 + 16);
  uint64_t v18 = v12 + 24;
  sub_244CB09D0(a1, &__p);
  uint64_t v14 = a1[1];
  if (v18 != v17) {
    uint64_t v18 = &v17[(v18 - v17 - 24) % 0x18uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

uint64_t *sub_244CB09D0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 24) = *(_DWORD *)(v2 + v5 - 24);
      int v8 = *(unsigned __int8 *)(v2 + v5 - 20);
      *(unsigned char *)(v6 - 20) = v8;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) = *(_DWORD *)(v7 - 16);
        *(unsigned char *)(v7 - 20) = 0;
      }
      *(_WORD *)(v6 - 12) = *(_WORD *)(v7 - 12);
      *(void *)(v6 - 8) = *(void *)(v7 - 8);
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *uint64_t result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *sub_244CB0A6C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2447A0110();
  }
  return operator new(24 * a2);
}

uint64_t sub_244CB0AB4(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*((void *)a2 - 1) > *(void *)(v11 + 16))
          {
            uint64_t result = (uint64_t)sub_244CB15C4((int *)v11, a2 - 6);
          }
          break;
        case 3uLL:
          uint64_t result = sub_244CB1050(v11, v11 + 24, (uint64_t)(a2 - 6));
          break;
        case 4uLL:
          uint64_t result = (uint64_t)sub_244CB162C(v11, v11 + 24, v11 + 48, (uint64_t)(a2 - 6));
          break;
        case 5uLL:
          uint64_t result = (uint64_t)sub_244CB16D8(v11, v11 + 24, v11 + 48, v11 + 72, (uint64_t)(a2 - 6));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return sub_244CB17B0(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = (int *)(v11 + 24 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xC01)
    {
      sub_244CB1050(v11, v11 + 24 * (v15 >> 1), (uint64_t)(a2 - 6));
      uint64_t v18 = 3 * v16;
      uint64_t v19 = v11 + 24 * v16 - 24;
      sub_244CB1050(v11 + 24, v19, (uint64_t)(a2 - 12));
      uint64_t v20 = v11 + 48;
      uint64_t v21 = v11 + 24 + 8 * v18;
      sub_244CB1050(v20, v21, (uint64_t)(a2 - 18));
      sub_244CB1050(v19, (uint64_t)v17, v21);
      sub_244CB15C4((int *)v10, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_244CB1050(v11 + 24 * (v15 >> 1), v11, (uint64_t)(a2 - 6));
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(void *)(v10 - 8) <= *(void *)(v10 + 16))
    {
      uint64_t result = sub_244CB1114((int *)v10, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v22 = sub_244CB1264((int *)v10, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v24 = sub_244CB13BC(v10, v22);
    uint64_t v11 = v22 + 24;
    uint64_t result = sub_244CB13BC(v22 + 24, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_17:
      uint64_t result = sub_244CB0AB4(v10, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 24;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_244CB0EB4((_DWORD *)v11, a2);
  }
  else
  {
    return (uint64_t)sub_244CB0F94((_DWORD *)v11, a2);
  }
}

_DWORD *sub_244CB0EB4(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 6;
    if (result + 6 != a2)
    {
      uint64_t v4 = 0;
      char v5 = result;
      do
      {
        char v6 = v3;
        unint64_t v7 = *((void *)v5 + 5);
        if (v7 > *((void *)v5 + 2))
        {
          int v8 = *v6;
          int v9 = *((unsigned __int8 *)v5 + 28);
          if (*((unsigned char *)v5 + 28))
          {
            int v2 = v5[8];
            *((unsigned char *)v5 + 28) = 0;
          }
          __int16 v10 = *((_WORD *)v5 + 18);
          uint64_t v11 = v4;
          while (1)
          {
            uint64_t v12 = v11;
            uint64_t v13 = (uint64_t)result + v11;
            *(_DWORD *)(v13 + 24) = *(_DWORD *)v13;
            int v14 = *(unsigned __int8 *)(v13 + 4);
            *(unsigned char *)(v13 + 28) = v14;
            if (v14)
            {
              *(_DWORD *)(v13 + 32) = *(_DWORD *)(v13 + 8);
              *(unsigned char *)(v13 + 4) = 0;
            }
            *(_WORD *)(v13 + 36) = *(_WORD *)(v13 + 12);
            *(void *)(v13 + 40) = *(void *)(v13 + 16);
            if (!v12) {
              break;
            }
            uint64_t v11 = v12 - 24;
            if (v7 <= *(void *)((char *)result + v12 - 8))
            {
              unint64_t v15 = (_DWORD *)((char *)result + v12);
              goto LABEL_14;
            }
          }
          unint64_t v15 = result;
LABEL_14:
          _DWORD *v15 = v8;
          *((unsigned char *)result + v12 + 4) = v9;
          if (v9) {
            unsigned int v15[2] = v2;
          }
          *((_WORD *)v15 + 6) = v10;
          *((void *)v15 + 2) = v7;
        }
        uint64_t v3 = v6 + 6;
        v4 += 24;
        char v5 = v6;
      }
      while (v6 + 6 != a2);
    }
  }
  return result;
}

_DWORD *sub_244CB0F94(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 6;
    if (result + 6 != a2)
    {
      uint64_t v4 = result + 10;
      do
      {
        char v5 = v3;
        unint64_t v6 = *((void *)result + 5);
        if (v6 > *((void *)result + 2))
        {
          int v7 = *v5;
          int v8 = *((unsigned __int8 *)result + 28);
          if (*((unsigned char *)result + 28))
          {
            int v2 = result[8];
            *((unsigned char *)result + 28) = 0;
          }
          __int16 v9 = *((_WORD *)result + 18);
          __int16 v10 = v4;
          do
          {
            *((_DWORD *)v10 - 4) = *((_DWORD *)v10 - 10);
            int v11 = *((unsigned __int8 *)v10 - 36);
            *((unsigned char *)v10 - 12) = v11;
            if (v11)
            {
              *((_DWORD *)v10 - 2) = *((_DWORD *)v10 - 8);
              *((unsigned char *)v10 - 36) = 0;
            }
            *((_WORD *)v10 - 2) = *((_WORD *)v10 - 14);
            uint64_t v12 = v10 - 3;
            void *v10 = *(v10 - 3);
            unint64_t v13 = *(v10 - 6);
            v10 -= 3;
          }
          while (v6 > v13);
          *((_DWORD *)v12 - 4) = v7;
          *((unsigned char *)v12 - 12) = v8;
          if (v8) {
            *((_DWORD *)v12 - 2) = v2;
          }
          *((_WORD *)v12 - 2) = v9;
          unint64_t *v12 = v6;
        }
        uint64_t v3 = v5 + 6;
        v4 += 3;
        uint64_t result = v5;
      }
      while (v5 + 6 != a2);
    }
  }
  return result;
}

uint64_t sub_244CB1050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a3 + 16);
  if (v6 > *(void *)(a1 + 16))
  {
    if (v7 > v6)
    {
      sub_244CB15C4((int *)a1, (int *)a3);
      return 1;
    }
    sub_244CB15C4((int *)a1, (int *)a2);
    if (*(void *)(a3 + 16) <= *(void *)(a2 + 16)) {
      return 1;
    }
    int v8 = (int *)a2;
    __int16 v9 = (int *)a3;
LABEL_9:
    sub_244CB15C4(v8, v9);
    return 2;
  }
  if (v7 > v6)
  {
    sub_244CB15C4((int *)a2, (int *)a3);
    if (*(void *)(a2 + 16) <= *(void *)(a1 + 16)) {
      return 1;
    }
    int v8 = (int *)a1;
    __int16 v9 = (int *)a2;
    goto LABEL_9;
  }
  return 0;
}

unint64_t sub_244CB1114(int *a1, int *a2)
{
  int v4 = *((unsigned __int8 *)a1 + 4);
  if (*((unsigned char *)a1 + 4))
  {
    int v2 = a1[2];
    *((unsigned char *)a1 + 4) = 0;
  }
  unint64_t v5 = *((void *)a1 + 2);
  if (v5 <= *((void *)a2 - 1))
  {
    unint64_t v9 = (unint64_t)(a1 + 6);
    do
    {
      unint64_t v7 = v9;
      if (v9 >= (unint64_t)a2) {
        break;
      }
      unint64_t v10 = *(void *)(v9 + 16);
      v9 += 24;
    }
    while (v5 <= v10);
  }
  else
  {
    unint64_t v6 = a1;
    do
    {
      unint64_t v7 = (unint64_t)(v6 + 6);
      unint64_t v8 = *((void *)v6 + 5);
      v6 += 6;
    }
    while (v5 <= v8);
  }
  if (v7 >= (unint64_t)a2)
  {
    int v11 = a2;
  }
  else
  {
    do
    {
      int v11 = a2 - 6;
      unint64_t v12 = *((void *)a2 - 1);
      a2 -= 6;
    }
    while (v5 > v12);
  }
  int v13 = *a1;
  __int16 v14 = *((_WORD *)a1 + 6);
  while (v7 < (unint64_t)v11)
  {
    sub_244CB15C4((int *)v7, v11);
    do
    {
      unint64_t v15 = *(void *)(v7 + 40);
      v7 += 24;
    }
    while (v5 <= v15);
    do
    {
      unint64_t v16 = *((void *)v11 - 1);
      v11 -= 6;
    }
    while (v5 > v16);
  }
  if ((int *)(v7 - 24) != a1)
  {
    *a1 = *(_DWORD *)(v7 - 24);
    int v17 = *(unsigned __int8 *)(v7 - 20);
    *((unsigned char *)a1 + 4) = v17;
    if (v17) {
      a1[2] = *(_DWORD *)(v7 - 16);
    }
    *((_WORD *)a1 + 6) = *(_WORD *)(v7 - 12);
    *((void *)a1 + 2) = *(void *)(v7 - 8);
  }
  *(_DWORD *)(v7 - 24) = v13;
  *(unsigned char *)(v7 - 20) = v4;
  if (v4) {
    *(_DWORD *)(v7 - 16) = v2;
  }
  *(_WORD *)(v7 - 12) = v14;
  *(void *)(v7 - 8) = v5;
  return v7;
}

unint64_t sub_244CB1264(int *a1, int *a2)
{
  int v4 = *((unsigned __int8 *)a1 + 4);
  if (*((unsigned char *)a1 + 4))
  {
    int v2 = a1[2];
    *((unsigned char *)a1 + 4) = 0;
  }
  uint64_t v5 = 0;
  int v6 = *a1;
  __int16 v7 = *((_WORD *)a1 + 6);
  unint64_t v8 = *((void *)a1 + 2);
  do
  {
    unint64_t v9 = *(void *)&a1[v5 + 10];
    v5 += 6;
  }
  while (v9 > v8);
  unint64_t v10 = (unint64_t)&a1[v5];
  if (v5 == 6)
  {
    while (v10 < (unint64_t)a2)
    {
      int v11 = a2 - 6;
      unint64_t v13 = *((void *)a2 - 1);
      a2 -= 6;
      if (v13 > v8) {
        goto LABEL_11;
      }
    }
    int v11 = a2;
  }
  else
  {
    do
    {
      int v11 = a2 - 6;
      unint64_t v12 = *((void *)a2 - 1);
      a2 -= 6;
    }
    while (v12 <= v8);
  }
LABEL_11:
  unint64_t v14 = v10;
  if (v10 < (unint64_t)v11)
  {
    unint64_t v15 = v11;
    do
    {
      sub_244CB15C4((int *)v14, v15);
      do
      {
        unint64_t v16 = *(void *)(v14 + 40);
        v14 += 24;
      }
      while (v16 > v8);
      do
      {
        unint64_t v17 = *((void *)v15 - 1);
        v15 -= 6;
      }
      while (v17 <= v8);
    }
    while (v14 < (unint64_t)v15);
  }
  unint64_t result = v14 - 24;
  if ((int *)(v14 - 24) != a1)
  {
    *a1 = *(_DWORD *)(v14 - 24);
    int v19 = *(unsigned __int8 *)(v14 - 20);
    *((unsigned char *)a1 + 4) = v19;
    if (v19) {
      a1[2] = *(_DWORD *)(v14 - 16);
    }
    *((_WORD *)a1 + 6) = *(_WORD *)(v14 - 12);
    *((void *)a1 + 2) = *(void *)(v14 - 8);
  }
  *(_DWORD *)(v14 - 24) = v6;
  *(unsigned char *)(v14 - 20) = v4;
  if (v4) {
    *(_DWORD *)(v14 - 16) = v2;
  }
  *(_WORD *)(v14 - 12) = v7;
  *(void *)(v14 - 8) = v8;
  return result;
}

BOOL sub_244CB13BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 8) > *(void *)(a1 + 16))
      {
        sub_244CB15C4((int *)a1, (int *)(a2 - 24));
        return 1;
      }
      return result;
    case 3uLL:
      sub_244CB1050(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_244CB162C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_244CB16D8(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v6 = a1 + 48;
      sub_244CB1050(a1, a1 + 24, a1 + 48);
      uint64_t v8 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    unint64_t v11 = *(void *)(v8 + 16);
    if (v11 > *(void *)(v6 + 16))
    {
      int v12 = *(unsigned __int8 *)(v8 + 4);
      if (*(unsigned char *)(v8 + 4))
      {
        int v7 = *(_DWORD *)(v8 + 8);
        *(unsigned char *)(v8 + 4) = 0;
      }
      int v13 = *(_DWORD *)v8;
      __int16 v14 = *(_WORD *)(v8 + 12);
      uint64_t v15 = v9;
      while (1)
      {
        uint64_t v16 = v15;
        uint64_t v17 = a1 + v15;
        *(_DWORD *)(v17 + 72) = *(_DWORD *)(v17 + 48);
        int v18 = *(unsigned __int8 *)(v17 + 52);
        *(unsigned char *)(v17 + 76) = v18;
        if (v18)
        {
          *(_DWORD *)(v17 + 80) = *(_DWORD *)(v17 + 56);
          *(unsigned char *)(v17 + 52) = 0;
        }
        *(_WORD *)(v17 + 84) = *(_WORD *)(v17 + 60);
        *(void *)(v17 + 88) = *(void *)(v17 + 64);
        if (v16 == -48) {
          break;
        }
        uint64_t v15 = v16 - 24;
        if (v11 <= *(void *)(a1 + v16 + 40))
        {
          uint64_t v19 = a1 + v15 + 72;
          goto LABEL_16;
        }
      }
      uint64_t v19 = a1;
LABEL_16:
      *(_DWORD *)uint64_t v19 = v13;
      *(unsigned char *)(a1 + v16 + 52) = v12;
      if (v12) {
        *(_DWORD *)(v19 + 8) = v7;
      }
      *(_WORD *)(v19 + 12) = v14;
      *(void *)(v19 + 16) = v11;
      if (++v10 == 8) {
        return v8 + 24 == a2;
      }
    }
    uint64_t v6 = v8;
    v9 += 24;
    v8 += 24;
    if (v8 == a2) {
      return 1;
    }
  }
}

int *sub_244CB15C4(int *result, int *a2)
{
  int v3 = *((unsigned __int8 *)result + 4);
  if (*((unsigned char *)result + 4))
  {
    int v2 = result[2];
    *((unsigned char *)result + 4) = 0;
  }
  int v4 = *result;
  __int16 v5 = *((_WORD *)result + 6);
  *BOOL result = *a2;
  int v6 = *((unsigned __int8 *)a2 + 4);
  *((unsigned char *)result + 4) = v6;
  if (v6) {
    result[2] = a2[2];
  }
  *((_WORD *)result + 6) = *((_WORD *)a2 + 6);
  *a2 = v4;
  *((unsigned char *)a2 + 4) = v3;
  if (v3) {
    a2[2] = v2;
  }
  *((_WORD *)a2 + 6) = v5;
  uint64_t v7 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  return result;
}

int *sub_244CB162C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = (int *)sub_244CB1050(a1, a2, a3);
  if (*(void *)(a4 + 16) > *(void *)(a3 + 16))
  {
    BOOL result = sub_244CB15C4((int *)a3, (int *)a4);
    if (*(void *)(a3 + 16) > *(void *)(a2 + 16))
    {
      BOOL result = sub_244CB15C4((int *)a2, (int *)a3);
      if (*(void *)(a2 + 16) > *(void *)(a1 + 16))
      {
        return sub_244CB15C4((int *)a1, (int *)a2);
      }
    }
  }
  return result;
}

int *sub_244CB16D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL result = sub_244CB162C(a1, a2, a3, a4);
  if (*(void *)(a5 + 16) > *(void *)(a4 + 16))
  {
    BOOL result = sub_244CB15C4((int *)a4, (int *)a5);
    if (*(void *)(a4 + 16) > *(void *)(a3 + 16))
    {
      BOOL result = sub_244CB15C4((int *)a3, (int *)a4);
      if (*(void *)(a3 + 16) > *(void *)(a2 + 16))
      {
        BOOL result = sub_244CB15C4((int *)a2, (int *)a3);
        if (*(void *)(a2 + 16) > *(void *)(a1 + 16))
        {
          return sub_244CB15C4((int *)a1, (int *)a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_244CB17B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (int *)(a1 + 24 * v10);
      do
      {
        sub_244CB19A8(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (*(void *)(v14 + 16) > *(void *)(a1 + 16))
        {
          sub_244CB15C4((int *)v14, (int *)a1);
          sub_244CB19A8(a1, a4, v9, (int *)a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 < 25)
    {
      return v13;
    }
    else
    {
      uint64_t v25 = v13;
      int64_t v15 = v8 / 0x18uLL;
      uint64_t v16 = a2 - 24;
      do
      {
        int v17 = *(unsigned __int8 *)(a1 + 4);
        if (*(unsigned char *)(a1 + 4))
        {
          LODWORD(v8) = *(_DWORD *)(a1 + 8);
          *(unsigned char *)(a1 + 4) = 0;
        }
        int v18 = *(_DWORD *)a1;
        __int16 v19 = *(_WORD *)(a1 + 12);
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v21 = sub_244CB1AE0(a1, a4, v15);
        if (v16 == v21)
        {
          *(_DWORD *)uint64_t v21 = v18;
          *(unsigned char *)(v21 + 4) = v17;
          if (v17) {
            *(_DWORD *)(v21 + 8) = v8;
          }
          *(_WORD *)(v21 + 12) = v19;
          *(void *)(v21 + 16) = v20;
        }
        else
        {
          *(_DWORD *)uint64_t v21 = *(_DWORD *)v16;
          int v22 = *(unsigned __int8 *)(v16 + 4);
          *(unsigned char *)(v21 + 4) = v22;
          if (v22) {
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v16 + 8);
          }
          *(_WORD *)(v21 + 12) = *(_WORD *)(v16 + 12);
          *(void *)(v21 + 16) = *(void *)(v16 + 16);
          *(_DWORD *)uint64_t v16 = v18;
          *(unsigned char *)(v16 + 4) = v17;
          if (v17) {
            *(_DWORD *)(v16 + 8) = v8;
          }
          *(_WORD *)(v16 + 12) = v19;
          *(void *)(v16 + 16) = v20;
          sub_244CB1B7C(a1, v21 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
        v16 -= 24;
      }
      while (v15-- > 2);
      return v25;
    }
  }
  return a3;
}

uint64_t sub_244CB19A8(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v6 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      uint64_t v7 = (int *)(result + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        BOOL v8 = *(void *)(result + 24 * v6 + 16) > *((void *)v7 + 5);
        int v4 = v8;
        v7 += 6 * v8;
        if (v8) {
          uint64_t v6 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      unint64_t v9 = *((void *)a4 + 2);
      if (*((void *)v7 + 2) <= v9)
      {
        int v10 = *((unsigned __int8 *)a4 + 4);
        if (*((unsigned char *)a4 + 4))
        {
          int v4 = a4[2];
          *((unsigned char *)a4 + 4) = 0;
        }
        int v11 = *a4;
        __int16 v12 = *((_WORD *)a4 + 6);
        do
        {
          uint64_t v13 = v7;
          *a4 = *v7;
          int v14 = *((unsigned __int8 *)v7 + 4);
          *((unsigned char *)a4 + 4) = v14;
          if (v14)
          {
            a4[2] = v13[2];
            *((unsigned char *)v13 + 4) = 0;
          }
          *((_WORD *)a4 + 6) = *((_WORD *)v13 + 6);
          *((void *)a4 + 2) = *((void *)v13 + 2);
          if (v5 < v6) {
            break;
          }
          uint64_t v15 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 24 * v15);
          uint64_t v16 = 2 * v6 + 2;
          if (v16 < a3)
          {
            unint64_t v17 = *(void *)(result + 24 * v15 + 16);
            unint64_t v18 = *((void *)v7 + 5);
            v7 += 6 * (v17 > v18);
            if (v17 > v18) {
              uint64_t v15 = v16;
            }
          }
          a4 = v13;
          uint64_t v6 = v15;
        }
        while (*((void *)v7 + 2) <= v9);
        int *v13 = v11;
        *((unsigned char *)v13 + 4) = v10;
        if (v10) {
          _DWORD v13[2] = v4;
        }
        *((_WORD *)v13 + 6) = v12;
        *((void *)v13 + 2) = v9;
      }
    }
  }
  return result;
}

uint64_t sub_244CB1AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = a1 + 24 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v8 + 2 < a3)
    {
      unint64_t v10 = *(void *)(a1 + 24 * v6 + 16);
      unint64_t v11 = *(void *)(v7 + 40);
      v7 += 24 * (v10 > v11);
      if (v10 > v11) {
        uint64_t v3 = v9;
      }
    }
    *(_DWORD *)a1 = *(_DWORD *)v7;
    int v12 = *(unsigned __int8 *)(v7 + 4);
    *(unsigned char *)(a1 + 4) = v12;
    if (v12)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 + 8);
      *(unsigned char *)(v7 + 4) = 0;
    }
    *(_WORD *)(a1 + 12) = *(_WORD *)(v7 + 12);
    *(void *)(a1 + 16) = *(void *)(v7 + 16);
    a1 = v7;
  }
  while (v3 <= v5);
  return v7;
}

uint64_t sub_244CB1B7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v5 >> 1;
    unint64_t v7 = *(void *)(result + 24 * (v5 >> 1) + 16);
    unint64_t v8 = *(void *)(a2 - 8);
    if (v7 > v8)
    {
      uint64_t v9 = a2 - 24;
      int v10 = *(unsigned __int8 *)(a2 - 20);
      if (*(unsigned char *)(a2 - 20))
      {
        int v4 = *(_DWORD *)(a2 - 16);
        *(unsigned char *)(a2 - 20) = 0;
      }
      int v11 = *(_DWORD *)(a2 - 24);
      __int16 v12 = *(_WORD *)(a2 - 12);
      do
      {
        uint64_t v13 = result + 24 * v6;
        *(_DWORD *)uint64_t v9 = *(_DWORD *)v13;
        int v14 = *(unsigned __int8 *)(v13 + 4);
        *(unsigned char *)(v9 + 4) = v14;
        if (v14)
        {
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v13 + 8);
          *(unsigned char *)(v13 + 4) = 0;
        }
        *(_WORD *)(v9 + 12) = *(_WORD *)(v13 + 12);
        uint64_t v15 = result + 24 * v6;
        uint64_t v17 = *(void *)(v15 + 16);
        uint64_t v16 = (unint64_t *)(v15 + 16);
        *(void *)(v9 + 16) = v17;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v9 = v13;
      }
      while (*(void *)(result + 24 * v6 + 16) > v8);
      *(_DWORD *)uint64_t v13 = v11;
      *(unsigned char *)(v13 + 4) = v10;
      if (v10) {
        *(_DWORD *)(v13 + 8) = v4;
      }
      *(_WORD *)(v13 + 12) = v12;
      unint64_t *v16 = v8;
    }
  }
  return result;
}

uint64_t sub_244CB1C38(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32)) {
    return 0;
  }
  sub_244CB1CA0((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_244CB1CA0(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_244CAFA00(a1, (uint64_t *)a2);
  sub_244CAF81C(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_244CB1CE0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_244CB1D48((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_244CB1D48(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_244CAFA00(a1, (uint64_t *)a2);
  sub_244794718(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_244CB1D88(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  sub_244CAFA00((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void *sub_244CB1E04(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  unint64_t v7 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (void *)v6;
        unsigned int v10 = *(_DWORD *)(v6 + 28);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = (void *)(a1 + 8);
LABEL_10:
    int v11 = operator new(0x28uLL);
    *(void *)((char *)v11 + 28) = **a4;
    sub_244CB005C((uint64_t **)a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return v9;
}

uint64_t sub_244CB1EC4(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*((void *)a2 - 1) > *(void *)(v11 + 16))
          {
            BOOL result = (uint64_t)sub_244CB15C4((int *)v11, a2 - 6);
          }
          break;
        case 3uLL:
          BOOL result = sub_244CB1050(v11, v11 + 24, (uint64_t)(a2 - 6));
          break;
        case 4uLL:
          BOOL result = (uint64_t)sub_244CB162C(v11, v11 + 24, v11 + 48, (uint64_t)(a2 - 6));
          break;
        case 5uLL:
          BOOL result = (uint64_t)sub_244CB16D8(v11, v11 + 24, v11 + 48, v11 + 72, (uint64_t)(a2 - 6));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return sub_244CB17B0(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (int *)(v11 + 24 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xC01)
    {
      sub_244CB1050(v11, v11 + 24 * (v15 >> 1), (uint64_t)(a2 - 6));
      uint64_t v18 = 3 * v16;
      uint64_t v19 = v11 + 24 * v16 - 24;
      sub_244CB1050(v11 + 24, v19, (uint64_t)(a2 - 12));
      uint64_t v20 = v11 + 48;
      uint64_t v21 = v11 + 24 + 8 * v18;
      sub_244CB1050(v20, v21, (uint64_t)(a2 - 18));
      sub_244CB1050(v19, (uint64_t)v17, v21);
      sub_244CB15C4((int *)v10, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_244CB1050(v11 + 24 * (v15 >> 1), v11, (uint64_t)(a2 - 6));
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(void *)(v10 - 8) <= *(void *)(v10 + 16))
    {
      BOOL result = sub_244CB1114((int *)v10, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v22 = sub_244CB1264((int *)v10, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v24 = sub_244CB22C4(v10, v22);
    uint64_t v11 = v22 + 24;
    BOOL result = sub_244CB22C4(v22 + 24, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_17:
      BOOL result = sub_244CB1EC4(v10, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 24;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_244CB0EB4((_DWORD *)v11, a2);
  }
  else
  {
    return (uint64_t)sub_244CB0F94((_DWORD *)v11, a2);
  }
}

BOOL sub_244CB22C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 8) > *(void *)(a1 + 16))
      {
        sub_244CB15C4((int *)a1, (int *)(a2 - 24));
        return 1;
      }
      return result;
    case 3uLL:
      sub_244CB1050(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_244CB162C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_244CB16D8(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v6 = a1 + 48;
      sub_244CB1050(a1, a1 + 24, a1 + 48);
      uint64_t v8 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    unint64_t v11 = *(void *)(v8 + 16);
    if (v11 > *(void *)(v6 + 16))
    {
      int v12 = *(unsigned __int8 *)(v8 + 4);
      if (*(unsigned char *)(v8 + 4))
      {
        int v7 = *(_DWORD *)(v8 + 8);
        *(unsigned char *)(v8 + 4) = 0;
      }
      int v13 = *(_DWORD *)v8;
      __int16 v14 = *(_WORD *)(v8 + 12);
      uint64_t v15 = v9;
      while (1)
      {
        uint64_t v16 = v15;
        uint64_t v17 = a1 + v15;
        *(_DWORD *)(v17 + 72) = *(_DWORD *)(v17 + 48);
        int v18 = *(unsigned __int8 *)(v17 + 52);
        *(unsigned char *)(v17 + 76) = v18;
        if (v18)
        {
          *(_DWORD *)(v17 + 80) = *(_DWORD *)(v17 + 56);
          *(unsigned char *)(v17 + 52) = 0;
        }
        *(_WORD *)(v17 + 84) = *(_WORD *)(v17 + 60);
        *(void *)(v17 + 88) = *(void *)(v17 + 64);
        if (v16 == -48) {
          break;
        }
        uint64_t v15 = v16 - 24;
        if (v11 <= *(void *)(a1 + v16 + 40))
        {
          uint64_t v19 = a1 + v15 + 72;
          goto LABEL_16;
        }
      }
      uint64_t v19 = a1;
LABEL_16:
      *(_DWORD *)uint64_t v19 = v13;
      *(unsigned char *)(a1 + v16 + 52) = v12;
      if (v12) {
        *(_DWORD *)(v19 + 8) = v7;
      }
      *(_WORD *)(v19 + 12) = v14;
      *(void *)(v19 + 16) = v11;
      if (++v10 == 8) {
        return v8 + 24 == a2;
      }
    }
    uint64_t v6 = v8;
    v9 += 24;
    v8 += 24;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_244CB24F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268EBEA08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268EBEA08))
  {
    qword_268EBE9E0 = 0;
    word_268EBE9E8 = -1;
    dword_268EBE9EC = -1;
    qword_268EBE9F0 = 0;
    word_268EBE9F8 = -1;
    dword_268EBE9FC = -1;
    qword_268EBEA00 = 0;
    __cxa_guard_release(&qword_268EBEA08);
  }
  return &qword_268EBE9E0;
}

uint64_t *sub_244CB256C(uint64_t *result, uint64_t a2)
{
  *((_WORD *)result + 4) = -1;
  *((_DWORD *)result + 3) = -1;
  result[2] = 0;
  *((_WORD *)result + 12) = -1;
  *((_DWORD *)result + 7) = -1;
  result[4] = 0;
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v2 + 16);
      if (v2 == a2)
      {
        char v5 = (void *)(v3 + 16);
        if (!v3) {
          char v5 = result;
        }
        void *v5 = v4;
        *(void *)(v2 + 16) = 0;
      }
      else
      {
        uint64_t v3 = v2;
      }
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

unsigned char *sub_244CB25CC(unsigned char *result, int a2)
{
  *((_WORD *)result + 4) = -1;
  *((_DWORD *)result + 3) = -1;
  *((void *)result + 2) = 0;
  *((_WORD *)result + 12) = -1;
  *((_DWORD *)result + 7) = -1;
  *((void *)result + 4) = 0;
  uint64_t v2 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
    {
      while (1)
      {
        uint64_t v6 = v2;
        BOOL result = (unsigned char *)(v2 + 8);
        int v7 = *(unsigned __int8 *)(v2 + 8);
        uint64_t v2 = *(void *)(v2 + 16);
        if (v7)
        {
          BOOL result = sub_2446D1880(result);
          if (*(unsigned __int16 *)result == a2) {
            break;
          }
        }
        uint64_t v5 = v6;
        if (!v2) {
          return result;
        }
      }
      uint64_t v8 = (void *)(v5 + 16);
      if (!v5) {
        uint64_t v8 = v4;
      }
      void *v8 = v2;
      *(void *)(v6 + 16) = 0;
    }
    while (v2);
  }
  return result;
}

BOOL sub_244CB2674(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 12) = -1;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = -1;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    while (!sub_244CB2770(v4, a2))
    {
      uint64_t v4 = *(void *)(v4 + 16);
      if (!v4)
      {
        uint64_t v5 = *(void *)a1;
        goto LABEL_6;
      }
    }
    int v7 = sub_244CC8484(0x23u, "InteractionModel");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Duplicate attribute override registration failed", v8, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result)
    {
      sub_244CC4DE0(0x23u, 1);
      return 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
LABEL_6:
    *(void *)(a2 + 16) = v5;
    *(void *)a1 = a2;
    return 1;
  }
  return result;
}

BOOL sub_244CB2770(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = (unsigned char *)(a1 + 8);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = (unsigned char *)(a2 + 8);
  if (!*(unsigned char *)(a2 + 8)) {
    return 1;
  }
  int v5 = *(unsigned __int16 *)sub_2446D1880(v2);
  return v5 == *(unsigned __int16 *)sub_2446D1880(v4);
}

uint64_t sub_244CB27DC(uint64_t *a1, int a2, int a3)
{
  if (*((unsigned __int16 *)a1 + 12) == a2 && *((_DWORD *)a1 + 7) == a3) {
    return 0;
  }
  if (*((unsigned __int16 *)a1 + 4) != a2 || *((_DWORD *)a1 + 3) != a3 || (uint64_t v6 = a1[2]) == 0)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      while (*(unsigned char *)(v6 + 8) && *(unsigned __int16 *)sub_2446D1880((unsigned char *)(v6 + 8)) != a2
           || *(_DWORD *)(v6 + 12) != a3)
      {
        uint64_t v6 = *(void *)(v6 + 16);
        if (!v6) {
          goto LABEL_12;
        }
      }
      *((_WORD *)a1 + 4) = a2;
      *((_DWORD *)a1 + 3) = a3;
      a1[2] = v6;
    }
    else
    {
LABEL_12:
      uint64_t v6 = 0;
      *((_WORD *)a1 + 12) = a2;
      *((_DWORD *)a1 + 7) = a3;
      a1[4] = 0;
    }
  }
  return v6;
}

__n128 sub_244CB28A8@<Q0>(__n128 *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = sub_244CCCAF8((uint64_t)a1);
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = a1[1].n128_u64[0];
  if (!a3->n128_u32[0])
  {
    uint64_t v8 = (__n128 *)v6;
    uint64_t v9 = sub_244CCCAA0(v6);
    __n128 result = *v8;
    *a3 = *v8;
    a3[1].n128_u64[0] = v8[1].n128_u64[0];
    if (!a3->n128_u32[0])
    {
      int v10 = (__n128 *)v9;
      sub_244CCB9E4(v9);
      uint64_t v11 = sub_244CCB98C((uint64_t)v10);
      __n128 result = *v10;
      *a3 = *v10;
      a3[1].n128_u64[0] = v10[1].n128_u64[0];
      if (!a3->n128_u32[0])
      {
        int v12 = (__n128 *)v11;
        uint64_t v13 = sub_244CCC220(v11);
        uint64_t v14 = sub_244CCC278(v13);
        sub_244CCC2D0(v14);
        if (*(unsigned char *)(a2 + 14) == 4)
        {
          int v15 = 0;
          sub_244CCC328((uint64_t)v12, (unsigned __int16 *)&v15);
        }
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        result.n128_u64[0] = sub_244CCBA3C(v12, a3).n128_u64[0];
        if (!a3->n128_u32[0])
        {
          __n128 result = *v10;
          *a3 = *v10;
          a3[1].n128_u64[0] = v10[1].n128_u64[0];
        }
      }
    }
  }
  return result;
}

double sub_244CB29BC@<D0>(uint64_t a1@<X1>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(void *)&double result = sub_244CCBA3C((__n128 *)(a1 + 200), a2).n128_u64[0];
  if (!a2->n128_u32[0])
  {
    *(void *)&double result = sub_244CCBA3C((__n128 *)(a1 + 40), a2).n128_u64[0];
  }
  return result;
}

void sub_244CB2A1C(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if (*(__int16 *)(a1 + 72) != -1) {
    sub_244E228E8();
  }
  BOOL v4 = *(unsigned __int16 *)(a1 + 74) == 0xFFFF;
  *(unsigned char *)(a1 + 70) = v4;
  if (!v4)
  {
    *(unsigned char *)(a1 + 54) = 4;
LABEL_4:
    *(_WORD *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 76) = 1;
    a2->n128_u32[0] = 0;
    a2->n128_u64[1] = (unint64_t)"src/app/AttributeValueEncoder.cpp";
    a2[1].n128_u32[0] = 77;
    return;
  }
  *(unsigned char *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 54) = 1;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  sub_244CB28A8(*(__n128 **)a1, a1 + 40, a2);
  if (!a2->n128_u32[0])
  {
    int v5 = *(void **)(*(void *)a1 + 224);
    int v6 = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    sub_244CB7594(v5, 2, 22, &v6, (uint64_t)a2);
    if (!a2->n128_u32[0])
    {
      if (v6 != 21) {
        sub_244E22840();
      }
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      sub_244CB64F8(*(void *)(*(void *)a1 + 24), 3u, (uint64_t)a2);
      if (!a2->n128_u32[0])
      {
        *(_WORD *)(a1 + 74) = 0;
        goto LABEL_4;
      }
    }
  }
}

void sub_244CB2B40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 70))
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 224);
    if (*(_WORD *)(v2 + 60) != 21169 || (unsigned int v3 = *(_DWORD *)(v2 + 52), v3 <= 2)) {
      sub_244E22990();
    }
    *(_DWORD *)(v2 + 52) = v3 - 3;
    *(_DWORD *)(v2 + 40) += 3;
    sub_244CB7708(v2, 21, (uint64_t)&v4);
    if (v4.n128_u32[0]) {
      sub_244E22AE0();
    }
    sub_244CB29BC(*(void *)a1, &v4);
    if (v4.n128_u32[0]) {
      sub_244E22A38();
    }
    if (!*(unsigned char *)(a1 + 71)) {
      *(unsigned char *)(a1 + 76) = 0;
    }
  }
}

BOOL sub_244CB2BEC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 14) == 16;
}

uint64_t sub_244CB2BFC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 14);
  unsigned int v2 = v1 - 40;
  BOOL v3 = (v1 - 216) < 5;
  return v2 < 8 || v3;
}

BOOL sub_244CB2C20(int a1)
{
  return (a1 - 65) < 2;
}

BOOL sub_244CB2C30(int a1)
{
  return (a1 - 67) < 2;
}

uint64_t sub_244CB2C40(unsigned __int8 *a1)
{
  if (*a1 == 255) {
    return 0;
  }
  else {
    return *a1;
  }
}

uint64_t sub_244CB2C50(unsigned __int16 *a1)
{
  if (*a1 == 0xFFFF) {
    return 0;
  }
  else {
    return *a1;
  }
}

unsigned __int8 *sub_244CB2C64(unsigned __int8 *result, unsigned __int8 *a2, unint64_t a3)
{
  BOOL v3 = result;
  if (a2)
  {
    unint64_t v4 = *a2;
    if (v4 == 255)
    {
      unsigned __int8 v5 = -1;
    }
    else
    {
      if (v4 <= a3) {
        unsigned __int8 v5 = *a2;
      }
      else {
        unsigned __int8 v5 = a3;
      }
      double result = (unsigned __int8 *)memmove(result + 1, a2 + 1, v5);
    }
  }
  else
  {
    unsigned __int8 v5 = 0;
  }
  unsigned __int8 *v3 = v5;
  return result;
}

unsigned __int16 *sub_244CB2CC0(unsigned __int16 *result, unsigned __int16 *a2, unint64_t a3)
{
  BOOL v3 = result;
  if (a2)
  {
    if (*(unsigned __int8 *)a2 == 255 && *((unsigned __int8 *)a2 + 1) == 255)
    {
      *double result = -1;
    }
    else
    {
      int v6 = *a2;
      unint64_t v4 = a2 + 1;
      LODWORD(v5) = v6;
      if (v6 == 0xFFFF) {
        unint64_t v5 = 0;
      }
      else {
        unint64_t v5 = v5;
      }
      if (v5 <= a3) {
        unsigned __int16 v7 = v5;
      }
      else {
        unsigned __int16 v7 = a3;
      }
      double result = (unsigned __int16 *)memmove(result + 1, v4, v7);
      unsigned __int16 *v3 = v7;
    }
  }
  else
  {
    *double result = 0;
  }
  return result;
}

void *sub_244CB2D38(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = 1;
  return sub_244CB352C((void **)(a1 + 16), 0x10uLL);
}

void sub_244CB2D50(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  unsigned int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    j__free(v2);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_244CB2D88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_26519B8C8;
  *(void *)(a4 + 16) = 81;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= 16 - (int)v9) {
      size_t v11 = (16 - v9);
    }
    else {
      size_t v11 = v10;
    }
    memcpy((void *)(*(void *)(a1 + 16) + v9), *(const void **)a2, v11);
    *(_DWORD *)(a1 + 8) += v11;
    *(void *)a2 = sub_244CB3484((void *)a2, v11);
    *(void *)(a2 + 8) = v12;
    sub_244CB2F30(a1, a4);
    int v8 = *(_DWORD *)a1;
  }
  if (v8 == 2)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    unsigned int v14 = *(_DWORD *)(a1 + 4) - v13;
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    if (v15 >= v14) {
      size_t v16 = v14;
    }
    else {
      size_t v16 = v15;
    }
    memcpy((void *)(*(void *)(a1 + 16) + v13), *(const void **)a2, v16);
    *(_DWORD *)(a1 + 8) += v16;
    *(void *)a2 = sub_244CB3484((void *)a2, v16);
    *(void *)(a2 + 8) = v17;
    sub_244CB308C(a1, a3, a4);
  }
  if (*(_DWORD *)a4) {
    BOOL v18 = *(_DWORD *)a4 == 25;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(void *)a1 = 0;
    uint64_t v19 = *(void **)(a1 + 16);
    if (v19)
    {
      j__free(v19);
      *(void *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_244CB2EC4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = v5;
  }
  memcpy((void *)(*(void *)(a1 + 16) + *(unsigned int *)(a1 + 8)), *(const void **)a2, v6);
  *(_DWORD *)(a1 + 8) += v6;
  uint64_t result = sub_244CB3484((void *)a2, v6);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_244CB2F30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 <= 0xF)
  {
    *(_DWORD *)a2 = 25;
    *(void *)(a2 + 8) = "src/lib/core/OTAImageHeader.cpp";
    int v8 = 113;
LABEL_15:
    *(_DWORD *)(a2 + 16) = v8;
    return result;
  }
  unint64_t v4 = (_DWORD *)result;
  unsigned int v5 = (void **)(result + 16);
  v11[0] = *(void *)(result + 16);
  v11[1] = v11[0];
  uint64_t v12 = v3;
  LODWORD(v13) = 0;
  *((void *)&v13 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v14) = 330;
  if (!v11[0]) {
    uint64_t v12 = 0;
  }
  int v10 = 0;
  uint64_t v9 = 0;
  sub_244CC5558((uint64_t)v11, &v10);
  sub_244CC55C4((uint64_t)v11, &v9);
  uint64_t result = sub_244CC5558((uint64_t)v11, v4 + 1);
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v14;
  if (!*(_DWORD *)a2)
  {
    if (v10 == 468644126)
    {
      size_t v6 = v4[1];
      if (v6 > 0x400)
      {
        int v8 = 121;
      }
      else
      {
        uint64_t result = (uint64_t)sub_244CB352C(v5, v6);
        if (*v5)
        {
          int v7 = 0;
          _DWORD *v4 = 2;
          _OWORD v4[2] = 0;
          int v8 = 127;
LABEL_14:
          *(_DWORD *)a2 = v7;
          *(void *)(a2 + 8) = "src/lib/core/OTAImageHeader.cpp";
          goto LABEL_15;
        }
        int v8 = 122;
      }
      int v7 = 11;
      goto LABEL_14;
    }
    int v8 = 119;
    int v7 = 218;
    goto LABEL_14;
  }
  return result;
}

void sub_244CB308C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a1 + 8) < *(_DWORD *)(a1 + 4))
  {
    *(_DWORD *)a3 = 25;
    *(void *)(a3 + 8) = "src/lib/core/OTAImageHeader.cpp";
    int v4 = 132;
LABEL_3:
    *(_DWORD *)(a3 + 16) = v4;
    return;
  }
  sub_244CB3988((uint64_t)v10);
  sub_244CB39B8((uint64_t)v10, *(void *)(a1 + 16), *(unsigned int *)(a1 + 8));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB55E4((uint64_t)v10, 21, 256, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    int v9 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_244CB4C90((uint64_t)v10, &v9, a3);
    if (!*(_DWORD *)a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_244CB54B4((uint64_t)v10, 0, (void *)a3);
      if (!*(_DWORD *)a3)
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        sub_244CB3F40((uint64_t)v10, (_WORD *)a2, a3);
        if (!*(_DWORD *)a3)
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CB54B4((uint64_t)v10, 1, (void *)a3);
          if (!*(_DWORD *)a3)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            sub_244CB3F40((uint64_t)v10, (_WORD *)(a2 + 2), a3);
            if (!*(_DWORD *)a3)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              *(void *)(a3 + 16) = 0;
              sub_244CB54B4((uint64_t)v10, 2, (void *)a3);
              if (!*(_DWORD *)a3)
              {
                *(void *)a3 = 0;
                *(void *)(a3 + 8) = 0;
                *(void *)(a3 + 16) = 0;
                sub_244CB3FB0((uint64_t)v10, (_DWORD *)(a2 + 4), a3);
                if (!*(_DWORD *)a3)
                {
                  *(void *)a3 = 0;
                  *(void *)(a3 + 8) = 0;
                  *(void *)(a3 + 16) = 0;
                  sub_244CB54B4((uint64_t)v10, 3, (void *)a3);
                  if (!*(_DWORD *)a3)
                  {
                    *(void *)a3 = 0;
                    *(void *)(a3 + 8) = 0;
                    *(void *)(a3 + 16) = 0;
                    sub_244CB41F0((uint64_t)v10, (_OWORD *)(a2 + 8), (void *)a3);
                    if (!*(_DWORD *)a3)
                    {
                      if (*(void *)(a2 + 16) > 0x40uLL)
                      {
                        int v4 = 149;
                      }
                      else
                      {
                        *(void *)a3 = 0;
                        *(void *)(a3 + 8) = 0;
                        *(void *)(a3 + 16) = 0;
                        sub_244CB54B4((uint64_t)v10, 4, (void *)a3);
                        if (*(_DWORD *)a3) {
                          return;
                        }
                        *(void *)a3 = 0;
                        *(void *)(a3 + 8) = 0;
                        *(void *)(a3 + 16) = 0;
                        sub_244CB3EFC((uint64_t)v10, (void *)(a2 + 24), a3);
                        if (*(_DWORD *)a3) {
                          return;
                        }
                        *(void *)a3 = 0;
                        *(void *)(a3 + 8) = 0;
                        *(void *)(a3 + 16) = 0;
                        sub_244CB4E58((uint64_t)v10, (void *)a3);
                        if (*(_DWORD *)a3) {
                          return;
                        }
                        uint64_t v7 = v11;
                        if (v11 == 5)
                        {
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          *(_DWORD *)(a2 + 36) = 0;
                          *(unsigned char *)(a2 + 32) = 1;
                          sub_244CB3FB0((uint64_t)v10, (_DWORD *)(a2 + 36), a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB4E58((uint64_t)v10, (void *)a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          uint64_t v7 = v11;
                        }
                        if (v7 == 6)
                        {
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          *(_DWORD *)(a2 + 44) = 0;
                          *(unsigned char *)(a2 + 40) = 1;
                          sub_244CB3FB0((uint64_t)v10, (_DWORD *)(a2 + 44), a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB4E58((uint64_t)v10, (void *)a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          uint64_t v7 = v11;
                        }
                        if (v7 != 7) {
                          goto LABEL_31;
                        }
                        *(void *)a3 = 0;
                        *(void *)(a3 + 8) = 0;
                        *(void *)(a3 + 16) = 0;
                        sub_244CB41F0((uint64_t)v10, (_OWORD *)(a2 + 48), (void *)a3);
                        if (*(_DWORD *)a3) {
                          return;
                        }
                        if (*(void *)(a2 + 56) <= 0x100uLL)
                        {
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB4E58((uint64_t)v10, (void *)a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
LABEL_31:
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB5424((uint64_t)v10, 8, a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB34C4((uint64_t)v10, (unsigned char *)(a2 + 64), (void *)a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB54B4((uint64_t)v10, 9, (void *)a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB40C8((uint64_t)v10, (_OWORD *)(a2 + 72), (void *)a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          *(void *)a3 = 0;
                          *(void *)(a3 + 8) = 0;
                          *(void *)(a3 + 16) = 0;
                          sub_244CB4D00((uint64_t)v10, v9, a3);
                          if (*(_DWORD *)a3) {
                            return;
                          }
                          int v8 = 0;
                          int v4 = 180;
LABEL_39:
                          *(_DWORD *)a3 = v8;
                          *(void *)(a3 + 8) = "src/lib/core/OTAImageHeader.cpp";
                          goto LABEL_3;
                        }
                        int v4 = 169;
                      }
                      int v8 = 30;
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_244CB3484(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 < a2) {
    sub_244E22B88();
  }
  sub_2446C1098(&v4, *a1 + a2, v2 - a2);
  return v4;
}

uint64_t sub_244CB34C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  char v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_244CB3E8C(a1, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = 519;
  }
  return result;
}

void *sub_244CB352C(void **a1, size_t a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    j__free(v4);
    *a1 = 0;
  }
  uint64_t result = sub_244CC4D84(a2);
  *a1 = result;
  return result;
}

uint64_t sub_244CB356C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)uint64_t result = &unk_26F953320;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 48) = a4;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_244CB35A4(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = &unk_26F953320;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 48) = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_244CB35DC(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 48) = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void sub_244CB35F8(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_244CB3988((uint64_t)v8);
  sub_244CB3A10((uint64_t)v8, a1, *(_DWORD *)(a1 + 56), (uint64_t)v11);
  v8[0] = *(_DWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CB4E58((uint64_t)v8, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB4F70((uint64_t)v8, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      int v4 = *(_DWORD *)(a1 + 56);
      int v5 = v10;
      uint64_t v6 = v9;
      if (!*(void *)(a1 + 24)
        || (double v7 = sub_244CB3A10((uint64_t)v8, a1, *(_DWORD *)(a1 + 56), (uint64_t)v11),
            v8[0] = *(_DWORD *)(a1 + 8),
            a2[1] = 0,
            a2[2] = 0,
            *a2 = 0,
            (*(void (**)(uint64_t, void, _DWORD *, double))(a1 + 24))(a1, *(void *)(a1 + 16), v8, v7),
            !*(_DWORD *)a2))
      {
        *(_DWORD *)(a1 + 56) = v4 - v5;
        *(void *)(a1 + 48) = v6;
        *(_DWORD *)a2 = 0;
        a2[1] = "src/lib/core/TLVCircularBuffer.cpp";
        *((_DWORD *)a2 + 4) = 162;
      }
    }
  }
}

uint64_t sub_244CB3708(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void sub_244CB372C(uint64_t a1@<X0>, unint64_t *a2@<X2>, _DWORD *a3@<X3>, void *a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 56);
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  if (v8 >= v9)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB35F8(a1, a4);
    if (*(_DWORD *)a4) {
      return;
    }
    unsigned int v8 = *(_DWORD *)(a1 + 56);
    unsigned int v9 = *(_DWORD *)(a1 + 40);
  }
  unint64_t v10 = *(void *)(a1 + 32) + (*(void *)(a1 + 48) - *(void *)(a1 + 32) + (unint64_t)v8) % v9;
  *a2 = v10;
  unint64_t v11 = *(void *)(a1 + 48);
  if (v10 >= v11) {
    int v12 = *(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 32) - v10;
  }
  else {
    int v12 = v11 - v10;
  }
  *a3 = v12;
  *(_DWORD *)a4 = 0;
  a4[1] = "src/lib/core/TLVCircularBuffer.cpp";
  *((_DWORD *)a4 + 4) = 201;
}

uint64_t sub_244CB37F8(uint64_t result, unint64_t *a2, _DWORD *a3)
{
  unint64_t v3 = *(void *)(result + 32)
     + (*(void *)(result + 48) - *(void *)(result + 32) + (unint64_t)*(unsigned int *)(result + 56))
     % *(unsigned int *)(result + 40);
  *a2 = v3;
  unint64_t v4 = *(void *)(result + 48);
  if (v3 >= v4) {
    int v5 = *(_DWORD *)(result + 40) + *(_DWORD *)(result + 32) - v3;
  }
  else {
    int v5 = v4 - v3;
  }
  *a3 = v5;
  return result;
}

uint64_t sub_244CB384C@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_26519B8E0;
  *(void *)(a4 + 16) = 240;
  if (a3)
  {
    unint64_t v4 = a2 + a3;
    unint64_t v5 = *(void *)(result + 48);
    if (v4 <= v5) {
      int v6 = *(_DWORD *)(result + 40) + v4 - v5;
    }
    else {
      int v6 = v4 - v5;
    }
    *(_DWORD *)(result + 56) = v6;
  }
  return result;
}

uint64_t sub_244CB3894(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_244CB38B8@<X0>(uint64_t result@<X0>, unint64_t *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_26519B8F8;
  *(void *)(a4 + 16) = 288;
  uint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = *(void *)(result + 48);
  uint64_t v6 = *(unsigned int *)(result + 56);
  unint64_t v7 = *(unsigned int *)(result + 40);
  unint64_t v8 = *a2;
  if (*a2)
  {
    unint64_t v9 = *(void *)(result + 32);
    if (v8 < v4 + v7)
    {
      int v10 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    *a2 = v5;
    unint64_t v9 = *(void *)(result + 32);
    if (v5 != v9 + *(unsigned int *)(result + 40)) {
      unint64_t v9 = v5;
    }
  }
  unint64_t v11 = v4 + (v5 - v4 + v6) % v7;
  *a2 = v9;
  if (*(_DWORD *)(result + 56) && v11 <= v9)
  {
    int v12 = *(_DWORD *)(result + 40) + *(_DWORD *)(result + 32) - v9;
    *a3 = v12;
    if (v11 != *a2 || v8 == 0) {
      int v10 = v12;
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = v11 - v9;
  }
LABEL_15:
  *a3 = v10;
  return result;
}

void sub_244CB3974()
{
}

double sub_244CB3988(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 68) = -1;
  *(unsigned char *)(a1 + 70) = 0;
  return result;
}

double sub_244CB39B8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0xFFFFFFFF) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = a3;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a2 + v3;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = v3;
  *(_WORD *)(a1 + 68) = -1;
  *(void *)&double result = 256;
  *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
  *(_DWORD *)(a1 + 64) = -1;
  *(unsigned char *)(a1 + 70) = 0;
  *(_DWORD *)a1 = -1;
  return result;
}

double sub_244CB39F8(uint64_t a1)
{
  *(_WORD *)(a1 + 68) = -1;
  *(void *)&double result = 256;
  *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
  return result;
}

double sub_244CB3A10@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  unsigned int v10 = 0;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a2 + 16))(&v8, a2, a1, a1 + 40, &v10);
  if (v8)
  {
    double result = *(double *)&v8;
    *(_OWORD *)a4 = v8;
    *(void *)(a4 + 16) = v9;
  }
  else
  {
    *(void *)(a1 + 48) = *(void *)(a1 + 40) + v10;
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 60) = a3;
    *(_WORD *)(a1 + 68) = -1;
    *(void *)&double result = 256;
    *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
    *(_DWORD *)(a1 + 64) = -1;
    *(unsigned char *)(a1 + 70) = 0;
    *(_DWORD *)a1 = -1;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a4 + 16) = 92;
  }
  return result;
}

uint64_t sub_244CB3B04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_WORD *)(result + 68) = *(_WORD *)(a2 + 68);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(result + 70) = *(unsigned char *)(a2 + 70);
  *(_DWORD *)double result = *(_DWORD *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t sub_244CB3B68(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 68);
  int v2 = v1 & 0x1F;
  if (v1 == 0xFFFF) {
    int v2 = -1;
  }
  if (v2 == 24) {
    return 0xFFFFFFFFLL;
  }
  if ((v2 & 0xFE) == 0xA) {
    return 10;
  }
  uint64_t result = (char)v2;
  if (v1 != 0xFFFF && (int)result < 20) {
    return v2 & 0xFC;
  }
  return result;
}

uint64_t sub_244CB3BC0(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 68);
  if (v1 == 0xFFFF) {
    return -1;
  }
  else {
    return v1 & 0x1F;
  }
}

uint64_t sub_244CB3BE0(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 68);
  if (v1 == 0xFFFF || (v1 & 0x1Cu) - 12 > 7) {
    return 0;
  }
  else {
    return *(unsigned int *)(a1 + 24);
  }
}

uint64_t sub_244CB3C0C@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int16 *)(result + 68);
  if (v3 == 0xFFFF) {
    int v4 = 255;
  }
  else {
    int v4 = v3 & 0x1F;
  }
  if (v4 == 8)
  {
    char v5 = 0;
  }
  else
  {
    if (v4 != 9)
    {
      int v7 = 143;
      int v6 = 38;
      goto LABEL_10;
    }
    char v5 = 1;
  }
  int v6 = 0;
  *a2 = v5;
  int v7 = 144;
LABEL_10:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244CB3C70@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  long long v6 = 0uLL;
  uint64_t result = sub_244CB3CF0(a1, &v8, (uint64_t)&v6);
  if (v8 == (char)v8)
  {
    *a2 = v8;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v7;
  }
  else
  {
    *(_DWORD *)a3 = 143;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 153;
  }
  return result;
}

uint64_t sub_244CB3CF0@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int16 *)(result + 68);
  if (v3 == 0xFFFF) {
    int v4 = 255;
  }
  else {
    int v4 = v3 & 0x1F;
  }
  switch(v4)
  {
    case 0:
      uint64_t v5 = *(char *)(result + 24);
      goto LABEL_10;
    case 1:
      uint64_t v5 = *(__int16 *)(result + 24);
      goto LABEL_10;
    case 2:
      uint64_t v5 = *(int *)(result + 24);
      goto LABEL_10;
    case 3:
      uint64_t v5 = *(void *)(result + 24);
LABEL_10:
      int v7 = 0;
      *a2 = v5;
      int v6 = 204;
      break;
    default:
      int v6 = 201;
      int v7 = 38;
      break;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244CB3D8C@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  long long v6 = 0uLL;
  uint64_t result = sub_244CB3CF0(a1, &v8, (uint64_t)&v6);
  if (v8 == (__int16)v8)
  {
    *a2 = v8;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v7;
  }
  else
  {
    *(_DWORD *)a3 = 143;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 165;
  }
  return result;
}

uint64_t sub_244CB3E0C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  long long v6 = 0uLL;
  uint64_t result = sub_244CB3CF0(a1, &v8, (uint64_t)&v6);
  if (v8 == (int)v8)
  {
    *a2 = v8;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v7;
  }
  else
  {
    *(_DWORD *)a3 = 143;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 177;
  }
  return result;
}

uint64_t sub_244CB3E8C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_WORD *)(result + 68) & 0x1C) != 4)
  {
    LOBYTE(v3) = 0;
    int v4 = 38;
    int v5 = 255;
    goto LABEL_5;
  }
  unint64_t v3 = *(void *)(result + 24);
  if (v3 < 0x100)
  {
    int v4 = 0;
    int v5 = 257;
LABEL_5:
    *a2 = v3;
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = 0;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  *(_DWORD *)a3 = 143;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = 213;
  return result;
}

uint64_t sub_244CB3EFC@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_WORD *)(result + 68) & 0x1C) == 4)
  {
    int v3 = 0;
    *a2 = *(void *)(result + 24);
    int v4 = 257;
  }
  else
  {
    int v4 = 255;
    int v3 = 38;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_244CB3F40@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_WORD *)(result + 68) & 0x1C) != 4)
  {
    LOWORD(v3) = 0;
    int v4 = 38;
    int v5 = 255;
    goto LABEL_5;
  }
  unint64_t v3 = *(void *)(result + 24);
  if (v3 < 0x10000)
  {
    int v4 = 0;
    int v5 = 257;
LABEL_5:
    *a2 = v3;
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = 0;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  *(_DWORD *)a3 = 143;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = 225;
  return result;
}

uint64_t sub_244CB3FB0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_WORD *)(result + 68) & 0x1C) != 4)
  {
    LODWORD(v3) = 0;
    LODWORD(v4) = 38;
    int v5 = 255;
    goto LABEL_5;
  }
  unint64_t v3 = *(void *)(result + 24);
  unint64_t v4 = HIDWORD(v3);
  if (!HIDWORD(v3))
  {
    int v5 = 257;
LABEL_5:
    *a2 = v3;
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = 0;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  *(_DWORD *)a3 = 143;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = 237;
  return result;
}

uint64_t sub_244CB401C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_WORD *)(result + 68) & 0x1F) == 0xA)
  {
    int v3 = 0;
    *a2 = *(void *)(result + 24);
    int v4 = 285;
  }
  else
  {
    int v4 = 283;
    int v3 = 38;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_244CB4060@<X0>(uint64_t result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int16 *)(result + 68);
  if (v3 == 0xFFFF) {
    int v4 = 255;
  }
  else {
    int v4 = v3 & 0x1F;
  }
  if (v4 == 11)
  {
    double v5 = *(double *)(result + 24);
  }
  else
  {
    if (v4 != 10)
    {
      int v7 = 303;
      int v6 = 38;
      goto LABEL_10;
    }
    double v5 = *(float *)(result + 24);
  }
  int v6 = 0;
  *a2 = v5;
  int v7 = 305;
LABEL_10:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

double sub_244CB40C8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB4170(a1, &v11, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    int v7 = *(unsigned __int16 *)(a1 + 68);
    if (v7 == 0xFFFF || (v7 & 0x1Cu) - 12 > 7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *(unsigned int *)(a1 + 24);
    }
    sub_2446C1098(&v10, v11, v9);
    double result = *(double *)&v10;
    *a2 = v10;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.cpp";
    *((_DWORD *)a3 + 4) = 314;
  }
  return result;
}

uint64_t sub_244CB4170@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int16 *)(result + 68);
  if (v3 != 0xFFFF && (v3 & 0x1Cu) - 12 <= 7)
  {
    if (*(_DWORD *)(result + 24))
    {
      uint64_t v7 = *(void *)(result + 40);
      if ((*(_DWORD *)(result + 48) - v7) < *(_DWORD *)(result + 24))
      {
        int v5 = 511;
        int v6 = 34;
        goto LABEL_13;
      }
      int v5 = 513;
    }
    else
    {
      uint64_t v7 = 0;
      int v5 = 504;
    }
    int v6 = 0;
    *a2 = v7;
    goto LABEL_13;
  }
  int v5 = 499;
  int v6 = 38;
LABEL_13:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244CB41F0@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  if ((*(_WORD *)(result + 68) & 0x1C) == 0xC)
  {
    uint64_t v5 = result;
    __s = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    double result = sub_244CB4170(result, &__s, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return result;
    }
    int v6 = __s;
    if (__s)
    {
      uint64_t v7 = *(void *)(v5 + 24);
      uint64_t v8 = memchr(__s, 31, v7);
      unsigned int v9 = v8 - v6;
      if (!v8) {
        unsigned int v9 = v7;
      }
      double result = (uint64_t)sub_24479476C(&v11, (uint64_t)v6, v9);
      *a2 = v11;
      int v10 = 367;
    }
    else
    {
      int v10 = 334;
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.cpp";
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/lib/core/TLVReader.cpp";
    int v10 = 326;
  }
  *((_DWORD *)a3 + 4) = v10;
  return result;
}

uint64_t sub_244CB42D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)a2 = 0;
  if ((*(_WORD *)(result + 68) & 0x1C) == 0xC)
  {
    uint64_t v5 = result;
    __s = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    double result = sub_244CB4170(result, &__s, (uint64_t)a3);
    if (*(_DWORD *)a3) {
      return result;
    }
    int v6 = (int)__s;
    if (__s)
    {
      unsigned int v7 = *(_DWORD *)(v5 + 24);
      double result = (uint64_t)memchr(__s, 31, v7);
      if (result)
      {
        uint64_t v8 = (unsigned char *)(result + 1);
        size_t v9 = v7 + v6 - (result + 1);
        double result = (uint64_t)memchr((void *)(result + 1), 31, v9);
        if (result) {
          size_t v10 = (result - v8);
        }
        else {
          size_t v10 = v9;
        }
        if (v10)
        {
          if (v10 >= 5)
          {
            *(_DWORD *)a3 = 35;
            a3[1] = "src/lib/core/TLVReader.cpp";
            int v11 = 403;
          }
          else if (*v8 == 48)
          {
            *(_DWORD *)a3 = 35;
            a3[1] = "src/lib/core/TLVReader.cpp";
            int v11 = 405;
          }
          else
          {
            int v14 = 808464432;
            memcpy((char *)&v14 - v10 + 4, v8, v10);
            __int16 v13 = 0;
            double result = sub_244CC5C14((uint64_t)&v14, 4uLL, &v13);
            if (result == 2)
            {
              int v12 = 0;
              *(unsigned char *)a2 = 1;
              *(_WORD *)(a2 + 2) = v13;
              int v11 = 415;
            }
            else
            {
              int v11 = 412;
              int v12 = 35;
            }
            *(_DWORD *)a3 = v12;
            a3[1] = "src/lib/core/TLVReader.cpp";
          }
        }
        else
        {
          *(_DWORD *)a3 = 0;
          a3[1] = "src/lib/core/TLVReader.cpp";
          int v11 = 401;
        }
      }
      else
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/lib/core/TLVReader.cpp";
        int v11 = 388;
      }
    }
    else
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/lib/core/TLVReader.cpp";
      int v11 = 380;
    }
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/lib/core/TLVReader.cpp";
    int v11 = 373;
  }
  *((_DWORD *)a3 + 4) = v11;
  return result;
}

void sub_244CB44B4(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *(unsigned __int16 *)(a1 + 68);
  if (v5 == 0xFFFF || (v5 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a4 = 38;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    int v7 = 421;
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 24);
    if (v10 <= a3)
    {
      long long v11 = 0uLL;
      uint64_t v12 = 0;
      sub_244CB4590(a1, a2, v10, (uint64_t)&v11);
      if (v11)
      {
        *(_OWORD *)a4 = v11;
        *(void *)(a4 + 16) = v12;
        return;
      }
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      int v7 = 432;
    }
    else
    {
      *(_DWORD *)a4 = 25;
      *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      int v7 = 424;
    }
  }
  *(_DWORD *)(a4 + 16) = v7;
}

double sub_244CB4590@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a3)
  {
    unsigned int v5 = a3;
    while (1)
    {
      v12.n128_u32[0] = 34;
      v12.n128_u64[1] = (unint64_t)"src/lib/core/TLVReader.cpp";
      int v13 = 936;
      sub_244CB52E4(a1, &v12, (uint64_t)&v14);
      double result = *(double *)&v15;
      long long v17 = v15;
      int v18 = v16;
      if (v14) {
        break;
      }
      size_t v9 = *(char **)(a1 + 40);
      unsigned int v10 = *(_DWORD *)(a1 + 48) - v9;
      if (v5 >= v10) {
        size_t v11 = v10;
      }
      else {
        size_t v11 = v5;
      }
      if (a2)
      {
        memcpy(a2, v9, v11);
        a2 += v11;
        size_t v9 = *(char **)(a1 + 40);
      }
      *(void *)(a1 + 40) = &v9[v11];
      *(_DWORD *)(a1 + 56) += v11;
      v5 -= v11;
      if (!v5) {
        goto LABEL_10;
      }
    }
    *(_DWORD *)a4 = v14;
    double result = *(double *)&v17;
    *(_OWORD *)(a4 + 4) = v17;
    *(_DWORD *)(a4 + 20) = v18;
  }
  else
  {
LABEL_10:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a4 + 16) = 956;
  }
  return result;
}

void sub_244CB46D0(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(unsigned __int16 *)(a1 + 68);
  if (v4 == 0xFFFF || (v4 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a4 = 38;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    int v6 = 438;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v6;
    return;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7 + 1 > a3)
  {
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    int v6 = 441;
    goto LABEL_9;
  }
  a2[v7] = 0;
  sub_244CB44B4(a1, a2, a3 - 1, a4);
}

void sub_244CB4744(uint64_t a1@<X0>, void **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *(unsigned __int16 *)(a1 + 68);
  if (v5 == 0xFFFF || (v5 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a4 = 38;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    int v7 = 451;
  }
  else
  {
    size_t v11 = (char *)sub_244CC4D84(*(unsigned int *)(a1 + 24));
    *a2 = v11;
    if (v11)
    {
      long long v12 = 0uLL;
      uint64_t v13 = 0;
      sub_244CB4590(a1, v11, *(_DWORD *)(a1 + 24), (uint64_t)&v12);
      if (v12)
      {
        j__free(*a2);
        *a2 = 0;
        *(_OWORD *)a4 = v12;
        *(void *)(a4 + 16) = v13;
        return;
      }
      *a3 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      int v7 = 468;
    }
    else
    {
      *(_DWORD *)a4 = 11;
      *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      int v7 = 455;
    }
  }
  *(_DWORD *)(a4 + 16) = v7;
}

void sub_244CB484C(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(unsigned __int16 *)(a1 + 68);
  if (v4 == 0xFFFF || (v4 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a3 = 38;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v6 = 474;
LABEL_13:
    *(_DWORD *)(a3 + 16) = v6;
    return;
  }
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >= 0xFFFFFFFF)
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v6 = 477;
    goto LABEL_13;
  }
  unsigned int v10 = (char *)sub_244CC4D84(v8 + 1);
  *a2 = v10;
  if (!v10)
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v6 = 481;
    goto LABEL_13;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CB4590(a1, v10, *(_DWORD *)(a1 + 24), a3);
  size_t v11 = *a2;
  if (*(_DWORD *)a3)
  {
    j__free(v11);
    *a2 = 0;
  }
  else
  {
    v11[*(void *)(a1 + 24)] = 0;
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_244CB4950@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3 = *(_WORD *)(result + 68);
  int v4 = v3 & 0x1F;
  if (v3 == -1) {
    int v4 = -1;
  }
  if ((v4 - 21) > 2)
  {
    int v7 = 520;
    int v5 = 3;
  }
  else
  {
    int v5 = 0;
    *(void *)(a2 + 32) = *(void *)(result + 32);
    *(void *)(a2 + 40) = *(void *)(result + 40);
    *(void *)(a2 + 48) = *(void *)(result + 48);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 56);
    int v6 = *(_DWORD *)(result + 60);
    *(_WORD *)(a2 + 68) = -1;
    *(_OWORD *)(a2 + 16) = xmmword_244EAE1C0;
    *(_DWORD *)(a2 + 60) = v6;
    *(_DWORD *)(a2 + 64) = v4;
    *(unsigned char *)(a2 + 70) = 0;
    *(_DWORD *)a2 = *(_DWORD *)result;
    *(void *)(a2 + 8) = *(void *)(result + 8);
    *(unsigned char *)(result + 70) = 1;
    int v7 = 535;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244CB49F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 70))
  {
    __int16 v6 = *(_WORD *)(a1 + 68);
    if (v6 == -1) {
      unsigned __int8 v7 = -1;
    }
    else {
      unsigned __int8 v7 = v6 & 0x1F;
    }
    if (*(unsigned __int8 *)(a2 + 64) == v7)
    {
      sub_244CB4B48(a2, (uint64_t)&v9);
      long long v12 = v10;
      int v13 = v11;
      if (v9)
      {
        *(_DWORD *)a3 = v9;
        *(_OWORD *)(a3 + 4) = v12;
        *(_DWORD *)(a3 + 20) = v13;
        return;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_WORD *)(a1 + 68) = -1;
      *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      int v8 = 559;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      int v8 = 546;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v8 = 543;
  }
  *(_DWORD *)(a3 + 16) = v8;
}

void sub_244CB4B48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a1 + 64);
  *(unsigned char *)(a1 + 70) = 0;
  while (1)
  {
    __int16 v6 = *(_WORD *)(a1 + 68);
    int v7 = v6 == -1 ? -1 : v6 & 0x1F;
    if (v7 == 24) {
      break;
    }
    if ((v7 - 21) > 2u) {
      goto LABEL_13;
    }
    ++v4;
    int v7 = v7;
LABEL_12:
    *(_DWORD *)(a1 + 64) = v7;
LABEL_13:
    sub_244CB5668(a1, (uint64_t)&v9);
    int v8 = v9;
    long long v12 = v10;
    int v13 = v11;
    if (!v9)
    {
      sub_244CB5080(a1, (uint64_t)&v9);
      int v8 = v9;
      long long v12 = v10;
      int v13 = v11;
      if (!v9) {
        continue;
      }
    }
    *(_DWORD *)a2 = v8;
    *(_OWORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 20) = v13;
    return;
  }
  if (v4)
  {
    if (--v4) {
      int v7 = -2;
    }
    else {
      int v7 = v5;
    }
    goto LABEL_12;
  }
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a2 + 16) = 734;
}

uint64_t sub_244CB4C90@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3 = *(_WORD *)(result + 68);
  int v4 = v3 & 0x1F;
  if (v3 == -1) {
    int v4 = -1;
  }
  if ((v4 - 21) > 2)
  {
    int v6 = 566;
    int v5 = 3;
  }
  else
  {
    int v5 = 0;
    *a2 = *(_DWORD *)(result + 64);
    *(_DWORD *)(result + 64) = v4;
    *(_WORD *)(result + 68) = -1;
    *(_OWORD *)(result + 16) = xmmword_244EAE1C0;
    *(unsigned char *)(result + 70) = 0;
    int v6 = 574;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_244CB4D00(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  sub_244CB4B48(a1, (uint64_t)&v7);
  int v6 = v7;
  long long v10 = v8;
  int v11 = v9;
  if (v7)
  {
    *(_OWORD *)(a3 + 4) = v10;
    *(_DWORD *)(a3 + 20) = v11;
  }
  else
  {
    *(_DWORD *)(a1 + 64) = a2;
    *(_WORD *)(a1 + 68) = -1;
    *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 588;
  }
  *(_DWORD *)a3 = v6;
}

double sub_244CB4DC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  sub_244CB4E58(a1, &v5);
  if (!v5)
  {
    *(_DWORD *)a2 = 43;
    *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    int v4 = 597;
    goto LABEL_5;
  }
  if (v5 == 33)
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    int v4 = 595;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_244CB4E58(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244CB4F70(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CB5080(a1, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 68);
      int v5 = v4 & 0x1F;
      if (v4 == 0xFFFF) {
        int v5 = -1;
      }
      if (v5 == 24)
      {
        int v6 = 608;
        int v7 = 33;
LABEL_13:
        *(_DWORD *)a2 = v7;
        a2[1] = "src/lib/core/TLVReader.cpp";
        *((_DWORD *)a2 + 4) = v6;
        return;
      }
      if ((v5 - 12) > 7u) {
        goto LABEL_12;
      }
      int v7 = 0;
      int v6 = 617;
      if (v4 == 0xFFFF || (v4 & 0x1Cu) - 12 > 7) {
        goto LABEL_13;
      }
      if (!*(_DWORD *)(a1 + 24)
        || (*a2 = 0,
            a2[1] = 0,
            a2[2] = 0,
            v8.n128_u32[0] = 34,
            v8.n128_u64[1] = (unint64_t)"src/lib/core/TLVReader.cpp",
            int v9 = 614,
            sub_244CB52E4(a1, &v8, (uint64_t)a2),
            !*(_DWORD *)a2))
      {
LABEL_12:
        int v7 = 0;
        int v6 = 617;
        goto LABEL_13;
      }
    }
  }
}

void sub_244CB4F70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(a1 + 68);
  if (v3 == -1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 & 0x1F;
  }
  if (v4 != 24)
  {
    if ((v4 - 21) > 2u)
    {
      sub_244CB5668(a1, (uint64_t)v11);
      uint64_t v8 = v11[0];
      if (!LODWORD(v11[0]))
      {
        *(_WORD *)(a1 + 68) = -1;
        *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
LABEL_12:
        *(_DWORD *)a2 = 0;
        *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
        int v5 = 676;
        goto LABEL_13;
      }
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v4;
      *(_WORD *)(a1 + 68) = -1;
      *(_OWORD *)(a1 + 16) = xmmword_244EAE1C0;
      *(unsigned char *)(a1 + 70) = 0;
      sub_244CB4D00(a1, v7, (uint64_t)v11);
      uint64_t v8 = v11[0];
      if (!LODWORD(v11[0])) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = v11[1];
    uint64_t v10 = v11[2];
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v10;
    return;
  }
  *(_DWORD *)a2 = 33;
  *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
  int v5 = 654;
LABEL_13:
  *(_DWORD *)(a2 + 16) = v5;
}

void sub_244CB5080(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v18.n128_u32[0] = 33;
  v18.n128_u64[1] = (unint64_t)"src/lib/core/TLVReader.cpp";
  int v19 = 764;
  sub_244CB52E4(a1, &v18, (uint64_t)v20);
  int v4 = *(_DWORD *)v20;
  long long v24 = *(_OWORD *)&v20[4];
  int v25 = v21;
  if (*(_DWORD *)v20) {
    goto LABEL_2;
  }
  int v5 = *(unsigned __int8 **)(a1 + 40);
  if (v5)
  {
    unint64_t v6 = *v5;
    *(_WORD *)(a1 + 68) = v6;
    unsigned int v7 = v6 & 0x1F;
    if (v7 < 0x19)
    {
      BOOL v8 = v7 > 7;
      unsigned int v9 = v7 - 20;
      BOOL v10 = v7 - 20 < 0xFFFFFFF6;
      if (v8 && v10) {
        int v11 = -1;
      }
      else {
        int v11 = v6 & 3;
      }
      if (v8 && v10) {
        LOBYTE(v12) = 1;
      }
      else {
        int v12 = (1 << v11) + 1;
      }
      uint64_t v13 = (v12 + byte_244EAE1D0[v6 >> 5]);
      if (*(void *)(a1 + 48) - (void)v5 >= v13)
      {
        uint64_t v14 = (uint64_t *)(v5 + 1);
        *(void *)(a1 + 40) = &v5[v13];
        *(_DWORD *)(a1 + 56) += v13;
      }
      else
      {
        sub_244CB4590(a1, &v22, v13, (uint64_t)v20);
        int v4 = *(_DWORD *)v20;
        long long v24 = *(_OWORD *)&v20[4];
        int v25 = v21;
        if (*(_DWORD *)v20)
        {
LABEL_2:
          *(_DWORD *)a2 = v4;
          *(_OWORD *)(a2 + 4) = v24;
          *(_DWORD *)(a2 + 20) = v25;
          return;
        }
        uint64_t v14 = &v23;
      }
      *(void *)uint64_t v20 = v14;
      *(void *)(a1 + 16) = sub_244CB56AC((int *)a1, v6 & 0xE0, (uint64_t *)v20);
      uint64_t v16 = 0;
      switch(v11)
      {
        case -1:
          goto LABEL_25;
        case 0:
          uint64_t v16 = **(unsigned char **)v20;
          goto LABEL_25;
        case 1:
          uint64_t v16 = (unsigned __int16)**(_WORD **)v20;
          goto LABEL_25;
        case 2:
          uint64_t v16 = **(_DWORD **)v20;
LABEL_25:
          *(void *)(a1 + 24) = v16;
          goto LABEL_26;
        case 3:
          unint64_t v17 = **(void **)v20;
          *(void *)(a1 + 24) = **(void **)v20;
          if (v9 < 0xFFFFFFF8 || !HIDWORD(v17)) {
            goto LABEL_26;
          }
          *(_DWORD *)a2 = 45;
          *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
          int v15 = 835;
          goto LABEL_16;
        default:
LABEL_26:
          sub_244CB57E8(a1, a2);
          return;
      }
    }
    *(_DWORD *)a2 = 35;
    *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    int v15 = 778;
  }
  else
  {
    *(_DWORD *)a2 = 35;
    *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    int v15 = 770;
  }
LABEL_16:
  *(_DWORD *)(a2 + 16) = v15;
}

__n128 sub_244CB52E4@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 40) != *(void *)(a1 + 48))
  {
LABEL_2:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 987;
    return result;
  }
  if (*(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 60))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      unsigned int v13 = 0;
      (*(void (**)(int *__return_ptr))(*(void *)v6 + 24))(&v10);
      result.n128_u64[0] = v11;
      long long v14 = v11;
      int v15 = v12;
      if (v10)
      {
        *(_DWORD *)a3 = v10;
        result.n128_u64[0] = v14;
        *(_OWORD *)(a3 + 4) = v14;
        *(_DWORD *)(a3 + 20) = v15;
        return result;
      }
      if (v13)
      {
        unsigned int v8 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56);
        if (v8 >= v13) {
          uint64_t v9 = v13;
        }
        else {
          uint64_t v9 = v8;
        }
        *(void *)(a1 + 48) = *(void *)(a1 + 40) + v9;
        goto LABEL_2;
      }
    }
  }
  __n128 result = *a2;
  *(__n128 *)a3 = *a2;
  *(void *)(a3 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_244CB5424@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int16 *)(result + 68);
  int v4 = v3 & 0x1F;
  if (v3 == 0xFFFF) {
    int v4 = -1;
  }
  if (v4 != 24 && (v3 == 0xFFFF ? (BOOL v5 = (v4 & 0xFE) == 10) : (BOOL v5 = 1), v5))
  {
    if (*(void *)(result + 16) == a2)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      int v6 = 624;
    }
    else
    {
      *(_DWORD *)a3 = 43;
      *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      int v6 = 623;
    }
  }
  else
  {
    *(_DWORD *)a3 = 38;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v6 = 622;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_244CB54B4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB4E58(a1, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB5424(a1, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/lib/core/TLVReader.cpp";
      *((_DWORD *)a3 + 4) = 631;
    }
  }
}

uint64_t sub_244CB5530@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(unsigned __int16 *)(result + 68);
  if (v4 == 0xFFFF) {
    int v5 = -1;
  }
  else {
    int v5 = v4 & 0x1F;
  }
  if (v5 == 24)
  {
    int v6 = -1;
  }
  else
  {
    int v6 = v5 & 0xFE;
    if (v6 != 10)
    {
      int v6 = (char)v5;
      if (v4 != 0xFFFF && (char)v5 < 20) {
        int v6 = v5 & 0xFC;
      }
    }
  }
  if (v6 == a2)
  {
    if (*(void *)(result + 16) == a3)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      int v7 = 638;
    }
    else
    {
      *(_DWORD *)a4 = 43;
      *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      int v7 = 637;
    }
  }
  else
  {
    *(_DWORD *)a4 = 38;
    *(void *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    int v7 = 636;
  }
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

void sub_244CB55E4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CB4E58(a1, a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB5530(a1, a2, a3, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/lib/core/TLVReader.cpp";
      *((_DWORD *)a4 + 4) = 645;
    }
  }
}

double sub_244CB5668@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_26519B910;
  *(void *)(a2 + 16) = 702;
  int v3 = *(unsigned __int16 *)(a1 + 68);
  if (v3 != 0xFFFF && (v3 & 0x1Cu) - 12 <= 7) {
    return sub_244CB4590(a1, 0, *(_DWORD *)(a1 + 24), a2);
  }
  return result;
}

unint64_t sub_244CB56AC(int *a1, unsigned int a2, uint64_t *a3)
{
  unint64_t result = 256;
  switch(((a2 >> 5) | (8 * a2)) ^ 4)
  {
    case 0:
      int v5 = *a1;
      if (v5 == -1) {
        return 257;
      }
      uint64_t v6 = *a3 + 2;
      uint64_t v7 = *(unsigned __int16 *)*a3;
      goto LABEL_6;
    case 1:
      int v5 = *a1;
      if (v5 == -1) {
        return 257;
      }
      uint64_t v6 = *a3 + 4;
      uint64_t v7 = *(unsigned int *)*a3;
LABEL_6:
      *a3 = v6;
      return v7 | ((unint64_t)~v5 << 32);
    case 2:
      uint64_t v8 = *a3;
      uint64_t v9 = *(unsigned __int16 *)*a3;
      *a3 += 2;
      uint64_t v10 = *(unsigned __int16 *)(v8 + 2);
      *a3 = v8 + 4;
      uint64_t v11 = *(unsigned __int16 *)(v8 + 4);
      int v12 = (_DWORD *)(v8 + 6);
      goto LABEL_9;
    case 3:
      uint64_t v13 = *a3;
      uint64_t v9 = *(unsigned __int16 *)*a3;
      *a3 += 2;
      uint64_t v10 = *(unsigned __int16 *)(v13 + 2);
      *a3 = v13 + 4;
      uint64_t v11 = *(unsigned int *)(v13 + 4);
      int v12 = (_DWORD *)(v13 + 8);
LABEL_9:
      *a3 = (uint64_t)v12;
      return ((v9 << 48) | (v10 << 32) | v11) ^ 0xFFFFFFFF00000000;
    case 5:
      return *(unsigned __int8 *)(*a3)++;
    case 6:
      uint64_t v14 = *a3 + 2;
      int v15 = *(unsigned __int16 *)*a3;
      goto LABEL_13;
    case 7:
      uint64_t v14 = *a3 + 4;
      int v15 = *(_DWORD *)*a3;
LABEL_13:
      *a3 = v14;
      unint64_t result = *(void *)&v15 | 0xFFFFFFFF00000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_244CB57E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int16 v2 = *(_WORD *)(result + 68);
  if (v2 == -1) {
    int v3 = -1;
  }
  else {
    int v3 = v2 & 0x1F;
  }
  if (v3 != 24)
  {
    unint64_t v6 = *(void *)(result + 16);
    if (v6 == 257)
    {
      int v4 = 854;
      int v5 = 37;
      goto LABEL_28;
    }
    int v7 = *(_DWORD *)(result + 64);
    int v4 = 873;
    int v5 = 3;
    if (v7 <= 20)
    {
      if (v7 != -2)
      {
        if (v7 != -1) {
          goto LABEL_28;
        }
        if (v6 < 0x100)
        {
          int v4 = 859;
          goto LABEL_8;
        }
      }
    }
    else
    {
      switch(v7)
      {
        case 21:
          if (v6 == 256)
          {
            int v4 = 863;
            goto LABEL_8;
          }
          break;
        case 22:
          if (v6 != 256)
          {
            int v4 = 867;
            goto LABEL_8;
          }
          break;
        case 23:
          break;
        default:
          goto LABEL_28;
      }
    }
    if ((v3 - 12) <= 7u
      && (*(_DWORD *)(result + 60) - *(_DWORD *)(result + 56)) < *(_DWORD *)(result + 24))
    {
      int v4 = 889;
      int v5 = 34;
      goto LABEL_28;
    }
LABEL_27:
    int v5 = 0;
    int v4 = 892;
    goto LABEL_28;
  }
  if (*(_DWORD *)(result + 64) == -1)
  {
    int v4 = 847;
    int v5 = 35;
    goto LABEL_28;
  }
  if (*(void *)(result + 16) == 256) {
    goto LABEL_27;
  }
  int v4 = 849;
LABEL_8:
  int v5 = 36;
LABEL_28:
  *(_DWORD *)a2 = v5;
  *(void *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_244CB590C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned __int16 *)(result + 68);
  int v4 = v3 & 0x1F;
  if (v3 == 0xFFFF) {
    int v4 = -1;
  }
  if (v4 > 24)
  {
    int v11 = 1002;
    int v10 = 35;
  }
  else
  {
    int v5 = byte_244EAE1D0[v3 >> 5];
    BOOL v6 = (v4 - 20) >= 0xF6u || (char)v4 <= 7;
    int v7 = 1 << (v4 & 3);
    if (v6) {
      int v8 = v7 + 1;
    }
    else {
      int v8 = 1;
    }
    unsigned int v9 = v8 + v5;
    if (v9 > 0xFF)
    {
      int v11 = 1020;
      int v10 = 172;
    }
    else
    {
      int v10 = 0;
      *a2 = v9;
      int v11 = 1023;
    }
  }
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_244CB59A4(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_OWORD *)a4 = xmmword_26519B928;
  a4[2] = 1038;
  long long v7 = *((_OWORD *)a1 + 2);
  long long v16 = *((_OWORD *)a1 + 1);
  long long v17 = v7;
  uint64_t v18 = *((void *)a1 + 6);
  uint64_t v19 = *((void *)a1 + 7);
  unsigned __int16 v21 = *((_WORD *)a1 + 34);
  int v20 = a1[16];
  char v22 = *((unsigned char *)a1 + 70);
  int v14 = *a1;
  uint64_t v15 = *((void *)a1 + 1);
  while (1)
  {
    sub_244CB4E58((uint64_t)&v14, a4);
    if (*(_DWORD *)a4) {
      break;
    }
    unsigned __int16 v8 = v21;
    int v9 = v21 & 0x1F;
    if (v21 == 0xFFFF) {
      int v9 = -1;
    }
    if (v9 == 24 || ((v10 = v9 & 0xFE, v21 == 0xFFFF) ? (BOOL v11 = v10 == 10) : (BOOL v11 = 1), !v11))
    {
      *(_DWORD *)a4 = 35;
      a4[1] = "src/lib/core/TLVReader.cpp";
      *((_DWORD *)a4 + 4) = 1045;
      return;
    }
    if ((void)v16 == a2)
    {
      uint64_t v12 = *((void *)&v16 + 1);
      uint64_t v13 = v15;
      *(void *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = v12;
      *(void *)(a3 + 48) = v18;
      *(_WORD *)(a3 + 68) = v8;
      *(_DWORD *)(a3 + 64) = v20;
      *(unsigned char *)(a3 + 70) = v22;
      *(_DWORD *)a3 = v14;
      *(_OWORD *)(a3 + 32) = v17;
      *(void *)(a3 + 56) = v19;
      *(void *)(a3 + 8) = v13;
      return;
    }
  }
}

double sub_244CB5AEC@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 64) == -1)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v9 = 1064;
    goto LABEL_8;
  }
  uint64_t v5 = 0;
  long long v6 = *(_OWORD *)(a1 + 48);
  _DWORD v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  uint64_t v14 = *(void *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v7;
  while (1)
  {
    sub_244CB4E58((uint64_t)v13, &v10);
    double result = *(double *)&v11;
    long long v15 = v11;
    int v16 = v12;
    if (v10) {
      break;
    }
    ++v5;
  }
  if (v10 == 33)
  {
    *a2 = v5;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    int v9 = 1077;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v9;
    return result;
  }
  *(_DWORD *)a3 = v10;
  double result = *(double *)&v15;
  *(_OWORD *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 20) = v16;
  return result;
}

void sub_244CB5C08(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  if ((*(_WORD *)(a1 + 68) & 0x1C) == 0x10)
  {
    sub_244CB40C8(a1, a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/lib/core/TLVReader.cpp";
    *((_DWORD *)a3 + 4) = 1102;
  }
}

void sub_244CB5C3C(uint64_t a1@<X0>, void (*a2)(uint64_t, unint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_244CB5C44(uint64_t a1@<X0>, void (*a2)(uint64_t, unint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    sub_244CB3988((uint64_t)v10);
    sub_244CB3B04((uint64_t)v10, a1);
    sub_244CB5CE0((uint64_t)v10, 0, a2, a3, a4, a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/lib/core/TLVUtilities.cpp";
    *(_DWORD *)(a5 + 16) = 166;
  }
}

void sub_244CB5CE0(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 < 0xA)
  {
    if (sub_244CB3B68(a1) != -1
      || (*(void *)a6 = 0,
          *(void *)(a6 + 8) = 0,
          *(void *)(a6 + 16) = 0,
          sub_244CB4E58(a1, (void *)a6),
          !*(_DWORD *)a6))
    {
      while (1)
      {
        int v12 = sub_244CB3B68(a1);
        *(void *)(a6 + 8) = 0;
        *(void *)(a6 + 16) = 0;
        *(void *)a6 = 0;
        a3(a1, a2, a4);
        if (*(_DWORD *)a6) {
          break;
        }
        if (a5 && (v12 - 21) <= 2)
        {
          int v17 = 0;
          *(void *)(a6 + 8) = 0;
          *(void *)(a6 + 16) = 0;
          *(void *)a6 = 0;
          sub_244CB4C90(a1, &v17, a6);
          if (*(_DWORD *)a6) {
            return;
          }
          sub_244CB5CE0(&v14, a1, a2 + 1, a3, a4, 1);
          int v13 = v14;
          long long v18 = v15;
          int v19 = v16;
          if (v14 && v14 != 33)
          {
LABEL_12:
            *(_DWORD *)a6 = v13;
            *(_OWORD *)(a6 + 4) = v18;
            *(_DWORD *)(a6 + 20) = v19;
            return;
          }
          *(void *)a6 = 0;
          *(void *)(a6 + 8) = 0;
          *(void *)(a6 + 16) = 0;
          sub_244CB4D00(a1, v17, a6);
          if (*(_DWORD *)a6) {
            return;
          }
        }
        sub_244CB4E58(a1, &v14);
        int v13 = v14;
        long long v18 = v15;
        int v19 = v16;
        if (v14) {
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)a6 = 5;
    *(void *)(a6 + 8) = "src/lib/core/TLVUtilities.cpp";
    *(_DWORD *)(a6 + 16) = 80;
  }
}

void sub_244CB5EC0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a2 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB5C44(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CB5F98, (uint64_t)a2, 1, (uint64_t)a3);
  if (*(_DWORD *)a3 == 33)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVUtilities.cpp";
    *((_DWORD *)a3 + 4) = 242;
  }
}

void sub_244CB5F2C(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a2 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CB5C44(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CB5F98, (uint64_t)a2, a3, (uint64_t)a4);
  if (*(_DWORD *)a4 == 33)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/lib/core/TLVUtilities.cpp";
    *((_DWORD *)a4 + 4) = 242;
  }
}

void sub_244CB5F98(void *a1@<X2>, uint64_t a2@<X8>)
{
  if (a1)
  {
    int v2 = 0;
    ++*a1;
    int v3 = 195;
  }
  else
  {
    int v3 = 191;
    int v2 = 47;
  }
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

void sub_244CB5FD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v7[0] = a2;
  v7[1] = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CB5C44(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CB60D0, (uint64_t)v7, 1, (uint64_t)a4);
  if (*(_DWORD *)a4 == 10) {
    int v5 = 0;
  }
  else {
    int v5 = 118;
  }
  if (*(_DWORD *)a4 == 10) {
    int v6 = 323;
  }
  else {
    int v6 = 325;
  }
  *(_DWORD *)a4 = v5;
  a4[1] = "src/lib/core/TLVUtilities.cpp";
  *((_DWORD *)a4 + 4) = v6;
}

void sub_244CB6054(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  v8[0] = a2;
  v8[1] = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244CB5C44(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CB60D0, (uint64_t)v8, a4, (uint64_t)a5);
  if (*(_DWORD *)a5 == 10) {
    int v6 = 0;
  }
  else {
    int v6 = 118;
  }
  if (*(_DWORD *)a5 == 10) {
    int v7 = 323;
  }
  else {
    int v7 = 325;
  }
  *(_DWORD *)a5 = v6;
  a5[1] = "src/lib/core/TLVUtilities.cpp";
  *((_DWORD *)a5 + 4) = v7;
}

uint64_t sub_244CB60D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (**(void **)a2 == *(void *)(result + 16))
    {
      double result = sub_244CB3B04(*(void *)(a2 + 8), result);
      int v4 = 271;
      int v5 = 10;
    }
    else
    {
      int v5 = 0;
      int v4 = 274;
    }
  }
  else
  {
    int v4 = 264;
    int v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void *sub_244CB6148(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_244CB6154(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v8[0] = a4;
  v8[1] = a2;
  void v8[2] = a3;
  sub_244CB5C44(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CB624C, (uint64_t)v8, 1, a5);
  if (*(_DWORD *)a5 == 10) {
    int v6 = 0;
  }
  else {
    int v6 = 118;
  }
  if (*(_DWORD *)a5 == 10) {
    int v7 = 426;
  }
  else {
    int v7 = 428;
  }
  *(_DWORD *)a5 = v6;
  *(void *)(a5 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a5 + 16) = v7;
}

void sub_244CB61D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  v9[0] = a4;
  v9[1] = a2;
  v9[2] = a3;
  sub_244CB5C44(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_244CB624C, (uint64_t)v9, a5, a6);
  if (*(_DWORD *)a6 == 10) {
    int v7 = 0;
  }
  else {
    int v7 = 118;
  }
  if (*(_DWORD *)a6 == 10) {
    int v8 = 426;
  }
  else {
    int v8 = 428;
  }
  *(_DWORD *)a6 = v7;
  *(void *)(a6 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a6 + 16) = v8;
}

uint64_t sub_244CB624C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 8))(a1, a2, *(void *)(a3 + 16));
  if (*a4 == 10)
  {
    uint64_t v8 = *(void *)a3;
    return sub_244CB3B04(v8, a1);
  }
  return result;
}

double sub_244CB62B8(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0x1000000FFFFFFFFLL;
  return result;
}

double sub_244CB62E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a2;
  if (a3 >= 0xFFFFFFFF) {
    int v3 = -1;
  }
  else {
    int v3 = a3;
  }
  *(_DWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = v3;
  double result = NAN;
  *(void *)(a1 + 52) = 0xFFFFFFFF00000000;
  *(_DWORD *)a1 = -1;
  *(_DWORD *)(a1 + 60) = 16798385;
  return result;
}

void *sub_244CB6318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  double v7 = sub_244CB62E0(a1, 0, a3);
  *(_WORD *)(a1 + 60) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  uint64_t v8 = (void *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = 0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  double result = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 32))(&v11, a2, a1, a1 + 24, a1 + 40, v7);
  if (v11)
  {
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
  }
  else
  {
    if (*v8)
    {
      *(void *)(a1 + 32) = *v8;
      *(_WORD *)(a1 + 60) = 21169;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
      int v10 = 108;
    }
    else
    {
      *(_DWORD *)a4 = 172;
      *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
      int v10 = 105;
    }
    *(_DWORD *)(a4 + 16) = v10;
  }
  return result;
}

double sub_244CB6414@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_WORD *)(a1 + 60) != 21169)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/lib/core/TLVWriter.cpp";
    int v4 = 115;
    goto LABEL_5;
  }
  double result = 0.0;
  long long v6 = xmmword_26519B940;
  uint64_t v7 = 117;
  if (*(unsigned char *)(a1 + 62))
  {
    *(_DWORD *)a2 = 39;
    *(void *)(a2 + 8) = "src/lib/core/TLVWriter.cpp";
    int v4 = 119;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    (*(void (**)(long long *__return_ptr))(*(void *)v5 + 48))(&v6);
  }
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

uint64_t sub_244CB64F8@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_WORD *)(result + 60) != 21169)
  {
    int v7 = 135;
    goto LABEL_5;
  }
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 40);
  if (v6 >= a2)
  {
    double result = *(void *)(result + 16);
    if (!result)
    {
LABEL_9:
      int v8 = 0;
      *(_DWORD *)(v5 + 52) += a2;
      *(_DWORD *)(v5 + 40) = v6 - a2;
      int v7 = 144;
      goto LABEL_10;
    }
    double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    if (result)
    {
      unsigned int v6 = *(_DWORD *)(v5 + 40);
      goto LABEL_9;
    }
    int v7 = 140;
LABEL_5:
    int v8 = 3;
    goto LABEL_10;
  }
  int v7 = 136;
  int v8 = 11;
LABEL_10:
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244CB65C8()
{
}

void sub_244CB68B8()
{
}

void sub_244CB68CC()
{
}

void sub_244CB6904()
{
}

void sub_244CB6920()
{
}

void sub_244CB694C()
{
}

void sub_244CB6974()
{
}

void sub_244CB69AC()
{
}

void sub_244CB69F4()
{
}

void sub_244CB69FC()
{
}

void sub_244CB6A2C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    JUMPOUT(0x244CB65E4);
  }
  sub_244CB69FC();
}

void sub_244CB6A50(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    JUMPOUT(0x244CB65E4);
  }
  sub_244CB69FC();
}

void sub_244CB6A74(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    JUMPOUT(0x244CB65E4);
  }
  sub_244CB69FC();
}

void sub_244CB6A98(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    JUMPOUT(0x244CB65E4);
  }
  sub_244CB69FC();
}

void sub_244CB6ABC()
{
}

void sub_244CB6ACC()
{
}

char *sub_244CB6ADC@<X0>(char *result@<X0>, char *a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (!HIDWORD(a3)) {
    return sub_244CB6B2C(result, 16, a2, a3, a4);
  }
  *(_DWORD *)a4 = 4;
  *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a4 + 16) = 282;
  return result;
}

char *sub_244CB6B18@<X0>(char *a1@<X0>, char *a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  return sub_244CB6B2C(a1, 16, a2, a3, a4);
}

char *sub_244CB6B2C@<X0>(char *result@<X0>, char a2@<W1>, char *a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X8>)
{
  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v6 = 770;
    goto LABEL_5;
  }
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v6 = 774;
LABEL_5:
    *(_DWORD *)(a5 + 16) = v6;
    return result;
  }
  int v9 = result;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  double result = (char *)((char *(*)(long long *__return_ptr))loc_244CB65E4)(&v10);
  if (!v10) {
    return sub_244CB6F3C(a3, v9, a4, (void *)a5);
  }
  *(_OWORD *)a5 = v10;
  *(void *)(a5 + 16) = v11;
  return result;
}

size_t sub_244CB6C20@<X0>(char *__s@<X2>, char *a2@<X0>, uint64_t a3@<X8>)
{
  size_t result = strlen(__s);
  if (HIDWORD(result))
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a3 + 16) = 296;
  }
  else
  {
    return sub_244CB6CB4(a2, __s, result, a3);
  }
  return result;
}

uint64_t sub_244CB6CB4@<X0>(char *a1@<X0>, char *a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  sub_24479476C(v10, (uint64_t)a2, a3);
  uint64_t result = sub_244CC8058(v10[0], v10[1]);
  if (result)
  {
    if (!a3 || a2[a3 - 1]) {
      return (uint64_t)sub_244CB6B2C(a1, 12, a2, a3, a4);
    }
    *(_DWORD *)a4 = 21;
    *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    int v9 = 319;
  }
  else
  {
    *(_DWORD *)a4 = 18;
    *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    int v9 = 314;
  }
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

char *sub_244CB6D80@<X0>(char *a1@<X0>, char *a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (!HIDWORD(a3)) {
    return (char *)sub_244CB6CB4(a1, a2, a3, a4);
  }
  *(_DWORD *)a4 = 47;
  *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a4 + 16) = 330;
  return a1;
}

void sub_244CB6DAC(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>, char a5)
{
}

void sub_244CB6DD8(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, va_list a4@<X3>, uint64_t a5@<X8>)
{
  va_list v22 = a4;
  va_list v23 = a4;
  int v10 = vsnprintf(0, 0, a3, a4);
  if (v10 < 0)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a5 + 16) = 379;
    return;
  }
  uint64_t v11 = v10;
  if (v10 < 0x10000) {
    unsigned int v12 = 13;
  }
  else {
    unsigned int v12 = 14;
  }
  if (v10 >= 0x100) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 12;
  }
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, void))loc_244CB65E4)(&v19, a1, v13, a2, v10);
  uint64_t v14 = v19;
  if (!v19)
  {
    if ((unint64_t)*(unsigned int *)(a1 + 44) + v11 <= *(unsigned int *)(a1 + 48))
    {
      int v16 = (char *)sub_244CC4D84(v11 + 1);
      if (v16)
      {
        int v17 = v16;
        va_list v22 = v23;
        vsnprintf(v16, v11 + 1, a3, v23);
        sub_244CB6F3C(v17, (char *)a1, v11, &v19);
        uint64_t v18 = v19;
        long long v15 = v20;
        uint64_t v5 = v21;
        j__free(v17);
        uint64_t v14 = v18;
        goto LABEL_17;
      }
      LODWORD(v5) = 407;
      uint64_t v14 = 0xB0000000BLL;
    }
    else
    {
      LODWORD(v5) = 394;
      uint64_t v14 = 0x1900000019;
    }
    long long v15 = "src/lib/core/TLVWriter.cpp";
    goto LABEL_17;
  }
  long long v15 = v20;
  uint64_t v5 = v21;
LABEL_17:
  *(void *)a5 = v14;
  *(void *)(a5 + 8) = v15;
  *(void *)(a5 + 16) = v5;
}

char *sub_244CB6F3C@<X0>(char *__src@<X1>, char *result@<X0>, unsigned int a3@<W2>, void *a4@<X8>)
{
  if (*((_WORD *)result + 30) != 21169)
  {
    int v7 = 798;
LABEL_5:
    int v8 = 3;
    goto LABEL_26;
  }
  unsigned int v5 = a3;
  int v6 = result;
  if (*((_DWORD *)result + 11) + a3 > *((_DWORD *)result + 12))
  {
    int v7 = 799;
    int v8 = 25;
    goto LABEL_26;
  }
  if (!a3)
  {
LABEL_21:
    int v8 = 0;
    int v7 = 831;
    goto LABEL_26;
  }
  uint64_t v11 = (unsigned int *)(result + 40);
  unsigned int v10 = *((_DWORD *)result + 10);
  while (v10)
  {
    unsigned int v12 = (void *)*((void *)v6 + 4);
LABEL_17:
    if (v5 >= v10) {
      size_t v14 = v10;
    }
    else {
      size_t v14 = v5;
    }
    uint64_t result = (char *)memmove(v12, __src, v14);
    *((void *)v6 + 4) += v14;
    unsigned int v10 = *((_DWORD *)v6 + 10) - v14;
    int v15 = *((_DWORD *)v6 + 11) + v14;
    *((_DWORD *)v6 + 10) = v10;
    *((_DWORD *)v6 + 11) = v15;
    __src += v14;
    v5 -= v14;
    if (!v5) {
      goto LABEL_21;
    }
  }
  uint64_t result = (char *)*((void *)v6 + 2);
  if (!result)
  {
    int v7 = 805;
    goto LABEL_25;
  }
  if ((*((void *)v6 + 4) - *((void *)v6 + 3)) >> 32)
  {
    int v7 = 807;
    goto LABEL_5;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = (char *)(*(uint64_t (**)(char *, char *))(*(void *)result + 48))(result, v6);
  if (*(_DWORD *)a4) {
    return result;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = (char *)(*(uint64_t (**)(void, char *, void *, void *))(**((void **)v6 + 2) + 40))(*((void *)v6 + 2), v6, (void *)v6 + 3, (void *)v6 + 5);
  if (*(_DWORD *)a4) {
    return result;
  }
  unsigned int v10 = *v11;
  if (*v11)
  {
    unsigned int v12 = (void *)*((void *)v6 + 3);
    *((void *)v6 + 4) = v12;
    unsigned int v13 = *((_DWORD *)v6 + 12) - *((_DWORD *)v6 + 11);
    if (v10 > v13)
    {
      unsigned int *v11 = v13;
      unsigned int v10 = v13;
    }
    goto LABEL_17;
  }
  int v7 = 811;
LABEL_25:
  int v8 = 11;
LABEL_26:
  *(_DWORD *)a4 = v8;
  a4[1] = "src/lib/core/TLVWriter.cpp";
  *((_DWORD *)a4 + 4) = v7;
  return result;
}

void sub_244CB710C()
{
}

void sub_244CB711C(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244CB7128(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_244CB3BC0(a3);
  uint64_t v9 = *(void *)(a3 + 24);
  sub_244CB3988((uint64_t)v16);
  int v10 = 446;
  int v11 = 3;
  if (v8 == 24 || v8 == 255)
  {
LABEL_3:
    *(_DWORD *)a4 = v11;
    *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a4 + 16) = v10;
    return;
  }
  sub_244CB3B04((uint64_t)v16, a3);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CB4F70(a3, a4);
  if (!*(_DWORD *)a4)
  {
    int v12 = *(_DWORD *)(a3 + 56);
    int v13 = v16[14];
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))loc_244CB65E4)(a1, v8, a2, v9);
    if (!*(_DWORD *)a4)
    {
      unsigned int v14 = v12 - v13;
      while (v14)
      {
        if (v14 >= 0x10) {
          unsigned int v15 = 16;
        }
        else {
          unsigned int v15 = v14;
        }
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB4590((uint64_t)v16, __src, v15, a4);
        if (!*(_DWORD *)a4)
        {
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244CB6F3C(__src, a1, v15, (void *)a4);
          v14 -= v15;
          if (!*(_DWORD *)a4) {
            continue;
          }
        }
        return;
      }
      int v11 = 0;
      int v10 = 471;
      goto LABEL_3;
    }
  }
}

void *sub_244CB72B4@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v11 = 478;
LABEL_14:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if ((a3 - 21) >= 3)
  {
    *(_DWORD *)a5 = 38;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v11 = 481;
    goto LABEL_14;
  }
  uint64_t v8 = result;
  if (*((unsigned char *)result + 63))
  {
    int v9 = *((_DWORD *)result + 12);
    if (!v9)
    {
      *(_DWORD *)a5 = 25;
      *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
      int v11 = 485;
      goto LABEL_14;
    }
    *((_DWORD *)result + 12) = v9 - 1;
  }
  uint64_t result = ((void *(*)(int *__return_ptr, void *, void, uint64_t, void))loc_244CB65E4)(&v12, result, (char)a3, a2, 0);
  int v10 = v12;
  long long v15 = v13;
  int v16 = v14;
  if (!v12)
  {
    *(void *)(a4 + 16) = v8[2];
    *(void *)(a4 + 24) = v8[3];
    *(void *)(a4 + 32) = v8[4];
    *(_DWORD *)(a4 + 40) = *((_DWORD *)v8 + 10);
    *(_DWORD *)(a4 + 44) = 0;
    *(_DWORD *)(a4 + 48) = *((_DWORD *)v8 + 12) - *((_DWORD *)v8 + 11);
    *(_DWORD *)(a4 + 56) = a3;
    *(unsigned char *)(a4 + 62) = 0;
    *(unsigned char *)(a4 + 63) = *((unsigned char *)v8 + 63);
    *(_DWORD *)a4 = *(_DWORD *)v8;
    *(_WORD *)(a4 + 60) = 21169;
    *((unsigned char *)v8 + 62) = 1;
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v11 = 514;
    goto LABEL_14;
  }
  if (*((unsigned char *)v8 + 63)) {
    ++*((_DWORD *)v8 + 12);
  }
  *(_DWORD *)a5 = v10;
  *(_OWORD *)(a5 + 4) = v15;
  *(_DWORD *)(a5 + 20) = v16;
  return result;
}

uint64_t sub_244CB746C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_WORD *)(result + 60) == 21169)
  {
    if ((*(_DWORD *)(a2 + 56) - 21) >= 3)
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
      int v4 = 524;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 62))
      {
        *(void *)(result + 16) = *(void *)(a2 + 16);
        *(void *)(result + 24) = *(void *)(a2 + 24);
        *(void *)(result + 32) = *(void *)(a2 + 32);
        *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
        *(_DWORD *)(result + 44) += *(_DWORD *)(a2 + 44);
        if (*(unsigned char *)(result + 63)) {
          ++*(_DWORD *)(result + 48);
        }
        *(unsigned char *)(result + 62) = 0;
        sub_244CB62E0(a2, 0, 0);
        JUMPOUT(0x244CB65E4);
      }
      *(_DWORD *)a3 = 39;
      *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
      int v4 = 527;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    int v4 = 521;
  }
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void *sub_244CB7594@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v11 = 550;
LABEL_14:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if ((a3 - 21) >= 3)
  {
    *(_DWORD *)a5 = 38;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v11 = 553;
    goto LABEL_14;
  }
  uint64_t v8 = result;
  if (*((unsigned char *)result + 63))
  {
    int v9 = *((_DWORD *)result + 12);
    if (!v9)
    {
      *(_DWORD *)a5 = 25;
      *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
      int v11 = 557;
      goto LABEL_14;
    }
    *((_DWORD *)result + 12) = v9 - 1;
  }
  uint64_t result = ((void *(*)(int *__return_ptr, void *, void, uint64_t, void))loc_244CB65E4)(&v12, result, (char)a3, a2, 0);
  int v10 = v12;
  long long v15 = v13;
  int v16 = v14;
  if (!v12)
  {
    *a4 = *((_DWORD *)v8 + 14);
    *((_DWORD *)v8 + 14) = a3;
    *((unsigned char *)v8 + 62) = 0;
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    int v11 = 575;
    goto LABEL_14;
  }
  if (*((unsigned char *)v8 + 63)) {
    ++*((_DWORD *)v8 + 12);
  }
  *(_DWORD *)a5 = v10;
  *(_OWORD *)(a5 + 4) = v15;
  *(_DWORD *)(a5 + 20) = v16;
  return result;
}

uint64_t sub_244CB7708@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_WORD *)(result + 60) == 21169)
  {
    if ((*(_DWORD *)(result + 56) - 21) < 3)
    {
      *(_DWORD *)(result + 56) = a2;
      if (*(unsigned char *)(result + 63)) {
        ++*(_DWORD *)(result + 48);
      }
      JUMPOUT(0x244CB65E4);
    }
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    int v3 = 585;
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    int v3 = 582;
  }
  *(_DWORD *)(a3 + 16) = v3;
  return result;
}

char *sub_244CB778C@<X0>(char *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, char *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  if ((a3 - 21) >= 3)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a6 + 16) = 598;
  }
  else
  {
    int v9 = result;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    uint64_t result = (char *)((char *(*)(long long *__return_ptr, char *, void, uint64_t, void))loc_244CB65E4)(&v10, result, (char)a3, a2, 0);
    if (v10)
    {
      *(_OWORD *)a6 = v10;
      *(void *)(a6 + 16) = v11;
    }
    else
    {
      return sub_244CB6F3C(a4, v9, a5, (void *)a6);
    }
  }
  return result;
}

void sub_244CB7844(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244CB7850(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(_WORD *)(a1 + 60) != 21169)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    int v6 = 616;
    goto LABEL_5;
  }
  if (*(void *)(a3 + 32))
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    int v6 = 620;
LABEL_5:
    *(_DWORD *)(a4 + 16) = v6;
    return;
  }
  int v15 = 0;
  int v9 = sub_244CB3B68(a3);
  sub_244CB4C90(a3, &v15, (uint64_t)&v12);
  int v10 = v12;
  long long v16 = v13;
  int v17 = v14;
  if (v12 || (v11 = *(char **)(a3 + 40), sub_244CB4D00(a3, v15, (uint64_t)&v12), v10 = v12, v16 = v13, int v17 = v14, v12))
  {
    *(_DWORD *)a4 = v10;
    *(_OWORD *)(a4 + 4) = v16;
    *(_DWORD *)(a4 + 20) = v17;
  }
  else
  {
    sub_244CB778C((char *)a1, a2, v9, v11, *(_DWORD *)(a3 + 40) - v11, a4);
  }
}

void sub_244CB79B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  if (*(_WORD *)(a1 + 60) != 21169)
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/lib/core/TLVWriter.cpp";
    int v11 = 644;
    goto LABEL_6;
  }
  sub_244CB3988((uint64_t)v12);
  sub_244CB39B8((uint64_t)v12, a3, a4);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_244CB4E58((uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v10 = sub_244CB3B68((uint64_t)v12);
    sub_244CB778C((char *)a1, a2, v10, v13, v15 - v14, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *(_DWORD *)a5 = 0;
      a5[1] = "src/lib/core/TLVWriter.cpp";
      int v11 = 654;
LABEL_6:
      *((_DWORD *)a5 + 4) = v11;
    }
  }
}

void *sub_244CB7AA8()
{
  return sub_244CB7CA0(&off_26BA163B0);
}

BOOL sub_244CB7AB4(char *a1, size_t a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)a3 & 0xFF000700;
  if (!v3)
  {
    unsigned int v4 = *(_DWORD *)a3 - 1;
    if (v4 > 0xE0) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = off_26519B958[v4];
    }
    long long v7 = *a3;
    uint64_t v8 = *((void *)a3 + 2);
    sub_244CB7C34(a1, a2, "CHIP", &v7, v5);
  }
  return v3 == 0;
}

char *sub_244CB7B34(const char **a1, int a2)
{
  unsigned __int16 v3 = 256;
  unsigned int v4 = byte_268EBEA10;
  if (a2 && a1[1])
  {
    int v5 = snprintf(byte_268EBEA10, 0x100uLL, "%s:%u: ", a1[1], *((_DWORD *)a1 + 4));
    if (v5 >= 256) {
      int v6 = 256;
    }
    else {
      int v6 = v5;
    }
    unsigned int v4 = &byte_268EBEA10[v6];
    unsigned __int16 v3 = 256 - v6;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v7 = qword_268EBEB10;
    if (qword_268EBEB10)
    {
      while (1)
      {
        uint64_t v8 = *(uint64_t (**)(char *, void, long long *))v7;
        long long v10 = *(_OWORD *)a1;
        int v11 = a1[2];
        if (v8(v4, v3, &v10)) {
          break;
        }
        uint64_t v7 = *(void *)(v7 + 8);
        if (!v7) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      snprintf(v4, v3, "%s%sError 0x%08X%s%s");
    }
  }
  else
  {
    snprintf(v4, v3, "Success");
  }
  return byte_268EBEA10;
}

uint64_t sub_244CB7C34(char *a1, size_t __size, const char *a3, _DWORD *a4, const char *a5)
{
  int v5 = "";
  if (a3) {
    int v6 = a3;
  }
  else {
    int v6 = "";
  }
  uint64_t v7 = " ";
  if (!a3) {
    uint64_t v7 = "";
  }
  if (a5) {
    uint64_t v8 = a5;
  }
  else {
    uint64_t v8 = "";
  }
  if (a5) {
    int v5 = ": ";
  }
  return snprintf(a1, __size, "%s%sError 0x%08X%s%s", v6, v7, *a4, v5, v8);
}

void *sub_244CB7CA0(void *result)
{
  if (qword_268EBEB10)
  {
    int v1 = (void *)qword_268EBEB10;
    while (*v1 != *result)
    {
      int v1 = (void *)v1[1];
      if (!v1) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    result[1] = qword_268EBEB10;
    qword_268EBEB10 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_244CB7CD4(uint64_t result)
{
  uint64_t v1 = qword_268EBEB10;
  if (qword_268EBEB10)
  {
    int v2 = &qword_268EBEB10;
    do
    {
      if (v1 == result)
      {
        uint64_t v1 = *(void *)(result + 8);
        uint64_t *v2 = v1;
      }
      int v2 = (uint64_t *)(v1 + 8);
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

void sub_244CB7D0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_26519C060;
  *(void *)(a2 + 16) = 97;
  int v12 = 0;
  if (*(_DWORD *)a1)
  {
    int v4 = 105;
    int v5 = 3;
LABEL_3:
    *(_DWORD *)a2 = v5;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = v4;
LABEL_4:
    (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                                 + 48)
                                                                                   + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBAF24, a1);
    *(unsigned char *)(a1 + 149) &= ~1u;
    long long v7 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
    sub_244CB81DC((void *)a1, 2, (uint64_t)&v7);
    goto LABEL_5;
  }
  *(_DWORD *)a1 = 1;
  sub_244CC8F5C(0x609uLL, 0x26u, &v10);
  int v12 = (_WORD *)v10;
  if (!(void)v10)
  {
    int v4 = 110;
    int v5 = 11;
    goto LABEL_3;
  }
  uint64_t v13 = 0x6000000000000;
  WORD2(v13) = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 56));
  sub_244CBB440((uint64_t)&v13, 0, 4);
  sub_244CBB474((uint64_t)&v13, (uint64_t *)&v12, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_4;
  }
  sub_244CB7F0C(a1, (uint64_t)&v10);
  *(_OWORD *)a2 = v10;
  *(void *)(a2 + 16) = v11;
  if (*(_DWORD *)a2) {
    goto LABEL_4;
  }
  sub_244CC8F2C((uint64_t)v12);
  int v9 = v12;
  sub_244CB7FC4(a1, &v9, &v10);
  *(_OWORD *)a2 = v10;
  *(void *)(a2 + 16) = v11;
  if (v9) {
    sub_244CC8A0C(v9);
  }
  if (*(_DWORD *)a2) {
    goto LABEL_4;
  }
  int v6 = *(void **)(a1 + 64);
  if (!v6)
  {
    *(void *)(a1 + 64) = v12;
    return;
  }
  sub_244CC8B70(v6, (uint64_t *)&v12);
LABEL_5:
  if (v12) {
    sub_244CC8A0C(v12);
  }
}

void *sub_244CB7F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t result = (*(void *(**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 32) + 48) + 40))(&v5);
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  if (!*(_DWORD *)a2)
  {
    *(unsigned char *)(a1 + 149) |= 1u;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1327;
  }
  return result;
}

void sub_244CB7FC4(uint64_t a1@<X0>, _WORD **a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 148) |= 0x20u;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v8 = *a2;
  *a2 = 0;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *, void *, _WORD **))(*(void *)v4 + 56))(a3, v4, v5, &unk_244EAE1D8, &unk_244EAE1F8, &v8);
  if (v8) {
    sub_244CC8A0C(v8);
  }
  uint64_t v8 = 0;
  if (*(_DWORD *)a3)
  {
    uint64_t v6 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v10 = a3[2];
      long long v7 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Send write request failed: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v10 = a3[2];
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(2u, 1);
    }
  }
}

void *sub_244CB8150(void *result, uint64_t *a2)
{
  if (result[8]) {
    return sub_244CC8B70((void *)result[8], a2);
  }
  result[8] = *a2;
  *a2 = 0;
  return result;
}

uint64_t sub_244CB8170(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                                             + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBAF24, a1);
  *(unsigned char *)(a1 + 149) &= ~1u;
  return result;
}

void *sub_244CB81DC(void *result, char a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)result;
  int v6 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 0xFFFFFFFE) != 4 || (a2 & 2) != 0 && v6 == 4)
  {
    int v7 = *((_DWORD *)result + 36);
    uint64_t v8 = *(void *)(result[4] + 48);
    if (v7) {
      int v9 = sub_244CBB030;
    }
    else {
      int v9 = (void (*)(uint64_t, uint64_t))sub_244CBAF24;
    }
    if (v7) {
      char v10 = -3;
    }
    else {
      char v10 = -2;
    }
    (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v8 + 72))(v8, v9, v5);
    *(unsigned char *)(v5 + 149) &= v10;
    if (!*(_DWORD *)(v5 + 112) || (a2 & 2) != 0)
    {
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = *(void *)(a3 + 16);
      return sub_244CB8F08(v5, v6, a2, (uint64_t)&v15);
    }
    else
    {
      *(_DWORD *)uint64_t v5 = 4;
      if (a2)
      {
        uint64_t result = *(void **)(v5 + 40);
        if (result)
        {
          long long v11 = *(_OWORD *)a3;
          uint64_t v12 = *(void *)(a3 + 16);
          return (void *)(*(uint64_t (**)(void *, uint64_t, long long *))(*result + 48))(result, v5, &v11);
        }
      }
      else
      {
        long long v13 = *(_OWORD *)a3;
        uint64_t v14 = *(void *)(a3 + 16);
        return (void *)sub_244CB921C((void *)v5, v6, 0, &v13);
      }
    }
  }
  return result;
}

uint64_t sub_244CB8350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_26519C078;
  *(void *)(a2 + 16) = 156;
  *(_DWORD *)a1 = 3;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBAF24, a1);
  *(unsigned char *)(a1 + 149) &= ~1u;
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v5 = 0;
    int v6 = "src/ble/BLEEndPoint.cpp";
    int v7 = 167;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)result + 32))(result, a1, &v5);
  }
  else
  {
    *(_DWORD *)a2 = 1050;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 172;
  }
  return result;
}

uint64_t sub_244CB8454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_26519C090;
  *(void *)(a2 + 16) = 180;
  *(_DWORD *)a1 = 3;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB030, a1);
  *(unsigned char *)(a1 + 149) &= ~2u;
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 56);
    return v5();
  }
  else
  {
    *(_DWORD *)a2 = 1027;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 196;
  }
  return result;
}

uint64_t sub_244CB854C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                                             + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB030, a1);
  *(unsigned char *)(a1 + 149) &= ~2u;
  return result;
}

void *sub_244CB85B8(uint64_t a1)
{
  uint64_t v2 = 0x300000003;
  if ((*(_DWORD *)a1 - 1) > 1)
  {
    uint64_t v6 = 0xCE000000CELL;
LABEL_15:
    int v5 = "src/ble/BLEEndPoint.cpp";
LABEL_16:
    v11[0] = v2;
    v11[1] = v5;
    void v11[2] = v6;
    return sub_244CB81DC((void *)a1, 3, (uint64_t)v11);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3)
  {
    uint64_t v6 = 0xCF000000CFLL;
    goto LABEL_15;
  }
  sub_244CC8F2C(v3);
  uint64_t v12 = *(_WORD **)(a1 + 64);
  sub_244CB8758(a1, &v12, buf);
  int v4 = *(_DWORD *)buf;
  int v5 = v14;
  uint64_t v6 = v15;
  uint64_t v10 = *(void *)buf;
  if (v12)
  {
    sub_244CC8A0C(v12);
    int v4 = v10;
  }
  if (v4)
  {
    int v7 = *(_WORD **)(a1 + 64);
    if (v7) {
      sub_244CC8A0C(v7);
    }
    *(void *)(a1 + 64) = 0;
    uint64_t v8 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "cap resp ind failed", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    uint64_t v2 = v10;
    goto LABEL_16;
  }
  --*(unsigned char *)(a1 + 151);
  uint64_t result = sub_244CB88E4((void *)a1, (uint64_t)buf);
  uint64_t v2 = *(void *)buf;
  if (*(_DWORD *)buf
    || *(_DWORD *)a1 != 2 && (result = (void *)sub_244CB8454(a1, (uint64_t)buf), uint64_t v2 = *(void *)buf, *(_DWORD *)buf))
  {
    int v5 = v14;
    uint64_t v6 = v15;
    goto LABEL_16;
  }
  return result;
}

void sub_244CB8758(uint64_t a1@<X0>, _WORD **a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 148) |= 0x20u;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v8 = *a2;
  *a2 = 0;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *, void *, _WORD **))(*(void *)v4 + 48))(a3, v4, v5, &unk_244EAE1D8, &unk_244EAE1E8, &v8);
  if (v8) {
    sub_244CC8A0C(v8);
  }
  uint64_t v8 = 0;
  if (*(_DWORD *)a3)
  {
    uint64_t v6 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v10 = a3[2];
      int v7 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Send indication failed: %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      uint64_t v10 = a3[2];
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(2u, 1);
    }
  }
}

void *sub_244CB88E4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)result + 149) & 4) == 0)
  {
    uint64_t v3 = result;
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    uint64_t result = (*(void *(**)(long long *__return_ptr))(**(void **)(result[4] + 48) + 40))(&v4);
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = v5;
    if (*(_DWORD *)a2) {
      return result;
    }
    *((unsigned char *)v3 + 149) |= 4u;
  }
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 1351;
  return result;
}

void sub_244CB89A4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "subscribe complete, ep = %p", (uint8_t *)&buf, 0xCu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  *(unsigned char *)(a1 + 148) &= ~0x20u;
  long long buf = 0uLL;
  uint64_t v7 = 0;
  sub_244CB8AC0(a1, (uint64_t)&buf);
  if (buf)
  {
    int v3 = 0;
    long long v4 = "src/ble/BLEEndPoint.cpp";
    int v5 = 264;
    sub_244CB81DC((void *)a1, 2, (uint64_t)&v3);
  }
}

void sub_244CB8AC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 151) <= 1u)
  {
    if ((*(unsigned char *)(a1 + 149) & 8) != 0)
    {
      if (!*(unsigned char *)(a1 + 151))
      {
LABEL_15:
        int v5 = 921;
LABEL_34:
        *(_DWORD *)a2 = 0;
        *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
        *(_DWORD *)(a2 + 16) = v5;
        return;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 151)) {
        BOOL v4 = *(void *)(a1 + 72) == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4) {
        goto LABEL_15;
      }
    }
  }
  if ((*(unsigned char *)(a1 + 148) & 0x20) != 0) {
    goto LABEL_15;
  }
  if (*(void *)(a1 + 72))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CBA0EC(a1, (void *)a2);
    goto LABEL_13;
  }
  int v6 = *(_DWORD *)(a1 + 112);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CB9C0C(a1, (void *)a2);
LABEL_13:
      if (*(_DWORD *)a2) {
        return;
      }
      goto LABEL_33;
    }
    if (!v6 && *(void *)(a1 + 64))
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CB9AF4(a1, (void *)a2);
      goto LABEL_13;
    }
LABEL_33:
    int v5 = 971;
    goto LABEL_34;
  }
  sub_244CBE8DC(a1 + 80, &v11);
  if (*(void *)(a1 + 64))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB9AF4(a1, (void *)a2);
    if (*(_DWORD *)a2)
    {
      int v7 = 0;
      goto LABEL_30;
    }
  }
  else if (*(_DWORD *)a1 == 4 && !*(unsigned char *)(a1 + 131))
  {
    int v8 = 0;
    int v9 = "src/ble/BLEEndPoint.cpp";
    int v10 = 962;
    sub_244CB8F08(a1, 4, 1, &v8);
  }
  else
  {
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 32) + 40) + 24))(*(void *)(*(void *)(a1 + 32) + 40));
  }
  int v7 = 1;
LABEL_30:
  if (v11) {
    sub_244CC8A0C(v11);
  }
  if (v7) {
    goto LABEL_33;
  }
}

uint64_t sub_244CB8C78(uint64_t a1)
{
  sub_244CB946C((void *)a1);
  sub_244CB96A4(a1 + 80);
  sub_244CB96D4(a1 + 80);
  uint64_t v2 = *(_WORD **)(a1 + 72);
  if (v2) {
    sub_244CC8A0C(v2);
  }
  *(void *)(a1 + 72) = 0;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBAF24, a1);
  *(unsigned char *)(a1 + 149) &= ~1u;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB030, a1);
  *(unsigned char *)(a1 + 149) &= ~2u;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB13C, a1);
  *(unsigned char *)(a1 + 149) &= ~4u;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB250, a1);
  *(unsigned char *)(a1 + 149) &= ~8u;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB2CC, a1);
  *(unsigned char *)(a1 + 149) &= ~0x10u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;

  return sub_244CB9674(a1);
}

BOOL sub_244CB8E5C(uint64_t a1, int a2)
{
  return (a2 - 3) < 2;
}

uint64_t sub_244CB8E6C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 149) >> 4) & 1;
}

void *sub_244CB8E78(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  int v2 = 0;
  int v3 = "src/ble/BLEEndPoint.cpp";
  int v4 = 291;
  return sub_244CB81DC(a1, 3, (uint64_t)&v2);
}

void *sub_244CB8EC0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  int v2 = 0;
  int v3 = "src/ble/BLEEndPoint.cpp";
  int v4 = 301;
  return sub_244CB81DC(a1, 1, (uint64_t)&v2);
}

void *sub_244CB8F08(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = 5;
  int v8 = *(_WORD **)(a1 + 64);
  if (v8) {
    sub_244CC8A0C(v8);
  }
  *(void *)(a1 + 64) = 0;
  if (a2 == 4 || (a3 & 1) != 0)
  {
    if (a3)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9)
      {
        long long v13 = *(_OWORD *)a4;
        uint64_t v14 = *(void *)(a4 + 16);
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v9 + 48))(v9, a1, &v13);
      }
    }
  }
  else
  {
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a4 + 16);
    sub_244CB921C((void *)a1, a2, 0, &v15);
  }
  if ((*(_DWORD *)a4 & 0xFFFFFFFE) == 0x40C)
  {
    *(void *)(a1 + 56) = 0;
    return (void *)sub_244CB8C78(a1);
  }
  if (*(_DWORD *)(a1 + 144) || (*(unsigned char *)(a1 + 148) & 8) == 0) {
    return (void *)sub_244CB8C78(a1);
  }
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB13C, a1);
  *(unsigned char *)(a1 + 149) &= ~4u;
  (*(void (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB250, a1);
  *(unsigned char *)(a1 + 149) &= ~8u;
  uint64_t result = (*(void *(**)(uint8_t *__return_ptr))(**(void **)(*(void *)(a1 + 32) + 32) + 24))(buf);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  *(void *)(a4 + 16) = v18;
  if (*(_DWORD *)a4)
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a4;
      uint64_t v18 = *(void *)(a4 + 16);
      uint64_t v12 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "BtpEngine unsubscribe failed %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = *(_OWORD *)a4;
      uint64_t v18 = *(void *)(a4 + 16);
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(2u, 1);
    }
    return (void *)sub_244CB8C78(a1);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t result = sub_244CB93B4(a1, (uint64_t)buf);
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(void *)(a4 + 16) = v18;
    if (*(_DWORD *)a4) {
      uint64_t result = (void *)sub_244CB8C78(a1);
    }
    *(unsigned char *)(a1 + 148) |= 0x20u;
  }
  return result;
}

uint64_t sub_244CB921C(void *a1, int a2, uint64_t a3, long long *a4)
{
  uint64_t result = a1[5];
  if (a2 == 1)
  {
    if (result)
    {
      long long v8 = *a4;
      uint64_t v9 = *((void *)a4 + 2);
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, long long *))(*(void *)result + 32))(result, a1, &v8);
    }
  }
  else if (result)
  {
    long long v6 = *a4;
    uint64_t v7 = *((void *)a4 + 2);
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, long long *))(*(void *)result + 48))(result, a1, &v6);
  }
  a1[1] = 0;
  a1[3] = 0;
  return result;
}

uint64_t sub_244CB92DC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                                             + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB13C, a1);
  *(unsigned char *)(a1 + 149) &= ~4u;
  return result;
}

uint64_t sub_244CB9348(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                                             + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB250, a1);
  *(unsigned char *)(a1 + 149) &= ~8u;
  return result;
}

void *sub_244CB93B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t result = (*(void *(**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 32) + 48) + 40))(&v5);
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  if (!*(_DWORD *)a2)
  {
    *(unsigned char *)(a1 + 149) |= 0x10u;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1387;
  }
  return result;
}

void *sub_244CB946C(void *result)
{
  if (result[7])
  {
    uint64_t v1 = result;
    char v2 = *((unsigned char *)result + 148);
    int v3 = sub_244CC8484(2u, "Ble");
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        *(_WORD *)long long v5 = 0;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "Auto-closing end point's BLE connection.", v5, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(2u, 2);
      }
      uint64_t result = (*(void *(**)(uint8_t *__return_ptr))(**(void **)(v1[4] + 32) + 32))(v5);
    }
    else
    {
      if (v4)
      {
        *(_WORD *)long long v5 = 0;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_DEFAULT, "Releasing end point's BLE connection back to application.", v5, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(2u, 2);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v1[4] + 40) + 16))(*(void *)(v1[4] + 40), v1[7]);
    }
    v1[7] = 0;
  }
  return result;
}

void sub_244CB95CC(uint64_t a1)
{
  uint64_t v1 = a1 + 80;
  sub_244CB96A4(a1 + 80);

  sub_244CB96D4(v1);
}

uint64_t sub_244CB9608(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                                             + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB2CC, a1);
  *(unsigned char *)(a1 + 149) &= ~0x10u;
  return result;
}

uint64_t sub_244CB9674(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  if (!v1) {
    sub_244E22E50();
  }
  int v2 = v1 - 1;
  *(_DWORD *)(result + 48) = v2;
  if (!v2) {
    *(void *)(result + 32) = 0;
  }
  return result;
}

void sub_244CB96A4(uint64_t a1)
{
  sub_244CBE8DC(a1, &v1);
  if (v1) {
    sub_244CC8A0C(v1);
  }
}

void sub_244CB96D4(uint64_t a1)
{
  sub_244CBE590(a1, &v1);
  if (v1) {
    sub_244CC8A0C(v1);
  }
}

double sub_244CB9704@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (*(void *)(a1 + 32))
  {
    *(_DWORD *)a6 = 3;
    *(void *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    int v7 = 505;
LABEL_3:
    *(_DWORD *)(a6 + 16) = v7;
    return result;
  }
  if (!a2)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    int v7 = 508;
    goto LABEL_3;
  }
  if (!a3)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    int v7 = 509;
    goto LABEL_3;
  }
  if (a4 >= 2)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    int v7 = 510;
    goto LABEL_3;
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  sub_244CBD3EC(a1 + 80, a1, a4 == 1, (uint64_t)&v18);
  if (!v18)
  {
    *(void *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 48) = 1;
    *(void *)(a1 + 56) = a3;
    *(_DWORD *)(a1 + 144) = a4;
    *(unsigned char *)(a1 + 148) = a5;
    *(_DWORD *)(a1 + 149) = 0;
    long long v15 = *(_WORD **)(a1 + 64);
    if (v15) {
      sub_244CC8A0C(v15);
    }
    *(void *)(a1 + 64) = 0;
    uint64_t v16 = *(_WORD **)(a1 + 72);
    if (v16) {
      sub_244CC8A0C(v16);
    }
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)a1 = 0;
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    int v7 = 542;
    goto LABEL_3;
  }
  uint64_t v14 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v17 = 0;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "BtpEngine init failed", v17, 2u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  double result = *(double *)&v18;
  *(_OWORD *)a6 = v18;
  *(void *)(a6 + 16) = v19;
  return result;
}

uint64_t sub_244CB98D4(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  if (v1 == -1) {
    sub_244E22F08();
  }
  *(_DWORD *)(result + 48) = v1 + 1;
  return result;
}

void sub_244CB9900(uint64_t a1@<X0>, _WORD **a2@<X1>, void *a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_26519C0A8;
  a3[2] = 565;
  if (*(_DWORD *)(a1 + 144)) {
    sub_244CB8758(a1, a2, a3);
  }
  else {
    sub_244CB7FC4(a1, a2, a3);
  }
  if (!*(_DWORD *)a3) {
    --*(unsigned char *)(a1 + 151);
  }
}

void sub_244CB9974(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_26519C0C0;
  *(void *)(a3 + 16) = 609;
  long long v5 = (uint64_t *)*a2;
  if (!*a2)
  {
    int v7 = 611;
    int v8 = 47;
    goto LABEL_8;
  }
  if (*a1 - 3 > 1)
  {
    int v7 = 612;
    int v8 = 3;
    goto LABEL_8;
  }
  if (*v5)
  {
    sub_244CC8BB4(v5);
    long long v5 = (uint64_t *)*a2;
    if (*(void *)*a2)
    {
      int v7 = 622;
      int v8 = 195;
LABEL_8:
      *(_DWORD *)a3 = v8;
      *(void *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
      *(_DWORD *)(a3 + 16) = v7;
LABEL_9:
      long long v9 = *(_OWORD *)a3;
      uint64_t v10 = *(void *)(a3 + 16);
      sub_244CB81DC(a1, 2, (uint64_t)&v9);
      return;
    }
  }
  if (*((void *)a1 + 8))
  {
    sub_244CC8B70(*((void **)a1 + 8), a2);
  }
  else
  {
    *((void *)a1 + 8) = v5;
    *a2 = 0;
  }
  sub_244CB8AC0((uint64_t)a1, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_9;
  }
}

BOOL sub_244CB9A80(unsigned char *a1, _WORD **a2, char *a3)
{
  if ((a1[149] & 8) != 0)
  {
    a1[150] = a1[152];
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
  }
  *a3 = v3;
  uint64_t v6 = *a2;
  *a2 = 0;
  BOOL v4 = sub_244CBE5B0((uint64_t)(a1 + 80), (uint64_t *)&v6, *a3);
  if (v6) {
    sub_244CC8A0C(v6);
  }
  return v4;
}

void sub_244CB9AF4(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_244CC9214((void **)(a1 + 64), &v6);
  char v5 = 0;
  if (sub_244CB9A80((unsigned char *)a1, &v6, &v5))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CC8F2C(*(void *)(a1 + 120));
    BOOL v4 = *(_WORD **)(a1 + 120);
    sub_244CB9900(a1, &v4, a2);
    if (v4) {
      sub_244CC8A0C(v4);
    }
    if (!*(_DWORD *)a2)
    {
      if (v5)
      {
        (*(void (**)(void, uint64_t (*)(), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                          + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB250, a1);
        *(unsigned char *)(a1 + 149) &= ~8u;
      }
      sub_244CB88E4((void *)a1, (uint64_t)a2);
    }
  }
  else
  {
    *(_DWORD *)a2 = 1035;
    a2[1] = "src/ble/BLEEndPoint.cpp";
    *((_DWORD *)a2 + 4) = 672;
  }
  if (v6) {
    sub_244CC8A0C(v6);
  }
}

void sub_244CB9C0C(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v7 = 0;
  *(void *)uint64_t v6 = 0;
  BOOL v4 = sub_244CB9A80((unsigned char *)a1, (_WORD **)v6, &v7);
  if (*(void *)v6) {
    sub_244CC8A0C(*(_WORD **)v6);
  }
  if (v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CC8F2C(*(void *)(a1 + 120));
    *(void *)uint64_t v6 = *(void *)(a1 + 120);
    sub_244CB9900(a1, (_WORD **)v6, a2);
    if (*(void *)v6) {
      sub_244CC8A0C(*(_WORD **)v6);
    }
    if (!*(_DWORD *)a2)
    {
      if (v7)
      {
        (*(void (**)(void, uint64_t (*)(), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48)
                                                                          + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB250, a1);
        *(unsigned char *)(a1 + 149) &= ~8u;
      }
      sub_244CB88E4((void *)a1, (uint64_t)a2);
    }
  }
  else
  {
    char v5 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "btp fragmenter error on send!", v6, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    sub_244CBDCD0((int *)(a1 + 80));
    *(_DWORD *)a2 = 1035;
    a2[1] = "src/ble/BLEEndPoint.cpp";
    *((_DWORD *)a2 + 4) = 711;
  }
}

void sub_244CB9DB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_26519C0D8;
  *(void *)(a2 + 16) = 730;
  uint64_t v4 = sub_244CC8C9C(*(_WORD **)(a1 + 64));
  *(void *)(a1 + 64) = v4;
  if (!*(_DWORD *)(a1 + 144))
  {
    (*(void (**)(void, void, void *, void *))(**(void **)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 56), &unk_244EAE1D8, &unk_244EAE1E8);
    if (*(_DWORD *)a2)
    {
LABEL_12:
      char v5 = 2;
      goto LABEL_13;
    }
    *(unsigned char *)(a1 + 148) |= 0x28u;
LABEL_11:
    if (!*(_DWORD *)a2) {
      return;
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)a1 != 2)
  {
    if (*(_DWORD *)a1 == 3)
    {
      if (*(unsigned __int8 *)(a1 + 150) > 1u || v4) {
        sub_244CB8AC0(a1, a2);
      }
      else {
        sub_244CB9EF4(a1, a2);
      }
    }
    goto LABEL_11;
  }
  *(_DWORD *)a2 = 1040;
  *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 773;
  char v5 = 3;
LABEL_13:
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  sub_244CB81DC((void *)a1, v5, (uint64_t)&v6);
}

void sub_244CB9EF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void, uint64_t (*)(), uint64_t))(**(void **)(*(void *)(a1 + 32) + 48) + 72))(*(void *)(*(void *)(a1 + 32) + 48), sub_244CBB250, a1);
  *(unsigned char *)(a1 + 149) &= ~8u;
  if (*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  sub_244CC8F5C(3uLL, 0x26u, &v6);
  uint64_t v4 = *(_WORD **)(a1 + 72);
  if (v4) {
    sub_244CC8A0C(v4);
  }
  uint64_t v5 = v6;
  *(void *)(a1 + 72) = v6;
  if (v5)
  {
LABEL_5:
    sub_244CB8AC0(a1, a2);
  }
  else
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 867;
  }
}

void sub_244CB9FC8(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_26519C0F0;
  *(void *)(a2 + 16) = 791;
  if ((a1[149] & 0x10) != 0) {
    goto LABEL_11;
  }
  if (*a1 - 3 < 2)
  {
    unsigned __int8 v4 = a1[148];
    if ((v4 & 0x10) != 0)
    {
      uint64_t v5 = (_WORD *)*((void *)a1 + 9);
      if (v5)
      {
        sub_244CC8A0C(v5);
        unsigned __int8 v4 = a1[148];
      }
      *((void *)a1 + 9) = 0;
      a1[148] = v4 & 0xEF;
    }
    if (a1[150] > 1u || *((void *)a1 + 8) || *((_DWORD *)a1 + 28) == 1) {
      sub_244CB8AC0((uint64_t)a1, a2);
    }
    else {
      sub_244CB9EF4((uint64_t)a1, a2);
    }
LABEL_11:
    if (!*(_DWORD *)a2) {
      return;
    }
    goto LABEL_14;
  }
  *(_DWORD *)a2 = 3;
  *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 803;
LABEL_14:
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  sub_244CB81DC(a1, 2, (uint64_t)&v6);
}

void sub_244CBA0CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 148);
  *(unsigned char *)(a1 + 148) = v2 & 0xDF;
  if ((v2 & 2) != 0)
  {
    sub_244CB9FC8((unsigned __int8 *)a1, a2);
  }
  else
  {
    *(unsigned char *)(a1 + 148) = v2 & 0xDD | 2;
    sub_244CB9DB0(a1, a2);
  }
}

void sub_244CBA0EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_244CBD598((unsigned char *)(a1 + 80), (uint64_t *)(a1 + 72), (uint64_t)v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244CC8F2C(*(void *)(a1 + 72));
  v4[0] = *(_WORD **)(a1 + 72);
  sub_244CB9900(a1, v4, a2);
  if (v4[0]) {
    sub_244CC8A0C(v4[0]);
  }
  if (!*(_DWORD *)a2)
  {
    *(unsigned char *)(a1 + 150) = *(unsigned char *)(a1 + 152);
    *(unsigned char *)(a1 + 148) |= 0x10u;
    sub_244CB88E4((void *)a1, (uint64_t)a2);
  }
}

void sub_244CBA184(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    *(_DWORD *)a1 = 1;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CBB528((uint64_t)a2, (uint64_t)v21, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      sub_244CC8F5C(6uLL, 0x26u, &v17);
      if (v17)
      {
        LOWORD(v5) = v22;
        if (v22
          || (int v5 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 56))) != 0)
        {
          if ((unsigned __int16)(v5 - 3) <= 0xF4u) {
            __int16 v6 = v5 - 3;
          }
          else {
            __int16 v6 = 244;
          }
        }
        else
        {
          uint64_t v16 = sub_244CC8484(2u, "Ble");
          __int16 v6 = 20;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            int v25 = 20;
            _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_DEFAULT, "cannot determine ATT MTU; selecting default fragment size = %u",
              buf,
              8u);
          }
          if (sub_244CC4E58(2u)) {
            sub_244CC4DE0(2u, 2);
          }
        }
        __int16 v19 = v6;
        if (v23 >= 6u) {
          int v7 = 6;
        }
        else {
          int v7 = v23;
        }
        *(unsigned char *)(a1 + 152) = v7;
        *(unsigned char *)(a1 + 150) = v7;
        *(unsigned char *)(a1 + 151) = v7;
        char v20 = v7;
        int v8 = sub_244CC8484(2u, "Ble");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v25 = v7;
          _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "local and remote recv window sizes = %u", buf, 8u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(2u, 2);
        }
        unsigned __int8 v9 = sub_244CBD31C((uint64_t)v21);
        v18[0] = v9;
        uint64_t v10 = sub_244CC8484(2u, "Ble");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v25 = v9;
          _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "selected BTP version %d", buf, 8u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(2u, 2);
        }
        if (v9)
        {
          *(_WORD *)(a1 + 108) = v6;
          *(_WORD *)(a1 + 132) = v6;
        }
        else
        {
          uint64_t v11 = sub_244CC8484(2u, "Ble");
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109376;
            int v25 = 4;
            __int16 v26 = 1024;
            int v27 = 4;
            _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "incompatible BTP versions; peripheral expected between %d and %d",
              buf,
              0xEu);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(2u, 1);
          }
          *(_DWORD *)a1 = 2;
        }
        uint64_t v12 = sub_244CC8484(2u, "Ble");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(unsigned __int16 *)(a1 + 108);
          int v14 = *(unsigned __int16 *)(a1 + 132);
          *(_DWORD *)long long buf = 67109376;
          int v25 = v13;
          __int16 v26 = 1024;
          int v27 = v14;
          _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "using BTP fragment sizes rx %d / tx %d.", buf, 0xEu);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(2u, 2);
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CBB5C4((uint64_t)v18, (uint64_t *)&v17, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          long long v15 = *(void **)(a1 + 64);
          if (v15)
          {
            sub_244CC8B70(v15, (uint64_t *)&v17);
          }
          else
          {
            *(void *)(a1 + 64) = v17;
            int v17 = 0;
          }
          sub_244CBA610(a1, (uint64_t)a3);
        }
      }
      else
      {
        *(_DWORD *)a3 = 11;
        a3[1] = "src/ble/BLEEndPoint.cpp";
        *((_DWORD *)a3 + 4) = 988;
      }
      if (v17) {
        sub_244CC8A0C(v17);
      }
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/ble/BLEEndPoint.cpp";
    *((_DWORD *)a3 + 4) = 980;
  }
}

void *sub_244CBA610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  double result = (*(void *(**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 32) + 48) + 40))(&v5);
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  if (!*(_DWORD *)a2)
  {
    *(unsigned char *)(a1 + 149) |= 2u;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1337;
  }
  return result;
}

uint64_t sub_244CBA6C8@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!*a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
    int v12 = 1054;
LABEL_23:
    *(_DWORD *)(a3 + 16) = v12;
    return result;
  }
  uint64_t v4 = result;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double result = sub_244CBB660((uint64_t)a2, (uint64_t)v13, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  if (!v14)
  {
    *(_DWORD *)a3 = 1043;
    *(void *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
    int v12 = 1059;
    goto LABEL_23;
  }
  long long v5 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109632;
    int v17 = v13[0];
    __int16 v18 = 1024;
    int v19 = 4;
    __int16 v20 = 1024;
    int v21 = 4;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "peripheral chose BTP version %d; central expected between %d and %d",
      buf,
      0x14u);
  }
  double result = sub_244CC4E58(2u);
  if (result) {
    double result = sub_244CC4DE0(2u, 2);
  }
  if (v13[0] != 4)
  {
    *(_DWORD *)a3 = 1040;
    *(void *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
    int v12 = 1067;
    goto LABEL_23;
  }
  if (v14 <= 0xF4u) {
    __int16 v6 = v14;
  }
  else {
    __int16 v6 = 244;
  }
  unsigned __int16 v14 = v6;
  *(_WORD *)(v4 + 108) = v6;
  *(_WORD *)(v4 + 132) = v6;
  int v7 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int16 *)(v4 + 108);
    int v9 = *(unsigned __int16 *)(v4 + 132);
    *(_DWORD *)long long buf = 67109376;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "using BTP fragment sizes rx %d / tx %d.", buf, 0xEu);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  unsigned __int8 v10 = v15;
  *(unsigned char *)(v4 + 152) = v15;
  *(unsigned char *)(v4 + 150) = v10;
  *(unsigned char *)(v4 + 151) = v10;
  uint64_t v11 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v17 = v15;
    _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "local and remote recv window size = %u", buf, 8u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(2u, 2);
  }
  --*(unsigned char *)(v4 + 150);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  double result = (uint64_t)sub_244CBA9DC((void *)v4, a3);
  if (!*(_DWORD *)a3) {
    return sub_244CB8350(v4, a3);
  }
  return result;
}

void *sub_244CBA9DC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)result + 149) & 8) == 0)
  {
    char v3 = result;
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    double result = (*(void *(**)(long long *__return_ptr))(**(void **)(result[4] + 48) + 40))(&v4);
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = v5;
    if (*(_DWORD *)a2) {
      return result;
    }
    *((unsigned char *)v3 + 149) |= 8u;
  }
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 1377;
  return result;
}

uint64_t sub_244CBAA9C(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  if (a4 < a2 && a3 + a2 > 0xFF) {
    return (a3 + a2 - a4 + 1);
  }
  else {
    return (a3 + a2 - a4);
  }
}

void sub_244CBAABC(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_26519C108;
  a3[2] = 1126;
  __int16 v26 = 0;
  if ((a1[149] & 0x10) != 0) {
    return;
  }
  unsigned __int8 v6 = a1[148];
  if ((v6 & 4) == 0)
  {
    int v7 = *(_DWORD *)a1;
    if (*((_DWORD *)a1 + 36))
    {
      if (v7)
      {
        int v8 = 1154;
LABEL_25:
        *(_DWORD *)a3 = 3;
        a3[1] = "src/ble/BLEEndPoint.cpp";
        *((_DWORD *)a3 + 4) = v8;
        goto LABEL_26;
      }
      a1[148] = v6 | 4;
      sub_244CBA184((uint64_t)a1, a2, a3);
      int v12 = *(_DWORD *)a3;
      if (*(_DWORD *)a3) {
        char v13 = 3;
      }
      else {
        char v13 = 2;
      }
    }
    else
    {
      if (v7 != 1)
      {
        int v8 = 1145;
        goto LABEL_25;
      }
      a1[148] = v6 | 4;
      sub_244CBA6C8((uint64_t)a1, a2, (uint64_t)a3);
      int v12 = *(_DWORD *)a3;
      char v13 = 2;
    }
    if (!v12) {
      return;
    }
    goto LABEL_27;
  }
  if (*a1 - 3 >= 2)
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "ep rx'd packet in bad state", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    int v8 = 1181;
    goto LABEL_25;
  }
  int v9 = a1 + 80;
  nullsub_13(a1 + 80, a2);
  sub_244CBD674((uint64_t)(a1 + 80), a2, (unsigned char *)&v26 + 1, (BOOL *)&v26, (uint64_t)a3);
  nullsub_13(a1 + 80, v10);
  if (*(_DWORD *)a3) {
    goto LABEL_26;
  }
  --a1[150];
  if ((_BYTE)v26)
  {
    if (!a1[131])
    {
      (*(void (**)(void, void (*)(uint64_t, uint64_t), unsigned __int8 *))(**(void **)(*((void *)a1 + 4) + 48)
                                                                                               + 72))(*(void *)(*((void *)a1 + 4) + 48), sub_244CBB13C, a1);
      a1[149] &= ~4u;
      if (*(_DWORD *)a1 == 4 && !*((void *)a1 + 8) && !*((_DWORD *)a1 + 28))
      {
        int v23 = 0;
        long long v24 = "src/ble/BLEEndPoint.cpp";
        int v25 = 1215;
        sub_244CB8F08((uint64_t)a1, 4, 1, (uint64_t)&v23);
        return;
      }
LABEL_32:
      unsigned int v14 = a1[129];
      unsigned int v15 = a1[152] + HIBYTE(v26);
      if (v14 < HIBYTE(v26) && v15 > 0xFF) {
        unsigned __int8 v17 = v15 - v14 + 1;
      }
      else {
        unsigned __int8 v17 = v15 - v14;
      }
      a1[151] = v17;
      sub_244CB8AC0((uint64_t)a1, (uint64_t)buf);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      a3[2] = v22;
      if (*(_DWORD *)a3) {
        goto LABEL_26;
      }
      goto LABEL_39;
    }
    sub_244CBAE6C(a1, (uint64_t)buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    a3[2] = v22;
    if (!*(_DWORD *)a3) {
      goto LABEL_32;
    }
LABEL_26:
    char v13 = 2;
LABEL_27:
    long long v19 = *(_OWORD *)a3;
    uint64_t v20 = a3[2];
    sub_244CB81DC(a1, v13, (uint64_t)&v19);
    return;
  }
LABEL_39:
  if (sub_244CBD4CC((uint64_t)(a1 + 80)))
  {
    if (a1[150] > 1u || (a1[148] & 0x20) != 0) {
      sub_244CBA9DC(a1, (uint64_t)buf);
    }
    else {
      sub_244CB9EF4((uint64_t)a1, (uint64_t)buf);
    }
    *(_OWORD *)a3 = *(_OWORD *)buf;
    a3[2] = v22;
    if (*(_DWORD *)a3) {
      goto LABEL_26;
    }
  }
  if (*v9 == 2)
  {
    sub_244CBE590((uint64_t)(a1 + 80), buf);
    uint64_t v18 = *((void *)a1 + 5);
    if (v18 && *(_DWORD *)a1 != 4) {
      (*(void (**)(uint64_t, unsigned __int8 *, uint8_t *))(*(void *)v18 + 40))(v18, a1, buf);
    }
    if (*(void *)buf) {
      sub_244CC8A0C(*(_WORD **)buf);
    }
  }
}

void *sub_244CBAE6C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)result + 149) & 4) != 0)
  {
    char v3 = result;
    (*(void (**)(void, void (*)(uint64_t, uint64_t), void *))(**(void **)(result[4] + 48)
                                                                                    + 72))(*(void *)(result[4] + 48), sub_244CBB13C, result);
    *((unsigned char *)v3 + 149) &= ~4u;
    return sub_244CB88E4(v3, a2);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1356;
  }
  return result;
}

void sub_244CBAF24(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 149))
  {
    char v3 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = a2;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "connect handshake timed out, closing ep %p", buf, 0xCu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    *(unsigned char *)(a2 + 149) &= ~1u;
    int v4 = 1045;
    uint64_t v5 = "src/ble/BLEEndPoint.cpp";
    int v6 = 1434;
    sub_244CB81DC((void *)a2, 2, (uint64_t)&v4);
  }
}

void sub_244CBB030(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 149) & 2) != 0)
  {
    char v3 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = a2;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "receive handshake timed out, closing ep %p", buf, 0xCu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    *(unsigned char *)(a2 + 149) &= ~2u;
    int v4 = 1046;
    uint64_t v5 = "src/ble/BLEEndPoint.cpp";
    int v6 = 1447;
    sub_244CB81DC(a2, 3, &v4);
  }
}

void sub_244CBB13C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 149) & 4) != 0)
  {
    char v3 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v9 = a2;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "ack recv timeout, closing ep %p", buf, 0xCu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    nullsub_13(a2 + 80, v4);
    *(unsigned char *)(a2 + 149) &= ~4u;
    int v5 = 1048;
    int v6 = "src/ble/BLEEndPoint.cpp";
    int v7 = 1461;
    sub_244CB81DC(a2, 2, &v5);
  }
}

void sub_244CBB250(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 149) & 8) != 0)
  {
    *(unsigned char *)(a2 + 149) &= ~8u;
    if ((*(unsigned char *)(a2 + 148) & 0x10) == 0)
    {
      long long v5 = 0uLL;
      uint64_t v6 = 0;
      sub_244CB9EF4(a2, (uint64_t)&v5);
      if (v5)
      {
        long long v3 = v5;
        uint64_t v4 = v6;
        sub_244CB81DC(a2, 2, &v3);
      }
    }
  }
}

void sub_244CBB2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 149) & 0x10) != 0)
  {
    long long v3 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v5 = a2;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "unsubscribe timed out, ble ep %p", buf, 0xCu);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
    *(unsigned char *)(a2 + 149) &= ~0x10u;
    sub_244CB8C78(a2);
  }
}

void *sub_244CBB3B4()
{
  return sub_244CB7CA0(&off_26BA163C0);
}

BOOL sub_244CBB3C0(char *a1, size_t a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)a3 & 0xFF000700;
  if (v3 == 1024)
  {
    unsigned int v4 = *(_DWORD *)a3 - 1025;
    if (v4 > 0x1E) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = (&off_26519C120)[v4];
    }
    long long v7 = *a3;
    uint64_t v8 = *((void *)a3 + 2);
    sub_244CB7C34(a1, a2, "Ble", &v7, v5);
  }
  return v3 == 1024;
}

uint64_t sub_244CBB440(uint64_t result, unsigned int a2, char a3)
{
  char v3 = 16 * a3;
  if (a2) {
    char v4 = -16;
  }
  else {
    char v4 = 15;
  }
  if ((a2 & 1) == 0) {
    char v3 = a3;
  }
  *(unsigned char *)(result + ((unint64_t)a2 >> 1)) = *(unsigned char *)(result + ((unint64_t)a2 >> 1)) & ~v4 | v3 & v4;
  return result;
}

unint64_t sub_244CBB474@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(*a2 + 8);
  unint64_t result = sub_244CC8ACC(*a2);
  if (result < 9)
  {
    int v10 = 170;
    int v9 = 11;
  }
  else
  {
    uint64_t v8 = 0;
    *(_WORD *)uint64_t v6 = 27749;
    do
    {
      *(unsigned char *)(v6 + v8 + 2) = *(unsigned char *)(a1 + v8);
      ++v8;
    }
    while (v8 != 4);
    *(_WORD *)(v6 + 6) = *(_WORD *)(a1 + 4);
    *(unsigned char *)(v6 + 8) = *(unsigned char *)(a1 + 6);
    unint64_t result = sub_244CC8AE4(*a2, 9uLL, 0);
    int v9 = 0;
    int v10 = 185;
  }
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_244CBB528@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(*(void *)result + 24) < 9uLL)
  {
    int v7 = 194;
    int v5 = 13;
    goto LABEL_11;
  }
  char v3 = *(unsigned char **)(*(void *)result + 8);
  if (*v3 != 101)
  {
    int v7 = 196;
LABEL_10:
    int v5 = 1047;
    goto LABEL_11;
  }
  if (v3[1] != 108)
  {
    int v7 = 197;
    goto LABEL_10;
  }
  for (uint64_t i = 0; i != 4; ++i)
    *(unsigned char *)(a2 + i) = v3[i + 2];
  int v5 = 0;
  uint64_t v6 = v3 + 4;
  *(_WORD *)(a2 + 4) = *((_WORD *)v6 + 1);
  *(unsigned char *)(a2 + 6) = v6[4];
  int v7 = 209;
LABEL_11:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

unint64_t sub_244CBB5C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(*a2 + 8);
  unint64_t result = sub_244CC8ACC(*a2);
  if (result < 6)
  {
    int v9 = 219;
    int v8 = 11;
  }
  else
  {
    *(_WORD *)uint64_t v6 = 27749;
    *(unsigned char *)(v6 + 2) = *(unsigned char *)a1;
    *(_WORD *)(v6 + 3) = *(_WORD *)(a1 + 2);
    *(unsigned char *)(v6 + 5) = *(unsigned char *)(a1 + 4);
    unint64_t result = sub_244CC8AE4(*a2, 6uLL, 0);
    int v8 = 0;
    int v9 = 230;
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_244CBB660@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(*(void *)result + 24) < 6uLL)
  {
    int v5 = 239;
    int v4 = 13;
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(*(void *)result + 8);
  if (*(unsigned char *)v3 != 101)
  {
    int v5 = 241;
LABEL_8:
    int v4 = 1047;
    goto LABEL_9;
  }
  if (*(unsigned char *)(v3 + 1) != 108)
  {
    int v5 = 242;
    goto LABEL_8;
  }
  int v4 = 0;
  *(unsigned char *)a2 = *(unsigned char *)(v3 + 2);
  *(_WORD *)(a2 + 2) = *(_WORD *)(v3 + 3);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(v3 + 5);
  int v5 = 248;
LABEL_9:
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244CBB6E4(uint64_t result)
{
  *(_DWORD *)unint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void *sub_244CBB6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t result = sub_244CBB3B4();
  if (!a2)
  {
    int v13 = 265;
LABEL_9:
    int v14 = 47;
    goto LABEL_10;
  }
  if (!a4)
  {
    int v13 = 266;
    goto LABEL_9;
  }
  if (!a5)
  {
    int v13 = 267;
    goto LABEL_9;
  }
  if (*(_DWORD *)a1)
  {
    int v13 = 271;
    int v14 = 3;
  }
  else
  {
    int v14 = 0;
    *(void *)(a1 + 24) = a3;
    *(void *)(a1 + 32) = a2;
    *(void *)(a1 + 40) = a4;
    *(void *)(a1 + 48) = a5;
    int v13 = 283;
    *(_DWORD *)a1 = 1;
  }
LABEL_10:
  *(_DWORD *)a6 = v14;
  *(void *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v13;
  return result;
}

void *sub_244CBB7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_244CBB6F0(a1, a2, 0, a3, a4, a5);
}

_DWORD *sub_244CBB7B0(_DWORD *result)
{
  *unint64_t result = 2;
  return result;
}

void sub_244CBB7BC(_DWORD *a1)
{
  *a1 = 0;
  sub_244CBB7C4();
}

void sub_244CBB7C4()
{
  if (qword_268EBD128)
  {
    if (dword_268EBD108 != 5) {
      sub_244CB8E78(&dword_268EBD108);
    }
    if (sub_244CB8E6C((uint64_t)&dword_268EBD108))
    {
      sub_244CB8C78((uint64_t)&dword_268EBD108);
    }
  }
}

void sub_244CBB830(uint64_t a1, uint64_t a2)
{
  if (qword_268EBD128) {
    BOOL v2 = qword_268EBD140 == a2;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    if (dword_268EBD108 != 5) {
      sub_244CB8E78(&dword_268EBD108);
    }
    if (sub_244CB8E6C((uint64_t)&dword_268EBD108))
    {
      sub_244CB8C78((uint64_t)&dword_268EBD108);
    }
  }
}

uint64_t sub_244CBB8A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)result != 1)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/ble/BleLayer.cpp";
    int v4 = 359;
LABEL_10:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  unint64_t result = *(void *)(result + 24);
  if (!result)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/ble/BleLayer.cpp";
    int v4 = 360;
    goto LABEL_10;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  if (*(_DWORD *)a2 == 45)
  {
    uint64_t v3 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "BleConnectionDelegate::CancelConnection is not implemented.", v5, 2u);
    }
    unint64_t result = sub_244CC4E58(1u);
    if (result) {
      return sub_244CC4DE0(2u, 1);
    }
  }
  return result;
}

uint64_t sub_244CBB9C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*(_DWORD *)result != 1)
  {
    int v12 = 374;
LABEL_10:
    int v11 = 3;
    goto LABEL_11;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 24);
  if (!v9)
  {
    int v12 = 375;
    goto LABEL_10;
  }
  if (!*(void *)(result + 16))
  {
    int v12 = 376;
    goto LABEL_10;
  }
  *(void *)(v9 + 8) = a4;
  *(void *)(*(void *)(result + 24) + 16) = a5;
  uint64_t v10 = *(void *)(result + 24);
  if (!a3) {
    a3 = v8;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8, a3, a2);
  int v11 = 0;
  int v12 = 383;
LABEL_11:
  *(_DWORD *)a6 = v11;
  *(void *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v12;
  return result;
}

uint64_t sub_244CBBA80@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*(_DWORD *)result != 1)
  {
    int v12 = 390;
LABEL_10:
    int v11 = 3;
    goto LABEL_11;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 24);
  if (!v9)
  {
    int v12 = 391;
    goto LABEL_10;
  }
  if (!*(void *)(result + 16))
  {
    int v12 = 392;
    goto LABEL_10;
  }
  *(void *)(v9 + 8) = a4;
  *(void *)(*(void *)(result + 24) + 16) = a5;
  uint64_t v10 = *(void *)(result + 24);
  if (!a3) {
    a3 = v8;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, v8, a3, a2);
  int v11 = 0;
  int v12 = 399;
LABEL_11:
  *(_DWORD *)a6 = v11;
  *(void *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v12;
  return result;
}

uint64_t sub_244CBBB3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)result != 1)
  {
    int v5 = 404;
LABEL_6:
    int v4 = 3;
    goto LABEL_7;
  }
  if (!*(void *)(result + 16))
  {
    int v5 = 405;
    goto LABEL_6;
  }
  unint64_t result = sub_244CBBBA4(result, a2);
  int v4 = 0;
  int v5 = 409;
LABEL_7:
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244CBBBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  sub_244CBBCCC(a1, (uint64_t)&v5, a2, 0, 1, (uint64_t)&v6);
  long long v9 = v7;
  int v10 = v8;
  if (v6)
  {
    long long v7 = v9;
    int v8 = v10;
    return (*(uint64_t (**)(void, int *))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), &v6);
  }
  else
  {
    int v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);
    return v4();
  }
}

void sub_244CBBCCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  if (*(_DWORD *)a1 == 1)
  {
    if (a3)
    {
      int v8 = &dword_268EBD108;
      uint64_t v9 = qword_268EBD128;
      if (qword_268EBD128) {
        int v8 = 0;
      }
      *(void *)a2 = v8;
      if (v9)
      {
        int v10 = sub_244CC8484(2u, "Ble");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          unsigned int v15 = "Ble";
          _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "%s endpoint pool FULL", buf, 0xCu);
        }
        if (sub_244CC4E58(1u)) {
          sub_244CC4DE0(2u, 1);
        }
        int v11 = 430;
        int v12 = 193;
      }
      else
      {
        sub_244CB9704((uint64_t)&dword_268EBD108, a1, a3, a4, a5, (uint64_t)buf);
        int v12 = 0;
        *(void *)(*(void *)a2 + 40) = *(void *)(a1 + 16);
        int v11 = 436;
      }
    }
    else
    {
      int v11 = 423;
      int v12 = 47;
    }
  }
  else
  {
    int v11 = 418;
    int v12 = 3;
  }
  *(_DWORD *)a6 = v12;
  *(void *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v11;
}

void sub_244CBBE3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_26519C218;
  a4[2] = 442;
  uint64_t v11 = 0;
  sub_244CBBCCC(a1, (uint64_t)&v11, a2, 1u, 0, (uint64_t)a4);
  int v8 = (unsigned __int8 *)v11;
  if (!*(_DWORD *)a4)
  {
    *(void *)(v11 + 40) = *(void *)(a1 + 16);
    sub_244CBAABC(v8, a3, a4);
LABEL_5:
    if (!*(_DWORD *)a4) {
      return;
    }
    goto LABEL_6;
  }
  if (!v11)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), a2);
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v9 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a4;
    uint64_t v13 = a4[2];
    int v10 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "HandleChipConnectionReceived failed, err = %s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a4;
    uint64_t v13 = a4[2];
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(2u, 1);
  }
}

BOOL sub_244CBBFE4(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    if (sub_244CBD3C4((uint64_t *)&unk_244EAE1F8, a4))
    {
      if (*a5)
      {
        if (a2 && (qword_268EBD128 ? (BOOL v9 = qword_268EBD140 == a2) : (BOOL v9 = 0), v9))
        {
          long long v18 = 0uLL;
          uint64_t v19 = 0;
          sub_244CBAABC((unsigned __int8 *)&dword_268EBD108, a5, &v18);
          if (v18)
          {
            uint64_t v16 = sub_244CC8484(2u, "Ble");
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)long long buf = v18;
              uint64_t v21 = v19;
              unsigned __int8 v17 = sub_244CB7B34((const char **)buf, 1);
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v17;
              _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Receive failed, err = %s", buf, 0xCu);
            }
            if (!sub_244CC4E58(1u)) {
              return 0;
            }
LABEL_30:
            *(_OWORD *)long long buf = v18;
            uint64_t v21 = v19;
            sub_244CB7B34((const char **)buf, 1);
LABEL_31:
            sub_244CC4DE0(2u, 1);
            return 0;
          }
        }
        else
        {
          long long v18 = 0uLL;
          uint64_t v19 = 0;
          sub_244CBBE3C(a1, a2, a5, &v18);
          if (v18)
          {
            int v10 = sub_244CC8484(2u, "Ble");
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)long long buf = v18;
              uint64_t v21 = v19;
              uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v11;
              _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Handle new BLE connection failed, err = %s", buf, 0xCu);
            }
            if (!sub_244CC4E58(1u)) {
              return 0;
            }
            goto LABEL_30;
          }
        }
        return 1;
      }
      unsigned int v15 = sub_244CC8484(2u, "Ble");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Write received null buffer", buf, 2u);
      }
      BOOL result = sub_244CC4E58(1u);
      if (result) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v14 = sub_244CC8484(2u, "Ble");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Write received on unknown char", buf, 2u);
      }
      BOOL result = sub_244CC4E58(1u);
      if (result) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    int v12 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Write received on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result) {
      goto LABEL_31;
    }
  }
  return result;
}

BOOL sub_244CBC368(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Indication received on unknown svc", buf, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      return 0;
    }
LABEL_24:
    uint64_t v10 = 1;
    goto LABEL_25;
  }
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1E8, a4))
  {
    int v12 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Indication received on unknown char", buf, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      return 0;
    }
    goto LABEL_24;
  }
  if (!*a5)
  {
    uint64_t v13 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Indication received null buffer", buf, 2u);
    }
    if (!sub_244CC4E58(1u)) {
      return 0;
    }
    goto LABEL_24;
  }
  if (!a2 || (qword_268EBD128 ? (BOOL v8 = qword_268EBD140 == a2) : (BOOL v8 = 0), !v8))
  {
    BOOL v9 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_INFO, "No endpoint for received indication", buf, 2u);
    }
    if (!sub_244CC4E58(3u)) {
      return 0;
    }
    uint64_t v10 = 3;
LABEL_25:
    sub_244CC4DE0(2u, v10);
    return 0;
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  sub_244CBAABC((unsigned __int8 *)&dword_268EBD108, a5, &v18);
  BOOL v14 = v18 == 0;
  if (v18)
  {
    uint64_t v16 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v18;
      uint64_t v21 = v19;
      unsigned __int8 v17 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Receive failed, err = %s", buf, 0xCu);
    }
    if (sub_244CC4E58(1u))
    {
      *(_OWORD *)long long buf = v18;
      uint64_t v21 = v19;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(2u, 1);
    }
  }
  return v14;
}

BOOL sub_244CBC694(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    BOOL v6 = sub_244CBD3C4((uint64_t *)&unk_244EAE1F8, a4);
    if (v6)
    {
      sub_244CBC7C4(v6, a2);
      return 1;
    }
    BOOL v9 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Write confirmation on unknown char", v10, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v8 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Write confirmation on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result)
    {
LABEL_11:
      sub_244CC4DE0(2u, 1);
      return 0;
    }
  }
  return result;
}

void sub_244CBC7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 && (qword_268EBD128 ? (BOOL v2 = qword_268EBD140 == a2) : (BOOL v2 = 0), v2))
  {
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    sub_244CBA0CC((uint64_t)&dword_268EBD108, (uint64_t)&v7);
    if (v7)
    {
      uint64_t v5 = sub_244CC8484(2u, "Ble");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = v7;
        uint64_t v10 = v8;
        BOOL v6 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Send ack confirmation failed, err = %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = v7;
        uint64_t v10 = v8;
        sub_244CB7B34((const char **)buf, 1);
        uint64_t v4 = 1;
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v3 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "No endpoint for received ack", buf, 2u);
    }
    if (sub_244CC4E58(3u))
    {
      uint64_t v4 = 3;
LABEL_15:
      sub_244CC4DE0(2u, v4);
    }
  }
}

BOOL sub_244CBC96C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    BOOL v6 = sub_244CBD3C4((uint64_t *)&unk_244EAE1E8, a4);
    if (v6)
    {
      sub_244CBC7C4(v6, a2);
      return 1;
    }
    BOOL v9 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Indication confirmation on unknown char", v10, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v8 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Indication confirmation on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (result)
    {
LABEL_11:
      sub_244CC4DE0(2u, 1);
      return 0;
    }
  }
  return result;
}

BOOL sub_244CBCA9C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    uint64_t v10 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Subscribe received on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
LABEL_20:
    uint64_t v9 = 1;
    goto LABEL_21;
  }
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1E8, a4) && !sub_244CBD3C4((uint64_t *)&unk_244EAE208, a4))
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Subscribe received on unknown char", v13, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  if (a2 && (qword_268EBD128 ? (BOOL v6 = qword_268EBD140 == a2) : (BOOL v6 = 0), v6))
  {
    sub_244CB85B8((uint64_t)&dword_268EBD108);
    return 1;
  }
  else
  {
    long long v7 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "No endpoint for received subscribe", v12, 2u);
    }
    BOOL result = sub_244CC4E58(3u);
    if (result)
    {
      uint64_t v9 = 3;
LABEL_21:
      sub_244CC4DE0(2u, v9);
      return 0;
    }
  }
  return result;
}

BOOL sub_244CBCC6C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    uint64_t v10 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Subscribe complete on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
LABEL_20:
    uint64_t v9 = 1;
    goto LABEL_21;
  }
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1E8, a4) && !sub_244CBD3C4((uint64_t *)&unk_244EAE208, a4))
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Subscribe complete on unknown char", v13, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  if (a2 && (qword_268EBD128 ? (BOOL v6 = qword_268EBD140 == a2) : (BOOL v6 = 0), v6))
  {
    sub_244CB89A4((uint64_t)&dword_268EBD108);
    return 1;
  }
  else
  {
    long long v7 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "No endpoint for subscribe complete", v12, 2u);
    }
    BOOL result = sub_244CC4E58(3u);
    if (result)
    {
      uint64_t v9 = 3;
LABEL_21:
      sub_244CC4DE0(2u, v9);
      return 0;
    }
  }
  return result;
}

BOOL sub_244CBCE3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    uint64_t v10 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Unsubscribe received on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
LABEL_20:
    uint64_t v9 = 1;
    goto LABEL_21;
  }
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1E8, a4) && !sub_244CBD3C4((uint64_t *)&unk_244EAE208, a4))
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Unsubscribe received on unknown char", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  if (a2 && (qword_268EBD128 ? (BOOL v6 = qword_268EBD140 == a2) : (BOOL v6 = 0), v6))
  {
    int v12 = 1028;
    uint64_t v13 = "src/ble/BleLayer.cpp";
    int v14 = 581;
    sub_244CB81DC(&dword_268EBD108, 2, (uint64_t)&v12);
    return 1;
  }
  else
  {
    long long v7 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "No endpoint for unsubscribe received", buf, 2u);
    }
    BOOL result = sub_244CC4E58(3u);
    if (result)
    {
      uint64_t v9 = 3;
LABEL_21:
      sub_244CC4DE0(2u, v9);
      return 0;
    }
  }
  return result;
}

BOOL sub_244CBD030(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1D8, a3))
  {
    uint64_t v10 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Unsubscribe complete on unknown svc", buf, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
LABEL_20:
    uint64_t v9 = 1;
    goto LABEL_21;
  }
  if (!sub_244CBD3C4((uint64_t *)&unk_244EAE1E8, a4) && !sub_244CBD3C4((uint64_t *)&unk_244EAE208, a4))
  {
    uint64_t v11 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_ERROR, "Unsubscribe complete on unknown char", v13, 2u);
    }
    BOOL result = sub_244CC4E58(1u);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  if (a2 && (qword_268EBD128 ? (BOOL v6 = qword_268EBD140 == a2) : (BOOL v6 = 0), v6))
  {
    sub_244CB8C74(&dword_268EBD108);
    return 1;
  }
  else
  {
    long long v7 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "No endpoint for unsubscribe complete", v12, 2u);
    }
    BOOL result = sub_244CC4E58(3u);
    if (result)
    {
      uint64_t v9 = 3;
LABEL_21:
      sub_244CC4DE0(2u, v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_244CBD200(uint64_t a1, uint64_t a2, long long *a3)
{
  if (a2 && (qword_268EBD128 ? (BOOL v3 = qword_268EBD140 == a2) : (BOOL v3 = 0), v3))
  {
    if (*(_DWORD *)a3 == 1030 && sub_244CB8E6C((uint64_t)&dword_268EBD108))
    {
      return sub_244CB8C78((uint64_t)&dword_268EBD108);
    }
    else
    {
      long long v7 = *a3;
      uint64_t v8 = *((void *)a3 + 2);
      return (uint64_t)sub_244CB81DC(&dword_268EBD108, 2, (uint64_t)&v7);
    }
  }
  else
  {
    uint64_t v4 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_INFO, "No endpoint for connection error", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result) {
      return sub_244CC4DE0(2u, 3);
    }
  }
  return result;
}

uint64_t sub_244CBD31C(uint64_t a1)
{
  unsigned int v2 = 0;
  uint64_t result = 0;
  int v4 = 4;
  do
  {
    v4 ^= 4u;
    int v5 = (*(unsigned __int8 *)(a1 + ((unint64_t)v2 >> 1)) >> v4) & 0xF;
    if (v5 == 4 && (int)result < 4)
    {
      uint64_t result = 4;
    }
    else if (!v5)
    {
      return result;
    }
    ++v2;
  }
  while (v2 != 8);
  return result;
}

uint64_t sub_244CBD36C(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v2 + 24))(v2, &v4);
}

BOOL sub_244CBD3C4(uint64_t *a1, void *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    return v5 == *a2 && v4 == a2[1];
  }
  return result;
}

void sub_244CBD3EC(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)a1 = 0;
  long long v7 = *(_WORD **)(a1 + 16);
  if (v7) {
    sub_244CC8A0C(v7);
  }
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 25) = 0;
  *(_WORD *)(a1 + 28) = 20;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v8 = *(_WORD **)(a1 + 40);
  if (v8) {
    sub_244CC8A0C(v8);
  }
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 52) = 20;
  *(_WORD *)(a1 + 49) = 0;
  *(void *)(a1 + 54) = 0;
  *(unsigned char *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 51) = a3;
  *(unsigned char *)(a1 + 24) = a3 ^ 1;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/ble/BtpEngine.cpp";
  *(_DWORD *)(a4 + 16) = 103;
}

uint64_t sub_244CBD488(unsigned __int8 *a1)
{
  uint64_t result = a1[48];
  if (!a1[51])
  {
    a1[51] = 1;
    a1[50] = result;
  }
  a1[49] = result;
  a1[48] = result + 1;
  return result;
}

uint64_t sub_244CBD4B4(unsigned char *a1)
{
  uint64_t v1 = a1[25];
  char v2 = a1[24];
  a1[25] = v2;
  a1[26] = v2;
  return v1;
}

BOOL sub_244CBD4CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_244CBD4E0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a1[51]) {
    return 0;
  }
  unsigned int v2 = a1[49];
  unsigned int v3 = a1[50];
  if (v2 < a2)
  {
    BOOL v4 = v3 >= a2;
    BOOL v5 = v3 == a2;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  unsigned int v6 = v5 || !v4;
  if (v2 >= a2)
  {
    BOOL v7 = v3 >= a2;
    BOOL v8 = v3 == a2;
  }
  else
  {
    BOOL v7 = 1;
    BOOL v8 = 0;
  }
  unsigned int v9 = v8 || !v7;
  if (v2 >= v3) {
    return v9;
  }
  else {
    return v6;
  }
}

unsigned __int8 *sub_244CBD51C@<X0>(unsigned __int8 *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (!result[51]) {
    goto LABEL_14;
  }
  unsigned int v3 = result[49];
  unsigned int v4 = result[50];
  if (v3 >= v4)
  {
    if (v3 >= a2 && v4 <= a2) {
      goto LABEL_7;
    }
LABEL_14:
    int v8 = 168;
    int v6 = 1051;
    goto LABEL_17;
  }
  if (v3 < a2 && v4 > a2) {
    goto LABEL_14;
  }
LABEL_7:
  int v6 = 0;
  if (v3 == a2)
  {
    result[50] = a2;
    result[51] = 0;
  }
  else
  {
    result[50] = a2 + 1;
  }
  int v8 = 184;
LABEL_17:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/ble/BtpEngine.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CBD598@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC8E14((void *)*a2, 0);
  if (!result)
  {
    int v12 = 192;
LABEL_8:
    int v11 = 11;
    goto LABEL_9;
  }
  unint64_t result = sub_244CC8ACC(*a2);
  if (result < 3)
  {
    int v12 = 195;
    goto LABEL_8;
  }
  BOOL v7 = *(unsigned char **)(*a2 + 8);
  *BOOL v7 = 8;
  char v8 = a1[25];
  char v9 = a1[24];
  a1[25] = v9;
  a1[26] = v9;
  v7[1] = v8;
  char v10 = a1[48];
  if (!a1[51])
  {
    a1[51] = 1;
    a1[50] = v10;
  }
  a1[49] = v10;
  a1[48] = v10 + 1;
  void v7[2] = v10;
  unint64_t result = sub_244CC8AE4(*a2, 3uLL, 0);
  int v11 = 0;
  int v12 = 211;
LABEL_9:
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = "src/ble/BtpEngine.cpp";
  *(_DWORD *)(a3 + 16) = v12;
  return result;
}

void *sub_244CBD674@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  *(_OWORD *)a5 = xmmword_26519C230;
  *(void *)(a5 + 16) = 230;
  unsigned __int8 v32 = 0;
  uint64_t v10 = *a2;
  if (*a2)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(void *)(v10 + 24);
    *(void *)long long buf = v11;
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v12;
    LODWORD(v34) = 0;
    *((void *)&v34 + 1) = "src/lib/support/BufferReader.h";
    LODWORD(v35) = 330;
    if (!v11) {
      *(void *)&uint8_t buf[16] = 0;
    }
    ++*(_WORD *)(a1 + 54);
    sub_244CC5424((uint64_t)buf, &v32);
    *(_OWORD *)a5 = v34;
    *(void *)(a5 + 16) = v35;
    if (*(_DWORD *)a5) {
      goto LABEL_13;
    }
    unsigned __int8 v13 = v32;
    *a4 = (v32 & 8) != 0;
    if ((v13 & 8) != 0)
    {
      sub_244CC5424((uint64_t)buf, a3);
      *(_OWORD *)a5 = v34;
      *(void *)(a5 + 16) = v35;
      if (*(_DWORD *)a5) {
        goto LABEL_13;
      }
      sub_244CBD51C((unsigned __int8 *)a1, *a3, a5);
      if (*(_DWORD *)a5) {
        goto LABEL_13;
      }
    }
    unint64_t result = (void *)sub_244CC5424((uint64_t)buf, (unsigned char *)(a1 + 25));
    *(_OWORD *)a5 = v34;
    *(void *)(a5 + 16) = v35;
    if (*(_DWORD *)a5) {
      goto LABEL_13;
    }
    int v15 = *(unsigned __int8 *)(a1 + 25);
    if (v15 == *(unsigned __int8 *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = v15 + 1;
      if ((v32 & 7) == 0) {
        return result;
      }
      unint64_t v16 = *(unsigned __int16 *)(a1 + 28);
      if (*(void *)&buf[8] - *(void *)buf <= v16)
      {
        if (*(void *)(*a2 + 24) >= v16) {
          unint64_t v25 = *(unsigned __int16 *)(a1 + 28);
        }
        else {
          unint64_t v25 = *(void *)(*a2 + 24);
        }
        sub_244CC8AE4(*a2, v25, 0);
        sub_244CC8CC8((void *)*a2, (unsigned __int16)(*(_WORD *)&buf[8] - *(_WORD *)buf));
        if (*(_DWORD *)a1 == 1)
        {
          if (v32)
          {
            *(_DWORD *)a5 = 1053;
            *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            int v17 = 318;
            goto LABEL_12;
          }
          if ((v32 & 6) == 0)
          {
            *(_DWORD *)a5 = 1053;
            *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            int v17 = 322;
            goto LABEL_12;
          }
          sub_244CC8B70(*(void **)(a1 + 16), a2);
          sub_244CC8BB4(*(uint64_t **)(a1 + 16));
          unint64_t result = *(void **)(a1 + 16);
          if (*result)
          {
            *(_DWORD *)a5 = 194;
            *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            int v17 = 330;
            goto LABEL_12;
          }
        }
        else
        {
          if (*(_DWORD *)a1)
          {
            *(_DWORD *)a5 = 1055;
            *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            int v17 = 334;
            goto LABEL_12;
          }
          uint64_t v26 = *(void *)(*a2 + 24);
          *(void *)long long buf = *(void *)(*a2 + 8);
          *(void *)&uint8_t buf[8] = *(void *)buf;
          *(void *)&uint8_t buf[16] = v26;
          LODWORD(v34) = 0;
          *((void *)&v34 + 1) = "src/lib/support/BufferReader.h";
          LODWORD(v35) = 330;
          if (!*(void *)buf) {
            *(void *)&uint8_t buf[16] = 0;
          }
          if ((v32 & 1) == 0)
          {
            int v17 = 294;
            int v18 = 1053;
            goto LABEL_36;
          }
          sub_244CC54EC((uint64_t)buf, (_WORD *)(a1 + 4));
          *(_OWORD *)a5 = v34;
          *(void *)(a5 + 16) = v35;
          if (*(_DWORD *)a5) {
            goto LABEL_13;
          }
          *(_DWORD *)a1 = 1;
          sub_244CC8CC8((void *)*a2, (unsigned __int16)(*(_WORD *)&buf[8] - *(_WORD *)buf));
          sub_244CC8F5C(0x609uLL, 0x26u, &v31);
          int v27 = *(_WORD **)(a1 + 16);
          if (v27) {
            sub_244CC8A0C(v27);
          }
          uint64_t v28 = v31;
          *(void *)(a1 + 16) = v31;
          if (!v28)
          {
            int v17 = 306;
            int v18 = 11;
            goto LABEL_36;
          }
          sub_244CC8B70(v28, a2);
          sub_244CC8BB4(*(uint64_t **)(a1 + 16));
          unint64_t result = *(void **)(a1 + 16);
          if (*result)
          {
            int v17 = 313;
            int v18 = 194;
            goto LABEL_36;
          }
        }
        if ((v32 & 4) == 0) {
          return result;
        }
        unint64_t v29 = result[3];
        if (v29 >= 0x10000)
        {
          *(_DWORD *)a5 = 4;
          *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
          int v17 = 341;
        }
        else
        {
          unint64_t v30 = *(unsigned __int16 *)(a1 + 4);
          if (v29 > v30)
          {
            unint64_t result = (void *)sub_244CC8AE4((uint64_t)result, v30, 0);
            unint64_t v29 = *(void *)(*(void *)(a1 + 16) + 24);
            LODWORD(v30) = *(unsigned __int16 *)(a1 + 4);
          }
          if (v29 == v30)
          {
            *(_DWORD *)a1 = 2;
            ++*(_WORD *)(a1 + 56);
            return result;
          }
          *(_DWORD *)a5 = 1052;
          *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
          int v17 = 350;
        }
        goto LABEL_12;
      }
      int v17 = 276;
      int v18 = 1055;
    }
    else
    {
      int v17 = 262;
      int v18 = 1054;
    }
LABEL_36:
    *(_DWORD *)a5 = v18;
    *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
    goto LABEL_12;
  }
  *(_DWORD *)a5 = 47;
  *(void *)(a5 + 8) = "src/ble/BtpEngine.cpp";
  int v17 = 233;
LABEL_12:
  *(_DWORD *)(a5 + 16) = v17;
LABEL_13:
  *(_DWORD *)a1 = 3;
  uint64_t v19 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a5;
    *(void *)&uint8_t buf[16] = *(void *)(a5 + 16);
    uint64_t v20 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v32;
    _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "HandleCharacteristicReceived failed, err = %s, rx_flags = %u", buf, 0x12u);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a5;
    *(void *)&uint8_t buf[16] = *(void *)(a5 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(2u, 1);
  }
  if (*a4)
  {
    uint64_t v21 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v22 = *a3;
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_2446BD000, v21, OS_LOG_TYPE_ERROR, "With rx'd ack = %u", buf, 8u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
  }
  if (*(void *)(a1 + 16))
  {
    int v23 = sub_244CC8484(2u, "Ble");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(*(void *)(a1 + 16) + 24);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v24;
      _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_ERROR, "With rx buf data length = %u", buf, 8u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(2u, 1);
    }
  }
  unint64_t result = (void *)sub_244CBDCD0((int *)a1);
  if (*a2)
  {
    unint64_t result = *(void **)(a1 + 16);
    if (result)
    {
      return sub_244CC8B70(result, a2);
    }
    else
    {
      *(void *)(a1 + 16) = *a2;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t sub_244CBDCD0(int *a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned int v2 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)a1 + 1);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v38 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "mAppState: %p", buf, 0xCu);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  unsigned int v4 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *((unsigned __int16 *)a1 + 14);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v5;
    _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "mRxFragmentSize: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  int v6 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v7 = *a1;
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "mRxState: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  char v8 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    BOOL v9 = *((void *)a1 + 2) != 0;
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v9;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "mRxBuf: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  uint64_t v10 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = *((unsigned __int8 *)a1 + 24);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v11;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "mRxNextSeqNum: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  uint64_t v12 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v13 = *((unsigned __int8 *)a1 + 25);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v13;
    _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "mRxNewestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  int v14 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    int v15 = *((unsigned __int8 *)a1 + 26);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v15;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "mRxOldestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  unint64_t v16 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    int v17 = *((unsigned __int16 *)a1 + 27);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v17;
    _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "mRxCharCount: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  int v18 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    int v19 = *((unsigned __int16 *)a1 + 28);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v19;
    _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_ERROR, "mRxPacketCount: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  uint64_t v20 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    int v21 = *((unsigned __int16 *)a1 + 26);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v21;
    _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_ERROR, "mTxFragmentSize: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  int v22 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    int v23 = a1[8];
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v23;
    _os_log_impl(&dword_2446BD000, v22, OS_LOG_TYPE_ERROR, "mTxState: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  uint64_t v24 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    BOOL v25 = *((void *)a1 + 5) != 0;
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v25;
    _os_log_impl(&dword_2446BD000, v24, OS_LOG_TYPE_ERROR, "mTxBuf: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  uint64_t v26 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    int v27 = *((unsigned __int8 *)a1 + 48);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v27;
    _os_log_impl(&dword_2446BD000, v26, OS_LOG_TYPE_ERROR, "mTxNextSeqNum: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  uint64_t v28 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    int v29 = *((unsigned __int8 *)a1 + 49);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v29;
    _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "mTxNewestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  unint64_t v30 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    int v31 = *((unsigned __int8 *)a1 + 50);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v31;
    _os_log_impl(&dword_2446BD000, v30, OS_LOG_TYPE_ERROR, "mTxOldestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  unsigned __int8 v32 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    int v33 = *((unsigned __int16 *)a1 + 29);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v33;
    _os_log_impl(&dword_2446BD000, v32, OS_LOG_TYPE_ERROR, "mTxCharCount: %d", buf, 8u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(2u, 1);
  }
  long long v34 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    int v35 = *((unsigned __int16 *)a1 + 30);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v38) = v35;
    _os_log_impl(&dword_2446BD000, v34, OS_LOG_TYPE_ERROR, "mTxPacketCount: %d", buf, 8u);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result) {
    return sub_244CC4DE0(2u, 1);
  }
  return result;
}

uint64_t sub_244CBE590@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)result == 2) {
    *(_DWORD *)uint64_t result = 0;
  }
  *a2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  return result;
}

BOOL sub_244CBE5B0(uint64_t a1, uint64_t *a2, int a3)
{
  ++*(_WORD *)(a1 + 58);
  if (!a3 || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a1 + 24))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 == 1)
    {
      if (*a2) {
        return 0;
      }
      uint64_t v20 = *(void **)(a1 + 40);
      uint64_t v21 = -3;
      if (!a3) {
        uint64_t v21 = -2;
      }
      int v15 = (char *)(v20[1] + *(unsigned __int16 *)(a1 + 52) + v21);
      sub_244CC8A78(v20, (unint64_t)v15);
      if (a3)
      {
        char v22 = *(unsigned char *)(a1 + 25);
        char v23 = *(unsigned char *)(a1 + 24);
        *(unsigned char *)(a1 + 25) = v23;
        *(unsigned char *)(a1 + 26) = v23;
        v15[1] = v22;
        unsigned int v24 = 2;
        char v19 = 10;
      }
      else
      {
        unsigned int v24 = 1;
        char v19 = 2;
      }
      char v25 = *(unsigned char *)(a1 + 48);
      if (!*(unsigned char *)(a1 + 51))
      {
        *(unsigned char *)(a1 + 51) = 1;
        *(unsigned char *)(a1 + 50) = v25;
      }
      *(unsigned char *)(a1 + 49) = v25;
      *(unsigned char *)(a1 + 48) = v25 + 1;
      v15[v24] = v25;
      unsigned int v26 = v24 + 1;
    }
    else
    {
      if (v8) {
        return 0;
      }
      uint64_t v9 = *a2;
      if (!*a2) {
        return 0;
      }
      uint64_t v10 = *(_WORD **)(a1 + 40);
      if (v10)
      {
        sub_244CC8A0C(v10);
        uint64_t v9 = *a2;
      }
      *(void *)(a1 + 40) = v9;
      *a2 = 0;
      *(_DWORD *)(a1 + 32) = 1;
      int v11 = *(void **)(a1 + 40);
      unint64_t v12 = v11[3];
      if (v12 >> 16) {
        return 0;
      }
      *(_WORD *)(a1 + 36) = v12;
      if (a3) {
        unsigned int v13 = 5;
      }
      else {
        unsigned int v13 = 4;
      }
      if ((sub_244CC8E14(v11, v13) & 1) == 0)
      {
        int v27 = sub_244CC8484(2u, "Ble");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v34[0] = 0;
          _os_log_impl(&dword_2446BD000, v27, OS_LOG_TYPE_ERROR, "HandleCharacteristicSend: not enough headroom", (uint8_t *)v34, 2u);
        }
        if (sub_244CC4E58(1u)) {
          sub_244CC4DE0(2u, 1);
        }
        *(_DWORD *)(a1 + 32) = 3;
        uint64_t v28 = *(_WORD **)(a1 + 40);
        if (v28) {
          sub_244CC8A0C(v28);
        }
        BOOL result = 0;
        *(void *)(a1 + 40) = 0;
        return result;
      }
      int v14 = *(void **)(a1 + 40);
      int v15 = (char *)(v14[1] - v13);
      sub_244CC8A78(v14, (unint64_t)v15);
      if (a3)
      {
        char v16 = *(unsigned char *)(a1 + 25);
        char v17 = *(unsigned char *)(a1 + 24);
        *(unsigned char *)(a1 + 25) = v17;
        *(unsigned char *)(a1 + 26) = v17;
        v15[1] = v16;
        unsigned int v18 = 2;
        char v19 = 9;
      }
      else
      {
        char v19 = 1;
        unsigned int v18 = 1;
      }
      char v29 = *(unsigned char *)(a1 + 48);
      if (!*(unsigned char *)(a1 + 51))
      {
        *(unsigned char *)(a1 + 51) = 1;
        *(unsigned char *)(a1 + 50) = v29;
      }
      *(unsigned char *)(a1 + 49) = v29;
      *(unsigned char *)(a1 + 48) = v29 + 1;
      unint64_t v30 = &v15[v18];
      char *v30 = v29;
      v30[1] = *(unsigned char *)(a1 + 36);
      unsigned int v26 = v18 + 3;
      v30[2] = *(unsigned char *)(a1 + 37);
    }
    unint64_t v31 = *(unsigned __int16 *)(a1 + 52);
    uint64_t v32 = *(void *)(a1 + 40);
    if (*(unsigned __int16 *)(a1 + 36) + v26 <= v31)
    {
      sub_244CC8AE4(v32, (unsigned __int16)(*(_WORD *)(a1 + 36) + v26), 0);
      __int16 v33 = 0;
      v19 |= 4u;
      *(_DWORD *)(a1 + 32) = 2;
      ++*(_WORD *)(a1 + 60);
    }
    else
    {
      sub_244CC8AE4(v32, v31, 0);
      __int16 v33 = *(_WORD *)(a1 + 36) + v26 - *(_WORD *)(a1 + 52);
    }
    *(_WORD *)(a1 + 36) = v33;
    char *v15 = v19;
    return 1;
  }
  int v6 = sub_244CC8484(2u, "Ble");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "HandleCharacteristicSend: send_ack true, but nothing to acknowledge.", buf, 2u);
  }
  BOOL result = sub_244CC4E58(1u);
  if (result)
  {
    sub_244CC4DE0(2u, 1);
    return 0;
  }
  return result;
}

uint64_t sub_244CBE8DC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(result + 32) == 2) {
    *(_DWORD *)(result + 32) = 0;
  }
  *a2 = *(void *)(result + 40);
  *(void *)(result + 40) = 0;
  return result;
}

const char *sub_244CBE8FC(_DWORD *a1, char *a2, socklen_t a3)
{
  if (sub_244CBEC68(a1))
  {
    int v6 = a1 + 3;
    int v7 = 2;
  }
  else
  {
    int v7 = 30;
    int v6 = a1;
  }

  return inet_ntop(v7, v6, a2, a3);
}

uint64_t sub_244CBE960(char *a1, __n128 *a2)
{
  if (strchr(a1, 58))
  {
    if (inet_pton(30, a1, &v7) >= 1)
    {
      sub_244CBEBE8(&v6, &v7);
      __n128 v4 = v6;
LABEL_6:
      *a2 = v4;
      return 1;
    }
  }
  else if (inet_pton(2, a1, &v6) >= 1)
  {
    sub_244CBEBD0((uint64_t)&v7, &v6);
    __n128 v4 = v7;
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_244CBE9FC(void *__src, size_t __n, __n128 *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (__n > 0x2D) {
    return 0;
  }
  memcpy(__dst, __src, __n);
  __dst[__n] = 0;
  return sub_244CBE960(__dst, a3);
}

uint64_t sub_244CBEA90(char *a1, __n128 *a2, _DWORD *a3)
{
  __lasts = 0;
  __n128 v6 = strtok_r(a1, "%", &__lasts);
  if (v6 && (uint64_t v7 = v6, (v8 = strtok_r(0, "%", &__lasts)) != 0))
  {
    memset(v11, 0, sizeof(v11));
    sub_244CBF474(v8, a3, (uint64_t)v11);
    if (LODWORD(v11[0])) {
      return 0;
    }
    uint64_t v10 = v7;
  }
  else
  {
    *a3 = 0;
    uint64_t v10 = a1;
  }
  return sub_244CBE960(v10, a2);
}

BOOL sub_244CBEB38(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL sub_244CBEB84(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2] || a1[3] != a2[3];
}

uint64_t sub_244CBEBD0(uint64_t result, _DWORD *a2)
{
  *(void *)BOOL result = 0;
  *(_DWORD *)(result + 8) = -65536;
  *(_DWORD *)(result + 12) = *a2;
  return result;
}

__n128 sub_244CBEBE8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_244CBEBF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_244CBEBFC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_244CBEC08@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 1);
  if (v3 == 30)
  {
    uint64_t v4 = *(void *)(result + 8);
    unint64_t v5 = *(void *)(result + 16);
    int v6 = 248;
  }
  else
  {
    if (v3 != 2)
    {
      int v6 = 250;
      int v7 = 257;
      goto LABEL_7;
    }
    uint64_t v4 = 0;
    unint64_t v5 = ((unint64_t)*(unsigned int *)(result + 4) << 32) | 0xFFFF0000;
    int v6 = 242;
  }
  int v7 = 0;
  *a2 = v4;
  a2[1] = v5;
LABEL_7:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/inet/IPAddress.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

BOOL sub_244CBEC68(_DWORD *a1)
{
  return !*a1 && !a1[1] && a1[2] == -65536;
}

BOOL sub_244CBEC90(_DWORD *a1)
{
  return !*a1 && !a1[1] && a1[2] == -65536 && (a1[3] & 0xF0) == 224;
}

BOOL sub_244CBECC8(_DWORD *a1)
{
  return !*a1 && !a1[1] && a1[2] == -65536 && a1[3] == -1;
}

BOOL sub_244CBECFC(uint64_t a1)
{
  if (*(unsigned char *)a1 == 0xFF) {
    return 1;
  }
  if (*(_DWORD *)a1 || *(_DWORD *)(a1 + 4) || *(_DWORD *)(a1 + 8) != -65536) {
    return 0;
  }
  return (*(_DWORD *)(a1 + 12) & 0xF0) == 224;
}

BOOL sub_244CBED48(unsigned __int8 *a1)
{
  return *a1 == 0xFF;
}

BOOL sub_244CBED5C(uint64_t a1)
{
  if (*(_DWORD *)a1 == xmmword_268EC34EC
    && *(void *)(a1 + 4) == *(void *)((char *)&xmmword_268EC34EC + 4)
    && *(_DWORD *)(a1 + 12) == HIDWORD(xmmword_268EC34EC))
  {
    return 0;
  }
  if (*(_DWORD *)a1 || *(_DWORD *)(a1 + 4)) {
    return 1;
  }
  return *(_DWORD *)(a1 + 8) != -65536;
}

BOOL sub_244CBEDD8(_DWORD *a1)
{
  return (*a1 & 0xE0) == 32;
}

BOOL sub_244CBEDEC(_DWORD *a1)
{
  return (*a1 & 0xFE) == 252;
}

BOOL sub_244CBEE00(_DWORD *a1)
{
  return *a1 == 33022 && a1[1] == 0;
}

unint64_t sub_244CBEE28(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0xFE) == 0xFC) {
    return bswap64(*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t sub_244CBEE4C(_DWORD *a1)
{
  if ((*a1 & 0xFE) == 0xFC) {
    return (unsigned __int16)bswap32(a1[1]);
  }
  else {
    return 0;
  }
}

unint64_t sub_244CBEE74(_DWORD *a1)
{
  if ((*a1 & 0xFE) == 0xFC) {
    return (bswap32(a1[1]) >> 16) | ((unint64_t)bswap32(*a1 & 0xFFFFFF00) << 16);
  }
  else {
    return 0;
  }
}

uint64_t sub_244CBEEA8(_DWORD *a1)
{
  if (*a1 || a1[1]) {
    return 2;
  }
  if (a1[2] || a1[3])
  {
    if (a1[2] == -65536) {
      return 1;
    }
    return 2;
  }
  return 3;
}

__n128 sub_244CBEEEC(__n128 *a1, _OWORD **a2)
{
  __n128 result = *a1;
  *(*a2)++ = *a1;
  return result;
}

__n128 sub_244CBEF08(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  *a2 = result;
  ++*a1;
  return result;
}

unint64_t sub_244CBEF24(unint64_t a1, unsigned __int16 a2)
{
  return bswap64(a2 | (unint64_t)((unsigned __int16)a1 << 16) | (((a1 >> 16) & 0xFFFFFF) << 32) | 0xFD00000000000000);
}

uint64_t sub_244CBEF48()
{
  return 33022;
}

unint64_t sub_244CBEF54(int a1, char a2, unsigned __int16 *a3)
{
  return bswap64(bswap32(*(_DWORD *)(a3 + 1)) | ((unint64_t)((a1 << 20) | ((a2 & 0xF) << 16) | (bswap32(*a3) >> 16)) << 32) | 0xFF00000000000000);
}

unint64_t sub_244CBEF84(unsigned __int8 a1, char a2, unsigned int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  __int16 v5 = 0;
  uint64_t v4 = 0;
  unsigned int v6 = bswap32(a3);
  return sub_244CBEF54(a1, a2, (unsigned __int16 *)&v4);
}

unint64_t sub_244CBEFE8(char a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  __int16 v4 = 0;
  uint64_t v3 = 0;
  unsigned int v5 = bswap32(a2);
  return sub_244CBEF54(0, a1, (unsigned __int16 *)&v3);
}

unint64_t sub_244CBF054(char a1, char a2, unsigned __int16 *a3)
{
  return sub_244CBEF54(a1 & 0xFE | 1u, a2, a3);
}

unint64_t sub_244CBF060(char a1, char a2, uint64_t *a3, int a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  HIBYTE(v6) = a2;
  uint64_t v4 = *a3;
  char v7 = HIBYTE(*a3);
  char v8 = BYTE6(v4);
  char v9 = BYTE5(v4);
  char v10 = BYTE4(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE2(v4);
  char v13 = BYTE1(v4);
  char v14 = v4;
  char v15 = HIBYTE(a4);
  char v16 = BYTE2(a4);
  char v17 = BYTE1(a4);
  char v18 = a4;
  return sub_244CBEF54(3, a1, &v6);
}

uint64_t sub_244CBF120()
{
  return 0;
}

uint64_t sub_244CBF12C()
{
  return 0;
}

double sub_244CBF148(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_268EC34EC;
  double result = *(double *)&xmmword_268EC34EC;
  *(_OWORD *)(a1 + 16) = xmmword_268EC34EC;
  *(void *)(a1 + 32) = 0;
  return result;
}

BOOL sub_244CBF168(uint64_t a1)
{
  return !*(_DWORD *)a1
      && !*(_DWORD *)(a1 + 4)
      && !*(_DWORD *)(a1 + 8)
      && !*(_DWORD *)(a1 + 12)
      && *(unsigned char *)(a1 + 16) == 0;
}

BOOL sub_244CBF1A0(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_244CBEB38((_DWORD *)a1, (_DWORD *)a2);
  if (result) {
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return result;
}

BOOL sub_244CBF1DC(uint64_t a1, uint64_t a2)
{
  return sub_244CBEB84((_DWORD *)a1, (_DWORD *)a2) || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16);
}

BOOL sub_244CBF220(uint64_t a1, int *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 >= 0x80) {
    unsigned int v2 = 128;
  }
  if (v2 < 0x20)
  {
    uint64_t v3 = 0;
    return !(_BYTE)v2 || ((a2[v3] ^ *(_DWORD *)(a1 + 4 * v3)) & bswap32(-1 << (32 - v2))) == 0;
  }
  else
  {
    uint64_t v3 = ((v2 - 32) >> 5) + 1;
    uint64_t v4 = v3;
    unsigned int v5 = (int *)a1;
    unsigned __int16 v6 = a2;
    while (1)
    {
      int v8 = *v5++;
      int v7 = v8;
      int v9 = *v6++;
      if (v7 != v9) {
        return 0;
      }
      LOBYTE(v2) = v2 - 32;
      if (!--v4) {
        return !(_BYTE)v2 || ((a2[v3] ^ *(_DWORD *)(a1 + 4 * v3)) & bswap32(-1 << (32 - v2))) == 0;
      }
    }
  }
}

void *sub_244CBF2B4()
{
  return sub_244CB7CA0(&off_26BA163D0);
}

BOOL sub_244CBF2C0(char *a1, size_t a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)a3 & 0xFF000700;
  if (v3 == 256)
  {
    unsigned int v4 = *(_DWORD *)a3 - 257;
    if (v4 > 0x1A) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = off_26519C248[v4];
    }
    long long v7 = *a3;
    uint64_t v8 = *((void *)a3 + 2);
    sub_244CB7C34(a1, a2, "Inet", &v7, v5);
  }
  return v3 == 256;
}

unint64_t sub_244CBF340@<X0>(unsigned int *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = *a1;
  if (result)
  {
    if (!if_indextoname(result, __s))
    {
      int v9 = __error();
      return sub_244CC8788(*v9, "src/inet/InetInterface.cpp", 446, a4);
    }
    unint64_t result = strlen(__s);
    if (result >= a3)
    {
      *(_DWORD *)a4 = 25;
      *(void *)(a4 + 8) = "src/inet/InetInterface.cpp";
      int v8 = 451;
    }
    else
    {
      if (a2)
      {
        unint64_t result = (unint64_t)strncpy(a2, __s, a3);
        a2[a3 - 1] = 0;
      }
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/inet/InetInterface.cpp";
      int v8 = 454;
    }
  }
  else if (a3)
  {
    *a2 = 0;
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/inet/InetInterface.cpp";
    int v8 = 461;
  }
  else
  {
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/inet/InetInterface.cpp";
    int v8 = 458;
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t sub_244CBF474@<X0>(const char *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __endptr = 0;
  uint64_t result = strtoul(a1, &__endptr, 10);
  if (!*__endptr)
  {
    if ((unint64_t)(result - 1) > 0xFD)
    {
      *(_DWORD *)a3 = 270;
      *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
      int v7 = 477;
    }
    else
    {
      *a2 = result;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
      int v7 = 474;
    }
    goto LABEL_9;
  }
  uint64_t result = if_nametoindex(a1);
  *a2 = result;
  if (result)
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
    int v7 = 487;
LABEL_9:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 6)
  {
    *(_DWORD *)a3 = 270;
    *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
    int v7 = 485;
    goto LABEL_9;
  }
  uint64_t v8 = *__error();

  return sub_244CC8788(v8, "src/inet/InetInterface.cpp", 485, a3);
}

uint64_t sub_244CBF59C()
{
  if (dword_268EBD1A8 == -1)
  {
    int v0 = socket(2, 1, 0);
    fcntl(v0, 2, 0x1000000);
    int v1 = -1;
    atomic_compare_exchange_strong(&dword_268EBD1A8, (unsigned int *)&v1, v0);
    if (v1 != -1) {
      close(v0);
    }
  }
  return dword_268EBD1A8;
}

uint64_t sub_244CBF618()
{
  uint64_t result = dword_268EBD1A8;
  if (dword_268EBD1A8 != -1)
  {
    uint64_t result = close(dword_268EBD1A8);
    dword_268EBD1A8 = -1;
  }
  return result;
}

uint64_t sub_244CBF650(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 15) = 0;
  return result;
}

void *sub_244CBF65C(void *result)
{
  if (*result) {
    sub_244CC4CF8();
  }
  return result;
}

if_nameindex *sub_244CBF690(void *a1)
{
  if (*a1) {
    return (if_nameindex *)(*(_DWORD *)(*a1 + 16 * a1[1]) != 0);
  }
  else {
    return sub_244CBF6B4((uint64_t)a1);
  }
}

if_nameindex *sub_244CBF6B4(uint64_t a1)
{
  uint64_t result = *(if_nameindex **)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (result[v3].if_index)
    {
      *(void *)(a1 + 8) = v3 + 1;
      *(_WORD *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 18) = 0;
    }
  }
  else
  {
    uint64_t result = j__if_nameindex();
    *(void *)a1 = result;
    if (!result) {
      return result;
    }
  }
  return (if_nameindex *)(result[*(void *)(a1 + 8)].if_index != 0);
}

if_nameindex *sub_244CBF720@<X0>(if_nameindex *result@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v2 = result;
  uint64_t v4 = *(void *)&result->if_index;
  if (!*(void *)&result->if_index)
  {
    uint64_t result = sub_244CBF6B4((uint64_t)result);
    if (!result)
    {
      int v5 = 0;
      goto LABEL_6;
    }
    uint64_t v4 = *(void *)&v2->if_index;
  }
  int v5 = *(_DWORD *)(v4 + 16 * (uint64_t)v2->if_name);
LABEL_6:
  *a2 = v5;
  return result;
}

uint64_t *sub_244CBF774@<X0>(uint64_t *result@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int16 v6 = result;
  uint64_t v8 = *result;
  if (*result)
  {
    uint64_t v9 = result[1];
    if (!*(_DWORD *)(v8 + 16 * v9)) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)sub_244CBF6B4((uint64_t)result);
    if (!result)
    {
LABEL_9:
      int v12 = 581;
      int v11 = 3;
      goto LABEL_13;
    }
    uint64_t v8 = *v6;
    uint64_t v9 = v6[1];
  }
  char v10 = *(const char **)(v8 + 16 * v9 + 8);
  uint64_t result = (uint64_t *)strlen(v10);
  if ((unint64_t)result >= a3)
  {
    int v12 = 582;
    int v11 = 25;
  }
  else
  {
    if (a2)
    {
      uint64_t result = (uint64_t *)strncpy(a2, v10, a3);
      int v11 = 0;
      a2[a3 - 1] = 0;
    }
    else
    {
      int v11 = 0;
    }
    int v12 = 584;
  }
LABEL_13:
  *(_DWORD *)a4 = v11;
  *(void *)(a4 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_244CBF844(uint64_t a1)
{
  return sub_244CBF860(a1) & 1;
}

uint64_t sub_244CBF860(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 18))
  {
    uint64_t v3 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (!*(_DWORD *)(v3 + 16 * v4)) {
        return *(__int16 *)(a1 + 16);
      }
    }
    else
    {
      if (!sub_244CBF6B4(a1)) {
        return *(__int16 *)(a1 + 16);
      }
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
    }
    strncpy(__dst, *(const char **)(v3 + 16 * v4 + 8), 0x10uLL);
    __dst[15] = 0;
    int v5 = sub_244CBF59C();
    if (!ioctl(v5, 0xC0206911uLL, __dst))
    {
      *(_WORD *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 18) = 1;
    }
  }
  return *(__int16 *)(a1 + 16);
}

uint64_t sub_244CBF934(uint64_t a1)
{
  return (sub_244CBF860(a1) >> 3) & 1;
}

uint64_t sub_244CBF950(uint64_t a1)
{
  return (sub_244CBF860(a1) >> 15) & 1;
}

uint64_t sub_244CBF96C(uint64_t a1)
{
  return (sub_244CBF860(a1) >> 1) & 1;
}

void sub_244CBF988(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a1 + 16) = 631;
}

void sub_244CBF9A8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a1 + 16) = 636;
}

void *sub_244CBF9C8(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

void *sub_244CBF9D0(void *a1)
{
  if (*a1)
  {
    MEMORY[0x245696460]();
    *a1 = 0;
    a1[1] = 0;
  }
  return a1;
}

uint64_t sub_244CBFA04(uint64_t a1)
{
  if (*(void *)a1) {
    return *(void *)(a1 + 8) != 0;
  }
  else {
    return sub_244CBFA20((ifaddrs **)a1);
  }
}

uint64_t sub_244CBFA20(ifaddrs **a1)
{
  unsigned int v2 = *a1;
  while (1)
  {
    if (v2)
    {
      uint64_t v3 = a1[1];
      if (!v3) {
        return 0;
      }
      ifa_next = v3->ifa_next;
    }
    else
    {
      if (getifaddrs(a1) < 0) {
        return 0;
      }
      ifa_next = *a1;
      unsigned int v2 = *a1;
    }
    a1[1] = ifa_next;
    if (!ifa_next) {
      break;
    }
    ifa_addr = ifa_next->ifa_addr;
    if (ifa_addr)
    {
      int sa_family = ifa_addr->sa_family;
      if (sa_family == 30 || sa_family == 2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_244CBFA98@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if (*(void *)result)
  {
    uint64_t v6 = *(void *)(result + 8);
    if (!v6) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = sub_244CBFA20((ifaddrs **)result);
    if (!result)
    {
LABEL_9:
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
      *(_DWORD *)(a3 + 16) = 696;
      return result;
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = *(void *)(v6 + 24);

  return sub_244CBEC08(v7, a2, a3);
}

uint64_t sub_244CBFB34(ifaddrs **a1)
{
  if (*a1)
  {
    unsigned int v2 = a1[1];
    if (!v2) {
      return 0;
    }
  }
  else
  {
    if (!sub_244CBFA20(a1)) {
      return 0;
    }
    unsigned int v2 = a1[1];
  }
  int sa_family = v2->ifa_addr->sa_family;
  if (sa_family == 2)
  {
    uint64_t v4 = (unsigned __int8 *)&v2->ifa_netmask->sa_data[2];
    unsigned int v5 = 4;
    goto LABEL_11;
  }
  if (sa_family != 30) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 *)&v2->ifa_netmask->sa_data[6];
  unsigned int v5 = 16;
LABEL_11:

  return sub_244CBFBCC(v4, v5);
}

uint64_t sub_244CBFBCC(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    int v2 = 0;
    LOBYTE(v3) = 8 * a2;
    uint64_t v4 = a2;
    while (1)
    {
      unsigned int v6 = *a1++;
      unsigned int v5 = v6;
      if (v6 != 255) {
        break;
      }
      v2 += 8;
      if (!--v4) {
        return v3;
      }
    }
    int v7 = v2 | 4;
    if (v5 > 0xEF)
    {
      unsigned int v8 = v5;
    }
    else
    {
      int v7 = v2;
      unsigned int v8 = v5 >> 4;
    }
    if ((~v8 & 0xC) != 0) {
      v8 >>= 2;
    }
    else {
      v7 |= 2u;
    }
    return ((v8 >> 1) & 1 | v7);
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

uint64_t sub_244CBFC3C@<X0>(ifaddrs **a1@<X0>, _DWORD *a2@<X8>)
{
  if (!*a1)
  {
    uint64_t result = sub_244CBFA20(a1);
    if (!result) {
      goto LABEL_7;
    }
    uint64_t v4 = a1[1];
LABEL_6:
    uint64_t result = if_nametoindex(v4->ifa_name);
    goto LABEL_7;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    goto LABEL_6;
  }
  uint64_t result = 0;
LABEL_7:
  *a2 = result;
  return result;
}

unint64_t sub_244CBFC94@<X0>(unint64_t result@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = result;
  if (*(void *)result)
  {
    uint64_t v8 = *(void *)(result + 8);
    if (!v8) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = sub_244CBFA20((ifaddrs **)result);
    if (!result)
    {
LABEL_9:
      int v11 = 730;
      int v10 = 3;
      goto LABEL_13;
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = *(const char **)(v8 + 8);
  uint64_t result = strlen(v9);
  if (result >= a3)
  {
    int v11 = 731;
    int v10 = 25;
  }
  else
  {
    if (a2)
    {
      uint64_t result = (unint64_t)strncpy(a2, v9, a3);
      int v10 = 0;
      a2[a3 - 1] = 0;
    }
    else
    {
      int v10 = 0;
    }
    int v11 = 733;
  }
LABEL_13:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_244CBFD58(ifaddrs **a1)
{
  if (*a1)
  {
    int v2 = a1[1];
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_244CBFA20(a1);
    if (!result) {
      return result;
    }
    int v2 = a1[1];
  }
  return v2->ifa_flags & 1;
}

uint64_t sub_244CBFDA8(ifaddrs **a1)
{
  if (*a1)
  {
    int v2 = a1[1];
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_244CBFA20(a1);
    if (!result) {
      return result;
    }
    int v2 = a1[1];
  }
  return (LOBYTE(v2->ifa_flags) >> 3) & 1;
}

uint64_t sub_244CBFDF8(ifaddrs **a1)
{
  if (*a1)
  {
    int v2 = a1[1];
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_244CBFA20(a1);
    if (!result) {
      return result;
    }
    int v2 = a1[1];
  }
  return BYTE1(v2->ifa_flags) >> 7;
}

uint64_t sub_244CBFE48(ifaddrs **a1)
{
  if (*a1)
  {
    int v2 = a1[1];
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_244CBFA20(a1);
    if (!result) {
      return result;
    }
    int v2 = a1[1];
  }
  return (LOBYTE(v2->ifa_flags) >> 1) & 1;
}

uint64_t sub_244CBFE98@<X0>(uint64_t result@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
    int v11 = 758;
    goto LABEL_19;
  }
  unsigned int v5 = (int *)result;
  char v13 = 0;
  uint64_t result = getifaddrs(&v13);
  if (result == -1)
  {
    int v11 = 766;
    int v9 = 272;
    goto LABEL_18;
  }
  unint64_t v6 = v13;
  if (!v13)
  {
    int v10 = 0;
    int v9 = 272;
    goto LABEL_17;
  }
  while (1)
  {
    ifa_addr = v6->ifa_addr;
    if (!ifa_addr || ifa_addr->sa_family != 30) {
      goto LABEL_11;
    }
    if (!*v5) {
      break;
    }
    int v8 = *v5;
    if (v8 == if_nametoindex(v6->ifa_name))
    {
      ifa_addr = v6->ifa_addr;
      break;
    }
LABEL_11:
    unint64_t v6 = v6->ifa_next;
    if (!v6)
    {
      int v9 = 272;
      goto LABEL_13;
    }
  }
  if (ifa_addr->sa_data[6] != 254 || (ifa_addr->sa_data[7] & 0xC0) != 0x80) {
    goto LABEL_11;
  }
  sub_244CBEBE8(&v12, (__n128 *)&ifa_addr->sa_data[6]);
  int v9 = 0;
  *a2 = v12;
LABEL_13:
  int v10 = v13;
LABEL_17:
  uint64_t result = MEMORY[0x245696460](v10);
  int v11 = 788;
LABEL_18:
  *(_DWORD *)a3 = v9;
  *(void *)(a3 + 8) = "src/inet/InetInterface.cpp";
LABEL_19:
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

ifaddrs *sub_244CBFFC0@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  int v7 = 0;
  uint64_t v8 = 0;
LABEL_4:
  if (sub_244CBFA20(&v7))
  {
    while (1)
    {
      sub_244CBFA98((uint64_t)&v7, v6, (uint64_t)v5);
      if (!v5[0] && sub_244CBEB38(a1, v6)) {
        break;
      }
      sub_244CBFA20(&v7);
      if (!v7) {
        goto LABEL_4;
      }
      if (!v8) {
        goto LABEL_9;
      }
    }
    sub_244CBFC3C(&v7, a2);
  }
  else
  {
LABEL_9:
    *a2 = 0;
  }
  uint64_t result = v7;
  if (v7) {
    return (ifaddrs *)MEMORY[0x245696460]();
  }
  return result;
}

uint64_t sub_244CC006C(int *a1)
{
  if (sub_244CBEE00(a1)) {
    return 1;
  }
  int v7 = 0;
  uint64_t v8 = 0;
LABEL_6:
  if (sub_244CBFA20(&v7))
  {
    while (1)
    {
      sub_244CBFA98((uint64_t)&v7, v5, (uint64_t)v4);
      if (!v4[0] && !sub_244CBEC68(v5) && !sub_244CBEE00(v5))
      {
        char v6 = sub_244CBFB34(&v7);
        if (sub_244CBF220((uint64_t)v5, a1)) {
          break;
        }
      }
      sub_244CBFA20(&v7);
      if (!v7) {
        goto LABEL_6;
      }
      if (!v8) {
        goto LABEL_13;
      }
    }
    uint64_t v2 = 1;
  }
  else
  {
LABEL_13:
    uint64_t v2 = 0;
  }
  if (v7) {
    MEMORY[0x245696460]();
  }
  return v2;
}

double sub_244CC0144@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1[88])
  {
    *(_DWORD *)a6 = 3;
    *(void *)(a6 + 8) = "src/inet/TCPEndPoint.cpp";
    int v7 = 48;
LABEL_3:
    *(_DWORD *)(a6 + 16) = v7;
    return result;
  }
  if (sub_244CBEB84(a3, &xmmword_268EC34EC)
    && sub_244CBEEA8(a3) != 3
    && sub_244CBEEA8(a3) != a2)
  {
    *(_DWORD *)a6 = 257;
    *(void *)(a6 + 8) = "src/inet/TCPEndPoint.cpp";
    int v7 = 53;
    goto LABEL_3;
  }
  (*(void (**)(int *__return_ptr, unsigned char *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 72))(&v15, a1, a2, a3, a4, a5);
  int v14 = v15;
  long long v18 = v16;
  int v19 = v17;
  if (!v15) {
    a1[88] = 1;
  }
  *(_DWORD *)a6 = v14;
  double result = *(double *)&v18;
  *(_OWORD *)(a6 + 4) = v18;
  *(_DWORD *)(a6 + 20) = v19;
  return result;
}

int *sub_244CC02A4@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)result + 88) == 1)
  {
    int v3 = result;
    *(_OWORD *)a2 = xmmword_26519C320;
    *(void *)(a2 + 16) = 69;
    double result = (int *)(*(uint64_t (**)(int *))(*(void *)result + 80))(result);
    if (!*(_DWORD *)a2)
    {
      double result = sub_244CC034C(v3 + 2);
      *((unsigned char *)v3 + 88) = 2;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/inet/TCPEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 68;
  }
  return result;
}

int *sub_244CC034C(int *a1)
{
  int v1 = *a1;
  if (*a1 == -1) {
    sub_244E23068();
  }
  if (!v1) {
    sub_244E22FC0();
  }
  *a1 = v1 + 1;
  return a1 - 2;
}

unsigned __int8 *sub_244CC0380@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  if (result[88] >= 2u)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/inet/TCPEndPoint.cpp";
    *(_DWORD *)(a5 + 16) = 85;
  }
  else
  {
    char v6 = result;
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    int v7 = *a4;
    double result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, int *))(*(void *)result + 88))(result, a2, a3, &v7);
    if (!*(_DWORD *)a5)
    {
      double result = (unsigned __int8 *)sub_244CC043C(v6);
      *(_OWORD *)a5 = xmmword_26519C338;
      *(void *)(a5 + 16) = 86;
    }
  }
  return result;
}

void *sub_244CC043C(void *result)
{
  if (*((_DWORD *)result + 29)) {
    return (*(void *(**)(void *__return_ptr))(**(void **)(result[3] + 16) + 40))(v1);
  }
  return result;
}

double sub_244CC04A4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if ((*(unsigned __int8 *)(a1 + 88) | 2) == 6)
  {
    long long v9 = xmmword_26519C350;
    uint64_t v10 = 98;
    uint64_t v7 = *(void *)(a1 + 104);
    if (v7)
    {
      sub_244CC8B70(*(void **)(a1 + 104), a2);
    }
    else
    {
      *(void *)(a1 + 104) = *a2;
      *a2 = 0;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 96))(a1, v7 == 0);
    if (!*(_DWORD *)a4)
    {
      if (a3) {
        sub_244CC05A8(a1, &v9);
      }
      double result = *(double *)&v9;
      *(_OWORD *)a4 = v9;
      a4[2] = v10;
    }
  }
  else
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/inet/TCPEndPoint.cpp";
    *((_DWORD *)a4 + 4) = 97;
  }
  return result;
}

void sub_244CC05A8(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (*(_DWORD *)a2)
  {
    long long v4 = *(_OWORD *)a2;
    uint64_t v5 = a2[2];
    sub_244CC074C(a1, &v4, 0);
  }
}

void sub_244CC0628(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned char *)(a1 + 88) & 0xFC) == 4)
  {
    char v6 = *(_WORD **)(a1 + 96);
    if (v6) {
      sub_244CC8A0C(v6);
    }
    int v7 = 0;
    *(void *)(a1 + 96) = *a2;
    *a2 = 0;
    int v8 = 126;
  }
  else
  {
    int v8 = 122;
    int v7 = 3;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/inet/TCPEndPoint.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

uint64_t sub_244CC06A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return *(void *)(v1 + 16);
  }
  else {
    return 0;
  }
}

uint64_t sub_244CC06C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  if (v1) {
    return *(void *)(v1 + 16);
  }
  else {
    return 0;
  }
}

void sub_244CC06D8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 88);
  if ((v1 & 0xFC) == 4)
  {
    if (v1 == 6)
    {
      LODWORD(v2) = 0;
      *((void *)&v2 + 1) = "src/inet/TCPEndPoint.cpp";
      int v3 = 161;
      sub_244CC074C(a1, &v2, 0);
    }
    else if (v1 == 4)
    {
      *(unsigned char *)(a1 + 88) = 5;
      sub_244CC05A8(a1, v4);
    }
  }
}

void sub_244CC074C(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 88);
  if ((v6 & 0xFC) == 4)
  {
    if (!*(_DWORD *)a2 && (*(void *)(a1 + 104) || *(void *)(a1 + 96))) {
      char v7 = 7;
    }
    else {
      char v7 = 8;
    }
    *(unsigned char *)(a1 + 88) = v7;
  }
  else
  {
    int v8 = 8;
    *(unsigned char *)(a1 + 88) = 8;
    if (v6 == 8) {
      goto LABEL_11;
    }
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 24)
                                                                                                  + 16)
                                                                                    + 72))(*(void *)(*(void *)(a1 + 24) + 16), sub_244CC0D0C, a1);
  int v8 = *(unsigned __int8 *)(a1 + 88);
LABEL_11:
  if (v8 != v6)
  {
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 128))(a1, &v17, v6);
    if (*(unsigned char *)(a1 + 88) == 8)
    {
      long long v9 = *(_WORD **)(a1 + 104);
      if (v9) {
        sub_244CC8A0C(v9);
      }
      *(void *)(a1 + 104) = 0;
      uint64_t v10 = *(_WORD **)(a1 + 96);
      if (v10) {
        sub_244CC8A0C(v10);
      }
      *(void *)(a1 + 96) = 0;
      if (a3)
      {
LABEL_18:
        if (v6 < 2) {
          return;
        }
LABEL_27:
        sub_244CC09F4(a1 + 8);
        return;
      }
      if ((v6 - 4) >= 4)
      {
        if (v6 != 3) {
          goto LABEL_18;
        }
        int v11 = *(void (**)(uint64_t, long long *))(a1 + 32);
        if (!v11) {
          goto LABEL_27;
        }
        long long v15 = *a2;
        uint64_t v16 = *((void *)a2 + 2);
        __n128 v12 = &v15;
      }
      else
      {
        int v11 = *(void (**)(uint64_t, long long *))(a1 + 56);
        if (!v11) {
          goto LABEL_27;
        }
        long long v13 = *a2;
        uint64_t v14 = *((void *)a2 + 2);
        __n128 v12 = &v13;
      }
      v11(a1, v12);
      goto LABEL_27;
    }
  }
}

void sub_244CC08F8(void *a1)
{
  long long v2 = (_WORD *)a1[12];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[12] = 0;
  a1[4] = 0;
  a1[7] = 0;
  a1[8] = 0;
  LODWORD(v3) = 0;
  *((void *)&v3 + 1) = "src/inet/TCPEndPoint.cpp";
  int v4 = 176;
  sub_244CC074C((uint64_t)a1, &v3, 1);
}

void sub_244CC0960(void *a1)
{
  a1[4] = 0;
  a1[7] = 0;
  a1[8] = 0;
  LODWORD(v1) = 2;
  *((void *)&v1 + 1) = "src/inet/TCPEndPoint.cpp";
  int v2 = 186;
  sub_244CC074C((uint64_t)a1, &v1, 1);
}

uint64_t sub_244CC09AC(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_244CC08F8((void *)a1);

  return sub_244CC09F4(a1 + 8);
}

uint64_t sub_244CC09F4(uint64_t result)
{
  if (!*(_DWORD *)result) {
    sub_244E23110();
  }
  int v1 = *(_DWORD *)result - 1;
  *(_DWORD *)double result = v1;
  if (!v1)
  {
    uint64_t v2 = result - 8;
    uint64_t v3 = *(void *)(result + 16);
    int v4 = sub_244CC9408();
    --*((unsigned char *)v4 + 2);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24);
    return v5(v3, v2);
  }
  return result;
}

void *sub_244CC0A84(uint64_t a1, int a2)
{
  unsigned int v3 = (a2 + 99) / 0x64u;
  double result = (void *)(*(uint64_t (**)(void, BOOL (*)(uint64_t)))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), sub_244CC1014);
  if (v3 >= 0xFFFF) {
    int v5 = 0xFFFF;
  }
  else {
    int v5 = v3;
  }
  *(_WORD *)(a1 + 114) = v5;
  *(_WORD *)(a1 + 112) = v5;
  if (v5) {
    BOOL v6 = result == 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return (*(void *(**)(void *__return_ptr))(**(void **)(*(void *)(a1 + 24) + 16) + 40))(v7);
  }
  return result;
}

BOOL sub_244CC0B5C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, BOOL (*)(uint64_t)))(*(void *)a1 + 32))(a1, sub_244CC1014) == 1;
}

void *sub_244CC0BAC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t, BOOL (*)(uint64_t)))(*(void *)a2 + 32))(a2, sub_244CC1014);
  double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t)))(*(void *)a2 + 32))(a2, sub_244CC0FA0);
  if (v4 == 1) {
    return (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t (*)(), uint64_t))(*(void *)a1 + 40))(v6, a1, 100, sub_244CC0BAC, a2);
  }
  return result;
}

unsigned char *sub_244CC0CA0@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  if ((result[88] & 0xFC) == 4)
  {
    *(_OWORD *)a2 = xmmword_26519C368;
    *(void *)(a2 + 16) = 270;
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/inet/TCPEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 269;
  }
  return result;
}

uint64_t sub_244CC0D0C(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    sub_244E231B8();
  }
  int v3 = 282;
  int v4 = "src/inet/TCPEndPoint.cpp";
  int v5 = 305;
  return sub_244CC074C(a2, &v3, 0);
}

uint64_t sub_244CC0D64(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 24) + 16)
                                                                                              + 72))(*(void *)(*(void *)(a1 + 24) + 16), sub_244CC0D0C, a1);
}

BOOL sub_244CC0DA4(char a1)
{
  return (a1 & 0xFC) == 4;
}

void sub_244CC0DB4(uint64_t a1)
{
  void (*v4)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  long long *v6;
  int v7;
  const char *v8;
  int v9;
  void v10[3];
  long long v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;

  int v3 = (void *)(a1 + 96);
  uint64_t v2 = *(void *)(a1 + 96);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 89))
    {
      int v4 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a1 + 40);
      if (v4)
      {
        int v5 = *(void *)(v2 + 16);
        long long v13 = 0uLL;
        uint64_t v14 = 0;
        v4(&v13, a1, a1 + 96);
        if (v13)
        {
          int v11 = v13;
          __n128 v12 = v14;
          BOOL v6 = &v11;
LABEL_10:
          sub_244CC074C(a1, v6, 0);
          return;
        }
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 48))(v10, a1, v5);
      }
    }
  }
  if (*(unsigned char *)(a1 + 88) == 7 && !*v3)
  {
    char v7 = 0;
    int v8 = "src/inet/TCPEndPoint.cpp";
    long long v9 = 350;
    BOOL v6 = (long long *)&v7;
    goto LABEL_10;
  }
}

void sub_244CC0EA8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    long long v4 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    sub_244CC074C(a1, &v4, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 24) + 16)
                                                                                      + 72))(*(void *)(*(void *)(a1 + 24) + 16), sub_244CC0D0C, a1);
    *(_WORD *)(a1 + 114) = *(_WORD *)(a1 + 112);
    *(unsigned char *)(a1 + 88) = 4;
    (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
    int v3 = *(void (**)(uint64_t, int *))(a1 + 32);
    if (v3)
    {
      int v6 = 0;
      char v7 = "src/inet/TCPEndPoint.cpp";
      int v8 = 371;
      v3(a1, &v6);
    }
  }
}

uint64_t sub_244CC0FA0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 88) & 0xFC) == 4 && *(_WORD *)(a1 + 112))
  {
    if (*(_WORD *)(a1 + 114))
    {
      --*(_WORD *)(a1 + 114);
    }
    else
    {
      LODWORD(v2) = 277;
      *((void *)&v2 + 1) = "src/inet/TCPEndPoint.cpp";
      int v3 = 240;
      sub_244CC074C(a1, &v2, 0);
    }
  }
  return 0;
}

BOOL sub_244CC1014(uint64_t a1)
{
  return *(_WORD *)(a1 + 112) != 0;
}

uint64_t sub_244CC1024@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = sub_244CC125C(a1, a2, (uint64_t)a6);
  int v13 = *(_DWORD *)a6;
  if (*(_DWORD *)a6) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a5 == 0;
  }
  if (!v14)
  {
    LODWORD(v20) = 1;
    setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4, &v20, 4u);
    uint64_t result = setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 512, &v20, 4u);
    if (result)
    {
      long long v15 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *__error();
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "SO_REUSEPORT: %d", buf, 8u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result)
      {
        __error();
        uint64_t result = sub_244CC4DE0(1u, 1);
      }
    }
    int v13 = *(_DWORD *)a6;
  }
  if (!v13)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v23 = 0u;
    if (a2 == 1)
    {
      buf[1] = 2;
      *(_WORD *)&buf[2] = __rev16(a4);
      uint64_t result = sub_244CBEBF4(a3);
      *(_DWORD *)&uint8_t buf[4] = result;
      socklen_t v18 = 16;
    }
    else
    {
      if (a2 != 2)
      {
        *(_DWORD *)a6 = 257;
        a6[1] = "src/inet/TCPEndPointImplSockets.cpp";
        *((_DWORD *)a6 + 4) = 125;
        return result;
      }
      buf[1] = 30;
      *(_WORD *)&buf[2] = __rev16(a4);
      uint64_t result = sub_244CBEBFC(a3);
      *(void *)&uint8_t buf[8] = result;
      *(void *)&long long v23 = v17;
      DWORD2(v23) = 0;
      socklen_t v18 = 28;
    }
    if (!*(_DWORD *)a6)
    {
      uint64_t result = bind(*(_DWORD *)(a1 + 120), (const sockaddr *)buf, v18);
      if (result)
      {
        int v19 = __error();
        uint64_t result = sub_244CC8788(*v19, "src/inet/TCPEndPointImplSockets.cpp", 133, (uint64_t)&v20);
        *(_OWORD *)a6 = v20;
        a6[2] = v21;
      }
    }
  }
  return result;
}

uint64_t sub_244CC125C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(result + 120) != -1)
  {
    if (*(unsigned __int8 *)(result + 124) != a2)
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v6 = 768;
      goto LABEL_22;
    }
LABEL_3:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v6 = 771;
LABEL_22:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  if (a2 == 2)
  {
    int v7 = 30;
  }
  else
  {
    if (a2 != 1)
    {
      *(_DWORD *)a3 = 257;
      *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v6 = 733;
      goto LABEL_22;
    }
    int v7 = 2;
  }
  uint64_t v8 = socket(v7, 1, 0);
  *(_DWORD *)(v4 + 120) = v8;
  if (v8 != -1)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(v4 + 24) + 16) + 88))(*(void *)(*(void *)(v4 + 24) + 16), v8, v4 + 128);
    if (*(_DWORD *)a3) {
      return result;
    }
    *(unsigned char *)(v4 + 124) = a2;
    if (a2 == 2)
    {
      *(_DWORD *)long long buf = 1;
      setsockopt(*(_DWORD *)(v4 + 120), 41, 27, buf, 4u);
    }
    int v12 = 1;
    uint64_t result = setsockopt(*(_DWORD *)(v4 + 120), 0xFFFF, 4130, &v12, 4u);
    if (result)
    {
      long long v9 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = *__error();
        *(_DWORD *)long long buf = 67109120;
        int v14 = v10;
        _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "SO_NOSIGPIPE: %d", buf, 8u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result)
      {
        __error();
        uint64_t result = sub_244CC4DE0(1u, 1);
      }
    }
    goto LABEL_3;
  }
  uint64_t v11 = *__error();

  return sub_244CC8788(v11, "src/inet/TCPEndPointImplSockets.cpp", 738, a3);
}

double sub_244CC14D4@<D0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (listen(*(_DWORD *)(a1 + 120), a2))
  {
    uint64_t v5 = *__error();
    sub_244CC8788(v5, "src/inet/TCPEndPointImplSockets.cpp", 145, (uint64_t)a3);
  }
  else
  {
    int v7 = fcntl(*(_DWORD *)(a1 + 120), 3, 0);
    fcntl(*(_DWORD *)(a1 + 120), 4, v7 | 4u);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    (*(void (**)(void, void, uint64_t (*)(char, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 24) + 16)
                                                                                           + 96))(*(void *)(*(void *)(a1 + 24) + 16), *(void *)(a1 + 128), sub_244CC1608, a1);
    if (!*(_DWORD *)a3)
    {
      (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 24) + 16) + 104))(&v8);
      double result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      a3[2] = v9;
    }
  }
  return result;
}

uint64_t sub_244CC1608(char a1, uint64_t a2)
{
  return sub_244CC2714(a2, a1);
}

void sub_244CC1618(uint64_t a1@<X0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v10 = sub_244CBEEA8(a2);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_244CC125C(a1, v10, (uint64_t)a5);
  if (*(_DWORD *)a5) {
    return;
  }
  unsigned int v11 = *a4;
  BOOL v12 = sub_244CBEE00(a2);
  if (v11)
  {
    if (!v12)
    {
      sockaddr v28 = (sockaddr)0;
      long long v29 = 0u;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      sub_244CBF340(a4, (char *)&v28, 0x10uLL, (uint64_t)a5);
      if (*(_DWORD *)a5) {
        return;
      }
      if (setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4404, &v28, 0x20u) < 0)
      {
        if (*__error() != 13)
        {
          long long v20 = __error();
          sub_244CC8788(*v20, "src/inet/TCPEndPointImplSockets.cpp", 200, (uint64_t)a5);
          return;
        }
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        unsigned int v27 = *a4;
        sub_244CC1A2C((void *)a1, v10, &v27, (uint64_t)a5);
        if (*(_DWORD *)a5) {
          return;
        }
      }
    }
  }
  else if (v12)
  {
    *(_DWORD *)a5 = 257;
    a5[1] = "src/inet/TCPEndPointImplSockets.cpp";
    int v13 = 175;
LABEL_22:
    *((_DWORD *)a5 + 4) = v13;
    return;
  }
  int v26 = 1;
  setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4130, &v26, 4u);
  int v14 = fcntl(*(_DWORD *)(a1 + 120), 3, 0);
  fcntl(*(_DWORD *)(a1 + 120), 4, v14 | 4u);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  sockaddr v28 = (sockaddr)0;
  if (v10 == 1)
  {
    v28.int sa_family = 2;
    *(_WORD *)v28.sa_data = __rev16(a3);
    *(_DWORD *)&v28.sa_data[2] = sub_244CBEBF4((uint64_t)a2);
    socklen_t v16 = 16;
    goto LABEL_15;
  }
  if (v10 != 2)
  {
    *(_DWORD *)a5 = 257;
    a5[1] = "src/inet/TCPEndPointImplSockets.cpp";
    int v13 = 249;
    goto LABEL_22;
  }
  v28.int sa_family = 30;
  *(_WORD *)v28.sa_data = __rev16(a3);
  *(void *)&v28.sa_data[6] = sub_244CBEBFC((uint64_t)a2);
  *(void *)&long long v29 = v15;
  DWORD2(v29) = *a4;
  socklen_t v16 = 28;
LABEL_15:
  int v17 = connect(*(_DWORD *)(a1 + 120), &v28, v16);
  if (v17 == -1 && *__error() != 36)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    socklen_t v18 = __error();
    sub_244CC8788(*v18, "src/inet/TCPEndPointImplSockets.cpp", 257, (uint64_t)a5);
    long long v24 = *(_OWORD *)a5;
    uint64_t v25 = a5[2];
    sub_244CC074C(a1, &v24, 1);
    return;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  (*(void (**)(void, void, uint64_t (*)(char, uint64_t), uint64_t))(**(void **)(*(void *)(a1 + 24) + 16)
                                                                                         + 96))(*(void *)(*(void *)(a1 + 24) + 16), *(void *)(a1 + 128), sub_244CC1608, a1);
  if (!*(_DWORD *)a5)
  {
    sub_244CC034C((int *)(a1 + 8));
    if (v17)
    {
      *(unsigned char *)(a1 + 88) = 3;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 24) + 16) + 112))(*(void *)(*(void *)(a1 + 24) + 16), *(void *)(a1 + 128));
      if (*(_DWORD *)a5) {
        return;
      }
      goto LABEL_28;
    }
    *(unsigned char *)(a1 + 88) = 4;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 24) + 16) + 104))(*(void *)(*(void *)(a1 + 24) + 16), *(void *)(a1 + 128));
    if (!*(_DWORD *)a5)
    {
      int v19 = *(void (**)(uint64_t, int *))(a1 + 32);
      if (v19)
      {
        int v21 = 0;
        char v22 = "src/inet/TCPEndPointImplSockets.cpp";
        int v23 = 275;
        v19(a1, &v21);
      }
LABEL_28:
      *(_DWORD *)a5 = 0;
      a5[1] = "src/inet/TCPEndPointImplSockets.cpp";
      int v13 = 285;
      goto LABEL_22;
    }
  }
}

void *sub_244CC1A2C@<X0>(void *result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)result + 88) == 1)
  {
    *(_DWORD *)a4 = 108;
    *(void *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v5 = 671;
    goto LABEL_17;
  }
  long long v8 = result;
  sub_244CBF9C8(v15);
  if (!sub_244CBFA04((uint64_t)v15))
  {
LABEL_16:
    double result = sub_244CBF9D0(v15);
    *(_DWORD *)a4 = 108;
    *(void *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v5 = 711;
    goto LABEL_17;
  }
  while (1)
  {
    sub_244CBFC3C(v15, &v13);
    if (v13 != *a3) {
      goto LABEL_6;
    }
    sub_244CBFA98((uint64_t)v15, v14, (uint64_t)v12);
    if (v12[0]) {
      goto LABEL_6;
    }
    if (a2 == 2) {
      break;
    }
    if (a2 == 1 && sub_244CBEC68(v14))
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t v9 = a4;
      int v10 = v8;
      uint64_t v11 = 1;
      goto LABEL_19;
    }
LABEL_6:
    sub_244CBFA20(v15);
    if ((sub_244CBFA04((uint64_t)v15) & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (sub_244CBEC68(v14) || sub_244CBEE00(v14) || sub_244CBECFC((uint64_t)v14)) {
    goto LABEL_6;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v9 = a4;
  int v10 = v8;
  uint64_t v11 = 2;
LABEL_19:
  sub_244CC0144(v10, v11, v14, 0, 1, v9);
  if (*(_DWORD *)a4) {
    return sub_244CBF9D0(v15);
  }
  double result = sub_244CBF9D0(v15);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  int v5 = 713;
LABEL_17:
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

void sub_244CC1BCC(uint64_t a1@<X0>, __n128 *a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_244CC1BE8(uint64_t a1@<X0>, unsigned int (*a2)(void, __n128 *, int *)@<X1>, __n128 *a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (sub_244CC0DA4(*(unsigned char *)(a1 + 88)))
  {
    memset(v14, 0, sizeof(v14));
    int v13 = 128;
    if (a2(*(unsigned int *)(a1 + 120), v14, &v13))
    {
      int v10 = __error();
      sub_244CC8788(*v10, "src/inet/TCPEndPointImplSockets.cpp", 309, a5);
      return;
    }
    if (v14[0].n128_u8[1] == 2)
    {
      sub_244CBEBD0((uint64_t)&v12, &v14[0].n128_u32[1]);
      *a3 = v12;
      *a4 = bswap32(v14[0].n128_u16[1]) >> 16;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v11 = 324;
    }
    else if (v14[0].n128_u8[1] == 30)
    {
      sub_244CBEBE8(&v12, (__n128 *)&v14[0].n128_i8[8]);
      *a3 = v12;
      *a4 = bswap32(v14[0].n128_u16[1]) >> 16;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v11 = 316;
    }
    else
    {
      *(_DWORD *)a5 = 3;
      *(void *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v11 = 328;
    }
  }
  else
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v11 = 301;
  }
  *(_DWORD *)(a5 + 16) = v11;
}

void sub_244CC1D8C(uint64_t a1@<X0>, __n128 *a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_244CC1DA8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t result = sub_244CC0DA4(*(unsigned char *)(a1 + 88));
  if (result)
  {
    long long v19 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    sockaddr v12 = (sockaddr)0;
    socklen_t v11 = 128;
    uint64_t result = getpeername(*(_DWORD *)(a1 + 120), &v12, &v11);
    if (result)
    {
      int v7 = __error();
      return sub_244CC8788(*v7, "src/inet/TCPEndPointImplSockets.cpp", 341, a3);
    }
    if (v12.sa_family == 2)
    {
      *a2 = 0;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v8 = 363;
    }
    else if (v12.sa_family == 30)
    {
      sub_244CBEBE8(&v10, (__n128 *)&v12.sa_data[6]);
      uint64_t result = sub_244CBEE00(&v10);
      int v9 = DWORD2(v13);
      if (!result) {
        int v9 = 0;
      }
      *a2 = v9;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v8 = 355;
    }
    else
    {
      *a2 = 0;
      *(_DWORD *)a3 = 257;
      *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      int v8 = 368;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v8 = 333;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_244CC1F1C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2) {
    return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(result + 24) + 16) + 112))(*(void *)(*(void *)(result + 24) + 16), *(void *)(result + 128));
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  *(_DWORD *)(a3 + 16) = 378;
  return result;
}

uint64_t sub_244CC1F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_244CC0DA4(*(unsigned char *)(a1 + 88));
  if (result)
  {
    int v7 = 1;
    uint64_t result = setsockopt(*(_DWORD *)(a1 + 120), 6, 1, &v7, 4u);
    if (result)
    {
      int v5 = __error();
      return sub_244CC8788(*v5, "src/inet/TCPEndPointImplSockets.cpp", 390, a2);
    }
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v6 = 394;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v6 = 383;
  }
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_244CC2020@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244CC0DA4(*(unsigned char *)(a1 + 88));
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v12 = 399;
    goto LABEL_5;
  }
  int v13 = a2;
  if (!setsockopt(*(_DWORD *)(a1 + 120), 6, 16, &v13, 4u))
  {
    int v13 = a2;
    if (setsockopt(*(_DWORD *)(a1 + 120), 6, 257, &v13, 4u))
    {
      uint64_t v9 = *__error();
      uint64_t v10 = a4;
      int v11 = 412;
      return sub_244CC8788(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
    }
    int v13 = a3;
    if (setsockopt(*(_DWORD *)(a1 + 120), 6, 258, &v13, 4u))
    {
      uint64_t v9 = *__error();
      uint64_t v10 = a4;
      int v11 = 419;
      return sub_244CC8788(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
    }
    int v13 = 1;
    uint64_t result = setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 8, &v13, 4u);
    if (result)
    {
      uint64_t v9 = *__error();
      uint64_t v10 = a4;
      int v11 = 426;
      return sub_244CC8788(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v12 = 429;
LABEL_5:
    *(_DWORD *)(a4 + 16) = v12;
    return result;
  }
  uint64_t v9 = *__error();
  uint64_t v10 = a4;
  int v11 = 405;
  return sub_244CC8788(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
}

uint64_t sub_244CC2194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_244CC0DA4(*(unsigned char *)(a1 + 88));
  if (result)
  {
    int v7 = 0;
    uint64_t result = setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 8, &v7, 4u);
    if (result)
    {
      int v5 = __error();
      return sub_244CC8788(*v5, "src/inet/TCPEndPointImplSockets.cpp", 440, a2);
    }
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v6 = 443;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    int v6 = 434;
  }
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

BOOL sub_244CC2240@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = sub_244CC0DA4(*(unsigned char *)(a1 + 88));
  if (result) {
    int v4 = 0;
  }
  else {
    int v4 = 3;
  }
  if (result) {
    int v5 = 451;
  }
  else {
    int v5 = 448;
  }
  *(_DWORD *)a2 = v4;
  *(void *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

void sub_244CC2294(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(void *)(a1 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  *(_DWORD *)(a1 + 16) = 465;
}

double sub_244CC22B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_26519C380;
  *(void *)(a2 + 16) = 471;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 104);
    if (!v5) {
      goto LABEL_21;
    }
    size_t v6 = *(void *)(v5 + 24);
    unint64_t v7 = send(*(_DWORD *)(a1 + 120), *(const void **)(v5 + 8), v6, 0x80000);
    if (v7 == -1) {
      break;
    }
    unint64_t v8 = v7;
    if ((v7 & 0x8000000000000000) != 0 || v6 < v7)
    {
      *(_DWORD *)a2 = 3;
      *(void *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      *(_DWORD *)(a2 + 16) = 503;
      return result;
    }
    *(_WORD *)(a1 + 114) = *(_WORD *)(a1 + 112);
    uint64_t v9 = *(_WORD **)(a1 + 104);
    if (v8 >= v6)
    {
      uint64_t v10 = sub_244CC8C9C(v9);
      *(void *)(a1 + 104) = v10;
      if (!v10)
      {
        (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 24) + 16) + 128))(*(void *)(*(void *)(a1 + 24) + 16), *(void *)(a1 + 128));
        if (*(_DWORD *)a2) {
          return result;
        }
      }
    }
    else
    {
      sub_244CC8CC8(v9, v8);
    }
    int v11 = *(void (**)(uint64_t, unint64_t))(a1 + 48);
    if (v11) {
      v11(a1, v8);
    }
    if (v8 < v6) {
      goto LABEL_21;
    }
  }
  if (*__error() == 35 || *__error() == 35) {
    goto LABEL_21;
  }
  if (*__error() == 32)
  {
    LODWORD(v14) = 258;
    *((void *)&v14 + 1) = "src/inet/TCPEndPointImplSockets.cpp";
    LODWORD(v15) = 496;
  }
  else
  {
    int v12 = __error();
    sub_244CC8788(*v12, "src/inet/TCPEndPointImplSockets.cpp", 496, (uint64_t)&v14);
  }
  double result = *(double *)&v14;
  *(_OWORD *)a2 = v14;
  *(void *)(a2 + 16) = v15;
  if (!*(_DWORD *)a2)
  {
LABEL_21:
    if (*(unsigned char *)(a1 + 88) == 5 && !*(void *)(a1 + 104))
    {
      if (shutdown(*(_DWORD *)(a1 + 120), 1))
      {
        int v13 = __error();
        sub_244CC8788(*v13, "src/inet/TCPEndPointImplSockets.cpp", 575, (uint64_t)&v14);
        double result = *(double *)&v14;
        *(_OWORD *)a2 = v14;
        *(void *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

void sub_244CC24B4(uint64_t a1)
{
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 24) + 16) + 104))(&v6);
  if (v6
    || ((*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 24) + 16) + 112))(&v4),
        long long v6 = v4,
        uint64_t v7 = v5,
        v4))
  {
    long long v2 = v6;
    uint64_t v3 = v7;
    sub_244CC074C(a1, &v2, 0);
  }
}

uint64_t sub_244CC258C(uint64_t result, _DWORD *a2, char a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(result + 120) != -1)
  {
    uint64_t v4 = result;
    int v5 = *(unsigned __int8 *)(result + 88);
    if (v5 == 8 || v5 == 7 && !*(void *)(result + 104))
    {
      if (sub_244CC0DA4(a3))
      {
        if (*a2)
        {
          uint64_t v8 = 1;
          if (setsockopt(*(_DWORD *)(v4 + 120), 0xFFFF, 128, &v8, 8u))
          {
            long long v6 = sub_244CC8484(1u, "Inet");
            if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            {
              int v7 = *__error();
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v7;
              _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "SO_LINGER: %d", buf, 8u);
            }
            if (sub_244CC4E58(1u))
            {
              __error();
              sub_244CC4DE0(1u, 1);
            }
          }
        }
      }
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(*(void *)(v4 + 24) + 16) + 136))(buf);
      double result = close(*(_DWORD *)(v4 + 120));
      *(_DWORD *)(v4 + 120) = -1;
    }
  }
  return result;
}

uint64_t sub_244CC2714(uint64_t a1, char a2)
{
  uint64_t v4 = a1 + 8;
  sub_244CC034C((int *)(a1 + 8));
  int v5 = *(unsigned __int8 *)(a1 + 88);
  if (v5 == 3)
  {
    if ((a2 & 2) != 0)
    {
      uint64_t v12 = 4;
      if (getsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4103, (char *)&v12 + 4, (socklen_t *)&v12))
      {
        uint64_t v6 = *__error();
        HIDWORD(v12) = v6;
      }
      else
      {
        uint64_t v6 = HIDWORD(v12);
      }
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      sub_244CC8788(v6, "src/inet/TCPEndPointImplSockets.cpp", 814, (uint64_t)&v10);
      long long v8 = v10;
      uint64_t v9 = v11;
      sub_244CC0EA8(a1, (uint64_t)&v8);
    }
  }
  else if (v5 == 2)
  {
    if (*(void *)(a1 + 72) && (a2 & 1) != 0) {
      sub_244CC284C(a1);
    }
  }
  else
  {
    if (sub_244CC0DA4(v5) && *(void *)(a1 + 104) && (a2 & 2) != 0) {
      sub_244CC05A8(a1, &v10);
    }
    if (*(unsigned char *)(a1 + 88) & 0xFE) == 4 && *(unsigned char *)(a1 + 89) && *(void *)(a1 + 40) && (a2) {
      sub_244CC2B54(a1);
    }
  }
  return sub_244CC09F4(v4);
}

uint64_t sub_244CC284C(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  sockaddr v26 = (sockaddr)0;
  long long v27 = 0u;
  socklen_t v24 = 128;
  uint64_t result = accept(*(_DWORD *)(a1 + 120), &v26, &v24);
  int v3 = result;
  if (result != -1)
  {
    int v4 = 0;
    int v5 = 0;
    goto LABEL_3;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result != 35)
  {
    uint64_t result = (uint64_t)__error();
    if (*(_DWORD *)result != 35)
    {
      uint64_t v6 = __error();
      uint64_t result = sub_244CC8788(*v6, "src/inet/TCPEndPointImplSockets.cpp", 996, (uint64_t)&v20);
      int v7 = v20;
      int v5 = HIDWORD(v20);
      int v4 = v23;
      if (v20)
      {
        long long v8 = v21;
        int v9 = v22;
LABEL_29:
        long long v14 = *(uint64_t (**)(uint64_t, _DWORD *))(a1 + 80);
        if (v14)
        {
          v15[0] = v7;
          v15[1] = v5;
          long long v16 = v8;
          int v17 = v9;
          int v18 = v4;
          return v14(a1, v15);
        }
        return result;
      }
LABEL_3:
      if (*(void *)(a1 + 72))
      {
        if (v26.sa_family == 2)
        {
          sub_244CBEBD0((uint64_t)&v25, &v26.sa_data[2]);
          goto LABEL_13;
        }
        if (v26.sa_family == 30)
        {
          sub_244CBEBE8(&v25, (__n128 *)&v26.sa_data[6]);
LABEL_13:
          unsigned int v11 = *(unsigned __int16 *)v26.sa_data;
          uint64_t v19 = 0;
          uint64_t result = sub_244CC2DE4(*(unsigned char **)(a1 + 24), &v19, (uint64_t)&v20);
          int v7 = v20;
          uint64_t v10 = v19;
          if (!v20)
          {
            *(_DWORD *)(v19 + 120) = v3;
            uint64_t result = (uint64_t)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 24)
                                                                                             + 16)
                                                                               + 88))(&v20);
            int v7 = v20;
            if (!v20)
            {
              *(unsigned char *)(v10 + 88) = 4;
              char v12 = v26.sa_family == 30 ? 2 : 1;
              *(unsigned char *)(v10 + 124) = v12;
              sub_244CC034C((int *)(v10 + 8));
              uint64_t v13 = *(void *)(*(void *)(v10 + 24) + 16);
              uint64_t result = (uint64_t)(*(void *(**)(uint64_t *__return_ptr, uint64_t, void, uint64_t (*)(), uint64_t))(*(void *)v13 + 96))(&v20, v13, *(void *)(v10 + 128), sub_244CC1608, v10);
              int v7 = v20;
              if (!v20)
              {
                uint64_t result = (uint64_t)(*(void *(**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v13 + 104))(&v20, v13, *(void *)(v10 + 128));
                int v7 = v20;
                if (!v20) {
                  return (*(uint64_t (**)(uint64_t, uint64_t, __n128 *, void))(a1 + 72))(a1, v10, &v25, bswap32(v11) >> 16);
                }
              }
            }
          }
          int v5 = HIDWORD(v20);
          long long v8 = v21;
          int v9 = v22;
          int v4 = v23;
          goto LABEL_23;
        }
        uint64_t v10 = 0;
        int v9 = 1022;
        int v7 = 3;
      }
      else
      {
        uint64_t v10 = 0;
        int v9 = 1002;
        int v7 = 8;
      }
      long long v8 = "src/inet/TCPEndPointImplSockets.cpp";
LABEL_23:
      if (v3 != -1) {
        uint64_t result = close(v3);
      }
      if (v10)
      {
        if (*(unsigned char *)(v10 + 88) == 4) {
          sub_244CC09F4(v10 + 8);
        }
        uint64_t result = sub_244CC09F4(v10 + 8);
      }
      goto LABEL_29;
    }
  }
  return result;
}

void sub_244CC2B54(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 96);
  if (v2)
  {
    do
    {
      uint64_t v3 = (uint64_t)v2;
      long long v2 = (void *)*v2;
    }
    while (v2);
    sub_244CC8F2C(v3);
    uint64_t v19 = (_WORD *)v3;
    if (sub_244CC8B50(v3))
    {
      sub_244CC8BB4((uint64_t *)v3);
      int v4 = 0;
      goto LABEL_9;
    }
    sub_244CC8F5C(0xFA00uLL, 0, v15);
    sub_244CC8A0C((_WORD *)v3);
  }
  else
  {
    sub_244CC8F5C(0xFA00uLL, 0, v15);
  }
  uint64_t v3 = *(void *)v15;
  uint64_t v19 = *(_WORD **)v15;
  if (!*(void *)v15)
  {
    LODWORD(v17) = 11;
    *((void *)&v17 + 1) = "src/inet/TCPEndPointImplSockets.cpp";
    int v18 = 867;
    sub_244CC074C(a1, &v17, 0);
    goto LABEL_30;
  }
  int v4 = 1;
LABEL_9:
  int v5 = *(_DWORD *)(a1 + 120);
  uint64_t v6 = (void *)(*(void *)(v3 + 8) + *(void *)(v3 + 24));
  size_t v7 = sub_244CC8B50(v3);
  ssize_t v8 = recv(v5, v6, v7, 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    *(_WORD *)(a1 + 114) = *(_WORD *)(a1 + 112);
    if (v8)
    {
      unint64_t v9 = *((void *)v19 + 3) + v8;
      if (v4)
      {
        sub_244CC8AE4((uint64_t)v19, v9, 0);
        sub_244CC889C(&v19);
        uint64_t v10 = *(void **)(a1 + 96);
        if (v10)
        {
          sub_244CC8B70(v10, (uint64_t *)&v19);
        }
        else
        {
          *(void *)(a1 + 96) = v19;
          uint64_t v19 = 0;
        }
      }
      else
      {
        sub_244CC8AE4((uint64_t)v19, v9, *(void **)(a1 + 96));
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 88) == 4 && *(void *)(a1 + 64)) {
        char v13 = 6;
      }
      else {
        char v13 = 7;
      }
      *(unsigned char *)(a1 + 88) = v13;
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(*(void *)(a1 + 24) + 16) + 120))(v15);
      long long v14 = *(void (**)(uint64_t))(a1 + 64);
      if (v14) {
        v14(a1);
      }
    }
    goto LABEL_29;
  }
  uint64_t v11 = *__error();
  if (v11 != 35)
  {
    sub_244CC8788(v11, "src/inet/TCPEndPointImplSockets.cpp", 914, (uint64_t)&v16);
    sub_244CC074C(a1, &v16, 0);
LABEL_29:
    sub_244CC0DB4(a1);
    goto LABEL_30;
  }
  char v12 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "recv: EAGAIN, will retry", v15, 2u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(1u, 1);
  }
LABEL_30:
  if (v19) {
    sub_244CC8A0C(v19);
  }
}

uint64_t sub_244CC2DE4@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = sub_244D6A434("src/inet/InetLayer.h", 82);
  if (a1[8] == 2)
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 16))(a1);
    *a2 = v7;
    if (v7)
    {
      ssize_t v8 = sub_244CC9408();
      char v9 = *((unsigned char *)v8 + 2) + 1;
      *((unsigned char *)v8 + 2) = v9;
      uint64_t result = (uint64_t)sub_244CC9414();
      if (*(char *)(result + 2) >= v9)
      {
        int v10 = 0;
      }
      else
      {
        uint64_t result = (uint64_t)sub_244CC9414();
        int v10 = 0;
        *(unsigned char *)(result + 2) = v9;
      }
      int v11 = 93;
    }
    else
    {
      char v12 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        long long v14 = "TCP";
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "%s endpoint pool FULL", buf, 0xCu);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(1u, 1);
      }
      int v11 = 89;
      int v10 = 193;
    }
  }
  else
  {
    int v11 = 83;
    int v10 = 3;
  }
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/inet/InetLayer.h";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_244CC2F7C(void *a1)
{
  sub_244CC2FB4(a1);

  JUMPOUT(0x245695FA0);
}

void *sub_244CC2FB4(void *a1)
{
  *a1 = &unk_26F9534C8;
  long long v2 = (_WORD *)a1[13];
  if (v2) {
    sub_244CC8A0C(v2);
  }
  a1[13] = 0;
  uint64_t v3 = (_WORD *)a1[12];
  if (v3) {
    sub_244CC8A0C(v3);
  }
  a1[12] = 0;
  return a1;
}

uint64_t sub_244CC3014@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, void *a6@<X8>)
{
  if (*(unsigned __int8 *)(result + 32) > 1u)
  {
    int v13 = 50;
    int v12 = 3;
  }
  else
  {
    int v11 = (unsigned char *)result;
    if (!sub_244CBEB84(a3, &xmmword_268EC34EC)
      || sub_244CBEEA8(a3) == 3
      || (uint64_t result = sub_244CBEEA8(a3), result == a2))
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      int v14 = *a5;
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, _DWORD *, uint64_t, int *))(*(void *)v11 + 72))(v11, a2, a3, a4, &v14);
      if (*(_DWORD *)a6) {
        return result;
      }
      int v12 = 0;
      v11[32] = 1;
      int v13 = 62;
    }
    else
    {
      int v13 = 55;
      int v12 = 257;
    }
  }
  *(_DWORD *)a6 = v12;
  a6[1] = "src/inet/UDPEndPoint.cpp";
  *((_DWORD *)a6 + 4) = v13;
  return result;
}

unsigned __int8 *sub_244CC3130@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, void *a4@<X8>)
{
  if (result[32] > 1u)
  {
    int v7 = 69;
    int v6 = 3;
  }
  else
  {
    int v5 = result;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    int v8 = *a3;
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, int *))(*(void *)result + 80))(result, a2, &v8);
    if (*(_DWORD *)a4) {
      return result;
    }
    int v6 = 0;
    uint8_t v5[32] = 1;
    int v7 = 76;
  }
  *(_DWORD *)a4 = v6;
  a4[1] = "src/inet/UDPEndPoint.cpp";
  *((_DWORD *)a4 + 4) = v7;
  return result;
}

uint64_t sub_244CC31DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  int v6 = *(unsigned __int8 *)(result + 32);
  if (v6 != 1)
  {
    BOOL v7 = v6 == 2;
    if (v6 == 2) {
      int v8 = 0;
    }
    else {
      int v8 = 3;
    }
    if (v7) {
      int v9 = 83;
    }
    else {
      int v9 = 88;
    }
    goto LABEL_8;
  }
  uint64_t v10 = result;
  *(void *)(result + 40) = a2;
  *(void *)(result + 48) = a3;
  *(void *)(result + 16) = a4;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 88))(result);
  int v8 = *(_DWORD *)a5;
  if (!*(_DWORD *)a5)
  {
    *(unsigned char *)(v10 + 32) = 2;
    int v9 = 99;
LABEL_8:
    *(_DWORD *)a5 = v8;
    a5[1] = "src/inet/UDPEndPoint.cpp";
    *((_DWORD *)a5 + 4) = v9;
  }
  return result;
}

uint64_t sub_244CC328C@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, int *a5@<X4>, void *a6@<X8>)
{
  int v15 = 0;
  sub_244CBF148((uint64_t)v13);
  long long v14 = *a2;
  __int16 v16 = a3;
  int v15 = *a5;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 96))(a1, v13, a4);
  if (!*(_DWORD *)a6)
  {
    *(_DWORD *)a6 = 0;
    a6[1] = "src/inet/UDPEndPoint.cpp";
    *((_DWORD *)a6 + 4) = 121;
  }
  return result;
}

uint64_t sub_244CC3354@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (!*(_DWORD *)a2)
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/inet/UDPEndPoint.cpp";
    *((_DWORD *)a2 + 4) = 121;
  }
  return result;
}

unsigned char *sub_244CC33C0(unsigned char *result)
{
  if (result[32] != 3)
  {
    result[32] = 3;
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t sub_244CC33FC@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244CBECFC((uint64_t)a3);
  if (result)
  {
    uint64_t result = sub_244CBEEA8(a3);
    if (result == 2)
    {
      int v10 = *a2;
      return (*(uint64_t (**)(uint64_t, int *, _DWORD *, uint64_t))(*(void *)a1 + 64))(a1, &v10, a3, 1);
    }
    if (result == 1)
    {
      int v11 = *a2;
      return (*(uint64_t (**)(uint64_t, int *, _DWORD *, uint64_t))(*(void *)a1 + 56))(a1, &v11, a3, 1);
    }
    *(_DWORD *)a4 = 257;
    *(void *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    int v9 = 149;
  }
  else
  {
    *(_DWORD *)a4 = 257;
    *(void *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    int v9 = 135;
  }
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

uint64_t sub_244CC351C@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244CBECFC((uint64_t)a3);
  if (result)
  {
    uint64_t result = sub_244CBEEA8(a3);
    if (result == 2)
    {
      int v10 = *a2;
      return (*(uint64_t (**)(uint64_t, int *, _DWORD *, void))(*(void *)a1 + 64))(a1, &v10, a3, 0);
    }
    if (result == 1)
    {
      int v11 = *a2;
      return (*(uint64_t (**)(uint64_t, int *, _DWORD *, void))(*(void *)a1 + 56))(a1, &v11, a3, 0);
    }
    *(_DWORD *)a4 = 257;
    *(void *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    int v9 = 169;
  }
  else
  {
    *(_DWORD *)a4 = 257;
    *(void *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    int v9 = 155;
  }
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

uint64_t sub_244CC363C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, socklen_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = sub_244CC38E4(a1, a2, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    if (a2 == 1)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      int v17 = *(_DWORD *)(a1 + 56);
      *(_WORD *)&v26.sa_len = 512;
      *(_DWORD *)&v26.sa_data[10] = 0;
      *(_WORD *)v26.sa_data = __rev16(a4);
      *(void *)&v26.sa_data[2] = sub_244CBEBF4(a3);
      *(_OWORD *)a6 = xmmword_26519C3B0;
      a6[2] = 143;
      if (bind(v17, &v26, 0x10u))
      {
        int v18 = __error();
        sub_244CC8788(*v18, "src/inet/UDPEndPointImplSockets.cpp", 148, (uint64_t)a6);
      }
      else
      {
        socklen_t v25 = 1;
        setsockopt(v17, 0xFFFF, 32, &v25, 4u);
        setsockopt(v17, 0, 9, &v26, 0x10u);
      }
      socklen_t v25 = 64;
      int v21 = &v25;
      int v22 = v17;
      int v23 = 0;
    }
    else
    {
      if (a2 != 2)
      {
        int v19 = 197;
        int v20 = 257;
LABEL_20:
        *(_DWORD *)a6 = v20;
        a6[1] = "src/inet/UDPEndPointImplSockets.cpp";
        *((_DWORD *)a6 + 4) = v19;
        return result;
      }
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      int v13 = *(_DWORD *)(a1 + 56);
      socklen_t v14 = *a5;
      *(void *)&v26.sa_len = 7680;
      *(_WORD *)v26.sa_data = __rev16(a4);
      *(void *)&v26.sa_data[6] = sub_244CBEBFC(a3);
      uint64_t v27 = v15;
      socklen_t v25 = v14;
      socklen_t v28 = v14;
      *(_OWORD *)a6 = xmmword_26519C398;
      a6[2] = 108;
      if (bind(v13, &v26, 0x1Cu))
      {
        __int16 v16 = __error();
        sub_244CC8788(*v16, "src/inet/UDPEndPointImplSockets.cpp", 113, (uint64_t)a6);
      }
      else
      {
        setsockopt(v13, 41, 9, &v25, 4u);
      }
      int v24 = 64;
      int v21 = (socklen_t *)&v24;
      int v22 = v13;
      int v23 = 41;
    }
    uint64_t result = setsockopt(v22, v23, 10, v21, 4u);
    if (*(_DWORD *)a6) {
      return result;
    }
    *(_WORD *)(a1 + 76) = a4;
    *(_DWORD *)(a1 + 72) = *a5;
    if (!a4)
    {
      socklen_t v25 = 128;
      uint64_t result = getsockname(*(_DWORD *)(a1 + 56), &v26, &v25);
      if (!result && (v26.sa_family == 30 || v26.sa_family == 2)) {
        *(_WORD *)(a1 + 76) = bswap32(*(unsigned __int16 *)v26.sa_data) >> 16;
      }
    }
    int v20 = 0;
    int v19 = 222;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_244CC38E4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(result + 56) != -1)
  {
    if (*(unsigned __int8 *)(result + 60) != a2)
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
      int v6 = 566;
      goto LABEL_13;
    }
LABEL_3:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    int v6 = 569;
LABEL_13:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  if (a2 == 2)
  {
    int v7 = 30;
  }
  else
  {
    if (a2 != 1)
    {
      *(_DWORD *)a3 = 257;
      *(void *)(a3 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
      int v6 = 471;
      goto LABEL_13;
    }
    int v7 = 2;
  }
  uint64_t v8 = socket(v7, 2, 0);
  *(_DWORD *)(v4 + 56) = v8;
  if (v8 != -1)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(v4 + 24) + 16) + 88))(*(void *)(*(void *)(v4 + 24) + 16), v8, v4 + 64);
    if (*(_DWORD *)a3)
    {
      uint64_t result = close(*(_DWORD *)(v4 + 56));
      *(_DWORD *)(v4 + 56) = -1;
      return result;
    }
    *(unsigned char *)(v4 + 60) = a2;
    int v21 = 1;
    setsockopt(*(_DWORD *)(v4 + 56), 0xFFFF, 4, &v21, 4u);
    if (setsockopt(*(_DWORD *)(v4 + 56), 0xFFFF, 512, &v21, 4u))
    {
      int v10 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = *__error();
        *(_DWORD *)long long buf = 67109120;
        int v23 = v11;
        _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "SO_REUSEPORT failed: %d", buf, 8u);
      }
      if (sub_244CC4E58(1u))
      {
        __error();
        sub_244CC4DE0(1u, 1);
      }
    }
    int v12 = *(_DWORD *)(v4 + 56);
    if (a2 == 2)
    {
      if (setsockopt(v12, 41, 27, &v21, 4u))
      {
        int v13 = sub_244CC8484(1u, "Inet");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v14 = *__error();
          *(_DWORD *)long long buf = 67109120;
          int v23 = v14;
          _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "IPV6_V6ONLY failed: %d", buf, 8u);
        }
        if (sub_244CC4E58(1u))
        {
          __error();
          sub_244CC4DE0(1u, 1);
        }
      }
      if (!setsockopt(*(_DWORD *)(v4 + 56), 41, 61, &v21, 4u)) {
        goto LABEL_39;
      }
      uint64_t v15 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *__error();
        *(_DWORD *)long long buf = 67109120;
        int v23 = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "IPV6_PKTINFO failed: %d", buf, 8u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_39;
      }
    }
    else
    {
      if (!setsockopt(v12, 0, 26, &v21, 4u)) {
        goto LABEL_39;
      }
      int v17 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = *__error();
        *(_DWORD *)long long buf = 67109120;
        int v23 = v18;
        _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "IP_PKTINFO failed: %d", buf, 8u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_39;
      }
    }
    __error();
    sub_244CC4DE0(1u, 1);
LABEL_39:
    uint64_t result = setsockopt(*(_DWORD *)(v4 + 56), 0xFFFF, 4130, &v21, 4u);
    if (result)
    {
      int v19 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = *__error();
        *(_DWORD *)long long buf = 67109120;
        int v23 = v20;
        _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "SO_NOSIGPIPE failed: %d", buf, 8u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result)
      {
        __error();
        uint64_t result = sub_244CC4DE0(1u, 1);
      }
    }
    goto LABEL_3;
  }
  uint64_t v9 = *__error();

  return sub_244CC8788(v9, "src/inet/UDPEndPointImplSockets.cpp", 477, a3);
}

uint64_t sub_244CC3DE0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_244CC38E4(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 45;
    a3[1] = "src/inet/UDPEndPointImplSockets.cpp";
    *((_DWORD *)a3 + 4) = 262;
  }
  return result;
}

uint64_t sub_244CC3E30@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 72);
  return result;
}

uint64_t sub_244CC3E3C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 76);
}

void *sub_244CC3E44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, void, void (*)(char, uint64_t), uint64_t))(*(void *)v4 + 96))(a2, v4, *(void *)(a1 + 64), sub_244CC3F18, a1);
  if (!*(_DWORD *)a2)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 104);
    return (void *)v7(v4, v6);
  }
  return result;
}

void sub_244CC3F18(char a1, uint64_t a2)
{
}

uint64_t sub_244CC3F28@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*a3)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    int v12 = 287;
    goto LABEL_8;
  }
  uint64_t v7 = result;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v8 = (_DWORD *)(a2 + 16);
  *(void *)(a4 + 16) = 0;
  int v9 = sub_244CBEEA8((_DWORD *)(a2 + 16));
  uint64_t result = sub_244CC38E4(v7, v9, a4);
  if (*(_DWORD *)a4) {
    return result;
  }
  int v10 = *(unsigned __int8 *)(v7 + 60);
  uint64_t result = sub_244CBEEA8(v8);
  if (v10 != result)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    int v12 = 294;
    goto LABEL_8;
  }
  uint64_t v11 = *a3;
  if (!*(void *)*a3)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 24);
    v22[0] = v13;
    v22[1] = v14;
    memset(v31, 0, sizeof(v31));
    *(void *)&v21.msg_namelen = 0;
    memset(&v21.msg_iovlen, 0, 24);
    v21.msg_iov = (iovec *)v22;
    v21.msg_iovlen = 1;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    v21.msg_name = &v23;
    if (*(unsigned char *)(v7 + 60) == 2)
    {
      BYTE1(v23) = 30;
      WORD1(v23) = bswap32(*(unsigned __int16 *)(a2 + 38)) >> 16;
      *((void *)&v23 + 1) = sub_244CBEBFC((uint64_t)v8);
      *(void *)&long long v24 = v15;
      int v16 = *(_DWORD *)(a2 + 32);
      DWORD2(v24) = v16;
      socklen_t v17 = 28;
    }
    else
    {
      BYTE1(v23) = 2;
      WORD1(v23) = bswap32(*(unsigned __int16 *)(a2 + 38)) >> 16;
      DWORD1(v23) = sub_244CBEBF4((uint64_t)v8);
      int v16 = *(_DWORD *)(a2 + 32);
      socklen_t v17 = 16;
    }
    v21.msg_namelen = v17;
    if (!v16)
    {
      int v16 = *(_DWORD *)(v7 + 72);
      if (!v16)
      {
        if (sub_244CBEEA8((_DWORD *)a2) == 3)
        {
LABEL_21:
          uint64_t result = sendmsg(*(_DWORD *)(v7 + 56), &v21, 0);
          if (result == -1)
          {
            int v20 = __error();
            return sub_244CC8788(*v20, "src/inet/UDPEndPointImplSockets.cpp", 421, a4);
          }
          if (result == *(void *)(*a3 + 24))
          {
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
            int v12 = 430;
          }
          else
          {
            *(_DWORD *)a4 = 195;
            *(void *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
            int v12 = 428;
          }
          goto LABEL_8;
        }
        int v16 = 0;
      }
    }
    v21.msg_control = v31;
    v21.msg_controllen = 256;
    int v18 = *(unsigned __int8 *)(v7 + 60);
    if (v18 == 1)
    {
      *(void *)&v31[0] = 24;
      DWORD2(v31[0]) = 26;
      HIDWORD(v31[0]) = v16;
      LODWORD(v31[1]) = sub_244CBEBF4(a2);
      v21.msg_controllen = 24;
      int v18 = *(unsigned __int8 *)(v7 + 60);
    }
    if (v18 == 2)
    {
      *(void *)&v31[0] = 0x2900000020;
      DWORD2(v31[0]) = 46;
      HIDWORD(v31[1]) = v16;
      *(void *)((char *)v31 + 12) = sub_244CBEBFC(a2);
      *(void *)((char *)&v31[1] + 4) = v19;
      v21.msg_controllen = 32;
    }
    goto LABEL_21;
  }
  *(_DWORD *)a4 = 4;
  *(void *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
  int v12 = 297;
LABEL_8:
  *(_DWORD *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_244CC423C(uint64_t result)
{
  if (*(_DWORD *)(result + 56) != -1)
  {
    uint64_t v1 = result;
    (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(result + 24) + 16) + 136))(v2);
    uint64_t result = close(*(_DWORD *)(v1 + 56));
    *(_DWORD *)(v1 + 56) = -1;
  }
  return result;
}

uint64_t sub_244CC42B4(unsigned char *a1)
{
  sub_244CC33C0(a1);

  return sub_244CC42EC((uint64_t)(a1 + 8));
}

uint64_t sub_244CC42EC(uint64_t result)
{
  if (!*(_DWORD *)result) {
    sub_244E23488();
  }
  int v1 = *(_DWORD *)result - 1;
  *(_DWORD *)uint64_t result = v1;
  if (!v1)
  {
    uint64_t v2 = result - 8;
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v4 = sub_244CC9408();
    --*((unsigned char *)v4 + 3);
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24);
    return v5(v3, v2);
  }
  return result;
}

void sub_244CC437C(uint64_t a1, char a2)
{
  v26[17] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 32) != 2) {
    return;
  }
  if (!*(void *)(a1 + 40) || (a2 & 1) == 0) {
    return;
  }
  unsigned int v22 = 0;
  sub_244CBF148((uint64_t)v21);
  __int16 v24 = *(_WORD *)(a1 + 76);
  unsigned int v22 = *(_DWORD *)(a1 + 72);
  sub_244CC8F5C(0x62FuLL, 0, v25);
  int v5 = (_WORD *)v25[0];
  int v20 = (_WORD *)v25[0];
  if (!v25[0])
  {
    LODWORD(v2) = 689;
    unint64_t v8 = 0xB0000000BLL;
    goto LABEL_11;
  }
  v19[0] = *(void *)(v25[0] + 8);
  v19[1] = sub_244CC8B50(v25[0]);
  memset(v26, 0, 128);
  *(&v18.msg_namelen + 1) = 0;
  *(&v18.msg_iovlen + 1) = 0;
  v18.msg_name = v26;
  v18.msg_namelen = 128;
  v18.msg_iov = (iovec *)v19;
  v18.msg_iovlen = 1;
  v18.msg_control = v25;
  v18.msg_flags = 0;
  v18.msg_controllen = 256;
  unint64_t v6 = recvmsg(*(_DWORD *)(a1 + 56), &v18, 128);
  if (v6 == -1)
  {
    uint64_t v11 = __error();
    sub_244CC8788(*v11, "src/inet/UDPEndPointImplSockets.cpp", 620, (uint64_t)&v16);
    unint64_t v8 = v16.n128_u64[0];
    if (v16.n128_u32[0])
    {
      int v9 = (const char *)v16.n128_u64[1];
      uint64_t v2 = v17;
LABEL_12:
      if (*(void *)(a1 + 48))
      {
        unint64_t v14 = v8;
        sub_244CC8788(35, "src/inet/UDPEndPointImplSockets.cpp", 699, (uint64_t)v25);
        if (v14 != LODWORD(v25[0]))
        {
          int v10 = *(void (**)(uint64_t, void *, void))(a1 + 48);
          v15[0] = v14;
          v15[1] = v9;
          _DWORD v15[2] = v2;
          v10(a1, v15, 0);
        }
      }
      if (v5) {
        goto LABEL_16;
      }
      return;
    }
  }
  else
  {
    unsigned __int16 v7 = v6;
    if (sub_244CC8B50((uint64_t)v5) < v6)
    {
      LODWORD(v2) = 624;
      unint64_t v8 = 0xC2000000C2;
LABEL_11:
      int v9 = "src/inet/UDPEndPointImplSockets.cpp";
      goto LABEL_12;
    }
    sub_244CC8AE4((uint64_t)v5, v7, 0);
    if (BYTE1(v26[0]) == 2)
    {
      sub_244CBEBD0((uint64_t)&v16, (_DWORD *)v26 + 1);
    }
    else
    {
      if (BYTE1(v26[0]) != 30)
      {
        LODWORD(v2) = 644;
        unint64_t v8 = 0x300000003;
        goto LABEL_11;
      }
      sub_244CBEBE8(&v16, (__n128 *)&v26[1]);
    }
    v21[0] = v16;
    __int16 v23 = bswap32(WORD1(v26[0])) >> 16;
  }
  if (v18.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v18.msg_control;
    if (v18.msg_control)
    {
      while (1)
      {
        unsigned int v13 = msg_control[1];
        if (v13 != 41) {
          break;
        }
        if (msg_control[2] == 46)
        {
          unsigned int v22 = msg_control[7];
          sub_244CBEBE8(&v16, (__n128 *)(msg_control + 3));
LABEL_33:
          v21[1] = v16;
        }
LABEL_34:
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
        if ((char *)(msg_control + 3) > (char *)v18.msg_control + v18.msg_controllen) {
          goto LABEL_35;
        }
      }
      if (v13 || msg_control[2] != 26) {
        goto LABEL_34;
      }
      unsigned int v22 = msg_control[3];
      sub_244CBEBD0((uint64_t)&v16, msg_control + 5);
      goto LABEL_33;
    }
  }
LABEL_35:
  sub_244CC889C(&v20);
  (*(void (**)(uint64_t, _WORD **, __n128 *))(a1 + 40))(a1, &v20, v21);
  int v5 = v20;
  if (v20) {
LABEL_16:
  }
    sub_244CC8A0C(v5);
}

double sub_244CC46C0@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  if (a2 == 4)
  {
    int v6 = a3;
    int v7 = 0;
  }
  else
  {
    if (a2 != 6)
    {
      LODWORD(v9) = 257;
      *((void *)&v9 + 1) = "src/inet/UDPEndPointImplSockets.cpp";
      LODWORD(v10) = 738;
      goto LABEL_7;
    }
    int v6 = a3;
    int v7 = 41;
  }
  sub_244CC4C78(v5, v6, v7, (uint64_t)&v9);
LABEL_7:
  double result = *(double *)&v9;
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_244CC474C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*a2)
  {
    sub_244CBF9C8(v18);
    if (!sub_244CBFA04((uint64_t)v18))
    {
LABEL_7:
      uint64_t result = (uint64_t)sub_244CBF9D0(v18);
      *(_DWORD *)a5 = 272;
      *(void *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
      int v11 = 784;
      goto LABEL_15;
    }
    while (1)
    {
      sub_244CBFC3C(v18, &v16);
      if (v16 == *a2)
      {
        sub_244CBFA98((uint64_t)v18, &v17, (uint64_t)v15);
        if (!v15[0] && sub_244CBEC68(&v17)) {
          break;
        }
      }
      sub_244CBFA20(v18);
      if ((sub_244CBFA04((uint64_t)v18) & 1) == 0) {
        goto LABEL_7;
      }
    }
    long long v19 = v17;
    sub_244CBF9D0(v18);
    int v12 = sub_244CBEBF4((uint64_t)&v19);
  }
  else
  {
    int v12 = 0;
  }
  v15[1] = v12;
  v15[0] = sub_244CBEBF4(a3);
  if (a4) {
    int v13 = 12;
  }
  else {
    int v13 = 13;
  }
  uint64_t result = setsockopt(*(_DWORD *)(a1 + 56), 0, v13, v15, 8u);
  if (result)
  {
    unint64_t v14 = __error();
    return sub_244CC8788(*v14, "src/inet/UDPEndPointImplSockets.cpp", 812, a5);
  }
  *(_DWORD *)a5 = 0;
  *(void *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
  int v11 = 814;
LABEL_15:
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_244CC48B4@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v9 = *a2;
  if (*a2) {
    goto LABEL_33;
  }
  sub_244CBF650((uint64_t)&v29);
  if (!sub_244CBF6B4((uint64_t)&v29)) {
    goto LABEL_28;
  }
  char v11 = 0;
  if (a4) {
    int v12 = "join";
  }
  else {
    int v12 = "leave";
  }
  if (a4) {
    int v13 = "Joined";
  }
  else {
    int v13 = "Left";
  }
  do
  {
    if (sub_244CBF950((uint64_t)&v29))
    {
      if (sub_244CBF844((uint64_t)&v29))
      {
        sub_244CBF720(&v29, &v28);
        sub_244CBFE98((uint64_t)&v28, &v27, (uint64_t)v24);
        if (!*(_DWORD *)v24 && sub_244CBEEA8(&v27) == 2)
        {
          sub_244CBF774((uint64_t *)&v29, v35, 0x10uLL, (uint64_t)v24);
          *(void *)__int16 v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          int v23 = v28;
          (*(void (**)(uint8_t *__return_ptr, int *, int *, uint64_t, uint64_t))(*(void *)a1 + 64))(v24, a1, &v23, a3, a4);
          int v14 = *(_DWORD *)v24;
          uint64_t v15 = sub_244CC8484(1u, "Inet");
          int v16 = v15;
          if (v14)
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315394;
              uint64_t v32 = v12;
              __int16 v33 = 2080;
              uint64_t v34 = v35;
              _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "  Failed to %s multicast group on interface %s", buf, 0x16u);
            }
            if (!sub_244CC4E58(1u)) {
              goto LABEL_25;
            }
            uint64_t v17 = 1;
          }
          else
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136315394;
              uint64_t v32 = v13;
              __int16 v33 = 2080;
              uint64_t v34 = v35;
              _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "  %s multicast group on interface %s", buf, 0x16u);
            }
            if (!sub_244CC4E58(3u)) {
              goto LABEL_25;
            }
            uint64_t v17 = 3;
          }
          sub_244CC4DE0(1u, v17);
LABEL_25:
          char v11 = 1;
        }
      }
    }
  }
  while ((sub_244CBF6B4((uint64_t)&v29) & 1) != 0);
  if (v11)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    *(_DWORD *)(a5 + 16) = 878;
    return (uint64_t)sub_244CBF65C(&v29);
  }
LABEL_28:
  long long v19 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int16 v24 = 0;
    _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "No valid IPv6 multicast interface found", v24, 2u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(1u, 1);
  }
  sub_244CBF65C(&v29);
  int v9 = *a2;
LABEL_33:
  int v30 = v9;
  *(void *)&v29.if_index = sub_244CBEBFC(a3);
  v29.if_name = v20;
  if (a4) {
    int v21 = 12;
  }
  else {
    int v21 = 13;
  }
  uint64_t result = setsockopt(a1[14], 41, v21, &v29, 0x14u);
  if (result)
  {
    unsigned int v22 = __error();
    return sub_244CC8788(*v22, "src/inet/UDPEndPointImplSockets.cpp", 897, a5);
  }
  else
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    *(_DWORD *)(a5 + 16) = 899;
  }
  return result;
}

void sub_244CC4C64()
{
}

uint64_t sub_244CC4C78@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a2;
  uint64_t result = setsockopt(a1, a3, 11, &v7, 4u);
  if (result)
  {
    int v6 = __error();
    return sub_244CC8788(*v6, "src/inet/UDPEndPointImplSockets.cpp", 712, a4);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    *(_DWORD *)(a4 + 16) = 715;
  }
  return result;
}

void sub_244CC4CFC(void *a1@<X8>)
{
  if ((int)atomic_fetch_add(dword_268EBEB18, 1u) < 1)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_244CC4D68((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0;
    a1[1] = "src/lib/support/CHIPMem.cpp";
    *((_DWORD *)a1 + 4) = 45;
  }
}

uint64_t sub_244CC4D3C(uint64_t result, uint64_t a2)
{
  int v2 = atomic_load((unsigned int *)dword_268EBEB18);
  if (v2 >= 1 && atomic_fetch_add(dword_268EBEB18, 0xFFFFFFFF) == 1) {
    return nullsub_13(result, a2);
  }
  return result;
}

void sub_244CC4D68(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/lib/support/CHIPMem-Malloc.cpp";
  *(_DWORD *)(a1 + 16) = 78;
}

void *sub_244CC4D84(size_t a1)
{
  return malloc_type_malloc(a1, 0xC8FB3BCAuLL);
}

void *sub_244CC4D90(size_t a1, size_t a2)
{
  return malloc_type_calloc(a1, a2, 0xFC646414uLL);
}

void *sub_244CC4D9C(void *a1, size_t a2)
{
  return malloc_type_realloc(a1, a2, 0xB5CE4D8FuLL);
}

BOOL sub_244CC4DAC(uint64_t a1)
{
  return a1 != 0;
}

char *sub_244CC4DB8(int a1)
{
  if (a1 >= 42) {
    int v1 = 0;
  }
  else {
    int v1 = a1;
  }
  return &asc_244EAE3D9[4 * v1];
}

unint64_t sub_244CC4DD0(unint64_t result)
{
  return result;
}

uint64_t sub_244CC4DE0(unsigned int a1, uint64_t a2)
{
  return sub_244CC4E0C(a1, a2);
}

uint64_t sub_244CC4E0C(unsigned int a1, uint64_t a2)
{
  if (a1 >= 0x2A) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = a1;
  }
  uint64_t v3 = &asc_244EAE3D9[4 * v2];
  uint64_t v4 = (uint64_t (*)(char *))atomic_load(&qword_268EBEB20);
  if (v4) {
    return v4(v3);
  }
  else {
    return nullsub_13(v3, a2);
  }
}

uint64_t sub_244CC4E38()
{
  return atomic_load(byte_268EBD1AC);
}

uint64_t sub_244CC4E48(uint64_t result)
{
  return result;
}

BOOL sub_244CC4E58(unsigned int a1)
{
  unsigned int v1 = atomic_load(byte_268EBD1AC);
  return v1 >= a1;
}

uint64_t sub_244CC4E70(unsigned __int8 *a1, int a2, unsigned char *a3, uint64_t (*a4)(uint64_t))
{
  __int16 v4 = (__int16)a3;
  __int16 v5 = (__int16)a3;
  if (a2)
  {
    __int16 v7 = a2;
    int v9 = a3;
    do
    {
      unsigned int v10 = *a1;
      uint64_t v11 = 16 * (v10 & 3);
      if (v7 == 1)
      {
        __int16 v7 = 0;
        uint64_t v12 = 255;
        ++a1;
      }
      else
      {
        unsigned int v13 = a1[1];
        uint64_t v11 = v11 | (v13 >> 4);
        uint64_t v12 = 4 * (v13 & 0xF);
        if (v7 != 2)
        {
          unsigned int v15 = a1[2];
          uint64_t v12 = v12 | (v15 >> 6);
          uint64_t v14 = v15 & 0x3F;
          a1 += 3;
          v7 -= 3;
          goto LABEL_9;
        }
        __int16 v7 = 0;
        a1 += 2;
      }
      uint64_t v14 = 255;
LABEL_9:
      unsigned char *v9 = a4(v10 >> 2);
      v9[1] = a4(v11);
      v9[2] = a4(v12);
      char v16 = a4(v14);
      __int16 v5 = (_WORD)v9 + 4;
      void v9[3] = v16;
      v9 += 4;
    }
    while (v7);
  }
  return (unsigned __int16)(v5 - v4);
}

uint64_t sub_244CC4F68(unsigned __int8 *a1, int a2, unsigned char *a3)
{
  return sub_244CC4E70(a1, a2, a3, (uint64_t (*)(uint64_t))sub_244CC4F7C);
}

uint64_t sub_244CC4F7C(unsigned int a1)
{
  int v1 = (a1 - 52);
  if (v1 == 11) {
    char v2 = 47;
  }
  else {
    char v2 = 61;
  }
  if (v1 == 10) {
    char v3 = 43;
  }
  else {
    char v3 = v2;
  }
  if (a1 - 52 <= 9) {
    char v4 = a1 - 4;
  }
  else {
    char v4 = v3;
  }
  if (a1 - 26 <= 0x19) {
    char v5 = a1 + 71;
  }
  else {
    char v5 = v4;
  }
  if (a1 <= 0x19) {
    return (char)(a1 + 65);
  }
  return v5;
}

uint64_t sub_244CC4FD0(unsigned __int8 *a1, int a2, unsigned char *a3)
{
  return sub_244CC4E70(a1, a2, a3, (uint64_t (*)(uint64_t))sub_244CC4FE4);
}

uint64_t sub_244CC4FE4(unsigned int a1)
{
  int v1 = (a1 - 52);
  if (v1 == 11) {
    char v2 = 95;
  }
  else {
    char v2 = 61;
  }
  if (v1 == 10) {
    char v3 = 45;
  }
  else {
    char v3 = v2;
  }
  if (a1 - 52 <= 9) {
    char v4 = a1 - 4;
  }
  else {
    char v4 = v3;
  }
  if (a1 - 26 <= 0x19) {
    char v5 = a1 + 71;
  }
  else {
    char v5 = v4;
  }
  if (a1 <= 0x19) {
    return (char)(a1 + 65);
  }
  return v5;
}

uint64_t sub_244CC5038(unsigned __int8 *a1, unsigned int a2, unsigned char *a3, uint64_t (*a4)(uint64_t))
{
  LODWORD(v8) = 0;
  do
  {
    if (a2 >= 0xBFFD) {
      uint64_t v9 = 49149;
    }
    else {
      uint64_t v9 = a2;
    }
    unsigned int v10 = sub_244CC4E70(a1, v9, a3, a4);
    uint64_t v8 = v8 + v10;
    a1 += v9;
    a3 += v10;
    a2 -= v9;
  }
  while (a2);
  return v8;
}

uint64_t sub_244CC50B8(unsigned __int8 *a1, unsigned int a2, unsigned char *a3)
{
  LODWORD(v6) = 0;
  do
  {
    if (a2 >= 0xBFFD) {
      uint64_t v7 = 49149;
    }
    else {
      uint64_t v7 = a2;
    }
    unsigned int v8 = sub_244CC4E70(a1, v7, a3, (uint64_t (*)(uint64_t))sub_244CC4F7C);
    uint64_t v6 = v6 + v8;
    a1 += v7;
    a3 += v8;
    a2 -= v7;
  }
  while (a2);
  return v6;
}

uint64_t sub_244CC5138(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t (*a4)(void))
{
  __int16 v4 = a3;
  LOWORD(v5) = a3;
  if (a2)
  {
    __int16 v7 = a2;
    char v5 = (unsigned char *)(a3 + 2);
    uint64_t v9 = MEMORY[0x263EF8318];
    __int16 v10 = a3;
    while (1)
    {
      unsigned int v11 = (char)*a1;
      if ((v11 & 0x80000000) != 0)
      {
        if (!__maskrune(v11, 0x800uLL)) {
          goto LABEL_17;
        }
      }
      else if ((*(_DWORD *)(v9 + 4 * v11 + 60) & 0x800) == 0)
      {
        goto LABEL_17;
      }
      if (v7 == 1) {
        return (unsigned __int16)-1;
      }
      int v12 = ((uint64_t (*)(void))a4)(*a1);
      unsigned int v13 = ((uint64_t (*)(void))a4)(a1[1]);
      unsigned __int16 v14 = -1;
      if (v12 == 255) {
        return v14;
      }
      char v15 = v13;
      if (v13 == 255) {
        return v14;
      }
      *(v5 - 2) = (v13 >> 4) | (4 * v12);
      if (v7 == 2)
      {
        LOWORD(v5) = v10 + 1;
        return (unsigned __int16)((_WORD)v5 - v4);
      }
      if (a1[2] == 61)
      {
        LOWORD(v5) = (_WORD)v5 - 1;
        return (unsigned __int16)((_WORD)v5 - v4);
      }
      unsigned int v16 = a4();
      if (v16 == 255) {
        return (unsigned __int16)-1;
      }
      char v17 = v16;
      *(v5 - 1) = (v16 >> 2) | (16 * v15);
      if (v7 == 3) {
        return (unsigned __int16)((_WORD)v5 - v4);
      }
      if (a1[3] == 61) {
        break;
      }
      int v18 = a4();
      if (v18 == 255) {
        return (unsigned __int16)-1;
      }
      v7 -= 4;
      v10 += 3;
      unsigned char *v5 = v18 | (v17 << 6);
      v5 += 3;
      a1 += 4;
      if (!v7)
      {
LABEL_17:
        LOWORD(v5) = (_WORD)v5 - 2;
        return (unsigned __int16)((_WORD)v5 - v4);
      }
    }
    LOWORD(v5) = v10 + 2;
  }
  return (unsigned __int16)((_WORD)v5 - v4);
}

uint64_t sub_244CC52A8(unsigned __int8 *a1, int a2, uint64_t a3)
{
  return sub_244CC5138(a1, a2, a3, (uint64_t (*)(void))sub_244CC52BC);
}

uint64_t sub_244CC52BC(int a1)
{
  unsigned int v1 = a1 - 65;
  if ((a1 - 97) >= 0x1A) {
    char v2 = -1;
  }
  else {
    char v2 = a1 - 71;
  }
  if (v1 >= 0x1A) {
    LOBYTE(v1) = v2;
  }
  if ((a1 - 48) <= 9) {
    unsigned __int8 v3 = a1 + 4;
  }
  else {
    unsigned __int8 v3 = v1;
  }
  if (a1 == 47) {
    unsigned __int8 v3 = 63;
  }
  if (a1 == 43) {
    return 62;
  }
  else {
    return v3;
  }
}

uint64_t sub_244CC5308(unsigned __int8 *a1, int a2, uint64_t a3)
{
  return sub_244CC5138(a1, a2, a3, (uint64_t (*)(void))sub_244CC531C);
}

uint64_t sub_244CC531C(int a1)
{
  unsigned int v1 = a1 - 65;
  if ((a1 - 97) >= 0x1A) {
    char v2 = -1;
  }
  else {
    char v2 = a1 - 71;
  }
  if (v1 >= 0x1A) {
    LOBYTE(v1) = v2;
  }
  if ((a1 - 48) <= 9) {
    unsigned __int8 v3 = a1 + 4;
  }
  else {
    unsigned __int8 v3 = v1;
  }
  if (a1 == 95) {
    unsigned __int8 v3 = 63;
  }
  if (a1 == 45) {
    return 62;
  }
  else {
    return v3;
  }
}

uint64_t sub_244CC5368(unsigned __int8 *a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a3;
  unsigned int v6 = a2;
  __int16 v7 = a1;
  if (a2 >= 0xFFFC) {
    unsigned int v8 = 65532;
  }
  else {
    unsigned int v8 = a2;
  }
  unsigned int v9 = sub_244CC5138(a1, v8, a3, a4);
  if (v9 == 0xFFFF) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v10) = 0;
  while (1)
  {
    uint64_t v10 = v10 + v9;
    v6 -= v8;
    if (!v6) {
      break;
    }
    v7 += v8;
    v5 += v9;
    if (v6 >= 0xFFFC) {
      unsigned int v8 = 65532;
    }
    else {
      unsigned int v8 = v6;
    }
    unsigned int v9 = sub_244CC5138(v7, v8, v5, a4);
    if (v9 == 0xFFFF) {
      return 0xFFFFFFFFLL;
    }
  }
  return v10;
}

uint64_t sub_244CC5410(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  return sub_244CC5368(a1, a2, a3, (uint64_t (*)(void))sub_244CC52BC);
}

uint64_t sub_244CC5424(uint64_t result, unsigned char *a2)
{
  if (!*(_DWORD *)(result + 24))
  {
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      *a2 = *(unsigned char *)(*(void *)(result + 8))++;
      uint64_t v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 1);
    }
    else
    {
      *(_DWORD *)(result + 24) = 25;
      *(void *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(void *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_244CC5484(uint64_t result, BOOL *a2)
{
  if (!*(_DWORD *)(result + 24))
  {
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      *a2 = *(unsigned char *)(*(void *)(result + 8))++ != 0;
      uint64_t v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 1);
    }
    else
    {
      *(_DWORD *)(result + 24) = 25;
      *(void *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(void *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_244CC54EC(uint64_t result, _WORD *a2)
{
  if (!*(_DWORD *)(result + 24))
  {
    if (*(void *)(result + 16) > 1uLL)
    {
      *a2 = **(_WORD **)(result + 8);
      *(void *)(result + 8) += 2;
      uint64_t v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 2);
    }
    else
    {
      uint64_t v2 = 0;
      *(_DWORD *)(result + 24) = 25;
      *(void *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(void *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_244CC5558(uint64_t result, _DWORD *a2)
{
  if (!*(_DWORD *)(result + 24))
  {
    if (*(void *)(result + 16) > 3uLL)
    {
      *a2 = **(_DWORD **)(result + 8);
      *(void *)(result + 8) += 4;
      uint64_t v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 4);
    }
    else
    {
      uint64_t v2 = 0;
      *(_DWORD *)(result + 24) = 25;
      *(void *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(void *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_244CC55C4(uint64_t result, void *a2)
{
  if (!*(_DWORD *)(result + 24))
  {
    if (*(void *)(result + 16) > 7uLL)
    {
      *a2 = **(void **)(result + 8);
      *(void *)(result + 8) += 8;
      uint64_t v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 8);
    }
    else
    {
      uint64_t v2 = 0;
      *(_DWORD *)(result + 24) = 25;
      *(void *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(void *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_244CC5630(uint64_t a1, void *__dst, size_t __n)
{
  if (__n >> 16 || *(void *)(a1 + 16) < __n)
  {
    *(_DWORD *)(a1 + 24) = 25;
    *(void *)(a1 + 32) = "src/lib/support/BufferReader.cpp";
    *(_DWORD *)(a1 + 40) = 81;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    memcpy(__dst, *(const void **)(a1 + 8), __n);
    uint64_t v5 = (unsigned __int16)(*(_DWORD *)(a1 + 16) - __n);
    *(void *)(a1 + 8) += __n;
    *(void *)(a1 + 16) = v5;
  }
  return a1;
}

void *sub_244CC56BC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  unint64_t v6 = a1[1];
  unint64_t v5 = a1[2];
  BOOL v7 = v6 >= v5;
  BOOL v8 = v6 > v5;
  size_t v9 = v6 - v5;
  if (v8)
  {
    if (!v7) {
      size_t v9 = 0;
    }
    if (v9 >= v4) {
      size_t v10 = v4;
    }
    else {
      size_t v10 = v9;
    }
    memmove((void *)(*a1 + v5), __s, v10);
    unint64_t v5 = a1[2];
  }
  a1[2] = v5 + v4;
  return a1;
}

void *sub_244CC572C(void *a1, const void *a2, size_t a3)
{
  size_t v3 = a3;
  unint64_t v6 = a1[1];
  unint64_t v5 = a1[2];
  BOOL v7 = v6 >= v5;
  BOOL v8 = v6 > v5;
  size_t v9 = v6 - v5;
  if (v8)
  {
    if (!v7) {
      size_t v9 = 0;
    }
    size_t v10 = (void *)(*a1 + v5);
    if (v9 < a3) {
      a3 = v9;
    }
    memmove(v10, a2, a3);
    unint64_t v5 = a1[2];
  }
  a1[2] = v5 + v3;
  return a1;
}

void *sub_244CC5784(void *result, char a2)
{
  unint64_t v2 = result[2];
  if (v2 < result[1])
  {
    *(unsigned char *)(*result + v2) = a2;
    unint64_t v2 = result[2];
  }
  result[2] = v2 + 1;
  return result;
}

void *sub_244CC57A8(void *result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = result[2];
    do
    {
      if (v3 < result[1])
      {
        *(unsigned char *)(*result + v3) = a2;
        unint64_t v3 = result[2];
      }
      result[2] = ++v3;
      a2 >>= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

void *sub_244CC57E0(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = result[2];
    do
    {
      if (v3 < result[1])
      {
        *(unsigned char *)(*result + v3) = a2;
        unint64_t v3 = result[2];
      }
      result[2] = ++v3;
      a2 >>= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

void *sub_244CC5818(void *result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = result[2];
    char v4 = 8 * a3 - 8;
    do
    {
      if (v3 < result[1])
      {
        *(unsigned char *)(*result + v3) = a2 >> v4;
        unint64_t v3 = result[2];
      }
      result[2] = ++v3;
      v4 -= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

void *sub_244CC585C(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = result[2];
    char v4 = 8 * a3 - 8;
    do
    {
      if (v3 < result[1])
      {
        *(unsigned char *)(*result + v3) = a2 >> v4;
        unint64_t v3 = result[2];
      }
      result[2] = ++v3;
      v4 -= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

char *sub_244CC58A0@<X0>(char *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, unint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  if (!result && a2)
  {
    int v6 = 103;
LABEL_11:
    int v7 = 47;
    goto LABEL_12;
  }
  if (!a3 && a4)
  {
    int v6 = 108;
    goto LABEL_11;
  }
  if (a2 < 0)
  {
    int v6 = 116;
    goto LABEL_11;
  }
  if (((a5 >> 1) & 1 | (unint64_t)(2 * a2)) <= a4)
  {
    if (a2)
    {
      if (a5) {
        char v8 = 55;
      }
      else {
        char v8 = 87;
      }
      do
      {
        if (*result <= 0x9Fu) {
          char v9 = (*result >> 4) | 0x30;
        }
        else {
          char v9 = v8 + (*result >> 4);
        }
        *a3 = v9;
        char v10 = *result++;
        char v11 = v8 + (v10 & 0xF);
        char v12 = v10 & 0xF | 0x30;
        if ((v10 & 0xFu) <= 9) {
          char v13 = v12;
        }
        else {
          char v13 = v11;
        }
        unsigned __int16 v14 = a3 + 2;
        a3[1] = v13;
        a3 += 2;
        --a2;
      }
      while (a2);
      a3 = v14;
    }
    int v7 = 0;
    if ((a5 & 2) != 0) {
      *a3 = 0;
    }
    int v6 = 139;
  }
  else
  {
    int v6 = 123;
    int v7 = 25;
  }
LABEL_12:
  *(_DWORD *)a6 = v7;
  *(void *)(a6 + 8) = "src/lib/support/BytesToHex.cpp";
  *(_DWORD *)(a6 + 16) = v6;
  return result;
}

char *sub_244CC597C@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = bswap64(a1);
  return sub_244CC58A0((char *)v6, 8, a2, a3, a4, a5);
}

char *sub_244CC59E8@<X0>(unsigned int a1@<W0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v6 = bswap32(a1);
  return sub_244CC58A0((char *)&v6, 4, a2, a3, a4, a5);
}

char *sub_244CC5A28@<X0>(unsigned int a1@<W0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  __int16 v6 = __rev16(a1);
  return sub_244CC58A0((char *)&v6, 2, a2, a3, a4, a5);
}

uint64_t sub_244CC5A68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244CC5A70(a1, a2, a3, a4, 0);
}

uint64_t sub_244CC5A70(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = 0;
  if (a1)
  {
    if (a3)
    {
      uint64_t v5 = 0;
      if ((a2 & 1) == 0 && a2 - 1 < 2 * a4)
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = 0;
          char v9 = 0;
          char v10 = 1;
          do
          {
            char v11 = v10;
            int v12 = *(unsigned __int8 *)(a1 + v6 + v8);
            if ((v12 - 48) >= 0xA)
            {
              if ((v12 - 65) >= 6)
              {
                uint64_t v5 = 0;
                if ((a5 & 1) != 0 || (v12 - 103) < 0xFAu) {
                  return v5;
                }
                char v13 = -87;
              }
              else
              {
                char v13 = -55;
              }
            }
            else
            {
              char v13 = -48;
            }
            char v10 = 0;
            char v9 = v12 + 16 * v9 + v13;
            uint64_t v8 = 1;
          }
          while ((v11 & 1) != 0);
          *(unsigned char *)(a3 + (v6 >> 1)) = v9;
          ++v7;
          v6 += 2;
          uint64_t v5 = v7;
        }
        while (v6 < a2);
      }
    }
  }
  return v5;
}

uint64_t sub_244CC5B34(uint64_t a1, unint64_t a2, void *a3)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = 0;
  uint64_t v4 = sub_244CC5A70(a1, a2, (uint64_t)v6, 8, 1);
  uint64_t result = 0;
  if (v4 == 8)
  {
    *a3 = bswap64(v6[0]);
    return 8;
  }
  return result;
}

uint64_t sub_244CC5BBC(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unsigned int v5 = 0;
  uint64_t result = sub_244CC5A70(a1, a2, (uint64_t)&v5, 4, 1);
  if (result != 4) {
    return 0;
  }
  *a3 = bswap32(v5);
  return result;
}

uint64_t sub_244CC5C14(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unsigned __int16 v5 = 0;
  uint64_t result = sub_244CC5A70(a1, a2, (uint64_t)&v5, 2, 1);
  if (result != 2) {
    return 0;
  }
  *a3 = bswap32(v5) >> 16;
  return result;
}

uint64_t sub_244CC5C70(const char *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = *(char **)a2;
    if (a1) {
      unsigned __int16 v5 = a1;
    }
    else {
      unsigned __int16 v5 = "";
    }
    while (1)
    {
      uint64_t v6 = v3 >= 0x20 ? 32 : v3;
      long long v14 = 0uLL;
      uint64_t v15 = 0;
      sub_244CC58A0(v4, v6, v16, 0x41uLL, 3u, (uint64_t)&v14);
      int v7 = v14;
      uint64_t v8 = sub_244CC8484(0x1Bu, "Support");
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v7) {
        break;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v16;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "%s>>>%s", buf, 0x16u);
      }
      uint64_t result = sub_244CC4E58(2u);
      if (result) {
        uint64_t result = sub_244CC4DE0(0x1Bu, 2);
      }
      v4 += v6;
      v3 -= v6;
      if (!v3) {
        return result;
      }
    }
    if (v9)
    {
      *(_OWORD *)long long buf = v14;
      *(void *)&uint8_t buf[16] = v15;
      char v13 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Failed to dump hex %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result)
    {
      *(_OWORD *)long long buf = v14;
      *(void *)&uint8_t buf[16] = v15;
      sub_244CB7B34((const char **)buf, 1);
      return sub_244CC4DE0(0x1Bu, 2);
    }
  }
  else
  {
    char v11 = sub_244CC8484(0x1Bu, "Support");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = "";
      if (a1) {
        int v12 = a1;
      }
      *(_DWORD *)unsigned int v16 = 136315138;
      char v17 = v12;
      _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "%s>>>", v16, 0xCu);
    }
    uint64_t result = sub_244CC4E58(2u);
    if (result) {
      return sub_244CC4DE0(0x1Bu, 2);
    }
  }
  return result;
}

uint64_t sub_244CC5F04(unsigned int a1)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = 0x100000000;
  if (a1 < 2) {
    return *((unsigned int *)v6 + a1);
  }
  int v2 = 0;
  if (a1 + 1 > 3) {
    int v3 = a1 + 1;
  }
  else {
    int v3 = 3;
  }
  int v4 = v3 - 2;
  int v5 = 1;
  do
  {
    uint64_t result = (v5 + v2);
    int v2 = v5;
    int v5 = result;
    --v4;
  }
  while (v4);
  return result;
}

void sub_244CC5F9C()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (!byte_268EC3511)
  {
    int v0 = atexit(sub_244CC609C);
    if (v0)
    {
      int v1 = v0;
      int v2 = sub_244CC8484(9u, "Controller");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v4 = v1;
        _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "IgnoreLeaksOnExit: atexit failed: %d\n", buf, 8u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(9u, 1);
      }
    }
    byte_268EC3511 = 1;
  }
}

void sub_244CC609C()
{
  byte_268EC3510 = 1;
}

void *sub_244CC60AC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = a4;
  result[3] = a2;
  result[4] = a5;
  result[5] = a3;
  if (a4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      atomic_store(0, (unint64_t *)(result[5] + v6));
      v6 += 8;
      v5 += 64;
    }
    while (v5 < result[2]);
  }
  return result;
}

void *sub_244CC60E8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = a4;
  result[3] = a2;
  result[4] = a5;
  result[5] = a3;
  if (a4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      atomic_store(0, (unint64_t *)(result[5] + v5));
      v6 += 64;
      v5 += 8;
    }
    while (v6 < result[2]);
  }
  return result;
}

unint64_t sub_244CC6124(unint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    while (2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = a1[5];
      uint64_t v5 = *(void *)(v4 + 8 * v2);
      while (1)
      {
        unint64_t v6 = a1[2];
        if (v1 + v3 >= v6) {
          break;
        }
        if (((1 << v3) & v5) == 0)
        {
          uint64_t v7 = v5;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 8 * v2), (unint64_t *)&v7, (1 << v3) | v5);
          if (v7 == v5)
          {
            unint64_t v9 = a1[1];
            unint64_t v10 = *a1 + 1;
            *a1 = v10;
            uint64_t v11 = v1 + v3;
            if (v10 > v9) {
              a1[1] = v10;
            }
            return a1[3] + a1[4] * v11;
          }
          uint64_t v5 = *(void *)(v4 + 8 * v2);
        }
        if (++v3 == 64)
        {
          unint64_t v6 = a1[2];
          break;
        }
      }
      ++v2;
      v1 += 64;
      if (v6 > v2 << 6) {
        continue;
      }
      break;
    }
  }
  return 0;
}

unint64_t sub_244CC61CC(void *a1, uint64_t a2)
{
  unint64_t result = sub_244CC6230(a1, a2);
  if (result >= a1[2]) {
    sub_244E235F0();
  }
  if ((atomic_fetch_and((atomic_ullong *volatile)(a1[5] + 8 * (result >> 6)), ~(1 << result)) & (1 << result)) == 0) {
    sub_244E23550();
  }
  --*a1;
  return result;
}

unint64_t sub_244CC6230(void *a1, uint64_t a2)
{
  unint64_t v2 = a2 - a1[3];
  if ((v2 & 0x8000000000000000) != 0) {
    sub_244E237D0();
  }
  unint64_t v3 = a1[4];
  if (v2 % v3) {
    sub_244E23730();
  }
  if (v2 / v3 >= a1[2]) {
    sub_244E23690();
  }
  return v2 / v3;
}

uint64_t sub_244CC627C(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a1[2])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(void *)(a1[5] + 8 * v7);
      while (1)
      {
        unint64_t v10 = a1[2];
        if (v6 + v8 >= v10) {
          break;
        }
        if ((v9 >> v8))
        {
          uint64_t result = a3(a2, a1[3] + a1[4] * (v6 + v8));
          if (result == 1) {
            return result;
          }
        }
        if (++v8 == 64)
        {
          unint64_t v10 = a1[2];
          break;
        }
      }
      ++v7;
      v6 += 64;
    }
    while (v10 > v7 << 6);
  }
  return 2;
}

unint64_t sub_244CC632C(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    while (2)
    {
      unint64_t v7 = 0;
      do
      {
        if ((*(void *)(v6 + 8 * v4) >> v7)) {
          return v5 + v7;
        }
        unint64_t v8 = v7 + 1;
        if (v7 > 0x3E) {
          break;
        }
        ++v7;
      }
      while (v8 + v3 < result);
      ++v4;
      v3 += 64;
      v5 += v8;
      if (result > v4 << 6) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v5 != result) {
    sub_244E23870();
  }
  return result;
}

unint64_t sub_244CC63B8(uint64_t a1, unint64_t a2)
{
  unint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    while (2)
    {
      unint64_t v8 = 0;
      do
      {
        if (((*(void *)(v7 + 8 * v5) >> v8) & 1) != 0 && v6 + v8 > a2) {
          return v6 + v8;
        }
        unint64_t v9 = v8 + 1;
        if (v8 > 0x3E) {
          break;
        }
        ++v8;
      }
      while (v9 + v4 < result);
      ++v5;
      v4 += 64;
      v6 += v9;
      if (result > v5 << 6) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    sub_244E23910();
  }
  return result;
}

void *sub_244CC6450(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  while (1)
  {
    unint64_t result = (void *)result[1];
    if (result == v2) {
      break;
    }
    if (*result == a2) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_244CC6478(void *a1, uint64_t a2, unsigned int (*a3)(uint64_t))
{
  uint64_t v4 = a1[3];
  a1[3] = v4 + 1;
  uint64_t v5 = (void *)a1[1];
  if (v5 == a1)
  {
    uint64_t v8 = 2;
  }
  else
  {
    while (!*v5 || a3(a2) != 1)
    {
      uint64_t v5 = (void *)v5[1];
      if (v5 == a1)
      {
        uint64_t v8 = 2;
        goto LABEL_8;
      }
    }
    uint64_t v8 = 1;
LABEL_8:
    uint64_t v4 = a1[3] - 1;
  }
  a1[3] = v4;
  sub_244CC6510(a1);
  return v8;
}

void *sub_244CC6510(void *result)
{
  if (!result[3])
  {
    uint64_t v1 = result;
    if (*((unsigned char *)result + 32))
    {
      unint64_t result = (void *)result[1];
      if (result != v1)
      {
        do
        {
          unint64_t v2 = (void *)result[1];
          if (!*result)
          {
            v2[2] = result[2];
            *(void *)(result[2] + 8) = result[1];
            j__free(result);
          }
          unint64_t result = v2;
        }
        while (v2 != v1);
      }
      *((unsigned char *)v1 + 32) = 0;
    }
  }
  return result;
}

void *sub_244CC6578(void *a1, char *__format, ...)
{
  va_start(va, __format);
  unint64_t v4 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v5 = v4 - v3;
  if (v4 < v3)
  {
    unint64_t v5 = 0;
    unint64_t v3 = a1[1];
  }
  int v6 = vsnprintf((char *)(*a1 + v3), v5 + 1, __format, va);
  if (v6 >= 1) {
    a1[2] += v6;
  }
  unint64_t v7 = a1[2];
  if (a1[1] < v7) {
    unint64_t v7 = a1[1];
  }
  *(unsigned char *)(*a1 + v7) = 0;
  return a1;
}

void *sub_244CC65FC(void *result)
{
  if (result[1] < result[2])
  {
    unint64_t v1 = 0;
    uint64_t v2 = -1;
    do
    {
      unint64_t v3 = result[1];
      if (v3 > v1) {
        *(unsigned char *)(*result + v3 + v2) = 46;
      }
      ++v1;
      --v2;
    }
    while (v1 != 3);
  }
  return result;
}

BOOL sub_244CC6640(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 + a2;
  if (a2 >= 3)
  {
    do
    {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 1);
      if (v3 == 255) {
        break;
      }
      uint64_t v4 = a1 + v3;
      a1 = v4 + 2;
    }
    while (v4 + 4 < v2);
  }
  return a1 == v2;
}

unsigned char *sub_244CC6678@<X0>(unsigned char *__dst@<X0>, size_t __n@<X2>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  if (__n <= 0xFE)
  {
    char v6 = __n;
    unint64_t v7 = __dst;
    if (__n)
    {
      unint64_t v8 = (unint64_t)&a3[__n];
      unint64_t v9 = a3;
      if (__n >= 3)
      {
        unint64_t v9 = a3;
        do
        {
          uint64_t v10 = v9[1];
          if (v10 == 255) {
            break;
          }
          uint64_t v11 = &v9[v10];
          unint64_t v9 = v11 + 2;
        }
        while ((unint64_t)(v11 + 4) < v8);
      }
      if (v9 != (unsigned __int8 *)v8)
      {
        int v5 = 186;
        goto LABEL_10;
      }
      __dst = memcpy(__dst, a3, __n);
    }
    int v12 = 0;
    v7[254] = v6;
    int v5 = 193;
    goto LABEL_13;
  }
  int v5 = 179;
LABEL_10:
  int v12 = 47;
LABEL_13:
  *(_DWORD *)a4 = v12;
  *(void *)(a4 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return __dst;
}

unint64_t sub_244CC6730@<X0>(unint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 14) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 199;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 8)
  {
    int v4 = 0;
    *a2 = bswap64(*(void *)(result + 2));
    int v5 = 202;
  }
  else
  {
    int v5 = 200;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC67B4(unsigned __int8 *result, int a2)
{
  unint64_t v2 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*result == a2) {
        break;
      }
      result += result[1] + 2;
    }
    while (result < v2);
  }
  if (result == v2) {
    return 0;
  }
  return result;
}

unsigned __int8 *sub_244CC67EC@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 14, 0xAuLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 8;
    *(void *)(result + 2) = bswap64(a2);
    a1[254] += 10;
    int v8 = 214;
  }
  else
  {
    int v8 = 208;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned __int8 *sub_244CC6870(unsigned __int8 *a1, int a2, unint64_t a3)
{
  uint64_t v5 = a1[254];
  char v6 = &a1[v5];
  int v7 = a1;
  if (a1[254])
  {
    int v7 = a1;
    do
    {
      if (*v7 == a2) {
        break;
      }
      v7 += v7[1] + 2;
    }
    while (v7 < v6);
  }
  unint64_t v8 = 254 - v5;
  if (v7 == v6)
  {
    if (v8 >= a3) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v8 + (v7[1] + 2) < a3) {
    return 0;
  }
  sub_244CC7650(a1, v7);
  uint64_t v5 = a1[254];
LABEL_10:
  a1[v5] = a2;
  return &a1[a1[254]];
}

unint64_t sub_244CC6918@<X0>(unint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (!*(unsigned char *)result) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 220;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 3)
  {
    int v4 = 0;
    *a2 = bswap32(*(unsigned __int16 *)(result + 3)) >> 16;
    int v5 = 225;
  }
  else
  {
    int v5 = 221;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC699C@<X0>(unsigned __int8 *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 0, 5uLL);
  if (result)
  {
    int v7 = 0;
    *(_WORD *)(result + 1) = 3;
    result[3] = HIBYTE(a2);
    result[4] = a2;
    a1[254] += 5;
    int v8 = 238;
  }
  else
  {
    int v8 = 232;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CC6A24@<X0>(unint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 2) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v4 = 261;
    int v5 = 118;
LABEL_9:
    *(_DWORD *)a3 = v5;
    a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 1) != 8)
  {
    int v4 = 262;
    int v5 = 35;
    goto LABEL_9;
  }
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  *((_DWORD *)a3 + 4) = 264;
  *a2 = *(void *)(result + 2);
  *(_DWORD *)a3 = 0;
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  int v4 = 246;
LABEL_10:
  *((_DWORD *)a3 + 4) = v4;
  return result;
}

unsigned char *sub_244CC6AC4@<X0>(unsigned char *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*result == 2) {
        break;
      }
      result += result[1] + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 261;
    int v4 = 118;
  }
  else if (result[1] == 8)
  {
    int v4 = 0;
    *a2 = result + 2;
    a2[1] = 8;
    int v5 = 264;
  }
  else
  {
    int v5 = 262;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unint64_t sub_244CC6B48@<X0>(unint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 2) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v4 = 261;
    int v5 = 118;
LABEL_9:
    *(_DWORD *)a3 = v5;
    a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 1) != 8)
  {
    int v4 = 262;
    int v5 = 35;
    goto LABEL_9;
  }
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  *((_DWORD *)a3 + 4) = 264;
  *a2 = bswap64(*(void *)(result + 2));
  *(_DWORD *)a3 = 0;
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  int v4 = 255;
LABEL_10:
  *((_DWORD *)a3 + 4) = v4;
  return result;
}

unsigned __int8 *sub_244CC6BEC@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 2, 0xAuLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 8;
    *(void *)(result + 2) = *a2;
    a1[254] += 10;
    int v8 = 278;
  }
  else
  {
    int v8 = 270;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CC6C70@<X0>(unint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 5) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 284;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 16)
  {
    int v4 = 0;
    *a2 = *(_OWORD *)(result + 2);
    int v5 = 287;
  }
  else
  {
    int v5 = 285;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC6CF0@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 5, 0x12uLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 16;
    *(_OWORD *)(result + 2) = *a2;
    a1[254] += 18;
    int v8 = 301;
  }
  else
  {
    int v8 = 293;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CC6D74@<X0>(unint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 7) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 307;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 8)
  {
    int v4 = 0;
    *a2 = *(void *)(result + 2);
    int v5 = 310;
  }
  else
  {
    int v5 = 308;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC6DF4@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 7, 0xAuLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 8;
    *(void *)(result + 2) = *a2;
    a1[254] += 10;
    int v8 = 322;
  }
  else
  {
    int v8 = 316;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned char *sub_244CC6E78@<X0>(void *__dst@<X1>, unsigned char *result@<X0>, uint64_t a3@<X8>)
{
  int v4 = result;
  char v6 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*v4 == 3) {
        break;
      }
      v4 += v4[1] + 2;
    }
    while (v4 < v6);
  }
  if (v4 == v6)
  {
    int v9 = 328;
    int v8 = 118;
  }
  else
  {
    size_t v7 = v4[1];
    if (v7 > 0x10)
    {
      int v9 = 329;
      int v8 = 35;
    }
    else
    {
      unint64_t result = memcpy(__dst, v4 + 2, v7);
      int v8 = 0;
      *((unsigned char *)__dst + v4[1]) = 0;
      int v9 = 332;
    }
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

unsigned __int8 *sub_244CC6F30@<X0>(char *__s@<X1>, unsigned __int8 *result@<X0>, uint64_t a3@<X8>)
{
  if (__s)
  {
    int v5 = result;
    unint64_t result = (unsigned __int8 *)strlen(__s);
    if ((unint64_t)(result - 1) > 0xF)
    {
      int v8 = 339;
      int v7 = 30;
    }
    else
    {
      size_t v6 = (size_t)result;
      unint64_t result = sub_244CC6870(v5, 3, (unint64_t)(result + 2));
      if (result)
      {
        result[1] = v6;
        unint64_t result = (unsigned __int8 *)memcpy(result + 2, __s, v6);
        int v7 = 0;
        v5[254] += v6 + 2;
        int v8 = 348;
      }
      else
      {
        int v8 = 342;
        int v7 = 11;
      }
    }
  }
  else
  {
    int v8 = 337;
    int v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CC6FF4@<X0>(unint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 1) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 354;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 2)
  {
    int v4 = 0;
    *a2 = bswap32(*(unsigned __int16 *)(result + 2)) >> 16;
    int v5 = 357;
  }
  else
  {
    int v5 = 355;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC707C@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 1, 4uLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 2;
    *((_WORD *)result + 1) = __rev16(a2);
    a1[254] += 4;
    int v8 = 369;
  }
  else
  {
    int v8 = 363;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CC7100@<X0>(unint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 4) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 375;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 16)
  {
    int v4 = 0;
    *a2 = *(_OWORD *)(result + 2);
    int v5 = 378;
  }
  else
  {
    int v5 = 376;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC7180@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 4, 0x12uLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 16;
    *(_OWORD *)(result + 2) = *a2;
    a1[254] += 18;
    int v8 = 390;
  }
  else
  {
    int v8 = 384;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned char *sub_244CC7204@<X0>(unsigned char *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*result == 53) {
        break;
      }
      result += result[1] + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v6 = 396;
    int v5 = 118;
  }
  else
  {
    uint64_t v4 = result[1];
    if (result[1])
    {
      int v5 = 0;
      *a2 = result + 2;
      a2[1] = v4;
      int v6 = 399;
    }
    else
    {
      int v6 = 397;
      int v5 = 35;
    }
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

unsigned __int8 *sub_244CC7280@<X0>(unsigned __int8 *result@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 - 1 > 0xFC)
  {
    int v9 = 404;
    int v8 = 47;
  }
  else
  {
    int v7 = result;
    unint64_t result = sub_244CC6870(result, 53, a3 + 2);
    if (result)
    {
      result[1] = a3;
      unint64_t result = (unsigned __int8 *)memcpy(result + 2, a2, a3);
      int v8 = 0;
      v7[254] += a3 + 2;
      int v9 = 409;
    }
    else
    {
      int v9 = 406;
      int v8 = 11;
    }
  }
  *(_DWORD *)a4 = v8;
  *(void *)(a4 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

unint64_t sub_244CC7328@<X0>(unint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 12) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 415;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 4)
  {
    int v4 = 0;
    *a2 = bswap32(*(_DWORD *)(result + 2));
    int v5 = 418;
  }
  else
  {
    int v5 = 416;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC73AC@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 12, 6uLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 4;
    *(_DWORD *)(result + 2) = bswap32(a2);
    a1[254] += 6;
    int v8 = 427;
  }
  else
  {
    int v8 = 424;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_244CC7430@<X0>(unint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(unsigned char *)(result + 254))
  {
    do
    {
      if (*(unsigned char *)result == 52) {
        break;
      }
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    int v5 = 433;
    int v4 = 118;
  }
  else if (*(unsigned char *)(result + 1) == 4)
  {
    int v4 = 0;
    *a2 = bswap32(*(_DWORD *)(result + 2));
    int v5 = 436;
  }
  else
  {
    int v5 = 434;
    int v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_244CC74B4@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_244CC6870(a1, 52, 6uLL);
  if (result)
  {
    int v7 = 0;
    result[1] = 4;
    *(_DWORD *)(result + 2) = bswap32(a2);
    a1[254] += 6;
    int v8 = 445;
  }
  else
  {
    int v8 = 442;
    int v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned __int8 *sub_244CC7538(unsigned __int8 *a1)
{
  return sub_244CC7540(a1, 5);
}

unsigned __int8 *sub_244CC7540(unsigned __int8 *result, int a2)
{
  unint64_t v3 = &result[result[254]];
  int v4 = result;
  if (result[254])
  {
    int v4 = result;
    do
    {
      if (*v4 == a2) {
        break;
      }
      v4 += v4[1] + 2;
    }
    while (v4 < v3);
  }
  if (v4 != v3) {
    return sub_244CC7650(result, v4);
  }
  return result;
}

unsigned __int8 *sub_244CC7588(unsigned __int8 *a1)
{
  return sub_244CC7540(a1, 4);
}

BOOL sub_244CC7590(unsigned char *a1)
{
  if (!a1[254]) {
    return 0;
  }
  unint64_t v1 = &a1[a1[254]];
  unint64_t v2 = a1;
  do
  {
    if (*v2 == 1) {
      break;
    }
    v2 += v2[1] + 2;
  }
  while (v2 < v1);
  if (v2 == v1) {
    return 0;
  }
  unint64_t v3 = a1;
  do
  {
    if (*v3 == 5) {
      break;
    }
    v3 += v3[1] + 2;
  }
  while (v3 < v1);
  if (v3 == v1) {
    return 0;
  }
  int v4 = a1;
  do
  {
    if (*v4 == 2) {
      break;
    }
    v4 += v4[1] + 2;
  }
  while (v4 < v1);
  if (v4 == v1) {
    return 0;
  }
  do
  {
    if (!*a1) {
      break;
    }
    a1 += a1[1] + 2;
  }
  while (a1 < v1);
  return a1 != v1;
}

unsigned char *sub_244CC7650(unsigned char *result, unsigned char *__dst)
{
  unsigned int v2 = ((_BYTE)__dst - (_BYTE)result);
  unsigned int v3 = result[254];
  if (v2 < v3 && v2 + (__dst[1] + 2) <= v3)
  {
    unsigned __int8 v4 = v3 - (__dst[1] + 2);
    result[254] = v4;
    return memmove(__dst, &__dst[__dst[1] + 2], (int)(v4 - v2));
  }
  return result;
}

BOOL sub_244CC76A8(int a1)
{
  if ((a1 & 3) != 0) {
    return 0;
  }
  HIDWORD(v2) = -1030792151 * a1;
  LODWORD(v2) = -1030792151 * a1;
  if ((v2 >> 2) > 0x28F5C28) {
    return 1;
  }
  HIDWORD(v3) = -1030792151 * a1;
  LODWORD(v3) = -1030792151 * a1;
  return (v3 >> 4) < 0xA3D70B;
}

uint64_t sub_244CC76F8(unsigned int a1, int a2)
{
  if (a2 == 2)
  {
    if ((a1 & 3) == 0)
    {
      HIDWORD(v2) = -1030792151 * a1;
      LODWORD(v2) = -1030792151 * a1;
      if ((v2 >> 2) > 0x28F5C28 || a1 == 400 * ((10737419 * (unint64_t)a1) >> 32)) {
        return 29;
      }
    }
    return byte_244EAE490[a2 - 1];
  }
  if ((a2 - 1) <= 0xB) {
    return byte_244EAE490[a2 - 1];
  }
  return 0;
}

uint64_t sub_244CC7778(int a1)
{
  if (1 - a1 >= 0) {
    int v1 = -((1 - a1) & 3);
  }
  else {
    int v1 = (a1 - 1) & 3;
  }
  return ((5 * v1 + 4 * ((a1 - 1) % 100) + 6 * ((a1 - 1) % 400) + 1) % 7);
}

uint64_t sub_244CC77F8(uint64_t result, __int16 a2, unsigned char *a3, unsigned char *a4)
{
  unsigned __int8 v4 = 59;
  if ((result & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * result;
    LODWORD(v6) = -1030792151 * result;
    unsigned int v5 = v6 >> 2;
    HIDWORD(v6) = -1030792151 * result;
    LODWORD(v6) = -1030792151 * result;
    if ((v6 >> 4) < 0xA3D70B || v5 > 0x28F5C28) {
      unsigned __int8 v4 = 60;
    }
    else {
      unsigned __int8 v4 = 59;
    }
  }
  unsigned int v8 = v4;
  unsigned __int16 v9 = a2 - 1 - v4;
  if (v8 > (unsigned __int16)(a2 - 1)) {
    unsigned __int16 v9 = a2 + 305;
  }
  uint64_t v10 = 28071682 * (5 * v9 + 2);
  *a3 = BYTE4(v10);
  *a4 = v9 - (unsigned __int16)(153 * BYTE4(v10) + 2) / 5u + 1;
  unsigned int v11 = *a3;
  if (v11 >= 0xA) {
    char v12 = -9;
  }
  else {
    char v12 = 3;
  }
  *a3 = v12 + v11;
  return result;
}

uint64_t sub_244CC78B8(uint64_t result, unsigned int a2, __int16 a3, _WORD *a4)
{
  if (a2 <= 2) {
    char v4 = 9;
  }
  else {
    char v4 = -3;
  }
  unsigned int v5 = (v4 + a2);
  HIDWORD(v7) = -1030792151 * result;
  LODWORD(v7) = -1030792151 * result;
  unsigned int v6 = v7 >> 2;
  HIDWORD(v7) = -1030792151 * result;
  LODWORD(v7) = -1030792151 * result;
  if ((v7 >> 4) < 0xA3D70B || v6 > 0x28F5C28) {
    LOBYTE(v9) = 60;
  }
  else {
    LOBYTE(v9) = 59;
  }
  if ((result & 3) != 0) {
    LOBYTE(v9) = 59;
  }
  __int16 v9 = v9;
  if (v5 > 9) {
    __int16 v9 = -306;
  }
  *a4 = v9 + (unsigned __int16)(153 * v5 + 2) / 5u + a3;
  return result;
}

BOOL sub_244CC7948(__int16 a1, unsigned int a2, __int16 a3, unsigned int *a4)
{
  if ((unsigned __int16)(a1 - 1970) > 0x66C2u)
  {
    unsigned int v6 = -1;
  }
  else
  {
    if (a2 >= 3) {
      char v5 = -3;
    }
    else {
      char v5 = 9;
    }
    __int16 v4 = a2 < 3;
    unsigned int v6 = 365 * ((unsigned __int16)(a1 - v4) % 0x190u)
       + 146097 * ((unsigned __int16)(a1 - v4) / 0x190u)
       - (unsigned __int16)(a1 - v4) % 0x190u / 0x64
       + (((unsigned __int16)(a1 - v4) % 0x190u) >> 2)
       + (unsigned __int16)(a3 + (unsigned __int16)(153 * (v5 + a2) + 2) / 5u - 1)
       - 719468;
  }
  BOOL result = (unsigned __int16)(a1 - 1970) < 0x66C3u;
  *a4 = v6;
  return result;
}

BOOL sub_244CC7A08(unsigned int a1, _WORD *a2, unsigned char *a3, unsigned char *a4)
{
  if (a1 <= 0x16CFE92)
  {
    unsigned int v4 = (a1 + 719468) % 0x23AB1;
    unsigned int v5 = v4 / 0x8EAC + v4 - (v4 / 0x23AB0 + v4 / 0x5B4);
    LOWORD(v4) = v4
               - 365 * (v5 / 0x16D)
               - ((v5 / 0x5B4) & 0x3FFF)
               + ((unsigned __int16)((5243 * ((v5 / 0x5B4) & 0x3FFF)) >> 16) >> 1);
    uint64_t v6 = 28071682 * (5 * (unsigned __int16)v4 + 2);
    *a3 = BYTE4(v6);
    *a4 = v4 - (unsigned __int16)(153 * BYTE4(v6) + 2) / 5u + 1;
    unsigned int v7 = *a3;
    if (v7 >= 0xA) {
      char v8 = -9;
    }
    else {
      char v8 = 3;
    }
    *a3 = v8 + v7;
    unsigned int v9 = 400 * ((a1 + 719468) / 0x23AB1) + v5 / 0x16D;
    *a2 = v9;
    if (*a3 <= 2u) {
      *a2 = v9 + 1;
    }
  }
  return a1 < 0x16CFE93;
}

BOOL sub_244CC7B58(__int16 *a1, unsigned char *a2, unsigned char *a3, int a4)
{
  unsigned int v10 = 0;
  if (!sub_244CC7948(*a1, *a2, *a3, &v10)) {
    return 0;
  }
  unint64_t v8 = v10 + (uint64_t)a4;
  if (HIDWORD(v8)) {
    return 0;
  }

  return sub_244CC7A08(v8, a1, a2, a3);
}

BOOL sub_244CC7BF4(int a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, unsigned int *a7)
{
  unsigned __int16 v8 = a1 - 1970;
  if ((a1 - 1970) > 0x87)
  {
    unsigned int v12 = -1;
  }
  else
  {
    unsigned int v14 = 0;
    sub_244CC7948(a1, a2, a3, &v14);
    unsigned int v12 = 3600 * a4 + 60 * a5 + a6 + 86400 * v14;
  }
  BOOL result = v8 < 0x88u;
  *a7 = v12;
  return result;
}

BOOL sub_244CC7C8C(unsigned int a1, _WORD *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned char *a7)
{
  unsigned int v10 = a1 % 0x15180;
  BOOL result = sub_244CC7A08(a1 / 0x15180, a2, a3, a4);
  *a5 = v10 / 0xE10;
  unsigned int v12 = v10 - 3600 * (v10 / 0xE10);
  *a6 = v12 / 0x3C;
  *a7 = v12 % 0x3C;
  return result;
}

BOOL sub_244CC7D20(int a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, _DWORD *a7)
{
  unsigned __int16 v7 = a1 - 2000;
  if ((a1 - 2000) <= 0x87)
  {
    unsigned int v13 = 0;
    sub_244CC7948(a1, a2, a3, &v13);
    *a7 = 60 * a5 + 3600 * a4 + a6 + 86400 * v13 - 946684800;
  }
  return v7 < 0x88u;
}

BOOL sub_244CC7DBC(unsigned int a1, _WORD *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned char *a7)
{
  uint64_t v10 = a1 + 946684800;
  uint64_t v11 = ((unint64_t)v10 * (unsigned __int128)0xC22E4506728AuLL) >> 64;
  unsigned int v12 = v10 - 86400 * v11;
  BOOL result = sub_244CC7A08(v11, a2, a3, a4);
  *a5 = v12 / 0xE10;
  unsigned int v14 = v12 - 3600 * (v12 / 0xE10);
  *a6 = v14 / 0x3C;
  *a7 = v14 % 0x3C;
  return result;
}

BOOL sub_244CC7E58(unint64_t a1, void *a2)
{
  if (a1 <= 0xFFFCA2FEC4C81FFFLL) {
    *a2 = a1 + 946684800000000;
  }
  return a1 < 0xFFFCA2FEC4C82000;
}

BOOL sub_244CC7E9C(unint64_t a1, void *a2)
{
  if (a1 >= 0x35D013B37E000) {
    *a2 = a1 - 946684800000000;
  }
  return a1 > 0x35D013B37DFFFLL;
}

BOOL sub_244CC7EE4(unsigned int a1, _DWORD *a2)
{
  if (a1 >= 0x386D4380) {
    *a2 = a1 - 946684800;
  }
  return a1 > 0x386D437F;
}

uint64_t sub_244CC7F18(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3[1])
  {
    unsigned int v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      if (v7)
      {
        if ((((_BYTE)v8 - 1) & 7) == 0)
        {
          sub_244CC4DE0(v5, a2);
          uint64_t v7 = 0;
        }
      }
      BOOL result = snprintf(&v12[v7], 50 - v7, "0x%02x, ", *(unsigned __int8 *)(*a3 + v6));
      if ((int)result <= 0)
      {
        unsigned int v10 = v5;
        uint64_t v11 = 1;
        return sub_244CC4DE0(v10, v11);
      }
      v7 += result;
      uint64_t v6 = v8;
    }
    while (a3[1] > (unint64_t)v8++);
    if (!v7) {
      return result;
    }
    unsigned int v10 = v5;
    uint64_t v11 = a2;
    return sub_244CC4DE0(v10, v11);
  }
  return result;
}

uint64_t sub_244CC8058(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    BOOL v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    while (2)
    {
      int v5 = *(char *)(a1 + v3);
      switch(v4)
      {
        case 0:
          if ((v5 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          if ((v5 + 62) < 0x1E) {
            goto LABEL_19;
          }
          if (v5 == -32)
          {
            int v4 = 1;
            goto LABEL_22;
          }
          if ((v5 + 31) < 0xC) {
            goto LABEL_21;
          }
          if (v5 == -19)
          {
            int v4 = 2;
            goto LABEL_22;
          }
          if ((v5 & 0xFFFFFFFE) == 0xFFFFFFEE) {
            goto LABEL_21;
          }
          if (v5 == -16)
          {
            int v4 = 3;
            goto LABEL_22;
          }
          if ((v5 + 15) < 3)
          {
            int v4 = 7;
            goto LABEL_22;
          }
          if (v5 != -12) {
            goto LABEL_35;
          }
          int v4 = 4;
          goto LABEL_22;
        case 1:
          if ((v5 & 0xFFFFFFE0) != 0xFFFFFFA0) {
            goto LABEL_35;
          }
          goto LABEL_19;
        case 2:
          if (v5 >= -96) {
            goto LABEL_35;
          }
          goto LABEL_19;
        case 3:
          if ((v5 + 112) >= 0x30) {
            goto LABEL_35;
          }
          goto LABEL_21;
        case 4:
          if (v5 >= -112) {
            goto LABEL_35;
          }
          goto LABEL_21;
        case 5:
          if (v5 >= -64) {
            goto LABEL_35;
          }
LABEL_17:
          int v4 = 0;
          goto LABEL_22;
        case 6:
          if (v5 >= -64) {
            goto LABEL_35;
          }
LABEL_19:
          int v4 = 5;
          goto LABEL_22;
        case 7:
          if (v5 > -65) {
            goto LABEL_35;
          }
LABEL_21:
          int v4 = 6;
LABEL_22:
          BOOL v2 = ++v3 >= a2;
          if (a2 == v3) {
            return v2 & (v4 == 0);
          }
          continue;
        default:
LABEL_35:
          int v4 = 8;
          return v2 & (v4 == 0);
      }
    }
  }
  int v4 = 0;
  BOOL v2 = 1;
  return v2 & (v4 == 0);
}

uint64_t sub_244CC81D0(int a1, int a2, int a3)
{
  int v3 = a1 % (2 * a3);
  int v4 = a2 % (2 * a3);
  if (v3 >= a3)
  {
    if (v4 >= a3)
    {
      int v5 = v3 + a3 - v4;
      return (v5 % a3);
    }
    int v6 = v3 - v4;
    return (v6 % a3 + a3);
  }
  if (v4 >= a3)
  {
    int v6 = v3 - a3 + v4;
    return (v6 % a3 + a3);
  }
  int v5 = v4 + v3;
  return (v5 % a3);
}

uint64_t sub_244CC8234(uint64_t result, int a2)
{
  if (a2 <= (int)result || (int)result <= 0) {
    return result;
  }
  else {
    return (a2 - result);
  }
}

uint64_t sub_244CC8244(int a1, uint64_t a2, int a3, uint64_t a4)
{
  for (uint64_t result = (a1 % a3); a4; --a4)
    uint64_t result = (*(unsigned __int8 *)(a2 + (int)result) % a3);
  return result;
}

uint64_t sub_244CC8268(const char *a1)
{
  size_t v2 = strlen(a1);

  return sub_244CC82A4((uint64_t)a1, v2);
}

uint64_t sub_244CC82A4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    LODWORD(v3) = 0;
    int v4 = (unsigned __int8 *)(a2 + a1 - 1);
    unint64_t v5 = 1;
    while (1)
    {
      int v6 = *v4--;
      int v7 = v6 - 48;
      int v8 = (v6 - 48) >= 0xA ? -1 : v7;
      if (v8 < 0) {
        break;
      }
      uint64_t v3 = byte_244EAE49C[(int)(sub_244CC8244(v8, (uint64_t)&unk_244EAE500, 10, v5++) + 10 * v3)];
      if (v5 > a2) {
        goto LABEL_10;
      }
    }
    return 0;
  }
  else
  {
    uint64_t v3 = 0;
LABEL_10:
    unsigned int v9 = sub_244CC8234(v3, 5);
    char v10 = v9 + 48;
    if (v9 >= 0xB) {
      return 0;
    }
  }
  return v10;
}

uint64_t sub_244CC8368(unsigned __int8 a1)
{
  unsigned int v1 = a1 - 48;
  if (v1 >= 0xA) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v1;
  }
}

uint64_t sub_244CC837C(unsigned int a1)
{
  char v1 = a1 + 48;
  if (a1 >= 0xB) {
    return 0;
  }
  return v1;
}

BOOL sub_244CC8390(int a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_244CC82A4((uint64_t)__s, v4) == a1;
}

BOOL sub_244CC83D0(int a1, uint64_t a2, unint64_t a3)
{
  return sub_244CC82A4(a2, a3) == a1;
}

size_t sub_244CC8404(const char *a1)
{
  size_t result = strlen(a1);
  if (result)
  {
    int v3 = a1[result - 1];
    return v3 == sub_244CC82A4((uint64_t)a1, result - 1);
  }
  return result;
}

BOOL sub_244CC8444(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v2 = a2 - 1;
  int v3 = *(unsigned __int8 *)(a1 + v2);
  return v3 == sub_244CC82A4(a1, v2);
}

uint64_t sub_244CC8484(unsigned int a1, const char *a2)
{
  if (a1 - 42 >= 0xFFFFFFD7) {
    unint64_t v2 = a2;
  }
  else {
    unint64_t v2 = "Default";
  }
  if (a1 - 42 >= 0xFFFFFFD7) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  size_t v4 = &qword_268EBEB28[2 * v3];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = sub_244CC8534;
  void v6[3] = &unk_26519C3C8;
  void v6[4] = v4;
  void v6[5] = v2;
  if (*v4 != -1) {
    dispatch_once(v4, v6);
  }
  return qword_268EBEB28[2 * v3 + 1];
}

os_log_t sub_244CC8534(uint64_t a1)
{
  os_log_t result = os_log_create("com.csa.matter", *(const char **)(a1 + 40));
  *(void *)(*(void *)(a1 + 32) + 8) = result;
  return result;
}

void sub_244CC856C(unsigned int a1, const char *a2, os_log_type_t a3, uint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v6 = sub_244CC8484(a1, a2);
  if (os_log_type_enabled(v6, a3))
  {
    uint64_t v8 = *a4;
    uint64_t v7 = a4[1];
    id v9 = objc_alloc(MEMORY[0x263F089D8]);
    unsigned int v12 = objc_msgSend_initWithCapacity_(v9, v10, 6 * v7);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((~(_BYTE)i & 7) != 0) {
          objc_msgSend_appendFormat_(v12, v11, @"0x%02x, ", *(unsigned __int8 *)(v8 + i));
        }
        else {
          objc_msgSend_appendFormat_(v12, v11, @"0x%02x,\n", *(unsigned __int8 *)(v8 + i));
        }
      }
    }
    if (os_log_type_enabled(v6, a3))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v12;
      _os_log_impl(&dword_2446BD000, v6, a3, "%@", buf, 0xCu);
    }
  }
}

void sub_244CC8698(_Unwind_Exception *exception_object)
{
}

unint64_t sub_244CC86B0(unint64_t *a1)
{
  char v1 = a1 + 1;
  unint64_t v2 = atomic_load(a1 + 1);
  unint64_t result = (*(uint64_t (**)(unint64_t *))(*a1 + 32))(a1);
  if (result < v2) {
    sub_244E239B0();
  }
  atomic_store(result, v1);
  return result;
}

uint64_t sub_244CC8708(uint64_t a1)
{
  return *(int *)(a1 + 8) + 1000000 * *(void *)a1;
}

unint64_t sub_244CC8720(unint64_t result, uint64_t a2)
{
  *(void *)a2 = (result / 0xF4240);
  *(_DWORD *)(a2 + 8) = result % 0xF4240;
  return result;
}

uint64_t sub_244CC8754@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = result & 0xFFFFFF | 0x2000000;
  if (!result) {
    int v2 = 0;
  }
  uint64_t v3 = "src/system/SystemError.cpp";
  if (result) {
    uint64_t v3 = 0;
  }
  *(_DWORD *)a2 = v2;
  if (result) {
    int v4 = 0;
  }
  else {
    int v4 = 59;
  }
  *(void *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_244CC8788@<X0>(uint64_t result@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = result & 0xFFFFFF | 0x2000000;
  if (!result) {
    int v4 = 0;
  }
  unint64_t v5 = "src/system/SystemError.cpp";
  if (result) {
    unint64_t v5 = a2;
  }
  *(_DWORD *)a4 = v4;
  if (result) {
    int v6 = a3;
  }
  else {
    int v6 = 64;
  }
  *(void *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

char *sub_244CC87BC(_DWORD *a1)
{
  return strerror(*a1 & 0xFFFFFF);
}

void *sub_244CC87C8()
{
  return sub_244CB7CA0(&off_26BA163E0);
}

BOOL sub_244CC87D4(char *a1, size_t a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)a3 & 0xFF000000;
  if (v3 == 0x2000000)
  {
    uint64_t v7 = strerror(*(_DWORD *)a3 & 0xFFFFFF);
    long long v9 = *a3;
    uint64_t v10 = *((void *)a3 + 2);
    sub_244CB7C34(a1, a2, "OS", &v9, v7);
  }
  return v3 == 0x2000000;
}

uint64_t sub_244CC8864@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result) {
    int v2 = -(int)result & 0xFFFFFF | 0x2000000;
  }
  else {
    int v2 = 0;
  }
  unsigned int v3 = "src/system/SystemError.cpp";
  if (result) {
    unsigned int v3 = 0;
  }
  *(_DWORD *)a2 = v2;
  if (result) {
    int v4 = 0;
  }
  else {
    int v4 = 59;
  }
  *(void *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

void sub_244CC889C(_WORD **a1)
{
  char v1 = *a1;
  if (*a1)
  {
    if (!*v1 && *((_WORD *)v1 + 16) == 1)
    {
      int v2 = v1 + 6;
      uint64_t v3 = v1[1] - (void)(v1 + 6);
      size_t v4 = v3 + v1[3];
      if (v4 + 16 <= v1[5])
      {
        int v6 = sub_244CC4D84(v4 + 48);
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = sub_244CC9408();
          char v9 = *(unsigned char *)v8 + 1;
          *(unsigned char *)uint64_t v8 = v9;
          if (*(char *)sub_244CC9414() < v9) {
            *(unsigned char *)sub_244CC9414() = v9;
          }
          *uint64_t v7 = 0;
          v7[1] = (char *)v7 + v3 + 48;
          void v7[2] = *((void *)*a1 + 2);
          void v7[3] = *((void *)*a1 + 3);
          *((_WORD *)v7 + 16) = 1;
          v7[5] = v4;
          memcpy(v7 + 6, v2, v4);
          sub_244CC8A0C(*a1);
          *a1 = v7;
        }
        else
        {
          uint64_t v10 = sub_244CC8484(0x19u, "chipSystemLayer");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v11[0] = 0;
            _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "PacketBuffer: pool EMPTY.", (uint8_t *)v11, 2u);
          }
          if (sub_244CC4E58(1u)) {
            sub_244CC4DE0(0x19u, 1);
          }
        }
      }
    }
  }
}

uint64_t sub_244CC8A04(uint64_t a1)
{
  return a1 + 48;
}

void sub_244CC8A0C(_WORD *a1)
{
  if (a1)
  {
    char v1 = a1;
    do
    {
      if (!v1[16]) {
        sub_244E23A78();
      }
      int v2 = *(_WORD **)v1;
      __int16 v3 = v1[16] - 1;
      v1[16] = v3;
      if (v3) {
        break;
      }
      size_t v4 = sub_244CC9408();
      --*(unsigned char *)v4;
      *((void *)v1 + 5) = 0;
      *((void *)v1 + 2) = 0;
      *((void *)v1 + 3) = 0;
      j__free(v1);
      char v1 = v2;
    }
    while (v2);
  }
}

void *sub_244CC8A78(void *result, unint64_t a2)
{
  int v2 = result + 6;
  uint64_t v3 = result[1];
  size_t v4 = (void *)(v3 + result[5] - (unsigned __int16)(v3 - ((_WORD)result + 48)));
  if ((unint64_t)v4 >= a2) {
    size_t v4 = (void *)a2;
  }
  if ((unint64_t)v2 <= a2) {
    int v2 = v4;
  }
  uint64_t v5 = (uint64_t)v2 - v3;
  unint64_t v6 = result[3];
  if (v6 >= v5) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result[3];
  }
  if (v5 > 0) {
    uint64_t v5 = v7;
  }
  result[2] -= v5;
  result[3] = v6 - v5;
  result[1] = v2;
  return result;
}

uint64_t sub_244CC8ACC(uint64_t a1)
{
  return *(void *)(a1 + 40) - (unsigned __int16)(*(_WORD *)(a1 + 8) - a1 - 48);
}

uint64_t sub_244CC8AE4(uint64_t result, unint64_t a2, void *a3)
{
  if (*(void *)(result + 40) - (unint64_t)(unsigned __int16)(*(_WORD *)(result + 8) - result - 48) >= a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *(void *)(result + 40) - (unsigned __int16)(*(_WORD *)(result + 8) - result - 48);
  }
  unint64_t v4 = v3 - *(void *)(result + 24);
  *(void *)(result + 16) += v4;
  *(void *)(result + 24) = v3;
  if (a3 && a3 != (void *)result)
  {
    do
    {
      a3[2] += v4;
      a3 = (void *)*a3;
      if (a3) {
        BOOL v5 = a3 == (void *)result;
      }
      else {
        BOOL v5 = 1;
      }
    }
    while (!v5);
  }
  return result;
}

uint64_t sub_244CC8B3C(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 8) - a1 - 48);
}

uint64_t sub_244CC8B50(uint64_t a1)
{
  return *(void *)(a1 + 40) - (*(void *)(a1 + 24) + (unsigned __int16)(*(_DWORD *)(a1 + 8) - a1 - 48));
}

void *sub_244CC8B70(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  do
  {
    uint64_t v3 = result[2];
    uint64_t v4 = *(void *)(v2 + 16);
    result[2] = v4 + v3;
    if (__CFADD__(v4, v3)) {
      sub_244E23AE0();
    }
    BOOL v5 = result;
    unint64_t result = (void *)*result;
  }
  while (result);
  void *v5 = v2;
  return result;
}

void sub_244CC8BB4(uint64_t *a1)
{
  uint64_t v2 = a1 + 6;
  uint64_t v3 = (uint64_t *)a1[1];
  size_t v4 = a1[3];
  if (v3 != a1 + 6)
  {
    memmove(a1 + 6, v3, v4);
    a1[1] = (uint64_t)v2;
  }
  uint64_t v5 = a1[5];
  size_t v6 = v5 - v4;
  if (v5 != v4)
  {
    do
    {
      uint64_t v7 = *a1;
      if (!*a1) {
        break;
      }
      if (*(_WORD *)(v7 + 32) != 1) {
        sub_244E23B48(*a1);
      }
      size_t v8 = *(void *)(v7 + 24) >= v6 ? v6 : *(void *)(v7 + 24);
      memcpy((void *)(a1[1] + a1[3]), *(const void **)(v7 + 8), v8);
      *(void *)(v7 + 8) += v8;
      a1[3] += v8;
      size_t v9 = *(void *)(v7 + 24) - v8;
      *(void *)(v7 + 16) -= v8;
      *(void *)(v7 + 24) = v9;
      if (!v9)
      {
        uint64_t v10 = *(void *)v7;
        *(void *)uint64_t v7 = 0;
        sub_244CC8A0C((_WORD *)v7);
        *a1 = v10;
      }
      v6 -= v8;
    }
    while (v6);
  }
}

uint64_t sub_244CC8C9C(_WORD *a1)
{
  uint64_t v1 = *(void *)a1;
  *(void *)a1 = 0;
  sub_244CC8A0C(a1);
  return v1;
}

void *sub_244CC8CC8(void *result, unint64_t a2)
{
  uint64_t v3 = result[2];
  unint64_t v2 = result[3];
  if (v2 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = result[3];
  }
  unint64_t v5 = result[1] + v4;
  result[3] = v2 - v4;
  result[1] = v5;
  result[2] = v3 - v4;
  return result;
}

uint64_t **sub_244CC8CF0(uint64_t **a1, unint64_t a2)
{
  if (a1 && a2)
  {
    while (1)
    {
      unint64_t v2 = (unint64_t)a1[3];
      unint64_t v3 = a2 - v2;
      if (a2 < v2) {
        break;
      }
      unint64_t v4 = *a1;
      *a1 = 0;
      sub_244CC8A0C(a1);
      if (v4) {
        BOOL v5 = v3 == 0;
      }
      else {
        BOOL v5 = 1;
      }
      a1 = (uint64_t **)v4;
      a2 = v3;
      if (v5) {
        return (uint64_t **)v4;
      }
    }
    size_t v6 = a1[2];
    unint64_t v7 = (unint64_t)a1[1] + a2;
    a1[3] = (uint64_t *)(v2 - a2);
    a1[1] = (uint64_t *)v7;
    a1[2] = (uint64_t *)((char *)v6 - a2);
  }
  return a1;
}

void *sub_244CC8D64@<X0>(char *__dst@<X1>, void *result@<X0>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  if (result[2] >= a3)
  {
    size_t v7 = a3;
    if (a3)
    {
      uint64_t v9 = (uint64_t)result;
      while (v9)
      {
        if (v7 >= *(void *)(v9 + 24)) {
          size_t v10 = *(void *)(v9 + 24);
        }
        else {
          size_t v10 = v7;
        }
        unint64_t result = memcpy(__dst, *(const void **)(v9 + 8), v10);
        __dst += v10;
        uint64_t v9 = *(void *)v9;
        v7 -= v10;
        if (!v7) {
          goto LABEL_10;
        }
      }
      int v5 = 437;
      int v6 = 172;
    }
    else
    {
LABEL_10:
      int v6 = 0;
      int v5 = 449;
    }
  }
  else
  {
    int v5 = 430;
    int v6 = 25;
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = "src/system/SystemPacketBuffer.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

uint64_t sub_244CC8E14(void *a1, unsigned int a2)
{
  unint64_t v4 = (char *)a1[1];
  unsigned __int16 v5 = (_WORD)v4 - (_WORD)a1 - 48;
  if (a2 > v5)
  {
    size_t v6 = a1[3];
    if (v6 + a2 > a1[5]) {
      return 0;
    }
    unsigned __int16 v8 = a2 - v5;
    memmove(&v4[(unsigned __int16)(a2 - v5)], v4, v6);
    a1[1] += v8;
  }
  return 1;
}

uint64_t sub_244CC8E84(void *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 % a2;
  if (v5)
  {
    unsigned __int16 v6 = a2 - v5;
    unsigned __int16 v7 = v4 - (_WORD)a1 - 48;
    if ((v7 + v6) >> 16) {
      return 0;
    }
    if ((unsigned __int16)(v6 + v7) > v7)
    {
      size_t v8 = a1[3];
      if (v8 + (unsigned __int16)(v6 + v7) > a1[5]) {
        return 0;
      }
      memmove((void *)(v4 + v6), (const void *)v4, v8);
      a1[1] += v6;
    }
  }
  return 1;
}

uint64_t sub_244CC8F2C(uint64_t result)
{
  int v1 = *(unsigned __int16 *)(result + 32);
  if (v1 == 0xFFFF) {
    sub_244E23BD4();
  }
  *(_WORD *)(result + 32) = v1 + 1;
  return result;
}

uint64_t sub_244CC8F5C@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  int v3 = a1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = HIDWORD(a1);
  if (HIDWORD(a1))
  {
    unsigned __int16 v6 = sub_244CC8484(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)uint64_t v16 = v5;
      *(_WORD *)&uint8_t v16[4] = 1024;
      *(_DWORD *)&v16[6] = v3;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "PacketBuffer: AvailableSize of a buffer cannot exceed UINT32_MAX. aAvailableSize = 0x%08X%08X", buf, 0xEu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (!result) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  unint64_t v9 = a1 + a2;
  if (v9 >= 0xFA01)
  {
    size_t v10 = sub_244CC8484(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)uint64_t v16 = v9;
      *(_WORD *)&v16[8] = 2048;
      uint64_t v17 = 64000;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "PacketBuffer: allocation exceeding buffer capacity limits: %lu > %lu", buf, 0x16u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (!result) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v11 = sub_244CC4D84(v9 + 48);
  unsigned int v12 = sub_244CC9408();
  char v13 = *(unsigned char *)v12 + 1;
  *(unsigned char *)unsigned int v12 = v13;
  uint64_t result = (uint64_t)sub_244CC9414();
  if (*(char *)result < v13)
  {
    uint64_t result = (uint64_t)sub_244CC9414();
    *(unsigned char *)uint64_t result = v13;
  }
  if (!v11)
  {
    unsigned int v14 = sub_244CC8484(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "PacketBuffer: pool EMPTY.", buf, 2u);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (!result) {
      goto LABEL_19;
    }
LABEL_18:
    uint64_t result = sub_244CC4DE0(0x19u, 1);
LABEL_19:
    uint64_t v11 = 0;
    goto LABEL_20;
  }
  void *v11 = 0;
  v11[1] = (char *)v11 + a2 + 48;
  void v11[2] = 0;
  void v11[3] = 0;
  *((_WORD *)v11 + 16) = 1;
  v11[5] = v9;
LABEL_20:
  *a3 = v11;
  return result;
}

uint64_t sub_244CC91B0@<X0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_244CC8F5C(a3 + a2, a4, a5);
  uint64_t v9 = *a5;
  if (v9)
  {
    uint64_t result = (uint64_t)memcpy(*(void **)(v9 + 8), a1, a2);
    *(void *)(v9 + 16) = a2;
    *(void *)(v9 + 24) = a2;
  }
  return result;
}

void *sub_244CC9208(void *result)
{
  result[5] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void **sub_244CC9214@<X0>(void **result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = *result;
  *uint64_t result = (void *)**result;
  void *v2 = 0;
  v2[2] = v2[3];
  *a2 = v2;
  return result;
}

void sub_244CC9234(uint64_t **a1@<X0>, void *a2@<X8>)
{
  int v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = 0;
    while (1)
    {
      size_t v5 = v3[5];
      uint64_t v6 = (unsigned __int16)(*((_WORD *)v3 + 4) - ((_WORD)v3 + 48));
      if (v5 >= 0xFA01)
      {
        if ((unint64_t)(v3[3] + v6) >= 0xFA01) {
          break;
        }
        size_t v5 = 64000;
      }
      sub_244CC8F5C(v5 - v6, (unsigned __int16)(*((_WORD *)v3 + 4) - ((_WORD)v3 + 48)), &v9);
      unsigned __int16 v7 = v9;
      if (!v9) {
        break;
      }
      uint64_t v8 = v3[3];
      *((void *)v9 + 2) = v8;
      *((void *)v7 + 3) = v8;
      memcpy(v7 + 24, v3 + 6, v5);
      if (v4)
      {
        sub_244CC8B70(v4, (uint64_t *)&v9);
        if (v9) {
          sub_244CC8A0C(v9);
        }
      }
      else
      {
        unint64_t v4 = v7;
      }
      int v3 = (uint64_t *)*v3;
      if (!v3) {
        goto LABEL_14;
      }
    }
    *a2 = 0;
    if (v4)
    {
      sub_244CC8A0C(v4);
    }
  }
  else
  {
    unint64_t v4 = 0;
LABEL_14:
    *a2 = v4;
  }
}

void sub_244CC9354(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a2;
  if (!*a2) {
    goto LABEL_4;
  }
  unint64_t v7 = a1[2];
  if (a1[1] < v7)
  {
    sub_244CC8A0C((_WORD *)v6);
LABEL_4:
    *a2 = 0;
    goto LABEL_8;
  }
  if (*(void *)(v6 + 40) - (unint64_t)(unsigned __int16)(*(_WORD *)(v6 + 8) - v6 - 48) < v7) {
    unint64_t v7 = *(void *)(v6 + 40) - (unsigned __int16)(*(_WORD *)(v6 + 8) - v6 - 48);
  }
  *(void *)(v6 + 16) = *(void *)(v6 + 16) - *(void *)(v6 + 24) + v7;
  *(void *)(v6 + 24) = v7;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a3 = *a2;
  *a2 = 0;
}

uint64_t sub_244CC93E4()
{
  return sub_244CC4DE0(0x19u, 1);
}

char **sub_244CC93FC()
{
  return off_26519C3E8;
}

int *sub_244CC9408()
{
  return &dword_268EC3512;
}

int *sub_244CC9414()
{
  return &dword_268EC3519;
}

_DWORD *sub_244CC9420(_DWORD *result)
{
  *uint64_t result = dword_268EC3512;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)&dword_268EC3512 + 3);
  *(_DWORD *)((char *)result + 7) = dword_268EC3519;
  *(_DWORD *)((char *)result + 10) = *(int *)((char *)&dword_268EC3519 + 3);
  return result;
}

uint64_t sub_244CC9454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  char v4 = 0;
  do
  {
    char v5 = *(unsigned char *)(a2 + v3) - *(unsigned char *)(a3 + v3);
    uint64_t v6 = (unsigned char *)(a1 + v3);
    unsigned char *v6 = v5;
    void v6[7] = *(unsigned char *)(a2 + v3 + 7) - *(unsigned char *)(a3 + v3 + 7);
    v4 |= v5 > 0;
    ++v3;
  }
  while (v3 != 7);
  return v4 & 1;
}

void *sub_244CC94AC(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void **)a1;
  if (*(void **)a1 == a2) {
    sub_244E23C3C();
  }
  if (v2 && *a2 >= *v2)
  {
    do
    {
      uint64_t v3 = v2;
      unint64_t v2 = (void *)v2[5];
      if (!v2) {
        break;
      }
      if (v2 == a2) {
        sub_244E23CF4();
      }
    }
    while (*a2 >= *v2);
    a2[5] = v2;
    v3[5] = a2;
    return *(void **)a1;
  }
  else
  {
    a2[5] = v2;
    *(void *)a1 = a2;
  }
  return a2;
}

uint64_t sub_244CC9524(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 && v2)
  {
    uint64_t v3 = a1;
    if (v2 == a2)
    {
LABEL_7:
      void *v3 = *(void *)(a2 + 40);
    }
    else
    {
      while (1)
      {
        uint64_t v4 = v2;
        uint64_t v2 = *(void *)(v2 + 40);
        if (!v2) {
          break;
        }
        if (v2 == a2)
        {
          uint64_t v3 = (void *)(v4 + 40);
          goto LABEL_7;
        }
      }
    }
    *(void *)(a2 + 40) = 0;
    return *a1;
  }
  return v2;
}

void *sub_244CC956C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)*a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    char v5 = v3;
    if (v3[2] == a2 && v3[3] == a3) {
      break;
    }
    uint64_t v3 = (void *)v3[5];
    uint64_t v4 = v5;
    if (!v3) {
      return 0;
    }
  }
  if (v4) {
    unint64_t v7 = v4 + 5;
  }
  else {
    unint64_t v7 = a1;
  }
  *unint64_t v7 = v3[5];
  v3[5] = 0;
  return v5;
}

uint64_t sub_244CC95C8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    *a1 = *(void *)(result + 40);
    *(void *)(result + 40) = 0;
  }
  return result;
}

unint64_t *sub_244CC95E4(unint64_t **a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (*result >= a2)
    {
      return 0;
    }
    else
    {
      *a1 = (unint64_t *)result[5];
      result[5] = 0;
    }
  }
  return result;
}

unint64_t *sub_244CC9614(unint64_t **a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (*result >= a2)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = result;
      do
      {
        char v5 = v4;
        uint64_t v4 = (unint64_t *)v4[5];
      }
      while (v4 && *v4 < a2);
      *a1 = v4;
      void v5[5] = 0;
    }
  }
  return result;
}

uint64_t sub_244CC965C(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  while (v3[2] != a2 || v3[3] != a3)
  {
    uint64_t v3 = (unint64_t *)v3[5];
    if (!v3) {
      return 0;
    }
  }
  unint64_t v5 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  if (*v3 > v5) {
    return *v3 - v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_244CC96E8@<X0>(uint64_t result@<X0>, void *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  *a2 = *(void *)(*(void *)(result + 8) + 8);
  unint64_t v4 = *(void *)(*(void *)(result + 8) + 24);
  unint64_t v5 = HIDWORD(v4);
  if (HIDWORD(v4))
  {
    int v6 = 34;
    LODWORD(v5) = 47;
  }
  else
  {
    *a3 = v4;
    int v6 = 36;
  }
  *(_DWORD *)a4 = v5;
  *(void *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

void sub_244CC9730(uint64_t a1@<X0>, void *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7 = (_WORD **)(a1 + 16);
  if (!*(unsigned char *)(a1 + 24))
  {
    if (*v7) {
      sub_244CC8A0C(*v7);
    }
    *unint64_t v7 = 0;
    goto LABEL_8;
  }
  sub_2447E66C8((uint64_t **)(a1 + 16));
  if (!*v7)
  {
LABEL_8:
    LODWORD(v8) = 0;
    *a2 = 0;
    goto LABEL_9;
  }
  *a2 = *((void *)*v7 + 1);
  unint64_t v8 = *((void *)*v7 + 3);
  if (!HIDWORD(v8))
  {
LABEL_9:
    int v10 = 0;
    *a3 = v8;
    int v9 = 62;
    goto LABEL_10;
  }
  int v9 = 58;
  int v10 = 47;
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
}

unint64_t sub_244CC97D8@<X0>(uint64_t a1@<X0>, void *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  *a2 = *(void *)(*(void *)(a1 + 8) + 8) + *(void *)(*(void *)(a1 + 8) + 24);
  unint64_t result = sub_244CC8B50(*(void *)(a1 + 8));
  if (HIDWORD(result))
  {
    int v9 = 68;
    int v8 = 47;
  }
  else
  {
    unint64_t result = sub_244CC8B50(*(void *)(a1 + 8));
    int v8 = 0;
    *a3 = result;
    int v9 = 70;
  }
  *(_DWORD *)a4 = v8;
  *(void *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

uint64_t sub_244CC9860@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + a3 - *(void *)(*(void *)(result + 16) + 8);
  if (HIDWORD(v5))
  {
    int v7 = 80;
    int v6 = 47;
  }
  else
  {
    unint64_t result = sub_244CC8AE4(*(void *)(result + 16), v5, *(void **)(result + 8));
    int v6 = 0;
    int v7 = 84;
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

unint64_t sub_244CC98CC@<X0>(unint64_t result@<X0>, void *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  if (!*(unsigned char *)(result + 24))
  {
    int v11 = 91;
LABEL_7:
    int v10 = 11;
    goto LABEL_9;
  }
  unint64_t v7 = result;
  int v8 = (uint64_t *)(result + 16);
  sub_2447E66C8((uint64_t **)(result + 16));
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
LABEL_3:
    *a2 = *(void *)(v9 + 8);
    unint64_t result = sub_244CC8ACC(*v8);
    if (HIDWORD(result))
    {
      int v11 = 113;
      int v10 = 47;
      goto LABEL_9;
    }
    unint64_t result = sub_244CC8ACC(*v8);
    goto LABEL_5;
  }
  sub_244CC8F5C(0x62FuLL, 0, &v13);
  if (*v8) {
    sub_244CC8A0C((_WORD *)*v8);
  }
  unint64_t result = (unint64_t)v13;
  uint64_t *v8 = (uint64_t)v13;
  if (!result)
  {
    int v11 = 100;
    goto LABEL_7;
  }
  unsigned int v12 = *(void **)(v7 + 8);
  sub_244CC8F2C(result);
  char v13 = *(_WORD **)(v7 + 16);
  sub_244CC8B70(v12, (uint64_t *)&v13);
  if (v13) {
    sub_244CC8A0C(v13);
  }
  uint64_t v9 = *v8;
  if (*v8) {
    goto LABEL_3;
  }
  unint64_t result = 0;
  *a2 = 0;
LABEL_5:
  int v10 = 0;
  *a3 = result;
  int v11 = 117;
LABEL_9:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v11;
  return result;
}

void sub_244CC99F4(void *a1)
{
  sub_244CA539C(a1);

  JUMPOUT(0x245695FA0);
}

BOOL sub_244CC9A2C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 24) == 0;
}

uint64_t sub_244CC9A3C@<X0>(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (pipe(v15) < 0)
  {
    uint64_t v12 = *__error();
    uint64_t v13 = (uint64_t)a3;
    int v14 = 71;
    return sub_244CC8788(v12, "src/system/WakeEvent.cpp", v14, v13);
  }
  int v6 = v15[0];
  int v7 = fcntl(v15[0], 3, 0);
  if (fcntl(v6, 4, v7 | 4u) < 0)
  {
    uint64_t v12 = *__error();
    uint64_t v13 = (uint64_t)a3;
    int v14 = 74;
    return sub_244CC8788(v12, "src/system/WakeEvent.cpp", v14, v13);
  }
  int v8 = v15[1];
  int v9 = fcntl(v15[1], 3, 0);
  if (fcntl(v8, 4, v9 | 4u) < 0)
  {
    uint64_t v12 = *__error();
    uint64_t v13 = (uint64_t)a3;
    int v14 = 77;
    return sub_244CC8788(v12, "src/system/WakeEvent.cpp", v14, v13);
  }
  unsigned int v10 = v15[0];
  *a1 = vrev64_s32(*(int32x2_t *)v15);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, int32x2_t *))(*(void *)a2 + 88))(a2, v10, a1 + 1);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(uint64_t, uint64_t), int32x2_t *))(*(void *)a2 + 96))(a2, *(void *)&a1[1], sub_244CC9C5C, a1);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 104))(a2, *(void *)&a1[1]);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/system/WakeEvent.cpp";
        *((_DWORD *)a3 + 4) = 86;
      }
    }
  }
  return result;
}

uint64_t sub_244CC9C5C(uint64_t a1, uint64_t a2)
{
  return sub_244CC9CE8(a2);
}

double sub_244CC9C64(int *a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr, uint64_t, int *))(*(void *)a2 + 136))(v4, a2, a1 + 2);
  if (close(a1[1])) {
    sub_244E23E64();
  }
  if (close(*a1)) {
    sub_244E23DAC();
  }
  double result = NAN;
  *(void *)a1 = -1;
  return result;
}

uint64_t sub_244CC9CE8(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  while (1)
  {
    uint64_t result = read(*(_DWORD *)(a1 + 4), v9, 0x80uLL);
    if (result < 0) {
      break;
    }
    if (result != 128) {
      return result;
    }
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result != 35)
  {
    uint64_t result = (uint64_t)__error();
    if (*(_DWORD *)result != 35)
    {
      uint64_t v3 = sub_244CC8484(0x19u, "chipSystemLayer");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        unint64_t v4 = __error();
        sub_244CC8788(*v4, "src/system/WakeEvent.cpp", 109, (uint64_t)&v7);
        long long buf = v7;
        uint64_t v11 = v8;
        unint64_t v5 = sub_244CB7B34((const char **)&buf, 1);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v5;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "System wake event confirm failed: %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result)
      {
        int v6 = __error();
        sub_244CC8788(*v6, "src/system/WakeEvent.cpp", 109, (uint64_t)&v7);
        long long buf = v7;
        uint64_t v11 = v8;
        sub_244CB7B34((const char **)&buf, 1);
        return sub_244CC4DE0(0x19u, 1);
      }
    }
  }
  return result;
}

uint64_t sub_244CC9E68@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  __long long buf = 1;
  uint64_t result = write(*a1, &__buf, 1uLL);
  if ((result & 0x8000000000000000) == 0
    || (uint64_t result = (uint64_t)__error(), *(_DWORD *)result == 35)
    || (uint64_t result = (uint64_t)__error(), *(_DWORD *)result == 35))
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = "src/system/WakeEvent.cpp";
    *(_DWORD *)(a2 + 16) = 124;
  }
  else
  {
    unint64_t v4 = __error();
    return sub_244CC8788(*v4, "src/system/WakeEvent.cpp", 121, a2);
  }
  return result;
}

uint64_t sub_244CC9F04@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(result + 3048))
  {
    int v3 = 57;
    goto LABEL_3;
  }
  unint64_t v5 = (int32x2_t *)result;
  *(unsigned char *)(result + 3048) = 1;
  sub_244CC87C8();
  uint64_t v6 = 1;
  do
  {
    long long v7 = &v5[v6];
    v7->i32[0] = -1;
    v7->i8[4] = 0;
    *(_OWORD *)v7[1].i8 = 0uLL;
    *(_OWORD *)v7[3].i8 = 0uLL;
    v6 += 5;
  }
  while (&v7[5] != &v5[321]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_244CC9A3C(v5 + 382, (uint64_t)v5, a2);
  if (!*(_DWORD *)a2)
  {
    if (v5[381].i8[0] == 1)
    {
      int v4 = 0;
      v5[381].i8[0] = 2;
      int v3 = 76;
      goto LABEL_4;
    }
    int v3 = 75;
LABEL_3:
    int v4 = 3;
LABEL_4:
    *(_DWORD *)a2 = v4;
    a2[1] = "src/system/SystemLayerImplSelect.cpp";
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

double sub_244CC9FD8(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(unsigned char *)(a1 + 4) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_244CC9FF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 3048) == 2)
  {
    *(unsigned char *)(a1 + 3048) = 3;
    uint64_t v2 = (uint64_t *)(a1 + 2624);
    uint64_t v3 = sub_244CC95C8((uint64_t *)(a1 + 2624));
    if (v3)
    {
      uint64_t v4 = v3;
      do
      {
        unint64_t v5 = *(NSObject **)(v4 + 32);
        if (v5)
        {
          dispatch_source_cancel(v5);
          dispatch_release(*(dispatch_object_t *)(v4 + 32));
        }
        uint64_t v4 = sub_244CC95C8(v2);
      }
      while (v4);
    }
    *((unsigned char *)sub_244CC9408() + 1) = 0;
    sub_244CC6478((void *)(a1 + 2584), a1 + 2568, (unsigned int (*)(uint64_t))sub_244CCB658);
    for (uint64_t i = 8; i != 2568; i += 40)
      sub_244CCA0C4(a1 + i);
    sub_244CC9C64((int *)(a1 + 3056), a1);
    if (*(unsigned char *)(a1 + 3048) == 3) {
      *(unsigned char *)(a1 + 3048) = 0;
    }
  }
}

double sub_244CCA0C4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
  }
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 24));
  }
  *(_DWORD *)a1 = -1;
  *(unsigned char *)(a1 + 4) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_244CCA124(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  uint64_t result = sub_244CC9E68((int *)(a1 + 3056), (uint64_t)&v4);
  if (v4)
  {
    uint64_t v2 = sub_244CC8484(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v4;
      uint64_t v7 = v5;
      uint64_t v3 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "System wake event notify failed: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      *(_OWORD *)long long buf = v4;
      uint64_t v7 = v5;
      sub_244CB7B34((const char **)buf, 1);
      return sub_244CC4DE0(0x19u, 1);
    }
  }
  return result;
}

void sub_244CCA240(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_244D6A434("src/system/SystemLayerImplSelect.cpp", 159);
  if (*(unsigned char *)(a1 + 3048) == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3, a4);
    uint64_t v10 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    uint64_t v11 = sub_244CCA490((unint64_t *)(a1 + 2568), a1, v10 + a2, a3, a4);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
      int v14 = sub_244CC94AC(a1 + 2624, v12);
      if (v13)
      {
        dispatch_source_t v15 = dispatch_source_create(MEMORY[0x263EF8400], 0, 1uLL, v13);
        if (!v15) {
          sub_244E23F1C();
        }
        uint64_t v16 = v15;
        v12[4] = v15;
        dispatch_time_t v17 = dispatch_walltime(0, 1000000 * a2);
        dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0x1E8480uLL);
        handler[0] = MEMORY[0x263EF8330];
        handler[1] = 0x40000000;
        handler[2] = sub_244CCA500;
        handler[3] = &unk_26519C420;
        handler[4] = a1;
        handler[5] = v16;
        handler[6] = v12;
        dispatch_source_set_event_handler(v16, handler);
        dispatch_resume(v16);
        int v18 = 0;
        int v19 = 189;
      }
      else
      {
        if (v14 == v12) {
          (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
        }
        int v18 = 0;
        int v19 = 215;
      }
    }
    else
    {
      int v19 = 168;
      int v18 = 11;
    }
  }
  else
  {
    int v19 = 161;
    int v18 = 3;
  }
  *(_DWORD *)a5 = v18;
  *(void *)(a5 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a5 + 16) = v19;
}

void *sub_244CCA490(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v9 = a5;
  uint64_t v5 = sub_244CCB6FC(a1, a2, &v11, &v10, &v9);
  uint64_t v6 = sub_244CC9408();
  char v7 = *((unsigned char *)v6 + 1) + 1;
  *((unsigned char *)v6 + 1) = v7;
  if (*((char *)sub_244CC9414() + 1) < v7) {
    *((unsigned char *)sub_244CC9414() + 1) = v7;
  }
  return v5;
}

uint64_t sub_244CCA500(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  uint64_t v3 = *(void **)(a1 + 48);
  sub_244CC9524((void *)(v2 + 2624), (uint64_t)v3);

  return sub_244CCB414(v2 + 2568, v3);
}

uint64_t sub_244CCA558(uint64_t a1, void *a2)
{
  sub_244CC9524((void *)(a1 + 2624), (uint64_t)a2);

  return sub_244CCB414(a1 + 2568, a2);
}

uint64_t sub_244CCA59C@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!a2)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/system/SystemLayerImplSelect.cpp";
    int v11 = 221;
LABEL_10:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  uint64_t v9 = result;
  sub_244D6A434("src/system/SystemLayerImplSelect.cpp", 223);
  uint64_t result = sub_244CC965C((unint64_t **)(v9 + 2624), a3, a4);
  if (result >= a2)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/system/SystemLayerImplSelect.cpp";
    int v11 = 237;
    goto LABEL_10;
  }
  if (!result) {
    sub_244CC956C((void *)(v9 + 2632), a3, a4);
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v9 + 40);

  return v10(v9, a2, a3, a4);
}

uint64_t sub_244CCA6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_244CC965C((unint64_t **)(a1 + 2624), a2, a3)) {
    return 1;
  }
  char v7 = *(void **)(a1 + 2632);
  if (v7)
  {
    while (v7[2] != a2 || v7[3] != a3)
    {
      char v7 = (void *)v7[5];
      if (!v7) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_244CCA714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244CC965C((unint64_t **)(a1 + 2624), a2, a3);
}

uint64_t sub_244CCA71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_244D6A434("src/system/SystemLayerImplSelect.cpp", 266);
  if (*(unsigned char *)(a1 + 3048) == 2)
  {
    char v7 = (dispatch_object_t *)sub_244CC956C((void *)(a1 + 2624), a2, a3);
    if (v7
      || (result = (uint64_t)sub_244CC956C((void *)(a1 + 2632), a2, a3), (char v7 = (dispatch_object_t *)result) != 0))
    {
      uint64_t v8 = v7[4];
      if (v8)
      {
        dispatch_source_cancel(v8);
        dispatch_release(v7[4]);
      }
      uint64_t v9 = sub_244CC9408();
      --*((unsigned char *)v9 + 1);
      sub_244CCB674(a1 + 2568, v7);
      uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 152);
      return v10(a1);
    }
  }
  return result;
}

void sub_244CCA810(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_244D6A434("src/system/SystemLayerImplSelect.cpp", 301);
  if (*((unsigned char *)a1 + 3048) == 2)
  {
    uint64_t v8 = (*(uint64_t (**)(unint64_t *))(*a1 + 208))(a1);
    if (v8)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = sub_244CCA9BC;
      block[3] = &unk_26519C440;
      void block[4] = a1;
      void block[5] = a2;
      block[6] = a3;
      dispatch_async(v8, block);
      int v9 = 0;
      int v10 = 312;
    }
    else
    {
      uint64_t v11 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
      uint64_t v12 = sub_244CCA490(a1 + 321, (uint64_t)a1, v11, a2, a3);
      if (v12)
      {
        if (sub_244CC94AC((uint64_t)(a1 + 328), v12) == v12) {
          (*(void (**)(unint64_t *))(*a1 + 152))(a1);
        }
        int v9 = 0;
        int v10 = 362;
      }
      else
      {
        int v10 = 355;
        int v9 = 11;
      }
    }
  }
  else
  {
    int v10 = 303;
    int v9 = 3;
  }
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a4 + 16) = v10;
}

uint64_t sub_244CCA9BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(a1 + 32), *(void *)(a1 + 48));
}

uint64_t sub_244CCA9CC@<X0>(uint64_t result@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = 0;
  for (uint64_t i = 8; i != 2568; i += 40)
  {
    uint64_t v6 = (_DWORD *)(result + i);
    int v7 = *(_DWORD *)(result + i);
    if (v7 == a2)
    {
      int v9 = 376;
      long long v4 = v6;
      goto LABEL_12;
    }
    if (v4) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v7 == -1;
    }
    if (v8) {
      long long v4 = (_DWORD *)(result + i);
    }
  }
  if (v4)
  {
    _DWORD *v4 = a2;
    int v9 = 393;
LABEL_12:
    int v10 = 0;
    *a3 = v4;
    goto LABEL_13;
  }
  int v9 = 383;
  int v10 = 193;
LABEL_13:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_244CCAA44(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (a1)
  {
    int v4 = 0;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 32) = a3;
    int v5 = 403;
  }
  else
  {
    int v5 = 399;
    int v4 = 47;
  }
  *(_DWORD *)a4 = v4;
  *(void *)(a4 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a4 + 16) = v5;
}

void sub_244CCAA7C(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    *((unsigned char *)a2 + 4) |= 1u;
    if (!*((void *)a2 + 2))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
      if (v7)
      {
        BOOL v8 = dispatch_source_create(MEMORY[0x263EF83E8], *a2, 0, v7);
        *((void *)a2 + 2) = v8;
        if (!v8)
        {
          int v6 = 430;
          int v5 = 11;
          goto LABEL_5;
        }
        handler[0] = MEMORY[0x263EF8330];
        handler[1] = 0x40000000;
        handler[2] = sub_244CCAC04;
        handler[3] = &unk_26519C460;
        handler[4] = a2;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(*((dispatch_object_t *)a2 + 2));
      }
      else
      {
        int v9 = sub_244CC8484(0x1Fu, "DeviceLayer");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "RequestCallbackOnPendingRead with no dispatch queue: callback may not work (might be ok in tests)", buf, 2u);
        }
        if (sub_244CC4E58(1u)) {
          sub_244CC4DE0(0x1Fu, 1);
        }
      }
    }
    int v5 = 0;
    int v6 = 463;
  }
  else
  {
    int v6 = 409;
    int v5 = 47;
  }
LABEL_5:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a3 + 16) = v6;
}

uint64_t sub_244CCAC04(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 4))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, void))(v1 + 8);
    if (v2) {
      return v2(1, *(void *)(v1 + 32));
    }
  }
  return result;
}

void sub_244CCAC28(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    *((unsigned char *)a2 + 4) |= 2u;
    if (!*((void *)a2 + 3))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
      if (v7)
      {
        BOOL v8 = dispatch_source_create(MEMORY[0x263EF8418], *a2, 0, v7);
        *((void *)a2 + 3) = v8;
        if (!v8)
        {
          int v6 = 490;
          int v5 = 11;
          goto LABEL_5;
        }
        handler[0] = MEMORY[0x263EF8330];
        handler[1] = 0x40000000;
        handler[2] = sub_244CCADB0;
        handler[3] = &unk_26519C480;
        handler[4] = a2;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(*((dispatch_object_t *)a2 + 3));
      }
      else
      {
        int v9 = sub_244CC8484(0x1Fu, "DeviceLayer");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "RequestCallbackOnPendingWrite with no dispatch queue: callback may not work (might be ok in tests)", buf, 2u);
        }
        if (sub_244CC4E58(1u)) {
          sub_244CC4DE0(0x1Fu, 1);
        }
      }
    }
    int v5 = 0;
    int v6 = 523;
  }
  else
  {
    int v6 = 469;
    int v5 = 47;
  }
LABEL_5:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a3 + 16) = v6;
}

uint64_t sub_244CCADB0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if ((*(unsigned char *)(v1 + 4) & 2) != 0)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, void))(v1 + 8);
    if (v2) {
      return v2(2, *(void *)(v1 + 32));
    }
  }
  return result;
}

void sub_244CCADD4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    int v2 = 0;
    *(unsigned char *)(a1 + 4) &= ~1u;
    int v3 = 541;
  }
  else
  {
    int v3 = 529;
    int v2 = 47;
  }
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

void sub_244CCAE10(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    int v2 = 0;
    *(unsigned char *)(a1 + 4) &= ~2u;
    int v3 = 559;
  }
  else
  {
    int v3 = 547;
    int v2 = 47;
  }
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

void sub_244CCAE4C(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  *a2 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (v4)
  {
    if ((*v4 & 0x80000000) != 0)
    {
      int v6 = 568;
      int v5 = 3;
    }
    else
    {
      sub_244CCA0C4((uint64_t)v4);
      int v5 = 0;
      int v6 = 579;
    }
  }
  else
  {
    int v6 = 567;
    int v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a3 + 16) = v6;
}

uint64_t sub_244CCAEEC(unsigned int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  unsigned int v8 = a1 >> 5;
  if (__darwin_check_fd_set_overflow(a1, a2, 0)) {
    uint64_t v9 = (a2[v8] >> a1) & 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (__darwin_check_fd_set_overflow(a1, a3, 0))
  {
    if ((a3[v8] >> a1)) {
      uint64_t v9 = v9 | 2;
    }
    else {
      uint64_t v9 = v9;
    }
  }
  if (__darwin_check_fd_set_overflow(a1, a4, 0))
  {
    if ((a4[v8] >> a1)) {
      return v9 | 4;
    }
    else {
      return v9;
    }
  }
  return v9;
}

unint64_t sub_244CCAFAC(uint64_t a1)
{
  sub_244D6A434("src/system/SystemLayerImplSelect.cpp", 641);
  unint64_t v2 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  unint64_t v3 = v2 + 2592000000u;
  int v4 = *(unint64_t **)(a1 + 2624);
  if (v4)
  {
    unint64_t v5 = *v4;
    if (v5 < v3) {
      unint64_t v3 = v5;
    }
  }
  BOOL v6 = v3 >= v2;
  unint64_t v7 = v3 - v2;
  if (!v6) {
    unint64_t v7 = 0;
  }
  unint64_t result = sub_244CC8720(1000 * v7, a1 + 2640);
  uint64_t v9 = 0;
  *(_DWORD *)(a1 + 3040) = -1;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  do
  {
    uint64_t v10 = a1 + v9;
    int v11 = *(_DWORD *)(a1 + v9 + 8);
    if (v11 != -1)
    {
      if (*(_DWORD *)(a1 + 3040) < v11) {
        *(_DWORD *)(a1 + 3040) = v11;
      }
      if (*(unsigned char *)(a1 + v9 + 12))
      {
        int v12 = *(_DWORD *)(v10 + 8);
        unint64_t result = __darwin_check_fd_set_overflow(v12, (const void *)(a1 + 2656), 0);
        if (result) {
          *(_DWORD *)(a1 + 2656 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v12;
        }
      }
      if ((*(unsigned char *)(a1 + v9 + 12) & 2) != 0)
      {
        int v13 = *(_DWORD *)(v10 + 8);
        unint64_t result = __darwin_check_fd_set_overflow(v13, (const void *)(a1 + 2784), 0);
        if (result) {
          *(_DWORD *)(a1 + 2784 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v13;
        }
      }
    }
    v9 += 40;
  }
  while (v9 != 2560);
  return result;
}

uint64_t sub_244CCB180(uint64_t a1)
{
  uint64_t result = select(*(_DWORD *)(a1 + 3040) + 1, (fd_set *)(a1 + 2656), (fd_set *)(a1 + 2784), (fd_set *)(a1 + 2912), (timeval *)(a1 + 2640));
  *(_DWORD *)(a1 + 3044) = result;
  return result;
}

uint64_t sub_244CCB1C0(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_244D6A434("src/system/SystemLayerImplSelect.cpp", 710);
  if ((*(_DWORD *)(a1 + 3044) & 0x80000000) != 0)
  {
    unint64_t v7 = sub_244CC8484(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = __error();
      sub_244CC8788(*v8, "src/system/SystemLayerImplSelect.cpp", 714, (uint64_t)&v11);
      *(_OWORD *)long long buf = v11;
      uint64_t v14 = v12;
      uint64_t v9 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Select failed: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      uint64_t v10 = __error();
      sub_244CC8788(*v10, "src/system/SystemLayerImplSelect.cpp", 714, (uint64_t)&v11);
      *(_OWORD *)long long buf = v11;
      uint64_t v14 = v12;
      sub_244CB7B34((const char **)buf, 1);
      return sub_244CC4DE0(0x1Fu, 1);
    }
  }
  else
  {
    if (*(void *)(a1 + 2632)) {
      sub_244E23FC4();
    }
    uint64_t v2 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    *(void *)(a1 + 2632) = sub_244CC9614((unint64_t **)(a1 + 2624), v2 + 1);
    uint64_t result = sub_244CC95C8((uint64_t *)(a1 + 2632));
    if (result)
    {
      int v4 = (void *)result;
      do
      {
        sub_244CCB414(a1 + 2568, v4);
        uint64_t result = sub_244CC95C8((uint64_t *)(a1 + 2632));
        int v4 = (void *)result;
      }
      while (result);
    }
    if (*(int *)(a1 + 3044) >= 1)
    {
      for (uint64_t i = 0; i != 2560; i += 40)
      {
        uint64_t v6 = a1 + i;
        uint64_t result = *(unsigned int *)(a1 + i + 8);
        if (result != -1 && *(void *)(v6 + 16))
        {
          uint64_t result = sub_244CCAEEC(result, (_DWORD *)(a1 + 2656), (_DWORD *)(a1 + 2784), (_DWORD *)(a1 + 2912));
          if ((_BYTE)result) {
            uint64_t result = (*(uint64_t (**)(void, void))(v6 + 16))(result, *(void *)(a1 + i + 40));
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_244CCB414(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  unsigned int v8 = (uint64_t (*)(uint64_t, uint64_t))a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = sub_244CC9408();
  --*((unsigned char *)v6 + 1);
  sub_244CCB674(a1, a2);

  return v8(v4, v5);
}

void sub_244CCB490(uint64_t a1)
{
  sub_244CCB4F0(a1);

  JUMPOUT(0x245695FA0);
}

BOOL sub_244CCB4C8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 3048) == 2;
}

uint64_t sub_244CCB4D8()
{
  return 0;
}

uint64_t sub_244CCB4E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 3072) = a2;
  return result;
}

uint64_t sub_244CCB4E8(uint64_t a1)
{
  return *(void *)(a1 + 3072);
}

uint64_t sub_244CCB4F0(uint64_t a1)
{
  *(void *)a1 = &unk_26F953730;
  if ((*(unsigned __int8 *)(a1 + 3048) | 4) != 4) {
    sub_244E2403C();
  }
  *(unsigned char *)(a1 + 3048) = 5;
  sub_244CCB554((uint64_t *)(a1 + 2568));
  return a1;
}

uint64_t *sub_244CCB554(uint64_t *result)
{
  if (!byte_268EC3510)
  {
    if (*result) {
      sub_244E240E4(result);
    }
  }
  return result;
}

uint64_t sub_244CCB584(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0x1Bu, "Support");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *a1;
    *(_DWORD *)long long buf = 134217984;
    uint64_t v6 = v3;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_ERROR, "HeapObjectPool: %lu allocated", buf, 0xCu);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result) {
    return sub_244CC4DE0(0x1Bu, 1);
  }
  return result;
}

uint64_t sub_244CCB658(uint64_t a1, void *a2)
{
  return 0;
}

void sub_244CCB674(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = sub_244CC6450((void *)(a1 + 16), (uint64_t)a2);
    if (!v4) {
      sub_244E24190();
    }
    uint64_t v5 = v4;
    void *v4 = 0;
    j__free(a2);
    if (*(void *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      *(void *)(v5[1] + 16) = v5[2];
      *(void *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(void *)a1;
  }
}

void *sub_244CCB6FC(unint64_t *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_244CC4D84(0x30uLL);
  long long v11 = v10;
  if (v10)
  {
    uint64_t v12 = *a4;
    uint64_t v13 = *a5;
    void *v10 = *a3;
    v10[1] = a2;
    uint64_t v10[2] = v12;
    void v10[3] = v13;
    void v10[4] = 0;
    v10[5] = 0;
    uint64_t v14 = sub_244CC4D84(0x18uLL);
    if (v14)
    {
      void *v14 = v11;
      v14[1] = a1 + 2;
      v14[2] = 0;
      v14[2] = a1[4];
      *(void *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      unint64_t v15 = a1[1];
      unint64_t v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15) {
        a1[1] = v16;
      }
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

__n128 sub_244CCB7B4@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a1 + 24) = a2;
  sub_244CB7594(a2, a3, 22, (_DWORD *)(a1 + 32), (uint64_t)&v8);
  *(_OWORD *)a1 = v8;
  uint64_t v6 = v9;
  *(void *)(a1 + 16) = v9;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(void *)(a4 + 16) = v6;
  return result;
}

__n128 sub_244CCB81C@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 24) = a2;
  sub_244CB7594(a2, 256, 22, (_DWORD *)(a1 + 32), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  uint64_t v5 = v8;
  *(void *)(a1 + 16) = v8;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244CCB880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3B04(a1, a2);
  uint64_t result = sub_244CB3B68(a1);
  if (result == 22)
  {
    return sub_244CB4C90(a1, (_DWORD *)(a1 + 72), a3);
  }
  else
  {
    *(_DWORD *)a3 = 38;
    *(void *)(a3 + 8) = "src/app/MessageDef/ArrayParser.cpp";
    *(_DWORD *)(a3 + 16) = 26;
  }
  return result;
}

void sub_244CCB8FC(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCEFC8(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCB970(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCB980(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_244CCB98C(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCEEFC(a1 + 40, *(void **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_244CCB9E4(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

__n128 sub_244CCBA3C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  sub_244CCCE48((uint64_t)a1);
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

void sub_244CCBA74(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_26519C4A0;
  a5[2] = 115;
  sub_244CB3988((uint64_t)v12);
  sub_244CB59A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_244CB3B68((uint64_t)v12) == a3)
    {
      sub_244CB3FB0((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

uint64_t sub_244CCBB4C(uint64_t a1)
{
  if (*(_DWORD *)a1)
  {
    __n128 v5 = *(__n128 *)a1;
    uint64_t v6 = *(void *)(a1 + 16);
    sub_244CCCE34((__n128 *)(a1 + 40), &v5);
  }
  else
  {
    sub_244CCF9D0(a1 + 40, *(void **)(a1 + 24), (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_244CCBBC0(uint64_t a1)
{
  return a1 + 40;
}

void sub_244CCBBC8(int *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBBD8(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, char *a4@<X3>, void *a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_26519C4D0;
  a5[2] = 115;
  sub_244CB3988((uint64_t)v12);
  sub_244CB59A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_244CB3B68((uint64_t)v12) == a3)
    {
      sub_244CB3C0C((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_244CCBCB0(int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBCC0(int *a1@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBCD0(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBCE0(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBCF0(int *a1@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBD00(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCBD10(int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (int *)(a2 + 4);
  sub_244CCBA74(a1, 3u, 4, (_DWORD *)(a2 + 4), a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CCBA74(a1, 4u, 4, (_DWORD *)(a2 + 8), a4);
    if (!*(_DWORD *)a4)
    {
      if (a3) {
        goto LABEL_4;
      }
      int v10 = *v8;
      unsigned int v11 = HIWORD(*v8);
      if (v11 > 0xFFF4 || ((v10 & 0x8000) != 0 || v11) && (!v11 || (unsigned __int16)(v10 + 1024) >= 0x3FFu))
      {
        *(_DWORD *)a4 = 1408;
        a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
        int v9 = 182;
      }
      else
      {
        unsigned int v12 = *(_DWORD *)(a2 + 8);
        unsigned int v13 = HIWORD(v12);
        if ((unsigned __int16)((unsigned __int16)v12 >> 12) <= 4u && v13 < 0xFFF5
          || !v13 && (unsigned __int16)(v12 + 4096) < 0xFFFu)
        {
LABEL_4:
          *(_OWORD *)a4 = xmmword_26519C4B8;
          a4[2] = 186;
          v16[0] = 0;
          char v17 = 0;
          sub_244CCC7EC(a1, 5u, 4, (uint64_t)v16, &v14);
          *(_OWORD *)a4 = v14;
          a4[2] = v15;
          if (*(_DWORD *)a4 == 33)
          {
            *(unsigned char *)(a2 + 14) = 0;
            *(_DWORD *)a4 = 0;
            a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
            int v9 = 206;
          }
          else
          {
            if (*(_DWORD *)a4) {
              return;
            }
            if (!v17)
            {
              *(unsigned char *)(a2 + 14) = 4;
              return;
            }
            *(_DWORD *)a4 = 181;
            a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
            int v9 = 198;
          }
          goto LABEL_20;
        }
        *(_DWORD *)a4 = 1408;
        a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
        int v9 = 183;
      }
LABEL_20:
      *((_DWORD *)a4 + 4) = v9;
    }
  }
}

void sub_244CCBEE8(int *a1@<X0>, _WORD *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CCBD10(a1, (uint64_t)a2, a3, a4);
  if (!*(_DWORD *)a4)
  {
    sub_244CCC714(a1, 2u, 4, a2, a4);
  }
}

void sub_244CCBF60(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (__int16 *)(a2 + 2);
  sub_244CCC714(a1, 2u, 4, (_WORD *)a2 + 4, v15);
  if (LODWORD(v15[0]) != 33)
  {
    if (LODWORD(v15[0]))
    {
      int v9 = 233;
      goto LABEL_33;
    }
    if (*v6 == -1)
    {
      int v9 = 227;
      goto LABEL_33;
    }
  }
  sub_244CCBA74(a1, 3u, 4, a2, v15);
  if (LODWORD(v15[0]) == 33) {
    goto LABEL_16;
  }
  if (LODWORD(v15[0]))
  {
    int v9 = 244;
    goto LABEL_33;
  }
  int v7 = *a2;
  unsigned int v8 = HIWORD(*a2);
  if (v8 > 0xFFF4)
  {
    int v9 = 238;
    goto LABEL_33;
  }
  if ((v7 & 0x8000) == 0 && !v8 || (int v9 = 238, v10 = 1408, v8) && (unsigned __int16)(v7 + 1024) <= 0x3FEu)
  {
LABEL_16:
    unsigned int v11 = (unsigned int *)(a2 + 1);
    sub_244CCBA74(a1, 4u, 4, a2 + 1, v15);
    if (LODWORD(v15[0]) == 33) {
      goto LABEL_30;
    }
    if (LODWORD(v15[0]))
    {
      int v9 = 255;
      goto LABEL_33;
    }
    if ((unsigned int v12 = HIWORD(*v11), (unsigned __int16)((unsigned __int16)*v11 >> 12) <= 4u) && v12 < 0xFFF5
      || (int v9 = 249, v10 = 1408, !v12) && (unsigned __int16)(*v11 + 4096) <= 0xFFEu)
    {
LABEL_30:
      if (*a2 == -1)
      {
        unsigned int v14 = *v11;
        if (*v11 != -1)
        {
          int v9 = 261;
          int v10 = 1408;
          if (HIWORD(v14) || (unsigned __int16)(v14 + 4096) > 0xFFEu) {
            goto LABEL_34;
          }
        }
      }
      unsigned int v13 = (_WORD *)a2 + 5;
      sub_244CCC714(a1, 5u, 4, v13, v15);
      if (LODWORD(v15[0]) == 33)
      {
LABEL_22:
        int v10 = 0;
        int v9 = 274;
        goto LABEL_34;
      }
      if (!LODWORD(v15[0]))
      {
        int v9 = 267;
        int v10 = 1408;
        if (*v11 == -1 || (unsigned __int16)*v13 == 0xFFFF) {
          goto LABEL_34;
        }
        goto LABEL_22;
      }
      int v9 = 273;
LABEL_33:
      int v10 = 1408;
    }
  }
LABEL_34:
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/app/MessageDef/AttributePathIB.cpp";
  *(_DWORD *)(a3 + 16) = v9;
}

uint64_t sub_244CCC170(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB65C8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCC1C8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68CC();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCC220(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCC278(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCC2D0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCC328(uint64_t a1, unsigned __int16 *a2)
{
  if (!*(_DWORD *)a1)
  {
    sub_2447F5C00(a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(void *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_244CCC380(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

__n128 sub_244CCC3D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned __int16 *)(a2 + 8) != 0xFFFF && !*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  if (*(_DWORD *)a2 != -1 && !*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  if (*(_DWORD *)(a2 + 4) != -1 && !*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  if (*(unsigned __int16 *)(a2 + 10) != 0xFFFF && !*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  sub_244CCCE48(a1);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = *(void *)(a1 + 16);
  return result;
}

void sub_244CCC500(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v9;
    *(void *)(a1 + 16) = v10;
    if (!*(_DWORD *)a1)
    {
      sub_244CB694C();
      *(_OWORD *)a1 = v9;
      *(void *)(a1 + 16) = v10;
      if (!*(_DWORD *)a1)
      {
        sub_244CB694C();
        *(_OWORD *)a1 = v9;
        *(void *)(a1 + 16) = v10;
      }
    }
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 14);
  if (v6 < 2) {
    goto LABEL_9;
  }
  if (v6 == 4)
  {
    LOBYTE(v7) = 0;
    char v8 = 0;
    if (!*(_DWORD *)a1)
    {
      sub_2447F5C00(&v7, (uint64_t)&v9);
      *(_OWORD *)a1 = v9;
      *(void *)(a1 + 16) = v10;
    }
LABEL_9:
    sub_244CCCE48(a1);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
    return;
  }
  *(_DWORD *)a3 = 47;
  *(void *)(a3 + 8) = "src/app/MessageDef/AttributePathIB.cpp";
  *(_DWORD *)(a3 + 16) = 395;
}

void sub_244CCC63C(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X3>, void *a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_26519C4D0;
  a5[2] = 115;
  sub_244CB3988((uint64_t)v12);
  sub_244CB59A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_244CB3B68((uint64_t)v12) == a3)
    {
      sub_244CB3EFC((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_244CCC714(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _WORD *a4@<X3>, void *a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_26519C4D0;
  a5[2] = 115;
  sub_244CB3988((uint64_t)v12);
  sub_244CB59A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_244CB3B68((uint64_t)v12) == a3)
    {
      sub_244CB3F40((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_244CCC7EC(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_26519C4E8;
  a5[2] = 145;
  sub_244CB3988((uint64_t)v13);
  sub_244CB59A4(a1, a2, (uint64_t)v13, a5);
  if (!*(_DWORD *)a5)
  {
    if (*(unsigned char *)(a4 + 2)) {
      *(unsigned char *)(a4 + 2) = 0;
    }
    if (sub_244CB3B68((uint64_t)v13) == a3 || sub_244CB3B68((uint64_t)v13) == 20)
    {
      if (sub_244CB3B68((uint64_t)v13) == a3)
      {
        __int16 v12 = 0;
        sub_244CB3F40((uint64_t)v13, &v12, (uint64_t)&v10);
        *(_OWORD *)a5 = v10;
        a5[2] = v11;
        if (!*(_DWORD *)a5)
        {
          *(_WORD *)a4 = v12;
          *(unsigned char *)(a4 + 2) = 1;
        }
      }
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 154;
    }
  }
}

uint64_t sub_244CCC90C(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCEF64(a1 + 40, *(void **)(a1 + 24), (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

void sub_244CCC960(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCFA34(a2, (uint64_t)v6, a3);
  }
}

void sub_244CCC9D4(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCFA34(a2, (uint64_t)v6, a3);
  }
}

uint64_t sub_244CCCA48(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF968(a1 + 40, *(void **)(a1 + 24), 0, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_244CCCAA0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF968(a1 + 160, *(void **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 160;
}

uint64_t sub_244CCCAF8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF9D0(a1 + 40, *(void **)(a1 + 24), (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

double sub_244CCCB4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF9D0(a1 + 40, *(void **)(a1 + 24), (uint64_t)&v18);
    *(__n128 *)a1 = v18;
    *(void *)(a1 + 16) = v19;
  }
  __n128 v6 = *(__n128 *)a1;
  *a3 = *(__n128 *)a1;
  a3[1].n128_u64[0] = *(void *)(a1 + 16);
  if (!a3->n128_u32[0])
  {
    unsigned __int16 v7 = (__n128 *)(a1 + 40);
    uint64_t v8 = sub_244CCCA48((uint64_t)v7);
    __n128 v6 = *v7;
    *a3 = *v7;
    a3[1].n128_u64[0] = v7[1].n128_u64[0];
    if (!a3->n128_u32[0])
    {
      long long v9 = (__n128 *)v8;
      uint64_t v10 = sub_244CCCD30(v8);
      __n128 v6 = *v9;
      *a3 = *v9;
      a3[1].n128_u64[0] = v9[1].n128_u64[0];
      if (!a3->n128_u32[0])
      {
        uint64_t v11 = (__n128 *)v10;
        uint64_t v12 = sub_244CCC220(v10);
        uint64_t v13 = sub_244CCC278(v12);
        unsigned int v14 = (__n128 *)sub_244CCC2D0(v13);
        sub_244CCBA3C(v14, &v18);
        __n128 v6 = *v11;
        *a3 = *v11;
        a3[1].n128_u64[0] = v11[1].n128_u64[0];
        if (!a3->n128_u32[0])
        {
          uint64_t v15 = sub_244CCCD88((uint64_t)v9);
          __n128 v6 = *v9;
          *a3 = *v9;
          a3[1].n128_u64[0] = v9[1].n128_u64[0];
          if (!a3->n128_u32[0])
          {
            unint64_t v16 = (__n128 *)v15;
            sub_244CCF63C(v15, a2);
            __n128 v6 = *v16;
            *a3 = *v16;
            a3[1].n128_u64[0] = v16[1].n128_u64[0];
            if (!a3->n128_u32[0])
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              v6.n128_u64[0] = sub_244CCBA3C(v9, a3).n128_u64[0];
              if (!a3->n128_u32[0]) {
                v6.n128_u64[0] = sub_244CCBA3C(v7, a3).n128_u64[0];
              }
            }
          }
        }
      }
    }
  }
  return v6.n128_f64[0];
}

void sub_244CCCCBC(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCEFC8(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

uint64_t sub_244CCCD30(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCEEFC(a1 + 40, *(void **)(a1 + 24), 0, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_244CCCD88(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF968(a1 + 80, *(void **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 80;
}

uint64_t sub_244CCCDE0(uint64_t result)
{
  *(_DWORD *)__n128 result = 3;
  *(void *)(result + 8) = "src/app/MessageDef/Builder.cpp";
  *(_DWORD *)(result + 16) = 35;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  return result;
}

uint64_t sub_244CCCE0C(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = a3;
  return result;
}

uint64_t sub_244CCCE18(uint64_t result)
{
  *(_DWORD *)__n128 result = 0;
  *(void *)(result + 8) = "src/app/MessageDef/Builder.cpp";
  *(_DWORD *)(result + 16) = 45;
  return result;
}

__n128 sub_244CCCE34(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_244CCCE48(uint64_t result)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v1 = result;
    __n128 result = sub_244CB7708(*(void *)(result + 24), *(_DWORD *)(result + 32), (uint64_t)&v2);
    *(_OWORD *)uint64_t v1 = v2;
    *(void *)(v1 + 16) = v3;
    if (!*(_DWORD *)v1) {
      *(_DWORD *)(v1 + 32) = -1;
    }
  }
  return result;
}

void sub_244CCCEA8(int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCCEB8(int *a1@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCCEC8(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_244CCCED8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68CC();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCCF30(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCCF88(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

void sub_244CCCFE0(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/MessageDef/CommandDataIB.cpp";
    *((_DWORD *)a3 + 4) = 104;
  }
}

uint64_t sub_244CCD034(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  sub_244CCEEFC(a1 + 40, *(void **)(a1 + 24), 0, (uint64_t)&v4);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v5;
  return v2;
}

void sub_244CCD088()
{
}

void sub_244CCD098(int *a1@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD0A8(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD0B8(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCD138(a1, (int *)(a2 + 4), (_DWORD *)(a2 + 8), a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CCC714(a1, 0, 4, (_WORD *)a2, a3);
  }
}

void sub_244CCD138(int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CCBA74(a1, 1u, 4, a2, a4);
  if (!*(_DWORD *)a4)
  {
    int v8 = *a2;
    unsigned int v9 = HIWORD(*a2);
    if (v9 > 0xFFF4 || ((v8 & 0x8000) != 0 || v9) && (!v9 || (unsigned __int16)(v8 + 1024) >= 0x3FFu))
    {
      *(_DWORD *)a4 = 1408;
      a4[1] = "src/app/MessageDef/CommandPathIB.cpp";
      int v10 = 129;
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_244CCBA74(a1, 2u, 4, a3, a4);
      if (*(_DWORD *)a4) {
        return;
      }
      if ((*a3 & 0xFF00) != 0 || HIWORD(*a3) >= 0xFFF5u)
      {
        *(_DWORD *)a4 = 1408;
        a4[1] = "src/app/MessageDef/CommandPathIB.cpp";
        int v10 = 132;
      }
      else
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "src/app/MessageDef/CommandPathIB.cpp";
        int v10 = 134;
      }
    }
    *((_DWORD *)a4 + 4) = v10;
  }
}

uint64_t sub_244CCD250(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCD2A8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

__n128 sub_244CCD300@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a2 + 12))
  {
    if (*(_DWORD *)a1) {
      goto LABEL_7;
    }
    sub_244CB6904();
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
  }
  if (!*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
    if (!*(_DWORD *)a1)
    {
      sub_244CB694C();
      *(_OWORD *)a1 = v6;
      *(void *)(a1 + 16) = v7;
    }
  }
LABEL_7:
  sub_244CCCE48(a1);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = *(void *)(a1 + 16);
  return result;
}

__n128 sub_244CCD3DC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v5;
    *(void *)(a1 + 16) = v6;
    if (!*(_DWORD *)a1)
    {
      sub_244CB694C();
      *(_OWORD *)a1 = v5;
      *(void *)(a1 + 16) = v6;
      if (!*(_DWORD *)a1)
      {
        sub_244CB694C();
        *(_OWORD *)a1 = v5;
        *(void *)(a1 + 16) = v6;
      }
    }
  }
  sub_244CCCE48(a1);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return result;
}

uint64_t sub_244CCD4B0(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  sub_244CCF9D0(a1 + 40, *(void **)(a1 + 24), (uint64_t)&v4);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v5;
  return v2;
}

void sub_244CCD500(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  v18[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 40;
  sub_244CCF9D0(a1 + 40, *(void **)(a1 + 24), (uint64_t)buf);
  *(_OWORD *)a1 = *(_OWORD *)buf;
  unint64_t v7 = v18[0];
  *(void *)(a1 + 16) = v18[0];
  *a3 = *(__n128 *)a1;
  a3[1].n128_u64[0] = v7;
  if (!a3->n128_u32[0])
  {
    uint64_t v8 = sub_244CCCD30(v6);
    *a3 = *(__n128 *)v6;
    a3[1].n128_u64[0] = *(void *)(v6 + 16);
    if (!a3->n128_u32[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      uint64_t v9 = sub_244CCCF30(v8);
      int v10 = (__n128 *)sub_244CCCF88(v9);
      sub_244CCBA3C(v10, a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_2446F12CC((unsigned char *)(a2 + 4));
        uint64_t v11 = (__n128 *)sub_244CCD2A8(v6);
        sub_244CCBA3C(v11, a3);
        if (!a3->n128_u32[0])
        {
          uint64_t v12 = sub_244CC8484(0xDu, "DataManagement");
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = *(unsigned __int16 *)(a2 + 12);
            int v14 = HIWORD(*(_DWORD *)a2);
            int v15 = (unsigned __int16)*(_DWORD *)a2;
            int v16 = *(_DWORD *)sub_2446F12CC((unsigned char *)(a2 + 4));
            *(_DWORD *)long long buf = 67109888;
            *(_DWORD *)&uint8_t buf[4] = v13;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v14;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v18[0]) = v15;
            WORD2(v18[0]) = 1024;
            *(_DWORD *)((char *)v18 + 6) = v16;
            _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Encoded DataVersionFilter: Endpoint=%u Cluster=0x%04X_%04X Version=%u", buf, 0x1Au);
          }
          if (sub_244CC4E58(2u))
          {
            sub_2446F12CC((unsigned char *)(a2 + 4));
            sub_244CC4DE0(0xDu, 2);
          }
          a3->n128_u32[0] = 0;
          a3->n128_u64[1] = (unint64_t)"src/app/MessageDef/DataVersionFilterIBs.cpp";
          a3[1].n128_u32[0] = 84;
        }
      }
    }
  }
}

void sub_244CCD708(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCEFC8(a2, (uint64_t)v6, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/MessageDef/EventDataIB.cpp";
      *((_DWORD *)a3 + 4) = 161;
    }
  }
}

void sub_244CCD7A4(int *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD7B4(int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD7C4(int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD7D4(int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD7E4(int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD7F4(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCD800(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  sub_244CCCEB8(a1, (_WORD *)a2, &v9);
  if (v9)
  {
    *(_DWORD *)a3 = 182;
    *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
    int v6 = 203;
  }
  else
  {
    sub_244CCCEC8(a1, (_DWORD *)(a2 + 4), &v7);
    long long v9 = v7;
    uint64_t v10 = v8;
    if (v7)
    {
      *(_DWORD *)a3 = 182;
      *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
      int v6 = 206;
    }
    else
    {
      sub_244CCBCD0(a1, (_DWORD *)(a2 + 8), &v7);
      long long v9 = v7;
      uint64_t v10 = v8;
      if (v7)
      {
        *(_DWORD *)a3 = 182;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        int v6 = 209;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        int v6 = 211;
      }
    }
  }
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_244CCD914(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = 0;
  sub_244CCC63C(a1, 6u, 4, &v21, &v18);
  int v7 = v18;
  int v6 = HIDWORD(v18);
  int v8 = HIDWORD(v20);
  if (v18 == 33)
  {
    int v10 = 0;
LABEL_7:
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 20) = v8;
    sub_244CCC63C(a1, 5u, 4, &v21, &v18);
    if (v18 == 33)
    {
      int v11 = 0;
    }
    else
    {
      if (v18)
      {
        uint64_t v15 = v19;
        uint64_t v16 = v20;
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v15;
        *(void *)(a3 + 16) = v16;
        return;
      }
      if (*(unsigned char *)(a2 + 32) != 1)
      {
        *(_DWORD *)a3 = 186;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        int v9 = 243;
        goto LABEL_25;
      }
      *(void *)(a2 + 40) += v21;
      int v11 = 1;
    }
    sub_244CCC63C(a1, 4u, 4, &v21, &v18);
    int v7 = v18;
    int v6 = HIDWORD(v18);
    int v8 = HIDWORD(v20);
    if (v18 == 33)
    {
      int v12 = 0;
      goto LABEL_19;
    }
    if (!v18)
    {
      *(unsigned char *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = v21;
      int v12 = 1;
LABEL_19:
      *(_DWORD *)(a3 + 4) = v6;
      *(_DWORD *)(a3 + 20) = v8;
      sub_244CCC63C(a1, 3u, 4, &v21, &v18);
      if (v18)
      {
        int v17 = 0;
      }
      else
      {
        int v17 = 1;
        *(unsigned char *)(a2 + 32) = 1;
        *(void *)(a2 + 40) = v21;
      }
      if (v11 + v10 + v12 + v17 == 1)
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        int v9 = 276;
      }
      else
      {
        *(_DWORD *)a3 = 186;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        int v9 = 278;
      }
      goto LABEL_25;
    }
LABEL_15:
    uint64_t v13 = v19;
    int v14 = v20;
    *(_DWORD *)a3 = v7;
    *(_DWORD *)(a3 + 4) = v6;
    *(void *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 16) = v14;
    *(_DWORD *)(a3 + 20) = v8;
    return;
  }
  if (v18) {
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a2 + 32))
  {
    *(void *)(a2 + 40) += v21;
    int v10 = 1;
    goto LABEL_7;
  }
  *(_DWORD *)a3 = 186;
  *(void *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
  int v9 = 230;
LABEL_25:
  *(_DWORD *)(a3 + 16) = v9;
}

void sub_244CCDB34(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v7 = 0;
  sub_244CCF15C((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCD708(a1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CCD800(v6, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CCC63C(a1, 1u, 4, (void *)(a2 + 16), a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CCDE00(a1, 2u, 4, &v7, a3);
        if (!*(_DWORD *)a3)
        {
          *(unsigned char *)(a2 + 24) = v7;
          a3[1] = 0;
          a3[2] = 0;
          *a3 = 0;
          sub_244CCD914(a1, a2, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *(_DWORD *)a3 = 0;
            a3[1] = "src/app/MessageDef/EventDataIB.cpp";
            *((_DWORD *)a3 + 4) = 291;
          }
        }
      }
    }
  }
}

uint64_t sub_244CCDC48(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68B8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCDCA0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68CC();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCDCF8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68CC();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCDD50(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68CC();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCDDA8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68CC();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

void sub_244CCDE00(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_26519C578;
  a5[2] = 115;
  sub_244CB3988((uint64_t)v12);
  sub_244CB59A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_244CB3B68((uint64_t)v12) == a3)
    {
      sub_244CB3E8C((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_244CCDED8(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = a1 + 40;
  sub_244CCF9D0(a1 + 40, *(void **)(a1 + 24), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  unint64_t v5 = v8;
  *(void *)(a1 + 16) = v8;
  *a2 = *(__n128 *)a1;
  a2[1].n128_u64[0] = v5;
  if (!a2->n128_u32[0])
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    int v6 = (__n128 *)sub_244CCC1C8(v4);
    sub_244CCBA3C(v6, a2);
    if (!a2->n128_u32[0])
    {
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      sub_244CCCE48(a1);
      *a2 = *(__n128 *)a1;
      a2[1].n128_u64[0] = *(void *)(a1 + 16);
      if (!a2->n128_u32[0])
      {
        a2->n128_u32[0] = 0;
        a2->n128_u64[1] = (unint64_t)"src/app/MessageDef/EventFilterIBs.cpp";
        a2[1].n128_u32[0] = 84;
      }
    }
  }
}

void sub_244CCDFAC(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CCC714(a1, 1u, 4, (_WORD *)a2, v7);
  if (LODWORD(v7[0]))
  {
    *(_DWORD *)a3 = 182;
    *(void *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
    int v6 = 149;
  }
  else
  {
    sub_244CCBA74(a1, 2u, 4, (_DWORD *)(a2 + 4), v7);
    if (LODWORD(v7[0]))
    {
      *(_DWORD *)a3 = 182;
      *(void *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
      int v6 = 150;
    }
    else
    {
      sub_244CCBA74(a1, 3u, 4, (_DWORD *)(a2 + 8), v7);
      if (LODWORD(v7[0]))
      {
        *(_DWORD *)a3 = 182;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
        int v6 = 151;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
        int v6 = 152;
      }
    }
  }
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_244CCE0AC(int *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCE0BC(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  int v6 = (__int16 *)(a2 + 8);
  sub_244CCC714(a1, 1u, 4, (_WORD *)(a2 + 8), &v11);
  if (v11 == 33)
  {
    LODWORD(v11) = 0;
    *((void *)&v11 + 1) = "src/app/MessageDef/EventPathIB.cpp";
    LODWORD(v12) = 169;
  }
  else
  {
    if (v11)
    {
      int v7 = 171;
      goto LABEL_23;
    }
    if (*v6 == -1)
    {
      int v7 = 165;
LABEL_23:
      int v8 = 1408;
      goto LABEL_24;
    }
  }
  sub_244CCBA74(a1, 2u, 4, (_DWORD *)a2, &v9);
  long long v11 = v9;
  uint64_t v12 = v10;
  if (v9 == 33)
  {
    LODWORD(v11) = 0;
    *((void *)&v11 + 1) = "src/app/MessageDef/EventPathIB.cpp";
    LODWORD(v12) = 180;
  }
  else
  {
    if (v9)
    {
      int v7 = 182;
      goto LABEL_23;
    }
    if (*(_DWORD *)a2 == -1)
    {
      int v7 = 176;
      goto LABEL_23;
    }
  }
  sub_244CCBA74(a1, 3u, 4, (_DWORD *)(a2 + 4), &v9);
  long long v11 = v9;
  uint64_t v12 = v10;
  if (v9)
  {
    if (v9 != 33)
    {
      int v7 = 193;
      goto LABEL_23;
    }
    LODWORD(v11) = 0;
    *((void *)&v11 + 1) = "src/app/MessageDef/EventPathIB.cpp";
    LODWORD(v12) = 187;
  }
  else if (*(_DWORD *)(a2 + 4) == -1)
  {
    int v7 = 191;
    goto LABEL_23;
  }
  sub_244CCBBD8(a1, 4u, 8, (char *)(a2 + 10), &v9);
  long long v11 = v9;
  uint64_t v12 = v10;
  if (v9 != 33 && v9)
  {
    int v7 = 200;
    goto LABEL_23;
  }
  int v8 = 0;
  int v7 = 201;
LABEL_24:
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
  *(_DWORD *)(a3 + 16) = v7;
}

uint64_t sub_244CCE288(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB65C8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

__n128 sub_244CCE2E0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned __int16 *)(a2 + 8) != 0xFFFF && !*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  if (*(_DWORD *)a2 != -1 && !*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  if (*(_DWORD *)(a2 + 4) != -1 && !*(_DWORD *)a1)
  {
    sub_244CB694C();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  if (*(unsigned char *)(a2 + 10) && !*(_DWORD *)a1)
  {
    sub_244CB65C8();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  sub_244CCCE48(a1);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = *(void *)(a1 + 16);
  return result;
}

void sub_244CCE404(void *a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  sub_244CCCDE0((uint64_t)&v12);
  sub_244CCCDE0((uint64_t)&v15);
  sub_244CCCDE0((uint64_t)&v17);
  sub_244CCCDE0((uint64_t)&v18);
  sub_244CCCDE0((uint64_t)&v19);
  sub_244CCCDE0((uint64_t)&v20);
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_244CCF9D0((uint64_t)&v12, a1, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    if (!v12.n128_u32[0])
    {
      sub_244CCF968((uint64_t)&v15, v14, 0, (uint64_t)&v21);
      __n128 v12 = v21;
      unint64_t v13 = v22;
    }
    *a3 = v12;
    a3[1].n128_u64[0] = v13;
    if (!a3->n128_u32[0])
    {
      uint64_t v6 = sub_244CCCD30((uint64_t)&v15);
      *a3 = v15;
      a3[1].n128_u64[0] = v16;
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        uint64_t v7 = sub_244CCCF30(v6);
        uint64_t v8 = sub_244CCCF88(v7);
        long long v9 = (__n128 *)sub_244CCC278(v8);
        sub_244CCBA3C(v9, a3);
        if (!a3->n128_u32[0])
        {
          a3->n128_u64[0] = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          uint64_t v10 = sub_244CCCD88((uint64_t)&v15);
          uint64_t v11 = sub_244CCF63C(v10, a2);
          *a3 = *(__n128 *)v11;
          a3[1].n128_u64[0] = *(void *)(v11 + 16);
          if (!a3->n128_u32[0])
          {
            a3->n128_u64[0] = 0;
            a3->n128_u64[1] = 0;
            a3[1].n128_u64[0] = 0;
            sub_244CCBA3C(&v15, a3);
            if (!a3->n128_u32[0])
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              sub_244CCCE48((uint64_t)&v12);
              *a3 = v12;
              a3[1].n128_u64[0] = v13;
              if (!a3->n128_u32[0])
              {
                a3->n128_u64[0] = 0;
                a3->n128_u64[1] = 0;
                a3[1].n128_u64[0] = 0;
                sub_244CB6414((uint64_t)a1, (uint64_t)a3);
                if (!a3->n128_u32[0])
                {
                  a3->n128_u32[0] = 0;
                  a3->n128_u64[1] = (unint64_t)"src/app/MessageDef/EventReportIB.cpp";
                  a3[1].n128_u32[0] = 143;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_244CCE5E4(int *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCE5F4(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 2, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCE668(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCF9D0(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB64F8(*(void *)(a1 + 24), 4u, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(unsigned char *)(a1 + 168) = 1;
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/MessageDef/InvokeRequestMessage.cpp";
      *((_DWORD *)a3 + 4) = 121;
    }
  }
}

uint64_t sub_244CCE6E0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB65C8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCE738(uint64_t a1, int a2)
{
  if (!*(_DWORD *)a1)
  {
    uint64_t v3 = a1 + 40;
    if (a2) {
      sub_244CCE8A4(v3, *(void **)(a1 + 24), 2u, &v5);
    }
    else {
      sub_244CCB7B4(v3, *(void **)(a1 + 24), 2u, (uint64_t)&v5);
    }
    *(_OWORD *)a1 = v5;
    *(void *)(a1 + 16) = v6;
  }
  return a1 + 40;
}

__n128 sub_244CCE7A8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  if (!a2->n128_u32[0])
  {
    if (a1[10].n128_u8[8])
    {
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      unint64_t v5 = a1[1].n128_u64[1];
      if (*(_WORD *)(v5 + 60) != 21169)
      {
        int v7 = 175;
        int v8 = 3;
        goto LABEL_7;
      }
      unsigned int v6 = *(_DWORD *)(v5 + 52);
      if (v6 <= 3)
      {
        int v7 = 176;
        int v8 = 11;
LABEL_7:
        a2->n128_u32[0] = v8;
        a2->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
        a2[1].n128_u32[0] = v7;
        return result;
      }
      *(_DWORD *)(v5 + 52) = v6 - 4;
      *(_DWORD *)(v5 + 40) += 4;
      a1[10].n128_u8[8] = 0;
    }
    if (!a1->n128_u32[0])
    {
      sub_244CCF044();
      *a1 = v9;
      a1[1].n128_u64[0] = v10;
      if (!a1->n128_u32[0]) {
        sub_244CCCE48((uint64_t)a1);
      }
    }
    __n128 result = *a1;
    *a2 = *a1;
    a2[1].n128_u64[0] = a1[1].n128_u64[0];
  }
  return result;
}

void sub_244CCE8A4(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CCB7B4(a1, a2, a3, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB64F8(*(void *)(a1 + 24), 1u, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(unsigned char *)(a1 + 120) = 1;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/app/MessageDef/InvokeRequests.cpp";
      *((_DWORD *)a4 + 4) = 78;
    }
  }
}

uint64_t sub_244CCE924@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 120)) {
    goto LABEL_5;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *(void *)(result + 24);
  if (*(_WORD *)(v4 + 60) == 21169)
  {
    int v5 = *(_DWORD *)(v4 + 52);
    if (v5)
    {
      *(_DWORD *)(v4 + 52) = v5 - 1;
      ++*(_DWORD *)(v4 + 40);
      *(unsigned char *)(result + 120) = 0;
LABEL_5:
      __n128 result = sub_244CCCE48(result);
      *(_OWORD *)a2 = *(_OWORD *)v2;
      a2[2] = *(void *)(v2 + 16);
      return result;
    }
    int v6 = 176;
    int v7 = 11;
  }
  else
  {
    int v6 = 175;
    int v7 = 3;
  }
  *(_DWORD *)a2 = v7;
  a2[1] = "src/lib/core/TLVWriter.h";
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

uint64_t sub_244CCE9D0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF968(a1 + 120, *(void **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 120;
}

void sub_244CCEA28(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_244CCB7B4(a1, a2, a3, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB64F8(*(void *)(a1 + 24), 1u, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(unsigned char *)(a1 + 280) = 1;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/app/MessageDef/InvokeResponseIBs.cpp";
      *((_DWORD *)a4 + 4) = 78;
    }
  }
}

uint64_t sub_244CCEAA8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 280)) {
    goto LABEL_5;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *(void *)(result + 24);
  if (*(_WORD *)(v4 + 60) == 21169)
  {
    int v5 = *(_DWORD *)(v4 + 52);
    if (v5)
    {
      *(_DWORD *)(v4 + 52) = v5 - 1;
      ++*(_DWORD *)(v4 + 40);
      *(unsigned char *)(result + 280) = 0;
LABEL_5:
      __n128 result = sub_244CCCE48(result);
      *(_OWORD *)a2 = *(_OWORD *)v2;
      a2[2] = *(void *)(v2 + 16);
      return result;
    }
    int v6 = 176;
    int v7 = 11;
  }
  else
  {
    int v6 = 175;
    int v7 = 3;
  }
  *(_DWORD *)a2 = v7;
  a2[1] = "src/lib/core/TLVWriter.h";
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

void sub_244CCEB54(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCEBC8(int *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCEBD8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CCF9D0(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB64F8(*(void *)(a1 + 24), 4u, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(unsigned char *)(a1 + 328) = 1;
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/MessageDef/InvokeResponseMessage.cpp";
      *((_DWORD *)a3 + 4) = 120;
    }
  }
}

uint64_t sub_244CCEC50(uint64_t a1, int a2)
{
  if (!*(_DWORD *)a1)
  {
    uint64_t v3 = a1 + 40;
    if (a2) {
      sub_244CCEA28(v3, *(void **)(a1 + 24), 1u, &v5);
    }
    else {
      sub_244CCB7B4(v3, *(void **)(a1 + 24), 1u, (uint64_t)&v5);
    }
    *(_OWORD *)a1 = v5;
    *(void *)(a1 + 16) = v6;
  }
  return a1 + 40;
}

uint64_t sub_244CCECC0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    if (*(unsigned char *)(a1 + 329))
    {
      uint64_t v2 = *(void *)(a1 + 24);
      if (*(_WORD *)(v2 + 60) != 21169)
      {
        int v6 = 175;
        int v7 = 3;
        goto LABEL_7;
      }
      unsigned int v3 = *(_DWORD *)(v2 + 52);
      BOOL v4 = v3 >= 2;
      unsigned int v5 = v3 - 2;
      if (!v4)
      {
        int v6 = 176;
        int v7 = 11;
LABEL_7:
        *(_DWORD *)a1 = v7;
        *(void *)(a1 + 8) = "src/lib/core/TLVWriter.h";
        *(_DWORD *)(a1 + 16) = v6;
        return a1;
      }
      *(_DWORD *)(v2 + 52) = v5;
      *(_DWORD *)(v2 + 40) += 2;
      *(_DWORD *)a1 = 0;
      *(void *)(a1 + 8) = "src/lib/core/TLVWriter.h";
      *(_DWORD *)(a1 + 16) = 179;
      *(unsigned char *)(a1 + 329) = 0;
    }
    sub_244CB65C8();
    *(_OWORD *)a1 = v9;
    *(void *)(a1 + 16) = v10;
  }
  return a1;
}

uint64_t sub_244CCED98()
{
  return 2;
}

uint64_t sub_244CCEDA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_244CB64F8(*(void *)(a1 + 24), 2u, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *(unsigned char *)(a1 + 329) = 1;
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/MessageDef/InvokeResponseMessage.cpp";
    *((_DWORD *)a2 + 4) = 173;
  }
  return result;
}

__n128 sub_244CCEE00@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  if (!a2->n128_u32[0])
  {
    if (a1[20].n128_u8[8])
    {
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      unint64_t v5 = a1[1].n128_u64[1];
      if (*(_WORD *)(v5 + 60) != 21169)
      {
        int v7 = 175;
        int v8 = 3;
        goto LABEL_7;
      }
      unsigned int v6 = *(_DWORD *)(v5 + 52);
      if (v6 <= 3)
      {
        int v7 = 176;
        int v8 = 11;
LABEL_7:
        a2->n128_u32[0] = v8;
        a2->n128_u64[1] = (unint64_t)"src/lib/core/TLVWriter.h";
        a2[1].n128_u32[0] = v7;
        return result;
      }
      *(_DWORD *)(v5 + 52) = v6 - 4;
      *(_DWORD *)(v5 + 40) += 4;
      a1[20].n128_u8[8] = 0;
    }
    if (!a1->n128_u32[0])
    {
      sub_244CCF044();
      *a1 = v9;
      a1[1].n128_u64[0] = v10;
      if (!a1->n128_u32[0]) {
        sub_244CCCE48((uint64_t)a1);
      }
    }
    __n128 result = *a1;
    *a2 = *a1;
    a2[1].n128_u64[0] = a1[1].n128_u64[0];
  }
  return result;
}

__n128 sub_244CCEEFC@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a1 + 24) = a2;
  sub_244CB7594(a2, a3, 23, (_DWORD *)(a1 + 32), (uint64_t)&v8);
  *(_OWORD *)a1 = v8;
  uint64_t v6 = v9;
  *(void *)(a1 + 16) = v9;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(void *)(a4 + 16) = v6;
  return result;
}

__n128 sub_244CCEF64@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 24) = a2;
  sub_244CB7594(a2, 256, 23, (_DWORD *)(a1 + 32), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  uint64_t v5 = v8;
  *(void *)(a1 + 16) = v8;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244CCEFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244CB3B04(a1, a2);
  uint64_t result = sub_244CB3B68(a1);
  if (result == 23)
  {
    return sub_244CB4C90(a1, (_DWORD *)(a1 + 72), a3);
  }
  else
  {
    *(_DWORD *)a3 = 38;
    *(void *)(a3 + 8) = "src/app/MessageDef/ListParser.cpp";
    *(_DWORD *)(a3 + 16) = 26;
  }
  return result;
}

void sub_244CCF044()
{
}

void sub_244CCF054(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB55E4(a2, 21, 256, a3);
  if (!*(_DWORD *)a3)
  {
    sub_244CCFA34(a1, a2, a3);
  }
}

void sub_244CCF0D0(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244CB4D00(a1, *(_DWORD *)(a1 + 72), (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_244CB4E58(a1, v6);
    if (LODWORD(v6[0]) == 33) {
      int v4 = 0;
    }
    else {
      int v4 = 36;
    }
    if (LODWORD(v6[0]) == 33) {
      int v5 = 36;
    }
    else {
      int v5 = 35;
    }
    *(_DWORD *)a2 = v4;
    a2[1] = "src/app/MessageDef/MessageParser.cpp";
    *((_DWORD *)a2 + 4) = v5;
  }
}

void sub_244CCF14C(int *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
}

void sub_244CCF15C(uint64_t a1)
{
  sub_244CB3988(a1);
  *(_DWORD *)(v1 + 72) = -1;
}

uint64_t sub_244CCF17C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_244CB3B04(a1, a2);
  *(_DWORD *)(a1 + 72) = a3;
  return result;
}

uint64_t sub_244CCF1AC(uint64_t a1, uint64_t a2)
{
  return sub_244CB3B04(a2, a1);
}

void sub_244CCF1BC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244CB4E58(a1, a2);
}

void sub_244CCF1C8(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCF23C(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 4, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCF2B0(int *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_244CCF2C0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 40, *(void **)(a1 + 24), 0, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_244CCF318(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 120, *(void **)(a1 + 24), 4u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 120;
}

uint64_t sub_244CCF370(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 240, *(void **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 240;
}

uint64_t sub_244CCF3C8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 320, *(void **)(a1 + 24), 2u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 320;
}

uint64_t sub_244CCF420(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB65C8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

__n128 sub_244CCF478@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCF044();
    *(_OWORD *)a1 = v5;
    *(void *)(a1 + 16) = v6;
    if (!*(_DWORD *)a1) {
      sub_244CCCE48(a1);
    }
  }
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return result;
}

uint64_t sub_244CCF4E8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 40, *(void **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

void sub_244CCF540(uint64_t a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v7);
  sub_244CB3B04((uint64_t)v7, a1);
  sub_244CB4E58((uint64_t)v7, v6);
  while (!LODWORD(v6[0]))
  {
    if (v8 <= 0xFF)
    {
      if (v8 == 1)
      {
        LOBYTE(v6[0]) = 0;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        sub_244CB3E8C((uint64_t)v7, v6, (uint64_t)a3);
        if (*(_DWORD *)a3) {
          return;
        }
        a2[1] = 1;
        a2[2] = v6[0];
      }
      else if (!v8)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB34C4((uint64_t)v7, a2, a3);
        if (*(_DWORD *)a3) {
          return;
        }
      }
    }
    sub_244CB4E58((uint64_t)v7, v6);
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "src/app/MessageDef/StatusIB.cpp";
  *((_DWORD *)a3 + 4) = 64;
}

uint64_t sub_244CCF63C(uint64_t a1, uint64_t a2)
{
  sub_244CB68B8();
  *(_OWORD *)a1 = v7;
  *(void *)(a1 + 16) = v8;
  if (!*(_DWORD *)a1)
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v4 = (unsigned char *)(a2 + 1);
    if (!v5 || (sub_2446F9190(v4), sub_244CB68B8(), *(_OWORD *)a1 = v7, *(void *)(a1 + 16) = v8, !*(_DWORD *)a1)) {
      sub_244CCCE48(a1);
    }
  }
  return a1;
}

unsigned __int8 *sub_244CCF6E8@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  if (*result)
  {
    int v5 = *++result;
    int v4 = v5;
    if (v5)
    {
      __n128 result = sub_2446F9190(result);
      uint64_t v6 = 0;
      int v4 = 0;
      int v3 = *result | 0x600;
    }
    else
    {
      uint64_t v6 = 0;
      v3 |= 0x500u;
    }
  }
  else
  {
    int v4 = 142;
    uint64_t v6 = "src/app/MessageDef/StatusIB.cpp";
  }
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

void *sub_244CCF758()
{
  return sub_244CB7CA0(&off_26BA163F0);
}

BOOL sub_244CCF764(char *a1, size_t a2, long long *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)a3 & 0xFF000700;
  if (v6 == 1536 || v6 == 1280)
  {
    long long v11 = *a3;
    uint64_t v12 = *((void *)a3 + 2);
    sub_24479B818((uint64_t)&v13, &v11);
    if (v14[0])
    {
      sub_24479DC2C(v14);
      snprintf(__str, 0x34uLL, "Cluster-specific error: 0x%02x");
    }
    else
    {
      sub_244CCFFC4(v13);
      snprintf(__str, 0x34uLL, "General error: 0x%02x (%s)");
    }
    long long v9 = *a3;
    uint64_t v10 = *((void *)a3 + 2);
    sub_244CB7C34(a1, a2, "IM", &v9, __str);
  }
  return v6 == 1280 || v6 == 1536;
}

void sub_244CCF890(int *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  __int16 v4 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CCC714(a1, 0, 4, &v4, a3);
  *a2 = v4;
}

uint64_t sub_244CCF8DC(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB68B8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
    if (!*(_DWORD *)a1)
    {
      sub_244CCF044();
      *(_OWORD *)a1 = v3;
      *(void *)(a1 + 16) = v4;
      if (!*(_DWORD *)a1) {
        sub_244CCCE48(a1);
      }
    }
  }
  return a1;
}

__n128 sub_244CCF968@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a1 + 24) = a2;
  sub_244CB7594(a2, a3, 21, (_DWORD *)(a1 + 32), (uint64_t)&v8);
  *(_OWORD *)a1 = v8;
  uint64_t v6 = v9;
  *(void *)(a1 + 16) = v9;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(void *)(a4 + 16) = v6;
  return result;
}

__n128 sub_244CCF9D0@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 24) = a2;
  sub_244CB7594(a2, 256, 21, (_DWORD *)(a1 + 32), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  uint64_t v5 = v8;
  *(void *)(a1 + 16) = v8;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = v5;
  return result;
}

void sub_244CCFA34(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3B04(a1, a2);
  if (sub_244CB3B68(a1) == 21)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB4C90(a1, (_DWORD *)(a1 + 72), (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      sub_244CCFACC(a1, (uint64_t)a3);
    }
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/app/MessageDef/StructParser.cpp";
    *((_DWORD *)a3 + 4) = 24;
  }
}

void sub_244CCFACC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_244CB3988((uint64_t)v16);
  sub_244CB3B04((uint64_t)v16, a1);
  unsigned int v4 = 0;
  char v5 = 1;
  while (1)
  {
    sub_244CB4E58((uint64_t)v16, v13);
    int v6 = v13[0];
    if (LODWORD(v13[0])) {
      break;
    }
    if (v17 <= 0xFF)
    {
      char v7 = v5 | (v4 < v17);
      unsigned int v4 = v17;
      char v5 = 0;
      if ((v7 & 1) == 0)
      {
        *(_DWORD *)a2 = 36;
        *(void *)(a2 + 8) = "src/app/MessageDef/StructParser.cpp";
        *(_DWORD *)(a2 + 16) = 50;
        return;
      }
    }
  }
  int v8 = HIDWORD(v13[0]);
  uint64_t v9 = (const char *)v13[1];
  int v10 = v14;
  int v11 = v15;
  BOOL v12 = LODWORD(v13[0]) == 33;
  if (LODWORD(v13[0]) == 33)
  {
    int v6 = 0;
    uint64_t v9 = "src/app/MessageDef/StructParser.cpp";
    int v10 = 56;
  }
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v8;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 20) = v11;
  if (v12) {
    sub_244CB4D00((uint64_t)v16, *(_DWORD *)(a1 + 72), a2);
  }
}

void sub_244CCFBBC(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 3, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCFC30(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 8, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCFCA4(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_244CB3988((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CB59A4(a1, 5, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3) {
    sub_244CCB880(a2, (uint64_t)v6, (uint64_t)a3);
  }
}

void sub_244CCFD18(int *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_244CCFD28(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 40, *(void **)(a1 + 24), 3u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_244CCFD80(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 120, *(void **)(a1 + 24), 8u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 120;
}

uint64_t sub_244CCFDD8(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 240, *(void **)(a1 + 24), 4u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 240;
}

uint64_t sub_244CCFE30(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 320, *(void **)(a1 + 24), 5u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 320;
}

uint64_t sub_244CCFE88(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB65C8();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_244CCFEE0(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CB6904();
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
    if (!*(_DWORD *)a1)
    {
      sub_244CCF044();
      *(_OWORD *)a1 = v3;
      *(void *)(a1 + 16) = v4;
      if (!*(_DWORD *)a1) {
        sub_244CCCE48(a1);
      }
    }
  }
  return a1;
}

uint64_t sub_244CCFF6C(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    sub_244CCB7B4(a1 + 40, *(void **)(a1 + 24), 2u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

const char *sub_244CCFFC4(int a1)
{
  if (a1 <= 124)
  {
    if (a1)
    {
      if (a1 == 1) {
        return "FAILURE";
      }
      else {
        return "Unallocated";
      }
    }
    else
    {
      return "SUCCESS";
    }
  }
  else
  {
    switch(a1)
    {
      case 125:
        __n128 result = "INVALID_SUBSCRIPTION";
        break;
      case 126:
        __n128 result = "UNSUPPORTED_ACCESS";
        break;
      case 127:
        __n128 result = "UNSUPPORTED_ENDPOINT";
        break;
      case 128:
        __n128 result = "INVALID_ACTION";
        break;
      case 129:
        __n128 result = "UNSUPPORTED_COMMAND";
        break;
      case 130:
        __n128 result = "Deprecated82";
        break;
      case 131:
        __n128 result = "Deprecated83";
        break;
      case 132:
        __n128 result = "Deprecated84";
        break;
      case 133:
        __n128 result = "INVALID_COMMAND";
        break;
      case 134:
        __n128 result = "UNSUPPORTED_ATTRIBUTE";
        break;
      case 135:
        __n128 result = "CONSTRAINT_ERROR";
        break;
      case 136:
        __n128 result = "UNSUPPORTED_WRITE";
        break;
      case 137:
        __n128 result = "RESOURCE_EXHAUSTED";
        break;
      case 138:
        __n128 result = "Deprecated8a";
        break;
      case 139:
        __n128 result = "NOT_FOUND";
        break;
      case 140:
        __n128 result = "UNREPORTABLE_ATTRIBUTE";
        break;
      case 141:
        __n128 result = "INVALID_DATA_TYPE";
        break;
      case 142:
        __n128 result = "Deprecated8e";
        break;
      case 143:
        __n128 result = "UNSUPPORTED_READ";
        break;
      case 144:
        __n128 result = "Deprecated90";
        break;
      case 145:
        __n128 result = "Deprecated91";
        break;
      case 146:
        __n128 result = "DATA_VERSION_MISMATCH";
        break;
      case 147:
        __n128 result = "Deprecated93";
        break;
      case 148:
        __n128 result = "TIMEOUT";
        break;
      case 149:
        __n128 result = "Reserved95";
        break;
      case 150:
        __n128 result = "Reserved96";
        break;
      case 151:
        __n128 result = "Reserved97";
        break;
      case 152:
        __n128 result = "Reserved98";
        break;
      case 153:
        __n128 result = "Reserved99";
        break;
      case 154:
        __n128 result = "Reserved9a";
        break;
      case 155:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
        return "Unallocated";
      case 156:
        __n128 result = "BUSY";
        break;
      case 157:
        __n128 result = "ACCESS_RESTRICTED";
        break;
      case 192:
        __n128 result = "Deprecatedc0";
        break;
      case 193:
        __n128 result = "Deprecatedc1";
        break;
      case 194:
        __n128 result = "Deprecatedc2";
        break;
      case 195:
        __n128 result = "UNSUPPORTED_CLUSTER";
        break;
      case 196:
        __n128 result = "Deprecatedc4";
        break;
      case 197:
        __n128 result = "NO_UPSTREAM_SUBSCRIPTION";
        break;
      case 198:
        __n128 result = "NEEDS_TIMED_INTERACTION";
        break;
      case 199:
        __n128 result = "UNSUPPORTED_EVENT";
        break;
      case 200:
        __n128 result = "PATHS_EXHAUSTED";
        break;
      case 201:
        __n128 result = "TIMED_REQUEST_MISMATCH";
        break;
      case 202:
        __n128 result = "FAILSAFE_REQUIRED";
        break;
      case 203:
        __n128 result = "INVALID_IN_STATE";
        break;
      case 204:
        __n128 result = "NO_COMMAND_RESPONSE";
        break;
      default:
        if (a1 != 240) {
          return "Unallocated";
        }
        __n128 result = "WRITE_IGNORED";
        break;
    }
  }
  return result;
}

unsigned char *sub_244CD0398(unsigned char *result, int *a2)
{
  result[1] = 0;
  int v2 = *a2;
  unsigned int v3 = *a2 & 0xFF000700;
  if (v3 == 1536)
  {
    *__n128 result = 1;
    int v4 = *a2;
    result[1] = 1;
    result[2] = v4;
  }
  else if (v2)
  {
    if (v3 != 1280) {
      LOBYTE(v2) = 1;
    }
    *__n128 result = v2;
  }
  else
  {
    *__n128 result = 0;
  }
  return result;
}

void sub_244CD03E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 8) != 16)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    int v14 = 35;
    goto LABEL_11;
  }
  if (*(void *)(a2 + 8) != 32)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    int v14 = 36;
    goto LABEL_11;
  }
  if (*(void *)(a3 + 8) != 65)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    int v14 = 37;
    goto LABEL_11;
  }
  if (*(void *)(a6 + 8) <= 0x1FuLL)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    int v14 = 38;
    goto LABEL_11;
  }
  int v15 = &v17;
  long long v16 = xmmword_244EAE610;
  sub_244CC572C(&v15, *(const void **)a2, 0x20uLL);
  sub_244CC572C(&v15, *(const void **)a3, *(void *)(a3 + 8));
  sub_244CC57A8(&v15, a4, 8);
  sub_244CC57A8(&v15, a5, 8);
  uint64_t v13 = *((void *)&v16 + 1);
  if ((unint64_t)v16 < *((void *)&v16 + 1))
  {
    *(_DWORD *)a7 = 25;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    int v14 = 51;
LABEL_11:
    *(_DWORD *)(a7 + 16) = v14;
    return;
  }
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  sub_244CEC80C(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v15, v13, *(void *)a6, *(void *)(a6 + 8), a7);
  if (!*(_DWORD *)a7) {
    sub_2446C1548(a6, 0x20uLL);
  }
}

void *sub_244CD05D0@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  if (!a2)
  {
    int v12 = 39;
LABEL_12:
    int v11 = 47;
    goto LABEL_13;
  }
  if (!a3)
  {
    int v12 = 40;
    goto LABEL_12;
  }
  if (!a7)
  {
    int v12 = 41;
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t)result;
  result[100] = a3;
  result[4] = a5;
  result[5] = a6;
  result[101] = a4;
  result[3] = a2;
  result[102] = a7;
  result[72] = a7;
  int v10 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "CASE Server enabling CASE session setups", (uint8_t *)&v13, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(1u, 2);
  }
  sub_244D663E0(*(int **)(v9 + 24), 0, 0x30u, v9 + 8, (uint64_t)&v13);
  uint64_t v13 = 0;
  char v14 = 0;
  __n128 result = (void *)sub_244CD06F4(v9, &v13);
  int v11 = 0;
  int v12 = 58;
LABEL_13:
  *(_DWORD *)a8 = v11;
  *(void *)(a8 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a8 + 16) = v12;
  return result;
}

uint64_t sub_244CD06F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 64;
  sub_244CD1BE8(a1 + 64);
  if (*(unsigned char *)(a1 + 48)) {
    (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  }
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 800);
  uint64_t v6 = *(void *)(a1 + 808);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  sub_244D6A044((uint64_t)v10);
  sub_244CD2770(v4, v5, v6, v7, v8, a1, a2, v10, &v11);
  if (v11) {
    sub_244E24390();
  }
  sub_244CD1108(a1 + 96, (uint64_t)&v11);
  uint64_t result = sub_244CD11CC(a1 + 48, (unsigned __int8 *)&v11);
  if ((_BYTE)v11) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  if (!*(unsigned char *)(a1 + 48)) {
    sub_244E242F0();
  }
  return result;
}

void sub_244CD0818(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    int v10 = 136315394;
    uint64_t v11 = "CASEServer";
    __int16 v12 = 2080;
    uint64_t v13 = "InitCASEHandshake";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  if (a2)
  {
    int v7 = 0;
    *(void *)(a2 + 40) = a1 + 72;
    int v8 = 69;
  }
  else
  {
    int v8 = 64;
    int v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  uint64_t v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    int v10 = 136315394;
    uint64_t v11 = "CASEServer";
    __int16 v12 = 2080;
    uint64_t v13 = "InitCASEHandshake";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

uint64_t sub_244CD0994@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 16;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a3 + 16) = 76;
  return result;
}

uint64_t sub_244CD09B8@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a3 + 16) = 76;
  return result;
}

void sub_244CD09DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(unsigned char *)(a1 + 792) && (sub_244CDBD44(a1 + 64) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 792) == 2)
    {
      unsigned int v14 = sub_244CDBD38(a1 + 208);
      if (v14 >= 0xFFFF) {
        unsigned __int16 v15 = -1;
      }
      else {
        unsigned __int16 v15 = v14;
      }
    }
    else
    {
      unsigned __int16 v15 = 5000;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_244CD0E34(a2, v15, (uint64_t)a5);
    if (*(_DWORD *)a5)
    {
      long long v16 = sub_244CC8484(1u, "Inet");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long buf = *(_OWORD *)a5;
        *(void *)&uint8_t buf[16] = a5[2];
        char v17 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Failed to send the busy status report, err:%s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long buf = *(_OWORD *)a5;
        *(void *)&uint8_t buf[16] = a5[2];
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(1u, 1);
      }
    }
  }
  else
  {
    sub_24479B4A8(a2, buf);
    int v11 = (*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
    (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
    __int16 v12 = sub_244CC8484(1u, "Inet");
    uint64_t v13 = v12;
    if (v11 == 1)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = ". Starting handshake.";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_DEFAULT, "CASE Server received Sigma1 message %s EC %p", buf, 0x16u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(1u, 2);
      }
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_244CD0818(a1, a2, (uint64_t)a5);
      if (!*(_DWORD *)a5) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 80))(a1 + 64, a2, a3, a4);
      }
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "over encrypted session. Ignoring.";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "CASE Server received Sigma1 message %s EC %p", buf, 0x16u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(1u, 1);
      }
      *(_DWORD *)a5 = 3;
      a5[1] = "src/protocols/secure_channel/CASEServer.cpp";
      *((_DWORD *)a5 + 4) = 133;
    }
  }
  uint64_t v18 = sub_244D7DFA0();
  if (os_signpost_enabled(v18))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v18, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD0E34(uint64_t a1@<X1>, unsigned __int16 a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)unsigned int v14 = "CASEServer";
    *(_WORD *)&__n128 v14[8] = 2080;
    unsigned __int16 v15 = "SendBusyStatusReport";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  int v7 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_DEFAULT, "Already in the middle of CASE handshake, sending busy status report", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(1u, 2);
  }
  sub_244D63FE4(a2, (uint64_t *)&v12);
  if (v12)
  {
    int v8 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int16 *)(a1 + 112);
      if (sub_244D64530(a1)) {
        int v10 = 105;
      }
      else {
        int v10 = 114;
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)unsigned int v14 = v9;
      *(_WORD *)&v14[4] = 1024;
      *(_DWORD *)&v14[6] = v10;
      _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Sending status report, exchange %u%c", buf, 0xEu);
    }
    if (sub_244CC4E58(2u))
    {
      sub_244D64530(a1);
      sub_244CC4DE0(1u, 2);
    }
    *(_WORD *)long long buf = 0;
    sub_244D645BC(a1, 0, 64, (uint64_t *)&v12, buf, a3);
    if (v12) {
      sub_244CC8A0C(v12);
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
    *(_DWORD *)(a3 + 16) = 230;
  }
  int v11 = sub_244D7DFA0();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)unsigned int v14 = "CASEServer";
    *(_WORD *)&__n128 v14[8] = 2080;
    unsigned __int16 v15 = "SendBusyStatusReport";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD1100(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

uint64_t sub_244CD1108@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = (unsigned char *)(result + 40);
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v4 = sub_2446F7170((unsigned char *)(result + 40));
    if ((*(unsigned int (**)(void))(**(void **)v4 + 16))(*(void *)v4) != 2) {
      sub_244E24430();
    }
    uint64_t v5 = (uint64_t *)sub_2446F7170(v3);
    uint64_t v6 = sub_244D879D8(*v5);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v6;
    int v7 = *(uint64_t (**)(void))(*(void *)v6 + 24);
    return v7();
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t sub_244CD11CC(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)a1) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  int v4 = *a2;
  *(unsigned char *)a1 = v4;
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)(a1 + 8) = v5;
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    (*(void (**)(void))(**((void **)a2 + 1) + 32))(*((void *)a2 + 1));
    *a2 = 0;
  }
  return a1;
}

void sub_244CD1288(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "OnSessionEstablishmentError";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  uint64_t v5 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
    uint64_t v6 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "CASE Session establishment failed: %s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(1u, 1);
  }
  int v7 = sub_244D7DFA0();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "CASEFail";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(void *)long long buf = 0;
  uint8_t buf[8] = 0;
  sub_244CD06F4(a1, (uint64_t *)buf);
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "CASEFail";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  int v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "OnSessionEstablishmentError";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD1560(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "OnSessionEstablished";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  uint64_t v5 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = (unint64_t)(*(uint64_t (**)(void))(*(void *)*a2 + 48))() >> 32;
    int v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
    (*(void (**)(void))(*(void *)*a2 + 48))();
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v8;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_DEFAULT, "CASE Session established to peer: <%08X%08X, %d>", buf, 0x14u);
  }
  if (sub_244CC4E58(2u))
  {
    (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
    (*(void (**)(void))(*(void *)*a2 + 48))();
    (*(void (**)(void))(*(void *)*a2 + 48))();
    sub_244CC4DE0(1u, 2);
  }
  *(void *)long long buf = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 48))(*a2, v9, v10);
  *(void *)&uint8_t buf[8] = v11;
  sub_244CD06F4(a1, (uint64_t *)buf);
  __int16 v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "OnSessionEstablished";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_244CD1874(uint64_t (***a1)(void, long long *), long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  return (**a1)(a1, &v3);
}

void sub_244CD18CC(uint64_t a1)
{
  sub_244CD19D4(a1);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CD1904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 96))();
}

uint64_t sub_244CD1928(uint64_t a1)
{
  return sub_244CD19D4(a1 - 8);
}

void sub_244CD1930(uint64_t a1)
{
  sub_244CD19D4(a1 - 8);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CD196C(uint64_t a1)
{
  return sub_244CD19D4(a1 - 16);
}

void sub_244CD1974(uint64_t a1)
{
  sub_244CD19D4(a1 - 16);

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CD19B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 96))();
}

uint64_t sub_244CD19D4(uint64_t a1)
{
  *(void *)a1 = &unk_26F953870;
  *(void *)(a1 + 8) = &unk_26F9538D8;
  *(void *)(a1 + 16) = &unk_26F953910;
  sub_244CD1A90(a1);
  sub_244CD1E44(a1 + 64);
  if (*(unsigned char *)(a1 + 48)) {
    (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  }
  return a1;
}

void sub_244CD1A90(uint64_t a1)
{
  int v2 = *(int **)(a1 + 24);
  if (v2)
  {
    sub_244D664A4(v2, 0, 0x30u, (uint64_t)v3);
    *(void *)(a1 + 24) = 0;
  }
  sub_244CD1BE8(a1 + 64);
  if (*(unsigned char *)(a1 + 48)) {
    (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  }
  *(unsigned char *)(a1 + 48) = 0;
}

void *sub_244CD1B10(void *a1)
{
  *a1 = &unk_26F9539B8;
  a1[1] = &unk_26F953A58;
  a1[2] = &unk_26F953A98;
  uint64_t v2 = (uint64_t)(a1 + 4);
  a1[4] = &unk_26F953AD8;
  sub_244CD1BE8((uint64_t)a1);
  long long v3 = (std::__shared_weak_count *)a1[90];
  if (v3) {
    sub_2447E7E54(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[88];
  if (v4) {
    sub_2447E7E54(v4);
  }
  sub_244CED784(a1 + 54, 32);
  sub_244CEC40C(a1 + 28);
  sub_244CD1DE4(v2);
  return a1;
}

void sub_244CD1BE8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)(a1 + 696);
  long long v3 = sub_244D7DFA0();
  if (os_signpost_enabled(v3))
  {
    int v10 = 136315394;
    uint64_t v11 = "CASESession";
    __int16 v12 = 2080;
    uint64_t v13 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  if (*v2)
  {
    atomic_store(0, (unint64_t *)(*v2 + 32));
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 704);
    void *v2 = 0;
    v2[1] = 0;
    if (v4) {
      sub_2447E7E54(v4);
    }
  }
  uint64_t v5 = v2[2];
  if (v5)
  {
    atomic_store(0, (unint64_t *)(v5 + 32));
    unint64_t v6 = *(std::__shared_weak_count **)(a1 + 720);
    v2[2] = 0;
    void v2[3] = 0;
    if (v6) {
      sub_2447E7E54(v6);
    }
  }
  sub_244CEC438((void *)(a1 + 224));
  sub_244CE3754(a1 + 32);
  *(unsigned char *)(a1 + 728) = 0;
  sub_244CED784(a1 + 552, 16);
  uint64_t v7 = *(void *)(a1 + 584);
  if (v7)
  {
    sub_244DA1B70(v7, a1 + 16);
    sub_244DA20DC(*(void *)(a1 + 584), *(void (****)(void))(a1 + 424));
    *(void *)(a1 + 424) = 0;
  }
  *(void *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  uint64_t v8 = *(void *)(a1 + 216);
  if (v8 && *(_DWORD *)(v8 + 48) != 4)
  {
    sub_244D8C98C(*(void *)(a1 + 576), v8);
    *(void *)(a1 + 216) = 0;
  }
  uint64_t v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    int v10 = 136315394;
    uint64_t v11 = "CASESession";
    __int16 v12 = 2080;
    uint64_t v13 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

uint64_t sub_244CD1DE4(uint64_t a1)
{
  *(void *)a1 = &unk_26F953EA0;
  sub_244CE3754(a1);
  if (*(unsigned char *)(a1 + 72)) {
    sub_244CDBF88((int *)(*(void *)(a1 + 80) + 28));
  }
  sub_244D87E54(a1 + 16);
  return a1;
}

void *sub_244CD1E48(uint64_t a1)
{
  return sub_244CD1B10((void *)(a1 - 8));
}

void *sub_244CD1E50(uint64_t a1)
{
  return sub_244CD1B10((void *)(a1 - 16));
}

void *sub_244CD1E58(uint64_t a1)
{
  return sub_244CD1B10((void *)(a1 - 32));
}

void sub_244CD1E60(void *a1)
{
  sub_244CD1B10(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244CD1E98(uint64_t a1)
{
  sub_244CD1B10((void *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

void sub_244CD1ED4(uint64_t a1)
{
  sub_244CD1B10((void *)(a1 - 16));

  JUMPOUT(0x245695FA0);
}

void sub_244CD1F10(uint64_t a1)
{
  sub_244CD1B10((void *)(a1 - 32));

  JUMPOUT(0x245695FA0);
}

void sub_244CD1F4C(uint64_t a1)
{
  sub_244CE37B8((void *)(a1 + 32));

  sub_244CD1BE8(a1);
}

void sub_244CD1F88(void *a1)
{
  uint64_t v1 = (uint64_t)(a1 - 4);
  sub_244CE37B8(a1);

  sub_244CD1BE8(v1);
}

void sub_244CD1FC0(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 592) == a2 && sub_244CE3718(a1 + 32))
  {
    int v3 = 116;
    uint64_t v4 = "src/protocols/secure_channel/CASESession.cpp";
    int v5 = 451;
    sub_244CD2028(a1, (uint64_t)&v3);
  }
}

void sub_244CD2028(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(_DWORD *)long long buf = 1;
  *(void *)&v9[4] = "core_dev_case_session";
  *(_DWORD *)&v9[12] = *(_DWORD *)a2;
  v9[16] = 3;
  sub_244D7E78C((uint64_t)buf);
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v9 = "CASESession";
    *(_WORD *)&v9[8] = 2080;
    *(void *)&v9[10] = "AbortPendingEstablish";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CD1BE8(a1);
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  sub_244CE3128(a1 + 32, &v6);
  int v5 = sub_244D7DFA0();
  if (os_signpost_enabled(v5))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v9 = "CASESession";
    *(_WORD *)&v9[8] = 2080;
    *(void *)&v9[10] = "AbortPendingEstablish";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD21D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  __int16 v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    int v16 = 136315394;
    char v17 = "CASESession";
    __int16 v18 = 2080;
    uint64_t v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v16, 0x16u);
  }
  if (!a4)
  {
    int v14 = 458;
LABEL_12:
    int v13 = 47;
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 512))
  {
    int v14 = 459;
    goto LABEL_12;
  }
  if (!*(void *)(a2 + 40))
  {
    int v14 = 460;
    goto LABEL_12;
  }
  sub_244CD1BE8(a1);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_244CEC440(a1 + 224, (uint64_t)a6);
  if (*(_DWORD *)a6) {
    goto LABEL_14;
  }
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 576) = a2;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_244CE28A4((void *)(a1 + 32), a2, a5, (uint64_t)a6);
  if (*(_DWORD *)a6) {
    goto LABEL_14;
  }
  sub_244D92070(a1 + 472);
  int v13 = 0;
  *(_WORD *)(a1 + 496) |= 1u;
  *(unsigned char *)(a1 + 498) |= 1u;
  *(void *)(a1 + 504) = a3;
  *(void *)(a1 + 184) = a1;
  *(void *)(a1 + 200) = sub_244CD2418;
  *(void *)(a1 + 208) = sub_244CD26C8;
  int v14 = 481;
LABEL_13:
  *(_DWORD *)a6 = v13;
  a6[1] = "src/protocols/secure_channel/CASESession.cpp";
  *((_DWORD *)a6 + 4) = v14;
LABEL_14:
  unsigned __int16 v15 = sub_244D7DFA0();
  if (os_signpost_enabled(v15))
  {
    int v16 = 136315394;
    char v17 = "CASESession";
    __int16 v18 = 2080;
    uint64_t v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v16, 0x16u);
  }
}

void sub_244CD2418(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (!*(void *)(a1 + 56)) {
      sub_244E244D0();
    }
    sub_244CDC098(a1 + 8, __str, 0x4CuLL);
    uint64_t v4 = **(void **)(a1 + 56);
    if (v4)
    {
      if (*(_DWORD *)a2) {
        goto LABEL_12;
      }
      int v5 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = __str;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_INFO, "TCP Connection established with %s before session establishment", buf, 0xCu);
      }
      if (sub_244CC4E58(3u)) {
        sub_244CC4DE0(0xBu, 3);
      }
      long long v6 = (uint64_t *)sub_244CD3130((unsigned char *)(v4 + 104));
      sub_24479B4A8(*v6, buf);
      *(void *)(sub_244D87A80(*(uint64_t *)buf) + 32) = a1;
      (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
      sub_24479DD24(v4 + 48, (uint64_t)buf);
      uint64_t v7 = (uint64_t *)sub_2446F7170(buf);
      *(void *)(sub_244D879D8(*v7) + 32) = a1;
      if (buf[0]) {
        (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
      }
      sub_244CD3154((void **)v4, (uint64_t)buf);
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(void *)(a2 + 16) = *(void *)&buf[16];
      if (*(_DWORD *)a2)
      {
LABEL_12:
        uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)long long buf = *(_OWORD *)a2;
          *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
          uint64_t v9 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = __str;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v9;
          _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Connection establishment failed with peer at %s: %s", buf, 0x16u);
        }
        if (sub_244CC4E58(1u))
        {
          *(_OWORD *)long long buf = *(_OWORD *)a2;
          *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
          sub_244CB7B34((const char **)buf, 1);
          sub_244CC4DE0(0xBu, 1);
        }
        sub_244D8C98C(*(void *)(v4 + 576), a1);
        *(void *)(v4 + 216) = 0;
        sub_244CD1BE8(v4);
      }
    }
  }
}

uint64_t sub_244CD26C8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(uint64_t **)(result + 56);
    if (!v1) {
      sub_244E24570();
    }
    uint64_t v2 = *v1;
    if (v2)
    {
      *(void *)(v2 + 216) = 0;
      int v3 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_INFO, "TCP Connection for this session has closed", v4, 2u);
      }
      uint64_t result = sub_244CC4E58(3u);
      if (result) {
        return sub_244CC4DE0(0xBu, 3);
      }
    }
  }
  return result;
}

void sub_244CD2770(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, unsigned char *a8@<X7>, void *a9@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  __int16 v18 = sub_244D7DFA0();
  if (os_signpost_enabled(v18))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "PrepareForSessionEstablishment";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a3)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_244CD21D8(a1, a2, a5, a6, a7, a9);
    if (!*(_DWORD *)a9)
    {
      *(_OWORD *)a9 = xmmword_26519C6B0;
      a9[2] = 497;
      sub_244DA1B10(a3, a1 + 16, (uint64_t)buf);
      *(_OWORD *)a9 = *(_OWORD *)buf;
      a9[2] = *(void *)&buf[16];
      if (*(_DWORD *)a9) {
        goto LABEL_17;
      }
      *(void *)(a1 + 584) = a3;
      *(unsigned char *)(a1 + 40) = 1;
      *(void *)(a1 + 568) = a4;
      *(void *)long long buf = sub_244D6A0B8();
      *(_DWORD *)&uint8_t buf[8] = v19;
      if (*a8) {
        uint64_t v20 = sub_2446DC5A0(a8);
      }
      else {
        uint64_t v20 = buf;
      }
      int v21 = *((_DWORD *)v20 + 2);
      uint64_t v22 = *(void *)v20;
      *(unsigned char *)(a1 + 128) = 1;
      *(void *)(a1 + 132) = v22;
      *(_DWORD *)(a1 + 140) = v21;
      int v23 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        sub_24479DD24(a1 + 48, (uint64_t)buf);
        __int16 v24 = (uint64_t *)sub_2446F7170(buf);
        uint64_t v25 = sub_244D879D8(*v24);
        *(_DWORD *)int v28 = 134217984;
        uint64_t v29 = v25;
        _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_INFO, "Allocated SecureSession (%p) - waiting for Sigma1 msg", v28, 0xCu);
        if (buf[0]) {
          (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
        }
      }
      if (sub_244CC4E58(3u))
      {
        sub_24479DD24(a1 + 48, (uint64_t)buf);
        uint64_t v26 = (uint64_t *)sub_2446F7170(buf);
        sub_244D879D8(*v26);
        sub_244CC4DE0(0xBu, 3);
        if (buf[0]) {
          (*(void (**)(void))(**(void **)&buf[8] + 32))(*(void *)&buf[8]);
        }
      }
      if (*(_DWORD *)a9) {
LABEL_17:
      }
        sub_244CD1BE8(a1);
    }
  }
  else
  {
    *(_DWORD *)a9 = 47;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a9 + 4) = 494;
  }
  __n128 v27 = sub_244D7DFA0();
  if (os_signpost_enabled(v27))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "PrepareForSessionEstablishment";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v27, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD2AE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned char *a11)
{
  unsigned __int8 v14 = a5;
  uint64_t v53 = *MEMORY[0x263EF8340];
  v44[0] = a4;
  v44[1] = a5;
  int v19 = sub_244D7DFA0();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "EstablishSession";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v19, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a6)
  {
    if (a3)
    {
      if (v14)
      {
        uint64_t v20 = sub_244D9EA90(a3, v14);
        if (v20)
        {
          uint64_t v40 = v20;
          sub_244CD21D8(a1, a2, a8, a10, v44, buf);
          int v21 = *(_DWORD *)buf;
          long long v51 = *(_OWORD *)&buf[4];
          int v52 = *(_DWORD *)&buf[20];
          *(unsigned char *)(a1 + 40) = 0;
          sub_244CD30E0(a1 + 104, a6);
          uint64_t v22 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 104));
          sub_24479B4A8(*v22, v45);
          uint64_t v23 = sub_244D87A80(*(uint64_t *)v45);
          *(_OWORD *)long long buf = *(_OWORD *)(v23 + 64);
          int v24 = *(_DWORD *)(v23 + 84);
          *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(v23 + 80);
          *(_DWORD *)&buf[20] = v24;
          uint64_t v25 = *(void *)(v23 + 88);
          uint64_t v50 = v25;
          (*(void (**)(void))(**(void **)v45 + 32))(*(void *)v45);
          if (v21 || (sub_244DA1B10(a3, a1 + 16, (uint64_t)&v41), int v21 = v41, v51 = v42, v52 = v43, v41))
          {
            *(_DWORD *)__int16 v45 = 2;
            *(void *)&v45[8] = "core_dev_case_session";
            *(_DWORD *)&v45[16] = v21;
            v46[0] = 3;
            sub_244D7E78C((uint64_t)v45);
          }
          else
          {
            *(_DWORD *)__int16 v45 = 0;
            *(void *)&v45[8] = "core_dev_case_session";
            v46[0] = 0;
            sub_244D7E78C((uint64_t)v45);
            int v28 = (uint64_t *)sub_2446F7170((unsigned char *)(a1 + 72));
            uint64_t v29 = sub_244D879D8(*v28);
            int v30 = *(_DWORD *)&buf[16];
            *(_OWORD *)(v29 + 96) = *(_OWORD *)buf;
            *(_DWORD *)(v29 + 112) = v30;
            *(_DWORD *)(v29 + 116) = v24;
            *(void *)(v29 + 120) = v25;
            *(void *)(a1 + 584) = a3;
            *(unsigned char *)(a1 + 592) = *(unsigned char *)(v40 + 137);
            *(void *)(a1 + 568) = a7;
            *(void *)__int16 v45 = sub_244D6A0B8();
            *(_DWORD *)&v45[8] = v31;
            if (*a11) {
              uint64_t v32 = sub_2446DC5A0(a11);
            }
            else {
              uint64_t v32 = v45;
            }
            int v33 = *((_DWORD *)v32 + 2);
            uint64_t v34 = *(void *)v32;
            *(unsigned char *)(a1 + 128) = 1;
            *(void *)(a1 + 132) = v34;
            *(_DWORD *)(a1 + 140) = v33;
            long long v35 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 104));
            sub_244D64578(*v35, 2000);
            *(void *)(a1 + 600) = v44[0];
            *(void *)(a1 + 608) = *(void *)v40;
            uint64_t v36 = sub_244CC8484(0xBu, "SecureChannel");
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              int v37 = *(unsigned __int8 *)(a1 + 592);
              uint64_t v38 = *(void *)(a1 + 608);
              uint64_t v39 = *(void *)(a1 + 600);
              *(_DWORD *)__int16 v45 = 67110144;
              *(_DWORD *)&v45[4] = v37;
              *(_WORD *)&v45[8] = 1024;
              *(_DWORD *)&v45[10] = HIDWORD(v38);
              *(_WORD *)&v45[14] = 1024;
              *(_DWORD *)&v45[16] = v38;
              *(_WORD *)int v46 = 1024;
              *(_DWORD *)&void v46[2] = HIDWORD(v39);
              __int16 v47 = 1024;
              int v48 = v39;
              _os_log_impl(&dword_2446BD000, v36, OS_LOG_TYPE_DEFAULT, "Initiating session on local FabricIndex %u from 0x%08X%08X -> 0x%08X%08X", v45, 0x20u);
            }
            if (sub_244CC4E58(2u)) {
              sub_244CC4DE0(0xBu, 2);
            }
            if (buf[16] == 3)
            {
              sub_244D8CBCC(a2, (uint64_t)buf, (uint64_t)v45);
            }
            else
            {
              *(_DWORD *)__int16 v45 = 0;
              *(void *)&v45[8] = "core_dev_case_session_sigma1";
              v46[0] = 0;
              sub_244D7E78C((uint64_t)v45);
              sub_244CD3154((void **)a1, (uint64_t)v45);
            }
            int v21 = *(_DWORD *)v45;
            long long v51 = *(_OWORD *)&v45[4];
            int v52 = *(_DWORD *)v46;
            if (!*(_DWORD *)v45) {
              goto LABEL_11;
            }
          }
          *(_DWORD *)__int16 v45 = 1;
          *(void *)&v45[8] = "core_dev_case_session_sigma1";
          *(_DWORD *)&v45[16] = v21;
          v46[0] = 3;
          sub_244D7E78C((uint64_t)v45);
          *(_DWORD *)__int16 v45 = 1;
          *(void *)&v45[8] = "core_dev_case_session";
          *(_DWORD *)&v45[16] = v21;
          v46[0] = 3;
          sub_244D7E78C((uint64_t)v45);
          sub_244CD1BE8(a1);
LABEL_11:
          *(_DWORD *)a9 = v21;
          *(_OWORD *)(a9 + 4) = v51;
          *(_DWORD *)(a9 + 20) = v52;
          goto LABEL_17;
        }
        *(_DWORD *)long long buf = 2;
        *(void *)&uint8_t buf[8] = "core_dev_case_session";
        *(_DWORD *)&uint8_t buf[16] = 47;
        buf[20] = 3;
        sub_244D7E78C((uint64_t)buf);
        *(_DWORD *)a9 = 47;
        *(void *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
        int v26 = 534;
      }
      else
      {
        *(_DWORD *)long long buf = 2;
        *(void *)&uint8_t buf[8] = "core_dev_case_session";
        *(_DWORD *)&uint8_t buf[16] = 47;
        buf[20] = 3;
        sub_244D7E78C((uint64_t)buf);
        *(_DWORD *)a9 = 47;
        *(void *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
        int v26 = 532;
      }
    }
    else
    {
      *(_DWORD *)long long buf = 2;
      *(void *)&uint8_t buf[8] = "core_dev_case_session";
      *(_DWORD *)&uint8_t buf[16] = 47;
      buf[20] = 3;
      sub_244D7E78C((uint64_t)buf);
      *(_DWORD *)a9 = 47;
      *(void *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v26 = 527;
    }
  }
  else
  {
    *(_DWORD *)long long buf = 2;
    *(void *)&uint8_t buf[8] = "core_dev_case_session";
    *(_DWORD *)&uint8_t buf[16] = 47;
    buf[20] = 3;
    sub_244D7E78C((uint64_t)buf);
    *(_DWORD *)a9 = 47;
    *(void *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v26 = 526;
  }
  *(_DWORD *)(a9 + 16) = v26;
LABEL_17:
  __n128 v27 = sub_244D7DFA0();
  if (os_signpost_enabled(v27))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "EstablishSession";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v27, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_244CD30E0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    sub_244CDBF88((int *)(*(void *)(a1 + 8) + 28));
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = a2;
  sub_244CDBFD0((int *)(a2 + 28));
  return a1 + 8;
}

unsigned char *sub_244CD3130(unsigned char *a1)
{
  if (!*a1) {
    sub_244E213F8();
  }
  return a1 + 8;
}

void sub_244CD3154(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    __int16 v47 = "CASESession";
    __int16 v48 = 2080;
    unsigned int v49 = "SendSigma1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CB62B8((uint64_t)buf);
  v50[1] = 0;
  v50[2] = 0;
  v50[0] = &unk_26F9536C8;
  char v51 = 0;
  long long v35 = 0;
  int v34 = -1;
  memset(v45, 0, sizeof(v45));
  uint64_t v5 = sub_244D9EA90((uint64_t)a1[73], *((unsigned __int8 *)a1 + 592));
  if (!v5)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v13 = 787;
LABEL_30:
    *(_DWORD *)(a2 + 16) = v13;
    goto LABEL_31;
  }
  uint64_t v6 = v5;
  sub_244CD43D8((uint64_t)(a1 + 4), (uint64_t)v38);
  if (!v38[0])
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v13 = 790;
    goto LABEL_30;
  }
  uint64_t v7 = sub_244DA2020((uint64_t)a1[73]);
  a1[53] = (void *)v7;
  if (!v7)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v13 = 794;
    goto LABEL_30;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 48))(v7, 0);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CECD5C((char *)a1 + 660, 0x20uLL, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  sub_244CC8F5C(0xF3uLL, 0x26u, v38);
  if (v35) {
    sub_244CC8A0C(v35);
  }
  long long v35 = *(_WORD **)v38;
  if (!*(void *)v38)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v13 = 802;
    goto LABEL_30;
  }
  sub_2447945A0((uint64_t)v50, &v35, 0);
  sub_244CB6318((uint64_t)buf, (uint64_t)v50, 0xFFFFFFFF, (uint64_t)v38);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CB7594(buf, 256, 21, &v34, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CB6ADC((char *)buf, (char *)a1 + 660, 0x20uLL, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CD43D8((uint64_t)(a1 + 4), (uint64_t)v38);
  sub_2446D1880(v38);
  sub_244CB6904();
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CD41A0((uint64_t)a1, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v6 + 8);
  *(void *)uint64_t v38 = &unk_26F954540;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_244D9F140((uint64_t)a1[73], *((unsigned __int8 *)a1 + 592), (uint64_t)v38, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  uint64_t v36 = v45;
  uint64_t v37 = 32;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v32 = a1 + 69;
  uint64_t v33 = 16;
  int v30 = (char *)a1 + 660;
  uint64_t v31 = 32;
  int v28 = &v39;
  uint64_t v29 = 65;
  sub_244CD03E8((uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, v8, (unint64_t)a1[75], (uint64_t)&v36, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CB6B18((char *)buf, (char *)v45, 0x20u, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = (char *)((*(uint64_t (**)(void *))(*a1[53] + 40))(a1[53]) + 8);
  (*(void (**)(void *))(*a1[53] + 40))(a1[53]);
  sub_244CB6B18((char *)buf, v9, 0x41u, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  if (!*((unsigned char *)a1 + 128))
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v13 = 830;
    goto LABEL_30;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CD44AC((unsigned char *)a1 + 128);
  sub_244CE318C(5, buf, (void *)a2);
  if (*(_DWORD *)a2) {
    goto LABEL_31;
  }
  uint64_t v10 = a1[71];
  if (v10)
  {
    *(void *)uint64_t v38 = 0;
    uint64_t v39 = 0;
    *(void *)uint64_t v40 = 0;
    uint64_t v11 = *(unsigned __int8 *)(v6 + 137);
    uint64_t v36 = a1[75];
    uint64_t v37 = v11;
    (*(void (**)(uint8_t *__return_ptr))(*v10 + 16))(v38);
    BOOL v12 = *(_DWORD *)v38 == 0;
    if (!*(_DWORD *)v38)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CB6ADC((char *)buf, (char *)a1 + 628, 0x10uLL, a2);
      if (*(_DWORD *)a2) {
        goto LABEL_31;
      }
      uint64_t v32 = &v36;
      uint64_t v33 = 16;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
      int v30 = (char *)a1 + 660;
      uint64_t v31 = 32;
      int v28 = (const char **)((char *)a1 + 628);
      uint64_t v29 = 16;
      v27[0] = "Sigma1_ResumeNCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
      v27[1] = 13;
      v26[0] = "NCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
      v26[1] = 13;
      sub_244CD44D0((uint64_t)a1, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)v27, (uint64_t)v26, (uint64_t)&v32, a2);
      if (*(_DWORD *)a2) {
        goto LABEL_31;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_2446C1098(v25, (uint64_t)v32, v33);
      sub_244CB6ADC((char *)buf, v25[0], (unint64_t)v25[1], a2);
      if (*(_DWORD *)a2) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CB7708((uint64_t)buf, v34, a2);
  if (!*(_DWORD *)a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_2446DE160((uint64_t)buf, &v35, (void *)a2);
    if (!*(_DWORD *)a2)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_2446C1098(v24, *((void *)v35 + 1), *((void *)v35 + 3));
      sub_244CEC490((uint64_t)(a1 + 28), v24[0], (size_t)v24[1], a2);
      if (!*(_DWORD *)a2)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        uint64_t v15 = *(void *)sub_244CD3130((unsigned char *)a1 + 104);
        *(_WORD *)uint64_t v38 = 1;
        sub_244D645BC(v15, 0, 48, (uint64_t *)&v35, v38, a2);
        if (!*(_DWORD *)a2)
        {
          if (v12)
          {
            *((unsigned char *)a1 + 728) = 4;
            *(_DWORD *)uint64_t v38 = 2;
            uint64_t v39 = "core_dev_case_session_sigma1_resume";
            v40[4] = 0;
            sub_244D7E78C((uint64_t)v38);
          }
          else
          {
            *((unsigned char *)a1 + 728) = 1;
          }
          int v16 = sub_244CD44AC((unsigned char *)a1 + 128);
          int v17 = *(_DWORD *)v16;
          int v18 = *((_DWORD *)v16 + 1);
          int v19 = *((unsigned __int16 *)v16 + 4);
          uint64_t v20 = sub_244CC8484(0xBu, "SecureChannel");
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v21 = (unint64_t)((uint64_t (*)(void **))(*a1)[6])(a1) >> 32;
            int v22 = ((uint64_t (*)(void **))(*a1)[6])(a1);
            ((void (*)(void **))(*a1)[6])(a1);
            *(_DWORD *)uint64_t v38 = 67110400;
            *(_DWORD *)&v38[4] = v21;
            LOWORD(v39) = 1024;
            *(_DWORD *)((char *)&v39 + 2) = v22;
            HIWORD(v39) = 1024;
            *(_DWORD *)uint64_t v40 = v23;
            *(_WORD *)&v40[4] = 1024;
            *(_DWORD *)&v40[6] = v17;
            __int16 v41 = 1024;
            int v42 = v18;
            __int16 v43 = 1024;
            int v44 = v19;
            _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_DEFAULT, "Sent Sigma1 msg to <%08X%08X, %d> [II:%ums AI:%ums AT:%ums]", v38, 0x26u);
          }
          if (sub_244CC4E58(2u))
          {
            ((uint64_t (*)(void **))(*a1)[6])(a1);
            ((void (*)(void **))(*a1)[6])(a1);
            ((void (*)(void **))(*a1)[6])(a1);
            sub_244CC4DE0(0xBu, 2);
          }
          (*(void (**)(void *))(*a1[15] + 16))(a1[15]);
          *(_DWORD *)a2 = 0;
          *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
          int v13 = 884;
          goto LABEL_30;
        }
      }
    }
  }
LABEL_31:
  if (v35) {
    sub_244CC8A0C(v35);
  }
  sub_244CA539C(v50);
  unsigned __int8 v14 = sub_244D7DFA0();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)long long buf = 136315394;
    __int16 v47 = "CASESession";
    __int16 v48 = 2080;
    unsigned int v49 = "SendSigma1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD3AC4(unsigned char *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)int v18 = "CASESession";
    *(_WORD *)&v18[8] = 2080;
    int v19 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a2)
  {
    if (a1[104] && *(void *)sub_244CD3130(a1 + 104) == a2)
    {
      uint64_t v7 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        unint64_t v8 = (unint64_t)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 48))(a1) >> 32;
        int v9 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 48))(a1);
        (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
        int v10 = a1[728];
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)int v18 = v8;
        *(_WORD *)&void v18[4] = 1024;
        *(_DWORD *)&v18[6] = v9;
        LOWORD(v19) = 1024;
        *(_DWORD *)((char *)&v19 + 2) = v11;
        HIWORD(v19) = 1024;
        int v20 = v10;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "CASESession timed out while waiting for a response from peer <%08X%08X, %d>. Current state was %u", buf, 0x1Au);
      }
      if (sub_244CC4E58(1u))
      {
        (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 48))(a1);
        (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
        (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
        sub_244CC4DE0(0xBu, 1);
      }
      BOOL v12 = sub_244D7DFA0();
      if (os_signpost_enabled(v12))
      {
        ++dword_268EBEDC8;
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)int v18 = dword_268EBEDC8;
        _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CASETimeout", "%u", buf, 8u);
      }
      sub_244CE30D4((uint64_t)(a1 + 32));
      int v14 = 50;
      uint64_t v15 = "src/protocols/secure_channel/CASESession.cpp";
      int v16 = 607;
      sub_244CD2028((uint64_t)a1, (uint64_t)&v14);
    }
    else
    {
      uint64_t v5 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "CASESession::OnResponseTimeout exchange doesn't match", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
LABEL_13:
      }
        sub_244CC4DE0(0xBu, 1);
    }
  }
  else
  {
    uint64_t v6 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "CASESession::OnResponseTimeout was called by null exchange", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      goto LABEL_13;
    }
  }
  int v13 = sub_244D7DFA0();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)int v18 = "CASESession";
    *(_WORD *)&v18[8] = 2080;
    int v19 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD3F38(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_244CD3F40(uint64_t a1, unsigned int a2)
{
  if (a2 > 9) {
    return 0;
  }
  else {
    return byte_244EAE9B7[(char)a2];
  }
}

unsigned __int8 *sub_244CD3F64@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = result[728];
  if (v6 == 7)
  {
    v12[0] = v13;
    *(_OWORD *)&v12[1] = xmmword_244EAE670;
    sub_244CC572C(v12, result + 660, 0x20uLL);
    uint64_t result = (unsigned __int8 *)sub_244CC572C(v12, v4 + 628, 0x10uLL);
    if (v12[1] < v12[2])
    {
      *(_DWORD *)a3 = 25;
      *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 650;
      goto LABEL_8;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v9 = *(void *)(*((void *)v4 + 72) + 40);
    sub_2446C1098(v12, (uint64_t)(v4 + 432), *((void *)v4 + 58));
    int v10 = v13;
    uint64_t v11 = 48;
    uint64_t result = (unsigned __int8 *)sub_244D83884(a2, v9, (uint64_t)v12, (uint64_t)&v10, 1, v4[40], a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 656;
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 != 6)
    {
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 659;
      goto LABEL_8;
    }
    v12[0] = v13;
    *(_OWORD *)&v12[1] = xmmword_244EAE670;
    sub_244CC572C(v12, result + 552, 0x10uLL);
    uint64_t result = (unsigned __int8 *)sub_244CC572C(v12, v4 + 520, 0x20uLL);
    if (v12[1] < v12[2])
    {
      *(_DWORD *)a3 = 25;
      *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 633;
LABEL_8:
      *(_DWORD *)(a3 + 16) = v7;
      return result;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v8 = *(void *)(*((void *)v4 + 72) + 40);
    sub_2446C1098(v12, (uint64_t)(v4 + 432), *((void *)v4 + 58));
    int v10 = v13;
    uint64_t v11 = 48;
    uint64_t result = (unsigned __int8 *)sub_244D83884(a2, v8, (uint64_t)v12, (uint64_t)&v10, 0, v4[40], a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 640;
      goto LABEL_8;
    }
  }
  return result;
}

unsigned __int8 *sub_244CD4198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244CD3F64((unsigned __int8 *)(a1 - 32), a2, a3);
}

uint64_t sub_244CD41A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v13 = 0x10000;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  uint64_t result = (uint64_t)(*(void *(**)(long long *__return_ptr))(**(void **)(a1 + 512) + 192))(&v10);
  if (v10)
  {
    uint64_t v5 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)long long buf = v10;
      uint64_t v15 = v11;
      int v6 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Failed to obtain IPK for initiating: %s", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      *(_OWORD *)long long buf = v10;
      uint64_t v15 = v11;
      sub_244CB7B34((const char **)buf, 1);
      uint64_t result = sub_244CC4DE0(0xBu, 1);
    }
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = v11;
  }
  else
  {
    if (HIBYTE(v13) - 4 > 0xFFFFFFFC)
    {
      if (HIBYTE(v13) <= 1u) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = HIBYTE(v13) - 2;
      }
      *(_OWORD *)(a1 + 552) = *(_OWORD *)&v12[3 * v9 + 1];
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v8 = 695;
    }
    else
    {
      int v7 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_ERROR, "Found invalid IPK keyset for initiator.", buf, 2u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(0xBu, 1);
      }
      *(_DWORD *)a2 = 172;
      *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v8 = 677;
    }
    *(_DWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_244CD43D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = (unsigned char *)(result + 40);
  if (*(unsigned char *)(result + 40)
    && (uint64_t v4 = sub_2446F7170((unsigned char *)(result + 40)),
        uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 16))(*(void *)v4),
        result == 2))
  {
    uint64_t v5 = (uint64_t *)sub_2446F7170(v3);
    uint64_t result = sub_244D879D8(*v5);
    __int16 v6 = *(_WORD *)(result + 92);
    *(unsigned char *)a2 = 1;
    *(_WORD *)(a2 + 2) = v6;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void *sub_244CD4464(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = a1 + 64;
  sub_2447945A0(a1 + 64, a2, a3);
  return sub_244CB6318(a1, v4, 0xFFFFFFFF, (uint64_t)v6);
}

unsigned char *sub_244CD44AC(unsigned char *a1)
{
  if (!*a1) {
    sub_244E213F8();
  }
  return a1 + 4;
}

uint64_t sub_244CD44D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a6 + 8) <= 0xFuLL)
  {
    *(_DWORD *)a7 = 25;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a7 + 16) = 2023;
  }
  else
  {
    uint64_t v10 = *(void *)(*(void *)(result + 576) + 40);
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v11 = v10;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    *(void *)a7 = 0;
    sub_244CDAEEC(result, a2, a3, a4, (uint64_t)&v11, a7);
    if (!*(_DWORD *)a7)
    {
      *(void *)a7 = 0;
      *(void *)(a7 + 8) = 0;
      *(void *)(a7 + 16) = 0;
      sub_244CEBEAC(0, 0, (uint64_t)v12, *(void *)a5, *(void *)(a5 + 8), 0, a7, *(char **)a6, 16);
      if (!*(_DWORD *)a7)
      {
        sub_2446C1548(a6, 0x10uLL);
        *(_DWORD *)a7 = 0;
        *(void *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
        *(_DWORD *)(a7 + 16) = 2031;
      }
    }
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 40))(v11, v12);
    return sub_244CED784(v12, 16);
  }
  return result;
}

void sub_244CD4630(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    int v8 = 136315394;
    uint64_t v9 = "CASESession";
    __int16 v10 = 2080;
    uint64_t v11 = "HandleSigma1_and_SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_244CD47B0(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a3 + 4) = 892;
  }
  int v7 = sub_244D7DFA0();
  if (os_signpost_enabled(v7))
  {
    int v8 = 136315394;
    uint64_t v9 = "CASESession";
    __int16 v10 = 2080;
    uint64_t v11 = "HandleSigma1_and_SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
}

void sub_244CD47B0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)long long buf = 136315394;
    __int16 v43 = "CASESession";
    __int16 v44 = 2080;
    __int16 v45 = "HandleSigma1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CB3988((uint64_t)buf);
  int v46 = 0;
  unsigned __int16 v38 = 0;
  v37[0] = 0;
  v37[1] = 0;
  long long __src = 0uLL;
  uint64_t v9 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v39) = 0;
    _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_DEFAULT, "Received Sigma1 msg", (uint8_t *)&v39, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xBu, 2);
  }
  __int16 v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    ++dword_268EBEDCC;
    LODWORD(v39) = 67109120;
    HIDWORD(v39) = dword_268EBEDCC;
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma1", "%u", (uint8_t *)&v39, 8u);
  }
  char v35 = 0;
  uint64_t v33 = 0;
  size_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  v30[0] = 0;
  v30[1] = 0;
  sub_2446C1098(v29, *(void *)(*a2 + 8), *(void *)(*a2 + 24));
  sub_244CEC490(a1 + 224, v29[0], (size_t)v29[1], (uint64_t)&v39);
  int v11 = v39;
  if (v39
    || (sub_2446DE1E4((uint64_t)buf, a2),
        sub_244CD5658(a1, (uint64_t)buf, (uint64_t)&__src, &v38, (uint64_t)v37, (uint64_t)v30, &v35, (uint64_t)&v33, &v39, (uint64_t)&v31), (int v11 = v39) != 0))
  {
    int v3 = HIDWORD(v39);
    uint64_t v12 = v40;
    uint64_t v4 = v41;
    goto LABEL_12;
  }
  uint64_t v16 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    LODWORD(v39) = 67109120;
    HIDWORD(v39) = v38;
    _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_INFO, "Peer assigned session key ID %d", (uint8_t *)&v39, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  unsigned __int16 v17 = v38;
  *(unsigned char *)(a1 + 176) = 1;
  *(_WORD *)(a1 + 178) = v17;
  uint64_t v12 = "src/protocols/secure_channel/CASESession.cpp";
  if (!*(void *)(a1 + 584))
  {
    LODWORD(v4) = 1001;
    int v11 = 3;
    goto LABEL_30;
  }
  if (!v35
    || v34 != 16
    || (sub_244CDC26C(&v28, (uint64_t)v33),
        sub_244CD5270(a1, v28, v31, v32, __src, *((uint64_t *)&__src + 1), (uint64_t)&v39),
        v39))
  {
    sub_244CD4E58(a1, (uint64_t)v37, &__src, (uint64_t)&v39);
    int v11 = v39;
    int v3 = HIDWORD(v39);
    uint64_t v12 = v40;
    uint64_t v4 = v41;
    int v18 = sub_244CC8484(0xBu, "SecureChannel");
    int v19 = v18;
    if (v11)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v39) = 0;
        _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "CASE failed to match destination ID with local fabrics", (uint8_t *)&v39, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0xBu, 1);
      }
      sub_244CC856C(0xBu, "SecureChannel", OS_LOG_TYPE_INFO, v37);
      if (sub_244CC4E58(3u)) {
        sub_244CC7F18(11, 3, v37);
      }
LABEL_12:
      if (v11 == 16)
      {
        uint64_t v13 = a1 + 32;
        uint64_t v14 = (unsigned char *)(a1 + 104);
        int v15 = 1;
LABEL_31:
        sub_244CD6B90(v13, v14, v15);
        *(unsigned char *)(a1 + 728) = 0;
LABEL_32:
        *(_DWORD *)a3 = v11;
        *(_DWORD *)(a3 + 4) = v3;
        *(void *)(a3 + 8) = v12;
        *(void *)(a3 + 16) = v4;
        goto LABEL_33;
      }
LABEL_30:
      uint64_t v13 = a1 + 32;
      uint64_t v14 = (unsigned char *)(a1 + 104);
      int v15 = 2;
      goto LABEL_31;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(unsigned __int8 *)(a1 + 592);
      uint64_t v22 = *(void *)(a1 + 608);
      LODWORD(v39) = 67109632;
      HIDWORD(v39) = v21;
      LOWORD(v40) = 1024;
      *(_DWORD *)((char *)&v40 + 2) = HIDWORD(v22);
      HIWORD(v40) = 1024;
      LODWORD(v41) = v22;
      _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_DEFAULT, "CASE matched destination ID: fabricIndex %u, NodeID 0x%08X%08X", (uint8_t *)&v39, 0x14u);
    }
    if (sub_244CC4E58(2u)) {
      sub_244CC4DE0(0xBu, 2);
    }
    uint64_t v23 = v30[0];
    *(_OWORD *)(a1 + 352) = *(_OWORD *)v30[0];
    long long v25 = *(_OWORD *)(v23 + 32);
    long long v24 = *(_OWORD *)(v23 + 48);
    long long v26 = *(_OWORD *)(v23 + 16);
    *(unsigned char *)(a1 + 416) = *(unsigned char *)(v23 + 64);
    *(_OWORD *)(a1 + 384) = v25;
    *(_OWORD *)(a1 + 400) = v24;
    *(_OWORD *)(a1 + 368) = v26;
    LODWORD(v39) = 0;
    __n128 v27 = "core_dev_case_session_sigma2";
    uint64_t v40 = "core_dev_case_session_sigma2";
    BYTE4(v41) = 0;
    sub_244D7E78C((uint64_t)&v39);
    sub_244CD5F90((__n128 *)a1, (uint64_t)&v39);
    int v11 = v39;
    int v3 = HIDWORD(v39);
    uint64_t v12 = v40;
    uint64_t v4 = v41;
    if (!v39)
    {
      (*(void (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
      goto LABEL_32;
    }
LABEL_50:
    LODWORD(v39) = 1;
    uint64_t v40 = v27;
    LODWORD(v41) = v11;
    BYTE4(v41) = 3;
    sub_244D7E78C((uint64_t)&v39);
    goto LABEL_12;
  }
  if (*((void *)&__src + 1)) {
    memmove((void *)(a1 + 660), (const void *)__src, *((size_t *)&__src + 1));
  }
  if (v34) {
    memmove((void *)(a1 + 628), v33, v34);
  }
  LODWORD(v39) = 0;
  __n128 v27 = "core_dev_case_session_sigma2_resume";
  uint64_t v40 = "core_dev_case_session_sigma2_resume";
  BYTE4(v41) = 0;
  sub_244D7E78C((uint64_t)&v39);
  sub_244CD5AD4((unsigned char *)a1, (uint64_t)&v39);
  int v11 = v39;
  if (v39)
  {
    int v3 = HIDWORD(v39);
    uint64_t v12 = v40;
    uint64_t v4 = v41;
    goto LABEL_50;
  }
  (*(void (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
  *(_DWORD *)(a3 + 16) = 1022;
LABEL_33:
  if (v46) {
    sub_244CC8A0C(v46);
  }
  int v20 = sub_244D7DFA0();
  if (os_signpost_enabled(v20))
  {
    *(_DWORD *)long long buf = 136315394;
    __int16 v43 = "CASESession";
    __int16 v44 = 2080;
    __int16 v45 = "HandleSigma1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v20, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD4E58(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_244D7DFA0();
  int v7 = &off_244E79000;
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    __int16 v35 = 2080;
    uint64_t v36 = "FindLocalNodeFromDestinationId";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  uint64_t v8 = *(void *)(a1 + 584);
  if (!v8)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v9 = 898;
    goto LABEL_10;
  }
  sub_2446D8144(*(void **)(a1 + 584), (uint64_t)v30);
  if (v31 == v32 || v32 == 16 && v31 == 16 && v30[0] == v8)
  {
LABEL_8:
    *(_DWORD *)a4 = 16;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v9 = 946;
LABEL_10:
    *(_DWORD *)(a4 + 16) = v9;
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v11 = sub_2446D26A0(v30);
  unint64_t v12 = *(void *)v11;
  unint64_t v13 = *(void *)(v11 + 8);
  *(void *)long long buf = &unk_26F954540;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_244D9F140(*(void *)(a1 + 584), *(unsigned __int8 *)(v11 + 137), (uint64_t)buf, a4);
  if (!*(_DWORD *)a4)
  {
    int v29 = 0x10000;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 512) + 192))(&v26);
    if (v26 || HIBYTE(v29) - 1 > 2)
    {
LABEL_23:
      unint64_t v16 = v31;
      int v7 = &off_244E79000;
      while (1)
      {
        if (v16 < v32) {
          uint64_t v31 = ++v16;
        }
        if (v16 == v32) {
          goto LABEL_8;
        }
        if (*(unsigned char *)(v30[0] + 152 * v16 + 137)
          && (unint64_t)(*(void *)(v30[0] + 152 * v16) - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          if (v32 != 16 || v16 != 16 || v30[0] != v8) {
            goto LABEL_14;
          }
          goto LABEL_8;
        }
      }
    }
    unint64_t v14 = 0;
    int v15 = &v28;
    while (1)
    {
      __s1 = &v33;
      size_t __n = 32;
      v21[0] = v15;
      v21[1] = 16;
      long long v20 = *a3;
      v19[0] = &buf[8];
      v19[1] = 65;
      sub_244CD03E8((uint64_t)v21, (uint64_t)&v20, (uint64_t)v19, v13, v12, (uint64_t)&__s1, (uint64_t)&v22);
      long long v26 = v22;
      uint64_t v27 = v23;
      if (!v22 && __n == *(void *)(a2 + 8) && (!__n || !memcmp(__s1, *(const void **)a2, __n))) {
        break;
      }
      ++v14;
      v15 += 3;
      if (v14 >= HIBYTE(v29)) {
        goto LABEL_23;
      }
    }
    *(void *)&long long v22 = a1 + 552;
    *((void *)&v22 + 1) = 16;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)v15;
    sub_2446C1548((uint64_t)&v22, 0x10uLL);
    *(unsigned char *)(a1 + 592) = *(unsigned char *)(v11 + 137);
    *(void *)(a1 + 608) = v12;
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a4 + 16) = 946;
  }
  int v7 = &off_244E79000;
LABEL_11:
  __int16 v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)long long buf = *((void *)v7 + 426);
    *(void *)&uint8_t buf[4] = "CASESession";
    __int16 v35 = 2080;
    uint64_t v36 = "FindLocalNodeFromDestinationId";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD5270(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v21[0] = a3;
  v21[1] = a4;
  v20[0] = a5;
  v20[1] = a6;
  __int16 v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    __int16 v23 = 2080;
    long long v24 = "TryResumeSession";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  uint64_t v11 = *(void *)(a1 + 568);
  if (!v11)
  {
    *(_DWORD *)a7 = 3;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v15 = 953;
LABEL_11:
    *(_DWORD *)(a7 + 16) = v15;
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 584))
  {
    *(_DWORD *)a7 = 3;
    *(void *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v15 = 954;
    goto LABEL_11;
  }
  *(void *)long long buf = 0;
  uint8_t buf[8] = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2, buf, a1 + 432, a1 + 616);
  if (!*(_DWORD *)a7)
  {
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    v19[0] = a2;
    v19[1] = 16;
    v18[0] = "Sigma1_ResumeNCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
    v18[1] = 13;
    v17[0] = (uint64_t)"NCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
    v17[1] = 13;
    sub_244CD5500(a1, v21, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18, v17, (void *)a7);
    if (!*(_DWORD *)a7)
    {
      unint64_t v12 = (void *)sub_244D9EA90(*(void *)(a1 + 584), buf[8]);
      if (v12)
      {
        int v13 = 0;
        *(unsigned char *)(a1 + 592) = buf[8];
        *(void *)(a1 + 600) = *(void *)buf;
        *(void *)(a1 + 608) = *v12;
        int v14 = 971;
      }
      else
      {
        int v14 = 965;
        int v13 = 3;
      }
      *(_DWORD *)a7 = v13;
      *(void *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      *(_DWORD *)(a7 + 16) = v14;
    }
  }
LABEL_12:
  unint64_t v16 = sub_244D7DFA0();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    __int16 v23 = 2080;
    long long v24 = "TryResumeSession";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_244CD5500@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (a2[1] == 16)
  {
    uint64_t v10 = *(void *)(*(void *)(result + 576) + 40);
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v11 = v10;
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
    sub_244CDAEEC(result, a3, a4, a5, (uint64_t)&v11, (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      sub_244CEC134(0, 0, *a2, a2[1], (uint64_t)v12, *a6, (uint64_t)a7, a6[1], 0);
      if (!*(_DWORD *)a7)
      {
        *(_DWORD *)a7 = 0;
        a7[1] = "src/protocols/secure_channel/CASESession.cpp";
        *((_DWORD *)a7 + 4) = 2044;
      }
    }
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 40))(v11, v12);
    return sub_244CED784(v12, 16);
  }
  else
  {
    *(_DWORD *)a7 = 25;
    a7[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a7 + 4) = 2037;
  }
  return result;
}

void sub_244CD5658(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  int v32 = 21;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  sub_244CB55E4(a2, 21, 256, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB4C90(a2, &v32, (uint64_t)a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB54B4(a2, 1, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB5C08(a2, (_OWORD *)a3, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  if (*(void *)(a3 + 8) != 32)
  {
    *(_DWORD *)a9 = 84;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    int v23 = 2186;
LABEL_23:
    *((_DWORD *)a9 + 4) = v23;
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB54B4(a2, 2, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB3F40(a2, a4, (uint64_t)a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB54B4(a2, 3, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB5C08(a2, (_OWORD *)a5, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  if (*(void *)(a5 + 8) != 32)
  {
    *(_DWORD *)a9 = 84;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    int v23 = 2193;
    goto LABEL_23;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB54B4(a2, 4, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB5C08(a2, (_OWORD *)a6, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  if (*(void *)(a6 + 8) != 65)
  {
    *(_DWORD *)a9 = 84;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    int v23 = 2197;
    goto LABEL_23;
  }
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  sub_244CB4E58(a2, &v30);
  int v19 = v30;
  if (v30)
  {
LABEL_15:
    BOOL v20 = 0;
    int v21 = 0;
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24 == 5)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_244CE32F8(a1 + 32, 5, a2, (uint64_t)a9);
    if (*(_DWORD *)a9) {
      return;
    }
    uint64_t v25 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 104));
    sub_24479B4A8(*v25, &v28);
    uint64_t v26 = sub_244D87A80(v28);
    sub_244CD79E8(v26, (uint64_t *)(a1 + 144));
    (*(void (**)(void))(*(void *)v28 + 32))(v28);
    sub_244CB4E58(a2, &v28);
    long long v30 = v28;
    uint64_t v31 = v29;
    int v19 = v28;
    if (v28) {
      goto LABEL_15;
    }
    uint64_t v24 = *(void *)(a2 + 16);
  }
  BOOL v20 = v24 == 6;
  if (v24 == 6)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_244CB5C08(a2, (_OWORD *)a8, a9);
    if (*(_DWORD *)a9) {
      return;
    }
    if (*(void *)(a8 + 8) != 16)
    {
      int v23 = 2216;
LABEL_47:
      int v27 = 84;
      goto LABEL_48;
    }
    sub_244CB4E58(a2, &v28);
    long long v30 = v28;
    uint64_t v31 = v29;
    int v19 = v28;
    if (v28)
    {
      int v21 = 0;
      BOOL v20 = 1;
      goto LABEL_16;
    }
  }
  if (*(void *)(a2 + 16) != 7)
  {
    int v21 = 0;
    goto LABEL_18;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_244CB5C08(a2, (_OWORD *)a10, a9);
  if (*(_DWORD *)a9) {
    return;
  }
  if (*(void *)(a10 + 8) != 16)
  {
    int v23 = 2224;
    goto LABEL_47;
  }
  sub_244CB4E58(a2, &v28);
  long long v30 = v28;
  uint64_t v31 = v29;
  int v21 = 1;
  int v19 = v28;
LABEL_16:
  if (v19 == 33)
  {
    LODWORD(v30) = 0;
    *((void *)&v30 + 1) = "src/protocols/secure_channel/CASESession.cpp";
    LODWORD(v31) = 2231;
  }
LABEL_18:
  *(_OWORD *)a9 = v30;
  a9[2] = v31;
  if (!*(_DWORD *)a9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_244CB4D00(a2, v32, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      if (v20 & v21)
      {
        char v22 = 1;
      }
      else
      {
        if ((v20 | v21))
        {
          int v23 = 2247;
          int v27 = 43;
LABEL_48:
          *(_DWORD *)a9 = v27;
          a9[1] = "src/protocols/secure_channel/CASESession.cpp";
          goto LABEL_23;
        }
        char v22 = 0;
      }
      int v27 = 0;
      *a7 = v22;
      int v23 = 2250;
      goto LABEL_48;
    }
  }
}

void sub_244CD5AD4(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  v26[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    int v21 = "CASESession";
    __int16 v22 = 2080;
    int v23 = "SendSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CB62B8((uint64_t)buf);
  v24[1] = 0;
  v24[2] = 0;
  v24[0] = &unk_26F9536C8;
  char v25 = 0;
  int v19 = 0;
  int v18 = -1;
  sub_244CD43D8((uint64_t)(a1 + 32), (uint64_t)v26);
  if (!LOBYTE(v26[0]))
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v8 = 1083;
LABEL_23:
    *(_DWORD *)(a2 + 16) = v8;
    goto LABEL_24;
  }
  sub_244CC8F5C(0x66uLL, 0x26u, v26);
  int v19 = (_WORD *)v26[0];
  if (!v26[0])
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v8 = 1086;
    goto LABEL_23;
  }
  sub_2447945A0((uint64_t)v24, &v19, 0);
  sub_244CB6318((uint64_t)buf, (uint64_t)v24, 0xFFFFFFFF, (uint64_t)v26);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CECD5C(a1 + 644, 0x10uLL, a2);
  if (!*(_DWORD *)a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB7594(buf, 256, 21, &v18, a2);
    if (!*(_DWORD *)a2)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CB6ADC((char *)buf, a1 + 644, 0x10uLL, a2);
      if (!*(_DWORD *)a2)
      {
        unint64_t v16 = v26;
        uint64_t v17 = 16;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = 0;
        *(void *)int v14 = a1 + 660;
        uint64_t v15 = 32;
        v13[0] = a1 + 644;
        v13[1] = 16;
        v12[0] = "Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
        v12[1] = 13;
        v11[0] = "NCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
        v11[1] = 13;
        sub_244CD44D0((uint64_t)a1, (uint64_t)v14, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11, (uint64_t)&v16, a2);
        if (!*(_DWORD *)a2)
        {
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 0;
          sub_2446C1098(v10, (uint64_t)v16, v17);
          sub_244CB6ADC((char *)buf, v10[0], (unint64_t)v10[1], a2);
          if (!*(_DWORD *)a2)
          {
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = 0;
            sub_244CD43D8((uint64_t)(a1 + 32), (uint64_t)v14);
            sub_2446D1880(v14);
            sub_244CB6904();
            if (!*(_DWORD *)a2)
            {
              if (!a1[128])
              {
                int v8 = 1105;
                int v7 = 3;
LABEL_30:
                *(_DWORD *)a2 = v7;
                *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
                goto LABEL_23;
              }
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = 0;
              sub_244CD44AC(a1 + 128);
              sub_244CE318C(4, buf, (void *)a2);
              if (!*(_DWORD *)a2)
              {
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                *(void *)(a2 + 16) = 0;
                sub_244CB7708((uint64_t)buf, v18, a2);
                if (!*(_DWORD *)a2)
                {
                  *(void *)a2 = 0;
                  *(void *)(a2 + 8) = 0;
                  *(void *)(a2 + 16) = 0;
                  sub_2446DE160((uint64_t)buf, &v19, (void *)a2);
                  if (!*(_DWORD *)a2)
                  {
                    *(void *)a2 = 0;
                    *(void *)(a2 + 8) = 0;
                    *(void *)(a2 + 16) = 0;
                    uint64_t v5 = *(void *)sub_244CD3130(a1 + 104);
                    *(_WORD *)int v14 = 1;
                    sub_244D645BC(v5, 0, 51, (uint64_t *)&v19, v14, a2);
                    if (!*(_DWORD *)a2)
                    {
                      a1[728] = 5;
                      __int16 v6 = sub_244CC8484(0xBu, "SecureChannel");
                      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
                      {
                        *(_WORD *)int v14 = 0;
                        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "Sent Sigma2Resume msg", v14, 2u);
                      }
                      if (sub_244CC4E58(3u)) {
                        sub_244CC4DE0(0xBu, 3);
                      }
                      int v7 = 0;
                      int v8 = 1120;
                      goto LABEL_30;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_24:
  if (v19) {
    sub_244CC8A0C(v19);
  }
  sub_244CA539C(v24);
  int v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    *(_DWORD *)long long buf = 136315394;
    int v21 = "CASESession";
    __int16 v22 = 2080;
    int v23 = "SendSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD5F90(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)long long buf = 136315394;
    unsigned int v56 = "CASESession";
    __int16 v57 = 2080;
    int v58 = "SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CD43D8((uint64_t)&a1[2], (uint64_t)buf);
  if (!buf[0])
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v9 = 1127;
LABEL_16:
    *(_DWORD *)(a2 + 16) = v9;
    goto LABEL_17;
  }
  if (!a1[36].n128_u64[1])
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v9 = 1128;
    goto LABEL_16;
  }
  uint64_t v5 = sub_244CC4D84(0x190uLL);
  if (!v5)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v9 = 1131;
    goto LABEL_16;
  }
  __int16 v6 = v5;
  int v7 = sub_244CC4D84(0x190uLL);
  if (!v7)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = 1134;
    goto LABEL_21;
  }
  int v8 = v7;
  sub_24479476C(&v46, (uint64_t)v6, 400);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244D9ED74(a1[36].n128_i64[1], a1[37].n128_u8[0], (uint64_t)&v46, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_10;
  }
  sub_24479476C(&v44, (uint64_t)v8, 400);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244D9EF98(a1[36].n128_i64[1], a1[37].n128_u8[0], (uint64_t)&v44, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_10;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CECD5C(v59, 0x20uLL, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_10;
  }
  uint64_t v11 = sub_244DA2020(a1[36].n128_i64[1]);
  a1[26].n128_u64[1] = v11;
  if (!v11)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = 1148;
    goto LABEL_10;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 48))(v11, 0);
  if (*(_DWORD *)a2) {
    goto LABEL_10;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(unint64_t, uint64_t *, __n128 *))(*(void *)a1[26].n128_u64[1] + 32))(a1[26].n128_u64[1], &a1[21].n128_i64[1], a1 + 27);
  if (*(_DWORD *)a2) {
    goto LABEL_10;
  }
  int v42 = buf;
  uint64_t v43 = 145;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v31[0] = v59;
  v31[1] = (const void *)32;
  uint64_t v12 = (*(uint64_t (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
  uint64_t v50 = &a1[34].n128_i8[8];
  uint64_t v51 = 16;
  sub_244CD6F08(a1, v31, v12, (uint64_t)&v50, (uint64_t)&v42, (void *)a2);
  if (*(_DWORD *)a2) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(a1[36].n128_u64[0] + 40);
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v53 = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_2446C1098(v31, (uint64_t)v42, v43);
  uint64_t v50 = "Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
  uint64_t v51 = 6;
  (*(void (**)(void, __n128 *, const void **, char **, void *))(**(void **)(a1[36].n128_u64[0] + 40)
                                                                             + 56))(*(void *)(a1[36].n128_u64[0] + 40), a1 + 27, v31, &v50, v54);
  if (*(_DWORD *)a2)
  {
LABEL_27:
    sub_244CD7220(&v53);
LABEL_10:
    j__free(v8);
    goto LABEL_11;
  }
  uint64_t v41 = 948;
  int v14 = sub_244CC4D84(0x3B4uLL);
  if (!v14)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = 1167;
    goto LABEL_27;
  }
  uint64_t v15 = v14;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_2446C1098(v31, v44, v45);
  sub_2446C1098(&v50, v46, v47);
  uint64_t v16 = (*(uint64_t (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]) + 8;
  (*(void (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
  sub_2446C1098(v37, v16, 65);
  sub_2446C1098(v40, (uint64_t)&a1[22], 65);
  sub_244CD7088((uint64_t)v31, (uint64_t)&v50, (uint64_t)v37, (uint64_t)v40, (uint64_t)v15, (unint64_t *)&v41, (void *)a2);
  if (*(_DWORD *)a2)
  {
LABEL_33:
    j__free(v15);
    goto LABEL_27;
  }
  uint64_t v52 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v17 = a1[36].n128_i64[1];
  uint64_t v18 = a1[37].n128_u8[0];
  sub_2446C1098(v39, (uint64_t)v15, v41);
  sub_244DA2424(v17, v18, v39[0], v39[1], (uint64_t)&v50, a2);
  if (*(_DWORD *)a2)
  {
    sub_244CED784(&v50, 64);
    goto LABEL_33;
  }
  j__free(v15);
  uint64_t v19 = v45 + v47 + v52;
  BOOL v20 = (char *)sub_244CC4D84(v19 + 50);
  if (v20)
  {
    int v21 = v20;
    sub_244CB62B8((uint64_t)v37);
    int v36 = -1;
    sub_244CB62E0((uint64_t)v37, (uint64_t)v21, v19 + 34);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB7594(v37, 256, 21, &v36, a2);
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_2446C1098(v35, v44, v45);
    sub_244CB6ADC((char *)v37, v35[0], (unint64_t)v35[1], a2);
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    uint64_t v22 = v47;
    if (v47)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_2446C1098(v34, v46, v22);
      sub_244CB6ADC((char *)v37, v34[0], (unint64_t)v34[1], a2);
      if (*(_DWORD *)a2) {
        goto LABEL_38;
      }
    }
    j__free(v6);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    j__free(v8);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_244CB6B18((char *)v37, (char *)&v50, v52, a2);
    int v8 = 0;
    __int16 v6 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CECD5C(&a1[40].n128_i8[4], 0x10uLL, a2);
    int v8 = 0;
    __int16 v6 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB6ADC((char *)v37, &a1[40].n128_i8[4], 0x10uLL, a2);
    int v8 = 0;
    __int16 v6 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB7708((uint64_t)v37, v36, a2);
    int v8 = 0;
    __int16 v6 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB6414((uint64_t)v37, a2);
    int v8 = 0;
    __int16 v6 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    size_t v23 = v38;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_244CEBEAC(v21, v23, (uint64_t)v54, (uint64_t)"NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE", 0xDuLL, v21, a2, &v21[v23], 16);
    int v8 = 0;
    __int16 v6 = 0;
    if (*(_DWORD *)a2) {
      goto LABEL_38;
    }
    sub_244CC8F5C(v23 + 191, 0x26u, v40);
    if (!v40[0])
    {
      *(_DWORD *)a2 = 11;
      *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      *(_DWORD *)(a2 + 16) = 1228;
LABEL_59:
      int v8 = 0;
      __int16 v6 = 0;
LABEL_38:
      j__free(v21);
      goto LABEL_40;
    }
    sub_244CB62B8((uint64_t)v31);
    v32[1] = 0;
    v32[2] = 0;
    v32[0] = &unk_26F9536C8;
    char v33 = 0;
    int v36 = -1;
    sub_244CD4464((uint64_t)v31, v40, 0);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB7594(v31, 256, 21, &v36, a2);
    if (*(_DWORD *)a2) {
      goto LABEL_56;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB6B18((char *)v31, v59, 0x20u, a2);
    if (*(_DWORD *)a2) {
      goto LABEL_56;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CD43D8((uint64_t)&a1[2], (uint64_t)v48);
    sub_2446D1880(v48);
    sub_244CB6904();
    if (*(_DWORD *)a2) {
      goto LABEL_56;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v24 = (char *)((*(uint64_t (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1])
                 + 8);
    (*(void (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
    sub_244CB6B18((char *)v31, v24, 0x41u, a2);
    if (*(_DWORD *)a2
      || (*(void *)a2 = 0,
          *(void *)(a2 + 8) = 0,
          *(void *)(a2 + 16) = 0,
          sub_244CB6B18((char *)v31, v21, v23 + 16, a2),
          *(_DWORD *)a2))
    {
LABEL_56:
      sub_244CA539C(v32);
      if (v40[0]) {
        sub_244CC8A0C(v40[0]);
      }
      goto LABEL_59;
    }
    if (a1[8].n128_u8[0])
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CD44AC(&a1[8]);
      sub_244CE318C(5, v31, (void *)a2);
      if (*(_DWORD *)a2) {
        goto LABEL_56;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CB7708((uint64_t)v31, v36, a2);
      if (*(_DWORD *)a2) {
        goto LABEL_56;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_2446DE160((uint64_t)v31, v40, (void *)a2);
      if (*(_DWORD *)a2) {
        goto LABEL_56;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_2446C1098(v30, *((void *)v40[0] + 1), *((void *)v40[0] + 3));
      sub_244CEC490((uint64_t)&a1[14], v30[0], (size_t)v30[1], a2);
      if (*(_DWORD *)a2) {
        goto LABEL_56;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t v25 = *(void *)sub_244CD3130(&a1[6].n128_u8[8]);
      *(_WORD *)__int16 v48 = 1;
      sub_244D645BC(v25, 0, 49, (uint64_t *)v40, v48, a2);
      if (*(_DWORD *)a2) {
        goto LABEL_56;
      }
      a1[45].n128_u8[8] = 2;
      uint64_t v26 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v48 = 0;
        _os_log_impl(&dword_2446BD000, v26, OS_LOG_TYPE_DEFAULT, "Sent Sigma2 msg", v48, 2u);
      }
      if (sub_244CC4E58(2u)) {
        sub_244CC4DE0(0xBu, 2);
      }
      int v27 = sub_244D7DFA0();
      if (os_signpost_enabled(v27))
      {
        ++dword_268EBEDD0;
        *(_DWORD *)__int16 v48 = 67109120;
        int v49 = dword_268EBEDD0;
        _os_signpost_emit_with_name_impl(&dword_2446BD000, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma2", "%u", v48, 8u);
      }
      int v28 = 0;
      int v29 = 1259;
    }
    else
    {
      int v29 = 1242;
      int v28 = 3;
    }
    *(_DWORD *)a2 = v28;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = v29;
    goto LABEL_56;
  }
  *(_DWORD *)a2 = 11;
  *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
  *(_DWORD *)(a2 + 16) = 1183;
LABEL_40:
  sub_244CED784(&v50, 64);
  sub_244CD7220(&v53);
  if (v8) {
    goto LABEL_10;
  }
LABEL_11:
  if (v6) {
LABEL_21:
  }
    j__free(v6);
LABEL_17:
  uint64_t v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)long long buf = 136315394;
    unsigned int v56 = "CASESession";
    __int16 v57 = 2080;
    int v58 = "SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD6B90(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  __int16 v5 = a3 != 0;
  __int16 v6 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = *(unsigned __int16 *)(*(void *)sub_244CD3130(a2) + 112);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a3;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_INFO, "Sending status report. Protocol code %d, exchange %d", buf, 0xEu);
  }
  if (sub_244CC4E58(3u))
  {
    sub_244CD3130(a2);
    sub_244CC4DE0(0xBu, 3);
  }
  sub_244D63DA8((uint64_t)&v21, v5, 0, a3);
  unint64_t v8 = sub_244D63FB4(&v21);
  sub_244CC8F5C(v8, 0x26u, &v20);
  if (v20)
  {
    uint64_t v9 = *((void *)v20 + 1);
    uint64_t v10 = v9 + *((void *)v20 + 3);
    uint64_t v11 = sub_244CC8B50((uint64_t)v20);
    *(void *)long long buf = v10;
    uint64_t v24 = v11;
    uint64_t v25 = 0;
    if (!v9) {
      uint64_t v24 = 0;
    }
    uint64_t v26 = v20;
    BOOL v20 = 0;
    sub_244D63F44(&v21, buf);
    sub_244CC9354(buf, (uint64_t *)&v26, (uint64_t *)&v19);
    if (v19)
    {
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      uint64_t v12 = *(void *)sub_244CD3130(a2);
      *(_WORD *)int v27 = 0;
      sub_244D645BC(v12, 0, 64, (uint64_t *)&v19, v27, (uint64_t)&v17);
      if (!v17) {
        goto LABEL_22;
      }
      uint64_t v13 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)int v27 = v17;
        uint64_t v28 = v18;
        int v14 = sub_244CB7B34((const char **)v27, 1);
        *(_DWORD *)int v27 = 136315138;
        *(void *)&v27[4] = v14;
        _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Failed to send status report message: %s", v27, 0xCu);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_22;
      }
      *(_OWORD *)int v27 = v17;
      uint64_t v28 = v18;
      sub_244CB7B34((const char **)v27, 1);
    }
    else
    {
      uint64_t v16 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v27 = 0;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Failed to allocate status report message", v27, 2u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_22;
      }
    }
    sub_244CC4DE0(0xBu, 1);
LABEL_22:
    if (v19) {
      sub_244CC8A0C(v19);
    }
    if (v26) {
      sub_244CC8A0C(v26);
    }
    goto LABEL_26;
  }
  uint64_t v15 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Failed to allocate status report message", buf, 2u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(0xBu, 1);
  }
LABEL_26:
  if (v20) {
    sub_244CC8A0C(v20);
  }
  if (v22) {
    sub_244CC8A0C(v22);
  }
}

void sub_244CD6F08(__n128 *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  bzero(*(void **)a5, *(void *)(a5 + 8));
  unint64_t v12 = *(void *)(a5 + 8);
  uint64_t v19 = *(void **)a5;
  unint64_t v20 = v12;
  unint64_t v21 = 0;
  if (!v19) {
    unint64_t v20 = 0;
  }
  sub_244CC572C(&v19, *(const void **)a4, *(void *)(a4 + 8));
  sub_244CC572C(&v19, *a2, 0x20uLL);
  sub_244CC572C(&v19, (const void *)(a3 + 8), 0x41uLL);
  long long v17 = &v22;
  size_t v18 = 32;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_244CEC4E0(a1 + 14, (uint64_t *)&v17, a6);
  if (!*(_DWORD *)a6)
  {
    sub_244CC572C(&v19, v17, v18);
    if (v20 >= v21)
    {
      uint64_t v15 = sub_244CDAEA0((void *)a5, 0, v21);
      int v14 = 0;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v16;
      int v13 = 1981;
    }
    else
    {
      int v13 = 1978;
      int v14 = 25;
    }
    *(_DWORD *)a6 = v14;
    a6[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a6 + 4) = v13;
  }
}

uint64_t sub_244CD7044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 576)
                                                                                             + 40)
                                                                               + 56))(*(void *)(*(void *)(a1 + 576) + 40), a1 + 432, a2, a3, a4 + 8);
}

void sub_244CD7088(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X6>, void *a7@<X8>)
{
  sub_244CB62B8((uint64_t)v16);
  int v15 = -1;
  sub_244CB62E0((uint64_t)v16, a5, *a6);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  sub_244CB7594(v16, 256, 21, &v15, (uint64_t)a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    sub_244CB6ADC((char *)v16, *(char **)a1, *(void *)(a1 + 8), (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      unint64_t v14 = *(void *)(a2 + 8);
      if (!v14
        || (*a7 = 0,
            a7[1] = 0,
            a7[2] = 0,
            sub_244CB6ADC((char *)v16, *(char **)a2, v14, (uint64_t)a7),
            !*(_DWORD *)a7))
      {
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
        sub_244CB6ADC((char *)v16, *(char **)a3, *(void *)(a3 + 8), (uint64_t)a7);
        if (!*(_DWORD *)a7)
        {
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
          sub_244CB6ADC((char *)v16, *(char **)a4, *(void *)(a4 + 8), (uint64_t)a7);
          if (!*(_DWORD *)a7)
          {
            *a7 = 0;
            a7[1] = 0;
            a7[2] = 0;
            sub_244CB7708((uint64_t)v16, v15, (uint64_t)a7);
            if (!*(_DWORD *)a7)
            {
              *a7 = 0;
              a7[1] = 0;
              a7[2] = 0;
              sub_244CB6414((uint64_t)v16, (uint64_t)a7);
              if (!*(_DWORD *)a7)
              {
                *a6 = v17;
                *(_DWORD *)a7 = 0;
                a7[1] = "src/protocols/secure_channel/CASESession.cpp";
                *((_DWORD *)a7 + 4) = 2066;
              }
            }
          }
        }
      }
    }
  }
}

void *sub_244CD7220(void *a1)
{
  uint64_t v2 = a1 + 1;
  (*(void (**)(void, void *))(*(void *)*a1 + 40))(*a1, a1 + 1);
  sub_244CED784(v2, 16);
  return a1;
}

void sub_244CD7280(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v31 = "CASESession";
    __int16 v32 = 2080;
    char v33 = "HandleSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_26519C6C8;
  a3[2] = 1265;
  sub_244CB3988((uint64_t)buf);
  size_t v34 = 0;
  int v27 = 21;
  unsigned __int16 v26 = 0;
  int v7 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int16 v35 = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Received Sigma2Resume msg", v35, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  unint64_t v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    ++dword_268EBEDD4;
    *(_DWORD *)__int16 v35 = 67109120;
    *(_DWORD *)&v35[4] = dword_268EBEDD4;
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma2Resume", "%u", v35, 8u);
  }
  *(_DWORD *)__int16 v35 = 1;
  *(void *)&v35[8] = "core_dev_case_session_sigma1";
  LODWORD(v36) = 0;
  BYTE4(v36) = 3;
  sub_244D7E78C((uint64_t)v35);
  sub_2446DE1E4((uint64_t)buf, a2);
  sub_244CB55E4((uint64_t)buf, v27, 256, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4C90((uint64_t)buf, &v27, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4E58((uint64_t)buf, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  if (*(_DWORD *)((char *)&v33 + 2) != 1)
  {
    int v17 = 1284;
LABEL_38:
    int v18 = 36;
LABEL_41:
    *(_DWORD *)a3 = v18;
    a3[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a3 + 4) = v17;
    goto LABEL_42;
  }
  if (sub_244CB3BE0((uint64_t)buf) != 16)
  {
    int v17 = 1286;
LABEL_40:
    int v18 = 35;
    goto LABEL_41;
  }
  sub_244CB44B4((uint64_t)buf, v28, 0x10uLL, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4E58((uint64_t)buf, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  if (*(_DWORD *)((char *)&v33 + 2) != 2)
  {
    int v17 = 1290;
    goto LABEL_38;
  }
  if (sub_244CB3BE0((uint64_t)buf) != 16)
  {
    int v17 = 1291;
    goto LABEL_40;
  }
  sub_244CB44B4((uint64_t)buf, v29, 0x10uLL, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  *(void *)&long long v20 = v29;
  *((void *)&v20 + 1) = 16;
  v25[0] = a1 + 660;
  v25[1] = 32;
  v24[0] = v28;
  v24[1] = 16;
  v23[0] = "Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
  v23[1] = 13;
  v22[0] = (uint64_t)"NCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
  v22[1] = 13;
  sub_244CD5500(a1, (uint64_t *)&v20, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, v22, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4E58((uint64_t)buf, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  if (*(_DWORD *)((char *)&v33 + 2) != 3)
  {
    int v17 = 1298;
    goto LABEL_38;
  }
  sub_244CB3F40((uint64_t)buf, &v26, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4E58((uint64_t)buf, v35);
  if (*(_DWORD *)v35 != 33)
  {
    sub_244CE32F8(a1 + 32, 4, (uint64_t)buf, (uint64_t)v35);
    *(_OWORD *)a3 = *(_OWORD *)v35;
    a3[2] = v36;
    if (!*(_DWORD *)a3)
    {
      uint64_t v9 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 104));
      sub_24479B4A8(*v9, v35);
      uint64_t v10 = sub_244D87A80(*(uint64_t *)v35);
      sub_244CD79E8(v10, (uint64_t *)(a1 + 144));
      (*(void (**)(void))(**(void **)v35 + 32))(*(void *)v35);
      goto LABEL_26;
    }
LABEL_42:
    sub_244CD6B90(a1 + 32, (unsigned char *)(a1 + 104), 2);
    goto LABEL_43;
  }
LABEL_26:
  uint64_t v11 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int16 v35 = 67109120;
    *(_DWORD *)&v35[4] = v26;
    _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_INFO, "Peer assigned session session ID %d", v35, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  unsigned __int16 v12 = v26;
  *(unsigned char *)(a1 + 176) = 1;
  *(_WORD *)(a1 + 178) = v12;
  uint64_t v13 = *(void *)(a1 + 568);
  if (v13)
  {
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    *(void *)__int16 v35 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    *(void *)&v35[8] = v14;
    (*(void (**)(long long *__return_ptr, uint64_t, uint8_t *, char *, uint64_t, uint64_t))(*(void *)v13 + 32))(&v20, v13, v35, v28, a1 + 432, a1 + 616);
    if (v20)
    {
      int v15 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)__int16 v35 = v20;
        uint64_t v36 = v21;
        uint64_t v16 = sub_244CB7B34((const char **)v35, 1);
        *(_DWORD *)__int16 v35 = 136315138;
        *(void *)&v35[4] = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Unable to save session resumption state: %s", v35, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)__int16 v35 = v20;
        uint64_t v36 = v21;
        sub_244CB7B34((const char **)v35, 1);
        sub_244CC4DE0(0xBu, 1);
      }
    }
  }
  *(_DWORD *)__int16 v35 = 2;
  *(void *)&v35[8] = "core_dev_case_session_sigma_finished";
  BYTE4(v36) = 0;
  sub_244D7E78C((uint64_t)v35);
  sub_244CD6B90(a1 + 32, (unsigned char *)(a1 + 104), 0);
  *(unsigned char *)(a1 + 728) = 7;
  sub_244CE2D58(a1 + 32);
LABEL_43:
  if (v34) {
    sub_244CC8A0C(v34);
  }
  uint64_t v19 = sub_244D7DFA0();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v31 = "CASESession";
    __int16 v32 = 2080;
    char v33 = "HandleSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_244CD79E8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 120) = *((_WORD *)a2 + 4);
  *(void *)(result + 112) = v2;
  LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
  *(unsigned char *)(result + 124) = v2;
  if (v2) {
    *(_WORD *)(result + 126) = *((_WORD *)a2 + 7);
  }
  int v3 = *((unsigned __int8 *)a2 + 16);
  *(unsigned char *)(result + 128) = v3;
  if (v3) {
    *(_WORD *)(result + 130) = *((_WORD *)a2 + 9);
  }
  int v4 = *((unsigned __int8 *)a2 + 20);
  *(unsigned char *)(result + 132) = v4;
  if (v4) {
    *(_DWORD *)(result + 136) = *((_DWORD *)a2 + 6);
  }
  *(_WORD *)(result + 140) = *((_WORD *)a2 + 14);
  return result;
}

void sub_244CD7A40(__n128 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleSigma2_and_SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  memset(buf, 0, sizeof(buf));
  sub_244CD7C44(a1, a2, (uint64_t)buf);
  int v8 = 1;
  uint64_t v9 = "core_dev_case_session_sigma1";
  int v10 = *(_DWORD *)buf;
  char v11 = 3;
  sub_244D7E78C((uint64_t)&v8);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (!*(_DWORD *)a3)
  {
    int v8 = 0;
    uint64_t v9 = "core_dev_case_session_sigma3";
    char v11 = 0;
    sub_244D7E78C((uint64_t)&v8);
    sub_244CD88F0((uint64_t)a1, (uint64_t)buf);
  }
  int v7 = sub_244D7DFA0();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleSigma2_and_SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD7C44(__n128 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleSigma2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_26519C6E0;
  *(void *)(a3 + 16) = 1351;
  sub_244CB3988((uint64_t)v45);
  uint64_t v46 = 0;
  sub_244CB3988((uint64_t)v43);
  int v42 = 21;
  int v7 = *(char **)(*a2 + 8);
  uint64_t v8 = *(void *)(*a2 + 24);
  uint64_t v40 = 0;
  size_t __n = 0;
  uint64_t v9 = *(void *)(a1[36].n128_u64[0] + 40);
  v52[1] = 0;
  uint64_t v51 = v9;
  v52[0] = 0;
  unint64_t v50 = 0;
  v48[0] = &unk_26F954540;
  long long v39 = 0uLL;
  long long v38 = 0uLL;
  unsigned __int16 v37 = 0;
  int v10 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_DEFAULT, "Received Sigma2 msg", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xBu, 2);
  }
  uint64_t v11 = a1[36].n128_i64[1];
  if (!v11)
  {
    int v7 = 0;
    uint64_t v16 = 0;
    int v17 = 1387;
LABEL_26:
    int v18 = 3;
LABEL_27:
    *(_DWORD *)a3 = v18;
    *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a3 + 16) = v17;
    goto LABEL_28;
  }
  uint64_t v12 = sub_244D9EA90(v11, a1[37].n128_u8[0]);
  if (!v12)
  {
    int v7 = 0;
    uint64_t v16 = 0;
    int v17 = 1389;
    goto LABEL_26;
  }
  if (!a1[26].n128_u64[1])
  {
    int v7 = 0;
    uint64_t v16 = 0;
    int v17 = 1393;
    int v18 = 172;
    goto LABEL_27;
  }
  if (!v7)
  {
    uint64_t v16 = 0;
    int v17 = 1394;
    int v18 = 13;
    goto LABEL_27;
  }
  uint64_t v13 = *(const void **)(v12 + 8);
  sub_2446DE1E4((uint64_t)v45, a2);
  sub_244CB55E4((uint64_t)v45, v42, 256, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_23;
  }
  sub_244CB4C90((uint64_t)v45, &v42, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_23;
  }
  sub_244CB55E4((uint64_t)v45, 16, 1, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_23;
  }
  sub_244CB44B4((uint64_t)v45, v47, 0x20uLL, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_23;
  }
  sub_244CB55E4((uint64_t)v45, 4, 2, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_23;
  }
  sub_244CB3F40((uint64_t)v45, &v37, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_23;
  }
  uint64_t v14 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v37;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "Peer assigned session session ID %d", buf, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  unsigned __int16 v15 = v37;
  a1[11].n128_u8[0] = 1;
  a1[11].n128_u16[1] = v15;
  sub_244CB55E4((uint64_t)v45, 16, 3, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3
    || (sub_244CB44B4((uint64_t)v45, (char *)&a1[22], 0x41uLL, (uint64_t)buf),
        *(_OWORD *)a3 = *(_OWORD *)buf,
        *(void *)(a3 + 16) = *(void *)&buf[16],
        *(_DWORD *)a3))
  {
LABEL_23:
    int v7 = 0;
    uint64_t v16 = 0;
LABEL_28:
    sub_244CD6B90((uint64_t)&a1[2], &a1[6].n128_u8[8], 2);
    goto LABEL_29;
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)a1[26].n128_u64[1] + 32))(buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_41;
  }
  __int16 v35 = buf;
  uint64_t v36 = 145;
  v32[0] = v47;
  v32[1] = (const void *)32;
  long long v30 = &a1[34].n128_i8[8];
  uint64_t v31 = 16;
  sub_244CD6F08(a1, v32, (uint64_t)&a1[21].n128_i64[1], (uint64_t)&v30, (uint64_t)&v35, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3
    || (sub_2446C1098(v32, (uint64_t)v35, v36),
        long long v30 = "Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE",
        uint64_t v31 = 6,
        (*(void (**)(long long *__return_ptr))(**(void **)(a1[36].n128_u64[0] + 40) + 56))(&v33),
        *(_OWORD *)a3 = v33,
        *(void *)(a3 + 16) = v34,
        *(_DWORD *)a3))
  {
    uint64_t v16 = 0;
    int v7 = 0;
    goto LABEL_47;
  }
  sub_2446C1098(v29, (uint64_t)v7, v8);
  sub_244CEC490((uint64_t)&a1[14], v29[0], (size_t)v29[1], (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3
    || (sub_244CB55E4((uint64_t)v45, 16, 4, &v33), *(_OWORD *)a3 = v33, *(void *)(a3 + 16) = v34, *(_DWORD *)a3))
  {
LABEL_41:
    int v7 = 0;
LABEL_42:
    uint64_t v16 = 0;
    goto LABEL_28;
  }
  unint64_t v20 = v50 + 966;
  unsigned int v21 = sub_244CB3BE0((uint64_t)v45);
  if (v20 < v21)
  {
    int v7 = 0;
    uint64_t v16 = 0;
    int v17 = 1436;
LABEL_76:
    int v18 = 35;
    goto LABEL_27;
  }
  unint64_t v22 = v21;
  if (v21 < 0x11)
  {
    int v7 = 0;
    uint64_t v16 = 0;
    int v17 = 1437;
    goto LABEL_76;
  }
  int v7 = (char *)sub_244CC4D84(v21);
  if (!v7)
  {
    uint64_t v16 = 0;
    int v17 = 1438;
LABEL_79:
    int v18 = 11;
    goto LABEL_27;
  }
  sub_244CB44B4((uint64_t)v45, v7, v22, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CEC134(v7, v22 - 16, (uint64_t)&v7[v22 - 16], 16, (uint64_t)v52, (uint64_t)"NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE", (uint64_t)&v33, 13, v7);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB39B8((uint64_t)v43, (uint64_t)v7, v22 - 16);
  int v42 = 21;
  sub_244CB55E4((uint64_t)v43, 21, 256, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4C90((uint64_t)v43, &v42, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB55E4((uint64_t)v43, 16, 1, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB40C8((uint64_t)v43, &v39, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  sub_244CB4E58((uint64_t)v43, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_42;
  }
  if (v44 == 2)
  {
    if (sub_244CB3B68((uint64_t)v43) != 16)
    {
      uint64_t v16 = 0;
      int v17 = 1458;
      int v18 = 38;
      goto LABEL_27;
    }
    sub_244CB40C8((uint64_t)v43, &v38, &v33);
    *(_OWORD *)a3 = v33;
    *(void *)(a3 + 16) = v34;
    if (*(_DWORD *)a3) {
      goto LABEL_42;
    }
    sub_244CB55E4((uint64_t)v43, 16, 3, &v33);
    *(_OWORD *)a3 = v33;
    *(void *)(a3 + 16) = v34;
    if (*(_DWORD *)a3) {
      goto LABEL_42;
    }
  }
  __int16 v35 = 0;
  v32[0] = 0;
  sub_244CD8E14((uint64_t)a1, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3
    || (sub_244D9E4AC(a1[36].n128_i64[1], a1[37].n128_u8[0], (uint64_t)&v39, (uint64_t *)&v38, (uint64_t)&a1[29].n128_i64[1], &v35, (unint64_t *)v32, &v40, &v33, (uint64_t)v48, 0), *(_OWORD *)a3 = v33, *(void *)(a3 + 16) = v34, *(_DWORD *)a3))
  {
LABEL_84:
    uint64_t v16 = 0;
    goto LABEL_47;
  }
  if (v13 != v32[0])
  {
    int v24 = 1471;
LABEL_83:
    *(_DWORD *)a3 = 84;
    *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a3 + 16) = v24;
    goto LABEL_84;
  }
  if (a1[37].n128_u64[1] != v40)
  {
    int v24 = 1474;
    goto LABEL_83;
  }
  size_t __n = *((void *)&v39 + 1) + *((void *)&v38 + 1) + 154;
  uint64_t v16 = (char *)sub_244CC4D84(__n);
  if (!v16)
  {
    int v17 = 1481;
    goto LABEL_79;
  }
  sub_2446C1098(&v35, (uint64_t)&a1[22], 65);
  uint64_t v23 = (*(uint64_t (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]) + 8;
  (*(void (**)(unint64_t))(*(void *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
  sub_2446C1098(v32, v23, 65);
  sub_244CD7088((uint64_t)&v39, (uint64_t)&v38, (uint64_t)&v35, (uint64_t)v32, (uint64_t)v16, &__n, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  if (v44 != 3)
  {
    int v17 = 1487;
    int v18 = 36;
    goto LABEL_27;
  }
  if (sub_244CB3BE0((uint64_t)v43) > 0x40)
  {
    int v17 = 1488;
    goto LABEL_76;
  }
  unsigned int v25 = sub_244CB3BE0((uint64_t)v43);
  if (v25 >= 0x41)
  {
    unint64_t v26 = v50;
  }
  else
  {
    unint64_t v26 = v25;
    unint64_t v50 = v25;
  }
  sub_244CB44B4((uint64_t)v43, v49, v26, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CECFEC(v16, __n, (uint64_t)v48, (uint64_t)v49, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB55E4((uint64_t)v43, 16, 4, &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB44B4((uint64_t)v43, &a1[40].n128_i8[4], 0x10uLL, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244D93E48((uint64_t)&v39, (uint64_t)&a1[38].n128_i64[1], &v33);
  *(_OWORD *)a3 = v33;
  *(void *)(a3 + 16) = v34;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB4E58((uint64_t)v45, &v33);
  if (v33 != 33)
  {
    sub_244CE32F8((uint64_t)&a1[2], 5, (uint64_t)v45, (uint64_t)&v33);
    *(_OWORD *)a3 = v33;
    *(void *)(a3 + 16) = v34;
    if (*(_DWORD *)a3) {
      goto LABEL_28;
    }
    int v27 = (uint64_t *)sub_244CD3130(&a1[6].n128_u8[8]);
    sub_24479B4A8(*v27, &v33);
    uint64_t v28 = sub_244D87A80(v33);
    sub_244CD79E8(v28, (uint64_t *)&a1[9]);
    (*(void (**)(void))(*(void *)v33 + 32))(v33);
  }
LABEL_47:
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
LABEL_29:
  sub_244CED784(v49, 64);
  (*(void (**)(uint64_t, void *))(*(void *)v51 + 40))(v51, v52);
  sub_244CED784(v52, 16);
  if (v16) {
    j__free(v16);
  }
  if (v7) {
    j__free(v7);
  }
  if (v46) {
    sub_244CC8A0C(v46);
  }
  uint64_t v19 = sub_244D7DFA0();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "CASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleSigma2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CD88F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    int buf = 136315394;
    buf_4 = "CASESession";
    __int16 buf_12 = 2080;
    buf_14 = "SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&buf, 0x16u);
  }
  *(_OWORD *)a2 = xmmword_26519C6F8;
  *(void *)(a2 + 16) = 1521;
  __int16 v5 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_INFO, "Sending Sigma3", (uint8_t *)&buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  sub_244CD90B4(a1, (uint64_t)sub_244CD9190, (uint64_t)sub_244CD9410, 0);
}

uint64_t sub_244CD8E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  (*((void (**)(long long *__return_ptr))*off_268EBD1B0 + 6))(&v11);
  if (v11)
  {
    int v4 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)int buf = v11;
      uint64_t v15 = v12;
      __int16 v5 = sub_244CB7B34((const char **)buf, 1);
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_2446BD000, v4, OS_LOG_TYPE_ERROR, "The device does not support GetClock_RealTimeMS() API: %s.  Falling back to Last Known Good UTC Time", buf, 0xCu);
    }
    uint64_t result = sub_244CC4E58(1u);
    if (result)
    {
      *(_OWORD *)int buf = v11;
      uint64_t v15 = v12;
      sub_244CB7B34((const char **)buf, 1);
      uint64_t result = sub_244CC4DE0(0xBu, 1);
    }
    uint64_t v7 = *(void *)(a1 + 584);
    if (v7)
    {
      if (*(unsigned char *)(v7 + 2632))
      {
        uint64_t result = (uint64_t)sub_244CDC004((unsigned char *)(v7 + 2632));
        *(_DWORD *)(a1 + 480) = *(_DWORD *)result;
        *(void *)(a1 + 472) = 1;
      }
      else
      {
        LODWORD(v11) = 3;
        *((void *)&v11 + 1) = "src/credentials/LastKnownGoodTime.h";
        LODWORD(v12) = 54;
        uint64_t v10 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Failed to retrieve Last Known Good UTC Time", buf, 2u);
        }
        uint64_t result = sub_244CC4E58(1u);
        if (result) {
          uint64_t result = sub_244CC4DE0(0xBu, 1);
        }
      }
      goto LABEL_17;
    }
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v9 = 2091;
  }
  else
  {
    unint64_t v8 = v13 >> 3;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)int buf = 0;
    uint64_t result = sub_244CC7EE4((unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4, buf);
    if (result)
    {
      *(_DWORD *)(a1 + 480) = *(_DWORD *)buf;
      *(void *)(a1 + 472) = 0;
LABEL_17:
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v9 = 2104;
      goto LABEL_18;
    }
    *(_DWORD *)a2 = 134;
    *(void *)(a2 + 8) = "src/credentials/CHIPCertificateSet.h";
    int v9 = 90;
  }
LABEL_18:
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

void sub_244CD90B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_244CC4D84(0x110uLL);
  if (v8)
  {
    _OWORD *v8 = 0u;
    v8[1] = 0u;
    *((void *)v8 + 4) = a1;
    *((void *)v8 + 5) = a2;
    *((void *)v8 + 6) = a3;
    *((void *)v8 + 7) = a4;
    *((unsigned char *)v8 + 88) = 0;
    *((void *)v8 + 15) = 0;
    *((void *)v8 + 17) = 0;
    *((void *)v8 + 33) = 0;
    *(_OWORD *)((char *)v8 + 152) = 0u;
    *(_OWORD *)((char *)v8 + 168) = 0u;
    *(_OWORD *)((char *)v8 + 184) = 0u;
  }
  operator new();
}

void sub_244CD9190(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    uint64_t v5 = *a1;
    sub_2446C1098(v17, *((void *)a1 + 3), *((void *)a1 + 4));
    (*(void (**)(uint64_t, uint64_t, void *, unsigned __int8 *))(*(void *)v4 + 96))(v4, v5, v17, a1 + 104);
  }
  else
  {
    uint64_t v6 = *((void *)a1 + 1);
    uint64_t v7 = *a1;
    sub_2446C1098(v19, *((void *)a1 + 3), *((void *)a1 + 4));
    sub_244DA2424(v6, v7, v19[0], v19[1], (uint64_t)(a1 + 104), (uint64_t)a2);
  }
  if (*(_DWORD *)a2) {
    return;
  }
  uint64_t v8 = *((void *)a1 + 12) + *((void *)a1 + 9) + *((void *)a1 + 21);
  *((void *)a1 + 6) = v8 + 14;
  sub_244CB352C((void **)a1 + 5, v8 + 30);
  if (!*((void *)a1 + 5))
  {
    *(_DWORD *)a2 = 11;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    int v13 = 1616;
    goto LABEL_20;
  }
  sub_244CB62B8((uint64_t)v17);
  int v16 = -1;
  sub_244CB62E0((uint64_t)v17, *((void *)a1 + 5), *((void *)a1 + 6));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244CB7594(v17, 256, 21, &v16, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_2446C1098(v15, *((void *)a1 + 11), *((void *)a1 + 12));
    sub_244CB6ADC((char *)v17, v15[0], (unint64_t)v15[1], (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      int v9 = (uint64_t *)(a1 + 64);
      uint64_t v10 = *((void *)a1 + 9);
      if (!v10
        || (*a2 = 0,
            a2[1] = 0,
            a2[2] = 0,
            sub_2446C1098(v14, *v9, v10),
            sub_244CB6ADC((char *)v17, v14[0], (unint64_t)v14[1], (uint64_t)a2),
            !*(_DWORD *)a2))
      {
        long long v11 = (void *)*((void *)a1 + 7);
        if (v11)
        {
          j__free(v11);
          *((void *)a1 + 7) = 0;
        }
        uint64_t *v9 = 0;
        *((void *)a1 + 9) = 0;
        uint64_t v12 = (void *)*((void *)a1 + 10);
        if (v12)
        {
          j__free(v12);
          *((void *)a1 + 10) = 0;
        }
        *((void *)a1 + 11) = 0;
        *((void *)a1 + 12) = 0;
        a2[1] = 0;
        a2[2] = 0;
        *a2 = 0;
        sub_244CB6B18((char *)v17, (char *)a1 + 104, *((_DWORD *)a1 + 42), (uint64_t)a2);
        if (!*(_DWORD *)a2)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          sub_244CB7708((uint64_t)v17, v16, (uint64_t)a2);
          if (!*(_DWORD *)a2)
          {
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            sub_244CB6414((uint64_t)v17, (uint64_t)a2);
            if (!*(_DWORD *)a2)
            {
              *((void *)a1 + 6) = v18;
              *(_DWORD *)a2 = 0;
              a2[1] = "src/protocols/secure_channel/CASESession.cpp";
              int v13 = 1646;
LABEL_20:
              *((_DWORD *)a2 + 4) = v13;
            }
          }
        }
      }
    }
  }
}

void sub_244CD9410(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v22 = 0;
  uint64_t v7 = *(void *)(*(void *)(a1 + 576) + 40);
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v25 = v7;
  if (*(void *)(a2 + 16) && *(unsigned char *)(a1 + 728) != 8) {
    sub_244E246B0();
  }
  *(_OWORD *)a4 = *(_OWORD *)a3;
  a4[2] = *(void *)(a3 + 16);
  int v8 = *(_DWORD *)a4;
  if (!*(_DWORD *)a4)
  {
    *(void *)&long long v23 = &v27;
    *((void *)&v23 + 1) = 48;
    *(void *)int buf = a1 + 552;
    *(void *)&uint8_t buf[8] = 16;
    sub_244CD9B64((__n128 *)a1, (uint64_t)buf, (uint64_t)&v23, a4);
    int v8 = *(_DWORD *)a4;
    if (!*(_DWORD *)a4)
    {
      sub_2446C1098(v21, v23, *((uint64_t *)&v23 + 1));
      uint64_t v19 = "Sigma3NCASE_Sigma3NN4chip11CASESessionE";
      uint64_t v20 = 6;
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(*(void *)(a1 + 576) + 40) + 56))(buf);
      *(_OWORD *)a4 = *(_OWORD *)buf;
      a4[2] = v16;
      int v8 = *(_DWORD *)a4;
      if (!*(_DWORD *)a4)
      {
        sub_244CEBEAC(*(char **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)v26, (uint64_t)"NCASE_Sigma3NN4chip11CASESessionE", 0xDuLL, *(char **)(a2 + 40), (uint64_t)buf, (char *)(*(void *)(a2 + 40) + *(void *)(a2 + 48)), 16);
        *(_OWORD *)a4 = *(_OWORD *)buf;
        a4[2] = v16;
        int v8 = *(_DWORD *)a4;
        if (!*(_DWORD *)a4)
        {
          sub_244CC8F5C(*(void *)(a2 + 48) + 26, 0x26u, buf);
          unint64_t v22 = *(_WORD **)buf;
          if (*(void *)buf)
          {
            sub_244CB62B8((uint64_t)buf);
            v17[1] = 0;
            uint64_t v17[2] = 0;
            v17[0] = &unk_26F9536C8;
            char v18 = 0;
            LODWORD(v21[0]) = -1;
            sub_2447945A0((uint64_t)v17, &v22, 0);
            sub_244CB6318((uint64_t)buf, (uint64_t)v17, 0xFFFFFFFF, (uint64_t)&v23);
            sub_244CB7594(buf, 256, 21, v21, (uint64_t)&v23);
            *(_OWORD *)a4 = v23;
            a4[2] = v24;
            int v8 = *(_DWORD *)a4;
            if (*(_DWORD *)a4) {
              goto LABEL_12;
            }
            sub_244CB6B18((char *)buf, *(char **)(a2 + 40), *(_DWORD *)(a2 + 48) + 16, (uint64_t)&v23);
            *(_OWORD *)a4 = v23;
            a4[2] = v24;
            int v8 = *(_DWORD *)a4;
            if (*(_DWORD *)a4) {
              goto LABEL_12;
            }
            sub_244CB7708((uint64_t)buf, v21[0], (uint64_t)&v23);
            *(_OWORD *)a4 = v23;
            a4[2] = v24;
            int v8 = *(_DWORD *)a4;
            if (*(_DWORD *)a4
              || (sub_2446DE160((uint64_t)buf, &v22, &v23), *(_OWORD *)a4 = v23, a4[2] = v24, (int v8 = *(_DWORD *)a4) != 0))
            {
LABEL_12:
              sub_244CA539C(v17);
            }
            else
            {
              sub_244CA539C(v17);
              sub_2446C1098(v14, *((void *)v22 + 1), *((void *)v22 + 3));
              sub_244CEC490(a1 + 224, v14[0], (size_t)v14[1], (uint64_t)buf);
              *(_OWORD *)a4 = *(_OWORD *)buf;
              a4[2] = v16;
              int v8 = *(_DWORD *)a4;
              if (!*(_DWORD *)a4)
              {
                uint64_t v10 = *(void *)sub_244CD3130((unsigned char *)(a1 + 104));
                LOWORD(v23) = 1;
                sub_244D645BC(v10, 0, 50, (uint64_t *)&v22, &v23, (uint64_t)buf);
                *(_OWORD *)a4 = *(_OWORD *)buf;
                a4[2] = v16;
                int v8 = *(_DWORD *)a4;
                if (!*(_DWORD *)a4)
                {
                  long long v11 = sub_244CC8484(0xBu, "SecureChannel");
                  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_DEFAULT, "Sent Sigma3 msg", buf, 2u);
                  }
                  if (sub_244CC4E58(2u)) {
                    sub_244CC4DE0(0xBu, 2);
                  }
                  *(void *)&long long v23 = a1 + 520;
                  *((void *)&v23 + 1) = 32;
                  sub_244CEC580(a1 + 224, (uint64_t *)&v23, (uint64_t)buf);
                  *(_OWORD *)a4 = *(_OWORD *)buf;
                  a4[2] = v16;
                  int v8 = *(_DWORD *)a4;
                  if (!*(_DWORD *)a4) {
                    *(unsigned char *)(a1 + 728) = 3;
                  }
                }
              }
            }
          }
          else
          {
            int v8 = 11;
            *(_DWORD *)a4 = 11;
            a4[1] = "src/protocols/secure_channel/CASESession.cpp";
            *((_DWORD *)a4 + 4) = 1681;
          }
        }
      }
    }
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 704);
  *(_OWORD *)(a1 + 696) = 0u;
  if (v9) {
    sub_2447E7E54(v9);
  }
  if (*(void *)(a2 + 16) && v8)
  {
    sub_244CD6B90(a1 + 32, (unsigned char *)(a1 + 104), 2);
    sub_244CE30D4(a1 + 32);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a4[2];
    sub_244CD2028(a1, (uint64_t)&v12);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v25 + 40))(v25, v26);
  sub_244CED784(v26, 16);
  if (v22) {
    sub_244CC8A0C(v22);
  }
}

void sub_244CD98F8(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = atomic_load(a1 + 4);
  if (v3 && a1[5] && a1[7] & 1 | a1[6])
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (v5 && (uint64_t v5 = std::__shared_weak_count::lock(v5)) != 0) {
      uint64_t v6 = *a1;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = (std::__shared_weak_count *)a1[3];
    a1[2] = v6;
    a1[3] = v5;
    if (v7) {
      sub_2447E7E54(v7);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    sub_244D7749C((uint64_t)&qword_26B0D4380, (uint64_t)sub_244CDC3CC, (uint64_t)a1, a2);
    if (*(_DWORD *)a2)
    {
      int v8 = (std::__shared_weak_count *)a1[3];
      a1[2] = 0;
      a1[3] = 0;
      if (v8)
      {
        sub_2447E7E54(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a2 + 4) = 203;
  }
}

__n128 sub_244CD9A24@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  void (*v6)(__n128 *__return_ptr, __n128 *, char *);
  __n128 *v7;
  unint64_t v8;
  void (*v9)(__n128 *__return_ptr, void *, __n128 *, __n128 *);
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  char v16;

  sub_244D6A434("src/protocols/secure_channel/CASESession.cpp", 186);
  unint64_t v5 = atomic_load(a1[2].n128_u64);
  if (v5
    && (uint64_t v6 = (void (*)(__n128 *__return_ptr, __n128 *, char *))a1[2].n128_u64[1]) != 0
    && a1[3].n128_u64[1] & 1 | a1[3].n128_u64[0])
  {
    uint64_t v16 = 0;
    v6(&v14, a1 + 6, &v16);
    uint64_t v7 = a1 + 4;
    a1[4] = v14;
    a1[5].n128_u64[0] = v15;
    if (!v16)
    {
      int v8 = atomic_load(a1[2].n128_u64);
      int v9 = (void (*)(__n128 *__return_ptr, void *, __n128 *, __n128 *))a1[3].n128_u64[0];
      uint64_t v10 = a1[3].n128_i64[1];
      long long v11 = (void *)(v8 + (v10 >> 1));
      if (v10) {
        int v9 = *(void (**)(__n128 *__return_ptr, void *, __n128 *, __n128 *))(*v11 + v9);
      }
      long long v12 = *v7;
      uint64_t v13 = a1[5].n128_i64[0];
      v9(&v14, v11, a1 + 6, &v12);
      *uint64_t v7 = v14;
      a1[5].n128_u64[0] = v15;
    }
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u64[0] = a1[5].n128_u64[0];
  }
  else
  {
    a2->n128_u32[0] = 3;
    a2->n128_u64[1] = (unint64_t)"src/protocols/secure_channel/CASESession.cpp";
    a2[1].n128_u32[0] = 188;
  }
  return result;
}

void sub_244CD9B64(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  bzero(*(void **)a3, *(void *)(a3 + 8));
  unint64_t v8 = *(void *)(a3 + 8);
  uint64_t v15 = *(void **)a3;
  unint64_t v16 = v8;
  unint64_t v17 = 0;
  if (!v15) {
    unint64_t v16 = 0;
  }
  sub_244CC572C(&v15, *(const void **)a2, *(void *)(a2 + 8));
  uint64_t v13 = &v18;
  size_t v14 = 32;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CEC4E0(a1 + 14, (uint64_t *)&v13, a4);
  if (!*(_DWORD *)a4)
  {
    sub_244CC572C(&v15, v13, v14);
    if (v16 >= v17)
    {
      uint64_t v11 = sub_244CDAEA0((void *)a3, 0, v17);
      int v10 = 0;
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = v12;
      int v9 = 1999;
    }
    else
    {
      int v9 = 1996;
      int v10 = 25;
    }
    *(_DWORD *)a4 = v10;
    a4[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a4 + 4) = v9;
  }
}

void sub_244CD9C70(uint64_t a1@<X0>, int *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)int buf = 136315394;
    char v18 = "CASESession";
    __int16 v19 = 2080;
    uint64_t v20 = "HandleSigma3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a2 = xmmword_26519C710;
  *((void *)a2 + 2) = 1735;
  sub_244CB3988((uint64_t)buf);
  uint64_t v21 = 0;
  sub_244CB3988((uint64_t)v8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 576) + 40);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = v5;
  uint64_t v6 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v9 = 0;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_DEFAULT, "Received Sigma3 msg", v9, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xBu, 2);
  }
  uint64_t v7 = sub_244D7DFA0();
  if (os_signpost_enabled(v7))
  {
    ++dword_268EBEDD8;
    *(_DWORD *)int v9 = 67109120;
    int v10 = dword_268EBEDD8;
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma3", "%u", v9, 8u);
  }
  *(_DWORD *)int v9 = 1;
  uint64_t v11 = "core_dev_case_session_sigma2";
  int v12 = *a2;
  char v13 = 3;
  sub_244D7E78C((uint64_t)v9);
  sub_244CDA890(a1, (uint64_t)sub_244CDA97C, (uint64_t)sub_244CDAA90, 0);
}

void sub_244CDA890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_244CC4D84(0x2B0uLL);
  if (v8)
  {
    _OWORD *v8 = 0u;
    v8[1] = 0u;
    *((void *)v8 + 4) = a1;
    *((void *)v8 + 5) = a2;
    *((void *)v8 + 6) = a3;
    *((void *)v8 + 7) = a4;
    *((unsigned char *)v8 + 88) = 0;
    *((void *)v8 + 12) = 0;
    *((void *)v8 + 69) = 0;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 78) = 0;
    v8[7] = 0u;
    v8[8] = 0u;
    *((void *)v8 + 81) = -1;
    *((_WORD *)v8 + 336) = 0;
    *((unsigned char *)v8 + 674) = 0;
    *((void *)v8 + 85) = 0;
  }
  operator new();
}

void sub_244CDA97C(uint64_t a1@<X0>, void *a2@<X8>)
{
  _DWORD v8[10] = *MEMORY[0x263EF8340];
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  v8[0] = &unk_26F954540;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244D9DD94(a1 + 16, (uint64_t *)(a1 + 32), a1 + 448, a1 + 552, &v7, &v6, (void *)(a1 + 544), (uint64_t)v8, (uint64_t)a2, 0);
  if (!*(_DWORD *)a2)
  {
    if (*(void *)(a1 + 536) == v6)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_244CECFEC(*(char **)a1, *(void *)(a1 + 8), (uint64_t)v8, a1 + 464, a2);
      if (*(_DWORD *)a2) {
        return;
      }
      int v4 = 0;
      int v5 = 1905;
    }
    else
    {
      int v5 = 1894;
      int v4 = 84;
    }
    *(_DWORD *)a2 = v4;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a2 + 4) = v5;
  }
}

void sub_244CDAA90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_26519C728;
  *(void *)(a4 + 16) = 1910;
  if (*(unsigned char *)(a1 + 728) == 9)
  {
    *(_OWORD *)a4 = *(_OWORD *)a3;
    *(void *)(a4 + 16) = *(void *)(a3 + 16);
    int v6 = *(_DWORD *)a4;
    if (!*(_DWORD *)a4)
    {
      *(void *)(a1 + 600) = *(void *)(a2 + 544);
      *(void *)int buf = a1 + 520;
      *(void *)&uint8_t buf[8] = 32;
      sub_244CEC580(a1 + 224, (uint64_t *)buf, a4);
      int v6 = *(_DWORD *)a4;
      if (!*(_DWORD *)a4)
      {
        sub_244D93E48(a2 + 16, a1 + 616, buf);
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(void *)(a4 + 16) = v18;
        int v6 = *(_DWORD *)a4;
        if (!*(_DWORD *)a4)
        {
          uint64_t v8 = *(void *)(a1 + 568);
          if (v8)
          {
            long long v15 = 0uLL;
            uint64_t v16 = 0;
            *(void *)int buf = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
            *(void *)&uint8_t buf[8] = v9;
            (*(void (**)(long long *__return_ptr, uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(&v15, v8, buf, a1 + 644, a1 + 432, a1 + 616);
            if (v15)
            {
              int v10 = sub_244CC8484(0xBu, "SecureChannel");
              if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              {
                *(_OWORD *)int buf = v15;
                uint64_t v18 = v16;
                uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
                *(_DWORD *)int buf = 136315138;
                *(void *)&uint8_t buf[4] = v11;
                _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Unable to save session resumption state: %s", buf, 0xCu);
              }
              if (sub_244CC4E58(1u))
              {
                *(_OWORD *)int buf = v15;
                uint64_t v18 = v16;
                sub_244CB7B34((const char **)buf, 1);
                sub_244CC4DE0(0xBu, 1);
              }
            }
          }
          *(_DWORD *)int buf = 2;
          *(void *)&uint8_t buf[8] = "core_dev_case_session_sigma_finished";
          BYTE4(v18) = 0;
          sub_244D7E78C((uint64_t)buf);
          sub_244CD6B90(a1 + 32, (unsigned char *)(a1 + 104), 0);
          *(unsigned char *)(a1 + 728) = 6;
          sub_244CE2D58(a1 + 32);
          int v6 = 0;
        }
      }
    }
  }
  else
  {
    int v6 = 3;
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a4 + 16) = 1912;
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 720);
  *(_OWORD *)(a1 + 712) = 0u;
  if (v12) {
    sub_2447E7E54(v12);
  }
  if (v6)
  {
    sub_244CD6B90(a1 + 32, (unsigned char *)(a1 + 104), 2);
    sub_244CE30D4(a1 + 32);
    long long v13 = *(_OWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 16);
    sub_244CD2028(a1, (uint64_t)&v13);
  }
}

void sub_244CDAD74(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = atomic_load(a1 + 4);
  if (v3 && a1[5] && a1[7] & 1 | a1[6])
  {
    int v5 = (std::__shared_weak_count *)a1[1];
    if (v5 && (int v5 = std::__shared_weak_count::lock(v5)) != 0) {
      uint64_t v6 = *a1;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = (std::__shared_weak_count *)a1[3];
    a1[2] = v6;
    a1[3] = v5;
    if (v7) {
      sub_2447E7E54(v7);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    sub_244D7749C((uint64_t)&qword_26B0D4380, (uint64_t)sub_244CDC788, (uint64_t)a1, a2);
    if (*(_DWORD *)a2)
    {
      uint64_t v8 = (std::__shared_weak_count *)a1[3];
      a1[2] = 0;
      a1[3] = 0;
      if (v8)
      {
        sub_2447E7E54(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a2 + 4) = 203;
  }
}

uint64_t sub_244CDAEA0(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4) {
    sub_244E24728();
  }
  if (v5 < a3) {
    sub_244E247C8();
  }
  sub_24479476C(&v7, *a1 + a2, a3);
  return v7;
}

void *sub_244CDAEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v13 = v15;
  long long v14 = xmmword_244EAE670;
  memset(v15, 0, sizeof(v15));
  sub_244CC572C(&v13, *(const void **)a2, *(void *)(a2 + 8));
  __n128 result = sub_244CC572C(&v13, *(const void **)a3, *(void *)(a3 + 8));
  if ((unint64_t)v14 >= *((void *)&v14 + 1))
  {
    v12[0] = v15;
    v12[1] = *((void *)&v14 + 1);
    return (void *)(*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 576) + 40)
                                                                                            + 56))(*(void *)(*(void *)(a1 + 576) + 40), a1 + 432, v12, a4, a5 + 8);
  }
  else
  {
    *(_DWORD *)a6 = 25;
    *(void *)(a6 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a6 + 16) = 2015;
  }
  return result;
}

uint64_t sub_244CDB008(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_2446BD000, v2, OS_LOG_TYPE_DEFAULT, "Success status report received. Session was established", buf, 2u);
  }
  if (sub_244CC4E58(2u)) {
    sub_244CC4DE0(0xBu, 2);
  }
  uint64_t v3 = *(void *)(a1 + 568);
  if (v3)
  {
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    *(void *)int buf = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    *(void *)&uint8_t buf[8] = v4;
    (*(void (**)(long long *__return_ptr, uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 32))(&v10, v3, buf, a1 + 644, a1 + 432, a1 + 616);
    if (v10)
    {
      unint64_t v5 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)int buf = v10;
        uint64_t v13 = v11;
        uint64_t v6 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "Unable to save session resumption state: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)int buf = v10;
        uint64_t v13 = v11;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0xBu, 1);
      }
    }
  }
  int v7 = *(unsigned __int8 *)(a1 + 728);
  if (v7 == 3)
  {
    char v8 = 6;
  }
  else
  {
    if (v7 != 5) {
      sub_244E24908();
    }
    char v8 = 7;
  }
  *(unsigned char *)(a1 + 728) = v8;
  return sub_244CE2D58(a1 + 32);
}

uint64_t sub_244CDB224(uint64_t a1)
{
  return sub_244CDB008(a1 - 32);
}

uint64_t sub_244CDB22C@<X0>(uint64_t a1@<X0>, int a2@<W2>, unsigned char *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = xmmword_26519C740;
  *(void *)(a4 + 16) = 2137;
  if (a2 == 1)
  {
    *(_DWORD *)a4 = 201;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v7 = 2145;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v7;
    goto LABEL_10;
  }
  if (a2 != 4)
  {
    if (a2 == 2)
    {
      *(_DWORD *)a4 = 84;
      *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 2141;
    }
    else
    {
      *(_DWORD *)a4 = 172;
      *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v7 = 2157;
    }
    goto LABEL_9;
  }
  *(_DWORD *)a4 = 219;
  *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
  *(_DWORD *)(a4 + 16) = 2149;
  if (*a3)
  {
    uint64_t v8 = *(void *)(a1 + 120);
    uint64_t v9 = sub_244CD3130(a3);
    (*(void (**)(uint64_t, void))(*(void *)v8 + 32))(v8, *(unsigned __int16 *)v9);
  }
LABEL_10:
  *(unsigned char *)(a1 + 728) = 0;
  long long v10 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)int buf = *(_OWORD *)a4;
    *(void *)&uint8_t buf[16] = *(void *)(a4 + 16);
    uint64_t v11 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)int buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v11;
    _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "Received error (protocol code %d) during pairing process: %s", buf, 0x12u);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)int buf = *(_OWORD *)a4;
    *(void *)&uint8_t buf[16] = *(void *)(a4 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(0xBu, 1);
  }
  return result;
}

uint64_t sub_244CDB434@<X0>(uint64_t a1@<X0>, int a2@<W2>, unsigned char *a3@<X3>, uint64_t a4@<X8>)
{
  return sub_244CDB22C(a1 - 32, a2, a3, a4);
}

uint64_t sub_244CDB440@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X3>, uint64_t a4@<X8>)
{
  if (a2)
  {
    int v7 = (unsigned char *)(result + 104);
    if (*(unsigned char *)(result + 104))
    {
      uint64_t result = (uint64_t)sub_244CD3130((unsigned char *)(result + 104));
      if (*(void *)result != a2)
      {
        *(_OWORD *)a4 = xmmword_26519C758;
        *(void *)(a4 + 16) = 2265;
        return result;
      }
    }
    else
    {
      sub_244CD30E0(result + 104, a2);
    }
    uint64_t v9 = (uint64_t *)sub_244CD3130(v7);
    uint64_t result = sub_244D64578(*v9, 30000);
    if (*a3)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v8 = 2275;
    }
    else
    {
      *(_DWORD *)a4 = 47;
      *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      int v8 = 2274;
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    int v8 = 2256;
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

void sub_244CDB528(__n128 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)uint64_t v21 = "CASESession";
    *(_WORD *)&v21[8] = 2080;
    *(void *)&v21[10] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_244CDB440((uint64_t)a1, a2, a4, (uint64_t)a5);
  int v11 = *a3;
  int v12 = *(_DWORD *)a5;
  if (!*(_DWORD *)a5)
  {
    *(_DWORD *)a5 = 42;
    a5[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a5 + 4) = 2319;
    switch(a1[45].n128_u8[8])
    {
      case 0u:
        if (v11 == 48) {
          sub_244CD4630((uint64_t)a1, a4, a5);
        }
        break;
      case 1u:
        if (v11 != 64) {
          goto LABEL_19;
        }
        goto LABEL_21;
      case 2u:
        if (v11 == 64)
        {
          sub_244CDB900((uint64_t)&a1[2], (_WORD **)a4, 0, a5);
          uint64_t v14 = "core_dev_case_session_sigma2";
          goto LABEL_23;
        }
        if (v11 == 50) {
          sub_244CD9C70((uint64_t)a1, (int *)a5);
        }
        return;
      case 3u:
      case 5u:
        if (v11 != 64) {
          break;
        }
        if (a1[45].n128_u8[8] == 3) {
          uint64_t v13 = "core_dev_case_session_sigma3";
        }
        else {
          uint64_t v13 = "core_dev_case_session_sigma2_resume";
        }
        sub_244CDB900((uint64_t)&a1[2], (_WORD **)a4, 1, a5);
        *(_DWORD *)int buf = 1;
        *(void *)&unsigned char v21[4] = v13;
        goto LABEL_24;
      case 4u:
        if (v11 == 64)
        {
LABEL_21:
          sub_244CDB900((uint64_t)&a1[2], (_WORD **)a4, 0, a5);
          uint64_t v14 = "core_dev_case_session_sigma1";
LABEL_23:
          *(_DWORD *)int buf = 1;
          *(void *)&unsigned char v21[4] = v14;
LABEL_24:
          *(_DWORD *)&v21[12] = *(_DWORD *)a5;
          v21[16] = 3;
          sub_244D7E78C((uint64_t)buf);
        }
        else if (v11 == 51)
        {
          sub_244CD7280((uint64_t)a1, a4, a5);
        }
        else
        {
LABEL_19:
          if (v11 == 49) {
            sub_244CD7A40(a1, a4, (uint64_t)a5);
          }
        }
        break;
      default:
        break;
    }
    int v12 = *(_DWORD *)a5;
  }
  if (v12)
  {
    if (v12 == 42)
    {
      long long v15 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = a1[45].n128_u8[8];
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)uint64_t v21 = v11;
        *(_WORD *)&unsigned char v21[4] = 1024;
        *(_DWORD *)&v21[6] = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Received message (type %d) cannot be handled in %d state.", buf, 0xEu);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0xBu, 1);
      }
    }
    sub_244CE30D4((uint64_t)&a1[2]);
    long long v18 = *(_OWORD *)a5;
    uint64_t v19 = a5[2];
    sub_244CD2028((uint64_t)a1, (uint64_t)&v18);
  }
  unint64_t v17 = sub_244D7DFA0();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)uint64_t v21 = "CASESession";
    *(_WORD *)&v21[8] = 2080;
    *(void *)&v21[10] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CDB900(uint64_t a1@<X0>, _WORD **a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  sub_244CBF9C8(&v25);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v24 = *a2;
  *a2 = 0;
  sub_244D63DD8((uint64_t)&v25, (uint64_t *)&v24, (uint64_t)a4);
  if (v24) {
    sub_244CC8A0C(v24);
  }
  uint64_t v24 = 0;
  if (!*(_DWORD *)a4)
  {
    if (*(_DWORD *)((char *)&v25 + 2))
    {
      *(_DWORD *)a4 = 47;
      a4[1] = "src/protocols/secure_channel/PairingSession.h";
      int v8 = 173;
LABEL_6:
      *((_DWORD *)a4 + 4) = v8;
      goto LABEL_22;
    }
    uint64_t v9 = (unsigned __int16)v25;
    if (!(_WORD)v25)
    {
      uint64_t v10 = HIWORD(v25);
      if (!HIWORD(v25) && a3)
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
        *(_DWORD *)a4 = 0;
        a4[1] = "src/protocols/secure_channel/PairingSession.h";
        int v8 = 179;
        goto LABEL_6;
      }
      goto LABEL_20;
    }
    if ((unsigned __int16)v25 == 8)
    {
      uint64_t v10 = HIWORD(v25);
      if (HIWORD(v25) != 4)
      {
LABEL_20:
        v16[0] = 0;
LABEL_21:
        (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 96))(a1, v9, v10, v16);
        goto LABEL_22;
      }
      if (!v26)
      {
        uint64_t v10 = 4;
        goto LABEL_20;
      }
      uint64_t v11 = *((void *)v26 + 3);
      v19[0] = *((void *)v26 + 1);
      v19[1] = v19[0];
      uint64_t v20 = v11;
      int v21 = 0;
      *(void *)((char *)&v22 + 4) = "src/lib/support/BufferReader.h";
      HIDWORD(v22) = 330;
      if (!v19[0]) {
        uint64_t v20 = 0;
      }
      unsigned __int16 v18 = 0;
      sub_244CC54EC((uint64_t)v19, &v18);
      int v12 = v21;
      long long v27 = v22;
      int v28 = v23;
      uint64_t v13 = sub_244CC8484(0xBu, "SecureChannel");
      uint64_t v14 = v13;
      if (!v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 67109120;
          LODWORD(v30) = v18;
          _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_DEFAULT, "Received busy status report with minimum wait time: %u ms", buf, 8u);
        }
        if (sub_244CC4E58(2u)) {
          sub_244CC4DE0(0xBu, 2);
        }
        uint64_t v9 = (unsigned __int16)v25;
        uint64_t v10 = HIWORD(v25);
        v16[0] = 1;
        uint64_t v17 = v18;
        goto LABEL_21;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v30 = v27;
        *(_DWORD *)int buf = v12;
        int v31 = v28;
        long long v15 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)int buf = 136315138;
        *(void *)&long long v30 = v15;
        _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_ERROR, "Failed to read the minimum wait time: %s", buf, 0xCu);
      }
      if (sub_244CC4E58(1u))
      {
        long long v30 = v27;
        *(_DWORD *)int buf = v12;
        int v31 = v28;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0xBu, 1);
      }
      uint64_t v9 = (unsigned __int16)v25;
    }
    uint64_t v10 = HIWORD(v25);
    goto LABEL_20;
  }
LABEL_22:
  if (v26) {
    sub_244CC8A0C(v26);
  }
}

void sub_244CDBC40(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
}

uint64_t sub_244CDBC48(uint64_t a1)
{
  return sub_244CDBC54(2000, a1);
}

uint64_t sub_244CDBC54(int a1, uint64_t a2)
{
  sub_244D6A044((uint64_t)v17);
  uint64_t v4 = sub_244D6A0B8();
  int v15 = HIDWORD(v4);
  int v16 = v4;
  __int16 v14 = v5;
  if (v17[0])
  {
    uint64_t v6 = (unsigned int *)sub_2446DC5A0(v17);
    int v7 = (unsigned __int16 *)(v6 + 2);
    int v8 = v6 + 1;
  }
  else
  {
    int v7 = (unsigned __int16 *)&v14;
    int v8 = (unsigned int *)&v15;
    uint64_t v6 = (unsigned int *)&v16;
  }
  int v9 = sub_244D6A0C8(*(_DWORD *)(a2 + 4), *(_DWORD *)a2, 0, *(unsigned __int16 *)(a2 + 8)) + a1;
  unsigned int v10 = *v8;
  unsigned int v11 = *v6;
  unsigned int v12 = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
  return v9 + sub_244D6A0C8(v10, v11, v12, *v7);
}

uint64_t sub_244CDBD38(uint64_t a1)
{
  return sub_244CDBC54(30000, a1);
}

uint64_t sub_244CDBD44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 696);
  if (v2 && (unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 88)), (v3 & 1) != 0))
  {
    __int16 v5 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "SendSigma3Helper was unable to schedule the AfterWorkCallback", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      sub_244CC4DE0(0xBu, 1);
    }
    sub_244CDBE84(*(void *)(a1 + 696));
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v6 = *(void *)(a1 + 712);
  if (v6)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 88));
    if (v7)
    {
      int v8 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "HandleSigma3Helper was unable to schedule the AfterWorkCallback", v9, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0xBu, 1);
      }
      sub_244CDBEB8(*(void *)(a1 + 712));
      return 1;
    }
  }
  return result;
}

void sub_244CDBE84(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v1 & 1) == 0) {
    sub_244E249A8();
  }

  sub_244CDC5D8(a1);
}

void sub_244CDBEB8(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v1 & 1) == 0) {
    sub_244E249A8();
  }

  sub_244CDC994(a1);
}

uint64_t sub_244CDBEEC@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/CASESession.h";
  *(_DWORD *)(a3 + 16) = 155;
  return result;
}

uint64_t sub_244CDBF10(uint64_t a1)
{
  return *(void *)(a1 + 600);
}

uint64_t sub_244CDBF20(uint64_t a1)
{
  return *(void *)(a1 + 608);
}

uint64_t sub_244CDBF30(uint64_t a1)
{
  return *(void *)(a1 + 616);
}

void sub_244CDBF44(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_244CDBF4C(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_244CDBF58(uint64_t a1)
{
  return *(void *)(a1 + 568);
}

uint64_t sub_244CDBF68(uint64_t a1)
{
  return *(void *)(a1 + 576);
}

uint64_t sub_244CDBF78(uint64_t a1)
{
  return *(void *)(a1 + 584);
}

void sub_244CDBF88(int *a1)
{
  if (!*a1) {
    sub_244E24A4C();
  }
  int v1 = *a1 - 1;
  *a1 = v1;
  if (!v1)
  {
    uint64_t v2 = (uint64_t)(a1 - 7);
    sub_244D64BF8(v2);
  }
}

int *sub_244CDBFD0(int *a1)
{
  int v1 = *a1;
  if (*a1 == -1) {
    sub_244E24B8C();
  }
  if (!v1) {
    sub_244E24AEC();
  }
  *a1 = v1 + 1;
  return a1 - 7;
}

unsigned char *sub_244CDC004(unsigned char *a1)
{
  if (!*a1) {
    sub_244E21FC8();
  }
  return a1 + 4;
}

uint64_t *sub_244CDC028()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268EBD1C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268EBD1C0))
  {
    qword_268EBD1B8 = (uint64_t)&unk_26F953F40;
    __cxa_guard_release(&qword_268EBD1C0);
  }
  return &qword_268EBD1B8;
}

uint64_t sub_244CDC098(uint64_t a1, char *__str, size_t __size)
{
  v11[6] = *MEMORY[0x263EF8340];
  long long v9 = 0uLL;
  char v10 = 0;
  int v7 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = (unsigned int *)(a1 + 20);
  if (v7)
  {
    memset(v11, 0, 24);
    sub_244CBF340(v6, (char *)&v9 + 1, 0x10uLL, (uint64_t)v11);
    if (LODWORD(v11[0]))
    {
      long long v9 = *(_OWORD *)"%(err)";
      char v10 = 0;
    }
  }
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t result = snprintf(__str, __size, "UNDEFINED");
      break;
    case 1:
      sub_244CBE8FC((_DWORD *)a1, (char *)v11, 0x2Eu);
      if (sub_244CBEC68((_DWORD *)a1)) {
        uint64_t result = snprintf(__str, __size, "UDP:%s%s:%d");
      }
      else {
        uint64_t result = snprintf(__str, __size, "UDP:[%s%s]:%d");
      }
      break;
    case 2:
      uint64_t result = snprintf(__str, __size, "BLE");
      break;
    case 3:
      sub_244CBE8FC((_DWORD *)a1, (char *)v11, 0x2Eu);
      if (sub_244CBEC68((_DWORD *)a1)) {
        uint64_t result = snprintf(__str, __size, "TCP:%s%s:%d");
      }
      else {
        uint64_t result = snprintf(__str, __size, "TCP:[%s%s]:%d");
      }
      break;
    case 4:
      uint64_t result = snprintf(__str, __size, "Wi-Fi PAF");
      break;
    default:
      uint64_t result = snprintf(__str, __size, "ERROR");
      break;
  }
  return result;
}

void *sub_244CDC26C(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  if (!a2) {
    sub_244E24CD0();
  }
  return result;
}

void sub_244CDC290(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244CDC2C8(uint64_t a1)
{
  int v1 = *(void **)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = sub_244CDC344(v1);
    j__free(v2);
  }
}

uint64_t sub_244CDC300(uint64_t a1, uint64_t a2)
{
  if (sub_2447E82E4(a2, (uint64_t)&unk_26F953BF8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_244CDC344(void *a1)
{
  sub_244CED784(a1 + 25, 64);
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    j__free(v2);
    a1[22] = 0;
  }
  unsigned __int8 v3 = (void *)a1[19];
  if (v3)
  {
    j__free(v3);
    a1[19] = 0;
  }
  uint64_t v4 = (void *)a1[17];
  if (v4)
  {
    j__free(v4);
    a1[17] = 0;
  }
  __int16 v5 = (void *)a1[15];
  if (v5)
  {
    j__free(v5);
    a1[15] = 0;
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6) {
    sub_2447E7E54(v6);
  }
  int v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void sub_244CDC3CC(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  int v1 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (atomic_load((unint64_t *)(a1 + 32)))
  {
    char v13 = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(a1 + 40))(buf, a1 + 96, &v13);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
    *(void *)(a1 + 80) = v15;
    if (!v13)
    {
      if (atomic_load((unint64_t *)(a1 + 32)))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
        *(void *)(a1 + 16) = v2;
        *(void *)(a1 + 24) = v1;
        long long v11 = 0uLL;
        uint64_t v12 = 0;
        if (qword_26B0D43B0 != -1) {
          dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
        }
        sub_244D7749C((uint64_t)&qword_26B0D4380, (uint64_t)sub_244CDC5D8, a1, &v11);
        if (v11)
        {
          int v8 = sub_244CC8484(0xBu, "SecureChannel");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)int buf = v11;
            uint64_t v15 = v12;
            long long v9 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Failed to Schedule the AfterWorkCallback on foreground thread: %s", buf, 0xCu);
          }
          if (sub_244CC4E58(1u))
          {
            *(_OWORD *)int buf = v11;
            uint64_t v15 = v12;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0xBu, 1);
          }
          *(_OWORD *)(a1 + 64) = v11;
          *(void *)(a1 + 80) = v12;
          char v10 = *(std::__shared_weak_count **)(a1 + 24);
          *(void *)(a1 + 16) = v7;
          *(void *)(a1 + 24) = v6;
          atomic_store(1u, (unsigned __int8 *)(a1 + 88));
          uint64_t v6 = v10;
        }
        int v1 = v6;
      }
    }
  }
  if (v1) {
    sub_2447E7E54(v1);
  }
}

void sub_244CDC5D8(uint64_t a1)
{
  void (*v7)(void *__return_ptr, void *, uint64_t, long long *);
  uint64_t v8;
  void *v9;
  void v10[3];
  long long v11;
  uint64_t v12;

  sub_244D6A434("src/protocols/secure_channel/CASESession.cpp", 282);
  uint64_t v2 = *(void *)(a1 + 16);
  unsigned __int8 v3 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v2)
  {
    uint64_t v4 = v3;
    goto LABEL_6;
  }
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v5);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = 0;
  if (v3) {
LABEL_5:
  }
    sub_2447E7E54(v3);
LABEL_6:
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 32));
  if (v6)
  {
    uint64_t v7 = *(void (**)(void *__return_ptr, void *, uint64_t, long long *))(a1 + 48);
    int v8 = *(void *)(a1 + 56);
    long long v9 = (void *)(v6 + (v8 >> 1));
    if (v8) {
      uint64_t v7 = *(void (**)(void *__return_ptr, void *, uint64_t, long long *))(*v9 + v7);
    }
    long long v11 = *(_OWORD *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 80);
    v7(v10, v9, a1 + 96, &v11);
  }
  if (v4) {
    sub_2447E7E54(v4);
  }
}

void sub_244CDC6CC(uint64_t a1)
{
}

uint64_t sub_244CDC6D4(uint64_t a1, uint64_t a2)
{
  if (sub_2447E82E4(a2, (uint64_t)&unk_26F953C58)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_244CDC718(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_244CED784(a2 + 70, 64);
    unsigned __int8 v3 = (void *)a2[12];
    if (v3)
    {
      j__free(v3);
      a2[12] = 0;
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[3];
    if (v4) {
      sub_2447E7E54(v4);
    }
    __int16 v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    j__free(a2);
  }
}

void sub_244CDC788(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  int v1 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (atomic_load((unint64_t *)(a1 + 32)))
  {
    char v13 = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(a1 + 40))(buf, a1 + 96, &v13);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
    *(void *)(a1 + 80) = v15;
    if (!v13)
    {
      if (atomic_load((unint64_t *)(a1 + 32)))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        unint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
        *(void *)(a1 + 16) = v2;
        *(void *)(a1 + 24) = v1;
        long long v11 = 0uLL;
        uint64_t v12 = 0;
        if (qword_26B0D43B0 != -1) {
          dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
        }
        sub_244D7749C((uint64_t)&qword_26B0D4380, (uint64_t)sub_244CDC994, a1, &v11);
        if (v11)
        {
          int v8 = sub_244CC8484(0xBu, "SecureChannel");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)int buf = v11;
            uint64_t v15 = v12;
            long long v9 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_ERROR, "Failed to Schedule the AfterWorkCallback on foreground thread: %s", buf, 0xCu);
          }
          if (sub_244CC4E58(1u))
          {
            *(_OWORD *)int buf = v11;
            uint64_t v15 = v12;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0xBu, 1);
          }
          *(_OWORD *)(a1 + 64) = v11;
          *(void *)(a1 + 80) = v12;
          char v10 = *(std::__shared_weak_count **)(a1 + 24);
          *(void *)(a1 + 16) = v7;
          *(void *)(a1 + 24) = v6;
          atomic_store(1u, (unsigned __int8 *)(a1 + 88));
          unint64_t v6 = v10;
        }
        int v1 = v6;
      }
    }
  }
  if (v1) {
    sub_2447E7E54(v1);
  }
}

void sub_244CDC994(uint64_t a1)
{
  void (*v7)(void *__return_ptr, void *, uint64_t, long long *);
  uint64_t v8;
  void *v9;
  void v10[3];
  long long v11;
  uint64_t v12;

  sub_244D6A434("src/protocols/secure_channel/CASESession.cpp", 282);
  uint64_t v2 = *(void *)(a1 + 16);
  unsigned __int8 v3 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v2)
  {
    uint64_t v4 = v3;
    goto LABEL_6;
  }
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v5);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = 0;
  if (v3) {
LABEL_5:
  }
    sub_2447E7E54(v3);
LABEL_6:
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 32));
  if (v6)
  {
    uint64_t v7 = *(void (**)(void *__return_ptr, void *, uint64_t, long long *))(a1 + 48);
    int v8 = *(void *)(a1 + 56);
    long long v9 = (void *)(v6 + (v8 >> 1));
    if (v8) {
      uint64_t v7 = *(void (**)(void *__return_ptr, void *, uint64_t, long long *))(*v9 + v7);
    }
    long long v11 = *(_OWORD *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 80);
    v7(v10, v9, a1 + 96, &v11);
  }
  if (v4) {
    sub_2447E7E54(v4);
  }
}

uint64_t sub_244CDCA88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (!*(_DWORD *)a2)
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
    *((_DWORD *)a2 + 4) = 29;
  }
  return result;
}

void *sub_244CDCAF4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)a1 + 72))(a6);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, &v14, a4, a5);
    if (!*(_DWORD *)a6)
    {
      if (v14 == *a2) {
        int v13 = 40;
      }
      else {
        int v13 = 39;
      }
      *(_DWORD *)a6 = 16 * (v14 != *a2);
      a6[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
      *((_DWORD *)a6 + 4) = v13;
    }
  }
  return result;
}

uint64_t sub_244CDCC38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  if (!*(_DWORD *)a2)
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
    *((_DWORD *)a2 + 4) = 46;
  }
  return result;
}

uint64_t sub_244CDCCA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v12 = 8;
  do
  {
    int v13 = (char *)&v30 + v12;
    *(void *)int v13 = 0;
    v13[8] = 0;
    v12 += 16;
  }
  while (v13 + 16 != v33);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v30);
  if (*(_DWORD *)a6) {
    return result;
  }
  if (!v30) {
    goto LABEL_13;
  }
  uint64_t v15 = (unsigned __int8 *)&v32;
  uint64_t v16 = v30;
  do
  {
    if (*((void *)v15 - 1) == *a2 && *v15 == *((unsigned __int8 *)a2 + 8))
    {
      uint64_t v34 = 0;
      int v28 = 0;
      uint64_t v29 = 0;
      (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, unsigned char *, unsigned char *, int *))(*(void *)a1 + 96))(buf, a1, a2, v35, v33, &v28);
      long long v36 = *(_OWORD *)v39;
      int v19 = *(_DWORD *)buf;
      int v37 = *(_DWORD *)&v39[16];
      if (*(_DWORD *)buf)
      {
        uint64_t v20 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          unint64_t v21 = *a2;
          unint64_t v26 = HIDWORD(*a2);
          *(_OWORD *)long long v39 = v36;
          *(_DWORD *)int buf = v19;
          *(_DWORD *)&v39[16] = v37;
          long long v22 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)int buf = 67109634;
          *(_DWORD *)long long v39 = v26;
          *(_WORD *)&void v39[4] = 1024;
          *(_DWORD *)&v39[6] = v21;
          *(_WORD *)&v39[10] = 2080;
          *(void *)&v39[12] = v22;
          _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_ERROR, "LoadState failed; unable to fully delete session resumption record for node %08X%08X: %s",
            buf,
            0x18u);
        }
        if (!sub_244CC4E58(1u)) {
          goto LABEL_27;
        }
      }
      else
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, unsigned char *))(*(void *)a1 + 80))(buf, a1, v35);
        long long v36 = *(_OWORD *)v39;
        int v19 = *(_DWORD *)buf;
        int v37 = *(_DWORD *)&v39[16];
        if (!*(_DWORD *)buf) {
          goto LABEL_27;
        }
        int v23 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          unint64_t v24 = *a2;
          unint64_t v27 = HIDWORD(*a2);
          *(_OWORD *)long long v39 = v36;
          *(_DWORD *)int buf = v19;
          *(_DWORD *)&v39[16] = v37;
          uint64_t v25 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)int buf = 67109634;
          *(_DWORD *)long long v39 = v27;
          *(_WORD *)&void v39[4] = 1024;
          *(_DWORD *)&v39[6] = v24;
          *(_WORD *)&v39[10] = 2080;
          *(void *)&v39[12] = v25;
          _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_ERROR, "DeleteLink failed; unable to fully delete session resumption record for node %08X%08X: %s",
            buf,
            0x18u);
        }
        if (!sub_244CC4E58(1u)) {
          goto LABEL_27;
        }
      }
      *(_OWORD *)long long v39 = v36;
      *(_DWORD *)int buf = v19;
      *(_DWORD *)&v39[16] = v37;
      sub_244CB7B34((const char **)buf, 1);
      sub_244CC4DE0(0xBu, 1);
LABEL_27:
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, a4, a5);
      if (!*(_DWORD *)a6)
      {
        *a6 = 0;
        a6[1] = 0;
        a6[2] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 64))(a1, a3, a2);
        if (!*(_DWORD *)a6)
        {
          *(_DWORD *)a6 = 0;
          a6[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
          *((_DWORD *)a6 + 4) = 89;
        }
      }
      return sub_244CED784(v33, 32);
    }
    v15 += 16;
    --v16;
  }
  while (v16);
  if (v30 == 48)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = sub_244CDD284(a1, &v31, a6);
    if (*(_DWORD *)a6) {
      return result;
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v30);
    if (*(_DWORD *)a6) {
      return result;
    }
  }
LABEL_13:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, a4, a5);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 64))(a1, a3, a2);
    if (!*(_DWORD *)a6)
    {
      uint64_t v17 = v30++;
      unsigned __int16 v18 = &v30 + 2 * v17;
      v18[1] = *a2;
      *((unsigned char *)v18 + 16) = *((unsigned char *)a2 + 8);
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v30);
      if (!*(_DWORD *)a6)
      {
        *(_DWORD *)a6 = 0;
        a6[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
        *((_DWORD *)a6 + 4) = 106;
      }
    }
  }
  return result;
}

uint64_t sub_244CDD284@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = &v38[v6];
    *uint64_t v7 = 0;
    *((unsigned char *)v7 + 8) = 0;
    v6 += 2;
  }
  while (v7 + 2 != (void *)v40);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v38);
  if (!*(_DWORD *)a3)
  {
    uint64_t v41 = 0;
    int v36 = 0;
    uint64_t v37 = 0;
    long long v34 = 0uLL;
    __int16 v35 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *, uint8_t *, unsigned char *, int *))(*(void *)a1 + 96))(&v34, a1, a2, v42, v40, &v36);
    if (v34 != 160)
    {
      if (v34)
      {
        int v13 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = *a2;
          unint64_t v15 = HIDWORD(*a2);
          *(_OWORD *)int buf = v34;
          int v44 = v35;
          uint64_t v16 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)int buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v14;
          *(_WORD *)&buf[14] = 2080;
          int v44 = v16;
          _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Unable to load session resumption state during session deletion for node %08X%08X: %s", buf, 0x18u);
        }
        if (sub_244CC4E58(1u)) {
          goto LABEL_15;
        }
      }
      else
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, uint8_t *))(*(void *)a1 + 80))(buf, a1, v42);
        long long v34 = *(_OWORD *)buf;
        __int16 v35 = v44;
        if (*(_DWORD *)buf && *(_DWORD *)buf != 160)
        {
          long long v9 = sub_244CC8484(0xBu, "SecureChannel");
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            uint64_t v10 = *a2;
            unint64_t v11 = HIDWORD(*a2);
            *(_OWORD *)int buf = v34;
            int v44 = v35;
            uint64_t v12 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)int buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v11;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v10;
            *(_WORD *)&buf[14] = 2080;
            int v44 = v12;
            _os_log_impl(&dword_2446BD000, v9, OS_LOG_TYPE_ERROR, "Unable to delete session resumption link for node %08X%08X: %s", buf, 0x18u);
          }
          if (sub_244CC4E58(1u))
          {
LABEL_15:
            *(_OWORD *)int buf = v34;
            int v44 = v35;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0xBu, 1);
          }
        }
      }
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 104))(buf, a1, a2);
    long long v34 = *(_OWORD *)buf;
    __int16 v35 = v44;
    if (*(_DWORD *)buf && *(_DWORD *)buf != 160)
    {
      uint64_t v17 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *a2;
        unint64_t v19 = HIDWORD(*a2);
        *(_OWORD *)int buf = v34;
        int v44 = v35;
        uint64_t v20 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)int buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v18;
        *(_WORD *)&buf[14] = 2080;
        int v44 = v20;
        _os_log_impl(&dword_2446BD000, v17, OS_LOG_TYPE_ERROR, "Unable to delete session resumption state for node %08X%08X: %s", buf, 0x18u);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)int buf = v34;
        int v44 = v35;
        sub_244CB7B34((const char **)buf, 1);
        sub_244CC4DE0(0xBu, 1);
      }
    }
    unint64_t v21 = v38[0];
    if (!v38[0]) {
      goto LABEL_40;
    }
    char v22 = 0;
    uint64_t v23 = *a2;
    int v24 = *((unsigned __int8 *)a2 + 8);
    uint64_t v25 = &v39;
    unint64_t v26 = 1;
    do
    {
      if (v22)
      {
        *(v25 - 2) = *v25;
        *((unsigned char *)v25 - 8) = *((unsigned char *)v25 + 8);
        char v22 = 1;
        unint64_t v21 = v38[0];
      }
      else if (*(v25 - 2) == v23 && *((unsigned __int8 *)v25 - 8) == v24)
      {
        if (v26 < v21)
        {
          *(v25 - 2) = *v25;
          *((unsigned char *)v25 - 8) = *((unsigned char *)v25 + 8);
          unint64_t v21 = v38[0];
        }
        v38[0] = --v21;
        char v22 = 1;
      }
      else
      {
        char v22 = 0;
      }
      v25 += 2;
    }
    while (v26++ < v21);
    if (v22)
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, void *))(*(void *)a1 + 48))(buf, a1, v38);
      long long v34 = *(_OWORD *)buf;
      __int16 v35 = v44;
      if (!*(_DWORD *)buf) {
        goto LABEL_44;
      }
      int v28 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)int buf = v34;
        int v44 = v35;
        uint64_t v29 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v29;
        _os_log_impl(&dword_2446BD000, v28, OS_LOG_TYPE_ERROR, "Unable to save session resumption index: %s", buf, 0xCu);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_44;
      }
    }
    else
    {
LABEL_40:
      uint64_t v30 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = *a2;
        unint64_t v32 = HIDWORD(*a2);
        *(_OWORD *)int buf = v34;
        int v44 = v35;
        long long v33 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)int buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v32;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v31;
        *(_WORD *)&buf[14] = 2080;
        int v44 = v33;
        _os_log_impl(&dword_2446BD000, v30, OS_LOG_TYPE_ERROR, "Unable to find session resumption state for node in index%08X%08X: %s", buf, 0x18u);
      }
      if (!sub_244CC4E58(1u)) {
        goto LABEL_44;
      }
    }
    *(_OWORD *)int buf = v34;
    int v44 = v35;
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xBu, 1);
LABEL_44:
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
    *((_DWORD *)a3 + 4) = 181;
    return sub_244CED784(v40, 32);
  }
  return result;
}

__n128 sub_244CDD984@<Q0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v42 = *MEMORY[0x263EF8340];
  long long v36 = xmmword_26519C770;
  uint64_t v37 = 186;
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = &v35[v5];
    void *v6 = 0;
    *((unsigned char *)v6 + 8) = 0;
    v5 += 2;
  }
  while (v6 + 2 != (void *)&v36);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v35);
  if (*(_DWORD *)v4) {
    return result;
  }
  uint64_t v8 = v35[0];
  if (!v35[0]) {
    goto LABEL_43;
  }
  uint64_t v29 = v4;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  size_t v11 = 16 * v35[0] - 16;
  do
  {
    long long v33 = xmmword_26519C788;
    uint64_t v34 = 193;
    uint64_t v39 = 0;
    int v31 = 0;
    uint64_t v32 = 0;
    uint64_t v12 = &v35[-2 * v10];
    if (LOBYTE(v12[v9 + 2]) != a2) {
      goto LABEL_31;
    }
    (*(void (**)(long long *__return_ptr, uint64_t, char *, unsigned char *, uint8_t *, int *))(*(void *)a1 + 96))(&v33, a1, (char *)&v35[1] + v9 * 8 - 16 * v10, v40, v38, &v31);
    if (v36) {
      int v13 = &v36;
    }
    else {
      int v13 = &v33;
    }
    long long v14 = *v13;
    uint64_t v37 = *((void *)v13 + 2);
    long long v36 = v14;
    if (v33)
    {
      unint64_t v15 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)int buf = v33;
        *(void *)&uint8_t buf[16] = v34;
        uint64_t v16 = sub_244CB7B34((const char **)buf, 1);
        *(_DWORD *)int buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = a2;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v16;
        _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_ERROR, "Session resumption cache deletion partially failed for fabric index %u, unable to load node state: %s", buf, 0x12u);
      }
      if (sub_244CC4E58(1u)) {
        goto LABEL_30;
      }
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, unsigned char *))(*(void *)a1 + 80))(buf, a1, v40);
      long long v33 = *(_OWORD *)buf;
      uint64_t v34 = *(void *)&buf[16];
      if (v36) {
        uint64_t v17 = &v36;
      }
      else {
        uint64_t v17 = &v33;
      }
      long long v18 = *v17;
      uint64_t v37 = *((void *)v17 + 2);
      long long v36 = v18;
      if (v33)
      {
        unint64_t v19 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)int buf = v33;
          *(void *)&uint8_t buf[16] = v34;
          uint64_t v20 = sub_244CB7B34((const char **)buf, 1);
          *(_DWORD *)int buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = a2;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v20;
          _os_log_impl(&dword_2446BD000, v19, OS_LOG_TYPE_ERROR, "Session resumption cache deletion partially failed for fabric index %u, unable to delete node link: %s", buf, 0x12u);
        }
        if (sub_244CC4E58(1u)) {
          goto LABEL_30;
        }
      }
      else
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(*(void *)a1 + 104))(buf, a1, (char *)&v35[1] + v9 * 8 - 16 * v10);
        long long v33 = *(_OWORD *)buf;
        uint64_t v34 = *(void *)&buf[16];
        if (v36) {
          unint64_t v21 = &v36;
        }
        else {
          unint64_t v21 = &v33;
        }
        long long v22 = *v21;
        uint64_t v37 = *((void *)v21 + 2);
        long long v36 = v22;
        if (v33)
        {
          uint64_t v23 = sub_244CC8484(0xBu, "SecureChannel");
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)int buf = v33;
            *(void *)&uint8_t buf[16] = v34;
            int v24 = sub_244CB7B34((const char **)buf, 1);
            *(_DWORD *)int buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = a2;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = v24;
            _os_log_impl(&dword_2446BD000, v23, OS_LOG_TYPE_ERROR, "Session resumption cache is in an inconsistent state!  Unable to delete node state during attempted deletion of fabric index %u: %s", buf, 0x12u);
          }
          if (sub_244CC4E58(1u))
          {
LABEL_30:
            *(_OWORD *)int buf = v33;
            *(void *)&uint8_t buf[16] = v34;
            sub_244CB7B34((const char **)buf, 1);
            sub_244CC4DE0(0xBu, 1);
          }
        }
        else
        {
          ++v10;
          if (v8 != 1) {
            memmove(&v12[v9 + 1], &v12[v9 + 3], v11);
          }
        }
      }
    }
LABEL_31:
    sub_244CED784(v38, 32);
    v11 -= 16;
    v9 += 2;
    --v8;
  }
  while (v8);
  uint64_t v4 = v29;
  if (v10)
  {
    v35[0] -= v10;
    memset(buf, 0, sizeof(buf));
    (*(void (**)(uint8_t *__return_ptr, uint64_t, void *))(*(void *)a1 + 48))(buf, a1, v35);
    uint64_t v25 = (uint8_t *)&v36;
    if (!v36) {
      uint64_t v25 = buf;
    }
    long long v26 = *(_OWORD *)v25;
    uint64_t v37 = *((void *)v25 + 2);
    long long v36 = v26;
    if (*(_DWORD *)buf)
    {
      unint64_t v27 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)long long v38 = *(_OWORD *)buf;
        *(void *)&v38[16] = *(void *)&buf[16];
        int v28 = sub_244CB7B34((const char **)v38, 1);
        *(_DWORD *)long long v38 = 67109378;
        *(_DWORD *)&v38[4] = a2;
        *(_WORD *)&uint8_t v38[8] = 2080;
        *(void *)&v38[10] = v28;
        _os_log_impl(&dword_2446BD000, v27, OS_LOG_TYPE_ERROR, "Session resumption cache is in an inconsistent state!  Unable to save session resumption index during attempted deletion of fabric index %u: %s", v38, 0x12u);
      }
      if (sub_244CC4E58(1u))
      {
        *(_OWORD *)long long v38 = *(_OWORD *)buf;
        *(void *)&v38[16] = *(void *)&buf[16];
        sub_244CB7B34((const char **)v38, 1);
        sub_244CC4DE0(0xBu, 1);
      }
    }
  }
LABEL_43:
  __n128 result = (__n128)v36;
  *(_OWORD *)uint64_t v4 = v36;
  _OWORD v4[2] = v37;
  return result;
}

void *sub_244CDE034(void *a1)
{
  *a1 = &unk_26F953D10;
  a1[1] = &unk_26F953DA0;
  uint64_t v2 = (uint64_t)(a1 + 2);
  a1[2] = &unk_26F953DE0;
  sub_244CDE0F4((uint64_t)a1);
  sub_244CEC40C(a1 + 212);
  a1[21] = &unk_26F954388;
  sub_244CEE6A8((uint64_t)(a1 + 21));
  sub_244CEC40C(a1 + 51);
  sub_244CD1DE4(v2);
  return a1;
}

void sub_244CDE0F4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_244D7DFA0();
  if (os_signpost_enabled(v2))
  {
    int v5 = 136315394;
    uint64_t v6 = "PASESession";
    __int16 v7 = 2080;
    uint64_t v8 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v5, 0x16u);
  }
  *(unsigned char *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(unsigned char *)(a1 + 164) = 0;
  sub_244CEE6A8(a1 + 168);
  sub_244CEC438((void *)(a1 + 1696));
  *(_DWORD *)(a1 + 1816) = 0;
  *(_WORD *)(a1 + 1820) = 0;
  unsigned __int8 v3 = *(void **)(a1 + 1824);
  if (v3)
  {
    j__free(v3);
    *(void *)(a1 + 1824) = 0;
  }
  *(unsigned char *)(a1 + 1872) = 0;
  sub_244CE3754(a1 + 16);
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    int v5 = 136315394;
    uint64_t v6 = "PASESession";
    __int16 v7 = 2080;
    uint64_t v8 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v5, 0x16u);
  }
}

void *sub_244CDE288(uint64_t a1)
{
  return sub_244CDE034((void *)(a1 - 8));
}

void *sub_244CDE290(uint64_t a1)
{
  return sub_244CDE034((void *)(a1 - 16));
}

void sub_244CDE298(void *a1)
{
  sub_244CDE034(a1);

  JUMPOUT(0x245695FA0);
}

void sub_244CDE2D0(uint64_t a1)
{
  sub_244CDE034((void *)(a1 - 8));

  JUMPOUT(0x245695FA0);
}

void sub_244CDE30C(uint64_t a1)
{
  sub_244CDE034((void *)(a1 - 16));

  JUMPOUT(0x245695FA0);
}

void sub_244CDE348(uint64_t a1)
{
  sub_244CE37B8((void *)(a1 + 16));

  sub_244CDE0F4(a1);
}

void sub_244CDE384(void *a1)
{
  uint64_t v1 = (uint64_t)(a1 - 2);
  sub_244CE37B8(a1);

  sub_244CDE0F4(v1);
}

uint64_t sub_244CDE3BC(uint64_t a1)
{
  *(unsigned char *)(a1 + 1872) = 1;
  return sub_244CE2D58(a1 + 16);
}

void sub_244CDE3CC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    __int16 v18 = 2080;
    unint64_t v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(void *)(a2 + 40))
  {
    int v14 = 115;
LABEL_17:
    int v13 = 47;
    goto LABEL_18;
  }
  if (!a4)
  {
    int v14 = 116;
    goto LABEL_17;
  }
  sub_244CDE0F4(a1);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_244CEC440(a1 + 1696, (uint64_t)a5);
  if (*(_DWORD *)a5) {
    goto LABEL_19;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_244CEC490(a1 + 1696, "CHIP PAKE V1 Commissioning", 0x1AuLL, (uint64_t)a5);
  if (*(_DWORD *)a5) {
    goto LABEL_19;
  }
  *(void *)(a1 + 104) = a4;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  *(void *)int buf = 0;
  uint8_t buf[8] = 0;
  sub_244CE28A4((void *)(a1 + 16), a2, (uint64_t *)buf, (uint64_t)a5);
  if (*(_DWORD *)a5) {
    goto LABEL_19;
  }
  sub_244CD43D8(a1 + 16, (uint64_t)buf);
  if (!buf[0])
  {
    int v14 = 126;
    int v13 = 3;
    goto LABEL_18;
  }
  size_t v11 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_244CD43D8(a1 + 16, (uint64_t)v16);
    int v12 = *(unsigned __int16 *)sub_2446D1880(v16);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_impl(&dword_2446BD000, v11, OS_LOG_TYPE_INFO, "Assigned local session key ID %u", buf, 8u);
  }
  if (sub_244CC4E58(3u))
  {
    sub_244CD43D8(a1 + 16, (uint64_t)buf);
    sub_2446D1880(buf);
    sub_244CC4DE0(0xBu, 3);
  }
  if (a3 >> 27)
  {
    int v14 = 129;
    goto LABEL_17;
  }
  int v13 = 0;
  *(_DWORD *)(a1 + 1652) = a3;
  int v14 = 132;
LABEL_18:
  *(_DWORD *)a5 = v13;
  a5[1] = "src/protocols/secure_channel/PASESession.cpp";
  *((_DWORD *)a5 + 4) = v14;
LABEL_19:
  unint64_t v15 = sub_244D7DFA0();
  if (os_signpost_enabled(v15))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    __int16 v18 = 2080;
    unint64_t v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CDE6C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    int v14 = 136315394;
    unint64_t v15 = "PASESession";
    __int16 v16 = 2080;
    uint64_t v17 = "GeneratePASEVerifier";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v14, 0x16u);
  }
  if (!a4 || (*a6 = 0, a6[1] = 0, a6[2] = 0, sub_244D82B90((char *)a5, a6), !*(_DWORD *)a6)) {
    sub_244CE64D0(a1, a2, a3, *a5, a6);
  }
  int v13 = sub_244D7DFA0();
  if (os_signpost_enabled(v13))
  {
    int v14 = 136315394;
    unint64_t v15 = "PASESession";
    __int16 v16 = 2080;
    uint64_t v17 = "GeneratePASEVerifier";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v14, 0x16u);
  }
}

void sub_244CDE854(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "SetupSpake2p";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  memset(buf, 0, 32);
  uint64_t v6 = buf;
  uint64_t v7 = 32;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_244CEC580(a1 + 1696, (uint64_t *)&v6, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CE4EF8(a1 + 168, (uint64_t)v6, v7, a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/protocols/secure_channel/PASESession.cpp";
      *((_DWORD *)a2 + 4) = 157;
    }
  }
  int v5 = sub_244D7DFA0();
  if (os_signpost_enabled(v5))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "SetupSpake2p";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CDE9FC(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = *(void *)(a5 + 8);
  if (!v9)
  {
    *(_DWORD *)a8 = 47;
    *(void *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v20 = 165;
LABEL_14:
    *(_DWORD *)(a8 + 16) = v20;
    return;
  }
  if (!*(void *)a5)
  {
    *(_DWORD *)a8 = 47;
    *(void *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v20 = 166;
    goto LABEL_14;
  }
  if ((unint64_t)(v9 - 16) >= 0x11)
  {
    *(_DWORD *)a8 = 47;
    *(void *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v20 = 168;
    goto LABEL_14;
  }
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  sub_244CDE3CC(a1, a2, 0, a7, (void *)a8);
  if (*(_DWORD *)a8)
  {
LABEL_25:
    sub_244CDE0F4(a1);
    return;
  }
  *(unsigned char *)(a1 + 24) = 1;
  unint64_t v15 = *(void *)(a5 + 8);
  if (v15 >> 16)
  {
    int v21 = 177;
    int v22 = 47;
LABEL_18:
    *(_DWORD *)a8 = v22;
    *(void *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a8 + 16) = v21;
    goto LABEL_25;
  }
  *(_WORD *)(a1 + 1820) = v15;
  __int16 v16 = *(void **)(a1 + 1824);
  if (v16)
  {
    j__free(v16);
    *(void *)(a1 + 1824) = 0;
    LOWORD(v15) = *(_WORD *)(a1 + 1820);
  }
  uint64_t v17 = sub_244CC4D84((unsigned __int16)v15);
  *(void *)(a1 + 1824) = v17;
  if (!v17)
  {
    int v21 = 187;
    int v22 = 11;
    goto LABEL_18;
  }
  memmove(v17, *(const void **)a5, *(unsigned __int16 *)(a1 + 1820));
  memmove((void *)(a1 + 1552), a3, 0x61uLL);
  *(_DWORD *)(a1 + 1816) = a4;
  *(_WORD *)(a1 + 164) = 8193;
  *(unsigned char *)(a1 + 1872) = 0;
  uint64_t v26 = sub_244D6A0B8();
  int v27 = v18;
  if (*a6) {
    unint64_t v19 = (uint64_t *)sub_2446DC5A0(a6);
  }
  else {
    unint64_t v19 = &v26;
  }
  int v23 = *((_DWORD *)v19 + 2);
  uint64_t v24 = *v19;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(a1 + 116) = v24;
  *(_DWORD *)(a1 + 124) = v23;
  uint64_t v25 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    LOWORD(v26) = 0;
    _os_log_impl(&dword_2446BD000, v25, OS_LOG_TYPE_INFO, "Waiting for PBKDF param request", (uint8_t *)&v26, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  if (*(_DWORD *)a8) {
    goto LABEL_25;
  }
}

void sub_244CDEC24(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v14 = sub_244D7DFA0();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Pair";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a5)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    sub_244CDE3CC(a1, a2, a3, a6, a7);
    if (*(_DWORD *)a7) {
      goto LABEL_11;
    }
    *(unsigned char *)(a1 + 24) = 0;
    sub_244CD30E0(a1 + 88, a5);
    unint64_t v15 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 88));
    sub_24479B4A8(*v15, buf);
    uint64_t v16 = sub_244D87A80(*(uint64_t *)buf);
    *(void *)(v16 + 104) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    *(void *)(v16 + 96) = (*((uint64_t (**)(_UNKNOWN **))*off_268EBD1B0 + 2))(off_268EBD1B0);
    (*(void (**)(void))(**(void **)buf + 32))(*(void *)buf);
    uint64_t v17 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 88));
    sub_244D64578(*v17, 2000);
    *(void *)int buf = sub_244D6A0B8();
    *(_DWORD *)&uint8_t buf[8] = v18;
    unint64_t v19 = *a4 ? sub_2446DC5A0(a4) : buf;
    int v20 = *((_DWORD *)v19 + 2);
    uint64_t v21 = *(void *)v19;
    *(unsigned char *)(a1 + 112) = 1;
    *(void *)(a1 + 116) = v21;
    *(_DWORD *)(a1 + 124) = v20;
    sub_244CDEF40(a1, (uint64_t)buf);
    *(_OWORD *)a7 = *(_OWORD *)buf;
    a7[2] = *(void *)&buf[16];
    if (*(_DWORD *)a7
      || ((*(void (**)(void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104)), *(_DWORD *)a7))
    {
LABEL_11:
      sub_244CDE0F4(a1);
    }
  }
  else
  {
    *(_DWORD *)a7 = 47;
    a7[1] = "src/protocols/secure_channel/PASESession.cpp";
    *((_DWORD *)a7 + 4) = 212;
  }
  int v22 = sub_244D7DFA0();
  if (os_signpost_enabled(v22))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Pair";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CDEF40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)int buf = 136315394;
    unint64_t v19 = "PASESession";
    __int16 v20 = 2080;
    uint64_t v21 = "SendPBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CD43D8(a1 + 16, (uint64_t)buf);
  if (!buf[0])
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v5 = 276;
LABEL_14:
    *(_DWORD *)(a2 + 16) = v5;
    goto LABEL_15;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_244CECD5C((char *)(a1 + 1657), 0x20uLL, a2);
  if (*(_DWORD *)a2) {
    goto LABEL_15;
  }
  sub_244CC8F5C(0x6DuLL, 0x26u, &v17);
  if (!v17)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v5 = 288;
    goto LABEL_14;
  }
  sub_244CB62B8((uint64_t)buf);
  v22[1] = 0;
  uint64_t v22[2] = 0;
  v22[0] = &unk_26F9536C8;
  char v23 = 0;
  sub_2447945A0((uint64_t)v22, &v17, 0);
  sub_244CB6318((uint64_t)buf, (uint64_t)v22, 0xFFFFFFFF, (uint64_t)v24);
  int v16 = -1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_244CB7594(buf, 256, 21, &v16, a2);
  if (!*(_DWORD *)a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_244CB6B18((char *)buf, (char *)(a1 + 1657), 0x20u, a2);
    if (!*(_DWORD *)a2)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CD43D8(a1 + 16, (uint64_t)v24);
      sub_2446D1880(v24);
      sub_244CB6904();
      if (!*(_DWORD *)a2)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        sub_244CB6904();
        if (!*(_DWORD *)a2)
        {
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 0;
          sub_244CB65C8();
          if (!*(_DWORD *)a2)
          {
            if (*(unsigned char *)(a1 + 112))
            {
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = 0;
              sub_244CD44AC((unsigned char *)(a1 + 112));
              sub_244CE318C(5, buf, (void *)a2);
              if (*(_DWORD *)a2) {
                goto LABEL_11;
              }
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = 0;
              sub_244CB7708((uint64_t)buf, v16, a2);
              if (*(_DWORD *)a2) {
                goto LABEL_11;
              }
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = 0;
              sub_2446DE160((uint64_t)buf, &v17, (void *)a2);
              if (*(_DWORD *)a2) {
                goto LABEL_11;
              }
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = 0;
              sub_2446C1098(v15, *((void *)v17 + 1), *((void *)v17 + 3));
              sub_244CEC490(a1 + 1696, v15[0], (size_t)v15[1], a2);
              if (*(_DWORD *)a2) {
                goto LABEL_11;
              }
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = 0;
              uint64_t v7 = *(void *)sub_244CD3130((unsigned char *)(a1 + 88));
              *(_WORD *)uint64_t v24 = 1;
              sub_244D645BC(v7, 0, 32, (uint64_t *)&v17, v24, a2);
              if (*(_DWORD *)a2) {
                goto LABEL_11;
              }
              *(_WORD *)(a1 + 164) = 8449;
              uint64_t v8 = sub_244CD44AC((unsigned char *)(a1 + 112));
              int v9 = *(_DWORD *)v8;
              int v10 = *((_DWORD *)v8 + 1);
              int v11 = *((unsigned __int16 *)v8 + 4);
              int v12 = sub_244CC8484(0xBu, "SecureChannel");
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v24 = 67109632;
                int v25 = v9;
                __int16 v26 = 1024;
                int v27 = v10;
                __int16 v28 = 1024;
                int v29 = v11;
                _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_DEFAULT, "Sent PBKDF param request [II:%ums AI:%ums AT:%ums)", v24, 0x14u);
              }
              if (sub_244CC4E58(2u)) {
                sub_244CC4DE0(0xBu, 2);
              }
              int v13 = 0;
              int v14 = 321;
            }
            else
            {
              int v14 = 300;
              int v13 = 3;
            }
            *(_DWORD *)a2 = v13;
            *(void *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
            *(_DWORD *)(a2 + 16) = v14;
          }
        }
      }
    }
  }
LABEL_11:
  sub_244CA539C(v22);
  if (v17) {
    sub_244CC8A0C(v17);
  }
LABEL_15:
  uint64_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)int buf = 136315394;
    unint64_t v19 = "PASESession";
    __int16 v20 = 2080;
    uint64_t v21 = "SendPBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CDF420(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)int buf = 136315394;
    unint64_t v15 = "PASESession";
    __int16 v16 = 2080;
    uint64_t v17 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 88) || *(void *)sub_244CD3130((unsigned char *)(a1 + 88)) == a2)
    {
      uint64_t v6 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v7 = *sub_244CDF788((unsigned char *)(a1 + 164));
        *(_DWORD *)int buf = 67109120;
        LODWORD(v15) = v7;
        _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "PASESession timed out while waiting for a response from the peer. Expected message type was %u", buf, 8u);
      }
      uint64_t v8 = a1 + 16;
      if (sub_244CC4E58(1u))
      {
        sub_244CDF788((unsigned char *)(a1 + 164));
        sub_244CC4DE0(0xBu, 1);
      }
      int v9 = sub_244D7DFA0();
      if (os_signpost_enabled(v9))
      {
        ++dword_268EBEDDC;
        *(_DWORD *)int buf = 67109120;
        LODWORD(v15) = dword_268EBEDDC;
        _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PASETimeout", "%u", buf, 8u);
      }
      sub_244CE30D4(v8);
      sub_244CDE0F4(a1);
      LODWORD(v12) = 50;
      *((void *)&v12 + 1) = "src/protocols/secure_channel/PASESession.cpp";
      int v13 = 255;
      sub_244CE3128(v8, &v12);
    }
    else
    {
      int v5 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_2446BD000, v5, OS_LOG_TYPE_ERROR, "PASESession::OnResponseTimeout exchange doesn't match", buf, 2u);
      }
      if (sub_244CC4E58(1u)) {
LABEL_20:
      }
        sub_244CC4DE0(0xBu, 1);
    }
  }
  else
  {
    int v10 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_2446BD000, v10, OS_LOG_TYPE_ERROR, "PASESession::OnResponseTimeout was called by null exchange", buf, 2u);
    }
    if (sub_244CC4E58(1u)) {
      goto LABEL_20;
    }
  }
  int v11 = sub_244D7DFA0();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)int buf = 136315394;
    unint64_t v15 = "PASESession";
    __int16 v16 = 2080;
    uint64_t v17 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

unsigned char *sub_244CDF788(unsigned char *a1)
{
  if (!*a1) {
    sub_244E2232C();
  }
  return a1 + 1;
}

void sub_244CDF7AC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_244CDF7B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 1872))
  {
    uint64_t v5 = result;
    uint64_t v8 = *(void *)(*(void *)(result + 80) + 40);
    uint64_t v6 = v8;
    memset(v9, 0, sizeof(v9));
    char v10 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_244CE60A8(result + 168, v6, (uint64_t)v9, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7[0] = 0;
      v7[1] = 0;
      sub_244D8399C(a2, v6, (uint64_t)v9, (uint64_t)v7, 0, *(unsigned __int8 *)(v5 + 24), (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/protocols/secure_channel/PASESession.cpp";
        *((_DWORD *)a3 + 4) = 269;
      }
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 48))(v8, v9);
    return sub_244CED784(v9, 33);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    *((_DWORD *)a3 + 4) = 260;
  }
  return result;
}

uint64_t sub_244CDF910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_244CDF7B4(a1 - 16, a2, a3);
}

void sub_244CDF918(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v24 = "PASESession";
    __int16 v25 = 2080;
    __int16 v26 = "HandlePBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_26519C7A0;
  *(void *)(a3 + 16) = 327;
  sub_244CB3988((uint64_t)buf);
  int v27 = 0;
  int v17 = 0;
  int v18 = 21;
  char v16 = 0;
  int v7 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Received PBKDF param request", v21, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  sub_2446C1098(v15, *(void *)(*a2 + 8), *(void *)(*a2 + 24));
  sub_244CEC490(a1 + 1696, v15[0], (size_t)v15[1], a3);
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_2446DE1E4((uint64_t)buf, a2);
  sub_244CB55E4((uint64_t)buf, v18, 256, v21);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(void *)(a3 + 16) = v22;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB4C90((uint64_t)buf, &v18, (uint64_t)v21);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(void *)(a3 + 16) = v22;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB4E58((uint64_t)buf, v21);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(void *)(a3 + 16) = v22;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  if (*(_DWORD *)((char *)&v26 + 2) != 1)
  {
    int v10 = 348;
LABEL_26:
    int v11 = 36;
    goto LABEL_27;
  }
  sub_244CB44B4((uint64_t)buf, (char *)v21, 0x20uLL, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB4E58((uint64_t)buf, v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  if (*(_DWORD *)((char *)&v26 + 2) != 2)
  {
    int v10 = 352;
    goto LABEL_26;
  }
  sub_244CB3F40((uint64_t)buf, (_WORD *)&v17 + 1, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)unint64_t v19 = 67109120;
    *(_DWORD *)&void v19[4] = HIWORD(v17);
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Peer assigned session ID %d", v19, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  __int16 v9 = HIWORD(v17);
  *(unsigned char *)(a1 + 160) = 1;
  *(_WORD *)(a1 + 162) = v9;
  sub_244CB4E58((uint64_t)buf, v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  if (*(_DWORD *)((char *)&v26 + 2) != 3)
  {
    int v10 = 359;
    goto LABEL_26;
  }
  sub_244CB3F40((uint64_t)buf, &v17, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
  {
LABEL_28:
    sub_244CD6B90(a1 + 16, (unsigned char *)(a1 + 88), 2);
    goto LABEL_29;
  }
  if ((_WORD)v17)
  {
    int v10 = 361;
    int v11 = 56;
LABEL_27:
    *(_DWORD *)a3 = v11;
    *(void *)(a3 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a3 + 16) = v10;
    goto LABEL_28;
  }
  sub_244CB4E58((uint64_t)buf, v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  if (*(_DWORD *)((char *)&v26 + 2) != 4)
  {
    int v10 = 364;
    goto LABEL_26;
  }
  sub_244CB3C0C((uint64_t)buf, &v16, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  sub_244CB4E58((uint64_t)buf, v19);
  if (*(_DWORD *)v19 != 33)
  {
    sub_244CE32F8(a1 + 16, 5, (uint64_t)buf, (uint64_t)v19);
    *(_OWORD *)a3 = *(_OWORD *)v19;
    *(void *)(a3 + 16) = v20;
    if (*(_DWORD *)a3) {
      goto LABEL_28;
    }
    int v13 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 88));
    sub_24479B4A8(*v13, v19);
    uint64_t v14 = sub_244D87A80(*(uint64_t *)v19);
    sub_244CD79E8(v14, (uint64_t *)(a1 + 128));
    (*(void (**)(void))(**(void **)v19 + 32))(*(void *)v19);
  }
  sub_244CDFED8(a1, (char *)v21, 0x20uLL, v16, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(void *)(a3 + 16) = v20;
  if (*(_DWORD *)a3) {
    goto LABEL_28;
  }
  (*(void (**)(void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104));
LABEL_29:
  if (v27) {
    sub_244CC8A0C(v27);
  }
  long long v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v24 = "PASESession";
    __int16 v25 = 2080;
    __int16 v26 = "HandlePBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CDFED8(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v21 = "PASESession";
    __int16 v22 = 2080;
    char v23 = "SendPBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CD43D8(a1 + 16, (uint64_t)buf);
  if (!buf[0])
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v11 = 392;
LABEL_13:
    *(_DWORD *)(a5 + 16) = v11;
    goto LABEL_14;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_244CECD5C((char *)(a1 + 1657), 0x20uLL, a5);
  if (*(_DWORD *)a5) {
    goto LABEL_14;
  }
  sub_244CC8F5C(*(unsigned __int16 *)(a1 + 1820) + 152, 0x26u, &v18);
  if (!v18)
  {
    *(_DWORD *)a5 = 11;
    *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v11 = 405;
    goto LABEL_13;
  }
  sub_244CB62B8((uint64_t)buf);
  v24[1] = 0;
  void v24[2] = 0;
  v24[0] = &unk_26F9536C8;
  char v25 = 0;
  sub_2447945A0((uint64_t)v24, &v18, 0);
  sub_244CB6318((uint64_t)buf, (uint64_t)v24, 0xFFFFFFFF, (uint64_t)v19);
  v19[0] = -1;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  sub_244CB7594(buf, 256, 21, v19, a5);
  if (!*(_DWORD *)a5)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    sub_244CB6ADC((char *)buf, a2, a3, a5);
    if (!*(_DWORD *)a5)
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      sub_244CB6B18((char *)buf, (char *)(a1 + 1657), 0x20u, a5);
      if (!*(_DWORD *)a5)
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        sub_244CD43D8(a1 + 16, (uint64_t)v17);
        sub_2446D1880(v17);
        sub_244CB6904();
        if (!*(_DWORD *)a5)
        {
          if (a4) {
            goto LABEL_19;
          }
          *(_DWORD *)int v17 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0;
          *(void *)a5 = 0;
          sub_244CB7594(buf, 4, 21, v17, a5);
          if (!*(_DWORD *)a5)
          {
            *(void *)a5 = 0;
            *(void *)(a5 + 8) = 0;
            *(void *)(a5 + 16) = 0;
            sub_244CB694C();
            if (!*(_DWORD *)a5)
            {
              *(void *)a5 = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 16) = 0;
              sub_244CB6B18((char *)buf, *(char **)(a1 + 1824), *(unsigned __int16 *)(a1 + 1820), a5);
              if (!*(_DWORD *)a5)
              {
                *(void *)a5 = 0;
                *(void *)(a5 + 8) = 0;
                *(void *)(a5 + 16) = 0;
                sub_244CB7708((uint64_t)buf, *(int *)v17, a5);
                if (!*(_DWORD *)a5)
                {
LABEL_19:
                  if (!*(unsigned char *)(a1 + 112))
                  {
                    *(_DWORD *)a5 = 3;
                    *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
                    int v15 = 426;
LABEL_37:
                    *(_DWORD *)(a5 + 16) = v15;
                    goto LABEL_10;
                  }
                  *(void *)a5 = 0;
                  *(void *)(a5 + 8) = 0;
                  *(void *)(a5 + 16) = 0;
                  sub_244CD44AC((unsigned char *)(a1 + 112));
                  sub_244CE318C(5, buf, (void *)a5);
                  if (!*(_DWORD *)a5)
                  {
                    *(void *)a5 = 0;
                    *(void *)(a5 + 8) = 0;
                    *(void *)(a5 + 16) = 0;
                    sub_244CB7708((uint64_t)buf, v19[0], a5);
                    if (!*(_DWORD *)a5)
                    {
                      *(void *)a5 = 0;
                      *(void *)(a5 + 8) = 0;
                      *(void *)(a5 + 16) = 0;
                      sub_2446DE160((uint64_t)buf, &v18, (void *)a5);
                      if (!*(_DWORD *)a5)
                      {
                        *(void *)a5 = 0;
                        *(void *)(a5 + 8) = 0;
                        *(void *)(a5 + 16) = 0;
                        sub_2446C1098(v16, *((void *)v18 + 1), *((void *)v18 + 3));
                        sub_244CEC490(a1 + 1696, v16[0], (size_t)v16[1], a5);
                        if (!*(_DWORD *)a5)
                        {
                          *(void *)a5 = 0;
                          *(void *)(a5 + 8) = 0;
                          *(void *)(a5 + 16) = 0;
                          sub_244CDE854(a1, (void *)a5);
                          if (!*(_DWORD *)a5)
                          {
                            *(void *)a5 = 0;
                            *(void *)(a5 + 8) = 0;
                            *(void *)(a5 + 16) = 0;
                            uint64_t v13 = *(void *)sub_244CD3130((unsigned char *)(a1 + 88));
                            *(_WORD *)int v17 = 1;
                            sub_244D645BC(v13, 0, 33, (uint64_t *)&v18, v17, a5);
                            if (!*(_DWORD *)a5)
                            {
                              uint64_t v14 = sub_244CC8484(0xBu, "SecureChannel");
                              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)int v17 = 0;
                                _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "Sent PBKDF param response", v17, 2u);
                              }
                              if (sub_244CC4E58(3u)) {
                                sub_244CC4DE0(0xBu, 3);
                              }
                              *(_WORD *)(a1 + 164) = 8705;
                              *(_DWORD *)a5 = 0;
                              *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
                              int v15 = 442;
                              goto LABEL_37;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_10:
  sub_244CA539C(v24);
  if (v18) {
    sub_244CC8A0C(v18);
  }
LABEL_14:
  long long v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v21 = "PASESession";
    __int16 v22 = 2080;
    char v23 = "SendPBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CE0448(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)int buf = 136315394;
    int v31 = "PASESession";
    __int16 v32 = 2080;
    long long v33 = "HandlePBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_26519C7B8;
  *(void *)(a3 + 16) = 448;
  sub_244CB3988((uint64_t)buf);
  uint64_t v34 = 0;
  int v23 = 21;
  unsigned __int16 v22 = 0;
  long long v21 = 0uLL;
  memset(v26, 0, sizeof(v26));
  int v7 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v27) = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Received PBKDF param response", (uint8_t *)&v27, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  sub_2446C1098(v20, *(void *)(*a2 + 8), *(void *)(*a2 + 24));
  sub_244CEC490(a1 + 1696, v20[0], (size_t)v20[1], a3);
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_2446DE1E4((uint64_t)buf, a2);
  sub_244CB55E4((uint64_t)buf, v23, 256, &v27);
  *(_OWORD *)a3 = v27;
  *(void *)(a3 + 16) = v28;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_244CB4C90((uint64_t)buf, &v23, (uint64_t)&v27);
  *(_OWORD *)a3 = v27;
  *(void *)(a3 + 16) = v28;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_244CB4E58((uint64_t)buf, &v27);
  *(_OWORD *)a3 = v27;
  *(void *)(a3 + 16) = v28;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  if (*(_DWORD *)((char *)&v33 + 2) != 1)
  {
    int v11 = 469;
    goto LABEL_25;
  }
  sub_244CB44B4((uint64_t)buf, (char *)&v27, 0x20uLL, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
  {
LABEL_27:
    sub_244CD6B90(a1 + 16, (unsigned char *)(a1 + 88), 2);
    goto LABEL_28;
  }
  if ((void)v27 != *(void *)(a1 + 1657)
    || *((void *)&v27 + 1) != *(void *)(a1 + 1665)
    || v28 != *(void *)(a1 + 1673)
    || v29 != *(void *)(a1 + 1681))
  {
    int v11 = 472;
    int v12 = 56;
LABEL_26:
    *(_DWORD *)a3 = v12;
    *(void *)(a3 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a3 + 16) = v11;
    goto LABEL_27;
  }
  sub_244CB4E58((uint64_t)buf, v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  if (*(_DWORD *)((char *)&v33 + 2) != 2)
  {
    int v11 = 475;
    goto LABEL_25;
  }
  sub_244CB44B4((uint64_t)buf, (char *)&v27, 0x20uLL, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_244CB4E58((uint64_t)buf, v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  if (*(_DWORD *)((char *)&v33 + 2) != 3)
  {
    int v11 = 480;
    goto LABEL_25;
  }
  sub_244CB3F40((uint64_t)buf, &v22, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  uint64_t v14 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v24 = 67109120;
    *(_DWORD *)&uint8_t v24[4] = v22;
    _os_log_impl(&dword_2446BD000, v14, OS_LOG_TYPE_INFO, "Peer assigned session ID %d", v24, 8u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  unsigned __int16 v15 = v22;
  *(unsigned char *)(a1 + 160) = 1;
  *(_WORD *)(a1 + 162) = v15;
  if (!*(unsigned char *)(a1 + 1656))
  {
    sub_244CB4E58((uint64_t)buf, v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(void *)(a3 + 16) = v25;
    if (*(_DWORD *)a3) {
      goto LABEL_27;
    }
    sub_244CB4C90((uint64_t)buf, &v23, (uint64_t)v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(void *)(a3 + 16) = v25;
    if (*(_DWORD *)a3) {
      goto LABEL_27;
    }
    sub_244CB4E58((uint64_t)buf, v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(void *)(a3 + 16) = v25;
    if (*(_DWORD *)a3) {
      goto LABEL_27;
    }
    if (*(_DWORD *)((char *)&v33 + 2) == 1)
    {
      sub_244CB3FB0((uint64_t)buf, (_DWORD *)(a1 + 1816), (uint64_t)v24);
      *(_OWORD *)a3 = *(_OWORD *)v24;
      *(void *)(a3 + 16) = v25;
      if (*(_DWORD *)a3) {
        goto LABEL_27;
      }
      sub_244CB4E58((uint64_t)buf, v24);
      *(_OWORD *)a3 = *(_OWORD *)v24;
      *(void *)(a3 + 16) = v25;
      if (*(_DWORD *)a3) {
        goto LABEL_27;
      }
      if (*(_DWORD *)((char *)&v33 + 2) == 2)
      {
        sub_244CB40C8((uint64_t)buf, &v21, v24);
        *(_OWORD *)a3 = *(_OWORD *)v24;
        *(void *)(a3 + 16) = v25;
        if (*(_DWORD *)a3) {
          goto LABEL_27;
        }
        sub_244CB4D00((uint64_t)buf, v23, (uint64_t)v24);
        *(_OWORD *)a3 = *(_OWORD *)v24;
        *(void *)(a3 + 16) = v25;
        if (*(_DWORD *)a3) {
          goto LABEL_27;
        }
        sub_244CB4E58((uint64_t)buf, v24);
        if (*(_DWORD *)v24 != 33)
        {
          sub_244CE32F8(a1 + 16, 5, (uint64_t)buf, (uint64_t)v24);
          *(_OWORD *)a3 = *(_OWORD *)v24;
          *(void *)(a3 + 16) = v25;
          if (*(_DWORD *)a3) {
            goto LABEL_27;
          }
          int v18 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 88));
          sub_24479B4A8(*v18, v24);
          uint64_t v19 = sub_244D87A80(*(uint64_t *)v24);
          sub_244CD79E8(v19, (uint64_t *)(a1 + 128));
          (*(void (**)(void))(**(void **)v24 + 32))(*(void *)v24);
        }
        goto LABEL_48;
      }
      int v11 = 509;
    }
    else
    {
      int v11 = 505;
    }
LABEL_25:
    int v12 = 36;
    goto LABEL_26;
  }
  sub_244CB4E58((uint64_t)buf, v24);
  if (*(_DWORD *)v24 != 33)
  {
    sub_244CE32F8(a1 + 16, 5, (uint64_t)buf, (uint64_t)v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(void *)(a3 + 16) = v25;
    if (*(_DWORD *)a3) {
      goto LABEL_27;
    }
    char v16 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 88));
    sub_24479B4A8(*v16, v24);
    uint64_t v17 = sub_244D87A80(*(uint64_t *)v24);
    sub_244CD79E8(v17, (uint64_t *)(a1 + 128));
    (*(void (**)(void))(**(void **)v24 + 32))(*(void *)v24);
  }
  sub_2446C1098(&v21, *(void *)(a1 + 1824), *(unsigned __int16 *)(a1 + 1820));
LABEL_48:
  sub_244CDE854(a1, v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_244CE6710(*(unsigned int *)(a1 + 1816), (uint64_t *)&v21, *(_DWORD *)(a1 + 1652), (char *)v26, 0x50u, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_244CE5274((void *)(a1 + 168), 0, 0, 0, 0, (uint64_t)v26, 40, (uint64_t)&v26[2] + 8, v24, 40);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
  sub_244CE0C34(a1, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(void *)(a3 + 16) = v25;
  if (*(_DWORD *)a3) {
    goto LABEL_27;
  }
LABEL_28:
  if (v34) {
    sub_244CC8A0C(v34);
  }
  uint64_t v13 = sub_244D7DFA0();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)int buf = 136315394;
    int v31 = "PASESession";
    __int16 v32 = 2080;
    long long v33 = "HandlePBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CE0C34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_244D7DFA0();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)int buf = 136315394;
    int v18 = "PASESession";
    __int16 v19 = 2080;
    uint64_t v20 = "SendMsg1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CC8F5C(0x47uLL, 0x26u, &v15);
  if (!v15)
  {
    *(_DWORD *)a2 = 11;
    *(void *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a2 + 16) = 548;
    goto LABEL_21;
  }
  sub_244CB62B8((uint64_t)buf);
  v21[1] = 0;
  void v21[2] = 0;
  v21[0] = &unk_26F9536C8;
  char v22 = 0;
  sub_2447945A0((uint64_t)v21, &v15, 0);
  sub_244CB6318((uint64_t)buf, (uint64_t)v21, 0xFFFFFFFF, (uint64_t)v16);
  int v14 = -1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_244CB7594(buf, 256, 21, &v14, a2);
  if (!*(_DWORD *)a2)
  {
    uint64_t v13 = 65;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_244CE53E8((void *)(a1 + 168), (uint64_t)v16, &v13, (void *)a2, v5, v6);
    if (!*(_DWORD *)a2)
    {
      if (v13 != 65)
      {
        int v10 = 562;
        int v9 = 172;
LABEL_18:
        *(_DWORD *)a2 = v9;
        *(void *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
        *(_DWORD *)(a2 + 16) = v10;
        goto LABEL_19;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_244CB6ADC((char *)buf, v16, 0x41uLL, a2);
      if (!*(_DWORD *)a2)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        sub_244CB7708((uint64_t)buf, v14, a2);
        if (!*(_DWORD *)a2)
        {
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 0;
          sub_2446DE160((uint64_t)buf, &v15, (void *)a2);
          if (!*(_DWORD *)a2)
          {
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = 0;
            uint64_t v7 = *(void *)sub_244CD3130((unsigned char *)(a1 + 88));
            *(_WORD *)int v12 = 1;
            sub_244D645BC(v7, 0, 34, (uint64_t *)&v15, v12, a2);
            if (!*(_DWORD *)a2)
            {
              uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
              if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)int v12 = 0;
                _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Sent spake2p msg1", v12, 2u);
              }
              if (sub_244CC4E58(3u)) {
                sub_244CC4DE0(0xBu, 3);
              }
              int v9 = 0;
              *(_WORD *)(a1 + 164) = 8961;
              int v10 = 573;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_19:
  sub_244CA539C(v21);
  if (v15) {
    sub_244CC8A0C(v15);
  }
LABEL_21:
  int v11 = sub_244D7DFA0();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)int buf = 136315394;
    int v18 = "PASESession";
    __int16 v19 = 2080;
    uint64_t v20 = "SendMsg1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CE0FC8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_244D7DFA0();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleMsg1_and_SendMsg2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  unint64_t v35 = 32;
  uint64_t v36 = 65;
  uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Received spake2p msg1", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  int v9 = sub_244D7DFA0();
  if (os_signpost_enabled(v9))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Pake1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_244CB3988((uint64_t)v32);
  uint64_t v34 = 0;
  int v31 = 21;
  uint64_t v30 = 0;
  sub_2446DE1E4((uint64_t)v32, a2);
  sub_244CB55E4((uint64_t)v32, 21, 256, buf);
  v10.n128_u64[0] = *(void *)buf;
  if (*(_DWORD *)buf) {
    goto LABEL_12;
  }
  sub_244CB4C90((uint64_t)v32, &v31, (uint64_t)buf);
  v10.n128_u64[0] = *(void *)buf;
  if (*(_DWORD *)buf) {
    goto LABEL_12;
  }
  sub_244CB4E58((uint64_t)v32, buf);
  v10.n128_u64[0] = *(void *)buf;
  if (*(_DWORD *)buf) {
    goto LABEL_12;
  }
  int v11 = "src/protocols/secure_channel/PASESession.cpp";
  if (v33 != 1)
  {
    LODWORD(v3) = 601;
    uint64_t v16 = 0x2400000024;
    goto LABEL_34;
  }
  unsigned int v14 = sub_244CB3BE0((uint64_t)v32);
  sub_244CB4170((uint64_t)v32, &v30, (uint64_t)buf);
  v10.n128_u64[0] = *(void *)buf;
  if (*(_DWORD *)buf
    || (sub_244CE50F8((void *)(a1 + 168), 0, 0, 0, 0, a1 + 1552, 32, a1 + 1584, buf, 65),
        v10.n128_u64[0] = *(void *)buf,
        *(_DWORD *)buf)
    || (sub_244CE53E8((void *)(a1 + 168), (uint64_t)v41, &v36, buf, v10, v15),
        v10.n128_u64[0] = *(void *)buf,
        *(_DWORD *)buf))
  {
LABEL_12:
    uint64_t v23 = v10.n128_u64[0];
    int v11 = *(const char **)&buf[8];
    uint64_t v3 = *(void *)&buf[16];
    goto LABEL_13;
  }
  if (v36 == 65)
  {
    sub_244CE55C8((void *)(a1 + 168), v30, v14, (uint64_t)v40, (uint64_t *)&v35, buf);
    v10.n128_u64[0] = *(void *)buf;
    if (!*(_DWORD *)buf)
    {
      if (*a2) {
        sub_244CC8A0C((_WORD *)*a2);
      }
      *a2 = 0;
      sub_244CC8F5C(v36 + v35 + 10, 0x26u, &v29);
      if (v29)
      {
        sub_244CB62B8((uint64_t)buf);
        v38[1] = 0;
        void v38[2] = 0;
        v38[0] = &unk_26F9536C8;
        char v39 = 0;
        sub_244CD4464((uint64_t)buf, &v29, 0);
        int v28 = -1;
        sub_244CB7594(buf, 256, 21, &v28, (uint64_t)&v25);
        if (v25)
        {
          uint64_t v23 = v25;
        }
        else
        {
          sub_244CB6ADC(buf, v41, 0x41uLL, (uint64_t)&v25);
          uint64_t v23 = v25;
          if (!v25)
          {
            sub_244CB6ADC(buf, v40, v35, (uint64_t)&v25);
            uint64_t v23 = v25;
            if (!v25)
            {
              sub_244CB7708((uint64_t)buf, v28, (uint64_t)&v25);
              uint64_t v23 = v25;
              if (!v25)
              {
                sub_2446DE160((uint64_t)buf, &v29, &v25);
                uint64_t v23 = v25;
                if (!v25)
                {
                  uint64_t v21 = *(void *)sub_244CD3130((unsigned char *)(a1 + 88));
                  __int16 v24 = 1;
                  sub_244D645BC(v21, 0, 35, (uint64_t *)&v29, &v24, (uint64_t)&v25);
                  HIDWORD(v22) = HIDWORD(v25);
                  int v11 = v26;
                  uint64_t v3 = v27;
                  uint64_t v23 = v25;
                  if (!v25)
                  {
                    int v17 = 0;
                    *(_WORD *)(a1 + 164) = 9217;
                    LODWORD(v22) = 0;
                    uint64_t v23 = v22;
LABEL_43:
                    sub_244CA539C(v38);
                    if (v29) {
                      sub_244CC8A0C(v29);
                    }
                    if (v17 != 10)
                    {
                      int v18 = sub_244CC8484(0xBu, "SecureChannel");
                      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
                      {
                        *(_WORD *)int buf = 0;
                        _os_log_impl(&dword_2446BD000, v18, OS_LOG_TYPE_INFO, "Sent spake2p msg2", buf, 2u);
                      }
                      if (sub_244CC4E58(3u)) {
                        sub_244CC4DE0(0xBu, 3);
                      }
                      __int16 v19 = sub_244D7DFA0();
                      if (os_signpost_enabled(v19))
                      {
                        ++dword_268EBEDE0;
                        *(_DWORD *)int buf = 67109120;
                        *(_DWORD *)&uint8_t buf[4] = dword_268EBEDE0;
                        _os_signpost_emit_with_name_impl(&dword_2446BD000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Pake2", "%u", buf, 8u);
                      }
                    }
                    HIDWORD(v20) = HIDWORD(v23);
                    if (!v23)
                    {
                      LODWORD(v20) = 0;
                      uint64_t v23 = v20;
                      goto LABEL_14;
                    }
LABEL_13:
                    sub_244CD6B90(a1 + 16, (unsigned char *)(a1 + 88), 2);
LABEL_14:
                    *a3 = v23;
                    a3[1] = (uint64_t)v11;
                    a3[2] = v3;
                    goto LABEL_15;
                  }
LABEL_42:
                  int v17 = 10;
                  goto LABEL_43;
                }
              }
            }
          }
        }
        int v11 = v26;
        uint64_t v3 = v27;
        goto LABEL_42;
      }
      LODWORD(v3) = 618;
      uint64_t v16 = 0xB0000000BLL;
LABEL_34:
      uint64_t v23 = v16;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(_DWORD *)a3 = 172;
  a3[1] = (uint64_t)"src/protocols/secure_channel/PASESession.cpp";
  *((_DWORD *)a3 + 4) = 608;
LABEL_15:
  if (v34) {
    sub_244CC8A0C(v34);
  }
  int v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "Pake1";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  uint64_t v13 = sub_244D7DFA0();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleMsg1_and_SendMsg2";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CE1700(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  __n128 v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleMsg2_and_SendMsg3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_26519C7D0;
  a3[2] = 652;
  unint64_t v27 = 32;
  uint64_t v7 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Received spake2p msg2", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  sub_244CB3988((uint64_t)v24);
  uint64_t v26 = 0;
  int v23 = 21;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_2446DE1E4((uint64_t)v24, a2);
  sub_244CB55E4((uint64_t)v24, 21, 256, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  sub_244CB4C90((uint64_t)v24, &v23, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  sub_244CB4E58((uint64_t)v24, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  if (v25 != 1)
  {
    *(_DWORD *)a3 = 36;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    int v14 = 677;
LABEL_36:
    *((_DWORD *)a3 + 4) = v14;
LABEL_37:
    sub_244CD6B90(a1 + 16, (unsigned char *)(a1 + 88), 2);
    goto LABEL_38;
  }
  unsigned int v8 = sub_244CB3BE0((uint64_t)v24);
  sub_244CB4170((uint64_t)v24, &v22, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  sub_244CB4E58((uint64_t)v24, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  if (v25 != 2)
  {
    *(_DWORD *)a3 = 36;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    int v14 = 682;
    goto LABEL_36;
  }
  unsigned int v9 = sub_244CB3BE0((uint64_t)v24);
  sub_244CB4170((uint64_t)v24, &v21, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  sub_244CE55C8((void *)(a1 + 168), v22, v8, (uint64_t)v31, (uint64_t *)&v27, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  sub_244CE5E68(a1 + 168, v21, v9, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(void *)&buf[16];
  if (*(_DWORD *)a3) {
    goto LABEL_37;
  }
  if (*a2) {
    sub_244CC8A0C((_WORD *)*a2);
  }
  *a2 = 0;
  sub_244CC8F5C(v27 + 6, 0x26u, &v20);
  if (!v20)
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    int v14 = 696;
    goto LABEL_36;
  }
  sub_244CB62B8((uint64_t)buf);
  v29[1] = 0;
  v29[2] = 0;
  v29[0] = &unk_26F9536C8;
  char v30 = 0;
  sub_244CD4464((uint64_t)buf, &v20, 0);
  int v19 = -1;
  sub_244CB7594(buf, 256, 21, &v19, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3) {
    goto LABEL_25;
  }
  sub_244CB6ADC((char *)buf, v31, v27, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3) {
    goto LABEL_25;
  }
  sub_244CB7708((uint64_t)buf, v19, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3) {
    goto LABEL_25;
  }
  sub_2446DE160((uint64_t)buf, &v20, &v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3
    || (uint64_t v11 = *(void *)sub_244CD3130((unsigned char *)(a1 + 88)),
        __int16 v16 = 1,
        sub_244D645BC(v11, 0, 36, (uint64_t *)&v20, &v16, (uint64_t)&v17),
        *(_OWORD *)a3 = v17,
        a3[2] = v18,
        (int v10 = *(_DWORD *)a3) != 0))
  {
LABEL_25:
    int v12 = 10;
  }
  else
  {
    int v12 = 0;
    *(_WORD *)(a1 + 164) = 16385;
  }
  sub_244CA539C(v29);
  if (v20) {
    sub_244CC8A0C(v20);
  }
  if (v12 != 10)
  {
    uint64_t v13 = sub_244CC8484(0xBu, "SecureChannel");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_INFO, "Sent spake2p msg3", buf, 2u);
    }
    if (sub_244CC4E58(3u)) {
      sub_244CC4DE0(0xBu, 3);
    }
  }
  if (v10) {
    goto LABEL_37;
  }
LABEL_38:
  if (v26) {
    sub_244CC8A0C(v26);
  }
  __n128 v15 = sub_244D7DFA0();
  if (os_signpost_enabled(v15))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "HandleMsg2_and_SendMsg3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CE1CFC(unsigned char *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  __n128 v6 = sub_244D7DFA0();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v18 = "PASESession";
    __int16 v19 = 2080;
    uint64_t v20 = "HandleMsg3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_26519C7E8;
  a3[2] = 727;
  uint64_t v7 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_2446BD000, v7, OS_LOG_TYPE_INFO, "Received spake2p msg3", buf, 2u);
  }
  if (sub_244CC4E58(3u)) {
    sub_244CC4DE0(0xBu, 3);
  }
  unsigned int v8 = sub_244D7DFA0();
  if (os_signpost_enabled(v8))
  {
    ++dword_268EBEDE4;
    *(_DWORD *)int buf = 67109120;
    LODWORD(v18) = dword_268EBEDE4;
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Pake3", "%u", buf, 8u);
  }
  a1[164] = 0;
  sub_244CB3988((uint64_t)buf);
  uint64_t v21 = 0;
  int v16 = 21;
  uint64_t v15 = 0;
  sub_2446DE1E4((uint64_t)buf, a2);
  sub_244CB55E4((uint64_t)buf, 21, 256, a3);
  if (*(_DWORD *)a3) {
    goto LABEL_19;
  }
  sub_244CB4C90((uint64_t)buf, &v16, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3) {
    goto LABEL_19;
  }
  sub_244CB4E58((uint64_t)buf, &v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3) {
    goto LABEL_19;
  }
  if (*(_DWORD *)((char *)&v20 + 2) != 1)
  {
    int v10 = 745;
    int v11 = 36;
LABEL_18:
    *(_DWORD *)a3 = v11;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    *((_DWORD *)a3 + 4) = v10;
    goto LABEL_19;
  }
  int v9 = sub_244CB3BE0((uint64_t)buf);
  sub_244CB4170((uint64_t)buf, &v15, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3) {
    goto LABEL_19;
  }
  if (v9 != 32)
  {
    int v10 = 749;
    int v11 = 24;
    goto LABEL_18;
  }
  sub_244CE5E68((uint64_t)(a1 + 168), v15, 32, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (!*(_DWORD *)a3)
  {
    sub_244CD6B90((uint64_t)(a1 + 16), a1 + 88, 0);
    a1[1872] = 1;
    sub_244CE2D58((uint64_t)(a1 + 16));
    goto LABEL_20;
  }
LABEL_19:
  sub_244CD6B90((uint64_t)(a1 + 16), a1 + 88, 2);
LABEL_20:
  if (v21) {
    sub_244CC8A0C(v21);
  }
  int v12 = sub_244D7DFA0();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v18 = "PASESession";
    __int16 v19 = 2080;
    uint64_t v20 = "HandleMsg3";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_244CE209C(uint64_t a1)
{
  *(unsigned char *)(a1 + 1872) = 1;
  return sub_244CE2D58(a1 + 16);
}

uint64_t sub_244CE20AC(uint64_t a1)
{
  *(unsigned char *)(a1 + 1856) = 1;
  return sub_244CE2D58(a1);
}

uint64_t sub_244CE20B8@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 == 2) {
    int v4 = 56;
  }
  else {
    int v4 = 172;
  }
  if (a1 == 2) {
    int v5 = 778;
  }
  else {
    int v5 = 782;
  }
  *(_OWORD *)a2 = xmmword_26519C800;
  *(_DWORD *)a2 = v4;
  *(void *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
  *(void *)(a2 + 16) = 774;
  *(_DWORD *)(a2 + 16) = v5;
  __n128 v6 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)int buf = *(_OWORD *)a2;
    *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
    uint64_t v7 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)int buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a1;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v7;
    _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, "Received error (protocol code %d) during PASE process: %s", buf, 0x12u);
  }
  uint64_t result = sub_244CC4E58(1u);
  if (result)
  {
    *(_OWORD *)int buf = *(_OWORD *)a2;
    *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
    sub_244CB7B34((const char **)buf, 1);
    return sub_244CC4DE0(0xBu, 1);
  }
  return result;
}

uint64_t sub_244CE2218@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  return sub_244CE20B8(a1, a2);
}

uint64_t sub_244CE2220@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned char *)(result + 88);
    if (*(unsigned char *)(result + 88))
    {
      uint64_t result = (uint64_t)sub_244CD3130((unsigned char *)(result + 88));
      if (*(void *)result != a2)
      {
        *(_OWORD *)a5 = xmmword_26519C818;
        *(void *)(a5 + 16) = 802;
        return result;
      }
    }
    else
    {
      sub_244CD30E0(result + 88, a2);
    }
    int v12 = (uint64_t *)sub_244CD3130(v10);
    sub_24479B4A8(*v12, &v22);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
    (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    if (v13 != 1)
    {
      uint64_t v20 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_2446BD000, v20, OS_LOG_TYPE_ERROR, "PASESession received PBKDFParamRequest over encrypted session.  Ignoring.", v21, 2u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(0xBu, 1);
      }
      *(_DWORD *)a5 = 3;
      *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
      int v11 = 813;
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t *)sub_244CD3130(v10);
    uint64_t result = sub_244D64578(*v14, 30000);
    if (*a4)
    {
      int v16 = *(unsigned __int8 *)(v9 + 164);
      uint64_t v15 = (unsigned char *)(v9 + 164);
      if (v16)
      {
        uint64_t result = (uint64_t)sub_244CDF788(v15);
        int v17 = *((unsigned __int16 *)a3 + 2);
        int v18 = *((unsigned __int16 *)a3 + 3);
        int v19 = *a3;
        if (!*((_WORD *)a3 + 2) && !*((_WORD *)a3 + 3) && v19 == *(unsigned __int8 *)result)
        {
LABEL_24:
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
          int v11 = 823;
          goto LABEL_26;
        }
      }
      else
      {
        int v17 = *((unsigned __int16 *)a3 + 2);
        int v18 = *((unsigned __int16 *)a3 + 3);
        int v19 = *a3;
      }
      if (v17 || v18 || v19 != 64)
      {
        *(_DWORD *)a5 = 42;
        *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
        int v11 = 821;
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v11 = 818;
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    int v11 = 793;
  }
LABEL_26:
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_244CE2480@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/PASESession.cpp";
  *(_DWORD *)(a3 + 16) = 830;
  return result;
}

void sub_244CE24A4(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_244D7DFA0();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_244CE2220((uint64_t)a1, a2, a3, a4, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    switch(*a3)
    {
      case ' ':
        sub_244CDF918((uint64_t)a1, a4, (uint64_t)a5);
        goto LABEL_16;
      case '!':
        sub_244CE0448((uint64_t)a1, a4, (uint64_t)a5);
        goto LABEL_16;
      case '""':
        sub_244CE0FC8((uint64_t)a1, a4, a5);
        goto LABEL_16;
      case '#':
        sub_244CE1700((uint64_t)a1, a4, a5);
        goto LABEL_16;
      case '$':
        sub_244CE1CFC(a1, a4, a5);
        goto LABEL_16;
      default:
        if (*a3 != 64)
        {
          *(_DWORD *)a5 = 42;
          a5[1] = (uint64_t)"src/protocols/secure_channel/PASESession.cpp";
          *((_DWORD *)a5 + 4) = 877;
          break;
        }
        if (a1[164]) {
          BOOL v11 = *sub_244CDF788(a1 + 164) == 64;
        }
        else {
          BOOL v11 = 0;
        }
        sub_244CDB900((uint64_t)(a1 + 16), (_WORD **)a4, v11, a5);
LABEL_16:
        if (*(_DWORD *)a5) {
          break;
        }
        goto LABEL_24;
    }
  }
  uint64_t v12 = (uint64_t)(a1 + 16);
  sub_244CE30D4((uint64_t)(a1 + 16));
  sub_244CDE0F4((uint64_t)a1);
  int v13 = sub_244CC8484(0xBu, "SecureChannel");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)int buf = *(_OWORD *)a5;
    *(void *)&uint8_t buf[16] = a5[2];
    uint64_t v14 = sub_244CB7B34((const char **)buf, 1);
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_2446BD000, v13, OS_LOG_TYPE_ERROR, "Failed during PASE session setup: %s", buf, 0xCu);
  }
  if (sub_244CC4E58(1u))
  {
    *(_OWORD *)int buf = *(_OWORD *)a5;
    *(void *)&uint8_t buf[16] = a5[2];
    sub_244CB7B34((const char **)buf, 1);
    sub_244CC4DE0(0xBu, 1);
  }
  uint64_t v15 = sub_244D7DFA0();
  if (os_signpost_enabled(v15))
  {
    ++dword_268EBEDE8;
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_268EBEDE8;
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PASEFail", "%u", buf, 8u);
  }
  long long v17 = *(_OWORD *)a5;
  uint64_t v18 = a5[2];
  sub_244CE3128(v12, &v17);
LABEL_24:
  int v16 = sub_244D7DFA0();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "PASESession";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_2446BD000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_244CE2880(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

unint64_t sub_244CE2888()
{
  return 0xFFFFFFFB00000000;
}

uint64_t sub_244CE2898()
{
  return 0;
}

uint64_t sub_244CE28A4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v8 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  uint64_t result = sub_244D8A38C(a2, v8, a3, v13);
  if (v13[0])
  {
    uint64_t v10 = (uint64_t *)sub_24479DC08(v13);
    uint64_t result = sub_244D88258(a1 + 2, v10);
    if (result)
    {
      int v11 = 0;
      a1[8] = a2;
      int v12 = 38;
    }
    else
    {
      int v12 = 36;
      int v11 = 172;
    }
  }
  else
  {
    int v12 = 35;
    int v11 = 11;
  }
  *(_DWORD *)a4 = v11;
  *(void *)(a4 + 8) = "src/protocols/secure_channel/PairingSession.cpp";
  *(_DWORD *)(a4 + 16) = v12;
  if (v13[0]) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
  }
  return result;
}

uint64_t sub_244CE29A4@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  __n128 v6 = (uint64_t *)sub_2446F7170((unsigned char *)a1 + 40);
  uint64_t v7 = sub_244D879D8(*v6);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, v7 + 176);
  if (!*(_DWORD *)a3)
  {
    int v9 = sub_244CE2D30((uint64_t)a1);
    long long v10 = *a2;
    *(_DWORD *)(v7 + 112) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(v7 + 96) = v10;
    *(_DWORD *)(v7 + 116) = *((_DWORD *)a2 + 5);
    *(void *)(v7 + 120) = *((void *)a2 + 3);
    *(_DWORD *)(v7 + 264) = 2;
    *(void *)(v7 + 272) = 0;
    *(void *)(v7 + 280) = 0;
    *(void *)int buf = v7 + 280;
    LODWORD(v22) = 0;
    sub_244CE389C(buf, 0x20uLL);
    *(void *)int buf = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    uint64_t v22 = v11;
    v20[0] = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    v20[1] = v12;
    uint64_t v13 = (*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1);
    sub_244D851F4(v7, (uint64_t)buf, (uint64_t)v20, v13, v14, v9, a1 + 14);
    uint64_t v15 = sub_244CC8484(1u, "Inet");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      unint64_t v16 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1) >> 32;
      int v17 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
      int v18 = *(unsigned __int16 *)(v7 + 92);
      *(_DWORD *)int buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v16;
      LOWORD(v22) = 1024;
      *(_DWORD *)((char *)&v22 + 2) = v17;
      HIWORD(v22) = 1024;
      int v23 = v19;
      __int16 v24 = 1024;
      int v25 = v18;
      __int16 v26 = 1024;
      int v27 = v9;
      _os_log_impl(&dword_2446BD000, v15, OS_LOG_TYPE_INFO, "New secure session activated for device <%08X%08X, %d>, LSID:%d PSID:%d!", buf, 0x20u);
    }
    uint64_t result = sub_244CC4E58(3u);
    if (result)
    {
      (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
      uint64_t result = sub_244CC4DE0(1u, 3);
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/PairingSession.cpp";
    *((_DWORD *)a3 + 4) = 58;
  }
  return result;
}

uint64_t sub_244CE2D30(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 144);
  uint64_t v1 = (unsigned char *)(a1 + 144);
  if (!v2) {
    sub_244E24E18();
  }
  return *(unsigned __int16 *)sub_2446D1880(v1);
}

uint64_t sub_244CE2D58(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v2 = (unsigned char *)(a1 + 72);
  uint64_t v3 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 72));
  sub_24479B4A8(*v3, &v27);
  uint64_t v4 = sub_244D87A80(v27);
  long long v23 = *(_OWORD *)(v4 + 64);
  int v5 = *(_DWORD *)(v4 + 84);
  int v24 = *(_DWORD *)(v4 + 80);
  int v25 = v5;
  uint64_t v26 = *(void *)(v4 + 88);
  (*(void (**)(void))(*(void *)v27 + 32))(v27);
  char v6 = v24;
  if (v24 == 3)
  {
    uint64_t v7 = (uint64_t *)sub_244CD3130(v2);
    sub_24479B4A8(*v7, &v27);
    uint64_t v8 = *(void *)(sub_244D87A80(v27) + 32);
    (*(void (**)(void))(*(void *)v27 + 32))(v27);
    int v9 = (uint64_t *)sub_2446F7170((unsigned char *)(a1 + 40));
    *(void *)(sub_244D879D8(*v9) + 32) = v8;
  }
  sub_244CE30D4(a1);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_244CE29A4((uint64_t *)a1, &v23, &v21);
  if (v21)
  {
    uint64_t result = *(void *)(a1 + 88);
    if (result)
    {
      *(void *)(a1 + 88) = 0;
      long long v27 = v21;
      uint64_t v28 = v22;
      return (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)result + 8))(result, &v27, 1);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 40)) {
      sub_244E24EBC();
    }
    LOWORD(v27) = -32744;
    BYTE2(v28) = v6;
    uint64_t v11 = (uint64_t *)sub_2446F7170((unsigned char *)(a1 + 40));
    BYTE1(v28) = *(unsigned char *)(sub_244D879D8(*v11) + 57);
    uint64_t v12 = (uint64_t *)sub_2446F7170((unsigned char *)(a1 + 40));
    WORD2(v28) = *(_WORD *)(sub_244D879D8(*v12) + 92);
    uint64_t v13 = sub_2446F7170((unsigned char *)(a1 + 40));
    *((void *)&v27 + 1) = (*(uint64_t (**)(void))(**(void **)v13 + 48))(*(void *)v13);
    int v14 = sub_2446F7170((unsigned char *)(a1 + 40));
    (*(void (**)(void))(**(void **)v14 + 48))(*(void *)v14);
    LOBYTE(v28) = v15;
    if (qword_26B0D43B0 != -1) {
      dispatch_once_f(&qword_26B0D43B0, &byte_26B0D4370, (dispatch_function_t)sub_2446D7DB8);
    }
    sub_244D77CD8((uint64_t)&byte_26B0D4370, &v27, (uint64_t)v19);
    if (*(_DWORD *)v19)
    {
      unint64_t v16 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned __int8 v19 = 0;
        _os_log_impl(&dword_2446BD000, v16, OS_LOG_TYPE_ERROR, "Failed to post Secure Session established event", v19, 2u);
      }
      if (sub_244CC4E58(1u)) {
        sub_244CC4DE0(0xBu, 1);
      }
    }
    uint64_t v17 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    sub_24479DD24(a1 + 16, (uint64_t)v19);
    int v18 = sub_2446F7170(v19);
    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v17 + 24))(v17, v18);
    if (v19[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 32))(v20);
    }
  }
  return result;
}

void sub_244CE30D4(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 72);
  if (*(unsigned char *)(a1 + 72))
  {
    *(void *)(*(void *)sub_244CD3130((unsigned char *)(a1 + 72)) + 40) = 0;
    if (*v1) {
      sub_244CDBF88((int *)(*(void *)(a1 + 80) + 28));
    }
    unsigned char *v1 = 0;
  }
}

uint64_t sub_244CE3128(uint64_t a1, long long *a2)
{
  uint64_t result = *(void *)(a1 + 88);
  if (result)
  {
    *(void *)(a1 + 88) = 0;
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
    return (*(uint64_t (**)(uint64_t, long long *))(*(void *)result + 8))(result, &v4);
  }
  return result;
}

void sub_244CE318C(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  int v5 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB7594(a2, a1, 21, &v5, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB694C();
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB694C();
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB6904();
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_244CB6904();
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_244CB6904();
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_244CB694C();
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_244CB6904();
                if (!*(_DWORD *)a3) {
                  sub_244CB7708((uint64_t)a2, v5, (uint64_t)a3);
                }
              }
            }
          }
        }
      }
    }
  }
}

double sub_244CE32F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  double result = 1.95365892e24;
  long long v19 = xmmword_26519C834;
  int v20 = 0;
  if (*(void *)(a3 + 16) == a2)
  {
    int v18 = 21;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    sub_244CB4C90(a3, &v18, a4);
    if (!*(_DWORD *)a4)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      sub_244CB4E58(a3, (void *)a4);
      if (!*(_DWORD *)a4)
      {
        uint64_t v8 = sub_244CC8484(0xBu, "SecureChannel");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_INFO, "Found MRP parameters in the message", (uint8_t *)&v14, 2u);
        }
        if (sub_244CC4E58(3u)) {
          sub_244CC4DE0(0xBu, 3);
        }
        uint64_t v9 = *(unsigned int *)(a3 + 16);
        if (v9 == 1)
        {
          int v17 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3FB0(a3, &v17, a4);
          if (*(_DWORD *)a4) {
            return result;
          }
          *(_DWORD *)(a1 + 112) = v17;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
          if (v14) {
            goto LABEL_35;
          }
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if (v9 == 2)
        {
          int v17 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3FB0(a3, &v17, a4);
          if (*(_DWORD *)a4) {
            return result;
          }
          *(_DWORD *)(a1 + 116) = v17;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
          if (v14) {
            goto LABEL_35;
          }
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if (v9 == 3)
        {
          LOWORD(v17) = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3F40(a3, &v17, a4);
          if (*(_DWORD *)a4) {
            return result;
          }
          *(_WORD *)(a1 + 120) = v17;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
          if (v14) {
            goto LABEL_35;
          }
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if (v9 == 4)
        {
          LOWORD(v17) = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3F40(a3, &v17, a4);
          if (*(_DWORD *)a4) {
            return result;
          }
          __int16 v11 = v17;
          *(unsigned char *)(a1 + 124) = 1;
          *(_WORD *)(a1 + 126) = v11;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
          if (v14) {
            goto LABEL_35;
          }
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if (v9 == 5)
        {
          LOWORD(v17) = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3F40(a3, &v17, a4);
          if (*(_DWORD *)a4) {
            return result;
          }
          __int16 v12 = v17;
          *(unsigned char *)(a1 + 128) = 1;
          *(_WORD *)(a1 + 130) = v12;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
          if (v14) {
            goto LABEL_35;
          }
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if (v9 == 6)
        {
          int v17 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3FB0(a3, &v17, a4);
          if (*(_DWORD *)a4) {
            return result;
          }
          int v13 = v17;
          *(unsigned char *)(a1 + 132) = 1;
          *(_DWORD *)(a1 + 136) = v13;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
          if (v14) {
            goto LABEL_35;
          }
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if (v9 != 7)
        {
          int v10 = 0;
LABEL_40:
          *(_DWORD *)a4 = v10;
          double result = *(double *)&v19;
          *(_OWORD *)(a4 + 4) = v19;
          *(_DWORD *)(a4 + 20) = v20;
          return result;
        }
        LOWORD(v17) = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        sub_244CB3F40(a3, &v17, a4);
        if (!*(_DWORD *)a4)
        {
          *(_WORD *)(a1 + 140) = v17;
          sub_244CB4E58(a3, &v14);
          int v10 = v14;
          long long v19 = v15;
          int v20 = v16;
LABEL_35:
          if (v10 == 33)
          {
            sub_244CB4D00(a3, v18, a4);
            return result;
          }
          goto LABEL_40;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/protocols/secure_channel/PairingSession.cpp";
    *(_DWORD *)(a4 + 16) = 155;
  }
  return result;
}

BOOL sub_244CE3718(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v1 = (unsigned char *)(a1 + 40);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)sub_2446F7170(v1);
  return *(unsigned char *)(sub_244D879D8(*v3) + 56) == 1;
}

void *sub_244CE3754(uint64_t a1)
{
  int v2 = (unsigned char *)(a1 + 72);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = (uint64_t *)sub_244CD3130((unsigned char *)(a1 + 72));
    sub_244D64BA8(*v3);
    if (*v2) {
      sub_244CDBF88((int *)(*(void *)(a1 + 80) + 28));
    }
    unsigned char *v2 = 0;
  }
  double result = sub_244D87ED0((void *)(a1 + 16));
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 64) = 0;
  return result;
}

void *sub_244CE37B8(void *result)
{
  uint64_t v1 = result;
  if (*((unsigned char *)result + 8))
  {
    uint64_t v2 = result[8];
    if (v2) {
      return (*(void *(**)(void *__return_ptr))(**(void **)(v2 + 24) + 80))(v3);
    }
  }
  else
  {
    double result = (void *)result[11];
    if (result)
    {
      v1[11] = 0;
      LODWORD(v3[0]) = 2;
      v3[1] = "src/protocols/secure_channel/PairingSession.cpp";
      int v4 = 293;
      return (void *)(*(uint64_t (**)(void *, void *, uint64_t))(*result + 8))(result, v3, 1);
    }
  }
  return result;
}

void sub_244CE387C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 172;
  *(void *)(a1 + 8) = "src/protocols/secure_channel/PairingSession.h";
  *(_DWORD *)(a1 + 16) = 139;
}

void sub_244CE389C(_DWORD *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = a1[2];
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    int v5 = (void *)(*(void *)a1 + 8);
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v8 = *(void *)a1;
    *(void *)a1 += 8 * v7;
    *(void *)(v8 + 8 * v7) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_244CE3954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_244CC8484(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v5) = 0;
    _os_log_impl(&dword_2446BD000, v3, OS_LOG_TYPE_ERROR, "ASYNC CASE Session establishment failed", (uint8_t *)&v5, 2u);
  }
  if (sub_244CC4E58(1u)) {
    sub_244CC4DE0(1u, 1);
  }
  uint64_t result = *(void *)(a2 + 88);
  if (result)
  {
    *(void *)(a2 + 88) = 0;
    int v5 = 2;
    unint64_t v6 = "src/protocols/secure_channel/PairingSession.cpp";
    int v7 = 309;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)result + 8))(result, &v5, 1);
  }
  return result;
}

uint64_t sub_244CE3A38(uint64_t a1, int a2, int a3)
{
  unint64_t v3 = (0x1000F001F0001uLL >> (a3 - 16)) & 1;
  if ((a3 - 16) > 0x30) {
    LODWORD(v3) = 0;
  }
  if (a2) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t sub_244CE3A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244CA2E90("f/%x/s/%08X%08X", a2, *(unsigned __int8 *)(a1 + 8), HIDWORD(*(void *)a1), *(void *)a1);
}

uint64_t sub_244CE3AA0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  v4[sub_244CC4F68(a1, 16, v4)] = 0;
  return sub_244CA2E90("g/s/%s", a2, v4);
}

void sub_244CE3B1C(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v12);
  sub_244CB62E0((uint64_t)v12, (uint64_t)v16, 0x3C6uLL);
  int v11 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB7594(v12, 256, 22, &v11, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (!*a2)
    {
LABEL_10:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB7708((uint64_t)v12, v11, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        return;
      }
      unsigned __int16 v8 = v13;
      if (v13 >= 0x10000)
      {
        *(_DWORD *)a3 = 25;
        a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
        int v10 = 72;
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        uint64_t v9 = *(void *)(a1 + 8);
        v14[0] = *(_OWORD *)"g/sri";
        v14[1] = unk_244EAEB30;
        char v15 = 0;
        (*(void (**)(uint64_t, _OWORD *, unsigned char *, void))(*(void *)v9 + 24))(v9, v14, v16, v8);
        if (*(_DWORD *)a3) {
          return;
        }
        *(_DWORD *)a3 = 0;
        a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
        int v10 = 77;
      }
      *((_DWORD *)a3 + 4) = v10;
      return;
    }
    unint64_t v6 = 0;
    int v7 = a2 + 2;
    while (1)
    {
      LODWORD(v14[0]) = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_244CB7594(v12, 256, 21, v14, (uint64_t)a3);
      if (*(_DWORD *)a3) {
        break;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB68B8();
      if (*(_DWORD *)a3) {
        break;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB68CC();
      if (*(_DWORD *)a3) {
        break;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB7708((uint64_t)v12, v14[0], (uint64_t)a3);
      if (*(_DWORD *)a3) {
        break;
      }
      ++v6;
      v7 += 2;
      if (v6 >= *a2) {
        goto LABEL_10;
      }
    }
  }
}

double sub_244CE3D44@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned __int16 v16 = 966;
  uint64_t v5 = *(void *)(a1 + 8);
  v19[0] = *(_OWORD *)"g/sri";
  v19[1] = unk_244EAEB30;
  char v20 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v5 + 16))(v14);
  if (*(_DWORD *)v14)
  {
    *a2 = 0;
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
    int v7 = 88;
LABEL_3:
    *(_DWORD *)(a3 + 16) = v7;
  }
  else
  {
    sub_244CB3988((uint64_t)v19);
    sub_244CB39B8((uint64_t)v19, (uint64_t)v21, v16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_244CB55E4((uint64_t)v19, 22, 256, (void *)a3);
    if (!*(_DWORD *)a3)
    {
      int v13 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      sub_244CB4C90((uint64_t)v19, &v13, a3);
      if (!*(_DWORD *)a3)
      {
        uint64_t v8 = 0;
        for (uint64_t i = a2 + 2; ; i += 16)
        {
          sub_244CB55E4((uint64_t)v19, 21, 256, v14);
          double result = *(double *)&v14[4];
          long long v17 = *(_OWORD *)&v14[4];
          int v18 = v15;
          if (*(_DWORD *)v14) {
            break;
          }
          if (v8 == 48)
          {
            *(_DWORD *)a3 = 11;
            *(void *)(a3 + 8) = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
            int v7 = 104;
            goto LABEL_3;
          }
          int v12 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(void *)a3 = 0;
          sub_244CB4C90((uint64_t)v19, &v12, a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          char v11 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(void *)a3 = 0;
          sub_244CB54B4((uint64_t)v19, 1, (void *)a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CB3E8C((uint64_t)v19, &v11, a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          *(void *)int v14 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(void *)a3 = 0;
          sub_244CB54B4((uint64_t)v19, 2, (void *)a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CB3EFC((uint64_t)v19, v14, a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          char v10 = v11;
          *((void *)i - 1) = *(void *)v14;
          *uint64_t i = v10;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          *(void *)a3 = 0;
          sub_244CB4D00((uint64_t)v19, v12, a3);
          if (*(_DWORD *)a3) {
            return result;
          }
          ++v8;
        }
        if (*(_DWORD *)v14 == 33)
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          sub_244CB4D00((uint64_t)v19, v13, a3);
          if (!*(_DWORD *)a3)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            double result = sub_244CB4DC8((uint64_t)v19, a3);
            if (!*(_DWORD *)a3)
            {
              *a2 = v8;
              *(_DWORD *)a3 = 0;
              *(void *)(a3 + 8) = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
              int v7 = 133;
              goto LABEL_3;
            }
          }
        }
        else
        {
          *(_DWORD *)a3 = *(_DWORD *)v14;
          double result = *(double *)&v17;
          *(_OWORD *)(a3 + 4) = v17;
          *(_DWORD *)(a3 + 20) = v18;
        }
      }
    }
  }
  return result;
}

void sub_244CE4054(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v9);
  sub_244CB62E0((uint64_t)v9, (uint64_t)v12, 0x13uLL);
  int v8 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CB7594(v9, 256, 21, &v8, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CB68B8();
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_244CB68CC();
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_244CB7708((uint64_t)v9, v8, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          unsigned __int16 v6 = v10;
          if (v10 >= 0x10000) {
            sub_244E250AC();
          }
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          uint64_t v7 = *(void *)(a1 + 8);
          v13[sub_244CC4F68(a2, 16, v13)] = 0;
          sub_244CA2E90("g/s/%s", (uint64_t)v11, v13);
          (*(void (**)(uint64_t, unsigned char *, unsigned char *, void))(*(void *)v7 + 24))(v7, v11, v12, v6);
          if (!*(_DWORD *)a3)
          {
            *(_DWORD *)a3 = 0;
            a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
            *((_DWORD *)a3 + 4) = 153;
          }
        }
      }
    }
  }
}

void sub_244CE4210(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int16 v11 = 19;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  v13[sub_244CC4F68(a2, 16, v13)] = 0;
  sub_244CA2E90("g/s/%s", (uint64_t)v12, v13);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int16 *))(*(void *)v6 + 16))(v6, v12, v13, &v11);
  if (!*(_DWORD *)a4)
  {
    sub_244CB3988((uint64_t)v12);
    sub_244CB39B8((uint64_t)v12, (uint64_t)v13, v11);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_244CB55E4((uint64_t)v12, 21, 256, a4);
    if (!*(_DWORD *)a4)
    {
      int v10 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      sub_244CB4C90((uint64_t)v12, &v10, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        char v9 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        sub_244CB54B4((uint64_t)v12, 1, a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          sub_244CB3E8C((uint64_t)v12, &v9, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            uint64_t v8 = 0;
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            sub_244CB54B4((uint64_t)v12, 2, a4);
            if (!*(_DWORD *)a4)
            {
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
              sub_244CB3EFC((uint64_t)v12, &v8, (uint64_t)a4);
              if (!*(_DWORD *)a4)
              {
                *a4 = 0;
                a4[1] = 0;
                a4[2] = 0;
                sub_244CB4D00((uint64_t)v12, v10, (uint64_t)a4);
                if (!*(_DWORD *)a4)
                {
                  *a4 = 0;
                  a4[1] = 0;
                  a4[2] = 0;
                  sub_244CB4DC8((uint64_t)v12, (uint64_t)a4);
                  if (!*(_DWORD *)a4)
                  {
                    char v7 = v9;
                    *(void *)a3 = v8;
                    *(unsigned char *)(a3 + 8) = v7;
                    *(_DWORD *)a4 = 0;
                    a4[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
                    *((_DWORD *)a4 + 4) = 183;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_244CE443C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v7[sub_244CC4F68(a2, 16, v7)] = 0;
  sub_244CA2E90("g/s/%s", (uint64_t)v6, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v4 + 32))(v4, v6);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
    *((_DWORD *)a3 + 4) = 189;
  }
  return result;
}

uint64_t sub_244CE4520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  sub_244CB62B8((uint64_t)v17);
  sub_244CB62E0((uint64_t)v17, (uint64_t)v22, 0x4AuLL);
  int v16 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  uint64_t result = (uint64_t)sub_244CB7594(v17, 256, 21, &v16, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = (uint64_t)sub_244CB6ADC((char *)v17, a3, 0x10uLL, (uint64_t)a6);
    if (!*(_DWORD *)a6)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      sub_2446C1098(v15, a4, *(void *)(a4 + 32));
      uint64_t result = (uint64_t)sub_244CB6ADC((char *)v17, v15[0], (unint64_t)v15[1], (uint64_t)a6);
      if (!*(_DWORD *)a6)
      {
        uint64_t v20 = *a5;
        int v21 = *((_DWORD *)a5 + 2);
        a6[1] = 0;
        a6[2] = 0;
        *a6 = 0;
        uint64_t result = (uint64_t)sub_244CB6ADC((char *)v17, (char *)&v20, 0xCuLL, (uint64_t)a6);
        if (!*(_DWORD *)a6)
        {
          *a6 = 0;
          a6[1] = 0;
          a6[2] = 0;
          uint64_t result = sub_244CB7708((uint64_t)v17, v16, (uint64_t)a6);
          if (!*(_DWORD *)a6)
          {
            unsigned __int16 v13 = v18;
            if (v18 >= 0x10000) {
              sub_244E25164();
            }
            *a6 = 0;
            a6[1] = 0;
            a6[2] = 0;
            uint64_t v14 = *(void *)(a1 + 8);
            sub_244CA2E90("f/%x/s/%08X%08X", (uint64_t)v19, *(unsigned __int8 *)(a2 + 8), HIDWORD(*(void *)a2), *(void *)a2);
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, void))(*(void *)v14 + 24))(v14, v19, v22, v13);
            if (!*(_DWORD *)a6)
            {
              *(_DWORD *)a6 = 0;
              a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
              *((_DWORD *)a6 + 4) = 217;
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_244CE4730@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned __int16 v20 = 74;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  sub_244CA2E90("f/%x/s/%08X%08X", (uint64_t)v21, *(unsigned __int8 *)(a2 + 8), HIDWORD(*(void *)a2), *(void *)a2);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int16 *))(*(void *)v10 + 16))(v10, v21, v22, &v20);
  if (!*(_DWORD *)a6)
  {
    sub_244CB3988((uint64_t)v21);
    sub_244CB39B8((uint64_t)v21, (uint64_t)v22, v20);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_244CB55E4((uint64_t)v21, 21, 256, a6);
    if (!*(_DWORD *)a6)
    {
      int v19 = 0;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      sub_244CB4C90((uint64_t)v21, &v19, (uint64_t)a6);
      if (!*(_DWORD *)a6)
      {
        long long v18 = 0uLL;
        a6[1] = 0;
        a6[2] = 0;
        *a6 = 0;
        sub_244CB54B4((uint64_t)v21, 3, a6);
        if (!*(_DWORD *)a6)
        {
          *a6 = 0;
          a6[1] = 0;
          a6[2] = 0;
          double result = sub_244CB40C8((uint64_t)v21, &v18, a6);
          if (!*(_DWORD *)a6)
          {
            if (*((void *)&v18 + 1) != 16)
            {
              *(_DWORD *)a6 = 16;
              a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
              int v13 = 238;
              goto LABEL_12;
            }
            *a3 = *(_OWORD *)v18;
            long long __src = 0uLL;
            a6[1] = 0;
            a6[2] = 0;
            *a6 = 0;
            sub_244CB54B4((uint64_t)v21, 4, a6);
            if (!*(_DWORD *)a6)
            {
              *a6 = 0;
              a6[1] = 0;
              a6[2] = 0;
              double result = sub_244CB40C8((uint64_t)v21, &__src, a6);
              if (!*(_DWORD *)a6)
              {
                uint64_t v12 = *((void *)&__src + 1);
                if (*((void *)&__src + 1) >= 0x21uLL)
                {
                  *(_DWORD *)a6 = 25;
                  a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
                  int v13 = 244;
LABEL_12:
                  *((_DWORD *)a6 + 4) = v13;
                  return result;
                }
                memcpy(a4, (const void *)__src, *((size_t *)&__src + 1));
                a4[4] = v12;
                long long v16 = 0uLL;
                a6[1] = 0;
                a6[2] = 0;
                *a6 = 0;
                sub_244CB54B4((uint64_t)v21, 5, a6);
                if (!*(_DWORD *)a6)
                {
                  *a6 = 0;
                  a6[1] = 0;
                  a6[2] = 0;
                  double result = sub_244CB40C8((uint64_t)v21, &v16, a6);
                  if (!*(_DWORD *)a6)
                  {
                    if (*((void *)&v16 + 1) != 12)
                    {
                      int v13 = 252;
                      int v15 = 35;
                      goto LABEL_21;
                    }
                    int v14 = *(_DWORD *)(v16 + 8);
                    *(void *)a5 = *(void *)v16;
                    *(_DWORD *)(a5 + 8) = v14;
                    a6[1] = 0;
                    a6[2] = 0;
                    *a6 = 0;
                    sub_244CB4D00((uint64_t)v21, v19, (uint64_t)a6);
                    if (!*(_DWORD *)a6)
                    {
                      *a6 = 0;
                      a6[1] = 0;
                      a6[2] = 0;
                      double result = sub_244CB4DC8((uint64_t)v21, (uint64_t)a6);
                      if (!*(_DWORD *)a6)
                      {
                        int v15 = 0;
                        int v13 = 259;
LABEL_21:
                        *(_DWORD *)a6 = v15;
                        a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
                        goto LABEL_12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_244CE4A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  sub_244CA2E90("f/%x/s/%08X%08X", (uint64_t)v6, *(unsigned __int8 *)(a2 + 8), HIDWORD(*(void *)a2), *(void *)a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v4 + 32))(v4, v6);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
    *((_DWORD *)a3 + 4) = 265;
  }
  return result;
}

void sub_244CE4B0C()
{
}

int *sub_244CE4B20@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244D663E0(a2, 0, 0x40u, a1 + 8, a3);
}

void sub_244CE4B34(uint64_t a1@<X1>, uint64_t a2@<X2>, _WORD **a3@<X3>, void *a4@<X8>)
{
  if (*(_WORD *)(a2 + 4)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(unsigned __int16 *)(a2 + 6) == 0;
  }
  if (v5 && *(unsigned char *)a2 == 64)
  {
    sub_24479B4A8(a1, &v14);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14) == 2)
    {
      sub_244CBF9C8(&v12);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      unsigned __int16 v11 = *a3;
      *a3 = 0;
      sub_244D63DD8((uint64_t)&v12, (uint64_t *)&v11, (uint64_t)a4);
      if (v11) {
        sub_244CC8A0C(v11);
      }
      unsigned __int16 v11 = 0;
      if (!*(_DWORD *)a4)
      {
        int v7 = 60;
        if (!(_WORD)v12 && HIWORD(v12) == 3)
        {
          uint64_t v8 = sub_244CC8484(5u, "ExchangeManager");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v10 = 0;
            _os_log_impl(&dword_2446BD000, v8, OS_LOG_TYPE_DEFAULT, "Received CloseSession status message, closing session", v10, 2u);
          }
          if (sub_244CC4E58(2u)) {
            sub_244CC4DE0(5u, 2);
          }
          char v9 = (void *)sub_244D879D8(v14);
          sub_244D8588C(v9);
          int v7 = 56;
        }
        *(_DWORD *)a4 = 0;
        a4[1] = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
        *((_DWORD *)a4 + 4) = v7;
      }
      if (v13) {
        sub_244CC8A0C(v13);
      }
    }
    else
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
      *((_DWORD *)a4 + 4) = 46;
    }
    (*(void (**)(uint64_t))(*(void *)v14 + 32))(v14);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
    *((_DWORD *)a4 + 4) = 38;
  }
}

uint64_t sub_244CE4D18@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
  *(_DWORD *)(a3 + 16) = 72;
  return result;
}

uint64_t sub_244CE4D38@<X0>(uint64_t result@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result - 8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
  *(_DWORD *)(a3 + 16) = 72;
  return result;
}

void sub_244CE4D5C()
{
}

void sub_244CE4D70()
{
}

void *sub_244CE4D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)a1 + 184))(a4);
  if (!*(_DWORD *)a4)
  {
    if (!a2
      || (*a4 = 0,
          a4[1] = 0,
          a4[2] = 0,
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 184))(a1, a2, a3),
          !*(_DWORD *)a4))
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a4 + 4) = 261;
    }
  }
  return result;
}

double sub_244CE4E94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  *(void *)a1 = &unk_26F9540F0;
  *(unsigned char *)(a1 + 113) = 0;
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = a3;
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + 208) = a1 + 144;
  *(void *)(a1 + 216) = a1 + 144 + (a4 >> 1);
  *(void *)(a1 + 224) = a1 + 176;
  *(void *)(a1 + 232) = a1 + 176 + (a4 >> 1);
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  return result;
}

void *sub_244CE4EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 113)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    double result = (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, void))(*(void *)a1 + 104))(a1, &unk_244EAEB7D, 65, *(void *)(a1 + 8));
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      double result = (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, void))(*(void *)a1 + 104))(a1, &unk_244EAEBBE, 65, *(void *)(a1 + 16));
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        double result = sub_244CE4D88(a1, a2, a3, a4);
        if (!*(_DWORD *)a4)
        {
          *(unsigned char *)(a1 + 113) = 1;
          *(_DWORD *)a4 = 0;
          a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
          *((_DWORD *)a4 + 4) = 304;
        }
      }
    }
  }
  return result;
}

void *sub_244CE5074@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double result = sub_244CE4D88(a1, (uint64_t)&unk_244EAEB7D, 65, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    double result = sub_244CE4D88(a1, (uint64_t)&unk_244EAEBBE, 65, a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a2 + 4) = 312;
    }
  }
  return result;
}

void *sub_244CE50F8@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  if (*((unsigned char *)result + 113) != 1)
  {
    int v18 = 319;
    int v17 = 172;
    goto LABEL_9;
  }
  uint64_t v16 = (uint64_t)result;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  double result = sub_244CE4D88((uint64_t)result, a4, a5, a9);
  if (!*(_DWORD *)a9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    double result = sub_244CE4D88(v16, a2, a3, a9);
    if (!*(_DWORD *)a9)
    {
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      double result = sub_244CE5074(v16, a9);
      if (!*(_DWORD *)a9)
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 72))(v16, a6, a7, *(void *)(v16 + 72));
        if (!*(_DWORD *)a9)
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 104))(v16, a8, a10, *(void *)(v16 + 48));
          if (!*(_DWORD *)a9)
          {
            int v17 = 0;
            *(_WORD *)(v16 + 112) = 512;
            int v18 = 329;
LABEL_9:
            *(_DWORD *)a9 = v17;
            a9[1] = "src/crypto/CHIPCryptoPAL.cpp";
            *((_DWORD *)a9 + 4) = v18;
          }
        }
      }
    }
  }
  return result;
}

void *sub_244CE5274@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  if (*((unsigned char *)result + 113) != 1)
  {
    int v18 = 336;
    int v17 = 172;
    goto LABEL_9;
  }
  uint64_t v16 = (uint64_t)result;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  double result = sub_244CE4D88((uint64_t)result, a2, a3, a9);
  if (!*(_DWORD *)a9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    double result = sub_244CE4D88(v16, a4, a5, a9);
    if (!*(_DWORD *)a9)
    {
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      double result = sub_244CE5074(v16, a9);
      if (!*(_DWORD *)a9)
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 72))(v16, a6, a7, *(void *)(v16 + 72));
        if (!*(_DWORD *)a9)
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 72))(v16, a8, a10, *(void *)(v16 + 80));
          if (!*(_DWORD *)a9)
          {
            int v17 = 0;
            *(_WORD *)(v16 + 112) = 513;
            int v18 = 346;
LABEL_9:
            *(_DWORD *)a9 = v17;
            a9[1] = "src/crypto/CHIPCryptoPAL.cpp";
            *((_DWORD *)a9 + 4) = v18;
          }
        }
      }
    }
  }
  return result;
}

void *sub_244CE53E8@<X0>(void *result@<X0>, uint64_t a2@<X3>, void *a3@<X4>, void *a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>)
{
  int v7 = result;
  a6.n128_u64[0] = 0xAC000000ACLL;
  if (*((unsigned char *)result + 113) != 2)
  {
    unsigned __int32 v9 = 355;
    goto LABEL_5;
  }
  if (*a3 < result[17])
  {
    unsigned __int32 v9 = 356;
    goto LABEL_5;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  double result = (void *)(*(uint64_t (**)(void *, void, __n128, __n128))(*result + 88))(result, result[11], a5, a6);
  if (!*(_DWORD *)a4)
  {
    if (*((unsigned char *)v7 + 112))
    {
      if (*((unsigned char *)v7 + 112) != 1)
      {
        a5.n128_u32[0] = 370;
        uint64_t v10 = "src/crypto/CHIPCryptoPAL.cpp";
        a6.n128_u64[0] = 0xAC000000ACLL;
        goto LABEL_7;
      }
      uint64_t v12 = v7 + 1;
      int v13 = v7 + 4;
    }
    else
    {
      uint64_t v12 = v7 + 2;
      int v13 = v7 + 5;
    }
    a6.n128_u64[0] = 0xAC000000ACLL;
    if (*v12)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        double result = (*(void *(**)(void *__return_ptr, void *, uint64_t, void, void))(*v7 + 128))(v15, v7, v14, v7[3], v7[11]);
        a6.n128_u64[0] = v15[0];
        if (LODWORD(v15[0])
          || (double result = (*(void *(**)(void *__return_ptr, void *, uint64_t, uint64_t, void))(*v7 + 112))(v15, v7, v14, a2, *a3), a6.n128_u64[0] = v15[0], LODWORD(v15[0])))
        {
          uint64_t v10 = (const char *)v15[1];
          a5.n128_u64[0] = v15[2];
          goto LABEL_7;
        }
        *((unsigned char *)v7 + 113) = 3;
        a5.n128_u32[0] = 377;
        a6.n128_u64[0] = 0;
LABEL_6:
        uint64_t v10 = "src/crypto/CHIPCryptoPAL.cpp";
LABEL_7:
        *a3 = v7[17];
        *a4 = a6.n128_u64[0];
        a4[1] = v10;
        a4[2] = a5.n128_u64[0];
        return result;
      }
      unsigned __int32 v9 = 371;
    }
    else
    {
      unsigned __int32 v9 = 370;
    }
LABEL_5:
    a5.n128_u32[0] = v9;
    goto LABEL_6;
  }
  return result;
}

void *sub_244CE55C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(_OWORD *)a6 = xmmword_26519C848;
  a6[2] = 385;
  double result = sub_24479476C(v22, a4, *a5);
  if ((unint64_t)*a5 < a1[16])
  {
    int v12 = 392;
    goto LABEL_30;
  }
  if (*((unsigned char *)a1 + 113) != 3)
  {
    int v12 = 393;
    goto LABEL_30;
  }
  if (a1[17] != a3)
  {
    int v12 = 394;
    goto LABEL_30;
  }
  if (*((unsigned char *)a1 + 112))
  {
    if (*((unsigned char *)a1 + 112) != 1)
    {
LABEL_29:
      int v12 = 416;
      goto LABEL_30;
    }
    double result = (void *)(*(uint64_t (**)(void *, void, unsigned char *, uint64_t))(*a1 + 112))(a1, a1[4], v23, a3);
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    double result = sub_244CE4D88((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    double result = sub_244CE4D88((uint64_t)a1, a2, a3, &v20);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    int v13 = a1 + 2;
    uint64_t v14 = a1 + 5;
    int v15 = a1 + 26;
  }
  else
  {
    double result = sub_244CE4D88((uint64_t)a1, a2, a3, a6);
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    double result = (*(void *(**)(long long *__return_ptr, void *, void, unsigned char *, void))(*a1 + 112))(&v20, a1, a1[5], v23, a1[17]);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    double result = sub_244CE4D88((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    int v13 = a1 + 1;
    uint64_t v14 = a1 + 4;
    int v15 = a1 + 27;
  }
  uint64_t v16 = *v13;
  if (!*v13) {
    goto LABEL_29;
  }
  uint64_t v17 = *v14;
  if (!*v14)
  {
    int v12 = 417;
    goto LABEL_30;
  }
  uint64_t v18 = *v15;
  double result = (*(void *(**)(long long *__return_ptr, void *, uint64_t, uint64_t, uint64_t))(*a1 + 104))(&v20, a1, a2, a3, v17);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
  double result = (*(void *(**)(long long *__return_ptr, void *, uint64_t))(*a1 + 152))(&v20, a1, v17);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
  double result = (*(void *(**)(long long *__return_ptr, void *, void, void, void))(*a1 + 96))(&v20, a1, a1[13], a1[11], a1[9]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
  double result = (*(void *(**)(long long *__return_ptr, void *, uint64_t))(*a1 + 136))(&v20, a1, v16);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
  double result = (*(void *(**)(long long *__return_ptr, void *, void, uint64_t, void, uint64_t, void))(*a1 + 128))(&v20, a1, a1[7], v17, a1[11], v16, a1[13]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
  double result = (*(void *(**)(long long *__return_ptr, void *, void))(*a1 + 144))(&v20, a1, a1[7]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
  if (*((unsigned char *)a1 + 112))
  {
    if (*((unsigned char *)a1 + 112) != 1) {
      goto LABEL_36;
    }
    double result = (*(void *(**)(long long *__return_ptr, void *, void, void, void))(*a1 + 96))(&v20, a1, a1[13], a1[10], a1[9]);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6) {
      goto LABEL_32;
    }
    double result = (*(void *(**)(long long *__return_ptr, void *, void, uint64_t, void, uint64_t, void))(*a1 + 128))(&v20, a1, a1[8], v17, a1[10], v16, a1[13]);
  }
  else
  {
    double result = (*(void *(**)(long long *__return_ptr, void *, void, void, void))(*a1 + 120))(&v20, a1, a1[8], a1[6], a1[11]);
  }
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6) {
    goto LABEL_32;
  }
LABEL_36:
  double result = (*(void *(**)(long long *__return_ptr, void *, void))(*a1 + 144))(&v20, a1, a1[8]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (!*(_DWORD *)a6)
  {
    double result = (*(void *(**)(long long *__return_ptr, void *, void, unsigned char *, void))(*a1 + 112))(&v20, a1, a1[7], v23, a1[17]);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (!*(_DWORD *)a6)
    {
      double result = sub_244CE4D88((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
      *(_OWORD *)a6 = v20;
      a6[2] = v21;
      if (!*(_DWORD *)a6)
      {
        double result = (*(void *(**)(long long *__return_ptr, void *, void, unsigned char *, void))(*a1 + 112))(&v20, a1, a1[8], v23, a1[17]);
        *(_OWORD *)a6 = v20;
        a6[2] = v21;
        if (!*(_DWORD *)a6)
        {
          double result = sub_244CE4D88((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
          *(_OWORD *)a6 = v20;
          a6[2] = v21;
          if (!*(_DWORD *)a6)
          {
            double result = (*(void *(**)(long long *__return_ptr, void *, void, unsigned char *, void))(*a1 + 80))(&v20, a1, a1[9], v23, a1[15]);
            *(_OWORD *)a6 = v20;
            a6[2] = v21;
            if (!*(_DWORD *)a6)
            {
              double result = sub_244CE4D88((uint64_t)a1, (uint64_t)v23, a1[15], &v20);
              *(_OWORD *)a6 = v20;
              a6[2] = v21;
              if (!*(_DWORD *)a6)
              {
                double result = (void *)sub_244CE5D70(a1, &v20);
                *(_OWORD *)a6 = v20;
                a6[2] = v21;
                if (!*(_DWORD *)a6)
                {
                  double result = (*(void *(**)(long long *__return_ptr, void *, uint64_t, void, uint64_t, uint64_t, void *))(*a1 + 200))(&v20, a1, v18, a1[16] >> 1, a2, a3, v22);
                  *(_OWORD *)a6 = v20;
                  a6[2] = v21;
                  if (!*(_DWORD *)a6)
                  {
                    if (v22[1] == a1[16])
                    {
                      int v19 = 0;
                      *((unsigned char *)a1 + 113) = 4;
                      int v12 = 452;
                      goto LABEL_31;
                    }
                    int v12 = 449;
LABEL_30:
                    int v19 = 172;
LABEL_31:
                    *(_DWORD *)a6 = v19;
                    a6[1] = "src/crypto/CHIPCryptoPAL.cpp";
                    *((_DWORD *)a6 + 4) = v12;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_32:
  *a5 = a1[16];
  return result;
}

uint64_t sub_244CE5D70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_24479476C(v5, (uint64_t)(a1 + 22), 32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (*(uint64_t (**)(void *, void *))(*a1 + 192))(a1, v5);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = (*(uint64_t (**)(void *, void, void, void, void, const char *, uint64_t, void *, void))(*a1 + 216))(a1, a1[28], a1[16] >> 1, 0, 0, "ConfirmationKeysGroupKey v1.0", 16, a1 + 18, a1[16]);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a2 + 4) = 467;
    }
  }
  return result;
}

uint64_t sub_244CE5E68@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 113) != 4)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v10 = 476;
LABEL_19:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  uint64_t v7 = result;
  if (*(unsigned char *)(result + 112))
  {
    if (*(unsigned char *)(result + 112) != 1)
    {
LABEL_17:
      *(_DWORD *)a4 = 172;
      *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v10 = 488;
      goto LABEL_19;
    }
    uint64_t v8 = (void *)(result + 32);
    unsigned __int32 v9 = (uint64_t *)(result + 216);
  }
  else
  {
    uint64_t v8 = (void *)(result + 40);
    unsigned __int32 v9 = (uint64_t *)(result + 208);
  }
  if (!*v8) {
    goto LABEL_17;
  }
  uint64_t v11 = *v9;
  if (!*v9)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v10 = 489;
    goto LABEL_19;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result);
  if (!*(_DWORD *)a4)
  {
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t result = (uint64_t)(*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned char *, void))(*(void *)v7 + 208))(&v14, v7, v11, *(void *)(v7 + 128) >> 1, a2, a3, v16, *(void *)(v7 + 136));
    if (v14 == 172)
    {
      int v12 = sub_244CC8484(0xBu, "SecureChannel");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl(&dword_2446BD000, v12, OS_LOG_TYPE_ERROR, "Failed to verify peer's MAC. This can happen when setup code is incorrect.", v13, 2u);
      }
      uint64_t result = sub_244CC4E58(1u);
      if (result) {
        uint64_t result = sub_244CC4DE0(0xBu, 1);
      }
    }
    *(_OWORD *)a4 = v14;
    *(void *)(a4 + 16) = v15;
    if (!*(_DWORD *)a4)
    {
      *(unsigned char *)(v7 + 113) = 5;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v10 = 501;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_244CE60A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(result + 113) == 5)
  {
    sub_2446C1098(v6, *(void *)(result + 232), *(void *)(result + 128) >> 1);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 32))(a2, v6, a3);
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    *(_DWORD *)(a4 + 16) = 506;
  }
  return result;
}

void sub_244CE6154(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_244CEC440((uint64_t)(a1 + 30), (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_244CEE394(a1, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a2 + 4) = 515;
    }
  }
}

uint64_t sub_244CE61C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = a1 + 240;
  sub_2446C1098(v7, a2, a3);
  uint64_t result = sub_244CEC490(v5, v7[0], (size_t)v7[1], (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a4 + 4) = 521;
  }
  return result;
}

uint64_t sub_244CE6230@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_244CEC580(a1 + 240, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a3 + 4) = 527;
  }
  return result;
}

void sub_244CE6280(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9)
{
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  sub_244CEC60C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9);
  if (!*(_DWORD *)a8)
  {
    *(_DWORD *)a8 = 0;
    a8[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a8 + 4) = 538;
  }
}

uint64_t sub_244CE6300@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*a1 + 72))(a1, a4, a5, a1[9]);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t result = (*(uint64_t (**)(void *, void, uint64_t, void))(*a1 + 80))(a1, a1[9], a2, *a3);
    if (!*(_DWORD *)a6)
    {
      *(_DWORD *)a6 = 0;
      a6[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a6 + 4) = 546;
    }
  }
  return result;
}

uint64_t sub_244CE63D8@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[1] < 0x61uLL)
  {
    int v11 = 551;
    int v10 = 47;
  }
  else
  {
    uint64_t v4 = (_OWORD *)*a2;
    long long v5 = *(_OWORD *)(result + 16);
    _OWORD *v4 = *(_OWORD *)result;
    v4[1] = v5;
    uint64_t v6 = (_OWORD *)*a2;
    void v6[2] = *(_OWORD *)(result + 32);
    long long v7 = *(_OWORD *)(result + 48);
    long long v8 = *(_OWORD *)(result + 64);
    long long v9 = *(_OWORD *)(result + 80);
    *((unsigned char *)v6 + 96) = *(unsigned char *)(result + 96);
    void v6[4] = v8;
    void v6[5] = v9;
    void v6[3] = v7;
    uint64_t result = sub_2446C1548((uint64_t)a2, 0x61uLL);
    int v10 = 0;
    int v11 = 558;
  }
  *(_DWORD *)a3 = v10;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_244CE6468@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 8) < 0x61uLL)
  {
    int v9 = 563;
    int v3 = 47;
  }
  else
  {
    int v3 = 0;
    long long v4 = *(_OWORD *)(*(void *)a2 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)*(void *)a2;
    *(_OWORD *)(result + 16) = v4;
    long long v5 = *(_OWORD **)a2;
    *(_OWORD *)(result + 32) = *(_OWORD *)(*(void *)a2 + 32);
    long long v6 = v5[3];
    long long v7 = v5[4];
    long long v8 = v5[5];
    *(unsigned char *)(result + 96) = *((unsigned char *)v5 + 96);
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 80) = v8;
    *(_OWORD *)(result + 48) = v6;
    int v9 = 568;
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void *sub_244CE64D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(v30, 0, sizeof(v30));
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = (void *)sub_244CE6710(a2, a3, a4, (char *)v30, 0x50u, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    *(_OWORD *)a5 = xmmword_26519C860;
    a5[2] = 576;
    unint64_t v11 = 0;
    char v21 = 0;
    int64x2_t v22 = vdupq_n_s64(0x20uLL);
    uint64_t v23 = 65;
    void v27[2] = &v24;
    void v27[3] = &v25;
    v27[4] = &v26;
    v27[5] = v27;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
    int v13 = &unk_26F954388;
    nullsub_13(v28, v8);
    bzero(&v29, 0x400uLL);
    memset(v12, 0, sizeof(v12));
    sub_244CE4EF8((uint64_t)&v13, (uint64_t)v12, 32, &v9);
    *(_OWORD *)a5 = v9;
    a5[2] = v10;
    if (!*(_DWORD *)a5)
    {
      unint64_t v11 = 32;
      sub_244CE6300(&v13, a1, &v11, (uint64_t)v30, 40, &v9);
      *(_OWORD *)a5 = v9;
      a5[2] = v10;
      if (!*(_DWORD *)a5)
      {
        unint64_t v11 = 65;
        sub_244CEEE78((uint64_t *)&v13, (char *)(a1 + 32), &v11, (unsigned __int8 *)&v30[2] + 8, 0x28uLL, (uint64_t)&v9);
        *(_OWORD *)a5 = v9;
        a5[2] = v10;
        if (!*(_DWORD *)a5 && v11 != 65)
        {
          *(_DWORD *)a5 = 172;
          a5[1] = "src/crypto/CHIPCryptoPAL.cpp";
          *((_DWORD *)a5 + 4) = 592;
        }
      }
    }
    sub_244CEE6A8((uint64_t)&v13);
    int v13 = &unk_26F954388;
    sub_244CEE6A8((uint64_t)&v13);
    return sub_244CEC40C(v28);
  }
  return result;
}

uint64_t sub_244CE6710@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, char *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v10 = &unk_26F954508;
  int v9 = a3;
  unint64_t v7 = a2[1];
  if (v7 - 16 >= 0x11)
  {
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 607;
  }
  else
  {
    if ((result - 1000) < 0x182B9) {
      return sub_244CECA74((uint64_t)&v9, 4uLL, *a2, v7, result, a5, a4, a6);
    }
    *(_DWORD *)a6 = 47;
    *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 609;
  }
  *(_DWORD *)(a6 + 16) = v8;
  return result;
}

uint64_t sub_244CE67D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *a2 = 0;
  unsigned __int8 v11 = 0;
  uint64_t result = sub_244CC5424(a1, &v11);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 24);
  *(void *)(a3 + 16) = *(void *)(a1 + 40);
  if (!*(_DWORD *)a3)
  {
    if ((char)v11 < 0)
    {
      unint64_t v8 = v11 & 0x7F;
      if ((v11 & 0x7Fu) - 1 >= 8)
      {
        *(_DWORD *)a3 = 47;
        *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        int v7 = 633;
      }
      else if (*(void *)(a1 + 16) >= v8)
      {
        unsigned int v9 = 0;
        do
        {
          unsigned __int8 v10 = 0;
          uint64_t result = sub_244CC5424(a1, &v10);
          if (*(_DWORD *)(a1 + 24)) {
            break;
          }
          if (!v9 && !v10)
          {
            *(_DWORD *)a3 = 47;
            *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
            int v7 = 647;
            goto LABEL_8;
          }
          *a2 = v10 | (*a2 << 8);
          ++v9;
        }
        while (v9 < v8);
        if (v8 == 1 && *a2 <= 0x7FuLL)
        {
          *(_DWORD *)a3 = 47;
          *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          int v7 = 658;
        }
        else
        {
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          int v7 = 661;
        }
      }
      else
      {
        *(_DWORD *)a3 = 25;
        *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        int v7 = 634;
      }
    }
    else
    {
      *a2 = v11;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v7 = 626;
    }
LABEL_8:
    *(_DWORD *)(a3 + 16) = v7;
  }
  return result;
}

void *sub_244CE6958@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244CE6960(a1, a2, 0, a3);
}

void *sub_244CE6960@<X0>(void *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = result[1];
  unint64_t v6 = a2[1];
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 102;
  }
  else
  {
    v20[0] = *result;
    v20[1] = v20[0];
    uint64_t v21 = v5;
    int v22 = 0;
    uint64_t v23 = "src/lib/support/BufferReader.h";
    int v24 = 330;
    if (!v20[0]) {
      uint64_t v21 = 0;
    }
    uint64_t v17 = *a2;
    unint64_t v18 = v6;
    unint64_t v19 = 0;
    if (!v17) {
      unint64_t v18 = 0;
    }
    unsigned __int8 v16 = 0;
    while (v21)
    {
      uint64_t result = (void *)sub_244CC5424((uint64_t)v20, &v16);
      unsigned int v11 = v16;
      if (v22 | v16) {
        goto LABEL_16;
      }
    }
    unsigned int v11 = 0;
LABEL_16:
    uint64_t v12 = v21 + (v11 >> 7);
    char v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) <= 0x7F)
    {
      if (a3)
      {
        sub_244CC5784(&v17, 2);
        sub_244CC5784(&v17, v13);
      }
      if ((v11 & 0x80) != 0) {
        sub_244CC5784(&v17, 0);
      }
      do
      {
        sub_244CC5784(&v17, v16);
        uint64_t result = (void *)sub_244CC5424((uint64_t)v20, &v16);
      }
      while (!v22);
      if (v18 >= v19)
      {
        uint64_t result = (void *)sub_244CDAEA0(a2, 0, v19);
        int v14 = 0;
        *a2 = (uint64_t)result;
        a2[1] = v15;
        int v8 = 165;
      }
      else
      {
        int v8 = 160;
        int v14 = 25;
      }
    }
    else
    {
      int v8 = 129;
      int v14 = 47;
    }
    *(_DWORD *)a4 = v14;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

void *sub_244CE6AF4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244CE6960(a1, a2, 1, a3);
}

uint64_t sub_244CE6AFC@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (!result)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v10 = 676;
    goto LABEL_7;
  }
  unint64_t v6 = result;
  uint64_t v7 = a2[1];
  if (v7 != 2 * result)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v10 = 677;
    goto LABEL_7;
  }
  unint64_t v9 = a3[1];
  if (v9 < v7 + 9)
  {
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v10 = 678;
LABEL_7:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  uint64_t v11 = *a3 + 3;
  unint64_t v12 = v9 - 3;
  sub_24479476C(&v22, v11, v9 - 3);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v25 = sub_244CE6D68(a2, 0, v6);
  uint64_t v26 = v13;
  uint64_t result = (uint64_t)sub_244CE6960(&v25, &v22, 1, a4);
  if (!*(_DWORD *)a4)
  {
    unint64_t v14 = v23;
    BOOL v15 = v12 >= v23;
    unint64_t v16 = v12 - v23;
    if (!v15)
    {
      *(_DWORD *)a4 = 172;
      *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v10 = 690;
      goto LABEL_7;
    }
    sub_24479476C(&v22, v11 + v23, v16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v25 = sub_244CE6D68(a2, v6, v6);
    uint64_t v26 = v17;
    uint64_t result = (uint64_t)sub_244CE6960(&v25, &v22, 1, a4);
    if (!*(_DWORD *)a4)
    {
      if (v23 <= v16)
      {
        size_t v18 = v23 + v14;
        if (v23 + v14 >= 0x100)
        {
          *(_DWORD *)a4 = 47;
          *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          int v10 = 706;
        }
        else
        {
          unint64_t v19 = a3[1];
          uint64_t v22 = *a3;
          unint64_t v23 = v19;
          unint64_t v24 = 0;
          if (!v22) {
            unint64_t v23 = 0;
          }
          sub_244CC5784(&v22, 48);
          if (v18 >= 0x80) {
            sub_244CC5784(&v22, 129);
          }
          sub_244CC5784(&v22, v18);
          uint64_t result = (uint64_t)sub_244CC572C(&v22, (const void *)(*a3 + 3), v18);
          if (v23 >= v24)
          {
            uint64_t result = sub_244CDAEA0(a3, 0, v24);
            int v20 = 0;
            *a3 = result;
            a3[1] = v21;
            int v10 = 737;
          }
          else
          {
            int v10 = 734;
            int v20 = 25;
          }
          *(_DWORD *)a4 = v20;
          *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        }
      }
      else
      {
        *(_DWORD *)a4 = 172;
        *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        int v10 = 701;
      }
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_244CE6D68(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4) {
    sub_244E2537C();
  }
  if (v5 < a3) {
    sub_244E25420();
  }
  sub_2446C1098(&v7, *a1 + a2, a3);
  return v7;
}

double sub_244CE6DB4@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  if (!a1)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 742;
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  if (v5 <= 3)
  {
    a4->n128_u32[0] = 25;
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 743;
    goto LABEL_7;
  }
  if (a3[1] < (unint64_t)(2 * a1))
  {
    a4->n128_u32[0] = 25;
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 746;
LABEL_7:
    a4[1].n128_u32[0] = v8;
    return result;
  }
  v18[0] = *a2;
  v18[1] = v18[0];
  unint64_t v19 = v5;
  v20.n128_u32[0] = 0;
  v20.n128_u64[1] = (unint64_t)"src/lib/support/BufferReader.h";
  LODWORD(v21) = 330;
  if (!v18[0]) {
    unint64_t v19 = 0;
  }
  char v17 = 0;
  sub_244CC5424((uint64_t)v18, &v17);
  double result = v20.n128_f64[0];
  *a4 = v20;
  a4[1].n128_u64[0] = v21;
  if (!a4->n128_u32[0])
  {
    if (v17 != 48)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
      int v8 = 753;
      goto LABEL_7;
    }
    uint64_t v16 = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    sub_244CE67D0((uint64_t)v18, &v16, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      if (v16 != v19)
      {
        int v8 = 760;
        int v12 = 47;
        goto LABEL_20;
      }
      uint64_t v10 = *a3;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      sub_24479476C(v15, v10, a1);
      *(void *)&double result = sub_244CE6FB4((uint64_t)v18, v15[0], (size_t)v15[1], a4).n128_u64[0];
      if (!a4->n128_u32[0])
      {
        a4->n128_u64[0] = 0;
        a4->n128_u64[1] = 0;
        a4[1].n128_u64[0] = 0;
        sub_24479476C(v14, v10 + a1, a1);
        *(void *)&double result = sub_244CE6FB4((uint64_t)v18, v14[0], (size_t)v14[1], a4).n128_u64[0];
        if (!a4->n128_u32[0])
        {
          uint64_t v11 = sub_244CDAEA0(a3, 0, 2 * a1);
          int v12 = 0;
          *a3 = v11;
          a3[1] = v13;
          int v8 = 775;
LABEL_20:
          a4->n128_u32[0] = v12;
          a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

__n128 sub_244CE6FB4@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, __n128 *a4@<X8>)
{
  char v13 = 0;
  sub_244CC5424(a1, &v13);
  __n128 result = *(__n128 *)(a1 + 24);
  *a4 = result;
  a4[1].n128_u64[0] = *(void *)(a1 + 40);
  if (!a4->n128_u32[0])
  {
    if (v13 != 2)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
      int v10 = 67;
      goto LABEL_7;
    }
    size_t __n = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    sub_244CE67D0(a1, &__n, (uint64_t)a4);
    if (a4->n128_u32[0]) {
      return result;
    }
    bzero(a2, a3);
    size_t v9 = __n;
    if (__n > a3 + 1)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
      int v10 = 78;
LABEL_7:
      a4[1].n128_u32[0] = v10;
      return result;
    }
    if (__n != a3 + 1)
    {
LABEL_14:
      uint64_t v11 = sub_244CC5630(a1, &a2[a3 - v9], v9);
      __n128 result = *(__n128 *)(v11 + 24);
      *a4 = result;
      a4[1].n128_u64[0] = *(void *)(v11 + 40);
      return result;
    }
    sub_244CC5424(a1, &v13);
    __n128 result = *(__n128 *)(a1 + 24);
    *a4 = result;
    a4[1].n128_u64[0] = *(void *)(a1 + 40);
    if (!a4->n128_u32[0])
    {
      if (v13)
      {
        a4->n128_u32[0] = 47;
        a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
        int v10 = 86;
        goto LABEL_7;
      }
      --v9;
      goto LABEL_14;
    }
  }
  return result;
}

void sub_244CE711C(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_244CEBEAC(a1, a2, a3, a4, a5, a6, a7, v7, 16);
}

void sub_244CE718C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 8) != 4)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v7 = 791;
LABEL_7:
    *(_DWORD *)(a4 + 16) = v7;
    return;
  }
  if ((unint64_t)a3[1] <= 7)
  {
    *(_DWORD *)a4 = 25;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v7 = 792;
    goto LABEL_7;
  }
  v10[0] = bswap64(a2);
  long long v9 = *(_OWORD *)"CompressedFabricN4chip36PersistentStorageOperationalKeystoreE";
  void v8[2] = (uint64_t)&unk_26F954490;
  sub_2446C1098(v8, a1 + 9, 64);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_244CEC60C(v8[0], v8[1], (uint64_t)v10, 8, (uint64_t)&v9, 16, *a3, a4, 8);
  if (!*(_DWORD *)a4)
  {
    *a3 = sub_244CDAEA0(a3, 0, 8uLL);
    a3[1] = v6;
  }
}

void sub_244CE72D0(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v7[1] = *MEMORY[0x263EF8340];
  v6[0] = (uint64_t)v7;
  v6[1] = 8;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CE718C(a1, a2, v6, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a3 = bswap64(v7[0]);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a4 + 4) = 836;
  }
}

void sub_244CE7374(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[1] == 16)
  {
    if ((unint64_t)a3[1] > 0xF)
    {
      sub_244CEC60C(*a1, 16, *a2, a2[1], (uint64_t)"GroupKey v1.0", 13, *a3, a4, 16);
      return;
    }
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v4 = 859;
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v4 = 858;
  }
  *(_DWORD *)(a4 + 16) = v4;
}

void sub_244CE7430(uint64_t *a1@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
  if (a1[1] == 16)
  {
    int v7 = &unk_26F954490;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_244CEC60C(*a1, 16, (uint64_t)"", 0, (uint64_t)"GroupKeyHashPrivacyKeyMvid:", 12, (uint64_t)&v6, (uint64_t)a3, 2);
    if (*(_DWORD *)a3) {
      return;
    }
    *a2 = bswap32(v6) >> 16;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/crypto/CHIPCryptoPAL.cpp";
    int v5 = 884;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/crypto/CHIPCryptoPAL.cpp";
    int v5 = 876;
  }
  *((_DWORD *)a3 + 4) = v5;
}

void sub_244CE7514(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (a1[1] == 16)
  {
    if ((unint64_t)a2[1] > 0xF)
    {
      sub_244CEC60C(*a1, 16, 0, 0, (uint64_t)"PrivacyKeyMvid:", 10, *a2, a3, 16);
      return;
    }
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v3 = 903;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v3 = 902;
  }
  *(_DWORD *)(a3 + 16) = v3;
}

void sub_244CE75D4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a3 + 10;
  v9[0] = a3 + 10;
  v9[1] = 16;
  v8[0] = a3 + 26;
  v8[1] = 16;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CE7374(a1, a2, v9, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2446C1098(v7, v6, 16);
    sub_244CE7430(v7, (_WORD *)(a3 + 8), a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_2446C1098(v7, v6, 16);
      sub_244CE7514(v7, v8, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
        *((_DWORD *)a4 + 4) = 922;
      }
    }
  }
}

uint64_t sub_244CE76B0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  if (result)
  {
    uint64_t v6 = a2[1];
    if (v6)
    {
      int v7 = result;
      if ((result & 0xFFFFFFFE) == 2)
      {
        LOWORD(v15) = 0;
        if (v6 != 4)
        {
          int v9 = 934;
          goto LABEL_25;
        }
        __n128 result = sub_244CC5C14(*a2, 4uLL, &v15);
        if (result != 2)
        {
          int v9 = 937;
          goto LABEL_25;
        }
        if (v7 == 2)
        {
          if (*(unsigned char *)a3)
          {
            int v9 = 942;
LABEL_25:
            *(_DWORD *)a5 = 89;
            *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
            goto LABEL_26;
          }
          __int16 v12 = v15;
          *(unsigned char *)a3 = 1;
          *(_WORD *)(a3 + 2) = v12;
        }
        else
        {
          if (*(unsigned char *)(a3 + 4))
          {
            int v9 = 948;
            goto LABEL_25;
          }
          *(unsigned char *)(a3 + 4) = 1;
          *(_WORD *)(a3 + 6) = v15;
        }
      }
      else if (!(*a4 | a4[4]))
      {
        long long v15 = *(_OWORD *)a2;
        if (*((void *)&v15 + 1) >= 0x41uLL) {
          sub_244CE789C((uint64_t)&v15, 0x40uLL);
        }
        __int16 v14 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)a5 = 0;
        __n128 result = sub_244CE78C4("Mvid:", (uint64_t *)&v15, &v14, a5);
        if (*(_DWORD *)a5 != 216)
        {
          if (*(_DWORD *)a5) {
            return result;
          }
          __int16 v11 = v14;
          *a4 = 1;
          *((_WORD *)a4 + 1) = v11;
        }
        __int16 v13 = 0;
        __n128 result = sub_244CE78C4("Mpid:", (uint64_t *)&v15, &v13, a5);
        if (*(_DWORD *)a5 != 216)
        {
          if (*(_DWORD *)a5) {
            return result;
          }
          a4[4] = 1;
          *((_WORD *)a4 + 3) = v13;
        }
      }
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v9 = 988;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v9 = 929;
    }
  }
  else
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v9 = 928;
  }
LABEL_26:
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

uint64_t sub_244CE789C(uint64_t result, unint64_t a2)
{
  if (*(void *)(result + 8) < a2) {
    sub_244E252D8();
  }
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_244CE78C4@<X0>(char *__s@<X1>, uint64_t *a2@<X0>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8 = strlen(__s);
  uint64_t result = (uint64_t)sub_24479476C(&v20, (uint64_t)__s, v8);
  unint64_t v10 = a2[1];
  if (v10)
  {
    char v11 = 0;
    unint64_t v12 = 0;
    __int16 v13 = v20;
    size_t v14 = v21;
    uint64_t v19 = -(uint64_t)v21;
    while (2)
    {
      uint64_t v15 = *a2;
      size_t v16 = v10 - v12;
      while (1)
      {
        if (v16 < v14)
        {
LABEL_12:
          if ((v11 & 1) == 0) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        uint64_t result = memcmp((const void *)(v15 + v12), v13, v14);
        if (!result) {
          break;
        }
        ++v12;
        --v16;
        if (v12 >= v10) {
          goto LABEL_12;
        }
      }
      if (v19 + v10 - v12 < 4)
      {
LABEL_13:
        int v17 = 89;
        goto LABEL_15;
      }
      LODWORD(v20) = *(_DWORD *)(v15 + v14 + v12);
      uint64_t result = sub_244CC5C14((uint64_t)&v20, 4uLL, a3);
      if (!result)
      {
        unint64_t v10 = a2[1];
        ++v12;
        char v11 = 1;
        if (v12 < v10) {
          continue;
        }
        goto LABEL_13;
      }
      break;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v18 = 228;
  }
  else
  {
LABEL_14:
    int v17 = 216;
LABEL_15:
    *(_DWORD *)a4 = v17;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v18 = 234;
  }
  *(_DWORD *)(a4 + 16) = v18;
  return result;
}

uint64_t sub_244CE7A10@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void v22[5] = *MEMORY[0x263EF8340];
  if (!result)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 1066;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v8;
    return result;
  }
  unint64_t v5 = a2[1];
  if (v5 <= 0xFE)
  {
    *(_DWORD *)a3 = 25;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v8 = 1067;
    goto LABEL_8;
  }
  uint64_t v6 = result;
  v22[4] = 0;
  sub_244CEB170((uint64_t)v17, *a2, v5);
  memset(v18, 0, 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  sub_244CE7EA4(v17, v7, (uint64_t)v18);
  *(_OWORD *)a3 = v18[0];
  *(void *)(a3 + 16) = *(void *)&v18[1];
  if (!*(_DWORD *)a3)
  {
    if ((unsigned __int16)sub_244CEB194(v17) <= (unint64_t)a2[1])
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 24))(v16, v6, *a2);
      uint64_t v9 = *(void *)&v16[16];
      *(void *)&v18[1] = *(void *)&v16[16];
      v18[0] = *(_OWORD *)v16;
      *(_OWORD *)a3 = *(_OWORD *)v16;
      *(void *)(a3 + 16) = v9;
      if (!*(_DWORD *)a3)
      {
        sub_244CEB170((uint64_t)v17, *a2, a2[1]);
        sub_244CEBC20((uint64_t)v17, 0, 0x10u, (uint64_t)v18);
        long long v19 = *(_OWORD *)((char *)v18 + 4);
        int v10 = v18[0];
        int v20 = DWORD1(v18[1]);
        if (!LODWORD(v18[0]))
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
          sub_244CE7EA4(v17, v11, (uint64_t)v18);
          sub_244CEBC20((uint64_t)v17, 0, 0x10u, (uint64_t)v18);
          long long v19 = *(_OWORD *)((char *)v18 + 4);
          int v10 = v18[0];
          int v20 = DWORD1(v18[1]);
          if (!LODWORD(v18[0]))
          {
            sub_244CE9F1C(v17, 513, (uint64_t)v18);
            long long v19 = *(_OWORD *)((char *)v18 + 4);
            int v10 = v18[0];
            int v20 = DWORD1(v18[1]);
            if (!LODWORD(v18[0]))
            {
              sub_244CEBC2C(v18, v17);
              long long v19 = *(_OWORD *)((char *)v18 + 4);
              int v10 = v18[0];
              int v20 = DWORD1(v18[1]);
              if (!LODWORD(v18[0]))
              {
                sub_244CEBD90(v17, 0, 3u, 1, v18);
                long long v19 = *(_OWORD *)((char *)v18 + 4);
                int v10 = v18[0];
                int v20 = DWORD1(v18[1]);
                if (!LODWORD(v18[0]))
                {
                  sub_244CEBC20((uint64_t)v17, 0, 0x10u, (uint64_t)v16);
                  int v10 = *(_DWORD *)v16;
                  long long v19 = *(_OWORD *)&v16[4];
                  int v20 = *(_DWORD *)&v16[20];
                  if (!*(_DWORD *)v16)
                  {
                    *(void *)size_t v16 = v18;
                    *(void *)&char v16[8] = 33;
                    *(void *)(a3 + 8) = 0;
                    *(void *)(a3 + 16) = 0;
                    *(void *)a3 = 0;
                    sub_244CE84D0(&v13, (uint64_t)v21);
                    uint64_t v14 = v13;
                    uint64_t v15 = 32;
                    sub_244CE6960(&v14, (uint64_t *)v16, 0, a3);
                    if (*(_DWORD *)a3) {
                      return sub_244CED784(v21, 64);
                    }
                    *(void *)a3 = 0;
                    *(void *)(a3 + 8) = 0;
                    *(void *)(a3 + 16) = 0;
                    sub_244CEB28C(v17, 0, 2u, 0, *(const void **)v16, *(unsigned __int16 *)&v16[8], (void *)a3);
                    if (*(_DWORD *)a3) {
                      return sub_244CED784(v21, 64);
                    }
                    *(void *)size_t v16 = v18;
                    *(void *)&char v16[8] = 33;
                    *(void *)(a3 + 8) = 0;
                    *(void *)(a3 + 16) = 0;
                    *(void *)a3 = 0;
                    sub_244CE84D0(&v13, (uint64_t)v22);
                    uint64_t v14 = v13;
                    uint64_t v15 = 32;
                    sub_244CE6960(&v14, (uint64_t *)v16, 0, a3);
                    if (*(_DWORD *)a3) {
                      return sub_244CED784(v21, 64);
                    }
                    *(void *)a3 = 0;
                    *(void *)(a3 + 8) = 0;
                    *(void *)(a3 + 16) = 0;
                    sub_244CEB28C(v17, 0, 2u, 0, *(const void **)v16, *(unsigned __int16 *)&v16[8], (void *)a3);
                    if (*(_DWORD *)a3) {
                      return sub_244CED784(v21, 64);
                    }
                    sub_244CEBC2C(v16, v17);
                    int v10 = *(_DWORD *)v16;
                    long long v19 = *(_OWORD *)&v16[4];
                    int v20 = *(_DWORD *)&v16[20];
                    if (!*(_DWORD *)v16)
                    {
                      sub_244CEBC2C(v18, v17);
                      long long v19 = *(_OWORD *)((char *)v18 + 4);
                      int v10 = v18[0];
                      int v20 = DWORD1(v18[1]);
                      if (!LODWORD(v18[0]))
                      {
                        sub_244CEBC2C(v18, v17);
                        long long v19 = *(_OWORD *)((char *)v18 + 4);
                        int v10 = v18[0];
                        int v20 = DWORD1(v18[1]);
                        if (!LODWORD(v18[0]))
                        {
                          unint64_t v12 = sub_244CEB194(v17);
                          sub_2446C1548((uint64_t)a2, v12);
                          int v10 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        *(_DWORD *)a3 = v10;
        *(_OWORD *)(a3 + 4) = v19;
        *(_DWORD *)(a3 + 20) = v20;
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      *(_DWORD *)(a3 + 16) = 1089;
    }
  }
  return sub_244CED784(v21, 64);
}

void *sub_244CE7EA4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CEB1B0(a1, 0, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x11u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CE9F1C(a1, 776, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CEB53C(a1, 0xCu, "CSA", 3u, &v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CEBC2C(&v8, a1);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CEBC2C(&v8, a1);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CEBC2C(&v8, a1);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CE9F1C(a1, 257, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8) {
    goto LABEL_16;
  }
  uint64_t result = sub_244CE9F1C(a1, 1025, (uint64_t)&v8);
  int v7 = v8;
  long long v11 = v9;
  int v12 = v10;
  if (v8 || (result = sub_244CEBC2C(&v8, a1), int v7 = v8, v11 = v9, v12 = v10, v8))
  {
LABEL_16:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v11;
    *(_DWORD *)(a3 + 20) = v12;
    return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = sub_244CEB850(a1, 0, (const void *)(a2 + 8), 0x41u, (void *)a3);
  if (!*(_DWORD *)a3)
  {
    uint64_t result = sub_244CEBC2C(&v8, a1);
    int v7 = v8;
    long long v11 = v9;
    int v12 = v10;
    if (!v8)
    {
      uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 128, 0, (uint64_t)&v8);
      int v7 = v8;
      long long v11 = v9;
      int v12 = v10;
      if (!v8)
      {
        uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
        int v7 = v8;
        long long v11 = v9;
        int v12 = v10;
        if (!v8)
        {
          uint64_t result = sub_244CE9F1C(a1, 1286, (uint64_t)&v8);
          int v7 = v8;
          long long v11 = v9;
          int v12 = v10;
          if (!v8)
          {
            uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x11u, (uint64_t)&v8);
            int v7 = v8;
            long long v11 = v9;
            int v12 = v10;
            if (!v8)
            {
              uint64_t result = (void *)sub_244CEBC20((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
              int v7 = v8;
              long long v11 = v9;
              int v12 = v10;
              if (!v8)
              {
                uint64_t result = sub_244CEBC2C(&v8, a1);
                int v7 = v8;
                long long v11 = v9;
                int v12 = v10;
                if (!v8)
                {
                  uint64_t result = sub_244CEBC2C(&v8, a1);
                  int v7 = v8;
                  long long v11 = v9;
                  int v12 = v10;
                  if (!v8)
                  {
                    uint64_t result = sub_244CEBC2C(&v8, a1);
                    int v7 = v8;
                    long long v11 = v9;
                    int v12 = v10;
                    if (!v8)
                    {
                      uint64_t result = sub_244CEBC2C(&v8, a1);
                      int v7 = v8;
                      long long v11 = v9;
                      int v12 = v10;
                      if (!v8)
                      {
                        uint64_t result = sub_244CEBC2C(&v8, a1);
                        int v7 = v8;
                        long long v11 = v9;
                        int v12 = v10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_244CE835C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((unint64_t)(a2 - 16) >> 4 >= 0xFFF)
  {
    *(_DWORD *)a3 = 80;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    int v5 = 1177;
LABEL_9:
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
  v10[0] = result;
  v10[1] = result;
  uint64_t v11 = a2;
  LODWORD(v12) = 0;
  *((void *)&v12 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v13) = 330;
  if (!result) {
    uint64_t v11 = 0;
  }
  char v9 = 0;
  uint64_t result = sub_244CC5424((uint64_t)v10, &v9);
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  if (!*(_DWORD *)a3)
  {
    if (v9 == 48)
    {
      unint64_t v8 = 0;
      uint64_t result = sub_244CE67D0((uint64_t)v10, &v8, (uint64_t)v7);
      if (v7[0])
      {
        *(_DWORD *)a3 = 80;
        *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        int v5 = 1187;
      }
      else
      {
        uint64_t v6 = 3;
        if (v8 >= 0x100) {
          uint64_t v6 = 4;
        }
        if (v8 < 0x80) {
          uint64_t v6 = 2;
        }
        if (v6 + v8 == a2)
        {
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          int v5 = 1193;
        }
        else
        {
          *(_DWORD *)a3 = 80;
          *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          int v5 = 1191;
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 80;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      int v5 = 1184;
    }
    goto LABEL_9;
  }
  return result;
}

void *sub_244CE84D0(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  if (!a2) {
    sub_244E25554();
  }
  return result;
}

uint64_t sub_244CE84F0(uint64_t a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2 - 1 > 0xFD || v2 == 0) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32) && *(unsigned __int8 *)(a1 + 16) == a2 && *(void *)(a1 + 24)) {
    return 1;
  }
  uint64_t v10 = 0;
  __int16 v7 = 109;
  memset(v6, 0, sizeof(v6));
  sub_244CA2E90("f/%x/o", (uint64_t)v8, a2);
  (*(void (**)(void *__return_ptr, uint64_t, unsigned char *, unsigned char *, __int16 *))(*(void *)v2 + 16))(v6, v2, v8, v9, &v7);
  BOOL v4 = LODWORD(v6[0]) == 0;
  sub_244CED784(v9, 109);
  return v4;
}

void sub_244CE8600(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    char v5 = a2;
    if ((a2 - 1) >= 0xFE)
    {
      *(_DWORD *)a4 = 113;
      *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
      int v11 = 201;
    }
    else
    {
      if (*(unsigned char *)(a1 + 16)) {
        BOOL v7 = *(unsigned __int8 *)(a1 + 16) == a2;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        if (*(void *)(a3 + 8) <= 0xFEuLL)
        {
          *(_DWORD *)a4 = 25;
          *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          int v11 = 207;
        }
        else
        {
          sub_2446D7EF8(a1);
          char v9 = sub_244CC4D84(0x260uLL);
          if (v9)
          {
            uint64_t v10 = v9;
            bzero(v9 + 2, 0x250uLL);
            void *v10 = &unk_26F954330;
            v10[1] = &unk_26F954540;
            *(void *)(a1 + 24) = v10;
            (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v10 + 48))(&v13, v10, 1);
            unint64_t v12 = *(void *)(a3 + 8);
            long long v13 = 0uLL;
            uint64_t v14 = 0;
            (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 24) + 16))(&v13);
            if (v13)
            {
              sub_2446D7EF8(a1);
              *(_OWORD *)a4 = v13;
              *(void *)(a4 + 16) = v14;
              return;
            }
            sub_2446C1548(a3, v12);
            *(unsigned char *)(a1 + 16) = v5;
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
            int v11 = 227;
          }
          else
          {
            *(void *)(a1 + 24) = 0;
            *(_DWORD *)a4 = 11;
            *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
            int v11 = 213;
          }
        }
      }
      else
      {
        *(_DWORD *)a4 = 113;
        *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
        int v11 = 205;
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v11 = 200;
  }
  *(_DWORD *)(a4 + 16) = v11;
}

void *sub_244CE8820@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!result[1])
  {
    int v9 = 233;
    int v8 = 3;
    goto LABEL_11;
  }
  char v5 = result;
  uint64_t result = (void *)result[3];
  if (!result)
  {
    int v9 = 234;
    goto LABEL_10;
  }
  if ((a2 - 1) > 0xFD || *((unsigned __int8 *)v5 + 16) != a2)
  {
    int v9 = 235;
LABEL_10:
    int v8 = 113;
    goto LABEL_11;
  }
  uint64_t v7 = (*(uint64_t (**)(void *))(*result + 40))(result);
  uint64_t result = (void *)sub_244B9221C(v7, a3);
  if (result)
  {
    int v8 = 0;
    *((unsigned char *)v5 + 32) = 1;
    int v9 = 242;
  }
  else
  {
    int v9 = 238;
    int v8 = 197;
  }
LABEL_11:
  *(_DWORD *)a4 = v8;
  *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_244CE88F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      if ((a2 - 1) <= 0xFDu && *(unsigned __int8 *)(a1 + 16) == a2)
      {
        if (*(unsigned char *)(a1 + 32))
        {
          long long v8 = 0uLL;
          uint64_t v9 = 0;
          sub_244CE8A18(a2, v4, v6, (uint64_t)&v8);
          *(_OWORD *)a3 = v8;
          *(void *)(a3 + 16) = v9;
          if (*(_DWORD *)a3) {
            return;
          }
          sub_2446D7EF8(a1);
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          int v7 = 258;
        }
        else
        {
          *(_DWORD *)a3 = 3;
          *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          int v7 = 250;
        }
      }
      else
      {
        *(_DWORD *)a3 = 113;
        *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
        int v7 = 249;
      }
    }
    else
    {
      *(_DWORD *)a3 = 113;
      *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
      int v7 = 248;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v7 = 247;
  }
  *(_DWORD *)(a3 + 16) = v7;
}

uint64_t sub_244CE8A18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((result - 1) > 0xFD || a2 == 0 || a3 == 0)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    *(_DWORD *)(a4 + 16) = 58;
    return result;
  }
  unsigned int v9 = result;
  uint64_t v19 = 0;
  sub_244CB62B8((uint64_t)v14);
  sub_244CB62E0((uint64_t)v14, (uint64_t)v18, 0x6DuLL);
  int v13 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_244CB7594(v14, 256, 21, &v13, a4);
  if (!*(_DWORD *)a4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB6904();
    if (!*(_DWORD *)a4)
    {
      unint64_t v17 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      (*(void (**)(uint64_t, char *))(*(void *)a3 + 56))(a3, v16);
      if (!*(_DWORD *)a4)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB6ADC((char *)v14, v16, v17, a4);
        int v10 = *(_DWORD *)a4;
        sub_244CED784(v16, 97);
        if (v10) {
          return sub_244CED784(v18, 109);
        }
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB7708((uint64_t)v14, v13, a4);
        if (*(_DWORD *)a4) {
          return sub_244CED784(v18, 109);
        }
        unsigned __int16 v11 = v15;
        if (v15 >= 0x10000)
        {
          *(_DWORD *)a4 = 25;
          *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          int v12 = 82;
        }
        else
        {
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          sub_244CA2E90("f/%x/o", (uint64_t)v16, v9);
          (*(void (**)(uint64_t, char *, unsigned char *, void))(*(void *)a2 + 24))(a2, v16, v18, v11);
          if (*(_DWORD *)a4) {
            return sub_244CED784(v18, 109);
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          int v12 = 86;
        }
        *(_DWORD *)(a4 + 16) = v12;
        return sub_244CED784(v18, 109);
      }
      sub_244CED784(v16, 97);
    }
  }
  return sub_244CED784(v18, 109);
}

uint64_t sub_244CE8C80@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    return sub_244CE8CB4(a2, v4, a3, a4);
  }
  *(_DWORD *)a4 = 3;
  *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
  *(_DWORD *)(a4 + 16) = 264;
  return result;
}

uint64_t sub_244CE8CB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((result - 1) >= 0xFE)
  {
    *(_DWORD *)a4 = 113;
    *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    *(_DWORD *)(a4 + 16) = 93;
    return result;
  }
  unint64_t v15 = 0;
  unsigned __int16 v12 = 109;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_244CA2E90("f/%x/o", (uint64_t)v13, result);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int16 *))(*(void *)a2 + 16))(a2, v13, v14, &v12);
  if (!*(_DWORD *)a4)
  {
    if (v12 <= 0x6DuLL) {
      unint64_t v15 = v12;
    }
    sub_244CB3988((uint64_t)v13);
    sub_244CB39B8((uint64_t)v13, (uint64_t)v14, v15);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_244CB55E4((uint64_t)v13, 21, 256, (void *)a4);
    if (!*(_DWORD *)a4)
    {
      int v11 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      sub_244CB4C90((uint64_t)v13, &v11, a4);
      if (!*(_DWORD *)a4)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        sub_244CB54B4((uint64_t)v13, 0, (void *)a4);
        if (!*(_DWORD *)a4)
        {
          __int16 v10 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_244CB3F40((uint64_t)v13, &v10, a4);
          if (!*(_DWORD *)a4)
          {
            if (v10 == 1)
            {
              *(void *)a4 = 0;
              *(void *)(a4 + 8) = 0;
              *(void *)(a4 + 16) = 0;
              sub_244CB54B4((uint64_t)v13, 1, (void *)a4);
              if (*(_DWORD *)a4) {
                return sub_244CED784(v14, 109);
              }
              long long v9 = 0uLL;
              *(void *)(a4 + 8) = 0;
              *(void *)(a4 + 16) = 0;
              *(void *)a4 = 0;
              sub_244CB5C08((uint64_t)v13, &v9, (void *)a4);
              if (*(_DWORD *)a4) {
                return sub_244CED784(v14, 109);
              }
              if (*((void *)&v9 + 1) < 0x62uLL)
              {
                *(void *)a4 = 0;
                *(void *)(a4 + 8) = 0;
                *(void *)(a4 + 16) = 0;
                sub_244CB4D00((uint64_t)v13, v11, a4);
                if (*(_DWORD *)a4) {
                  return sub_244CED784(v14, 109);
                }
                unint64_t v8 = *((void *)&v9 + 1);
                memcpy(a3, (const void *)v9, *((size_t *)&v9 + 1));
                if (v8 <= 0x61) {
                  a3[13] = v8;
                }
                *(_DWORD *)a4 = 0;
                *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
                int v7 = 132;
              }
              else
              {
                *(_DWORD *)a4 = 25;
                *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
                int v7 = 124;
              }
            }
            else
            {
              *(_DWORD *)a4 = 167;
              *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
              int v7 = 116;
            }
            *(_DWORD *)(a4 + 16) = v7;
          }
        }
      }
    }
  }
  return sub_244CED784(v14, 109);
}

uint64_t sub_244CE8F58@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(result + 8);
  if (!v4)
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v7 = 270;
    goto LABEL_10;
  }
  if (a2 - 1 >= 0xFE)
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v7 = 271;
    goto LABEL_10;
  }
  uint64_t v6 = result;
  if (*(void *)(result + 24))
  {
    if (*(unsigned __int8 *)(result + 16) == a2)
    {
      (*(void (**)(uint64_t))(*(void *)result + 80))(result);
      uint64_t v4 = *(void *)(v6 + 8);
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_244CA2E90("f/%x/o", (uint64_t)v8, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v4 + 32))(v4, v8);
  if (*(_DWORD *)a3 == 160)
  {
    *(_DWORD *)a3 = 113;
    *(void *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v7 = 282;
LABEL_10:
    *(_DWORD *)(a3 + 16) = v7;
  }
  return result;
}

void sub_244CE90C0(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    sub_2446D7EF8(a1);
  }
}

void sub_244CE90D0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v16[14] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v12 = 299;
    goto LABEL_19;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(void *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v12 = 300;
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 32) && *(unsigned __int8 *)(a1 + 16) == a2)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10)
    {
      int v11 = *(void (**)(void))(*(void *)v10 + 24);
      v11();
      return;
    }
    *(_DWORD *)a5 = 172;
    *(void *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v12 = 304;
LABEL_19:
    *(_DWORD *)(a5 + 16) = v12;
    return;
  }
  int v13 = sub_244CC4D84(0x260uLL);
  if (!v13)
  {
    *(_DWORD *)a5 = 11;
    *(void *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v12 = 151;
    goto LABEL_19;
  }
  uint64_t v14 = v13;
  bzero(v13 + 2, 0x250uLL);
  void *v14 = &unk_26F954330;
  v14[1] = &unk_26F954540;
  v16[13] = 0;
  memset(v15, 0, sizeof(v15));
  sub_244CE8CB4(a2, v6, v16, (uint64_t)v15);
  if (LODWORD(v15[0]) == 160)
  {
    *(_DWORD *)a5 = 113;
    *(void *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    *(_DWORD *)(a5 + 16) = 159;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    (*(void (**)(void *, void *))(*v14 + 64))(v14, v16);
    if (!*(_DWORD *)a5) {
      (*(void (**)(void *, void, void, uint64_t))(*v14 + 24))(v14, *a3, a3[1], a4);
    }
  }
  sub_244CED784(v16, 97);
  (*(void (**)(void *))*v14)(v14);
  j__free(v14);
}

void *sub_244CE93A8()
{
  uint64_t v0 = sub_244CC4D84(0x260uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    bzero(v0 + 2, 0x250uLL);
    void *v1 = &unk_26F954330;
    v1[1] = &unk_26F954540;
  }
  return v1;
}

void sub_244CE9420(uint64_t a1, void (***a2)(void))
{
  if (a2)
  {
    (**a2)(a2);
    j__free(a2);
  }
}

void *sub_244CE9484@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!result[1])
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v9 = 330;
LABEL_10:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a4 = 113;
    *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    int v9 = 331;
    goto LABEL_10;
  }
  int v7 = result;
  uint64_t v14 = 0;
  if ((*(uint64_t (**)(void *, uint64_t))(*result + 24))(result, a2))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, a2))
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
      if (*(_DWORD *)a4) {
        return (void *)sub_244CED784(v13, 97);
      }
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a3 + 56))(a3, a2, v13);
    if (*(_DWORD *)a4) {
      return (void *)sub_244CED784(v13, 97);
    }
    uint64_t v10 = sub_244CC4D84(0x260uLL);
    if (!v10)
    {
      *(_DWORD *)a4 = 11;
      *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
      int v8 = 343;
      goto LABEL_7;
    }
    int v11 = v10;
    bzero(v10 + 2, 0x250uLL);
    void *v11 = &unk_26F954330;
    v11[1] = &unk_26F954540;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    (*(void (**)(void *, unsigned char *))(*v11 + 64))(v11, v13);
    if (*(_DWORD *)a4
      || (*(void *)a4 = 0,
          *(void *)(a4 + 8) = 0,
          *(void *)(a4 + 16) = 0,
          sub_244CE8A18(a2, v7[1], (uint64_t)v11, a4),
          *(_DWORD *)a4))
    {
      (*(void (**)(void *))*v11)(v11);
      j__free(v11);
      return (void *)sub_244CED784(v13, 97);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
    int v12 = *(_DWORD *)a4;
    (*(void (**)(void *))*v11)(v11);
    j__free(v11);
    if (v12) {
      return (void *)sub_244CED784(v13, 97);
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
  int v8 = 356;
LABEL_7:
  *(_DWORD *)(a4 + 16) = v8;
  return (void *)sub_244CED784(v13, 97);
}

void *sub_244CE97E4(void *a1)
{
  *a1 = &unk_26F9541F0;
  if (a1[1])
  {
    sub_2446D7EF8((uint64_t)a1);
    a1[1] = 0;
  }
  return a1;
}

void sub_244CE9838(void *a1)
{
  *a1 = &unk_26F9541F0;
  if (a1[1])
  {
    sub_2446D7EF8((uint64_t)a1);
    a1[1] = 0;
  }

  JUMPOUT(0x245695FA0);
}

BOOL sub_244CE98AC(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

uint64_t sub_244CE98BC()
{
  uint64_t v2 = 0;
  sub_244CECD5C((char *)&v2, 8uLL, (uint64_t)v1);
  if (v1[0]) {
    sub_244E255F8();
  }
  return v2;
}

uint64_t sub_244CE98FC()
{
  unsigned int v2 = 0;
  sub_244CECD5C((char *)&v2, 4uLL, (uint64_t)v1);
  if (v1[0]) {
    sub_244E256A0();
  }
  return v2;
}

uint64_t sub_244CE993C()
{
  unsigned __int16 v2 = 0;
  sub_244CECD5C((char *)&v2, 2uLL, (uint64_t)v1);
  if (v1[0]) {
    sub_244E25748();
  }
  return v2;
}

uint64_t sub_244CE997C()
{
  unsigned __int8 v2 = 0;
  sub_244CECD5C((char *)&v2, 1uLL, (uint64_t)v1);
  if (v1[0]) {
    sub_244E257F0();
  }
  return v2;
}

__n128 sub_244CE99BC@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X2>, uint64_t a3@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/crypto/RawKeySessionKeystore.cpp";
  *(_DWORD *)(a3 + 16) = 42;
  return result;
}

__n128 sub_244CE99E0@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X2>, uint64_t a3@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/crypto/RawKeySessionKeystore.cpp";
  *(_DWORD *)(a3 + 16) = 48;
  return result;
}

void *sub_244CE9A04@<X0>(void *__dst@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5 = *(void *)(a2 + 8);
  if (v5 > 0x20)
  {
    int v9 = 55;
    int v8 = 25;
  }
  else
  {
    __n128 result = memcpy(__dst, *(const void **)a2, v5);
    int v8 = 0;
    *((unsigned char *)__dst + 32) = *(void *)(a2 + 8);
    int v9 = 59;
  }
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/crypto/RawKeySessionKeystore.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void sub_244CE9A7C(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
}

__n128 sub_244CE9ADC@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X4>, void *a5@<X5>, void *a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v19 = &unk_26F954490;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  sub_244CEC60C(*a1, a1[1], *a2, a2[1], *a3, a3[1], (uint64_t)v20, (uint64_t)a7, 48);
  if (!a7->n128_u32[0])
  {
    v15[0] = v20;
    v15[1] = v20;
    int v15[2] = 48;
    int v16 = 0;
    unint64_t v17 = "src/lib/support/BufferReader.h";
    int v18 = 330;
    uint64_t v12 = sub_244CC5630((uint64_t)v15, a4, 0x10uLL);
    uint64_t v13 = sub_244CC5630(v12, a5, 0x10uLL);
    uint64_t v14 = sub_244CC5630(v13, a6, 0x10uLL);
    __n128 result = *(__n128 *)(v14 + 24);
    *a7 = result;
    a7[1].n128_u64[0] = *(void *)(v14 + 40);
  }
  return result;
}

uint64_t sub_244CE9C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_2446C1098(&v14, a2, *(unsigned __int8 *)(a2 + 32));
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, &v14, a3, a4, a5, a6, a7);
}

uint64_t sub_244CE9CBC(uint64_t a1, uint64_t a2)
{
  return sub_244CED784(a2, 16);
}

uint64_t sub_244CE9CC8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_244CED784(a2, 32);
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

void sub_244CE9CF8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/crypto/SessionKeystore.h";
  *(_DWORD *)(a1 + 16) = 153;
}

uint64_t sub_244CE9D14(void *__s1, size_t __n)
{
  uint64_t result = 0;
  if (__s1)
  {
    unsigned int v4 = __n;
    if (__n)
    {
      uint64_t v5 = 0;
      while ((unsigned __int16)word_26519C878[v5 + 8] != v4
           || memcmp(__s1, *(const void **)&word_26519C878[v5 + 4], v4))
      {
        v5 += 12;
        if (v5 == 456) {
          return 0xFFFFLL;
        }
      }
      return (unsigned __int16)word_26519C878[v5];
    }
  }
  return result;
}

BOOL sub_244CE9DA0(int a1, void *a2, _WORD *a3)
{
  uint64_t v3 = 0;
  while (1)
  {
    int v4 = (unsigned __int16)word_26519C878[v3];
    if (v4 == a1) {
      break;
    }
    v3 += 12;
    if (v3 == 456) {
      return v4 == a1;
    }
  }
  uint64_t v5 = &word_26519C878[v3];
  *a2 = *((void *)v5 + 1);
  *a3 = v5[8];
  return v4 == a1;
}

uint64_t sub_244CE9DE8(int a1)
{
  unsigned int v1 = a1 & 0xF00;
  if (!a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 0xFFFF) {
    return 3840;
  }
  else {
    return v1;
  }
}

const char *sub_244CE9E08(int a1)
{
  if (!a1) {
    return "NotSpecified";
  }
  if (a1 == 0xFFFF) {
    return "Unknown";
  }
  uint64_t v3 = 0;
  uint64_t result = "Unknown";
  while ((unsigned __int16)word_26519CC08[v3] != a1)
  {
    v3 += 8;
    if (v3 == 304) {
      return result;
    }
  }
  return *(const char **)&word_26519CC08[v3 + 4];
}

void *sub_244CE9E70@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = *(void **)(a1 + 8);
  if (!result)
  {
    int v7 = 110;
    int v8 = 771;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (!v6)
  {
    int v7 = 111;
    goto LABEL_10;
  }
  if (*(void *)(a1 + 40) + (unint64_t)*(unsigned int *)(a1 + 56) + v6 <= *(void *)(a1 + 48))
  {
    if (!WORD1(v6))
    {
      uint64_t result = (void *)sub_244CE9D14(result, (unsigned __int16)v6);
      int v8 = 0;
      *a2 = (_WORD)result;
      int v7 = 115;
      goto LABEL_11;
    }
    int v7 = 113;
LABEL_10:
    int v8 = 773;
    goto LABEL_11;
  }
  int v7 = 112;
  int v8 = 769;
LABEL_11:
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1OID.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void *sub_244CE9F1C@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  while ((unsigned __int16)word_26519C878[v3] != a2)
  {
    v3 += 12;
    if (v3 == 456)
    {
      *(_DWORD *)a3 = 778;
      *(void *)(a3 + 8) = "src/lib/asn1/ASN1OID.cpp";
      *(_DWORD *)(a3 + 16) = 123;
      return result;
    }
  }
  return sub_244CEB524(result, *(const void **)&word_26519C878[v3 + 4], (unsigned __int16)word_26519C878[v3 + 8], (void *)a3);
}

uint64_t sub_244CE9F70(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t result = 0;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 15) = 0;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a2 + a3;
  *(void *)(result + 40) = a2;
  *(void *)(result + 48) = a2 + a3;
  *(_DWORD *)(result + 384) = 0;
  return result;
}

uint64_t sub_244CE9F94(uint64_t result)
{
  *(_WORD *)uint64_t result = 0;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 15) = 0;
  return result;
}

uint64_t sub_244CE9FA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 22))
  {
    *(_DWORD *)a2 = 768;
    *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v2 = 53;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v2;
    return result;
  }
  if (*(unsigned char *)(result + 21))
  {
    *(_DWORD *)a2 = 774;
    *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v2 = 54;
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(result + 48);
  uint64_t v4 = *(void *)(result + 40) + *(unsigned int *)(result + 56) + *(unsigned int *)(result + 16);
  *(void *)(result + 40) = v4;
  *(_WORD *)uint64_t result = 0;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 15) = 0;
  if (v4 == v3)
  {
    *(_DWORD *)a2 = 768;
    *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v2 = 62;
    goto LABEL_5;
  }
  return sub_244CEA044(result, a2);
}

uint64_t sub_244CEA044@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(result + 32);
  int v2 = *(unsigned char **)(result + 40);
  if ((unint64_t)v2 >= v3)
  {
    int v7 = 247;
LABEL_9:
    LODWORD(v8) = 769;
    goto LABEL_10;
  }
  int v4 = *v2 & 0xC0;
  *(unsigned char *)uint64_t result = v4;
  int v5 = (*v2 >> 5) & 1;
  *(unsigned char *)(result + 20) = (*v2 & 0x20) != 0;
  int v6 = *v2 & 0x1F;
  *(unsigned char *)(result + 1) = v6;
  if (v6 == 31)
  {
    int v7 = 254;
    LODWORD(v8) = 774;
    goto LABEL_10;
  }
  int v9 = v2 + 1;
  if ((unint64_t)(v2 + 1) >= v3)
  {
    int v7 = 257;
    goto LABEL_9;
  }
  unsigned int v10 = *v9;
  if (((char)*v9 & 0x80000000) == 0)
  {
    *(_DWORD *)(result + 16) = v10;
    *(unsigned char *)(result + 21) = 0;
    int v11 = v2 + 2;
    goto LABEL_21;
  }
  *(_DWORD *)(result + 16) = 0;
  int v11 = v2 + 2;
  if (v10 == 128)
  {
    unsigned int v10 = 0;
    *(unsigned char *)(result + 21) = 1;
    goto LABEL_21;
  }
  int v12 = *v9 & 0x7F;
  if (!v12)
  {
    unsigned int v10 = 0;
LABEL_20:
    *(unsigned char *)(result + 21) = 0;
LABEL_21:
    unint64_t v14 = v3 - (void)v11;
    if (HIDWORD(v14))
    {
      int v7 = 285;
    }
    else if (v10 <= v14)
    {
      unint64_t v15 = v11 - v2;
      unint64_t v8 = HIDWORD(v15);
      if (!HIDWORD(v15))
      {
        *(_DWORD *)(result + 56) = v15;
        *(unsigned char *)(result + 22) = (v6 | v4 | v5 | v10) == 0;
        *(void *)(result + 8) = v11;
        int v7 = 294;
        goto LABEL_10;
      }
      int v7 = 287;
    }
    else
    {
      int v7 = 286;
    }
    LODWORD(v8) = 777;
    goto LABEL_10;
  }
  unsigned int v10 = 0;
  while (1)
  {
    if ((unint64_t)v11 >= v3)
    {
      int v7 = 278;
      goto LABEL_9;
    }
    if (HIBYTE(v10)) {
      break;
    }
    int v13 = *v11++;
    unsigned int v10 = v13 | (v10 << 8);
    *(_DWORD *)(result + 16) = v10;
    if (!(_BYTE)--v12) {
      goto LABEL_20;
    }
  }
  int v7 = 279;
  LODWORD(v8) = 776;
LABEL_10:
  *(_DWORD *)a2 = v8;
  *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

uint64_t sub_244CEA1B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 20)) {
    return sub_244CEA1E4(result, 0, a2);
  }
  *(_DWORD *)a2 = 771;
  *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a2 + 16) = 69;
  return result;
}

uint64_t sub_244CEA1E4@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 384);
  if (v3 != 10)
  {
    uint64_t v6 = *(void *)(result + 8);
    uint64_t v7 = *(void *)(result + 48);
    *(void *)(result + 64 + 32 * v3) = *(void *)(result + 40);
    uint64_t v8 = *(unsigned int *)(result + 384);
    uint64_t v9 = result + 64 + 32 * v8;
    uint64_t v10 = *(unsigned int *)(result + 16);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + 56);
    *(_DWORD *)(v9 + 12) = v10;
    int v11 = *(unsigned __int8 *)(result + 21);
    *(unsigned char *)(v9 + 16) = v11;
    *(void *)(v9 + 24) = v7;
    *(_DWORD *)(result + 384) = v8 + 1;
    *(void *)(result + 40) = v6 + a2;
    if (v11)
    {
LABEL_4:
      int v5 = 0;
      *(_WORD *)uint64_t result = 0;
      *(_DWORD *)(result + 56) = 0;
      *(void *)(result + 8) = 0;
      int v4 = 125;
      *(void *)(result + 15) = 0;
      goto LABEL_10;
    }
    unint64_t v12 = *(void *)(result + 32) - v6;
    if (HIDWORD(v12))
    {
      int v4 = 118;
    }
    else
    {
      if (v10 <= v12)
      {
        *(void *)(result + 48) = v6 + v10;
        goto LABEL_4;
      }
      int v4 = 119;
    }
    int v5 = 777;
    goto LABEL_10;
  }
  int v4 = 106;
  int v5 = 772;
LABEL_10:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_244CEA2B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 384);
  if (v2)
  {
    uint64_t v3 = (v2 - 1);
    *(_DWORD *)(result + 384) = v3;
    uint64_t v4 = result + 32 * v3;
    int v5 = *(unsigned __int8 *)(v4 + 80);
    if (*(unsigned char *)(v4 + 80))
    {
      int v6 = 134;
      int v5 = 774;
    }
    else
    {
      uint64_t v7 = *(void *)(v4 + 64) + *(unsigned int *)(v4 + 72) + *(unsigned int *)(v4 + 76);
      uint64_t v8 = *(void *)(v4 + 88);
      *(void *)(result + 40) = v7;
      *(void *)(result + 48) = v8;
      *(_WORD *)uint64_t result = 0;
      *(_DWORD *)(result + 56) = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 15) = 0;
      int v6 = 142;
    }
  }
  else
  {
    int v6 = 130;
    int v5 = 771;
  }
  *(_DWORD *)a2 = v5;
  *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_244CEA32C@<X0>(uint64_t result@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(result + 20))
  {
    int v4 = 0;
    *a2 = *(void *)(result + 40);
    *a3 = *(_DWORD *)(result + 16) + *(_DWORD *)(result + 56);
    int v5 = 86;
  }
  else
  {
    int v5 = 81;
    int v4 = 771;
  }
  *(_DWORD *)a4 = v4;
  *(void *)(a4 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

unsigned char *sub_244CEA378@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  if (*result || (int v2 = result[1], (v2 - 3) >= 2))
  {
    *(_DWORD *)a2 = 771;
    *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v3 = 92;
    goto LABEL_6;
  }
  if (result[20])
  {
    *(_DWORD *)a2 = 774;
    *(void *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v3 = 94;
LABEL_6:
    *(_DWORD *)(a2 + 16) = v3;
    return result;
  }
  return (unsigned char *)sub_244CEA1E4((uint64_t)result, v2 == 3, a2);
}

BOOL sub_244CEA3E0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 384) != 0;
}

void *sub_244CEA3F0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  v11[0] = 0;
  int v4 = (char *)result[1];
  if (v4)
  {
    size_t v5 = *((unsigned int *)result + 4);
    if (v5)
    {
      if (v5 > 8)
      {
        int v6 = 157;
        int v7 = 777;
      }
      else if (result[5] + *((unsigned int *)result + 14) + v5 <= result[6])
      {
        unint64_t v9 = 8 - v5;
        if (*v4 < 0 && v5 != 8)
        {
          if (v9 <= 1) {
            size_t v10 = 1;
          }
          else {
            size_t v10 = 8 - v5;
          }
          memset(v11, 255, v10);
        }
        uint64_t result = memcpy((char *)v11 + v9, v4, v5);
        int v7 = 0;
        *a2 = bswap64(v11[0]);
        int v6 = 171;
      }
      else
      {
        int v6 = 158;
        int v7 = 769;
      }
    }
    else
    {
      int v6 = 156;
      int v7 = 773;
    }
  }
  else
  {
    int v6 = 155;
    int v7 = 771;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244CEA524@<X0>(uint64_t result@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 **)(result + 8);
  if (!v3)
  {
    int v4 = 176;
    int v5 = 771;
    goto LABEL_14;
  }
  if (*(_DWORD *)(result + 16) != 1)
  {
    int v4 = 177;
LABEL_7:
    int v5 = 773;
    goto LABEL_14;
  }
  if (*(void *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + 1 <= *(void *)(result + 48))
  {
    int v6 = *v3;
    if (v6 == 255 || v6 == 0)
    {
      int v5 = 0;
      *a2 = v6 != 0;
      int v4 = 183;
      goto LABEL_14;
    }
    int v4 = 179;
    goto LABEL_7;
  }
  int v4 = 178;
  int v5 = 769;
LABEL_14:
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_244CEA5B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(result + 8);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(result + 16);
    if (v6)
    {
      if (*(void *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + v6 <= *(void *)(result + 48))
      {
        if (v6 == 13 && *(unsigned char *)(v5 + 12) == 90)
        {
          sub_24479476C(v8, v5, v6);
          return sub_244CEAC78(a2, (uint64_t)v8, a3);
        }
        *(_DWORD *)a3 = 774;
        *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        int v7 = 192;
      }
      else
      {
        *(_DWORD *)a3 = 769;
        *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        int v7 = 191;
      }
    }
    else
    {
      *(_DWORD *)a3 = 773;
      *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
      int v7 = 190;
    }
  }
  else
  {
    *(_DWORD *)a3 = 771;
    *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v7 = 189;
  }
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244CEA6AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(result + 8);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(result + 16);
    if (v6)
    {
      if (*(void *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + v6 <= *(void *)(result + 48))
      {
        if (v6 == 15 && *(unsigned char *)(v5 + 14) == 90)
        {
          sub_24479476C(v8, v5, v6);
          return sub_244CEAC78(a2, (uint64_t)v8, a3);
        }
        *(_DWORD *)a3 = 774;
        *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        int v7 = 203;
      }
      else
      {
        *(_DWORD *)a3 = 769;
        *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        int v7 = 202;
      }
    }
    else
    {
      *(_DWORD *)a3 = 773;
      *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
      int v7 = 201;
    }
  }
  else
  {
    *(_DWORD *)a3 = 771;
    *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    int v7 = 200;
  }
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244CEA7A0@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if (!v3)
  {
    int v5 = 222;
    int v6 = 771;
    goto LABEL_17;
  }
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (!v4)
  {
    int v5 = 223;
    int v6 = 773;
    goto LABEL_17;
  }
  if (v4 > 5)
  {
    int v5 = 224;
    int v6 = 774;
    goto LABEL_17;
  }
  if (*(void *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + v4 > *(void *)(result + 48))
  {
    int v5 = 225;
    int v6 = 769;
    goto LABEL_17;
  }
  if (v4 == 1)
  {
    int v6 = 0;
    *a2 = 0;
LABEL_16:
    int v5 = 241;
    goto LABEL_17;
  }
  unsigned int v7 = __rbit32(*(unsigned __int8 *)(v3 + 1)) >> 24;
  *a2 = v7;
  if (*(_DWORD *)(result + 16) < 3u)
  {
    int v6 = 0;
    goto LABEL_16;
  }
  int v8 = 8;
  unint64_t v9 = 2;
  do
  {
    int v6 = 0;
    v7 |= __rbit32(*(unsigned __int8 *)(*(void *)(result + 8) + v9)) >> 24 << v8;
    *a2 = v7;
    ++v9;
    v8 += 8;
    int v5 = 241;
  }
  while (v9 < *(unsigned int *)(result + 16));
LABEL_17:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_244CEA894@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = 0;
  *(_OWORD *)a4 = xmmword_26519CE68;
  *(void *)(a4 + 16) = 311;
  if (a3) {
    int v8 = a3;
  }
  else {
    int v8 = "  ";
  }
  do
  {
    while (1)
    {
      uint64_t result = sub_244CE9FA8(a1, a4);
      if (!*(_DWORD *)a4) {
        break;
      }
      if (*(_DWORD *)a4 != 768)
      {
        long long v12 = *(_OWORD *)a4;
        uint64_t v13 = *(void *)(a4 + 16);
        sub_244CB7B34((const char **)&v12, 1);
        return printf("ASN1Reader::Next() failed: %s\n");
      }
      if (!*(_DWORD *)(a1 + 384)) {
        return result;
      }
      sub_244CEA2B4(a1, a4);
      if (*(_DWORD *)a4)
      {
        long long v12 = *(_OWORD *)a4;
        uint64_t v13 = *(void *)(a4 + 16);
        sub_244CB7B34((const char **)&v12, 1);
        return printf("ASN1Reader::ExitConstructedType() failed: %s\n");
      }
      int v11 = -1;
LABEL_29:
      v7 += v11;
    }
    if (a2) {
      printf("%s", a2);
    }
    for (int i = v7; i; --i)
      printf("%s", v8);
    if (*(unsigned char *)(a1 + 22))
    {
      printf("END-OF-CONTENTS ");
    }
    else
    {
      switch(((*(unsigned char *)a1 >> 6) | (4 * *(unsigned char *)a1)) ^ 2)
      {
        case 0:
          printf("[%lu] ");
          break;
        case 1:
          printf("[PRIVATE %lu] ");
          break;
        case 2:
          switch(*(unsigned char *)(a1 + 1))
          {
            case 1:
              printf("BOOLEAN ");
              break;
            case 2:
              printf("INTEGER ");
              break;
            case 3:
              printf("BIT STRING ");
              break;
            case 4:
              printf("OCTET STRING ");
              break;
            case 5:
              printf("NULL ");
              break;
            case 6:
              printf("OBJECT IDENTIFIER ");
              break;
            case 7:
              printf("OBJECT DESCRIPTOR ");
              break;
            case 8:
              printf("EXTERNAL ");
              break;
            case 9:
              printf("REAL ");
              break;
            case 0xA:
              printf("ENUMERATED ");
              break;
            case 0xC:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
              printf("STRING ");
              break;
            case 0x10:
              printf("SEQUENCE ");
              break;
            case 0x11:
              printf("SET ");
              break;
            case 0x17:
            case 0x18:
              printf("TIME ");
              break;
            default:
              printf("[UNIVERSAL %lu] ");
              break;
          }
          break;
        case 3:
          printf("[APPLICATION %lu] ");
          break;
        default:
          break;
      }
    }
    if (*(unsigned char *)(a1 + 20)) {
      printf("(constructed) ");
    }
    if (*(unsigned char *)(a1 + 21)) {
      puts("Length = indefinite");
    }
    else {
      printf("Length = %ld\n", *(unsigned int *)(a1 + 16));
    }
  }
  while (!*(unsigned char *)(a1 + 20));
  sub_244CEA1E4(a1, 0, a4);
  if (!*(_DWORD *)a4)
  {
    int v11 = 1;
    goto LABEL_29;
  }
  long long v12 = *(_OWORD *)a4;
  uint64_t v13 = *(void *)(a4 + 16);
  sub_244CB7B34((const char **)&v12, 1);
  return printf("ASN1Reader::EnterConstructedType() failed: %s\n");
}

uint64_t sub_244CEAC78@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned char **)a2;
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if ((v4 | 2) == 0xF)
    {
      if (v3[v4 - 1] == 90)
      {
        uint64_t v5 = 0;
        do
        {
          if ((char)v3[v5] < 0 || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v3[v5] + 60) & 0x400) == 0)
          {
            *(_DWORD *)a3 = 773;
            *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
            int v9 = 80;
            goto LABEL_14;
          }
          ++v5;
        }
        while (v4 - 1 != v5);
        unsigned __int8 v6 = v3[1] + 10 * *v3 - 16;
        if (v4 == 15)
        {
          char v7 = v3[2];
          v3 += 2;
          __int16 v8 = 100 * v6 + (v3[1] + 10 * v7 - 16);
        }
        else
        {
          if ((v3[1] + 10 * *v3 - 16) <= 0x31u) {
            __int16 v10 = 2000;
          }
          else {
            __int16 v10 = 1900;
          }
          __int16 v8 = v10 + v6;
        }
        *(_WORD *)uint64_t result = v8;
        char v11 = v3[3] + 10 * v3[2];
        *(unsigned char *)(result + 2) = v11 - 16;
        char v12 = v3[5] + 10 * v3[4] - 16;
        *(unsigned char *)(result + 3) = v12;
        unsigned __int8 v13 = v3[7] + 10 * v3[6] - 16;
        *(unsigned char *)(result + 4) = v13;
        unsigned __int8 v14 = v3[9] + 10 * v3[8] - 16;
        *(unsigned char *)(result + 5) = v14;
        unsigned __int8 v15 = v3[11] + 10 * v3[10] - 16;
        *(unsigned char *)(result + 6) = v15;
        if ((v11 - 17) >= 0xCu)
        {
          *(_DWORD *)a3 = 773;
          *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          int v9 = 99;
        }
        else if ((v12 - 1) >= 0x1Fu)
        {
          *(_DWORD *)a3 = 773;
          *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          int v9 = 100;
        }
        else if (v13 >= 0x18u)
        {
          *(_DWORD *)a3 = 773;
          *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          int v9 = 101;
        }
        else if (v14 >= 0x3Cu)
        {
          *(_DWORD *)a3 = 773;
          *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          int v9 = 102;
        }
        else if (v15 >= 0x3Cu)
        {
          *(_DWORD *)a3 = 773;
          *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          int v9 = 103;
        }
        else
        {
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          int v9 = 105;
        }
      }
      else
      {
        *(_DWORD *)a3 = 774;
        *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
        int v9 = 77;
      }
    }
    else
    {
      *(_DWORD *)a3 = 774;
      *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
      int v9 = 76;
    }
  }
  else
  {
    *(_DWORD *)a3 = 771;
    *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
    int v9 = 74;
  }
LABEL_14:
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

unsigned __int8 *sub_244CEAEF0@<X0>(unsigned __int8 *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (unsigned char *)*a2;
  if (*a2)
  {
    unsigned int v5 = *(unsigned __int16 *)result;
    unint64_t v6 = a2[1];
    if ((unsigned __int16)(v5 - 2050) > 0xFF9Bu)
    {
      if (v6 >= 0xD) {
        goto LABEL_7;
      }
      int v7 = 125;
    }
    else
    {
      if (v6 >= 0xF)
      {
        v4[1] = (((5243 * (v5 >> 2)) >> 17) - 10 * ((6554 * ((5243 * (v5 >> 2)) >> 17)) >> 16)) | 0x30;
        unsigned char *v4 = (((8389 * (v5 >> 3)) >> 20) - 10 * ((103 * ((8389 * (v5 >> 3)) >> 20)) >> 10)) | 0x30;
        v4 += 2;
        unsigned int v5 = *(unsigned __int16 *)result;
LABEL_7:
        unsigned int v9 = (52429 * v5) >> 19;
        v4[1] = (v5 - 10 * v9) | 0x30;
        unsigned char *v4 = (v9 - 10 * ((6554 * v9) >> 16)) | 0x30;
        LOWORD(v9) = result[2] / 0xAu;
        void v4[3] = (result[2] % 0xAu) | 0x30;
        _OWORD v4[2] = (v9 - 10 * ((unsigned __int16)(26 * v9) >> 8)) | 0x30;
        __int16 v10 = result[3] / 0xAu;
        v4[5] = (result[3] % 0xAu) | 0x30;
        v4[4] = (v10 - 10 * ((unsigned __int16)(26 * v10) >> 8)) | 0x30;
        __int16 v11 = result[4] / 0xAu;
        _DWORD v4[7] = (result[4] % 0xAu) | 0x30;
        v4[6] = (v11 - 10 * ((unsigned __int16)(26 * v11) >> 8)) | 0x30;
        __int16 v12 = result[5] / 0xAu;
        v4[9] = (result[5] % 0xAu) | 0x30;
        uint8_t v4[8] = (v12 - 10 * ((unsigned __int16)(26 * v12) >> 8)) | 0x30;
        __int16 v13 = result[6] / 0xAu;
        unsigned int v14 = (result[6] % 0xAu) | 0x30;
        v4[12] = 90;
        unsigned __int8 v15 = v4 + 12;
        *(v15 - 1) = v14;
        *(v15 - 2) = (v13 - 10 * ((unsigned __int16)(26 * v13) >> 8)) | 0x30;
        uint64_t result = (unsigned __int8 *)sub_244CEB124((uint64_t)a2, (unint64_t)&v15[-*a2 + 1]);
        int v8 = 0;
        int v7 = 138;
        goto LABEL_11;
      }
      int v7 = 120;
    }
    int v8 = 769;
    goto LABEL_11;
  }
  int v7 = 112;
  int v8 = 771;
LABEL_11:
  *(_DWORD *)a3 = v8;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_244CEB124(uint64_t result, unint64_t a2)
{
  if (*(void *)(result + 8) < a2) {
    sub_244E21BB0();
  }
  *(void *)(result + 8) = a2;
  return result;
}

BOOL sub_244CEB14C(unsigned __int8 *a1, unsigned int *a2)
{
  return sub_244CC7BF4(*(unsigned __int16 *)a1, a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

uint64_t sub_244CEB170(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a2 + a3;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 104) = 0;
  return result;
}

uint64_t sub_244CEB184(uint64_t result)
{
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  return result;
}

uint64_t sub_244CEB194(void *a1)
{
  if (*a1) {
    return a1[2] - *a1;
  }
  else {
    return 0;
  }
}

void *sub_244CEB1B0@<X0>(void *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v5[1] = *MEMORY[0x263EF8340];
  if (*result)
  {
    uint64_t v3 = 0;
    v5[0] = bswap64(a2);
    while (1)
    {
      if (*((unsigned __int8 *)v5 + v3) == 255)
      {
        uint64_t v4 = v3 + 1;
        if ((*((char *)v5 + v3 + 1) & 0x80000000) == 0) {
          return sub_244CEB28C(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (void *)a3);
        }
      }
      else
      {
        if (*((unsigned char *)v5 + v3)) {
          return sub_244CEB28C(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (void *)a3);
        }
        uint64_t v4 = v3 + 1;
        if (*((char *)v5 + v3 + 1) < 0) {
          return sub_244CEB28C(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (void *)a3);
        }
      }
      uint64_t v3 = v4;
      if (v4 == 7) {
        return sub_244CEB28C(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (void *)a3);
      }
    }
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a3 + 16) = 75;
  return result;
}

void *sub_244CEB28C@<X0>(void *result@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, const void *a5@<X4>, unsigned int a6@<W5>, void *a7@<X8>)
{
  if (*result)
  {
    __int16 v10 = result;
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    uint64_t result = (void *)sub_244CEB3BC((uint64_t)result, a2, a3, a4, a6, (uint64_t)a7);
    if (*(_DWORD *)a7) {
      return result;
    }
    uint64_t result = memcpy((void *)v10[2], a5, a6);
    v10[2] += a6;
    int v11 = 330;
  }
  else
  {
    int v11 = 324;
  }
  *(_DWORD *)a7 = 0;
  a7[1] = "src/lib/asn1/ASN1Writer.cpp";
  *((_DWORD *)a7 + 4) = v11;
  return result;
}

void *sub_244CEB320@<X0>(void *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (*result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v3 = (unsigned char *)result[2];
    if ((unint64_t)(v3 + 3) <= result[1])
    {
      result[2] = v3 + 1;
      unsigned char *v3 = 1;
      *(unsigned char *)result[2] = 1;
      uint64_t v5 = result[2];
      result[2] = v5 + 2;
      *(unsigned char *)(v5 + 1) = a2 << 31 >> 31;
      *(_DWORD *)a3 = 0;
      a3[1] = "src/lib/asn1/ASN1Writer.cpp";
      int v4 = 103;
    }
    else
    {
      *(_DWORD *)a3 = 770;
      a3[1] = "src/lib/asn1/ASN1Writer.cpp";
      int v4 = 369;
    }
  }
  else
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/asn1/ASN1Writer.cpp";
    int v4 = 97;
  }
  *((_DWORD *)a3 + 4) = v4;
  return result;
}

uint64_t sub_244CEB3BC@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (!*(void *)result)
  {
    int v13 = 0;
    int v12 = 351;
    goto LABEL_25;
  }
  if (a3 > 0x1E)
  {
    int v12 = 357;
LABEL_24:
    int v13 = 774;
    goto LABEL_25;
  }
  if (a5 < -1)
  {
    int v12 = 360;
    goto LABEL_24;
  }
  if (HIBYTE(a5)) {
    char v6 = 5;
  }
  else {
    char v6 = 4;
  }
  if (a5 >= 0x10000) {
    char v7 = v6;
  }
  else {
    char v7 = 3;
  }
  if (a5 >= 0x100) {
    char v8 = v7;
  }
  else {
    char v8 = 2;
  }
  if (a5 >= 128) {
    unsigned __int8 v9 = v8;
  }
  else {
    unsigned __int8 v9 = 1;
  }
  if (a5 == -1) {
    int v10 = 0;
  }
  else {
    int v10 = a5;
  }
  int v11 = *(unsigned char **)(result + 16);
  if ((unint64_t)&v11[v10 + (v9 + 1)] <= *(void *)(result + 8))
  {
    if (a4) {
      char v14 = 32;
    }
    else {
      char v14 = 0;
    }
    *(void *)(result + 16) = v11 + 1;
    unsigned char *v11 = v14 | a2 | a3;
    if (a5 == -1)
    {
      if (*(unsigned __int8 *)(result + 104) > 9u)
      {
        int v12 = 389;
        int v13 = 771;
        goto LABEL_25;
      }
      **(unsigned char **)(result + 16) = -1;
      uint64_t v16 = *(void *)(result + 16);
      uint64_t v17 = *(unsigned __int8 *)(result + 104);
      *(unsigned char *)(result + 104) = v17 + 1;
      *(void *)(result + 8 * v17 + 24) = v16;
    }
    else
    {
      unsigned __int8 v15 = *(unsigned char **)(result + 16);
      if (v9 == 1)
      {
        unsigned char *v15 = a5;
      }
      else
      {
        unsigned char *v15 = (v9 - 1) | 0x80;
        uint64_t v18 = (v9 - 1);
        do
        {
          v15[v18] = a5;
          a5 >>= 8;
          --v18;
        }
        while ((_BYTE)v18);
      }
    }
    int v13 = 0;
    *(void *)(result + 16) += v9;
    int v12 = 397;
  }
  else
  {
    int v12 = 369;
    int v13 = 770;
  }
LABEL_25:
  *(_DWORD *)a6 = v13;
  *(void *)(a6 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a6 + 16) = v12;
  return result;
}

void *sub_244CEB524@<X0>(void *a1@<X0>, const void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  return sub_244CEB28C(a1, 0, 6u, 0, a2, a3, a4);
}

void *sub_244CEB53C@<X0>(void *a1@<X0>, unsigned int a2@<W1>, const void *a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  return sub_244CEB28C(a1, 0, a2, 0, a3, a4, a5);
}

void *sub_244CEB554@<X0>(void *a1@<X0>, const void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  return sub_244CEB28C(a1, 0, 4u, 0, a2, a3, a4);
}

void *sub_244CEB56C@<X0>(void *a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, const void *a4@<X3>, unsigned int a5@<W4>, void *a6@<X8>)
{
  return sub_244CEB28C(a1, a2, a3, 0, a4, a5, a6);
}

void sub_244CEB57C(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void sub_244CEB588(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  long long v15 = 0uLL;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_244CB40C8(a5, &v15, a6);
  if (!*(_DWORD *)a6)
  {
    int v11 = DWORD2(v15);
    if (*((void *)&v15 + 1) >> 31)
    {
      int v14 = 338;
      int v13 = 776;
    }
    else if (*(void *)a1)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      sub_244CEB3BC(a1, a2, a3, a4, v11, (uint64_t)a6);
      if (*(_DWORD *)a6) {
        return;
      }
      uint64_t v12 = *((void *)&v15 + 1);
      memcpy(*(void **)(a1 + 16), (const void *)v15, *((size_t *)&v15 + 1));
      int v13 = 0;
      *(void *)(a1 + 16) += v12;
      int v14 = 346;
    }
    else
    {
      int v13 = 0;
      int v14 = 340;
    }
    *(_DWORD *)a6 = v13;
    a6[1] = "src/lib/asn1/ASN1Writer.cpp";
    *((_DWORD *)a6 + 4) = v14;
  }
}

void *sub_244CEB67C@<X0>(void *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (!*result)
  {
    int v18 = 173;
LABEL_45:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "src/lib/asn1/ASN1Writer.cpp";
    *(_DWORD *)(a3 + 16) = v18;
    return result;
  }
  uint64_t v5 = result;
  unsigned int v6 = HIBYTE(a2);
  BOOL v7 = HIBYTE(a2) != 0;
  if (HIBYTE(a2)) {
    int v8 = 5;
  }
  else {
    int v8 = 4;
  }
  int v9 = 1;
  if (a2 >= 0x10000)
  {
    int v10 = v8;
  }
  else
  {
    BOOL v7 = 0;
    int v10 = 3;
  }
  if (a2 >= 0x100)
  {
    BOOL v11 = a2 >= 0x10000;
  }
  else
  {
    int v9 = 0;
    BOOL v11 = 0;
  }
  if (a2 >= 0x100)
  {
    int v12 = v10;
  }
  else
  {
    BOOL v7 = 0;
    int v12 = 2;
  }
  if (a2) {
    int v13 = v9;
  }
  else {
    int v13 = 0;
  }
  if (a2) {
    BOOL v14 = v11;
  }
  else {
    BOOL v14 = 0;
  }
  if (a2) {
    BOOL v15 = v7;
  }
  else {
    BOOL v15 = 0;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2) {
    unsigned int v16 = v12;
  }
  else {
    unsigned int v16 = 1;
  }
  uint64_t result = (void *)sub_244CEB3BC((uint64_t)result, 0, 3u, 0, v16, a3);
  if (!*(_DWORD *)a3)
  {
    if (a2)
    {
      *(unsigned char *)(v5[2] + 1) = __rbit32(a2) >> 24;
      if (v13)
      {
        unsigned int v17 = a2 >> 8;
        *(unsigned char *)(v5[2] + 2) = __rbit32(a2 >> 8) >> 24;
        if (v14)
        {
          unsigned int v17 = HIWORD(a2);
          *(unsigned char *)(v5[2] + 3) = __rbit32(HIWORD(a2)) >> 24;
          if (v15)
          {
            *(unsigned char *)(v5[2] + 4) = __rbit32(v6) >> 24;
            unsigned int v17 = v6;
          }
        }
      }
      else
      {
        unsigned int v17 = a2;
      }
      BOOL v20 = HIWORD(v17) != 0;
      if (HIWORD(v17)) {
        v17 >>= 16;
      }
      char v21 = 16 * v20;
      if (v17 > 0xFF)
      {
        v17 >>= 8;
        char v21 = (16 * v20) | 8;
      }
      if (v17 > 0xF)
      {
        v17 >>= 4;
        v21 |= 4u;
      }
      if (v17 > 3)
      {
        v17 >>= 2;
        v21 |= 2u;
      }
      char v19 = 7 - (v21 | (v17 >> 1));
    }
    else
    {
      char v19 = 0;
    }
    *(unsigned char *)void v5[2] = v19;
    v5[2] += v16;
    int v18 = 216;
    goto LABEL_45;
  }
  return result;
}

void *sub_244CEB850@<X0>(void *result@<X0>, char a2@<W1>, const void *a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  if (*result)
  {
    int v9 = result;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t result = (void *)sub_244CEB3BC((uint64_t)result, 0, 3u, 0, a4 + 1, (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    int v10 = (unsigned char *)v9[2];
    uint64_t v9[2] = v10 + 1;
    unsigned char *v10 = a2;
    uint64_t result = memcpy((void *)v9[2], a3, a4);
    v9[2] += a4;
    int v11 = 229;
  }
  else
  {
    int v11 = 221;
  }
  *(_DWORD *)a5 = 0;
  a5[1] = "src/lib/asn1/ASN1Writer.cpp";
  *((_DWORD *)a5 + 4) = v11;
  return result;
}

void *sub_244CEB90C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result = memcpy(*(void **)(a1 + 16), a2, a3);
  *(void *)(a1 + 16) += a3;
  return result;
}

void sub_244CEB944(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  long long v12 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_244CB40C8(a3, &v12, a4);
  if (!*(_DWORD *)a4)
  {
    int v7 = DWORD2(v12);
    if ((unint64_t)(*((void *)&v12 + 1) + 1) >> 31)
    {
      int v11 = 237;
      LODWORD(v8) = 776;
    }
    else
    {
      uint64_t v8 = *(void *)a1;
      if (*(void *)a1)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_244CEB3BC(a1, 0, 3u, 0, v7 + 1, (uint64_t)a4);
        if (*(_DWORD *)a4) {
          return;
        }
        int v9 = *(unsigned char **)(a1 + 16);
        *(void *)(a1 + 16) = v9 + 1;
        unsigned char *v9 = a2;
        uint64_t v10 = *((void *)&v12 + 1);
        memcpy(*(void **)(a1 + 16), (const void *)v12, *((size_t *)&v12 + 1));
        LODWORD(v8) = 0;
        *(void *)(a1 + 16) += v10;
        int v11 = 248;
      }
      else
      {
        int v11 = 239;
      }
    }
    *(_DWORD *)a4 = v8;
    a4[1] = "src/lib/asn1/ASN1Writer.cpp";
    *((_DWORD *)a4 + 4) = v11;
  }
}

unsigned __int8 *sub_244CEBA3C@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)result)
  {
    uint64_t v5 = result;
    int v7 = v9;
    uint64_t v8 = 15;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t result = sub_244CEAEF0(a2, &v7, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      if (*(unsigned __int16 *)a2 <= 0x801u) {
        unsigned int v6 = 23;
      }
      else {
        unsigned int v6 = 24;
      }
      return (unsigned __int8 *)sub_244CEB28C(v5, 0, v6, 0, v9, (unsigned __int16)v8, a3);
    }
  }
  else
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/asn1/ASN1Writer.cpp";
    *((_DWORD *)a3 + 4) = 253;
  }
  return result;
}

uint64_t *sub_244CEBB1C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = (unsigned char *)result[2];
    if ((unint64_t)(v3 + 2) <= result[1])
    {
      LODWORD(v2) = 0;
      result[2] = (uint64_t)(v3 + 1);
      unsigned char *v3 = 5;
      *(unsigned char *)result[2]++ = 0;
      int v4 = 397;
    }
    else
    {
      int v4 = 369;
      LODWORD(v2) = 770;
    }
  }
  else
  {
    int v4 = 351;
  }
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

void *sub_244CEBB8C@<X0>(size_t __n@<X2>, void *result@<X0>, const void *a3@<X1>, uint64_t a4@<X8>)
{
  if (*result)
  {
    uint64_t v5 = result;
    uint64_t result = (void *)result[2];
    if ((unint64_t)result + __n <= v5[1])
    {
      uint64_t v8 = __n;
      uint64_t result = memcpy(result, a3, __n);
      int v7 = 0;
      v5[2] += v8;
      int v6 = 286;
    }
    else
    {
      int v6 = 282;
      int v7 = 770;
    }
  }
  else
  {
    int v7 = 0;
    int v6 = 279;
  }
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t sub_244CEBC20@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_244CEB3BC(a1, a2, a3, 1, -1, a4);
}

unsigned char *sub_244CEBC30@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)result)
  {
    uint64_t v3 = result;
    if (!result[104])
    {
      int v5 = 404;
      goto LABEL_7;
    }
    unint64_t v4 = *(void *)&result[8 * result[104] + 16];
    if (*(unsigned __int8 *)v4 != 255)
    {
      int v5 = 408;
LABEL_7:
      int v6 = 771;
      goto LABEL_8;
    }
    uint64_t v7 = *((void *)result + 2);
    size_t v8 = v7 + ~v4;
    if (!(v8 >> 31))
    {
      if (v8 >= 0x80)
      {
        if (v8 >= 0x100)
        {
          if (v8 >= 0x10000)
          {
            if (BYTE3(v8)) {
              unsigned __int8 v9 = 5;
            }
            else {
              unsigned __int8 v9 = 4;
            }
          }
          else
          {
            unsigned __int8 v9 = 3;
          }
        }
        else
        {
          unsigned __int8 v9 = 2;
        }
        unint64_t v10 = v7 + v9 - 1;
        *((void *)result + 2) = v10;
        if (v10 > *((void *)result + 1))
        {
          int v5 = 423;
          int v6 = 770;
          goto LABEL_8;
        }
        unsigned __int8 v11 = v9;
        uint64_t result = memmove((void *)(v4 + v9), (const void *)(v4 + 1), v8);
        *(unsigned char *)unint64_t v4 = (v11 - 1) | 0x80;
        uint64_t v12 = (v11 - 1);
        do
        {
          *(unsigned char *)(v4 + v12) = v8;
          LODWORD(v8) = (int)v8 >> 8;
          --v12;
        }
        while ((_BYTE)v12);
      }
      else
      {
        *(unsigned char *)unint64_t v4 = v8;
      }
      int v6 = 0;
      --v3[104];
      int v5 = 434;
      goto LABEL_8;
    }
    int v5 = 413;
    int v6 = 776;
  }
  else
  {
    int v6 = 0;
    int v5 = 402;
  }
LABEL_8:
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

void *sub_244CEBD90@<X0>(void *result@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *result;
  if (*result)
  {
    size_t v8 = result;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t result = (void *)sub_244CEB3BC((uint64_t)result, a2, a3, 0, -1, (uint64_t)a5);
    if (*(_DWORD *)a5) {
      return result;
    }
    if (a4)
    {
      unsigned __int8 v9 = (unsigned char *)v8[2];
      if ((unint64_t)v9 >= v8[1])
      {
        int v10 = 310;
        LODWORD(v6) = 770;
        goto LABEL_10;
      }
      LODWORD(v6) = 0;
      void v8[2] = v9 + 1;
      unsigned char *v9 = 0;
    }
    else
    {
      LODWORD(v6) = 0;
    }
    int v10 = 314;
  }
  else
  {
    int v10 = 301;
  }
LABEL_10:
  *(_DWORD *)a5 = v6;
  a5[1] = "src/lib/asn1/ASN1Writer.cpp";
  *((_DWORD *)a5 + 4) = v10;
  return result;
}

uint64_t sub_244CEBE3C(unsigned int a1)
{
  if (HIBYTE(a1)) {
    char v1 = 5;
  }
  else {
    char v1 = 4;
  }
  if (a1 >= 0x10000) {
    char v2 = v1;
  }
  else {
    char v2 = 3;
  }
  if (a1 >= 0x100) {
    unsigned __int8 v3 = v2;
  }
  else {
    unsigned __int8 v3 = 2;
  }
  if ((int)a1 >= 128) {
    return v3;
  }
  else {
    return 1;
  }
}

unsigned char *sub_244CEBE78(unsigned char *result, int a2, int a3)
{
  if (a2 == 1)
  {
    *uint64_t result = a3;
  }
  else
  {
    *uint64_t result = (a2 - 1) | 0x80;
    uint64_t v3 = (a2 - 1);
    do
    {
      result[v3] = a3;
      a3 >>= 8;
      --v3;
    }
    while ((_BYTE)v3);
  }
  return result;
}

void sub_244CEBEAC(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, unint64_t a5@<X6>, char *a6@<X7>, uint64_t a7@<X8>, char *a8, uint64_t a9)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  *(_OWORD *)a7 = xmmword_26519CE80;
  *(void *)(a7 + 16) = 163;
  char v21 = 0;
  if (a2 | (unint64_t)a6) {
    BOOL v14 = a6;
  }
  else {
    BOOL v14 = &v23;
  }
  if ((unint64_t)a1 | a2) {
    BOOL v15 = a1;
  }
  else {
    BOOL v15 = &v21;
  }
  if (!a6 || a2)
  {
    if (!v15)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 191;
      goto LABEL_29;
    }
    if (!v14)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 192;
      goto LABEL_29;
    }
    if (!a4)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 193;
      goto LABEL_29;
    }
    if (!a5)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 194;
      goto LABEL_29;
    }
    if (a5 >> 31)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 195;
      goto LABEL_29;
    }
    if (!a8)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 196;
      goto LABEL_29;
    }
    if (a9 != 16)
    {
      *(_DWORD *)a7 = 47;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 198;
      goto LABEL_29;
    }
    unsigned int v17 = sub_244D23F34();
    int v18 = sub_244D21B64((uint64_t)v17, a3, 16, 16);
    if (!v18)
    {
      *(_DWORD *)a7 = 11;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v16 = 208;
      goto LABEL_29;
    }
    char v19 = v18;
    if (sub_244D21EB8(v18, v14, a8, &v22, 0x10uLL, a4, a5, v15, a2, 0, 0) == 1)
    {
      if (v22 == 16)
      {
LABEL_33:
        sub_244D21C6C(v19);
        return;
      }
      int v20 = 213;
    }
    else
    {
      int v20 = 212;
    }
    *(_DWORD *)a7 = 172;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a7 + 16) = v20;
    goto LABEL_33;
  }
  *(_DWORD *)a7 = 47;
  *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  int v16 = 190;
LABEL_29:
  *(_DWORD *)(a7 + 16) = v16;
}

void sub_244CEC134(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, char *a9)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)a7 = xmmword_26519CE98;
  *(void *)(a7 + 16) = 297;
  char v19 = 0;
  if ((unint64_t)a1 | a2) {
    int v10 = a1;
  }
  else {
    int v10 = &v19;
  }
  if (a2 | (unint64_t)a9) {
    unsigned __int8 v11 = a9;
  }
  else {
    unsigned __int8 v11 = &v20;
  }
  if (!v10)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 324;
LABEL_24:
    *(_DWORD *)(a7 + 16) = v18;
    return;
  }
  if (!v11)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 325;
    goto LABEL_24;
  }
  if (!a3)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 326;
    goto LABEL_24;
  }
  if (a4 != 16)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 328;
    goto LABEL_24;
  }
  if (!a6)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 333;
    goto LABEL_24;
  }
  if (!a8)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 334;
    goto LABEL_24;
  }
  BOOL v15 = sub_244D23F34();
  int v16 = sub_244D21B64((uint64_t)v15, a5, 16, 16);
  if (!v16)
  {
    *(_DWORD *)a7 = 11;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v18 = 340;
    goto LABEL_24;
  }
  unsigned int v17 = v16;
  if (sub_244D2212C((uint64_t)v16, v11, a6, a8, v10, a2) != 1)
  {
    *(_DWORD *)a7 = 172;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a7 + 16) = 344;
  }
  sub_244D21C6C(v17);
}

char *sub_244CEC354@<X0>(char *result@<X0>, size_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (!result)
  {
    int v6 = 417;
LABEL_6:
    int v5 = 47;
    goto LABEL_7;
  }
  if (!a3)
  {
    int v6 = 418;
    goto LABEL_6;
  }
  uint64_t result = (char *)sub_244D26A24(result, a2, a3);
  int v5 = 0;
  int v6 = 422;
LABEL_7:
  *(_DWORD *)a4 = v5;
  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

char *sub_244CEC3B0@<X0>(char *result@<X0>, size_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (!result)
  {
    int v6 = 428;
LABEL_6:
    int v5 = 47;
    goto LABEL_7;
  }
  if (!a3)
  {
    int v6 = 429;
    goto LABEL_6;
  }
  uint64_t result = (char *)sub_244D36E90(result, a2, a3);
  int v5 = 0;
  int v6 = 433;
LABEL_7:
  *(_DWORD *)a4 = v5;
  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

void *sub_244CEC40C(void *a1)
{
  return a1;
}

void sub_244CEC438(void *a1)
{
}

uint64_t sub_244CEC440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_244D38458(a1);
  if (result == 1) {
    int v4 = 0;
  }
  else {
    int v4 = 172;
  }
  if (result == 1) {
    int v5 = 458;
  }
  else {
    int v5 = 456;
  }
  *(_DWORD *)a2 = v4;
  *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_244CEC490@<X0>(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_244D3848C(a1, a2, a3);
  if (result == 1) {
    int v6 = 0;
  }
  else {
    int v6 = 172;
  }
  if (result == 1) {
    int v7 = 468;
  }
  else {
    int v7 = 466;
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

__n128 sub_244CEC4E0@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __n128 v9 = a1[4];
  __n128 v10 = a1[5];
  __n128 v11 = a1[6];
  __n128 v5 = *a1;
  __n128 v6 = a1[1];
  __n128 v7 = a1[2];
  __n128 v8 = a1[3];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_244CEC580((uint64_t)a1, a2, (uint64_t)a3);
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  *a1 = v5;
  a1[1] = v6;
  __n128 result = v8;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t sub_244CEC580@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if ((unint64_t)a2[1] < 0x20)
  {
    int v7 = 489;
    int v5 = 25;
  }
  else
  {
    __n128 result = sub_244D384E0((_DWORD *)*a2, result);
    if (result == 1)
    {
      __n128 result = sub_244CDAEA0(a2, 0, 0x20uLL);
      int v5 = 0;
      *a2 = result;
      a2[1] = (uint64_t)v6;
      int v7 = 496;
    }
    else
    {
      int v7 = 493;
      int v5 = 172;
    }
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_244CEC60C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  *(_OWORD *)a8 = xmmword_26519CEB0;
  *(void *)(a8 + 16) = 507;
  unsigned int v17 = sub_244D0D678(963, 0);
  if (!v17)
  {
    *(_DWORD *)a8 = 172;
    *(void *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a8 + 16) = 511;
    return;
  }
  int v18 = v17;
  if (!a1)
  {
    int v19 = 513;
    goto LABEL_28;
  }
  if (!a2)
  {
    int v19 = 514;
    goto LABEL_28;
  }
  if (!a3 && a4)
  {
    int v19 = 519;
LABEL_28:
    int v20 = 47;
LABEL_29:
    *(_DWORD *)a8 = v20;
    *(void *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a8 + 16) = v19;
    goto LABEL_30;
  }
  if (!a6)
  {
    int v19 = 522;
    goto LABEL_28;
  }
  if (!a5)
  {
    int v19 = 523;
    goto LABEL_28;
  }
  if (!a9)
  {
    int v19 = 524;
    goto LABEL_28;
  }
  if (!a7)
  {
    int v19 = 525;
    goto LABEL_28;
  }
  if (sub_244D0DDA8(v17) != 1)
  {
    int v19 = 528;
    goto LABEL_37;
  }
  sub_244D25C38();
  if (sub_244D10AA0(v18) != 1)
  {
    int v19 = 531;
    goto LABEL_37;
  }
  if (sub_244D10AB8(v18) != 1)
  {
    int v19 = 536;
    goto LABEL_37;
  }
  if (a3 && a4 && sub_244D10AF0(v18) != 1)
  {
    int v19 = 543;
    goto LABEL_37;
  }
  if (sub_244D10B28(v18) != 1)
  {
    int v19 = 549;
    goto LABEL_37;
  }
  if (sub_244D10A88(v18) != 1)
  {
    int v19 = 552;
    goto LABEL_37;
  }
  if (sub_244D0DFA4(v18) != 1)
  {
    int v19 = 556;
LABEL_37:
    int v20 = 172;
    goto LABEL_29;
  }
LABEL_30:
  sub_244D0D71C(v18);
}

void sub_244CEC80C(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  if (!a1)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v14 = 569;
LABEL_18:
    *(_DWORD *)(a7 + 16) = v14;
    return;
  }
  if (!a2)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v14 = 570;
    goto LABEL_18;
  }
  if (!a3)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v14 = 571;
    goto LABEL_18;
  }
  if (!a4)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v14 = 572;
    goto LABEL_18;
  }
  if (a6 <= 0x1F)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v14 = 573;
    goto LABEL_18;
  }
  if (!a5)
  {
    *(_DWORD *)a7 = 47;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v14 = 574;
    goto LABEL_18;
  }
  *(_OWORD *)a7 = xmmword_26519CEC8;
  *(void *)(a7 + 16) = 576;
  int v15 = 0;
  __n128 v11 = sub_244D2EE10();
  if (v11)
  {
    uint64_t v12 = sub_244D25C38();
    if (sub_244D2EAF4((uint64_t)v11, a1, a2, (uint64_t)v12) == 1)
    {
      if (sub_244D2ECD0((uint64_t)v11) == 1)
      {
        int v15 = 32;
        if (sub_244D2ECF4((uint64_t)v11, a5, &v15) == 1)
        {
          *(_DWORD *)a7 = 0;
          *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          int v13 = 595;
        }
        else
        {
          *(_DWORD *)a7 = 172;
          *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          int v13 = 593;
        }
      }
      else
      {
        *(_DWORD *)a7 = 172;
        *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v13 = 589;
      }
    }
    else
    {
      *(_DWORD *)a7 = 172;
      *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v13 = 586;
    }
  }
  else
  {
    *(_DWORD *)a7 = 172;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v13 = 581;
  }
  *(_DWORD *)(a7 + 16) = v13;
  sub_244D2EED4(v11);
}

uint64_t sub_244CECA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, 16, a3, a4, a5, a6);
}

uint64_t sub_244CECA74@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, unsigned int a5@<W5>, unsigned int a6@<W6>, char *a7@<X7>, uint64_t a8@<X8>)
{
  *(_OWORD *)a8 = xmmword_26519CEE0;
  *(void *)(a8 + 16) = 611;
  if (!a1)
  {
    int v18 = 615;
LABEL_18:
    int v19 = 47;
    goto LABEL_19;
  }
  if (!a2)
  {
    int v18 = 616;
    goto LABEL_18;
  }
  if (!a3)
  {
    int v18 = 617;
    goto LABEL_18;
  }
  if (a4 < 0x10)
  {
    int v18 = 618;
    goto LABEL_18;
  }
  if (a4 > 0x20)
  {
    int v18 = 619;
    goto LABEL_18;
  }
  if (!a6)
  {
    int v18 = 620;
    goto LABEL_18;
  }
  if (!a7)
  {
    int v18 = 621;
    goto LABEL_18;
  }
  int v16 = sub_244D25C38();
  if (v16)
  {
    uint64_t result = sub_244D127A0(a1, a2, a3, a4, a5, (uint64_t)v16, a6, a7);
    if (result == 1) {
      return result;
    }
    int v18 = 635;
  }
  else
  {
    int v18 = 624;
  }
  int v19 = 172;
LABEL_19:
  *(_DWORD *)a8 = v19;
  *(void *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a8 + 16) = v18;

  return sub_244CECBC0();
}

uint64_t sub_244CECBC0()
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = sub_244D0AF18();
  if (result)
  {
    unsigned int v1 = result;
    do
    {
      char v2 = sub_244D0B334(v1);
      uint64_t v3 = sub_244D0B3A4();
      int v4 = sub_244D0B3B0(v1);
      if (v2)
      {
        int v5 = v4;
        __n128 v6 = sub_244CC8484(8u, "Crypto");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          if (v3) {
            int v7 = v3;
          }
          else {
            int v7 = "(null)";
          }
          *(_DWORD *)int buf = 136315650;
          __n128 v10 = v2;
          if (v5) {
            __n128 v8 = v5;
          }
          else {
            __n128 v8 = "(null)";
          }
          __int16 v11 = 2080;
          uint64_t v12 = v7;
          __int16 v13 = 2080;
          int v14 = v8;
          _os_log_impl(&dword_2446BD000, v6, OS_LOG_TYPE_ERROR, " ssl err  %s %s %s\n", buf, 0x20u);
        }
        if (sub_244CC4E58(1u)) {
          sub_244CC4DE0(8u, 1);
        }
      }
      uint64_t result = sub_244D0AF18();
      unsigned int v1 = result;
    }
    while (result);
  }
  return result;
}

void sub_244CECD40(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a1 + 16) = 648;
}

char *sub_244CECD5C@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result)
  {
    if (a2)
    {
      uint64_t result = (char *)sub_244D20964(result, a2);
      if (result == 1)
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v4 = 660;
      }
      else
      {
        *(_DWORD *)a3 = 172;
        *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v4 = 658;
      }
    }
    else
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v4 = 654;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v4 = 653;
  }
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

BOOL sub_244CECDFC(int a1)
{
  return a1 == 0;
}

void sub_244CECE08(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  __int16 v13 = 0;
  int v14 = 0;
  if (!__src || !__n)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a5 + 16) = 698;
    return;
  }
  memset(v15, 0, sizeof(v15));
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  sub_244D26A24(__src, __n, v15);
  sub_244D0B1B0();
  if (!*(unsigned char *)(a3 + 600))
  {
    int v11 = 708;
    int v12 = 28;
LABEL_22:
    sub_244CECBC0();
    goto LABEL_23;
  }
  if (!sub_244D28A78("P-256"))
  {
    int v11 = 710;
    int v12 = 47;
    goto LABEL_22;
  }
  __n128 v8 = *(uint64_t **)(a3 + 88);
  if (!v8)
  {
    int v11 = 713;
LABEL_21:
    int v12 = 172;
    goto LABEL_22;
  }
  __n128 v9 = sub_244D27580((unint64_t *)v15, 0x20uLL, v8);
  if (!v9)
  {
    int v11 = 716;
    goto LABEL_21;
  }
  __n128 v10 = v9;
  sub_244D07E48(v9, &v14, &v13);
  int v11 = 718;
  if (!v14 || !v13) {
    goto LABEL_20;
  }
  sub_244D1695C(v14);
  sub_244D1695C(v13);
  if (sub_244D1695C(v14) > 0x20 || sub_244D1695C(v13) > 0x20)
  {
    int v11 = 722;
LABEL_20:
    sub_244D07DFC(v10);
    goto LABEL_21;
  }
  *(void *)(a4 + 64) = 64;
  if (sub_244CFABD0((uint64_t)v14, (char *)a4, 0x20u) != 32)
  {
    int v11 = 726;
    goto LABEL_20;
  }
  if (sub_244CFABD0((uint64_t)v13, (char *)(a4 + 32), 0x20u) != 32)
  {
    int v11 = 728;
    goto LABEL_20;
  }
  sub_244D07DFC(v10);
  int v12 = 0;
  int v11 = 691;
LABEL_23:
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = 0;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v11;
  *(_DWORD *)(a5 + 20) = 0;
}

void sub_244CECFEC(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (__src && __n)
  {
    memset(v8, 0, sizeof(v8));
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_244D26A24(__src, __n, v8);
    *(_DWORD *)a5 = 0;
    a5[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *((_DWORD *)a5 + 4) = 422;
    sub_244CED0CC(a3, (uint64_t)v8, 32, a4, (uint64_t)a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    a5[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *((_DWORD *)a5 + 4) = 748;
  }
}

void sub_244CED0CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_244D0B1B0();
  *(_OWORD *)a5 = xmmword_26519CEF8;
  *(void *)(a5 + 16) = 761;
  if (!a2)
  {
    int v27 = 771;
LABEL_25:
    int v28 = 47;
    goto LABEL_26;
  }
  if (a3 != 32)
  {
    int v27 = 772;
    goto LABEL_25;
  }
  if (*(void *)(a4 + 64) != 64)
  {
    int v27 = 773;
    goto LABEL_25;
  }
  int v10 = sub_244D28A78("P-256");
  if (!v10)
  {
    int v27 = 776;
    goto LABEL_25;
  }
  int v11 = v10;
  int v12 = sub_244D284EC(v10);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12;
    int v14 = sub_244D28B04((uint64_t)v12);
    if (!v14)
    {
      *(_DWORD *)a5 = 11;
      *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *(_DWORD *)(a5 + 16) = 782;
      sub_244CECBC0();
LABEL_40:
      sub_244D2826C(v13);
      return;
    }
    uint64_t v15 = v14;
    if (sub_244D2AB28(v13, (uint64_t)v14, (unsigned __int8 *)(a1 + 8), 65, 0) == 1)
    {
      uint64_t v16 = sub_244D2A330(v11);
      if (v16)
      {
        uint64_t v17 = (uint64_t)v16;
        if (sub_244D2A554((uint64_t)v16, v15))
        {
          if (sub_244D2A77C(v17) == 1)
          {
            int v18 = sub_244D16D20((unsigned __int8 *)a4, 0x20uLL, 0);
            if (v18)
            {
              int v19 = (void **)v18;
              int v20 = sub_244D16D20((unsigned __int8 *)(a4 + 32), 0x20uLL, 0);
              if (v20)
              {
                uint64_t v21 = (void **)v20;
                uint64_t v22 = sub_244D26C98();
                if (v22)
                {
                  char v23 = v22;
                  if (sub_244D07E64((void ***)v22, v19, v21) == 1)
                  {
                    int v24 = sub_244D2718C(a2, 32, v23, v17);
                    if (v24 == 1) {
                      int v25 = 0;
                    }
                    else {
                      int v25 = 20;
                    }
                    if (v24 == 1) {
                      int v26 = 811;
                    }
                    else {
                      int v26 = 810;
                    }
                  }
                  else
                  {
                    int v26 = 807;
                    int v25 = 172;
                  }
                  *(_DWORD *)a5 = v25;
                  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  *(_DWORD *)(a5 + 16) = v26;
                  sub_244CECBC0();
                  sub_244D07DFC(v23);
                  goto LABEL_38;
                }
                *(_DWORD *)a5 = 11;
                *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                *(_DWORD *)(a5 + 16) = 804;
                sub_244CECBC0();
                sub_244D16710(v21);
              }
              else
              {
                *(_DWORD *)a5 = 11;
                *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                *(_DWORD *)(a5 + 16) = 801;
                sub_244CECBC0();
              }
              sub_244D16710(v19);
LABEL_38:
              sub_244D2A380(v17);
              goto LABEL_39;
            }
            int v31 = 798;
            int v32 = 11;
LABEL_37:
            *(_DWORD *)a5 = v32;
            *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            *(_DWORD *)(a5 + 16) = v31;
            sub_244CECBC0();
            goto LABEL_38;
          }
          int v31 = 794;
        }
        else
        {
          int v31 = 791;
        }
        int v32 = 172;
        goto LABEL_37;
      }
      int v29 = 788;
      int v30 = 11;
    }
    else
    {
      int v29 = 785;
      int v30 = 172;
    }
    *(_DWORD *)a5 = v30;
    *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a5 + 16) = v29;
    sub_244CECBC0();
LABEL_39:
    sub_244D28BF4(v15);
    goto LABEL_40;
  }
  int v27 = 779;
  int v28 = 11;
LABEL_26:
  *(_DWORD *)a5 = v28;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v27;

  sub_244CECBC0();
}

uint64_t sub_244CED3D8(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_244CED3E0()
{
  return 65;
}

uint64_t sub_244CED3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_244D0B1B0();
  *(_OWORD *)a4 = xmmword_26519CF10;
  *(void *)(a4 + 16) = 916;
  uint64_t v8 = sub_244D2A41C(*(void *)(a1 + 88));
  if (!v8)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = 925;
    return sub_244CECBC0();
  }
  uint64_t v9 = v8;
  if (!*(unsigned char *)(a1 + 600))
  {
    int v25 = 927;
    int v26 = 28;
LABEL_17:
    *(_DWORD *)a4 = v26;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = v25;
    sub_244D2A380(v9);
    return sub_244CECBC0();
  }
  sub_244D0BFA4();
  if (!v10)
  {
    int v25 = 930;
    int v26 = 172;
    goto LABEL_17;
  }
  uint64_t v11 = v10;
  if (sub_244D0FD50(v10, v9) == 1)
  {
    int v12 = sub_244D28A78("P-256");
    if (v12)
    {
      int v13 = v12;
      int v14 = sub_244D2A330(v12);
      if (v14)
      {
        uint64_t v15 = (uint64_t)v14;
        uint64_t v16 = sub_244D284EC(v13);
        if (v16)
        {
          uint64_t v17 = (uint64_t)v16;
          int v18 = sub_244D28B04((uint64_t)v16);
          if (!v18)
          {
            sub_244D2A380(v15);
            uint64_t v21 = 0;
            int v23 = 172;
            int v24 = 870;
LABEL_36:
            sub_244D2826C(v17);
            *(_DWORD *)a4 = v23;
            *(_DWORD *)(a4 + 4) = 0;
            *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            *(_DWORD *)(a4 + 16) = v24;
            *(_DWORD *)(a4 + 20) = 0;
            if (v23)
            {
              int v27 = 0;
              goto LABEL_24;
            }
            int v31 = sub_244D0D538(v11, 0);
            int v27 = v31;
            if (v31)
            {
              if (sub_244D0DDA8(v31) == 1)
              {
                if (sub_244D0DE00((uint64_t)v27, v21) == 1)
                {
                  uint64_t v32 = *(void *)(a3 + 32);
                  if (!v32) {
                    uint64_t v32 = 32;
                  }
                  unint64_t v34 = v32;
                  if (sub_244D0DFA4(v27) == 1)
                  {
                    if (v34 > 0x20)
                    {
                      int v28 = 289;
                      int v33 = 47;
                    }
                    else
                    {
                      int v33 = 0;
                      *(void *)(a3 + 32) = v34;
                      int v28 = 291;
                    }
                    *(_DWORD *)a4 = v33;
                    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.h";
                  }
                  else
                  {
                    *(_DWORD *)a4 = 172;
                    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                    int v28 = 949;
                  }
                }
                else
                {
                  *(_DWORD *)a4 = 172;
                  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  int v28 = 945;
                }
              }
              else
              {
                *(_DWORD *)a4 = 172;
                *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                int v28 = 942;
              }
            }
            else
            {
              *(_DWORD *)a4 = 172;
              *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              int v28 = 939;
            }
            goto LABEL_19;
          }
          int v19 = v18;
          if (sub_244D2AB28(v17, (uint64_t)v18, (unsigned __int8 *)(a2 + 8), 65, 0) == 1)
          {
            if (sub_244D2A554(v15, v19))
            {
              sub_244D0BFA4();
              if (v20)
              {
                uint64_t v21 = (unsigned int *)v20;
                int v22 = sub_244D0FD50(v20, v15);
                sub_244D2A380(v15);
                if (v22 == 1)
                {
                  int v23 = 0;
                  int v24 = 851;
LABEL_35:
                  sub_244D28BB0(v19);
                  goto LABEL_36;
                }
                sub_244D0BFD0((uint64_t)v21);
                int v24 = 883;
LABEL_34:
                int v23 = 172;
                goto LABEL_35;
              }
              int v24 = 880;
            }
            else
            {
              int v24 = 877;
            }
          }
          else
          {
            int v24 = 873;
          }
          sub_244D2A380(v15);
          uint64_t v21 = 0;
          goto LABEL_34;
        }
        sub_244D2A380(v15);
        int v29 = 867;
      }
      else
      {
        int v29 = 864;
      }
    }
    else
    {
      int v29 = 861;
    }
    uint64_t v21 = 0;
    int v27 = 0;
    *(void *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = v29;
    *(_DWORD *)(a4 + 20) = 0;
    goto LABEL_24;
  }
  uint64_t v21 = 0;
  int v27 = 0;
  *(_DWORD *)a4 = 172;
  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  int v28 = 933;
LABEL_19:
  *(_DWORD *)(a4 + 16) = v28;
LABEL_24:
  sub_244D2A380(v9);
  sub_244D0BFD0(v11);
  if (v21) {
    sub_244D0BFD0((uint64_t)v21);
  }
  if (v27) {
    sub_244D0D71C(v27);
  }
  return sub_244CECBC0();
}

BOOL sub_244CED788(char *a1, char *a2, uint64_t a3)
{
  return sub_244D441D4(a1, a2, a3) == 0;
}

uint64_t sub_244CED7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_244D0B1B0();
  if (*(unsigned char *)(a1 + 600))
  {
    sub_244D2A380(*(void *)(a1 + 88));
    *(unsigned char *)(a1 + 600) = 0;
  }
  *(_OWORD *)a2 = xmmword_26519CF28;
  *(void *)(a2 + 16) = 1033;
  int v4 = sub_244D28A78("P-256");
  if (!v4)
  {
    *(_DWORD *)a2 = 47;
    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v7 = 1039;
LABEL_10:
    *(_DWORD *)(a2 + 16) = v7;
    goto LABEL_13;
  }
  int v5 = sub_244D2A330(v4);
  if (!v5)
  {
    *(_DWORD *)a2 = 172;
    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v7 = 1042;
    goto LABEL_10;
  }
  uint64_t v6 = (uint64_t)v5;
  if (sub_244D2B0F0((uint64_t)v5) == 1)
  {
    sub_244CED8F8(v6, a1 + 8, a2);
    if (!*(_DWORD *)a2)
    {
      *(void *)(a1 + 88) = v6;
      *(unsigned char *)(a1 + 600) = 1;
      goto LABEL_13;
    }
  }
  else
  {
    *(_DWORD *)a2 = 172;
    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a2 + 16) = 1045;
  }
  sub_244D2A380(v6);
LABEL_13:

  return sub_244CECBC0();
}

void sub_244CED8C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 600))
  {
    sub_244D2A380(*(void *)(a1 + 88));
    *(unsigned char *)(a1 + 600) = 0;
  }
}

uint64_t sub_244CED8F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_244D0B1B0();
  *(_OWORD *)a3 = xmmword_26519CFD0;
  *(void *)(a3 + 16) = 994;
  uint64_t v6 = sub_244CF48E8(a1);
  if (!v6)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v11 = 1002;
LABEL_10:
    *(_DWORD *)(a3 + 16) = v11;
    goto LABEL_11;
  }
  int v7 = (uint64_t *)v6;
  int v8 = sub_244D28A78("P-256");
  if (!v8)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v11 = 1005;
    goto LABEL_10;
  }
  uint64_t v9 = sub_244D284EC(v8);
  if (!v9)
  {
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v11 = 1008;
    goto LABEL_10;
  }
  uint64_t v10 = (uint64_t)v9;
  if (sub_244D2C870((uint64_t)v9, v7, 4, (char *)(a2 + 8), 0x41uLL) != 65)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1014;
  }
  sub_244D2826C(v10);
LABEL_11:

  return sub_244CECBC0();
}

uint64_t sub_244CEDA1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = xmmword_26519CF40;
  *(void *)(a3 + 16) = 1067;
  uint64_t v6 = sub_244D07414(*(void *)(a1 + 88));
  if (!v6)
  {
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v9 = 1074;
    goto LABEL_11;
  }
  int v7 = sub_244CFABD0(v6, v14, 0x20u);
  if (v7 <= 0)
  {
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v9 = 1079;
    goto LABEL_11;
  }
  if (v7 != 32)
  {
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v9 = 1080;
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a2 + 104);
  if (!v8) {
    uint64_t v8 = 97;
  }
  uint64_t v11 = a2;
  unint64_t v12 = v8;
  unint64_t v13 = 0;
  sub_244CC572C(&v11, (const void *)(a1 + 16), 0x41uLL);
  sub_244CC572C(&v11, v14, 0x20uLL);
  if (v12 < v13)
  {
    *(_DWORD *)a3 = 11;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v9 = 1087;
LABEL_11:
    *(_DWORD *)(a3 + 16) = v9;
    goto LABEL_12;
  }
  if (v13 <= 0x61) {
    *(void *)(a2 + 104) = v13;
  }
LABEL_12:
  sub_244D4413C(v14, 0x20uLL);
  return sub_244CECBC0();
}

uint64_t sub_244CEDB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v20 = a1 + 16;
  long long v21 = xmmword_244EAEE00;
  if (*(unsigned char *)(a1 + 600))
  {
    sub_244D2A380(*(void *)(a1 + 88));
    *(unsigned char *)(a1 + 600) = 0;
  }
  sub_244D0B1B0();
  *(_OWORD *)a3 = xmmword_26519CF58;
  *(void *)(a3 + 16) = 1111;
  if (*(void *)(a2 + 104) != 97)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v7 = 1117;
    goto LABEL_7;
  }
  sub_244CC572C(&v20, (const void *)a2, 0x41uLL);
  if ((unint64_t)v21 >= *((void *)&v21 + 1))
  {
    int v9 = sub_244D28A78("P-256");
    if (!v9)
    {
      *(_DWORD *)a3 = 47;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v7 = 1122;
      goto LABEL_7;
    }
    int v10 = v9;
    uint64_t v11 = sub_244D284EC(v9);
    if (!v11)
    {
      *(_DWORD *)a3 = 172;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v7 = 1125;
      goto LABEL_7;
    }
    uint64_t v12 = (uint64_t)v11;
    unint64_t v13 = sub_244D28B04((uint64_t)v11);
    if (!v13)
    {
      *(_DWORD *)a3 = 172;
      *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *(_DWORD *)(a3 + 16) = 1128;
      sub_244D2826C(v12);
      return sub_244CECBC0();
    }
    int v14 = v13;
    if (sub_244D2AB28(v12, (uint64_t)v13, v6, 65, 0) == 1)
    {
      uint64_t v15 = sub_244D2A330(v10);
      if (v15)
      {
        uint64_t v16 = v15;
        if (sub_244D2A554((uint64_t)v15, v14))
        {
          uint64_t v17 = sub_244D16D20((unsigned __int8 *)(a2 + 65), 0x20uLL, 0);
          if (v17)
          {
            if (sub_244D2A5F0(v16, (uint64_t)v17) == 1)
            {
              *(void *)(a1 + 88) = v16;
              *(unsigned char *)(a1 + 600) = 1;
              sub_244D2826C(v12);
LABEL_28:
              sub_244D166B0((void **)v17);
              goto LABEL_29;
            }
            int v19 = 1143;
          }
          else
          {
            int v19 = 1140;
          }
        }
        else
        {
          uint64_t v17 = 0;
          int v19 = 1137;
        }
        *(_DWORD *)a3 = 172;
        *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        *(_DWORD *)(a3 + 16) = v19;
        sub_244D2A380((uint64_t)v16);
        sub_244D2826C(v12);
        if (v17) {
          goto LABEL_28;
        }
LABEL_29:
        sub_244D28BB0(v14);
        return sub_244CECBC0();
      }
      int v18 = 1134;
    }
    else
    {
      int v18 = 1131;
    }
    *(_DWORD *)a3 = 172;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = v18;
    sub_244D2826C(v12);
    goto LABEL_29;
  }
  *(_DWORD *)a3 = 11;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  int v7 = 1119;
LABEL_7:
  *(_DWORD *)(a3 + 16) = v7;
  return sub_244CECBC0();
}

uint64_t sub_244CEDE1C(uint64_t a1)
{
  *(void *)a1 = &unk_26F954330;
  if (*(unsigned char *)(a1 + 600))
  {
    sub_244D2A380(*(void *)(a1 + 88));
    *(unsigned char *)(a1 + 600) = 0;
  }
  return a1;
}

uint64_t sub_244CEDE70(uint64_t a1)
{
  *(void *)a1 = &unk_26F954330;
  if (*(unsigned char *)(a1 + 600))
  {
    sub_244D2A380(*(void *)(a1 + 88));
    *(unsigned char *)(a1 + 600) = 0;
  }
  return a1;
}

void sub_244CEDEC4(uint64_t a1)
{
  *(void *)a1 = &unk_26F954330;
  if (*(unsigned char *)(a1 + 600))
  {
    sub_244D2A380(*(void *)(a1 + 88));
    *(unsigned char *)(a1 + 600) = 0;
  }

  JUMPOUT(0x245695FA0);
}

uint64_t sub_244CEDF38@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = a2;
  sub_244D0B1B0();
  *(_OWORD *)a4 = xmmword_26519CF70;
  *(void *)(a4 + 16) = 1195;
  int v7 = (uint64_t *)sub_244D62CF4();
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = sub_244D61F8C();
  if (v9)
  {
    if (*(unsigned char *)(a1 + 600))
    {
      if (sub_244D5FC68((uint64_t)v7, 0) == 1)
      {
        if (sub_244D2A77C(v8) == 1)
        {
          sub_244D0BFA4();
          if (v10)
          {
            uint64_t v11 = v10;
            if (sub_244D0FD50(v10, v8) == 1)
            {
              if (sub_244D5FCE0(v7, v11) == 1)
              {
                if (sub_244D5FA20(v9, "O", 4097, "CSR", 0xFFFFFFFFFFFFFFFFLL, -1, 0) == 1)
                {
                  if (sub_244D5FCC4((uint64_t)v7, v9) == 1)
                  {
                    uint64_t v12 = sub_244D25C38();
                    if ((int)sub_244D600AC(v7, v11, (uint64_t)v12) <= 0)
                    {
                      *(_DWORD *)a4 = 172;
                      *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                      int v14 = 1234;
                    }
                    else
                    {
                      unsigned int v13 = sub_244D62CE8((uint64_t)v7, 0);
                      if ((v13 & 0x80000000) != 0)
                      {
                        *(_DWORD *)a4 = 172;
                        *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                        int v14 = 1237;
                      }
                      else
                      {
                        if (*a3 >= (unint64_t)v13)
                        {
                          *a3 = (int)sub_244D62CE8((uint64_t)v7, &v17);
                          goto LABEL_28;
                        }
                        *(_DWORD *)a4 = 25;
                        *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                        int v14 = 1239;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)a4 = 172;
                    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                    int v14 = 1231;
                  }
                }
                else
                {
                  *(_DWORD *)a4 = 172;
                  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  int v14 = 1228;
                }
              }
              else
              {
                *(_DWORD *)a4 = 172;
                *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                int v14 = 1222;
              }
            }
            else
            {
              *(_DWORD *)a4 = 172;
              *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              int v14 = 1219;
            }
            *(_DWORD *)(a4 + 16) = v14;
LABEL_28:
            sub_244D0BFD0(v11);
            goto LABEL_20;
          }
          *(_DWORD *)a4 = 172;
          *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          int v15 = 1216;
        }
        else
        {
          *(_DWORD *)a4 = 172;
          *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          int v15 = 1213;
        }
      }
      else
      {
        *(_DWORD *)a4 = 172;
        *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v15 = 1210;
      }
    }
    else
    {
      *(_DWORD *)a4 = 28;
      *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v15 = 1207;
    }
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v15 = 1205;
  }
  *(_DWORD *)(a4 + 16) = v15;
LABEL_20:
  sub_244D61F98(v9);
  sub_244D62D00((uint64_t)v7);
  return sub_244CECBC0();
}

uint64_t sub_244CEE210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v5 = a2;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_244CE835C(a1, a2, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    sub_244D0B1B0();
    *(_OWORD *)a4 = xmmword_26519CF88;
    a4[2] = 1265;
    uint64_t v19 = a1;
    uint64_t v9 = sub_244D62CDC(0, &v19, v5);
    if (!v9)
    {
      *(_DWORD *)a4 = 47;
      a4[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *((_DWORD *)a4 + 4) = 1273;
      return sub_244CECBC0();
    }
    uint64_t v10 = v9;
    if (sub_244D5B478(v9))
    {
      int v11 = 1275;
LABEL_5:
      *(_DWORD *)a4 = 47;
      a4[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *((_DWORD *)a4 + 4) = v11;
      sub_244D62D00(v10);
      return sub_244CECBC0();
    }
    uint64_t v12 = sub_244D5B490(v10);
    if (!v12)
    {
      int v11 = 1278;
      goto LABEL_5;
    }
    uint64_t v13 = v12;
    if (sub_244D5FFD0(v10, v12) == 1)
    {
      uint64_t v14 = sub_244D0FE20(v13);
      if (v14)
      {
        uint64_t v15 = v14;
        sub_244CED8F8(v14, a3, (uint64_t)&v17);
        *(_OWORD *)a4 = v17;
        a4[2] = v18;
        sub_244D62D00(v10);
        sub_244D2A380(v15);
LABEL_15:
        sub_244D0BFD0(v13);
        return sub_244CECBC0();
      }
      int v16 = 1284;
    }
    else
    {
      int v16 = 1281;
    }
    *(_DWORD *)a4 = 47;
    a4[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *((_DWORD *)a4 + 4) = v16;
    sub_244D62D00(v10);
    goto LABEL_15;
  }
  return result;
}

void sub_244CEE394(void *a1@<X0>, uint64_t a2@<X8>)
{
  a1[45] = 0;
  a1[46] = 0;
  a1[47] = 0;
  int v4 = sub_244D284EC(415);
  a1[45] = v4;
  if (v4)
  {
    uint64_t v5 = sub_244D2887C((uint64_t)v4);
    a1[3] = v5;
    if (v5)
    {
      sub_244D174D4();
      a1[46] = v6;
      if (v6)
      {
        int v7 = sub_244D25C38();
        a1[47] = v7;
        if (v7)
        {
          uint64_t v8 = sub_244D28B04(a1[45]);
          a1[1] = v8;
          if (v8)
          {
            uint64_t v9 = sub_244D28B04(a1[45]);
            a1[2] = v9;
            if (v9)
            {
              uint64_t v10 = sub_244D28B04(a1[45]);
              a1[4] = v10;
              if (v10)
              {
                int v11 = sub_244D28B04(a1[45]);
                a1[5] = v11;
                if (v11)
                {
                  uint64_t v12 = sub_244D28B04(a1[45]);
                  a1[6] = v12;
                  if (v12)
                  {
                    uint64_t v13 = sub_244D28B04(a1[45]);
                    a1[8] = v13;
                    if (v13)
                    {
                      uint64_t v14 = sub_244D28B04(a1[45]);
                      a1[7] = v14;
                      if (v14)
                      {
                        uint64_t v15 = sub_244D16670();
                        a1[9] = v15;
                        if (v15)
                        {
                          int v16 = sub_244D16670();
                          a1[10] = v16;
                          if (v16)
                          {
                            long long v17 = sub_244D16670();
                            a1[11] = v17;
                            if (v17)
                            {
                              uint64_t v18 = sub_244D16670();
                              a1[13] = v18;
                              if (v18)
                              {
                                uint64_t v19 = (void **)sub_244D16670();
                                a1[12] = v19;
                                if (v19)
                                {
                                  if (sub_244D28890(a1[45], v19))
                                  {
                                    *(_DWORD *)a2 = 0;
                                    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                    int v20 = 1389;
                                  }
                                  else
                                  {
                                    *(_DWORD *)a2 = 172;
                                    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                    int v20 = 1387;
                                  }
                                }
                                else
                                {
                                  *(_DWORD *)a2 = 172;
                                  *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                  int v20 = 1384;
                                }
                              }
                              else
                              {
                                *(_DWORD *)a2 = 172;
                                *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                int v20 = 1383;
                              }
                            }
                            else
                            {
                              *(_DWORD *)a2 = 172;
                              *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                              int v20 = 1382;
                            }
                          }
                          else
                          {
                            *(_DWORD *)a2 = 172;
                            *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                            int v20 = 1381;
                          }
                        }
                        else
                        {
                          *(_DWORD *)a2 = 172;
                          *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                          int v20 = 1380;
                        }
                      }
                      else
                      {
                        *(_DWORD *)a2 = 172;
                        *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                        int v20 = 1379;
                      }
                    }
                    else
                    {
                      *(_DWORD *)a2 = 172;
                      *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                      int v20 = 1378;
                    }
                  }
                  else
                  {
                    *(_DWORD *)a2 = 172;
                    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                    int v20 = 1377;
                  }
                }
                else
                {
                  *(_DWORD *)a2 = 172;
                  *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  int v20 = 1376;
                }
              }
              else
              {
                *(_DWORD *)a2 = 172;
                *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                int v20 = 1375;
              }
            }
            else
            {
              *(_DWORD *)a2 = 172;
              *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              int v20 = 1374;
            }
          }
          else
          {
            *(_DWORD *)a2 = 172;
            *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            int v20 = 1373;
          }
        }
        else
        {
          *(_DWORD *)a2 = 172;
          *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          int v20 = 1371;
        }
      }
      else
      {
        *(_DWORD *)a2 = 172;
        *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v20 = 1368;
      }
    }
    else
    {
      *(_DWORD *)a2 = 172;
      *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v20 = 1365;
    }
  }
  else
  {
    *(_DWORD *)a2 = 172;
    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v20 = 1362;
  }
  *(_DWORD *)(a2 + 16) = v20;
}

uint64_t sub_244CEE6A8(uint64_t result)
{
  if (*(unsigned char *)(result + 113))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 360);
    if (v2) {
      sub_244D2826C(v2);
    }
    uint64_t v3 = *(unint64_t ***)(v1 + 368);
    if (v3) {
      sub_244D17500(v3);
    }
    int v4 = *(uint64_t **)(v1 + 8);
    if (v4) {
      sub_244D28BF4(v4);
    }
    uint64_t v5 = *(uint64_t **)(v1 + 16);
    if (v5) {
      sub_244D28BF4(v5);
    }
    uint64_t v6 = *(uint64_t **)(v1 + 32);
    if (v6) {
      sub_244D28BF4(v6);
    }
    int v7 = *(uint64_t **)(v1 + 40);
    if (v7) {
      sub_244D28BF4(v7);
    }
    uint64_t v8 = *(uint64_t **)(v1 + 48);
    if (v8) {
      sub_244D28BF4(v8);
    }
    uint64_t v9 = *(uint64_t **)(v1 + 64);
    if (v9) {
      sub_244D28BF4(v9);
    }
    uint64_t v10 = *(uint64_t **)(v1 + 56);
    if (v10) {
      sub_244D28BF4(v10);
    }
    int v11 = *(void **)(v1 + 72);
    if (v11) {
      sub_244D16710(v11);
    }
    uint64_t v12 = *(void **)(v1 + 80);
    if (v12) {
      sub_244D16710(v12);
    }
    uint64_t v13 = *(void **)(v1 + 88);
    if (v13) {
      sub_244D16710(v13);
    }
    uint64_t v14 = *(void **)(v1 + 104);
    if (v14) {
      sub_244D16710(v14);
    }
    uint64_t result = *(void *)(v1 + 96);
    if (result) {
      uint64_t result = sub_244D16710((void *)result);
    }
    *(unsigned char *)(v1 + 113) = 0;
  }
  return result;
}

void sub_244CEE77C(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  if ((unint64_t)a5[1] < 0x20)
  {
    int v11 = 1428;
    int v9 = 25;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_244CEC80C(a1, a2, a3, a4, *a5, 0x20uLL, (uint64_t)a6);
    if (*(_DWORD *)a6) {
      return;
    }
    uint64_t v8 = sub_244CDAEA0(a5, 0, 0x20uLL);
    int v9 = 0;
    *a5 = v8;
    a5[1] = v10;
    int v11 = 1431;
  }
  *(_DWORD *)a6 = v9;
  a6[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *((_DWORD *)a6 + 4) = v11;
}

uint64_t sub_244CEE830@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a5 == 32)
  {
    int v11 = &v13;
    uint64_t v12 = 32;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char **))(*(void *)result + 200))(result, a2, a3, a6, a7, &v11);
    if (*(_DWORD *)a8) {
      return result;
    }
    if (v12 == 32)
    {
      uint64_t result = sub_244D441D4(a4, v11, 32);
      if (result)
      {
        *(_DWORD *)a8 = 172;
        a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v10 = 1444;
      }
      else
      {
        *(_DWORD *)a8 = 0;
        a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v10 = 1446;
      }
    }
    else
    {
      *(_DWORD *)a8 = 172;
      a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v10 = 1442;
    }
  }
  else
  {
    *(_DWORD *)a8 = 47;
    a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v10 = 1437;
  }
  *((_DWORD *)a8 + 4) = v10;
  return result;
}

uint64_t sub_244CEE970@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_244D16D20(a2, a3, a4);
  uint64_t result = sub_244D17728(0, (uint64_t)a4, (uint64_t)a4, *(void *)(a1 + 96), *(void *)(a1 + 368));
  if (result == 1) {
    int v9 = 0;
  }
  else {
    int v9 = 172;
  }
  if (result == 1) {
    int v10 = 1460;
  }
  else {
    int v10 = 1458;
  }
  *(_DWORD *)a5 = v9;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v10;
  return result;
}

void sub_244CEE9F4(uint64_t a1@<X1>, char *a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (a3 >> 31)
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v5 = 1465;
  }
  else if (sub_244CFABD0(a1, a2, a3) == a3)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v5 = 1469;
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v5 = 1467;
  }
  *(_DWORD *)(a4 + 16) = v5;
}

uint64_t sub_244CEEA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_244D20E10(a2, *(void *)(a1 + 96));
  if (result == 1) {
    int v5 = 0;
  }
  else {
    int v5 = 172;
  }
  if (result == 1) {
    int v6 = 1477;
  }
  else {
    int v6 = 1475;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_244CEEAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_244D1897C(a2, a3, a4, *(void *)(a1 + 96), *(void *)(a1 + 368));
  if (result == 1) {
    int v7 = 0;
  }
  else {
    int v7 = 172;
  }
  if (result == 1) {
    int v8 = 1488;
  }
  else {
    int v8 = 1486;
  }
  *(_DWORD *)a5 = v7;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_244CEEB4C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_244D2AB28(*(void *)(a1 + 360), a4, a2, a3, *(void *)(a1 + 368));
  if (result == 1) {
    int v7 = 0;
  }
  else {
    int v7 = 172;
  }
  if (result == 1) {
    int v8 = 1499;
  }
  else {
    int v8 = 1497;
  }
  *(_DWORD *)a5 = v7;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

unint64_t sub_244CEEBB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t result = sub_244D2C870(*(void *)(a1 + 360), a2, 4, a3, a4);
  if (result == a4) {
    int v8 = 0;
  }
  else {
    int v8 = 172;
  }
  if (result == a4) {
    int v9 = 1510;
  }
  else {
    int v9 = 1508;
  }
  *(_DWORD *)a5 = v8;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

uint64_t sub_244CEEC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_244D29DFC(*(void *)(a1 + 360), a2, 0, a3, a4, *(void *)(a1 + 368));
  if (result == 1) {
    int v7 = 0;
  }
  else {
    int v7 = 172;
  }
  if (result == 1) {
    int v8 = 1521;
  }
  else {
    int v8 = 1519;
  }
  *(_DWORD *)a5 = v7;
  *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

void sub_244CEEC80(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_OWORD *)a7 = xmmword_26519CFA0;
  *(void *)(a7 + 16) = 1527;
  uint64_t v14 = sub_244D28B04(a1[45]);
  if (!v14)
  {
    *(_DWORD *)a7 = 172;
    *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v15 = 1534;
LABEL_7:
    *(_DWORD *)(a7 + 16) = v15;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, v14, a3, a4);
  if (!*(_DWORD *)a7)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(*a1 + 120))(&v16, a1, a2, a5, a6);
    *(_OWORD *)a7 = v16;
    *(void *)(a7 + 16) = v17;
    if (!*(_DWORD *)a7)
    {
      if (sub_244D298D8(a1[45], a2, a2, v14) == 1)
      {
        *(_DWORD *)a7 = 0;
        *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v15 = 1543;
      }
      else
      {
        *(_DWORD *)a7 = 172;
        *(void *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v15 = 1541;
      }
      goto LABEL_7;
    }
  }
LABEL_8:
  sub_244D28BF4(v14);
}

uint64_t sub_244CEEE04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_244D29A08(*(void *)(a1 + 360), a2);
  if (result == 1) {
    int v5 = 0;
  }
  else {
    int v5 = 172;
  }
  if (result == 1) {
    int v6 = 1556;
  }
  else {
    int v6 = 1554;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_244CEEE5C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a1 + 16) = 1562;
}

void sub_244CEEE78(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = xmmword_26519CFB8;
  *(void *)(a6 + 16) = 1567;
  uint64_t v12 = sub_244D16670();
  if (v12)
  {
    char v13 = sub_244D28B04(a1[45]);
    if (v13)
    {
      sub_244D16D20(a4, a5, v12);
      if (sub_244D17728(0, (uint64_t)v12, (uint64_t)v12, a1[12], a1[46]) == 1)
      {
        if (sub_244D29DFC(a1[45], v13, v12, 0, 0, a1[46]) == 1)
        {
          unint64_t v14 = sub_244D2C870(a1[45], v13, 4, a2, *a3);
          *a3 = v14;
          if (v14)
          {
            *(_DWORD *)a6 = 0;
            *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            int v15 = 1592;
          }
          else
          {
            *(_DWORD *)a6 = 172;
            *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            int v15 = 1590;
          }
        }
        else
        {
          *(_DWORD *)a6 = 172;
          *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          int v15 = 1586;
        }
      }
      else
      {
        *(_DWORD *)a6 = 172;
        *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v15 = 1583;
      }
    }
    else
    {
      *(_DWORD *)a6 = 172;
      *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v15 = 1578;
    }
  }
  else
  {
    char v13 = 0;
    *(_DWORD *)a6 = 172;
    *(void *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v15 = 1575;
  }
  *(_DWORD *)(a6 + 16) = v15;
  sub_244D16710(v12);

  sub_244D28BF4(v13);
}

BOOL sub_244CEF02C@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = sub_244D28E4C(*(void *)(a1 + 360), a2);
  if (result) {
    int v5 = 0;
  }
  else {
    int v5 = 172;
  }
  if (result) {
    int v6 = 1607;
  }
  else {
    int v6 = 1605;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_244CEF084(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v31[10] = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[1];
  uint64_t v30 = *a1;
  if (v6 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1620;
    return;
  }
  int v9 = (uint64_t **)sub_244D63000(0, &v30, v6);
  uint64_t v10 = (uint64_t)v9;
  if (!v9)
  {
    int v13 = 1623;
LABEL_65:
    uint64_t v12 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v11 = 172;
    goto LABEL_66;
  }
  if (sub_244D5BB04(v9) != 2)
  {
    int v13 = 1625;
    goto LABEL_65;
  }
  if (!sub_244D59E10(v10))
  {
    int v13 = 1626;
    goto LABEL_65;
  }
  if (sub_244D5BAB4(v10) != 794)
  {
    int v13 = 1627;
    goto LABEL_65;
  }
  if (!sub_244D59CE8(v10))
  {
    int v13 = 1628;
    goto LABEL_65;
  }
  if (!sub_244D5BD18(v10))
  {
    int v13 = 1629;
    goto LABEL_65;
  }
  if (!sub_244D5BDAC(v10))
  {
    int v13 = 1630;
    goto LABEL_65;
  }
  if (!sub_244D59E04(v10))
  {
    int v13 = 1631;
    goto LABEL_65;
  }
  v31[0] = &unk_26F954540;
  sub_244CEF4D0(a1, (uint64_t)v31, (uint64_t)v26);
  int v11 = v26[0];
  int v3 = v26[1];
  uint64_t v12 = v27;
  int v13 = v28;
  int v4 = v29;
  if (v26[0]) {
    goto LABEL_66;
  }
  if ((int)sub_244D5A1D8(v10) < 1) {
    goto LABEL_64;
  }
  int v22 = v12;
  int v23 = v13;
  int v24 = 0;
  int v14 = 0;
  uint64_t v25 = 0;
  unsigned int v15 = 0;
  uint64_t v12 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  while (2)
  {
    long long v16 = sub_244D5A208(v10, v15);
    uint64_t v17 = (unsigned __int16 *)sub_244D259E0((uint64_t)v16);
    BOOL v18 = sub_244D5C264((BOOL)v16);
    switch(sub_244D449A4(v17))
    {
      case 'R':
        if (v18 | BYTE4(v25) & 1)
        {
          int v13 = 1689;
        }
        else
        {
          if (*(_DWORD *)sub_244D56D80(v10) == 20)
          {
            HIDWORD(v25) = 1;
            goto LABEL_35;
          }
          int v13 = 1690;
        }
        goto LABEL_74;
      case 'S':
        if (!v18 | v25 & 1)
        {
          int v13 = 1669;
        }
        else
        {
          int v19 = sub_244D56D08(v10);
          if (a2 == 2)
          {
            if (v19 != 128)
            {
              int v13 = 1676;
              goto LABEL_74;
            }
            goto LABEL_31;
          }
          if ((v19 & 0xFFFFFF7F) == 6)
          {
LABEL_31:
            LODWORD(v25) = 1;
            goto LABEL_35;
          }
          int v13 = 1684;
        }
        goto LABEL_74;
      case 'W':
        if (!v18 | v14 & 1)
        {
          int v13 = 1648;
LABEL_74:
          int v11 = 172;
          goto LABEL_66;
        }
        char v20 = sub_244D56CE0(v10);
        uint64_t v21 = sub_244D56E68(v10);
        if (a2 == 1)
        {
          int v13 = 1659;
          int v11 = 172;
          if ((v20 & 0x10) == 0 || v21) {
            goto LABEL_66;
          }
          goto LABEL_34;
        }
        if (a2 == 2)
        {
          int v13 = 1655;
          int v11 = 172;
          if ((v20 & 0x10) != 0 || v21 != -1) {
            goto LABEL_66;
          }
LABEL_34:
          int v14 = 1;
          goto LABEL_35;
        }
        if ((v20 & 0x10) == 0 || (int v14 = 1, v21 != -1) && v21 != 1)
        {
          int v13 = 1664;
          goto LABEL_74;
        }
LABEL_35:
        if ((int)++v15 < (int)sub_244D5A1D8(v10)) {
          continue;
        }
        if ((v14 & v25 & HIDWORD(v25) & 1) == 0)
        {
LABEL_64:
          int v13 = 1703;
          goto LABEL_65;
        }
        if (((a2 - 3) < 0xFFFFFFFE) | v24 & 1) {
          int v11 = 0;
        }
        else {
          int v11 = 172;
        }
        if (!(((a2 - 3) < 0xFFFFFFFE) | v24 & 1)) {
          int v3 = ((a2 - 3) < 0xFFFFFFFE) | v24;
        }
        if (((a2 - 3) < 0xFFFFFFFE) | v24 & 1) {
          uint64_t v12 = v22;
        }
        else {
          uint64_t v12 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        }
        if (((a2 - 3) < 0xFFFFFFFE) | v24 & 1) {
          int v13 = v23;
        }
        else {
          int v13 = 1708;
        }
        if (!(((a2 - 3) < 0xFFFFFFFE) | v24 & 1)) {
          int v4 = v23;
        }
LABEL_66:
        sub_244D62F44(v10);
        *(_DWORD *)a3 = v11;
        *(_DWORD *)(a3 + 4) = v3;
        *(void *)(a3 + 8) = v12;
        *(_DWORD *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 20) = v4;
        return;
      case 'Z':
        if (v18 | v24 & 1)
        {
          int v13 = 1694;
        }
        else
        {
          if (*(_DWORD *)sub_244D56DB4(v10) == 20)
          {
            int v24 = 1;
            goto LABEL_35;
          }
          int v13 = 1695;
        }
        goto LABEL_74;
      default:
        goto LABEL_35;
    }
  }
}

void sub_244CEF4D0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  long long v16 = (void *)(a2 + 8);
  uint64_t v17 = v5;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1911;
    return;
  }
  uint64_t v6 = sub_244D63000(0, &v17, v4);
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    int v15 = 1914;
    goto LABEL_17;
  }
  uint64_t v8 = sub_244D5A00C(v6);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v11 = 0;
    int v15 = 1917;
LABEL_23:
    int v13 = 172;
    goto LABEL_24;
  }
  if (sub_244CF48E0(v8) != 408)
  {
    uint64_t v11 = 0;
    int v15 = 1918;
    goto LABEL_23;
  }
  if (sub_244D0C334(v9) != 256)
  {
    uint64_t v11 = 0;
    int v15 = 1919;
    goto LABEL_23;
  }
  uint64_t v10 = sub_244D0FE20(v9);
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = sub_244D0740C(v10);
    if (sub_244D28A08(v12) == 415)
    {
      int v13 = 172;
      if (sub_244D0CFA8(v9, 0) == 65)
      {
        int v14 = sub_244D0CFA8(v9, &v16);
        if (v14 == 65) {
          int v13 = 0;
        }
        else {
          int v13 = 172;
        }
        if (v14 == 65) {
          int v15 = 1901;
        }
        else {
          int v15 = 1928;
        }
      }
      else
      {
        int v15 = 1926;
      }
      goto LABEL_24;
    }
    int v15 = 1923;
    goto LABEL_23;
  }
  int v15 = 1922;
LABEL_17:
  int v13 = 11;
LABEL_24:
  sub_244D2A380(v11);
  sub_244D0BFD0(v9);
  sub_244D62F44(v7);
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v15;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_244CEF65C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v32 = a5;
  *a7 = 600;
  if (!a1 || a2 <= 0)
  {
    *a7 = 101;
    *(_DWORD *)a8 = 47;
    *(void *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v25 = 1733;
LABEL_22:
    *(_DWORD *)(a8 + 16) = v25;
    return;
  }
  if (!a5 || a6 <= 0)
  {
    *a7 = 301;
    *(_DWORD *)a8 = 47;
    *(void *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v25 = 1735;
    goto LABEL_22;
  }
  int v14 = sub_244D5A33C();
  if (!v14)
  {
    int v15 = 0;
    long long v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a7 = 500;
    int v24 = 1738;
LABEL_26:
    int v26 = 11;
    goto LABEL_30;
  }
  int v15 = sub_244D5DD74();
  if (!v15)
  {
    long long v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a7 = 500;
    int v24 = 1741;
    goto LABEL_26;
  }
  long long v16 = sub_244D4B4C8();
  if (!v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a7 = 500;
    int v24 = 1744;
    goto LABEL_26;
  }
  uint64_t v17 = sub_244D63000(0, &v34, a2);
  if (!v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a7 = 100;
    int v24 = 1750;
LABEL_29:
    int v26 = 172;
    goto LABEL_30;
  }
  if (sub_244D5A704((uint64_t)v14, v17) != 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a7 = 600;
    int v24 = 1753;
    goto LABEL_29;
  }
  uint64_t v18 = 0;
  if (a4 && a3)
  {
    if (a4 < 0)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      *a7 = 201;
      int v24 = 1758;
      int v26 = 47;
      goto LABEL_30;
    }
    uint64_t v18 = sub_244D63000(0, &v33, a4);
    if (!v18)
    {
      uint64_t v19 = 0;
      *a7 = 200;
      int v24 = 1761;
      goto LABEL_29;
    }
    if (sub_244D4BA04(v16, v18) != 1)
    {
      uint64_t v19 = 0;
      *a7 = 600;
      int v24 = 1764;
      goto LABEL_29;
    }
  }
  uint64_t v19 = sub_244D63000(0, &v32, a6);
  if (!v19)
  {
    *a7 = 300;
    int v24 = 1771;
    goto LABEL_29;
  }
  sub_244D5DE38((uint64_t)v15, (uint64_t)v14, v19, (uint64_t)v16);
  if (v20 != 1)
  {
    *a7 = 600;
    int v24 = 1774;
    goto LABEL_29;
  }
  uint64_t v21 = (void *)sub_244D07404((uint64_t)v15);
  int v22 = *(const char **)(sub_244D5BD18(v19) + 8);
  unsigned int v30 = 0;
  if (v21)
  {
    size_t v23 = strlen(v22);
    sub_24479476C(v28, (uint64_t)v22, v23);
    sub_244CEAC78((uint64_t)v31, (uint64_t)v28, (uint64_t)v29);
    if (v29[0])
    {
      int v24 = 1788;
    }
    else
    {
      if (sub_244CEB14C(v31, &v30))
      {
        sub_244D5E97C(v21, v30);
        sub_244D5E89C((uint64_t)v21, 0);
        if (sub_244D5C5C0((uint64_t)v15) == 1)
        {
          int v26 = 0;
          *a7 = 0;
          int v24 = 1802;
        }
        else
        {
          *a7 = 400;
          int v24 = 1800;
          int v26 = 87;
        }
        goto LABEL_30;
      }
      int v24 = 1791;
    }
    int v26 = 172;
    int v27 = 300;
  }
  else
  {
    int v24 = 1785;
    int v26 = 11;
    int v27 = 500;
  }
  *a7 = v27;
LABEL_30:
  sub_244D62F44(v19);
  sub_244D62F44(v18);
  sub_244D62F44(v17);
  sub_244CF474C((uint64_t)v16);
  sub_244D5DD7C(v15);
  sub_244D5A3D0((uint64_t)v14);
  *(_DWORD *)a8 = v26;
  *(_DWORD *)(a8 + 4) = 0;
  *(void *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a8 + 16) = v24;
  *(_DWORD *)(a8 + 20) = 0;
}

void sub_244CEFA00(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v18 = *a2;
  uint64_t v19 = v5;
  uint64_t v17 = 0;
  if (v4 < 1 || a2[1] <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1832;
    return;
  }
  uint64_t v7 = sub_244D63000(0, &v19, v4);
  if (!v7)
  {
    uint64_t v8 = 0;
    int v12 = 1835;
LABEL_16:
    int v13 = 11;
    goto LABEL_17;
  }
  uint64_t v8 = sub_244D63000(0, &v18, a2[1]);
  if (!v8)
  {
    int v12 = 1838;
    goto LABEL_16;
  }
  uint64_t v9 = (int *)sub_244D5BD18(v7);
  uint64_t v10 = (int *)sub_244D5BD18(v8);
  uint64_t v11 = sub_244D5BDAC(v8);
  int v12 = 1843;
  int v13 = 172;
  if (v9)
  {
    if (v10)
    {
      int v14 = (int *)v11;
      if (v11)
      {
        if (sub_244CF3BA8((_DWORD *)&v17 + 1, &v17, v10, v9) == 1)
        {
          if (SHIDWORD(v17) > 0 || (int)v17 > 0 || ((v17 | HIDWORD(v17)) & 0x80000000) == 0)
          {
            int v13 = 78;
            if (sub_244CF3BA8((_DWORD *)&v17 + 1, &v17, v14, v9) == 1)
            {
              BOOL v15 = SHIDWORD(v17) < 1;
              BOOL v16 = (int)v17 < 1;
              if (v15 && v16) {
                int v13 = 0;
              }
              else {
                int v13 = 78;
              }
              if (v15 && v16) {
                int v12 = 1818;
              }
              else {
                int v12 = 1857;
              }
            }
            else
            {
              int v12 = 1853;
            }
            goto LABEL_17;
          }
          int v12 = 1850;
        }
        else
        {
          int v12 = 1846;
        }
        int v13 = 78;
      }
    }
  }
LABEL_17:
  sub_244D62F44(v7);
  sub_244D62F44(v8);
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_244CEFBC8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v11 = *a1;
  if (v3 <= 0)
  {
    *(_DWORD *)a2 = 47;
    *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a2 + 16) = 1874;
    return;
  }
  uint64_t v4 = sub_244D63000(0, &v11, v3);
  uint64_t v5 = v4;
  if (!v4)
  {
    int v7 = 1877;
    int v8 = 11;
    goto LABEL_18;
  }
  uint64_t v6 = (int *)sub_244D5BD18(v4);
  if (!v6)
  {
    int v7 = 1880;
LABEL_17:
    int v8 = 172;
    goto LABEL_18;
  }
  if (sub_244D5DA30(v6) == -1)
  {
    uint64_t v9 = (int *)sub_244D5BDAC(v5);
    if (v9)
    {
      int v10 = sub_244D5DA30(v9);
      if (v10 == 1) {
        int v8 = 0;
      }
      else {
        int v8 = 78;
      }
      if (v10 == 1) {
        int v7 = 1868;
      }
      else {
        int v7 = 1891;
      }
      goto LABEL_18;
    }
    int v7 = 1887;
    goto LABEL_17;
  }
  int v7 = 1884;
  int v8 = 78;
LABEL_18:
  sub_244D62F44(v5);
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 4) = 0;
  *(void *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = 0;
}

void sub_244CEFCC4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244CEFCD4(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2[1];
  uint64_t v16 = *a2;
  if (v6 <= 0)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = 1948;
    return;
  }
  uint64_t v8 = sub_244D63000(0, &v16, v6);
  uint64_t v9 = v8;
  if (v8)
  {
    if (a1)
    {
      int v10 = (int *)sub_244D56D80(v8);
      if (v10) {
        goto LABEL_5;
      }
    }
    else
    {
      int v10 = (int *)sub_244D56DB4(v8);
      if (v10)
      {
LABEL_5:
        if (*v10 < 0)
        {
          int v15 = 1955;
          int v14 = 47;
        }
        else if (*v10 == 20)
        {
          if ((unint64_t)a3[1] < 0x14)
          {
            int v15 = 1957;
            int v14 = 25;
          }
          else
          {
            uint64_t v11 = *a3;
            int v12 = (long long *)*((void *)v10 + 1);
            long long v13 = *v12;
            *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
            *(_OWORD *)uint64_t v11 = v13;
            sub_2446C1548((uint64_t)a3, *v10);
            int v14 = 0;
            int v15 = 1942;
          }
        }
        else
        {
          int v15 = 1956;
          int v14 = 157;
        }
        goto LABEL_16;
      }
    }
    int v15 = 1954;
    int v14 = 216;
  }
  else
  {
    int v15 = 1951;
    int v14 = 11;
  }
LABEL_16:
  sub_244D62F44(v9);
  *(_DWORD *)a4 = v14;
  *(_DWORD *)(a4 + 4) = 0;
  *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v15;
  *(_DWORD *)(a4 + 20) = 0;
}

void sub_244CEFE08(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244CEFE18(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v24 = *a1;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1995;
    return;
  }
  uint64_t v6 = sub_244D63000(0, &v24, v4);
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v9 = 0;
    int v12 = 1998;
    int v13 = 11;
LABEL_12:
    int v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    goto LABEL_16;
  }
  uint64_t v8 = sub_244D5A248(v6, 103, 0, 0);
  uint64_t v9 = (unint64_t *)v8;
  if (!v8)
  {
    int v12 = 2006;
    int v13 = 216;
    goto LABEL_12;
  }
  if (sub_244D259E0(v8) == 1)
  {
    int v10 = sub_244D4B518(v9, 0);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10 && !*(_DWORD *)v11)
      {
        int v15 = *(unint64_t **)(v11 + 8);
        if (sub_244D259E0((uint64_t)v15) == 1)
        {
          uint64_t v16 = sub_244D4B518(v15, 0);
          if (*(_DWORD *)v16 == 6)
          {
            uint64_t v17 = (unsigned int *)sub_244D54190((uint64_t)v16, 0);
            uint64_t v18 = (const char *)sub_244CF48E8((uint64_t)v17);
            if ((sub_244CF48D8(v17) & 0x80000000) != 0)
            {
              int v12 = 2046;
            }
            else
            {
              unsigned int v19 = sub_244CF48D8(v17);
              if (v19 >= 8)
              {
                uint64_t v20 = (int)v19;
                if (!strncmp(v18, "http://", 7uLL) || v20 >= 9 && !strncmp(v18, "https://", 8uLL))
                {
                  sub_24479476C(&__src, (uint64_t)v18, v20);
                  size_t v21 = __n;
                  if (*(void *)(a2 + 8) >= __n)
                  {
                    memcpy(*(void **)a2, __src, __n);
                    sub_244CEB124(a2, v21);
                    int v13 = 0;
                    int v12 = 390;
                    int v14 = "src/lib/support/Span.h";
                  }
                  else
                  {
                    int v12 = 385;
                    int v14 = "src/lib/support/Span.h";
                    int v13 = 25;
                  }
                  goto LABEL_16;
                }
              }
              int v12 = 2052;
            }
          }
          else
          {
            int v12 = 2042;
          }
        }
        else
        {
          int v12 = 2028;
        }
      }
      else
      {
        int v12 = 2011;
      }
    }
    else
    {
      int v12 = 2010;
    }
  }
  else
  {
    int v12 = 2007;
  }
  int v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  int v13 = 216;
LABEL_16:
  sub_244D4B564(v9, (void (*)(uint64_t))sub_244CF0C1C, (uint64_t)sub_244D530D4);
  sub_244D62F44(v7);
  *(_DWORD *)a3 = v13;
  *(void *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 16) = v12;
}

void sub_244CF0080(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v22 = 0;
  uint64_t v23 = v5;
  uint64_t v21 = 0;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 2077;
    return;
  }
  uint64_t v7 = sub_244D63000(0, &v23, v4);
  uint64_t v8 = v7;
  if (!v7)
  {
    int v10 = 0;
    int v16 = 2080;
    int v18 = 11;
LABEL_15:
    uint64_t v17 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    goto LABEL_22;
  }
  uint64_t v9 = sub_244D5A248(v7, 103, 0, 0);
  int v10 = (unint64_t *)v9;
  if (!v9)
  {
    int v16 = 2088;
    int v18 = 216;
    goto LABEL_15;
  }
  if (sub_244D259E0(v9) == 1)
  {
    unint64_t v11 = sub_244D4B518(v10, 0);
    if (v11)
    {
      int v12 = (unint64_t *)v11[2];
      if (sub_244D259E0((uint64_t)v12) == 1)
      {
        int v13 = sub_244D4B518(v12, 0);
        if (*(_DWORD *)v13 == 4)
        {
          uint64_t v14 = sub_244D54190((uint64_t)v13, 0);
          if (v14)
          {
            if (sub_244D62000(v14, &v22, &v21) == 1)
            {
              sub_2446C1098(&__src, v22, v21);
              size_t v15 = __n;
              if (*(void *)(a2 + 8) >= __n)
              {
                memcpy(*(void **)a2, __src, __n);
                sub_2446C1548(a2, v15);
                int v18 = 0;
                int v16 = 380;
                uint64_t v17 = "src/lib/support/Span.h";
              }
              else
              {
                int v16 = 375;
                uint64_t v17 = "src/lib/support/Span.h";
                int v18 = 25;
              }
            }
            else
            {
              int v16 = 2125;
              uint64_t v17 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              int v18 = 172;
            }
            goto LABEL_22;
          }
          int v16 = 2121;
        }
        else
        {
          int v16 = 2118;
        }
      }
      else
      {
        int v16 = 2104;
      }
    }
    else
    {
      int v16 = 2092;
    }
  }
  else
  {
    int v16 = 2089;
  }
  uint64_t v17 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  int v18 = 216;
LABEL_22:
  sub_244D4B564(v10, (void (*)(uint64_t))sub_244CF0C1C, (uint64_t)sub_244D530D4);
  sub_244D62F44(v8);
  *(_DWORD *)a3 = v18;
  *(void *)(a3 + 8) = v17;
  *(_DWORD *)(a3 + 16) = v16;
}

void sub_244CF0290(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v13 = *a1;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 2144;
    return;
  }
  uint64_t v6 = sub_244D63000(0, &v13, v4);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = (unsigned int *)sub_244D59E10(v6);
    if (v8)
    {
      uint64_t v9 = (const void *)*((void *)v8 + 1);
      if (v9)
      {
        size_t v10 = *v8;
        if ((v10 & 0x80000000) == 0)
        {
          if (*(void *)(a2 + 8) >= v10)
          {
            memcpy(*(void **)a2, v9, v10);
            sub_2446C1548(a2, v10);
            int v12 = 0;
            int v11 = 2137;
          }
          else
          {
            int v11 = 2155;
            int v12 = 25;
          }
          goto LABEL_14;
        }
        int v11 = 2152;
      }
      else
      {
        int v11 = 2151;
      }
    }
    else
    {
      int v11 = 2150;
    }
    int v12 = 172;
  }
  else
  {
    int v11 = 2147;
    int v12 = 11;
  }
LABEL_14:
  sub_244D62F44(v7);
  *(_DWORD *)a3 = v12;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_244CF03A0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244CF03B0(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v19 = 0;
  uint64_t v20 = v7;
  uint64_t v18 = 0;
  if (v6 <= 0)
  {
    *(_DWORD *)a4 = 47;
    *(void *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = 2178;
    return;
  }
  uint64_t v9 = sub_244D63000(0, &v20, v6);
  uint64_t v10 = v9;
  if (v9)
  {
    if (a1)
    {
      uint64_t v11 = sub_244D59E04(v9);
      if (v11)
      {
LABEL_5:
        if (sub_244D62000(v11, &v19, &v18) == 1)
        {
          sub_2446C1098(&__src, v19, v18);
          size_t v12 = __n;
          if (*(void *)(a3 + 8) >= __n)
          {
            memcpy(*(void **)a3, __src, __n);
            sub_2446C1548(a3, v12);
            int v15 = 0;
            int v13 = 380;
            uint64_t v14 = "src/lib/support/Span.h";
          }
          else
          {
            int v13 = 375;
            uint64_t v14 = "src/lib/support/Span.h";
            int v15 = 25;
          }
          goto LABEL_14;
        }
        int v13 = 2194;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v11 = sub_244D59CE8(v9);
      if (v11) {
        goto LABEL_5;
      }
    }
    int v13 = 2191;
LABEL_13:
    uint64_t v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v15 = 172;
    goto LABEL_14;
  }
  int v13 = 2181;
  uint64_t v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  int v15 = 11;
LABEL_14:
  sub_244D62F44(v10);
  *(_DWORD *)a4 = v15;
  *(void *)(a4 + 8) = v14;
  *(_DWORD *)(a4 + 16) = v13;
}

void sub_244CF0504(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_244CF0514(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = sub_244D44DDC("2.5.4.3", 1);
  size_t v12 = sub_244D44DDC("1.3.6.1.4.1.37244.2.1", 1);
  int v13 = sub_244D44DDC("1.3.6.1.4.1.37244.2.2", 1);
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v45 = *(void *)a1;
  v41[0] = 0;
  unsigned __int8 v43 = 0;
  if (v14 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(void *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 2227;
    return;
  }
  int v15 = (void **)v13;
  uint64_t v16 = sub_244D63000(0, &v45, v14);
  uint64_t v17 = v16;
  if (!v16)
  {
    LODWORD(v3) = 2230;
    uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v32 = 11;
    goto LABEL_38;
  }
  uint64_t v36 = (uint64_t)v15;
  uint64_t v18 = (uint64_t *)sub_244D59E04(v16);
  if (!v18)
  {
    LODWORD(v3) = 2233;
    uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v32 = 172;
    goto LABEL_38;
  }
  uint64_t v19 = v18;
  uint64_t v35 = (uint64_t)v12;
  if ((int)sub_244D5F544(v18) < 1)
  {
    LODWORD(a1) = 0;
    uint64_t v22 = 2220;
    uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
LABEL_24:
    size_t v12 = (char **)v35;
    int v15 = (void **)v36;
    if (*a2 | a2[4]) {
      goto LABEL_29;
    }
    int v33 = v41[0];
    *a2 = v41[0];
    if (v33) {
      *((_WORD *)a2 + 1) = v42;
    }
    int v34 = v43;
    a2[4] = v43;
    if (!v34)
    {
LABEL_29:
      int v32 = 0;
    }
    else
    {
      int v32 = 0;
      *((_WORD *)a2 + 3) = v44;
    }
    uint64_t v3 = v22;
    goto LABEL_38;
  }
  unsigned int v20 = 0;
  LODWORD(a1) = 0;
  uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  uint64_t v22 = 2220;
  LODWORD(v3) = 2238;
  LODWORD(v4) = 2240;
  LODWORD(v5) = 2259;
  LODWORD(v6) = 2261;
  LODWORD(v7) = 2263;
  while (1)
  {
    uint64_t v23 = sub_244D5F4E0(v19, v20);
    if (!v23)
    {
      int v32 = 172;
      uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      goto LABEL_37;
    }
    uint64_t v24 = (uint64_t)v23;
    uint64_t v25 = sub_244D259E0((uint64_t)v23);
    if (!v25)
    {
      int v32 = 172;
      uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      uint64_t v3 = v4;
      goto LABEL_37;
    }
    uint64_t v26 = v25;
    if (sub_244D44948(v25, (uint64_t)v11))
    {
      if (sub_244D44948(v26, v35))
      {
        if (sub_244D44948(v26, v36)) {
          goto LABEL_18;
        }
        uint64_t v27 = 3;
      }
      else
      {
        uint64_t v27 = 2;
      }
    }
    else
    {
      uint64_t v27 = 1;
    }
    uint64_t v28 = sub_244C9DDF8(v24);
    if (!v28)
    {
      int v32 = 172;
      uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      uint64_t v3 = v5;
      goto LABEL_37;
    }
    a1 = v28;
    uint64_t v29 = sub_244CF48E8(v28);
    if (!v29)
    {
      int v32 = 172;
      uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      uint64_t v3 = v6;
      goto LABEL_37;
    }
    uint64_t v30 = v29;
    unsigned int v31 = sub_244CF48D8((unsigned int *)a1);
    if ((v31 & 0x80000000) != 0)
    {
      int v32 = 172;
      uint64_t v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      uint64_t v3 = v7;
      goto LABEL_37;
    }
    sub_2446C1098(v37, v30, v31);
    sub_244CE76B0(v27, v37, (uint64_t)a2, v41, (uint64_t)v38);
    int v32 = v38[0];
    LODWORD(a1) = v38[1];
    uint64_t v21 = v39;
    uint64_t v22 = v40;
    if (v38[0]) {
      break;
    }
LABEL_18:
    if ((int)++v20 >= (int)sub_244D5F544(v19)) {
      goto LABEL_24;
    }
  }
  uint64_t v3 = v40;
LABEL_37:
  size_t v12 = (char **)v35;
  int v15 = (void **)v36;
LABEL_38:
  sub_244CF29AC((void **)v11);
  sub_244CF29AC((void **)v12);
  sub_244CF29AC(v15);
  sub_244D62F44(v17);
  *(_DWORD *)a3 = v32;
  *(_DWORD *)(a3 + 4) = a1;
  *(void *)(a3 + 8) = v21;
  *(void *)(a3 + 16) = v3;
}

void sub_244CF0868(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v34 = 20;
  __s1 = &v39;
  size_t __n = 20;
  uint64_t v37 = v12;
  int v33 = &v38;
  if (!v11)
  {
    *(_DWORD *)a5 = 47;
    *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v27 = 2300;
LABEL_20:
    *(_DWORD *)(a5 + 16) = v27;
    return;
  }
  uint64_t v14 = a2;
  *a4 = *(_OWORD *)a1;
  if (!a2 || (uint64_t v16 = a3) == 0)
  {
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    int v27 = 2304;
    goto LABEL_20;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_244CEFCD4(1, a1, (uint64_t *)&__s1, a5);
  if (!*(_DWORD *)a5)
  {
    uint64_t v17 = sub_244D63000(0, &v37, a1[1]);
    uint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = sub_244D59E04(v17);
      if (v19)
      {
        uint64_t v20 = v19;
        LODWORD(v7) = 2319;
        LODWORD(v8) = 2324;
        LODWORD(v9) = 2327;
        while (1)
        {
          long long v32 = *v14;
          uint64_t v21 = *((void *)&v32 + 1);
          uint64_t v31 = v32;
          if (!*((void *)&v32 + 1))
          {
            int v22 = 47;
            uint64_t v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            goto LABEL_30;
          }
          sub_244CEFCD4(1, (uint64_t *)&v32, (uint64_t *)&v33, (uint64_t)&__s2);
          int v22 = (int)__s2;
          int v5 = HIDWORD(__s2);
          uint64_t v23 = v29;
          uint64_t v6 = v30;
          if (__s2)
          {
            uint64_t v21 = 0;
            goto LABEL_29;
          }
          uint64_t v24 = sub_244D63000(0, &v31, v21);
          uint64_t v21 = v24;
          if (!v24)
          {
            int v22 = 11;
            uint64_t v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            uint64_t v7 = v8;
            goto LABEL_30;
          }
          uint64_t v25 = sub_244D59E04(v24);
          if (!v25)
          {
            int v22 = 172;
            uint64_t v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            uint64_t v7 = v9;
            goto LABEL_30;
          }
          uint64_t v26 = v25;
          sub_2446C1098(&__s2, (uint64_t)v33, v34);
          if ((const char *)__n == v29 && (!__n || !memcmp(__s1, __s2, __n)) && !sub_244D59BA0(v20, v26)) {
            break;
          }
          sub_244D62F44(v21);
          ++v14;
          if (!--v16)
          {
            int v22 = 0;
            uint64_t v21 = 0;
            goto LABEL_31;
          }
        }
        int v22 = 0;
        *a4 = v32;
LABEL_29:
        uint64_t v7 = v6;
LABEL_30:
        uint64_t v6 = v7;
      }
      else
      {
        uint64_t v21 = 0;
        LODWORD(v6) = 2312;
        uint64_t v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        int v22 = 172;
      }
    }
    else
    {
      uint64_t v21 = 0;
      LODWORD(v6) = 2309;
      uint64_t v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      int v22 = 11;
    }
LABEL_31:
    sub_244D62F44(v18);
    sub_244D62F44(v21);
    *(_DWORD *)a5 = v22;
    *(_DWORD *)(a5 + 4) = v5;
    *(void *)(a5 + 8) = v23;
    *(void *)(a5 + 16) = v6;
  }
}

void *sub_244CF0B30(void *a1)
{
  *a1 = &unk_26F954388;
  uint64_t v2 = a1 + 30;
  sub_244CEE6A8((uint64_t)a1);
  sub_244D4413C(v2, 0x78uLL);
  return a1;
}

void sub_244CF0B84(void *a1)
{
  *a1 = &unk_26F954388;
  uint64_t v1 = a1 + 30;
  sub_244CEE6A8((uint64_t)a1);
  sub_244D4413C(v1, 0x78uLL);

  JUMPOUT(0x245695FA0);
}

void sub_244CF0BF8()
{
}

BOOL sub_244CF0C0C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) == 4;
}

uint64_t sub_244CF0C1C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_244CF0C54(unsigned int *a1, unsigned char *a2)
{
  uint64_t result = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  if ((v4 & 8) != 0)
  {
    LOBYTE(i) = v4 & 7;
    if (!result) {
      LOBYTE(i) = 0;
    }
  }
  else
  {
    do
    {
      uint64_t v5 = result;
      if ((int)result < 1)
      {
        LOBYTE(i) = 0;
        goto LABEL_12;
      }
      --result;
      unsigned int v6 = *(unsigned __int8 *)(*((void *)a1 + 1) + v5 - 1);
    }
    while (!*(unsigned char *)(*((void *)a1 + 1) + v5 - 1));
    for (int i = 0; i != 7; ++i)
    {
      if ((v6 >> i)) {
        break;
      }
    }
LABEL_12:
    uint64_t result = v5;
  }
  *a2 = i;
  return result;
}

uint64_t sub_244CF0CC0(unsigned int *a1, void *a2)
{
  char v5 = 0;
  int v3 = sub_244CF0C54(a1, &v5);
  uint64_t result = 0;
  if (!v5)
  {
    *a2 = v3;
    return 1;
  }
  return result;
}

uint64_t sub_244CF0D10(uint64_t a1, unsigned char **a2)
{
  if (!a1) {
    return 0;
  }
  char v11 = 0;
  int v4 = sub_244CF0C54((unsigned int *)a1, &v11);
  if (v4 == 0x7FFFFFFF)
  {
    sub_244D0B884(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_bitstr.c", 120);
    return 0;
  }
  int v6 = v4;
  uint64_t v5 = (v4 + 1);
  if (a2)
  {
    uint64_t v7 = *a2;
    char v8 = v11;
    *uint64_t v7 = v11;
    uint64_t v9 = v7 + 1;
    if (v4)
    {
      memcpy(v9, *(const void **)(a1 + 8), v4);
      if (v6 >= 1) {
        v9[v6 - 1] &= -1 << v8;
      }
    }
    *a2 = &v9[v6];
  }
  return v5;
}

void *sub_244CF0DEC(void *a1, unsigned __int8 **a2, unint64_t a3)
{
  if ((uint64_t)a3 <= 0)
  {
    int v4 = 174;
    __int16 v5 = 147;
    goto LABEL_5;
  }
  if (a3 >> 31)
  {
    int v4 = 173;
    __int16 v5 = 152;
LABEL_5:
    sub_244D0B884(12, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_bitstr.c", v5);
    return 0;
  }
  if (a1 && (int v6 = (void *)*a1) != 0 || (int v6 = sub_244CF7D18()) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t v12 = (char *)(*a2 + 1);
    uint64_t v11 = **a2;
    if (v11 >= 8)
    {
      int v13 = 141;
      __int16 v14 = 168;
LABEL_17:
      sub_244D0B884(12, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_bitstr.c", v14);
LABEL_18:
      if (!a1 || (void *)*a1 != v6) {
        sub_244CF7CBC((uint64_t)v6);
      }
      return 0;
    }
    if (**a2)
    {
      if (a3 < 2 || (v12[a3 - 2] & ~(-1 << v11)) != 0)
      {
        int v13 = 194;
        __int16 v14 = 175;
        goto LABEL_17;
      }
      uint64_t v6[2] = v11 | v6[2] & 0xFFFFFFFFFFFFFFF0 | 8;
    }
    else
    {
      uint64_t v6[2] = v11 | v6[2] & 0xFFFFFFFFFFFFFFF0 | 8;
      if (a3 < 2)
      {
        int v15 = 0;
LABEL_26:
        *(_DWORD *)int v6 = a3 - 1;
        sub_244D440EC((void *)v6[1]);
        v6[1] = v15;
        *((_DWORD *)v6 + 1) = 3;
        if (a1) {
          *a1 = v6;
        }
        *a2 = (unsigned __int8 *)v12;
        return v6;
      }
    }
    uint64_t v16 = sub_244D442F4(v12, a3 - 1);
    if (!v16) {
      goto LABEL_18;
    }
    int v15 = v16;
    uint64_t v12 = &v10[a3];
    goto LABEL_26;
  }
  return v6;
}

uint64_t sub_244CF0F9C(uint64_t result, int a2, int a3)
{
  int v3 = a2 + 7;
  if (a2 >= 0) {
    int v3 = a2;
  }
  int v4 = 1 << (~(_BYTE)a2 & 7);
  if (a3) {
    char v5 = 1 << (~(_BYTE)a2 & 7);
  }
  else {
    char v5 = 0;
  }
  if (result)
  {
    int v6 = (int *)result;
    int v7 = v3 >> 3;
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF0;
    if (*(_DWORD *)result <= v3 >> 3 || (char v8 = *(void **)(result + 8)) == 0)
    {
      if (!a3) {
        return 1;
      }
      int v9 = v7 + 1;
      uint64_t v10 = *(void **)(result + 8);
      if (v10) {
        uint64_t v11 = sub_244D44148(v10, v7 + 1);
      }
      else {
        uint64_t v11 = sub_244D43FF4(v9);
      }
      char v8 = v11;
      if (!v11) {
        return 0;
      }
      uint64_t v12 = *v6;
      size_t v13 = (v9 - v12);
      if ((int)v13 >= 1) {
        bzero((char *)v11 + v12, v13);
      }
      *((void *)v6 + 1) = v8;
      int *v6 = v9;
    }
    *((unsigned char *)v8 + v7) = *((unsigned char *)v8 + v7) & ~(_BYTE)v4 | v5;
    uint64_t v14 = *v6;
    if ((int)v14 >= 1)
    {
      uint64_t v15 = *((void *)v6 + 1);
      do
      {
        uint64_t v16 = v14 - 1;
        if (*(unsigned char *)(v15 + (v14 - 1))) {
          break;
        }
        int *v6 = --v14;
      }
      while ((unint64_t)(v16 + 1) > 1);
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CF10B8(uint64_t result, int a2)
{
  int v2 = a2 + 7;
  if (a2 >= 0) {
    int v2 = a2;
  }
  if (result)
  {
    int v3 = v2 >> 3;
    if (*(_DWORD *)result > v3 && (uint64_t v4 = *(void *)(result + 8)) != 0) {
      return (*(unsigned __int8 *)(v4 + v3) >> (~(_BYTE)a2 & 7)) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL sub_244CF1100(unsigned int *a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t v3 = *((void *)a1 + 1);
  if (!v3) {
    return 1;
  }
  unint64_t v4 = *a1;
  if ((int)v4 < 1) {
    return 1;
  }
  unint64_t v5 = 0;
  do
  {
    if ((uint64_t)v5 >= a3) {
      char v6 = -1;
    }
    else {
      char v6 = ~*(unsigned char *)(a2 + v5);
    }
    int v7 = (*(unsigned char *)(v3 + v5++) & v6);
  }
  while (v5 < v4 && !v7);
  return v7 == 0;
}

uint64_t sub_244CF1164(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = 0;
  int v9 = 0;
  if (!sub_244CF8AE4(a2, (uint64_t *)&v9, &v8, 0x7FFFFFFFuLL)) {
    return 0;
  }
  int v7 = v9;
  uint64_t v5 = sub_244CF5200(a3, (uint64_t *)&v7, v8, a1);
  sub_244D440EC(v9);
  return v5;
}

uint64_t sub_244CF11E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_244CF90D4();
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = sub_244CF1164(a1, (uint64_t)v5, a3);
    sub_244CF830C(v6);
    return v7;
  }
  else
  {
    sub_244D0B884(12, 0, 7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_d2i_fp.c", 83);
    return 0;
  }
}

uint64_t sub_244CF1264(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (!a2) {
    return 0;
  }
  int v3 = sub_244CF6668(a2, &v7, a1);
  if (!v7) {
    return 0;
  }
  uint64_t v6 = v7;
  uint64_t v4 = sub_244CF5200(0, (uint64_t *)&v6, v3, a1);
  sub_244D440EC(v7);
  return v4;
}

BOOL sub_244CF12E0(int *a1, int *a2)
{
  if (a2[1] != 24) {
    return 0;
  }
  uint64_t v2 = *a2;
  *(void *)&long long v4 = *((void *)a2 + 1);
  *((void *)&v4 + 1) = v2;
  return sub_244CFD780(&v4, a1, 0) != 0;
}

BOOL sub_244CF1338(int *a1)
{
  return sub_244CF12E0(0, a1);
}

uint64_t sub_244CF1344(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  *(void *)&long long v6 = __s;
  *((void *)&v6 + 1) = v4;
  uint64_t result = sub_244CFD780(&v6, 0, 0);
  if (result)
  {
    if (a1)
    {
      uint64_t result = sub_244CF45A0(a1, __s, v4);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 4) = 24;
    }
    return 1;
  }
  return result;
}

void *sub_244CF13C0(void *a1, uint64_t a2)
{
  return sub_244CF13CC(a1, a2, 0, 0);
}

void *sub_244CF13CC(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  if (!sub_244CF4DF4(a2, (uint64_t)&v10)
    || (a3 || a4) && !sub_244CF5098((int *)&v10, a3, a4))
  {
    return 0;
  }
  if ((DWORD1(v11) - 8100) <= 0xFFFFD8EF)
  {
    sub_244D0B884(12, 0, 138, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_gentm.c", 122);
    return 0;
  }
  if (snprintf(__str, 0x10uLL, "%04d%02d%02d%02d%02d%02dZ", DWORD1(v11) + 1900, v11 + 1, HIDWORD(v10), DWORD2(v10), DWORD1(v10), v10) != 15)abort(); {
  uint64_t v7 = a1;
  }
  if (a1 || (uint64_t v7 = sub_244CF7DD8()) != 0)
  {
    size_t v9 = strlen(__str);
    if (sub_244CF45A0((uint64_t)v7, __str, v9))
    {
      *((_DWORD *)v7 + 1) = 24;
      return v7;
    }
    if (!a1) {
      sub_244CF7CBC((uint64_t)v7);
    }
    return 0;
  }
  return v7;
}

uint64_t sub_244CF1538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_244CF90D4();
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = sub_244CF15BC(a1, (uint64_t)v5, a3);
    sub_244CF830C(v6);
    return v7;
  }
  else
  {
    sub_244D0B884(12, 0, 7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_i2d_fp.c", 67);
    return 0;
  }
}

uint64_t sub_244CF15BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  int v4 = sub_244CF6668(a3, &v7, a1);
  if (!v7) {
    return 0;
  }
  uint64_t v5 = sub_244CF85CC(a2, (uint64_t)v7, v4);
  sub_244D440EC(v7);
  return v5;
}

uint64_t sub_244CF162C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 4) & 0x100;
  if (v2 == (*(_DWORD *)(a2 + 4) & 0x100))
  {
    LODWORD(result) = sub_244CF4804(a1, a2);
    if (result) {
      int v4 = -1;
    }
    else {
      int v4 = 0;
    }
    if ((int)result >= 0) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = 1;
    }
    if (v2) {
      return v5;
    }
    else {
      return result;
    }
  }
  else if (v2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

void **sub_244CF1690(void **a1, unsigned char **a2)
{
  int v2 = a1;
  if (!a1) {
    return v2;
  }
  int v4 = (void *)*(int *)a1;
  __src[0] = a1[1];
  __src[1] = v4;
  if (v4)
  {
    do
    {
      if (*(unsigned char *)__src[0]) {
        break;
      }
      sub_244CFC510(__src, 1uLL);
    }
    while (__src[1]);
  }
  int v5 = *((_DWORD *)v2 + 1);
  long long v20 = *(_OWORD *)__src;
  unsigned __int8 v19 = 0;
  if (!sub_244CFC650(&v20, &v19))
  {
    int v9 = 0;
    goto LABEL_12;
  }
  if ((v5 & 0x100) != 0)
  {
    if (v19 <= 0x80u)
    {
      if (v19 == 128)
      {
        uint64_t v6 = *((void *)&v20 + 1);
        if (*((void *)&v20 + 1))
        {
          if (*(unsigned char *)v20)
          {
            uint64_t v6 = 1;
            uint64_t v7 = (char *)__src[1];
            int v9 = 1;
          }
          else
          {
            uint64_t v17 = 1;
            do
            {
              unint64_t v18 = v17;
              if (*((void *)&v20 + 1) == v17) {
                break;
              }
              ++v17;
            }
            while (!*(unsigned char *)(v20 + v18));
            uint64_t v6 = v18 < *((void *)&v20 + 1);
            int v9 = 1;
            uint64_t v7 = (char *)__src[1];
            if (v18 >= *((void *)&v20 + 1))
            {
              int v8 = 0;
              goto LABEL_21;
            }
          }
LABEL_13:
          int v8 = 1;
          unint64_t v10 = 2147483646;
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      int v8 = 0;
      int v9 = 1;
      uint64_t v7 = (char *)__src[1];
      goto LABEL_21;
    }
    int v9 = 1;
LABEL_12:
    uint64_t v7 = (char *)__src[1];
    uint64_t v6 = 1;
    goto LABEL_13;
  }
  uint64_t v6 = (v19 >> 7) & 1;
  uint64_t v7 = (char *)__src[1];
  if ((v19 & 0x80) != 0)
  {
    int v9 = 0;
    goto LABEL_13;
  }
  int v8 = 0;
  int v9 = 0;
LABEL_21:
  unint64_t v10 = 0x7FFFFFFFLL;
LABEL_22:
  if ((unint64_t)v7 <= v10)
  {
    int v2 = (void **)&v7[v6];
    if (a2)
    {
      if (v8)
      {
        **a2 = 0;
        uint64_t v7 = (char *)__src[1];
      }
      if (v7) {
        memcpy(&(*a2)[v6], __src[0], (size_t)v7);
      }
      long long v11 = *a2;
      uint64_t v12 = (int)v2;
      if (v9)
      {
        if ((void)v2 << 32)
        {
          int v13 = 0;
          unint64_t v14 = (int)v2 - 1;
          do
          {
            int v15 = v11[v14];
            v11[v14] = -(char)v13 - v15;
            v13 |= v15 != 0;
            --v14;
          }
          while (v14 < (int)v2);
          long long v11 = *a2;
        }
        else
        {
          uint64_t v12 = 0;
        }
      }
      *a2 = &v11[v12];
    }
  }
  else
  {
    sub_244D0B884(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 153);
    return 0;
  }
  return v2;
}

void *sub_244CF189C(void *a1, char **a2, size_t a3)
{
  if (a3 >> 30)
  {
    int v3 = 177;
    __int16 v4 = 182;
LABEL_18:
    sub_244D0B884(12, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", v4);
    return 0;
  }
  unint64_t v18 = *a2;
  size_t v19 = a3;
  unsigned int v17 = 0;
  if (!sub_244CFD114((unsigned __int8 **)&v18, &v17))
  {
    int v3 = 196;
    __int16 v4 = 190;
    goto LABEL_18;
  }
  if (a1 && (int v8 = (void *)*a1) != 0 || (int v8 = sub_244CF7CD8()) != 0)
  {
    if (v17)
    {
      if (!v19 || *v18 != 255 || v19 == 1) {
        goto LABEL_24;
      }
      if (!v18[1])
      {
        uint64_t v9 = 2;
        do
        {
          uint64_t v10 = v9;
          if (v19 == v9) {
            break;
          }
          ++v9;
        }
        while (!v18[v10]);
        if (v10 - 1 >= v19 - 1) {
          goto LABEL_24;
        }
      }
    }
    else if (!v19 || *v18)
    {
      goto LABEL_24;
    }
    sub_244CFC510(&v18, 1uLL);
LABEL_24:
    if (!sub_244CF45A0((uint64_t)v8, v18, v19))
    {
      if (!a1 || (void *)*a1 != v8) {
        sub_244CF7CBC((uint64_t)v8);
      }
      return 0;
    }
    if (v17)
    {
      *((_DWORD *)v8 + 1) = 258;
      unint64_t v12 = *(int *)v8;
      if (v12)
      {
        int v13 = 0;
        uint64_t v14 = v8[1];
        unint64_t v15 = v12 - 1;
        do
        {
          int v16 = *(unsigned __int8 *)(v14 + v15);
          *(unsigned char *)(v14 + v15) = -(char)v13 - v16;
          v13 |= v16 != 0;
          --v15;
        }
        while (v15 < v12);
      }
    }
    else
    {
      *((_DWORD *)v8 + 1) = 2;
    }
    *a2 += a3;
    if (a1) {
      *a1 = v8;
    }
  }
  return v8;
}

uint64_t sub_244CF1A64(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_244CF1B4C(a1, -(uint64_t)a2, 2);
    if (result)
    {
      *(_DWORD *)(a1 + 4) = 258;
      return 1;
    }
  }
  else
  {
    return sub_244CF1B4C(a1, a2, 2);
  }
  return result;
}

uint64_t sub_244CF1ACC(uint64_t a1, unint64_t a2)
{
  return sub_244CF1B4C(a1, a2, 2);
}

uint64_t sub_244CF1AD4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_244CF1B4C(a1, -(uint64_t)a2, 10);
    if (result)
    {
      *(_DWORD *)(a1 + 4) = 266;
      return 1;
    }
  }
  else
  {
    return sub_244CF1B4C(a1, a2, 10);
  }
  return result;
}

uint64_t sub_244CF1B3C(uint64_t a1, unint64_t a2)
{
  return sub_244CF1B4C(a1, a2, 10);
}

uint64_t sub_244CF1B4C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5 = 0;
  v7[1] = *MEMORY[0x263EF8340];
  v7[0] = bswap64(a2);
  do
  {
    if (*((unsigned char *)v7 + v5)) {
      break;
    }
    ++v5;
  }
  while (v5 != 8);
  uint64_t result = sub_244CF45A0(a1, (char *)v7 + v5, 8 - v5);
  if (result)
  {
    *(_DWORD *)(a1 + 4) = a3;
    return 1;
  }
  return result;
}

uint64_t sub_244CF1BEC(void *a1, uint64_t a2)
{
  return sub_244CF1BF4(a1, a2, 2);
}

uint64_t sub_244CF1BF4(void *a1, uint64_t a2, int a3)
{
  uint64_t result = sub_244CF1EFC(a1, (const void **)a2, a3);
  if (result)
  {
    if (*(unsigned char *)(a2 + 5))
    {
      sub_244D0B884(12, 0, 196, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 334);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CF1C4C(void *a1, uint64_t a2)
{
  return sub_244CF1BF4(a1, a2, 10);
}

uint64_t sub_244CF1C54(uint64_t *a1, uint64_t a2)
{
  return sub_244CF1C5C(a1, a2, 2);
}

uint64_t sub_244CF1C5C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  uint64_t result = sub_244CF1EFC(&v8, (const void **)a2, a3);
  if (result)
  {
    uint64_t v6 = v8;
    BOOL v7 = v8 > 0;
    if ((*(unsigned char *)(a2 + 5) & (v8 != 0)) == 0) {
      BOOL v7 = v8 >= 0;
    }
    if (v7)
    {
      if ((*(unsigned char *)(a2 + 5) & (v8 != 0)) != 0) {
        uint64_t v6 = -v8;
      }
      *a1 = v6;
      return 1;
    }
    else
    {
      sub_244D0B884(12, 0, 196, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 364);
      return 0;
    }
  }
  return result;
}

uint64_t sub_244CF1CF8(uint64_t *a1, uint64_t a2)
{
  return sub_244CF1C5C(a1, a2, 10);
}

uint64_t sub_244CF1D00(uint64_t a1)
{
  return sub_244CF1D08(a1, 2);
}

uint64_t sub_244CF1D08(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = 0;
    if (sub_244CF1C5C(&v2, result, a2))
    {
      return v2;
    }
    else
    {
      sub_244D0B1B0();
      return -1;
    }
  }
  return result;
}

uint64_t sub_244CF1D54(uint64_t a1)
{
  return sub_244CF1D08(a1, 10);
}

void *sub_244CF1D5C(uint64_t *a1, void *a2)
{
  return sub_244CF1D64(a1, a2, 2);
}

void *sub_244CF1D64(uint64_t *a1, void *a2, int a3)
{
  int v3 = a3;
  uint64_t v6 = a2;
  if (!a2)
  {
    uint64_t v6 = sub_244CF47D0(a3);
    if (!v6)
    {
      sub_244D0B884(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 412);
LABEL_10:
      if (v6 != a2) {
        sub_244CF474C((uint64_t)v6);
      }
      return 0;
    }
  }
  if (sub_244D16B50((uint64_t)a1) && !sub_244D160FC((uint64_t)a1)) {
    v3 |= 0x100u;
  }
  *((_DWORD *)v6 + 1) = v3;
  size_t v7 = (int)sub_244D1695C(a1);
  if (!sub_244CF45A0((uint64_t)v6, 0, v7)
    || !sub_244D16FA8((char *)v6[1], v7, (uint64_t)a1))
  {
    goto LABEL_10;
  }
  return v6;
}

void *sub_244CF1E3C(uint64_t *a1, void *a2)
{
  return sub_244CF1D64(a1, a2, 10);
}

void *sub_244CF1E44(unsigned __int8 **a1, void *a2)
{
  return sub_244CF1E4C(a1, a2, 2);
}

void *sub_244CF1E4C(unsigned __int8 **a1, void *a2, int a3)
{
  if ((*((_DWORD *)a1 + 1) & 0xFFFFFEFF) == a3)
  {
    __int16 v4 = sub_244D16D20(a1[1], *(int *)a1, a2);
    uint64_t v5 = v4;
    if (v4)
    {
      if (*((unsigned char *)a1 + 5)) {
        sub_244D16600((uint64_t)v4, 1);
      }
    }
    else
    {
      sub_244D0B884(12, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 452);
    }
  }
  else
  {
    sub_244D0B884(12, 0, 195, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 446);
    return 0;
  }
  return v5;
}

void *sub_244CF1EF4(unsigned __int8 **a1, void *a2)
{
  return sub_244CF1E4C(a1, a2, 10);
}

uint64_t sub_244CF1EFC(void *a1, const void **a2, int a3)
{
  v9[1] = *MEMORY[0x263EF8340];
  if ((*((_DWORD *)a2 + 1) & 0xFFFFFEFF) != a3)
  {
    int v4 = 195;
    __int16 v5 = 315;
    goto LABEL_5;
  }
  v9[0] = 0;
  size_t v3 = *(int *)a2;
  if ((int)v3 >= 9)
  {
    int v4 = 196;
    __int16 v5 = 320;
LABEL_5:
    sub_244D0B884(12, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", v5);
    return 0;
  }
  if (v3)
  {
    memcpy((char *)&v9[1] - v3, a2[1], v3);
    unint64_t v8 = v9[0];
  }
  else
  {
    unint64_t v8 = 0;
  }
  *a1 = bswap64(v8);
  return 1;
}

uint64_t sub_244CF1FE0(void *a1, char *a2, size_t a3, int a4, unint64_t a5)
{
  return sub_244CF1FEC(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t sub_244CF1FEC(void *a1, char *__s, size_t a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v11 = a3;
  if (a3 == -1) {
    size_t v11 = strlen(__s);
  }
  if (!a5) {
    a5 = 10246;
  }
  int v14 = a4 - 4096;
  if ((a4 - 4096) >= 5 || ((0x17u >> a4) & 1) == 0)
  {
    int v15 = 182;
    __int16 v16 = 120;
LABEL_8:
    sub_244D0B884(12, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", v16);
    return 0xFFFFFFFFLL;
  }
  size_t v19 = off_26F954608[v14];
  int v20 = dword_244EAEF90[v14];
  uint64_t v55 = __s;
  size_t v56 = v11;
  int v49 = a1;
  if (v11)
  {
    int v48 = v20;
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    BOOL v24 = a4 == 4098 || a4 == 4100;
    BOOL v50 = v24;
    while (1)
    {
      LODWORD(v54[0]) = 0;
      if (!((unsigned int (*)(char **, _OWORD *))v19)(&v55, v54))
      {
        int v15 = v48;
        __int16 v16 = 131;
        goto LABEL_8;
      }
      if (!v21)
      {
        BOOL v25 = v50;
        if (LODWORD(v54[0]) != 65279) {
          BOOL v25 = 0;
        }
        if (v25) {
          break;
        }
      }
      if ((a5 & 2) != 0)
      {
        unsigned int v26 = v54[0];
        if (LODWORD(v54[0]) > 0x7F
          || !sub_244D443E0(v54[0]) && (v26 > 0x3F || ((1 << v26) & 0xA400FB8100000000) == 0))
        {
          a5 &= ~2uLL;
        }
      }
      if (((LODWORD(v54[0]) > 0x7F) & (a5 >> 4)) != 0) {
        unint64_t v27 = a5 & 0xFFFFFFFFFFFFFFEFLL;
      }
      else {
        unint64_t v27 = a5;
      }
      if (((LODWORD(v54[0]) > 0xFF) & (v27 >> 2)) != 0) {
        v27 &= ~4uLL;
      }
      if ((((v54[0] & 0xFFFF0000) != 0) & (v27 >> 11)) != 0) {
        a5 = v27 & 0xFFFFFFFFFFFFF7FFLL;
      }
      else {
        a5 = v27;
      }
      if (!a5)
      {
        int v15 = 126;
        __int16 v16 = 160;
        goto LABEL_8;
      }
      ++v21;
      uint64_t v28 = sub_244CFDD5C(v54[0]);
      if (a7 >= 1 && v21 > a7)
      {
        sub_244D0B884(12, 0, 173, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 167);
        sub_244D0BA04("maxsize=%zu", v36, v37, v38, v39, v40, v41, v42, a7);
        return 0xFFFFFFFFLL;
      }
      v22 += v28;
      if (!v56) {
        goto LABEL_44;
      }
    }
    int v15 = 126;
    __int16 v16 = 142;
    goto LABEL_8;
  }
  unint64_t v22 = 0;
  unint64_t v21 = 0;
LABEL_44:
  if (a6 >= 1 && v21 < a6)
  {
    sub_244D0B884(12, 0, 174, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 174);
    sub_244D0BA04("minsize=%zu", v29, v30, v31, v32, v33, v34, v35, a6);
    return 0xFFFFFFFFLL;
  }
  if ((a5 & 2) != 0)
  {
    unsigned __int8 v43 = sub_244CFDEE0;
    int v44 = 4097;
    uint64_t v17 = 19;
  }
  else if ((a5 & 0x10) != 0)
  {
    unsigned __int8 v43 = sub_244CFDEE0;
    int v44 = 4097;
    uint64_t v17 = 22;
  }
  else if ((a5 & 4) != 0)
  {
    unsigned __int8 v43 = sub_244CFDEE0;
    int v44 = 4097;
    uint64_t v17 = 20;
  }
  else if ((a5 & 0x800) != 0)
  {
    v21 *= 2;
    int v44 = 4098;
    unsigned __int8 v43 = sub_244CFDF18;
    uint64_t v17 = 30;
  }
  else if ((a5 & 0x100) != 0)
  {
    v21 *= 4;
    int v44 = 4100;
    unsigned __int8 v43 = sub_244CFDF88;
    uint64_t v17 = 28;
  }
  else
  {
    if ((a5 & 0x2000) == 0)
    {
      int v15 = 126;
      __int16 v16 = 206;
      goto LABEL_8;
    }
    unsigned __int8 v43 = sub_244CFDD84;
    int v44 = 4096;
    uint64_t v17 = 12;
    unint64_t v21 = v22;
  }
  if (!v49) {
    return v17;
  }
  uint64_t v45 = (void *)*v49;
  uint64_t v46 = (void *)*v49;
  if (*v49 || (uint64_t v46 = sub_244CF47D0(v17)) != 0)
  {
    memset(v54, 0, sizeof(v54));
    sub_244CFB3CC(v54);
    if (v44 == a4)
    {
      if (sub_244CF45A0((uint64_t)v46, __s, v11))
      {
        *((_DWORD *)v46 + 1) = v17;
LABEL_70:
        *int v49 = v46;
        return v17;
      }
    }
    else if (sub_244CFB3DC((uint64_t)v54, v21 + 1))
    {
      uint64_t v55 = __s;
      size_t v56 = v11;
      if (v11)
      {
        while (1)
        {
          unsigned int v53 = 0;
          if (!((unsigned int (*)(char **, unsigned int *))v19)(&v55, &v53)
            || !((unsigned int (*)(_OWORD *, void))v43)(v54, v53))
          {
            break;
          }
          if (!v56) {
            goto LABEL_76;
          }
        }
        sub_244D0B884(12, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 244);
      }
      else
      {
LABEL_76:
        unint64_t v51 = 0;
        uint64_t v52 = 0;
        if (sub_244CFB8C4((uint64_t)v54, 0))
        {
          if (sub_244CFB48C((uint64_t)v54, &v52, &v51))
          {
            int v47 = v51;
            if (v51)
            {
              if (!(v51 >> 31))
              {
                *((_DWORD *)v46 + 1) = v17;
                sub_244CF4790((uint64_t)v46, (uint64_t)v52, v47 - 1);
                goto LABEL_70;
              }
            }
          }
        }
        sub_244D0B884(12, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 254);
        sub_244D440EC(v52);
      }
    }
    if (!v45) {
      sub_244CF474C((uint64_t)v46);
    }
    sub_244CFB470((uint64_t)v54);
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_244CF24D4(unsigned int a1)
{
  if (a1 > 0x7F) {
    return 0;
  }
  if (sub_244D443E0(a1) || a1 <= 0x3D && ((1 << a1) & 0x2400FB8100000000) != 0) {
    return 1;
  }
  return a1 == 63;
}

uint64_t sub_244CF2544(uint64_t a1, void **a2)
{
  if (!a1)
  {
    int v6 = 67;
    __int16 v7 = 74;
LABEL_10:
    sub_244D0B884(12, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", v7);
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  if ((int)v3 <= 0)
  {
    int v6 = 134;
    __int16 v7 = 79;
    goto LABEL_10;
  }
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  if (sub_244CFB3DC((uint64_t)v9, v3 + 2)
    && sub_244CFB808((uint64_t *)v9, (uint64_t)v8, 6u)
    && sub_244CFBA40((uint64_t)v8, *(const void **)(a1 + 24), *(int *)(a1 + 20)))
  {
    return sub_244CFAE28((uint64_t)v9, a2);
  }
  sub_244CFB470((uint64_t)v9);
  return 0xFFFFFFFFLL;
}

size_t sub_244CF2620(unsigned char *a1, int a2, uint64_t a3)
{
  return sub_244D45104(a1, a2, a3, 0);
}

uint64_t sub_244CF2628(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2 && *(void *)(a2 + 24))
  {
    int v4 = v12;
    int v5 = sub_244D45104(v12, 80, a2, 0);
    if (v5 < 80)
    {
      unint64_t v8 = 0;
    }
    else
    {
      int v6 = v5 + 1;
      __int16 v7 = (char *)sub_244D43FF4((v5 + 1));
      if (!v7) {
        return 0xFFFFFFFFLL;
      }
      unint64_t v8 = v7;
      int v5 = sub_244D45104(v7, v6, a2, 0);
      int v4 = v8;
    }
    if (v5 >= 1) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = "<INVALID>";
    }
    uint64_t v11 = sub_244CF275C(a1, v10);
    sub_244D440EC(v8);
    return v11;
  }

  return sub_244CF275C(a1, "NULL");
}

uint64_t sub_244CF275C(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >> 31)
  {
    sub_244D0B884(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", 101);
    return 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int v6 = v4;
    if (sub_244CF8524(a1, (uint64_t)__s, v4) == v4) {
      return v6;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
}

const char **sub_244CF27D8(const char ***a1, void *a2, uint64_t a3)
{
  if (a3 < 0) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  *(void *)&long long v9 = *a2;
  *((void *)&v9 + 1) = a3;
  if (sub_244CFCD34(&v9, &v7, 6))
  {
    uint64_t v6 = v7;
    uint64_t result = sub_244CF2878(a1, &v6, v8);
    if (result) {
      *a2 = v9;
    }
  }
  else
  {
    sub_244D0B884(12, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", 142);
    return 0;
  }
  return result;
}

const char **sub_244CF2878(const char ***a1, uint64_t *a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __int16 v7 = 159;
LABEL_9:
    sub_244D0B884(12, 0, 146, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", v7);
    return 0;
  }
  v9[0] = (unsigned __int8 *)*a2;
  v9[1] = (unsigned __int8 *)a3;
  if (!sub_244CFD4E8(v9))
  {
    __int16 v7 = 166;
    goto LABEL_9;
  }
  uint64_t v6 = sub_244CF2948(0, *a2, a3, 0, 0);
  if (v6)
  {
    if (a1)
    {
      sub_244CF29AC((void **)*a1);
      *a1 = v6;
    }
    *a2 += a3;
  }
  return v6;
}

const char **sub_244CF2948(int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >> 31)
  {
    sub_244D0B884(12, 0, 173, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", 222);
    return 0;
  }
  else
  {
    v6[0] = a4;
    v6[1] = a5;
    uint64_t v9 = a2;
    int v7 = a1;
    int v8 = a3;
    uint64_t v10 = 13;
    return sub_244D44844((uint64_t)v6);
  }
}

void sub_244CF29AC(void **a1)
{
  if (!a1) {
    return;
  }
  int v2 = *((_DWORD *)a1 + 8);
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    sub_244D440EC(a1[3]);
    a1[3] = 0;
    *((_DWORD *)a1 + 5) = 0;
    if ((a1[4] & 1) == 0) {
      return;
    }
    goto LABEL_8;
  }
  sub_244D440EC(*a1);
  sub_244D440EC(a1[1]);
  *a1 = 0;
  a1[1] = 0;
  int v2 = *((_DWORD *)a1 + 8);
  if ((v2 & 8) != 0) {
    goto LABEL_7;
  }
LABEL_4:
  if ((v2 & 1) == 0) {
    return;
  }
LABEL_8:

  sub_244D440EC(a1);
}

double sub_244CF2A34()
{
  uint64_t v0 = sub_244D43FF4(0x28uLL);
  if (v0)
  {
    double result = 0.0;
    *(_OWORD *)uint64_t v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_DWORD *)v0 + 8) = 1;
  }
  return result;
}

uint64_t sub_244CF2A68(uint64_t a1, char *a2, int a3)
{
  return sub_244CF45A0(a1, a2, a3);
}

uint64_t sub_244CF2A70(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v6 = *(_DWORD *)(a2 + 4);
  if ((a3 & 0x40) != 0)
  {
    int v8 = sub_244CF48F0(*(_DWORD *)(a2 + 4));
    int v9 = strlen(v8);
    int v10 = v9;
    if (a1)
    {
      if (sub_244CF8524(a1, (uint64_t)v8, v9) != v9) {
        return 0xFFFFFFFFLL;
      }
      int v11 = sub_244CF8524(a1, (uint64_t)":", 1);
      int v7 = v11 == 1 ? v10 + 1 : v10;
      if (v11 != 1) {
        return 0xFFFFFFFFLL;
      }
      if ((a3 & 0x80) != 0) {
        goto LABEL_27;
      }
    }
    else
    {
      int v7 = v9 + 1;
      if ((a3 & 0x80) != 0) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v7 = 0;
    if ((a3 & 0x80) != 0) {
      goto LABEL_27;
    }
  }
  if ((a3 & 0x20) != 0)
  {
LABEL_14:
    int v12 = 4097;
    goto LABEL_15;
  }
  int v12 = sub_244CF2C84(v6);
  if (v12 == -1)
  {
    if ((a3 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_27:
    if (a1 && sub_244CF8524(a1, (uint64_t)"#", 1) != 1) {
      return 0xFFFFFFFFLL;
    }
    if ((a3 & 0x200) != 0)
    {
      v21[0] = 0;
      v21[1] = 0;
      sub_244CF3DE8((int *)v21, a2);
      int v20 = 0;
      int v17 = sub_244CF7E9C((uint64_t)v21, &v20);
      int v16 = -1;
      if ((v17 & 0x80000000) == 0)
      {
        int v18 = sub_244CF3298(a1, (unsigned __int8 *)v20, v17);
        sub_244D440EC(v20);
        if (v18 >= 0) {
          int v16 = v18 + 1;
        }
        else {
          int v16 = -1;
        }
      }
    }
    else
    {
      int v15 = sub_244CF3298(a1, *(unsigned __int8 **)(a2 + 8), *(_DWORD *)a2);
      if (v15 < 0) {
        return 0xFFFFFFFFLL;
      }
      int v16 = v15 + 1;
    }
    if ((v16 & 0x80000000) == 0) {
      return (v16 + v7);
    }
    return 0xFFFFFFFFLL;
  }
LABEL_15:
  LOBYTE(v21[0]) = 0;
  int v13 = sub_244CF2CA8(*(void *)(a2 + 8), *(_DWORD *)a2, v12, a3, v21, 0);
  if (v13 < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = LOBYTE(v21[0]) ? (v13 + v7 + 2) : (v13 + v7);
  if (a1
    && (LOBYTE(v21[0]) && sub_244CF8524(a1, (uint64_t)"\"", 1) != 1
     || (sub_244CF2CA8(*(void *)(a2 + 8), *(_DWORD *)a2, v12, a3, 0, a1) & 0x80000000) != 0
     || LOBYTE(v21[0]) && sub_244CF8524(a1, (uint64_t)"\"", 1) != 1))
  {
    return 0xFFFFFFFFLL;
  }
  return v14;
}

uint64_t sub_244CF2C84(int a1)
{
  if ((a1 - 12) > 0x12) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_244EAEFA4[a1 - 12];
  }
}

uint64_t sub_244CF2CA8(uint64_t a1, int a2, int a3, char a4, unsigned char *a5, uint64_t a6)
{
  int v6 = a3 - 4096;
  if ((a3 - 4096) > 4 || ((0x17u >> a3) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  int v10 = off_26F954630[v6];
  int v11 = dword_244EAEFF0[v6];
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  if (!a2) {
    return 0;
  }
  int v28 = v11;
  uint64_t v7 = 0;
  uint64_t v29 = v10;
  while (1)
  {
    uint64_t v15 = v33;
    BOOL v16 = v33 == a1;
    unsigned int v32 = 0;
    if (!((unsigned int (*)(uint64_t *, unsigned int *))v10)(&v33, &v32))
    {
      sub_244D0B884(12, 0, v28, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strex.c", 168);
      return 0xFFFFFFFFLL;
    }
    uint64_t v17 = v34;
    if ((a4 & 0x10) == 0)
    {
      int v18 = sub_244CF3338(v32, a4, a5, a6, v16, v34 == 0);
      if (v18 < 0) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = (v18 + v7);
      goto LABEL_29;
    }
    memset(v30, 0, sizeof(v30));
    sub_244CFB440((uint64_t)v30, (uint64_t)v31, 6);
    if (!sub_244CFDD84((uint64_t)v30, v32))
    {
      sub_244D0B884(12, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strex.c", 177);
      return 1;
    }
    uint64_t v19 = sub_244CFB760((uint64_t)v30);
    if (v19) {
      break;
    }
LABEL_28:
    int v10 = v29;
LABEL_29:
    if (!v34) {
      return v7;
    }
  }
  uint64_t v20 = v19;
  uint64_t v21 = 0;
  uint64_t v22 = v19 - 1;
  while (1)
  {
    BOOL v23 = v15 == a1 && v21 == 0;
    int v24 = v23;
    BOOL v25 = !v17 && v22 == v21;
    int v26 = v25;
    int v27 = sub_244CF3338(v31[v21], a4, a5, a6, v24, v26);
    if (v27 < 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v7 = (v27 + v7);
    if (v20 == ++v21) {
      goto LABEL_28;
    }
  }
}

uint64_t sub_244CF2E84(uint64_t a1, uint64_t a2, __int16 a3)
{
  if (a1)
  {
    int v5 = sub_244CF90D4();
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v7 = sub_244CF2A70((uint64_t)v5, a2, a3);
  sub_244CF830C((uint64_t)v5);
  return v7;
}

uint64_t sub_244CF2EF0(void *a1, char **a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  int v4 = sub_244CF2C84(*((_DWORD *)a2 + 1));
  if (v4 == -1)
  {
    sub_244D0B884(12, 0, 185, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strex.c", 369);
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v6 = &v7;
    uint64_t v9 = 0;
    uint64_t result = sub_244CF1FE0(&v6, a2[1], *(int *)a2, v4, 0x2000uLL);
    if ((result & 0x80000000) == 0)
    {
      *a1 = v8;
      return v7;
    }
  }
  return result;
}

BOOL sub_244CF2F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  int v3 = *(_DWORD *)a2;
  if (*(int *)a2 < 1) {
    return 1;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  do
  {
    char v8 = *(unsigned char *)(v7 + v5);
    if (v8 == 127)
    {
      char v8 = 46;
    }
    else
    {
      if (v8 == 10) {
        char v9 = 10;
      }
      else {
        char v9 = 46;
      }
      if (v8 == 13) {
        char v9 = 13;
      }
      if (v8 <= 31) {
        char v8 = v9;
      }
    }
    v11[v6] = v8;
    if (v6 < 79)
    {
      ++v6;
    }
    else
    {
      if ((int)sub_244CF8524(a1, (uint64_t)v11, v6 + 1) < 1) {
        return 0;
      }
      int v6 = 0;
      int v3 = *(_DWORD *)a2;
    }
    ++v5;
  }
  while (v5 < v3);
  return v6 < 1 || (int)sub_244CF8524(a1, (uint64_t)v11, v6) >= 1;
}

BOOL sub_244CF30C8(uint64_t a1, int *a2)
{
  int v2 = a2[1];
  if (v2 == 24)
  {
    return sub_244CF31E4(a1, a2);
  }
  else if (v2 == 23)
  {
    return sub_244CF3130(a1, a2);
  }
  else
  {
    sub_244CF8634(a1, "Bad time value");
    return 0;
  }
}

BOOL sub_244CF3130(uint64_t a1, int *a2)
{
  uint64_t v3 = *a2;
  *(void *)&long long v9 = *((void *)a2 + 1);
  *((void *)&v9 + 1) = v3;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  if (sub_244CFDA84(&v9, (int *)&v5, 0)) {
    return (int)sub_244CF98F4(a1, "%s %2d %02d:%02d:%02d %d GMT", off_26519CFE8[(int)v6], HIDWORD(v5), DWORD2(v5), DWORD1(v5), v5, DWORD1(v6) + 1900) > 0;
  }
  sub_244CF8634(a1, "Bad time value");
  return 0;
}

BOOL sub_244CF31E4(uint64_t a1, int *a2)
{
  uint64_t v3 = *a2;
  *(void *)&long long v9 = *((void *)a2 + 1);
  *((void *)&v9 + 1) = v3;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  if (sub_244CFD780(&v9, (int *)&v5, 0)) {
    return (int)sub_244CF98F4(a1, "%s %2d %02d:%02d:%02d %d GMT", off_26519CFE8[(int)v6], HIDWORD(v5), DWORD2(v5), DWORD1(v5), v5, DWORD1(v6) + 1900) > 0;
  }
  sub_244CF8634(a1, "Bad time value");
  return 0;
}

uint64_t sub_244CF3298(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (!a1 || !a3) {
    return (2 * a3);
  }
  uint64_t v6 = a3;
  while (1)
  {
    unint64_t v7 = *a2;
    v9[0] = a0123456789abcd_0[v7 >> 4];
    v9[1] = a0123456789abcd_0[v7 & 0xF];
    if (sub_244CF8524(a1, (uint64_t)v9, 2) != 2) {
      break;
    }
    ++a2;
    if (!--v6) {
      return (2 * a3);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_244CF3338(unsigned int a1, char a2, unsigned char *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v10 = a1;
  if (a1 >= 0x10000)
  {
    snprintf(__str, 0x10uLL, "\\W%08X");
    goto LABEL_27;
  }
  if (a1 >= 0x100)
  {
    snprintf(__str, 0x10uLL, "\\U%04X");
    goto LABEL_27;
  }
  if (a1 >= 0x80 && (a2 & 4) != 0 || (a2 & 2) != 0 && (a1 < 0x20u || a1 == 127))
  {
    snprintf(__str, 0x10uLL, "\\%02X");
    goto LABEL_27;
  }
  if ((a2 & 1) == 0)
  {
    if (a1 == 92 && (a2 & 0xF) != 0) {
      goto LABEL_26;
    }
LABEL_20:
    if (!a4) {
      return 1;
    }
    if (sub_244CF8524(a4, (uint64_t)&v10, 1) == 1) {
      return 1;
    }
    return 0xFFFFFFFFLL;
  }
  char v7 = a1 - 34;
  if (a1 - 34 > 0x3A)
  {
LABEL_32:
    if ((!a5 || a1 != 32 && a1 != 35) && (a1 != 32 || !a6)) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (((1 << v7) & 0x16000600) == 0)
  {
    if (((1 << v7) & 0x400000000000001) != 0) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
LABEL_17:
  if ((a2 & 8) != 0)
  {
    if (a3) {
      *a3 = 1;
    }
    goto LABEL_20;
  }
LABEL_26:
  snprintf(__str, 0x10uLL, "\\%c");
LABEL_27:
  size_t v8 = strlen(__str);
  if (a4)
  {
    if (sub_244CF8524(a4, (uint64_t)__str, v8) == v8) {
      return v8;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v8;
}

uint64_t sub_244CF34F8()
{
  return 0x2000;
}

uint64_t sub_244CF3500(uint64_t *a1, char *a2, size_t a3, int a4, int a5)
{
  uint64_t v13 = 0;
  if (a1) {
    size_t v8 = a1;
  }
  else {
    size_t v8 = &v13;
  }
  long long v9 = (uint64_t *)sub_244CF35AC(a5);
  if (v9)
  {
    if ((v9[4] & 2) != 0) {
      unint64_t v10 = v9[3];
    }
    else {
      unint64_t v10 = v9[3] & 0x2000;
    }
    int v11 = sub_244CF1FEC(v8, a2, a3, a4, v10, v9[1], v9[2]);
  }
  else
  {
    int v11 = sub_244CF1FE0(v8, a2, a3, a4, 0x2000uLL);
  }
  if (v11 < 1) {
    return 0;
  }
  else {
    return *v8;
  }
}

uint64_t sub_244CF35AC(int a1)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  LODWORD(v3[0]) = a1;
  uint64_t v1 = (uint64_t)bsearch(v3, &unk_244EAF008, 0x13uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))sub_244CF3838);
  if (!v1)
  {
    sub_244D4BD50(&stru_268EBD1C8);
    if (qword_268EBEDF0) {
      uint64_t v1 = sub_244D43BC4((void *)qword_268EBEDF0, (uint64_t)v3, (uint64_t (*)(void, uint64_t))sub_244CF3850, (unsigned int (*)(void, void, uint64_t))sub_244CF385C);
    }
    else {
      uint64_t v1 = 0;
    }
    sub_244D4BD90(&stru_268EBD1C8);
  }
  return v1;
}

uint64_t sub_244CF366C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!sub_244CF35AC(a1))
  {
    sub_244D4BD70(&stru_268EBD1C8);
    if (qword_268EBEDF0)
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      LODWORD(v14[0]) = a1;
      if (sub_244D43BC4((void *)qword_268EBEDF0, (uint64_t)v14, (uint64_t (*)(void, uint64_t))sub_244CF3850, (unsigned int (*)(void, void, uint64_t))sub_244CF385C))
      {
        sub_244D0B884(12, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strnid.c", 212);
        goto LABEL_11;
      }
    }
    else
    {
      qword_268EBEDF0 = (uint64_t)sub_244D43AD0((uint64_t)sub_244CF3800, (uint64_t)sub_244CF3808);
      if (!qword_268EBEDF0) {
        goto LABEL_11;
      }
    }
    int v11 = sub_244D43FF4(0x28uLL);
    if (v11)
    {
      uint64_t v12 = v11;
      *(_DWORD *)int v11 = a1;
      v11[1] = a2;
      unint64_t v11[2] = a3;
      void v11[3] = a4;
      void v11[4] = a5;
      *(void *)&v14[0] = 0;
      if (sub_244D43D34((void *)qword_268EBEDF0, v14, (uint64_t)v11, (uint64_t (*)(void, uint64_t))sub_244CF3850, (unsigned int (*)(void, void, uint64_t))sub_244CF385C))
      {
        uint64_t v10 = 1;
LABEL_12:
        sub_244D4BD90(&stru_268EBD1C8);
        return v10;
      }
      sub_244D440EC(v12);
    }
LABEL_11:
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  sub_244D0B884(12, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strnid.c", 194);
  return 0;
}

uint64_t sub_244CF3800(unsigned __int8 *a1)
{
  return sub_244D44204(a1, 4);
}

uint64_t sub_244CF3808(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

void *sub_244CF3820(void *result, void *a2)
{
  *uint64_t result = &unk_244EAF008;
  *a2 = 19;
  return result;
}

uint64_t sub_244CF3838(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t sub_244CF3850(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_244CF385C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_244CF386C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D048);
}

uint64_t sub_244CF3878(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D048);
}

uint64_t sub_244CF3884()
{
  return sub_244CF7888((uint64_t)&unk_26519D048);
}

void sub_244CF3890(uint64_t a1)
{
}

void *sub_244CF389C(void *a1, uint64_t a2)
{
  return sub_244CF38A8(a1, a2, 0, 0);
}

void *sub_244CF38A8(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  if (!sub_244CF4DF4(a2, (uint64_t)&v9))
  {
    sub_244D0B884(12, 0, 113, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_time.c", 95);
    return 0;
  }
  if ((a3 || a4) && !sub_244CF5098((int *)&v9, a3, a4)) {
    return 0;
  }
  if ((DWORD1(v10) - 150) >= 0xFFFFFF9C) {
    return sub_244CF40B4(a1, a2, a3, a4);
  }
  else {
    return sub_244CF13CC(a1, a2, a3, a4);
  }
}

BOOL sub_244CF3970(int *a1)
{
  int v1 = a1[1];
  if (v1 == 23) {
    return sub_244CF401C(a1);
  }
  if (v1 == 24) {
    return sub_244CF1338(a1);
  }
  return 0;
}

void *sub_244CF3994(int *a1, void **a2)
{
  if (!sub_244CF3970(a1)) {
    return 0;
  }
  if (!a2 || (uint64_t v4 = *a2) == 0)
  {
    uint64_t v4 = sub_244CF7DF8();
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (a1[1] == 24)
  {
    if (sub_244CF45A0((uint64_t)v4, *((char **)a1 + 1), *a1))
    {
      if (!a2) {
        return v4;
      }
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (!sub_244CF45A0((uint64_t)v4, 0, *a1 + 2))
  {
LABEL_16:
    if (!a2 || *a2 != v4) {
      sub_244CF7CBC((uint64_t)v4);
    }
    return 0;
  }
  unint64_t v5 = *a1 + 3;
  uint64_t v6 = (unsigned char *)v4[1];
  if (**((unsigned __int8 **)a1 + 1) <= 0x34u) {
    char v7 = "20";
  }
  else {
    char v7 = "19";
  }
  sub_244D4476C((unsigned char *)v4[1], v7, *a1 + 3);
  sub_244D447E4(v6, *((char **)a1 + 1), v5);
  if (a2)
  {
LABEL_14:
    if (!*a2) {
      *a2 = v4;
    }
  }
  return v4;
}

BOOL sub_244CF3AA4(uint64_t a1, char *a2)
{
  return sub_244CF402C(a1, a2) || sub_244CF1344(a1, a2) != 0;
}

uint64_t sub_244CF3AEC(uint64_t a1, char *__s)
{
  *(void *)&long long v9 = __s;
  *((void *)&v9 + 1) = strlen(__s);
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  if (sub_244CFDA84(&v9, 0, 0)) {
    goto LABEL_2;
  }
  uint64_t result = sub_244CFD780(&v9, (int *)&v5, 0);
  if (result)
  {
    if ((DWORD1(v6) - 150) < 0xFFFFFF9C)
    {
      int v3 = 24;
      if (a1) {
        goto LABEL_3;
      }
      return 1;
    }
    sub_244CFC510(&v9, 2uLL);
LABEL_2:
    int v3 = 23;
    if (a1)
    {
LABEL_3:
      uint64_t result = sub_244CF45A0(a1, (char *)v9, *((size_t *)&v9 + 1));
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 4) = v3;
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CF3BA8(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t result = sub_244CF3C38((int *)v10, a3, 1);
  if (result)
  {
    uint64_t result = sub_244CF3C38((int *)v8, a4, 1);
    if (result) {
      return sub_244CF5144(a1, a2, (int *)v10, (int *)v8);
    }
  }
  return result;
}

BOOL sub_244CF3C38(int *a1, int *a2, int a3)
{
  if (a2)
  {
    int v4 = a2[1];
    if (v4 == 24)
    {
      return sub_244CF12E0(a1, a2);
    }
    else if (v4 == 23)
    {
      return sub_244CF3FC8(a1, a2, a3);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    time_t v6 = time(0);
    return sub_244CF4DF4(v6, (uint64_t)a1) != 0;
  }
}

uint64_t sub_244CF3CD0(int *a1, void *a2)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  uint64_t result = sub_244CF3C38((int *)v4, a1, 0);
  if (result) {
    return sub_244CF5024((int *)v4, a2);
  }
  return result;
}

uint64_t sub_244CF3D28(int *a1, void *a2)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  uint64_t result = sub_244CF3C38((int *)v4, a1, 0);
  if (result) {
    return sub_244CF4BFC((int *)v4, a2);
  }
  return result;
}

uint64_t sub_244CF3D80(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((result | 4) != 5)
  {
    if (*((void *)a1 + 1)) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_244CF3DA8(int *a1)
{
  int v1 = *a1;
  if (*a1 == 6) {
    return *((void *)a1 + 1);
  }
  if (v1 == 5) {
    return 0;
  }
  if (v1 != 1) {
    return *((void *)a1 + 1);
  }
  if (a1[2]) {
    return 255;
  }
  else {
    return 0;
  }
}

void sub_244CF3DE8(int *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3 == 266) {
    int v4 = 10;
  }
  else {
    int v4 = *(_DWORD *)(a2 + 4);
  }
  if (v3 == 258) {
    int v5 = 2;
  }
  else {
    int v5 = v4;
  }
  sub_244CF3E0C(a1, v5, a2);
}

void sub_244CF3E0C(int *a1, int a2, uint64_t a3)
{
  sub_244CF3E7C(a1);
  *a1 = a2;
  if (a2 == 1)
  {
    if (a3) {
      int v6 = 255;
    }
    else {
      int v6 = 0;
    }
    a1[2] = v6;
  }
  else if (a2 == 5)
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *((void *)a1 + 1) = a3;
  }
}

void sub_244CF3E7C(int *a1)
{
  int v2 = *a1;
  if (*a1 == 1)
  {
    a1[2] = -1;
  }
  else
  {
    if (v2 == 6)
    {
      sub_244CF29AC(*((void ***)a1 + 1));
    }
    else if (v2 != 5)
    {
      sub_244CF474C(*((void *)a1 + 1));
    }
    *((void *)a1 + 1) = 0;
  }
}

uint64_t sub_244CF3EDC(uint64_t a1, int a2, int *a3)
{
  if (a2 != 1 && a3)
  {
    if (a2 == 6)
    {
      uint64_t result = (uint64_t)sub_244D44844((uint64_t)a3);
      if (!result) {
        return result;
      }
      uint64_t v6 = result;
      sub_244CF3E7C((int *)a1);
      *(_DWORD *)a1 = 6;
      *(void *)(a1 + 8) = v6;
      return 1;
    }
    uint64_t result = (uint64_t)sub_244CF4698(a3);
    if (!result) {
      return result;
    }
    a3 = (int *)result;
  }
  sub_244CF3E0C((int *)a1, a2, (uint64_t)a3);
  return 1;
}

uint64_t sub_244CF3F58(int *a1, uint64_t a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  if (!a1 || !a2) {
    return v2;
  }
  int v3 = *a1;
  if (*a1 != *(_DWORD *)a2) {
    return 0xFFFFFFFFLL;
  }
  switch(v3)
  {
    case 1:
      return (a1[2] - *(_DWORD *)(a2 + 8));
    case 5:
      return 0;
    case 6:
      return sub_244D44948(*((void *)a1 + 1), *(void *)(a2 + 8));
    default:
      return sub_244CF4804(*((void *)a1 + 1), *(void *)(a2 + 8));
  }
}

BOOL sub_244CF3FC8(int *a1, int *a2, int a3)
{
  if (a2[1] != 23) {
    return 0;
  }
  uint64_t v3 = *a2;
  *(void *)&long long v5 = *((void *)a2 + 1);
  *((void *)&v5 + 1) = v3;
  return sub_244CFDA84(&v5, a1, a3) != 0;
}

BOOL sub_244CF401C(int *a1)
{
  return sub_244CF3FC8(0, a1, 1);
}

uint64_t sub_244CF402C(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  *(void *)&long long v6 = __s;
  *((void *)&v6 + 1) = v4;
  uint64_t result = sub_244CFDA84(&v6, 0, 0);
  if (result)
  {
    if (a1)
    {
      uint64_t result = sub_244CF45A0(a1, __s, v4);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 4) = 23;
    }
    return 1;
  }
  return result;
}

void *sub_244CF40A8(void *a1, uint64_t a2)
{
  return sub_244CF40B4(a1, a2, 0, 0);
}

void *sub_244CF40B4(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  if (!sub_244CF4DF4(a2, (uint64_t)&v11)
    || (a3 || a4) && !sub_244CF5098((int *)&v11, a3, a4)
    || (DWORD1(v12) - 150) < 0xFFFFFF9C)
  {
    return 0;
  }
  if (DWORD1(v12) >= 0x64) {
    int v9 = DWORD1(v12) - 100;
  }
  else {
    int v9 = DWORD1(v12);
  }
  if (snprintf(__str, 0xEuLL, "%02d%02d%02d%02d%02d%02dZ", v9, v12 + 1, HIDWORD(v11), DWORD2(v11), DWORD1(v11), v11) != 13)abort(); {
  long long v7 = a1;
  }
  if (a1 || (long long v7 = sub_244CF7DD8()) != 0)
  {
    size_t v10 = strlen(__str);
    if (sub_244CF45A0((uint64_t)v7, __str, v10))
    {
      *((_DWORD *)v7 + 1) = 23;
      return v7;
    }
    if (!a1) {
      sub_244CF7CBC((uint64_t)v7);
    }
    return 0;
  }
  return v7;
}

uint64_t sub_244CF4200(int *a1, uint64_t a2)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = 0;
  if (!sub_244CF3FC8((int *)v8, a1, 1)
    || !sub_244CF4DF4(a2, (uint64_t)v6)
    || !sub_244CF5144((_DWORD *)&v5 + 1, &v5, (int *)v6, (int *)v8))
  {
    return 4294967294;
  }
  if (v5 > 0) {
    return 1;
  }
  if (v5 < 0) {
    return 0xFFFFFFFFLL;
  }
  if (v5) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = 0;
  }
  if ((int)v5 <= 0) {
    return v4;
  }
  else {
    return 1;
  }
}

uint64_t sub_244CF42C0(void *a1, unint64_t *a2, int *a3, int *a4, uint64_t a5)
{
  if (a5 < 0)
  {
    __int16 v10 = 119;
  }
  else
  {
    unsigned int v18 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    *(void *)&long long v17 = *a1;
    *((void *)&v17 + 1) = a5;
    if (sub_244CFCAC8(&v17, &v15, &v18) && (unint64_t v9 = v16, !(v16 >> 30)))
    {
      int v11 = HIBYTE(v18) & 0xC0;
      int v12 = v18 & 0x1FFFFFFF;
      if ((v18 & 0x1FFFFFFF) < 0x100 || v11 != 0)
      {
        uint64_t result = HIBYTE(v18) & 0x20;
        *a1 = v15;
        *a2 = v9;
        *a3 = v12;
        *a4 = v11;
        return result;
      }
      __int16 v10 = 141;
    }
    else
    {
      __int16 v10 = 130;
    }
  }
  sub_244D0B884(12, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn1_lib.c", v10);
  return 128;
}

unsigned char **sub_244CF43C0(unsigned char **result, int a2, int a3, int a4, char a5)
{
  uint64_t v5 = *result;
  char v6 = a5 & 0xC0 | (32 * (a2 != 0));
  if (a4 > 30)
  {
    uint64_t v8 = 0;
    unsigned char *v5 = v6 | 0x1F;
    unsigned int v9 = a4;
    do
    {
      ++v8;
      BOOL v10 = v9 >= 0x80;
      v9 >>= 7;
    }
    while (v10);
    uint64_t v11 = 0;
    do
    {
      v5[v11 + v8] = a4 & 0x7F | ((v11 != 0) << 7);
      a4 = a4 >> 7;
      --v11;
    }
    while (v11 + v8 > 0);
    uint64_t v7 = &v5[v8 + 1];
  }
  else
  {
    unsigned char *v5 = v6 | a4 & 0x1F;
    uint64_t v7 = v5 + 1;
  }
  if (a2 == 2)
  {
    *uint64_t v7 = 0x80;
    int v12 = v7 + 1;
  }
  else if (a3 >= 128)
  {
    uint64_t v13 = 1;
    unsigned int v14 = a3;
    do
    {
      ++v13;
      BOOL v15 = v14 > 0xFF;
      v14 >>= 8;
    }
    while (v15);
    *uint64_t v7 = (v13 - 1) | 0x80;
    uint64_t v16 = v13;
    do
    {
      v7[(v16 - 2) + 1] = a3;
      a3 = a3 >> 8;
      --v16;
    }
    while (v16 > 1);
    int v12 = &v7[v13];
  }
  else
  {
    *uint64_t v7 = a3;
    int v12 = v7 + 1;
  }
  *uint64_t result = v12;
  return result;
}

uint64_t sub_244CF44C0(_WORD **a1)
{
  int v1 = *a1;
  _WORD *v1 = 0;
  *a1 = v1 + 1;
  return 2;
}

uint64_t sub_244CF44D4(int a1, int a2, int a3)
{
  if (a2 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v3 = 1;
  if (a3 >= 31)
  {
    do
    {
      ++v3;
      BOOL v4 = a3 > 0x7F;
      a3 = a3 >> 7;
    }
    while (v4);
  }
  if (a1 == 2)
  {
    int v5 = v3 + 3;
  }
  else
  {
    int v5 = v3 + 1;
    if (a2 >= 128)
    {
      unsigned int v7 = a2;
      do
      {
        ++v5;
        BOOL v4 = v7 > 0xFF;
        v7 >>= 8;
      }
      while (v4);
    }
  }
  if (v5 >= (a2 ^ 0x7FFFFFFF)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v5 + a2);
  }
}

uint64_t sub_244CF4548(uint64_t a1, char **a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = sub_244CF45A0(a1, a2[1], *(int *)a2);
  if (result)
  {
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    *(void *)(a1 + 16) = a2[2];
    return 1;
  }
  return result;
}

uint64_t sub_244CF45A0(uint64_t a1, char *__s, size_t __n)
{
  size_t v3 = __n;
  if ((__n & 0x8000000000000000) != 0)
  {
    if (!__s) {
      return 0;
    }
    size_t v3 = strlen(__s);
  }
  if (v3 >= 0x4000001)
  {
    sub_244D0B884(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn1_lib.c", 287);
    return 0;
  }
  unsigned int v7 = *(void **)(a1 + 8);
  if (*(_DWORD *)a1 <= (int)v3)
  {
    if (v7)
    {
      uint64_t v8 = sub_244D44148(*(void **)(a1 + 8), v3 + 1);
      unsigned int v9 = v7;
      unsigned int v7 = v8;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_14;
  }
  unsigned int v7 = sub_244D43FF4(v3 + 1);
  unsigned int v9 = 0;
LABEL_13:
  *(void *)(a1 + 8) = v7;
  if (!v7)
  {
    uint64_t result = 0;
    *(void *)(a1 + 8) = v9;
    return result;
  }
LABEL_14:
  *(_DWORD *)a1 = v3;
  if (__s)
  {
    if (v3)
    {
      memcpy(v7, __s, v3);
      unsigned int v7 = *(void **)(a1 + 8);
    }
    *((unsigned char *)v7 + v3) = 0;
  }
  return 1;
}

void *sub_244CF4698(int *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = sub_244D43FF4(0x18uLL);
  size_t v3 = v2;
  if (v2)
  {
    void *v2 = 0x400000000;
    v2[1] = 0;
    v2[2] = 0;
    if (sub_244CF45A0((uint64_t)v2, *((char **)a1 + 1), *a1))
    {
      *((_DWORD *)v3 + 1) = a1[1];
      _OWORD v3[2] = *((void *)a1 + 2);
      return v3;
    }
    sub_244D440EC((void *)v3[1]);
    sub_244D440EC(v3);
    return 0;
  }
  return v3;
}

double sub_244CF471C()
{
  uint64_t v0 = sub_244D43FF4(0x18uLL);
  if (v0)
  {
    *(void *)&double result = 0x400000000;
    void *v0 = 0x400000000;
    v0[1] = 0;
    v0[2] = 0;
  }
  return result;
}

void sub_244CF474C(uint64_t a1)
{
  if (a1)
  {
    sub_244D440EC(*(void **)(a1 + 8));
    sub_244D440EC((void *)a1);
  }
}

void sub_244CF4790(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)a1 = a3;
}

void *sub_244CF47D0(int a1)
{
  double result = sub_244D43FF4(0x18uLL);
  if (result)
  {
    *(_DWORD *)double result = 0;
    *((_DWORD *)result + 1) = a1;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

uint64_t sub_244CF4804(uint64_t a1, uint64_t a2)
{
  signed int v4 = *(_DWORD *)a2;
  __int16 v12 = 0;
  signed int v5 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) == 3) {
    signed int v5 = sub_244CF0C54((unsigned int *)a1, (unsigned char *)&v12 + 1);
  }
  if (*(_DWORD *)(a2 + 4) == 3) {
    signed int v4 = sub_244CF0C54((unsigned int *)a2, &v12);
  }
  if (v5 < v4) {
    return 0xFFFFFFFFLL;
  }
  if (v5 > v4) {
    return 1;
  }
  if (HIBYTE(v12) > v12) {
    return 0xFFFFFFFFLL;
  }
  if (HIBYTE(v12) < v12) {
    return 1;
  }
  if (!v5 || (uint64_t result = memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v5), !result))
  {
    int v7 = *(_DWORD *)(a1 + 4);
    int v8 = *(_DWORD *)(a2 + 4);
    BOOL v10 = __OFSUB__(v7, v8);
    BOOL v9 = v7 - v8 < 0;
    BOOL v11 = v7 > v8;
    if (v9 != v10) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v11;
    }
  }
  return result;
}

uint64_t sub_244CF48D8(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_244CF48E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_244CF48E8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

const char *sub_244CF48F0(unsigned int a1)
{
  if ((a1 & 0xFFFFFFF7) == 0x102) {
    unsigned int v1 = a1 & 0xFFFFFEFF;
  }
  else {
    unsigned int v1 = a1;
  }
  if (v1 <= 0x1E) {
    return off_26519D078[v1];
  }
  else {
    return "(unknown)";
  }
}

uint64_t sub_244CF4924(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL v9 = 0;
  int v4 = sub_244CF6668(a1, &v9, a2);
  if (v4 <= 0)
  {
    sub_244D0B884(12, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn_pack.c", 67);
    return 0;
  }
  else
  {
    int v5 = v4;
    if (a3)
    {
      uint64_t v6 = *a3;
      if (*a3)
      {
        sub_244CF4790(*a3, (uint64_t)v9, v4);
LABEL_8:
        *a3 = v6;
        return v6;
      }
    }
    sub_244CF471C();
    uint64_t v6 = v7;
    if (!v7)
    {
      sub_244D440EC(v9);
      return v6;
    }
    sub_244CF4790(v7, (uint64_t)v9, v5);
    if (a3) {
      goto LABEL_8;
    }
  }
  return v6;
}

uint64_t sub_244CF49E8(int *a1, uint64_t a2)
{
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v4 = sub_244CF5200(0, &v6, *a1, a2);
  if (!v4 || v6 != *((void *)a1 + 1) + *a1)
  {
    sub_244D0B884(12, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn_pack.c", 93);
    sub_244CF746C(v4, a2);
    return 0;
  }
  return v4;
}

uint64_t sub_244CF4A88(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0;
  }
  if (*((unsigned char *)a2 + 5))
  {
    uint64_t v4 = 1;
    if (sub_244CF8524(a1, (uint64_t)"-", 1) != 1) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*a2)
  {
    if (*a2 >= 1)
    {
      uint64_t v5 = 0;
      while (1)
      {
        if (v5 && !(v5 % 0x23))
        {
          if (sub_244CF8524(a1, (uint64_t)"\\\n", 2) != 2) {
            return 0xFFFFFFFFLL;
          }
          LODWORD(v4) = v4 + 2;
        }
        uint64_t v6 = *((void *)a2 + 1);
        v8[0] = a0123456789abcd_1[(unint64_t)*(unsigned __int8 *)(v6 + v5) >> 4];
        v8[1] = a0123456789abcd_1[*(unsigned char *)(v6 + v5) & 0xF];
        if (sub_244CF8524(a1, (uint64_t)v8, 2) != 2) {
          break;
        }
        uint64_t v4 = (v4 + 2);
        if (++v5 >= *a2) {
          return v4;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  else if (sub_244CF8524(a1, (uint64_t)"00", 2) == 2)
  {
    return v4 | 2;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t sub_244CF4BFC(int *a1, void *a2)
{
  uint64_t result = 0;
  uint64_t v4 = a1[5];
  if ((unint64_t)(v4 + 1900) >> 4 > 0x270) {
    return result;
  }
  int v5 = a1[4];
  if (v5 < 0) {
    return result;
  }
  int v6 = a1[3];
  if (v6 < 1) {
    return result;
  }
  uint64_t v7 = v5;
  if ((unint64_t)v5 > 0xB) {
    return 0;
  }
  uint64_t v8 = v6;
  uint64_t v10 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v11 = *a1;
  if (((1 << v7) & 0xAD5) == 0)
  {
    if (((1 << v7) & 0x528) != 0)
    {
      if (v8 < 0x1F) {
        goto LABEL_7;
      }
    }
    else
    {
      HIDWORD(v20) = -1030792151 * (unsigned __int16)(v4 + 1900);
      LODWORD(v20) = HIDWORD(v20);
      unsigned int v19 = v20 >> 2;
      BOOL v22 = (v4 & 3) == 0 && v19 > 0x28F5C28;
      HIDWORD(v23) = -1030792151 * (unsigned __int16)(v4 + 1900);
      LODWORD(v23) = HIDWORD(v23);
      if ((v23 >> 4) >= 0xA3D70B && !v22)
      {
        if (v8 < 0x1D) {
          goto LABEL_7;
        }
      }
      else if (v8 < 0x1E)
      {
        goto LABEL_7;
      }
    }
    return 0;
  }
  if (v8 > 0x1F) {
    return 0;
  }
LABEL_7:
  uint64_t result = 0;
  if ((int)v11 <= 59 && (int)v10 <= 59 && (int)v9 <= 23 && ((v10 | v9 | v11) & 0x8000000000000000) == 0)
  {
    unint64_t v12 = v7 + 1;
    uint64_t v13 = (__PAIR128__(v4 + 1900, v12) - 3) >> 64;
    __int16 v14 = v13 - 399;
    if (v13 >= 0) {
      __int16 v14 = v13;
    }
    signed int v15 = ((5243 * v14) >> 21) + ((5243 * v14) >> 31);
    uint64_t v16 = v13 - 400 * v15;
    if (v12 <= 2) {
      __int16 v17 = 9;
    }
    else {
      __int16 v17 = -3;
    }
    int v18 = 26215 * (__int16)(153 * (v17 + v12) + 2);
    *a2 = 60 * (int)v10
        + 3600 * (int)v9
        + v11
        + 86400
        * (v8
         + (int)((v18 >> 17) + (v18 >> 31))
         + 146097 * v15
         + 365 * v16
         + ((int)((v16 + (((__int16)v16 >> 29) & 3)) << 16) >> 18)
         + (int)(((-5243 * (__int16)v16) >> 19) + ((-5243 * (__int16)v16) >> 31))
         - 1)
        - 0xE79256200;
    return 1;
  }
  return result;
}

uint64_t sub_244CF4DF4(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a1 - 0x3AFFF44180) < 0xFFFFFFB686974280) {
    return 0;
  }
  uint64_t v3 = a1 % 86400 + 86400;
  if (a1 % 86400 >= 0) {
    uint64_t v3 = a1 % 86400;
  }
  uint64_t v4 = a1 / 86400 + ((a1 % 86400) >> 63);
  uint64_t v5 = v4 + 719468;
  if (v4 <= -719468) {
    int v6 = v4 + 573372;
  }
  else {
    int v6 = v4 + 719468;
  }
  int v7 = v6 / 146097;
  uint64_t v8 = v5 - 146097 * v7;
  int v9 = ((int)(((unint64_t)(1282606671 * (int)v8) >> 32) - v8) >> 10)
     + ((((unint64_t)(1282606671 * (int)v8) >> 32) - v8) >> 31)
     + v8
     + (int)v8 / 36524
     + ((int)(((unint64_t)(441679365 * (int)v8) >> 32) - v8) >> 17)
     + ((((unint64_t)(441679365 * (int)v8) >> 32) - v8) >> 31);
  int v10 = v9 / 365;
  uint64_t v11 = v8
      + (int)(((int)(((unint64_t)(1282606671 * v9) >> 32) - v9) >> 10)
            + ((((unint64_t)(1282606671 * v9) >> 32) - v9) >> 31))
      + v9 / 36500
      - 365 * (v9 / 365);
  int v12 = (5 * (int)v11 + 2) / 153;
  if (v11 >= 306) {
    int v13 = -9;
  }
  else {
    int v13 = 3;
  }
  int v14 = v12 + v13;
  unsigned int v15 = v3 / 0xE10;
  unsigned __int16 v16 = v3 % 0xE10;
  int v17 = v11 + (153 * v12 + 2) / -5 + 1;
  *(_DWORD *)a2 = v16 % 0x3Cu;
  *(_DWORD *)(a2 + 4) = v16 / 0x3Cu;
  int v18 = v10 + 400 * v7;
  if (v14 < 3) {
    ++v18;
  }
  *(_DWORD *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = v14 - 1;
  *(_DWORD *)(a2 + 20) = v18 - 1900;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return 1;
}

uint64_t sub_244CF5024(int *a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t result = sub_244CF4BFC(a1, &v4);
  if (result)
  {
    *a2 = v4;
    return 1;
  }
  return result;
}

uint64_t sub_244CF5068(uint64_t *a1, uint64_t a2)
{
  if (sub_244CF4DF4(*a1, a2)) {
    return a2;
  }
  else {
    return 0;
  }
}

uint64_t sub_244CF5098(int *a1, int a2, uint64_t a3)
{
  uint64_t v9 = 0;
  if (!sub_244CF4BFC(a1, &v9)) {
    return 0;
  }
  uint64_t v6 = v9 + 86400 * a2;
  BOOL v7 = v6 >= 1 && (v6 ^ 0x7FFFFFFFFFFFFFFFLL) < a3;
  if (v7 || v6 < 0 && (uint64_t)(0x8000000000000000 - v6) > a3) {
    return 0;
  }

  return sub_244CF4DF4(v6 + a3, (uint64_t)a1);
}

uint64_t sub_244CF5144(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v10 = 0;
  uint64_t result = sub_244CF4BFC(a4, &v10);
  if (result)
  {
    uint64_t v9 = 0;
    uint64_t result = sub_244CF4BFC(a3, &v9);
    if (result)
    {
      uint64_t v8 = (v10 - v9) / 86400;
      *a2 = (v10 - v9) % 86400;
      *a1 = v8;
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CF51E0(unsigned int a1)
{
  if (a1 <= 0x1E) {
    return qword_244EAF308[a1];
  }
  else {
    return 0;
  }
}

uint64_t sub_244CF5200(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  if ((int)sub_244CF5284((uint64_t)&v7, a2, a3, a4, -1, 0, 0, 0, 0) <= 0)
  {
    sub_244CF7494(&v7, a4);
    if (a1) {
      goto LABEL_3;
    }
  }
  else if (a1)
  {
LABEL_3:
    sub_244CF7494(a1, a4);
    uint64_t result = v7;
    *a1 = v7;
    return result;
  }
  return v7;
}

uint64_t sub_244CF5284(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, int a9)
{
  uint64_t v66 = 0;
  uint64_t v67 = a3;
  if (!result) {
    return result;
  }
  uint64_t v12 = a3;
  int v14 = (uint64_t *)result;
  if (a3 >= 0x40000000)
  {
    uint64_t v12 = 0x3FFFFFFFLL;
    uint64_t v67 = 0x3FFFFFFFLL;
  }
  __int16 v65 = 0;
  unsigned int v64 = 0;
  if (a9 >= 30)
  {
    int v15 = 192;
    __int16 v16 = 222;
    goto LABEL_6;
  }
  uint64_t result = 0;
  int v24 = a9 + 1;
  switch(*(unsigned char *)a4)
  {
    case 0:
      BOOL v25 = *(int **)(a4 + 8);
      if (v25)
      {
        if (a5 != -1 || a7)
        {
          int v15 = 136;
          __int16 v16 = 234;
          goto LABEL_6;
        }
        return sub_244CF5B50((uint64_t)v14, a2, v12, v25, 0, a8, a9 + 1);
      }
      else
      {
        return sub_244CF5CF8(v14, a2, v12, a4, a5, a6, a7);
      }
    case 1:
      uint64_t v66 = *a2;
      if (a5 == -1) {
        int v26 = 0;
      }
      else {
        int v26 = a6;
      }
      if (a5 == -1) {
        int v27 = 16;
      }
      else {
        int v27 = a5;
      }
      uint64_t result = sub_244CF62DC(&v67, 0, 0, &v65, &v66, v12, v27, v26, a7);
      if (result == -1) {
        return result;
      }
      if (!result)
      {
        int v15 = 158;
        __int16 v16 = 367;
        goto LABEL_6;
      }
      if (!(_BYTE)v65)
      {
        int v15 = 169;
        __int16 v16 = 373;
        goto LABEL_6;
      }
      if (!*v14 && !sub_244CF78C0(v14, a4))
      {
        int v15 = 158;
        __int16 v16 = 378;
        goto LABEL_6;
      }
      uint64_t v32 = *(void *)(a4 + 24);
      if (v32 && (uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, void))(v32 + 16)) != 0)
      {
        uint64_t v63 = v33;
        if (!v33(4, v14, a4, 0)) {
          goto LABEL_124;
        }
        char v62 = 0;
      }
      else
      {
        uint64_t v63 = 0;
        char v62 = 1;
      }
      uint64_t v43 = *(void *)(a4 + 8);
      uint64_t v42 = *(void *)(a4 + 16);
      if (v42 < 1) {
        goto LABEL_90;
      }
      for (uint64_t i = 0; i < v42; ++i)
      {
        if ((*(unsigned char *)(v43 + 1) & 3) != 0)
        {
          uint64_t v45 = sub_244CF81F4(v14, v43, 0);
          if (v45)
          {
            uint64_t v46 = v45;
            int v47 = (uint64_t *)sub_244CF81E4(v14, v45);
            sub_244CF7734(v47, v46);
          }
        }
        v43 += 32;
        uint64_t v42 = *(void *)(a4 + 16);
      }
      uint64_t v43 = *(void *)(a4 + 8);
      if (v42 < 1)
      {
LABEL_90:
        LODWORD(j) = 0;
      }
      else
      {
        for (uint64_t j = 0; j < v42; ++j)
        {
          uint64_t v49 = sub_244CF81F4(v14, v43, 1);
          if (!v49) {
            goto LABEL_7;
          }
          BOOL v50 = (int *)v49;
          uint64_t v51 = sub_244CF81E4(v14, v49);
          if (!v67)
          {
            uint64_t v42 = *(void *)(a4 + 16);
            goto LABEL_115;
          }
          uint64_t v52 = (uint64_t *)v51;
          if (j == *(void *)(a4 + 16) - 1) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = *(unsigned char *)v50 & 1;
          }
          uint64_t v54 = v66;
          int v55 = sub_244CF5B50(v51, &v66, v67, v50, v53, a8, v24);
          if (v55 == -1)
          {
            sub_244CF7734(v52, (uint64_t)v50);
          }
          else
          {
            if (!v55) {
              goto LABEL_127;
            }
            v67 += v54 - v66;
          }
          v43 += 32;
          uint64_t v42 = *(void *)(a4 + 16);
        }
      }
      if (v67)
      {
        int v15 = 168;
        __int16 v16 = 442;
        goto LABEL_6;
      }
LABEL_115:
      if (v42 > j)
      {
        uint64_t v58 = j;
        while (1)
        {
          uint64_t v59 = (unsigned char *)sub_244CF81F4(v14, v43, 1);
          if (!v59) {
            goto LABEL_7;
          }
          uint64_t v60 = (uint64_t)v59;
          if ((*v59 & 1) == 0) {
            break;
          }
          uint64_t v61 = (uint64_t *)sub_244CF81E4(v14, (uint64_t)v59);
          sub_244CF7734(v61, v60);
          v43 += 32;
          if (*(void *)(a4 + 16) <= ++v58) {
            goto LABEL_120;
          }
        }
        sub_244D0B884(12, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 461);
LABEL_127:
        sub_244CF7494(v14, a4);
        goto LABEL_128;
      }
LABEL_120:
      if (sub_244CF80AC(v14, (const void *)*a2, v66 - *a2, a4, a8)
        && ((v62 & 1) != 0 || v63(5, v14, a4, 0)))
      {
        goto LABEL_123;
      }
      goto LABEL_124;
    case 2:
      if (a5 != -1)
      {
        int v15 = 193;
        __int16 v16 = 293;
        goto LABEL_6;
      }
      uint64_t v28 = *(void *)(a4 + 24);
      if (!v28)
      {
        uint64_t v29 = 0;
        goto LABEL_56;
      }
      uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, void))(v28 + 16);
      if (!v29)
      {
LABEL_56:
        char v30 = 1;
        goto LABEL_57;
      }
      if (!v29(4, v14, a4, 0)) {
        goto LABEL_124;
      }
      char v30 = 0;
LABEL_57:
      if (*v14)
      {
        unsigned int v34 = sub_244CF7F80(v14, a4);
        if ((v34 & 0x80000000) == 0 && *(void *)(a4 + 16) > (uint64_t)v34)
        {
          uint64_t v35 = *(void *)(a4 + 8) + 32 * v34;
          uint64_t v36 = (uint64_t *)sub_244CF81E4(v14, v35);
          sub_244CF7734(v36, v35);
          sub_244CF7F90(v14, -1, a4);
        }
      }
      else if (!sub_244CF78C0(v14, a4))
      {
        int v15 = 158;
        __int16 v16 = 313;
        goto LABEL_6;
      }
      uint64_t v66 = *a2;
      uint64_t v37 = *(void *)(a4 + 16);
      if (v37 >= 1)
      {
        uint64_t v38 = 0;
        uint64_t v39 = *(int **)(a4 + 8);
        while (1)
        {
          uint64_t v40 = sub_244CF81E4(v14, (uint64_t)v39);
          int v41 = sub_244CF5B50(v40, &v66, v67, v39, 1, a8, v24);
          if (v41 != -1) {
            break;
          }
          ++v38;
          v39 += 8;
          uint64_t v37 = *(void *)(a4 + 16);
          if (v37 <= v38) {
            goto LABEL_97;
          }
        }
        if (v41 >= 1)
        {
          uint64_t v37 = *(void *)(a4 + 16);
LABEL_97:
          int v56 = v38;
          goto LABEL_98;
        }
        sub_244D0B884(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 332);
        sub_244CF7494(v14, a4);
        if (v39)
        {
LABEL_128:
          sub_244D0B930(4u, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"Field=");
          return 0;
        }
LABEL_8:
        sub_244D0B930(2u, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"Type=");
        return 0;
      }
      int v56 = 0;
      uint64_t v38 = 0;
LABEL_98:
      if (v37 != v38)
      {
        sub_244CF7F90(v14, v56, a4);
        if ((v30 & 1) != 0 || v29(5, v14, a4, 0))
        {
LABEL_123:
          *a2 = v66;
          return 1;
        }
LABEL_124:
        int v15 = 101;
        __int16 v16 = 480;
        goto LABEL_6;
      }
      if (!a7)
      {
        int v15 = 163;
        __int16 v16 = 344;
LABEL_6:
        sub_244D0B884(12, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v16);
LABEL_7:
        sub_244CF7494(v14, a4);
        goto LABEL_8;
      }
      sub_244CF7494(v14, a4);
      return 0xFFFFFFFFLL;
    case 4:
      if (a5 != -1)
      {
        int v15 = 193;
        __int16 v16 = 282;
        goto LABEL_6;
      }
      uint64_t v31 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(a4 + 24) + 16);
      return v31(v14, a2, v12);
    case 5:
      if (a5 != -1)
      {
        int v15 = 193;
        __int16 v16 = 247;
        goto LABEL_6;
      }
      uint64_t v66 = *a2;
      if (!sub_244CF62DC(0, &v64, (unsigned char *)&v65 + 1, 0, &v66, v12, -1, 0, 1))
      {
        int v15 = 158;
        __int16 v16 = 255;
        goto LABEL_6;
      }
      if (HIBYTE(v65))
      {
        if (a7) {
          return 0xFFFFFFFFLL;
        }
        int v15 = 156;
        __int16 v16 = 265;
        goto LABEL_6;
      }
      if (v64 <= 0x1E) {
        uint64_t v57 = qword_244EAF308[v64];
      }
      else {
        uint64_t v57 = 0;
      }
      if ((v57 & *(int *)(a4 + 4)) != 0) {
        return sub_244CF5CF8(v14, a2, v67, a4, v64, 0, 0);
      }
      if (!a7)
      {
        int v15 = 157;
        __int16 v16 = 274;
        goto LABEL_6;
      }
      return 0xFFFFFFFFLL;
    default:
      return result;
  }
}

uint64_t sub_244CF5B2C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8)
{
  return sub_244CF5284(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t sub_244CF5B50(uint64_t result, uint64_t *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!result) {
    return result;
  }
  uint64_t v11 = (uint64_t *)result;
  int v12 = *a4;
  uint64_t v17 = *a2;
  if ((v12 & 0x10) != 0)
  {
    uint64_t v18 = 0;
    char v16 = 0;
    uint64_t result = sub_244CF62DC(&v18, 0, 0, &v16, &v17, a3, a4[1], v12 & 0xC0, a5);
    if (result == -1) {
      return result;
    }
    if (result)
    {
      if (v16)
      {
        uint64_t v15 = v17;
        if (sub_244CF63FC((unint64_t **)v11, &v17, v18, (uint64_t)a4, 0, a6, a7))
        {
          v18 += v15 - v17;
          if (!v18)
          {
            *a2 = v17;
            return 1;
          }
          sub_244D0B884(12, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 544);
          sub_244CF7734(v11, (uint64_t)a4);
          return 0;
        }
        int v13 = 158;
        __int16 v14 = 537;
      }
      else
      {
        int v13 = 120;
        __int16 v14 = 531;
      }
    }
    else
    {
      int v13 = 158;
      __int16 v14 = 525;
    }
    sub_244D0B884(12, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v14);
    return 0;
  }

  return sub_244CF63FC((unint64_t **)result, a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t sub_244CF5CF8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  char v7 = a7;
  int v9 = a5;
  size_t v34 = 0;
  char v33 = 0;
  if (*(unsigned char *)a4 == 5)
  {
    int v35 = a5;
    if (a5 == -4)
    {
      LOBYTE(v37) = 0;
      int v9 = -1;
LABEL_7:
      if (a7)
      {
        int v15 = 135;
        __int16 v16 = 688;
        goto LABEL_33;
      }
      uint64_t v32 = (char *)*a2;
      if (!sub_244CF62DC(0, &v35, &v37, 0, (uint64_t *)&v32, a3, -1, 0, 0))
      {
        int v15 = 158;
        __int16 v16 = 694;
        goto LABEL_33;
      }
      if (!(_BYTE)v37 && (int v17 = v35 - 1, (v35 - 1) < 0x1E) && ((0x2FFF8A3Fu >> v17) & 1) != 0)
      {
        int v14 = dword_244EAF400[v17];
      }
      else
      {
        int v14 = -3;
        int v35 = -3;
      }
      goto LABEL_15;
    }
    int v14 = a5;
    int v9 = -1;
  }
  else
  {
    int v14 = *(_DWORD *)(a4 + 4);
    int v35 = v14;
    if (v14 == -4)
    {
      LOBYTE(v37) = 0;
      if ((a5 & 0x80000000) == 0)
      {
        int v15 = 137;
        __int16 v16 = 684;
LABEL_33:
        sub_244D0B884(12, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v16);
        return 0;
      }
      goto LABEL_7;
    }
  }
LABEL_15:
  if (v9 == -1) {
    int v18 = v14;
  }
  else {
    int v18 = v9;
  }
  if (v9 == -1) {
    int v19 = 0;
  }
  else {
    int v19 = a6;
  }
  uint64_t v32 = (char *)*a2;
  uint64_t result = sub_244CF62DC(&v34, 0, 0, &v33, (uint64_t *)&v32, a3, v18, v19, v7);
  if (result == -1) {
    return result;
  }
  if (!result)
  {
    int v15 = 158;
    __int16 v16 = 709;
    goto LABEL_33;
  }
  int v21 = v35;
  if ((v35 + 3) <= 0x14 && ((1 << (v35 + 3)) & 0x180001) != 0)
  {
    if (v35 != -3 && !v33)
    {
      int v15 = 178;
      __int16 v16 = 720;
      goto LABEL_33;
    }
    uint64_t v22 = (char *)*a2;
    size_t v23 = (size_t)&v32[v34 - *a2];
    uint64_t v24 = (uint64_t)&v32[v34];
  }
  else
  {
    if (v33)
    {
      int v15 = 179;
      __int16 v16 = 731;
      goto LABEL_33;
    }
    uint64_t v22 = v32;
    size_t v23 = v34;
    uint64_t v24 = (uint64_t)&v32[v34];
  }
  uint64_t v32 = (char *)v24;
  __s = v22;
  if (*(_DWORD *)(a4 + 4) == -4)
  {
    uint64_t v25 = *a1;
    if (!*a1)
    {
      uint64_t v26 = sub_244CF7EA8();
      if (!v26)
      {
        sub_244CF7EB4(0);
        return 0;
      }
      uint64_t v25 = v26;
      *a1 = v26;
    }
    if (*(_DWORD *)v25 != v21) {
      sub_244CF3E0C((int *)v25, v21, 0);
    }
    int v27 = (uint64_t *)(v25 + 8);
  }
  else
  {
    uint64_t v25 = 0;
    int v27 = a1;
    a1 = 0;
  }
  switch(v21)
  {
    case 1:
      if (v23 == 1)
      {
        *(_DWORD *)int v27 = *v22;
        goto LABEL_88;
      }
      int v28 = 106;
      __int16 v29 = 799;
      goto LABEL_62;
    case 2:
    case 10:
      if (!sub_244CF189C(v27, &__s, v23)) {
        goto LABEL_63;
      }
      *(_DWORD *)(*v27 + 4) = *(_DWORD *)(*v27 + 4) & 0x100 | v21;
      goto LABEL_85;
    case 3:
      if (!sub_244CF0DEC(v27, (unsigned __int8 **)&__s, v23)) {
        goto LABEL_63;
      }
      goto LABEL_88;
    case 5:
      if (v23)
      {
        int v28 = 164;
        __int16 v29 = 791;
        goto LABEL_62;
      }
      uint64_t *v27 = 1;
      goto LABEL_85;
    case 6:
      if (!sub_244CF2878((const char ***)v27, (uint64_t *)&__s, v23)) {
        goto LABEL_63;
      }
      goto LABEL_88;
    default:
      *(void *)&long long v37 = v22;
      *((void *)&v37 + 1) = v23;
      switch(v21)
      {
        case 23:
          if (sub_244CFDA84(&v37, 0, 1)) {
            goto LABEL_80;
          }
          int v28 = 148;
          __int16 v29 = 879;
          goto LABEL_62;
        case 24:
          if (sub_244CFD780(&v37, 0, 0)) {
            goto LABEL_80;
          }
          int v28 = 148;
          __int16 v29 = 886;
          goto LABEL_62;
        case 25:
        case 26:
        case 27:
        case 29:
          goto LABEL_80;
        case 28:
          if (!v23) {
            goto LABEL_80;
          }
          while (1)
          {
            int v36 = 0;
            if (!sub_244CFDD08((uint64_t *)&v37, &v36)) {
              break;
            }
            if (!*((void *)&v37 + 1)) {
              goto LABEL_80;
            }
          }
          int v28 = 149;
          __int16 v29 = 863;
          goto LABEL_62;
        case 30:
          if (!v23) {
            goto LABEL_80;
          }
          while (1)
          {
            int v36 = 0;
            if (!sub_244CFDC94((unsigned __int16 **)&v37, &v36)) {
              break;
            }
            if (!*((void *)&v37 + 1)) {
              goto LABEL_80;
            }
          }
          int v28 = 142;
          __int16 v29 = 854;
          goto LABEL_62;
        default:
          if (v21 != 12 || !v23) {
            goto LABEL_80;
          }
          break;
      }
      break;
  }
  do
  {
    int v36 = 0;
    if (!sub_244CFDB28(&v37, (unsigned int *)&v36))
    {
      int v28 = 150;
      __int16 v29 = 872;
LABEL_62:
      sub_244D0B884(12, 0, v28, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v29);
      goto LABEL_63;
    }
  }
  while (*((void *)&v37 + 1));
LABEL_80:
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(_DWORD *)(v30 + 4) = v21;
    goto LABEL_84;
  }
  uint64_t v31 = sub_244CF47D0(v21);
  if (!v31)
  {
LABEL_63:
    sub_244CF7EB4(v25);
    if (a1) {
      *a1 = 0;
    }
    return 0;
  }
  uint64_t v30 = (uint64_t)v31;
  uint64_t *v27 = (uint64_t)v31;
LABEL_84:
  if (!sub_244CF45A0(v30, __s, v23))
  {
    sub_244CF474C(v30);
    uint64_t *v27 = 0;
    goto LABEL_63;
  }
LABEL_85:
  if (v21 == 5 && v25) {
    *(void *)(v25 + 8) = 0;
  }
LABEL_88:
  *a2 = (uint64_t)v32;
  return 1;
}

uint64_t sub_244CF62DC(void *a1, _DWORD *a2, unsigned char *a3, unsigned char *a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = *a5;
  char v16 = sub_244CF42C0(&v21, &v22, (int *)&v23 + 1, (int *)&v23, a6);
  if (v16 < 0)
  {
    int v19 = 103;
    __int16 v20 = 941;
LABEL_10:
    sub_244D0B884(12, 0, v19, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v20);
    return 0;
  }
  if ((a7 & 0x80000000) == 0 && (HIDWORD(v23) != a7 || v23 != a8))
  {
    if (a9) {
      return 0xFFFFFFFFLL;
    }
    int v19 = 190;
    __int16 v20 = 950;
    goto LABEL_10;
  }
  if (a4) {
    *a4 = v16 & 0x20;
  }
  if (a1) {
    *a1 = v22;
  }
  if (a3) {
    *a3 = v23;
  }
  if (a2) {
    *a2 = HIDWORD(v23);
  }
  *a5 = v21;
  return 1;
}

uint64_t sub_244CF63FC(unint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12 = *(_DWORD *)a4;
  int v13 = *(_DWORD *)a4 & 0xC0;
  uint64_t v23 = *a2;
  uint64_t v24 = a3;
  if ((v12 & 6) == 0)
  {
    uint64_t v15 = *(void *)(a4 + 24);
    if ((v12 & 8) != 0)
    {
      uint64_t result = sub_244CF5284(a1, &v23, a3, v15, *(unsigned int *)(a4 + 4), v12 & 0xC0, a5, a6, a7);
      if (result == -1) {
        return result;
      }
      if (result) {
        goto LABEL_28;
      }
      __int16 v17 = 634;
    }
    else
    {
      uint64_t result = sub_244CF5284(a1, &v23, a3, v15, 0xFFFFFFFFLL, 0, a5, a6, a7);
      if (result == -1) {
        return result;
      }
      if (result) {
        goto LABEL_28;
      }
      __int16 v17 = 644;
    }
LABEL_30:
    sub_244D0B884(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v17);
    goto LABEL_31;
  }
  if ((v12 & 8) != 0)
  {
    int v14 = *(_DWORD *)(a4 + 4);
  }
  else
  {
    int v13 = 0;
    if ((v12 & 2) != 0) {
      int v14 = 17;
    }
    else {
      int v14 = 16;
    }
  }
  uint64_t result = sub_244CF62DC(&v24, 0, 0, 0, &v23, a3, v14, v13, a5);
  if (result != -1)
  {
    if (!result)
    {
      sub_244D0B884(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 592);
      return 0;
    }
    int v18 = *a1;
    if (*a1)
    {
      uint64_t v22 = 0;
      while (sub_244D259E0((uint64_t)v18))
      {
        uint64_t v22 = sub_244D4BA0C((uint64_t *)v18);
        sub_244CF7494(&v22, *(void *)(a4 + 24));
      }
      if (!*a1) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
    int v19 = sub_244D4B4C8();
    *a1 = v19;
    if (v19)
    {
LABEL_24:
      uint64_t v20 = v24;
      if (v24 >= 1)
      {
        while (1)
        {
          uint64_t v21 = v23;
          uint64_t v22 = 0;
          if (!sub_244CF5284(&v22, &v23, v20, *(void *)(a4 + 24), 0xFFFFFFFFLL, 0, 0, a6, a7))
          {
            __int16 v17 = 620;
            goto LABEL_30;
          }
          v24 += v21 - v23;
          if (!sub_244D4BA04(*a1, v22)) {
            break;
          }
          uint64_t v20 = v24;
          if (v24 <= 0) {
            goto LABEL_28;
          }
        }
        sub_244CF7494(&v22, *(void *)(a4 + 24));
        goto LABEL_31;
      }
LABEL_28:
      *a2 = v23;
      return 1;
    }
LABEL_31:
    sub_244CF7734((uint64_t *)a1, a4);
    return 0;
  }
  return result;
}

uint64_t sub_244CF6668(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v13 = a1;
  if (!a2 || *a2) {
    return sub_244CF675C(&v13, a2, a3, 0xFFFFFFFFLL, 0, 0);
  }
  uint64_t v7 = sub_244CF675C(&v13, 0, a3, 0xFFFFFFFFLL, 0, 0);
  uint64_t v5 = v7;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = sub_244D43FF4(v7);
    if (v8)
    {
      int v9 = v8;
      int v12 = v8;
      uint64_t v10 = sub_244CF675C(&v13, &v12, a3, 0xFFFFFFFFLL, 0, 0);
      if ((int)v10 <= 0)
      {
        uint64_t v11 = v10;
        sub_244D440EC(v9);
        return v11;
      }
      else
      {
        *a2 = v9;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t sub_244CF6754(void *a1, void **a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_244CF675C(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_244CF675C(void *a1, void **a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  char v6 = a5;
  int v7 = a4;
  uint64_t v8 = a3;
  int v9 = a2;
  uint64_t v10 = a1;
  unsigned int v33 = 0;
  if (*(unsigned char *)a3)
  {
    if (*a1)
    {
      switch(*(unsigned char *)a3)
      {
        case 0:
          goto LABEL_4;
        case 1:
          int v16 = sub_244CF8148(&v33, a2, a1, a3);
          if (v16 < 0) {
            return 0xFFFFFFFFLL;
          }
          if (v16) {
            return v33;
          }
          unsigned int v33 = 0;
          if (v7 == -1)
          {
            char v6 = 0;
            int v19 = 16;
          }
          else
          {
            int v19 = v7;
          }
          if (*(uint64_t *)(v8 + 16) < 1)
          {
            int v26 = 0;
          }
          else
          {
            uint64_t v20 = 0;
            uint64_t v21 = *(void *)(v8 + 8);
            uint64_t v13 = 0xFFFFFFFFLL;
            do
            {
              uint64_t v22 = sub_244CF81F4(v10, v21, 1);
              if (!v22) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v23 = (int *)v22;
              uint64_t v24 = (unint64_t **)sub_244CF81E4(v10, v22);
              int v25 = sub_244CF6BB8(v24, 0, v23, 0xFFFFFFFFLL, 0, 0);
              if (v25 == -1) {
                return v13;
              }
              if (v25 > (int)(v33 ^ 0x7FFFFFFF)) {
                return 0xFFFFFFFFLL;
              }
              int v26 = v33 + v25;
              v33 += v25;
              v21 += 32;
              ++v20;
            }
            while (*(void *)(v8 + 16) > v20);
          }
          uint64_t v27 = sub_244CF44D4(1, v26, v19);
          uint64_t v13 = v27;
          if (!v9) {
            return v13;
          }
          if (v27 == -1) {
            return v13;
          }
          sub_244CF43C0((unsigned char **)v9, 1, v33, v19, v6);
          if (*(uint64_t *)(v8 + 16) < 1) {
            return v13;
          }
          uint64_t v28 = 0;
          for (uint64_t i = *(void *)(v8 + 8); ; i += 32)
          {
            uint64_t v30 = sub_244CF81F4(v10, i, 1);
            if (!v30) {
              break;
            }
            uint64_t v31 = (int *)v30;
            uint64_t v32 = (unint64_t **)sub_244CF81E4(v10, v30);
            if ((sub_244CF6BB8(v32, v9, v31, 0xFFFFFFFFLL, 0, 0) & 0x80000000) != 0) {
              break;
            }
            if (*(void *)(v8 + 16) <= ++v28) {
              return v13;
            }
          }
          return 0xFFFFFFFFLL;
        case 2:
          if (a4 != -1)
          {
            int v14 = 193;
            __int16 v15 = 171;
            goto LABEL_35;
          }
          unsigned int v17 = sub_244CF7F80(a1, a3);
          if ((v17 & 0x80000000) != 0 || *(void *)(v8 + 16) <= (uint64_t)v17)
          {
            int v14 = 163;
            __int16 v15 = 176;
          }
          else
          {
            int v18 = (int *)(*(void *)(v8 + 8) + 32 * v17);
            if ((*(unsigned char *)v18 & 1) == 0)
            {
              a1 = (void *)sub_244CF81E4(v10, (uint64_t)v18);
              a2 = v9;
              uint64_t v11 = v18;
              a4 = 0xFFFFFFFFLL;
              a5 = 0;
              a6 = 0;
              goto LABEL_6;
            }
            int v14 = 193;
            __int16 v15 = 181;
          }
          goto LABEL_35;
        case 4:
          if (a4 != -1)
          {
            int v14 = 193;
            __int16 v15 = 191;
            goto LABEL_35;
          }
          uint64_t v13 = (*(uint64_t (**)(void *, void **, uint64_t))(*(void *)(a3 + 24) + 24))(a1, a2, a3);
          if (v13) {
            return v13;
          }
          int v14 = 68;
          __int16 v15 = 200;
          goto LABEL_35;
        case 5:
          if (a4 != -1)
          {
            int v14 = 193;
            __int16 v15 = 162;
            goto LABEL_35;
          }
          LODWORD(a4) = -1;
          a5 = 0;
          break;
        default:
          int v14 = 193;
          __int16 v15 = 264;
          goto LABEL_35;
      }
      goto LABEL_12;
    }
    if (a6) {
      return 0;
    }
    int v14 = 155;
    __int16 v15 = 141;
LABEL_35:
    sub_244D0B884(12, 0, v14, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", v15);
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  uint64_t v11 = *(int **)(a3 + 8);
  if (v11)
  {
    if ((*(unsigned char *)v11 & 1) == 0)
    {
LABEL_6:
      return sub_244CF6BB8((unint64_t **)a1, a2, v11, a4, a5, a6);
    }
    int v14 = 193;
    __int16 v15 = 150;
    goto LABEL_35;
  }
  a3 = v8;
LABEL_12:

  return sub_244CF7064((int **)a1, a2, a3, a4, a5, a6);
}

uint64_t sub_244CF6BB8(unint64_t **a1, void **a2, int *a3, uint64_t a4, unsigned __int8 a5, int a6)
{
  uint64_t v6 = a4;
  int v10 = *a3;
  if ((*a3 & 0x18) != 0)
  {
    if (a4 != -1)
    {
      int v11 = 193;
      __int16 v12 = 291;
LABEL_4:
      sub_244D0B884(12, 0, v11, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", v12);
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = a3[1];
    uint64_t v15 = v10 & 0xC0;
  }
  else if (a4 == -1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = a5 & 0xC0;
  }
  int v16 = *a3 & 1 | a6;
  BOOL v17 = v16 != 0;
  if ((v10 & 6) != 0)
  {
    int v18 = *a1;
    BOOL v50 = 0;
    if (v18)
    {
      BOOL v19 = v6 != -1;
      BOOL v20 = (v10 & 0x10) == 0;
      if ((v10 & 2) != 0) {
        int v21 = 17;
      }
      else {
        int v21 = 16;
      }
      if (v20 && v19) {
        int v22 = v6;
      }
      else {
        int v22 = v21;
      }
      if (v20 && v19) {
        char v23 = v15;
      }
      else {
        char v23 = 0;
      }
      char v49 = v23;
      int v24 = 0;
      if (sub_244D259E0((uint64_t)v18))
      {
        unint64_t v25 = 0;
        uint64_t v13 = 0xFFFFFFFFLL;
        do
        {
          BOOL v50 = sub_244D4B518(v18, v25);
          int v26 = sub_244CF675C(&v50, 0, *((void *)a3 + 3), 0xFFFFFFFFLL, 0, 0);
          if (v26 == -1 || v24 > (v26 ^ 0x7FFFFFFF)) {
            return v13;
          }
          v24 += v26;
        }
        while (++v25 < sub_244D259E0((uint64_t)v18));
      }
      uint64_t v13 = sub_244CF44D4(1, v24, v22);
      if (v13 != -1)
      {
        if ((v10 & 0x10) != 0)
        {
          uint64_t v32 = sub_244CF44D4(1, v13, v6);
          uint64_t v33 = v32;
          if (!a2 || v32 == -1) {
            return v32;
          }
          sub_244CF43C0((unsigned char **)a2, 1, v13, v6, v15);
          uint64_t v13 = v33;
        }
        else if (!a2)
        {
          return v13;
        }
        sub_244CF43C0((unsigned char **)a2, 1, v24, v22, v49);
        uint64_t v34 = *((void *)a3 + 3);
        if ((v10 & 2) != 0 && (unint64_t)sub_244D259E0((uint64_t)v18) > 1)
        {
          uint64_t v38 = sub_244D43FF4(v24);
          unint64_t v39 = sub_244D259E0((uint64_t)v18);
          uint64_t v40 = sub_244D44098(v39, 0x10uLL);
          BOOL v37 = 0;
          if (v40 && v38)
          {
            __dst = v38;
            if (sub_244D259E0((uint64_t)v18))
            {
              unint64_t v41 = 0;
              uint64_t v42 = v40 + 1;
              while (1)
              {
                uint64_t v52 = 0;
                uint64_t v52 = sub_244D4B518(v18, v41);
                *((void *)v42 - 1) = __dst;
                int v43 = sub_244CF675C(&v52, &__dst, v34, 0xFFFFFFFFLL, 0, 0);
                _DWORD *v42 = v43;
                if (v43 < 0) {
                  break;
                }
                ++v41;
                v42 += 4;
                if (v41 >= sub_244D259E0((uint64_t)v18)) {
                  goto LABEL_64;
                }
              }
              BOOL v37 = 0;
            }
            else
            {
LABEL_64:
              size_t v44 = sub_244D259E0((uint64_t)v18);
              qsort(v40, v44, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_244CF71DC);
              __dst = *a2;
              if (sub_244D259E0((uint64_t)v18))
              {
                unint64_t v45 = 0;
                uint64_t v46 = (const void **)(v40 + 1);
                do
                {
                  size_t v47 = *(int *)v46;
                  if (v47)
                  {
                    memcpy(__dst, *(v46 - 1), v47);
                    int v48 = *(_DWORD *)v46;
                  }
                  else
                  {
                    int v48 = 0;
                  }
                  __dst = (char *)__dst + v48;
                  ++v45;
                  v46 += 2;
                }
                while (v45 < sub_244D259E0((uint64_t)v18));
              }
              *a2 = __dst;
              BOOL v37 = 1;
            }
          }
          sub_244D440EC(v40);
          sub_244D440EC(v38);
        }
        else
        {
          if (!sub_244D259E0((uint64_t)v18)) {
            return v13;
          }
          unint64_t v35 = 0;
          do
          {
            uint64_t v52 = 0;
            uint64_t v52 = sub_244D4B518(v18, v35);
            int v36 = sub_244CF675C(&v52, a2, v34, 0xFFFFFFFFLL, 0, 0);
            if (v36 < 0) {
              break;
            }
            ++v35;
          }
          while (v35 < sub_244D259E0((uint64_t)v18));
          BOOL v37 = v36 >= 0;
        }
        if (v37) {
          return v13;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
      return v13;
    }
    if (v16) {
      return 0;
    }
    int v11 = 155;
    __int16 v12 = 327;
    goto LABEL_4;
  }
  uint64_t v28 = *((void *)a3 + 3);
  if ((v10 & 0x10) != 0)
  {
    uint64_t v29 = sub_244CF675C(a1, 0, v28, 0xFFFFFFFFLL, 0, v17);
    int v30 = v29;
    if ((int)v29 < 1) {
      return v29;
    }
    uint64_t v31 = sub_244CF44D4(1, v29, v6);
    uint64_t v13 = v31;
    if (!a2) {
      return v13;
    }
    if (v31 == -1) {
      return v13;
    }
    sub_244CF43C0((unsigned char **)a2, 1, v30, v6, v15);
    if ((sub_244CF675C(a1, a2, *((void *)a3 + 3), 0xFFFFFFFFLL, 0, 0) & 0x80000000) == 0) {
      return v13;
    }
    return 0xFFFFFFFFLL;
  }

  return sub_244CF675C(a1, a2, v28, v6, v15, v17);
}

uint64_t sub_244CF7064(int **a1, void **a2, uint64_t a3, int a4, char a5, int a6)
{
  int v18 = *(_DWORD *)(a3 + 4);
  int v19 = 0;
  uint64_t v12 = sub_244CF7224(a1, 0, &v19, &v18, a3);
  if ((v12 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (v19)
  {
    if (a6) {
      return 0;
    }
    sub_244D0B884(12, 0, 155, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", 508);
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = v12;
  int v14 = v18;
  if (a4 == -1) {
    a4 = v18;
  }
  if (a2)
  {
    if ((v18 + 3) > 0x14 || ((1 << (v18 + 3)) & 0x180001) == 0) {
      sub_244CF43C0((unsigned char **)a2, 0, v12, a4, a5);
    }
    if ((sub_244CF7224(a1, *a2, &v19, &v18, a3) & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
    *a2 = (char *)*a2 + v13;
  }
  if ((v14 + 3) <= 0x14 && ((1 << (v14 + 3)) & 0x180001) != 0) {
    return v13;
  }

  return sub_244CF44D4(0, v13, a4);
}

uint64_t sub_244CF71DC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = (v2 - v3);
  if (v2 >= v3) {
    int v2 = *(_DWORD *)(a2 + 8);
  }
  if (!v2) {
    return v4;
  }
  uint64_t result = memcmp(*(const void **)a1, *(const void **)a2, v2);
  if (!result) {
    return v4;
  }
  return result;
}

uint64_t sub_244CF7224(int **a1, void *__dst, _DWORD *a3, int *a4, uint64_t a5)
{
  int v24 = __dst;
  *a3 = 0;
  if (*(unsigned char *)a5)
  {
    if (*a1)
    {
      if (*(unsigned char *)a5 == 5)
      {
        int v5 = (*a1)[1];
        if (v5 < 0 && v5 != -3)
        {
          int v6 = 191;
          __int16 v7 = 589;
LABEL_50:
          sub_244D0B884(12, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", v7);
          return 0xFFFFFFFFLL;
        }
        if (v5 == 266) {
          int v11 = 10;
        }
        else {
          int v11 = (*a1)[1];
        }
        if (v5 == 258) {
          int v10 = 2;
        }
        else {
          int v10 = v11;
        }
        *a4 = v10;
        goto LABEL_24;
      }
      int v8 = *(_DWORD *)(a5 + 4);
      goto LABEL_11;
    }
LABEL_55:
    uint64_t v12 = 0;
    *a3 = 1;
    return v12;
  }
  int v8 = *(_DWORD *)(a5 + 4);
  if (v8 == 1)
  {
LABEL_15:
    int v10 = *a4;
    goto LABEL_24;
  }
  if (!*a1) {
    goto LABEL_55;
  }
LABEL_11:
  if (v8 != -4) {
    goto LABEL_15;
  }
  int v9 = *a1;
  int v10 = **a1;
  if (v10 < 0 && v10 != -3)
  {
    int v6 = 191;
    __int16 v7 = 614;
    goto LABEL_50;
  }
  *a4 = v10;
  a1 = (int **)(v9 + 2);
LABEL_24:
  char __src = 0;
  uint64_t v12 = 0;
  switch(v10)
  {
    case 1:
      int v16 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 == -1) {
        goto LABEL_55;
      }
      if (*(_DWORD *)(a5 + 4) != -4)
      {
        uint64_t v21 = *(void *)(a5 + 32);
        if (v16)
        {
          if (v21 > 0) {
            goto LABEL_55;
          }
        }
        else if (!v21)
        {
          goto LABEL_55;
        }
      }
      if (v16) {
        char v17 = -1;
      }
      else {
        char v17 = 0;
      }
      char __src = v17;
      uint64_t v12 = 1;
      p_src = &__src;
      if (__dst) {
        goto LABEL_47;
      }
      return v12;
    case 2:
    case 10:
      uint64_t v13 = (void **)*a1;
      if (__dst) {
        int v14 = &v24;
      }
      else {
        int v14 = 0;
      }
      int v15 = sub_244CF1690(v13, (unsigned char **)v14);
      goto LABEL_40;
    case 3:
      int v19 = *a1;
      if (__dst) {
        BOOL v20 = &v24;
      }
      else {
        BOOL v20 = 0;
      }
      int v15 = sub_244CF0D10((uint64_t)v19, (unsigned char **)v20);
LABEL_40:
      if (v15 < 1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v15;
      }
    case 5:
      return v12;
    case 6:
      uint64_t v12 = (*a1)[5];
      if (!v12)
      {
        int v6 = 134;
        __int16 v7 = 630;
        goto LABEL_50;
      }
      p_src = (char *)*((void *)*a1 + 3);
      if (__dst)
      {
LABEL_47:
        if (v12) {
          memcpy(__dst, p_src, (int)v12);
        }
      }
      break;
    default:
      p_src = (char *)*((void *)*a1 + 1);
      uint64_t v12 = **a1;
      if (!__dst) {
        return v12;
      }
      goto LABEL_47;
  }
  return v12;
}

void sub_244CF746C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  sub_244CF7494(&v2, a2);
}

void sub_244CF7494(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned char *)a2)
    {
      switch(*(unsigned char *)a2)
      {
        case 0:
          break;
        case 1:
          if (!sub_244CF7FD8(a1, a2)) {
            return;
          }
          uint64_t v5 = *(void *)(a2 + 24);
          if (v5)
          {
            int v6 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, void))(v5 + 16);
            if (v6)
            {
              if (v6(2, a1, a2, 0) == 2) {
                return;
              }
              char v7 = 0;
LABEL_34:
              sub_244CF8040(a1, a2);
              uint64_t v16 = *(void *)(a2 + 16);
              if (v16 >= 1)
              {
                uint64_t v17 = 0;
                uint64_t v18 = *(void *)(a2 + 8) + 32 * v16 - 32;
                do
                {
                  uint64_t v19 = sub_244CF81F4(a1, v18, 0);
                  if (v19)
                  {
                    uint64_t v20 = v19;
                    uint64_t v21 = (uint64_t *)sub_244CF81E4(a1, v19);
                    sub_244CF7734(v21, v20);
                  }
                  ++v17;
                  v18 -= 32;
                }
                while (*(void *)(a2 + 16) > v17);
              }
              if ((v7 & 1) == 0) {
                v6(3, a1, a2, 0);
              }
LABEL_41:
              sub_244D440EC((void *)*a1);
              *a1 = 0;
              return;
            }
          }
          else
          {
            int v6 = 0;
          }
          char v7 = 1;
          goto LABEL_34;
        case 2:
          uint64_t v8 = *(void *)(a2 + 24);
          if (v8)
          {
            int v9 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, void))(v8 + 16);
            if (v9)
            {
              if (v9(2, a1, a2, 0) == 2) {
                return;
              }
              char v10 = 0;
LABEL_27:
              unsigned int v13 = sub_244CF7F80(a1, a2);
              if ((v13 & 0x80000000) == 0 && *(void *)(a2 + 16) > (uint64_t)v13)
              {
                uint64_t v14 = *(void *)(a2 + 8) + 32 * v13;
                int v15 = (uint64_t *)sub_244CF81E4(a1, v14);
                sub_244CF7734(v15, v14);
              }
              if ((v10 & 1) == 0) {
                v9(3, a1, a2, 0);
              }
              goto LABEL_41;
            }
          }
          else
          {
            int v9 = 0;
          }
          char v10 = 1;
          goto LABEL_27;
        case 4:
          uint64_t v11 = *(void *)(a2 + 24);
          if (v11)
          {
            uint64_t v12 = *(void (**)(void))(v11 + 8);
            if (v12)
            {
              v12();
            }
          }
          return;
        case 5:
          goto LABEL_8;
        default:
          return;
      }
    }
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      sub_244CF7734(a1, v4);
    }
    else
    {
LABEL_8:
      sub_244CF77F4(a1, a2);
    }
  }
}

void sub_244CF7734(uint64_t *a1, uint64_t a2)
{
  if ((*(unsigned char *)a2 & 6) != 0)
  {
    uint64_t v4 = (unint64_t *)*a1;
    if (sub_244D259E0(*a1))
    {
      unint64_t v5 = 0;
      do
      {
        char v7 = 0;
        char v7 = sub_244D4B518(v4, v5);
        sub_244CF7494(&v7, *(void *)(a2 + 24));
        ++v5;
      }
      while (v5 < sub_244D259E0((uint64_t)v4));
    }
    sub_244CF474C((uint64_t)v4);
    *a1 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 24);
    sub_244CF7494(a1, v6);
  }
}

void sub_244CF77F4(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)a2 == 5) {
    goto LABEL_2;
  }
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3 > 4)
  {
    if (v3 == 5) {
      goto LABEL_3;
    }
    if (v3 == 6)
    {
      sub_244CF29AC((void **)*a1);
      goto LABEL_3;
    }
LABEL_2:
    sub_244CF474C(*a1);
LABEL_3:
    *a1 = 0;
    return;
  }
  if (v3 == -4)
  {
    uint64_t v4 = (int *)*a1;
    if (*a1)
    {
      sub_244CF3E7C(v4);
      sub_244D440EC((void *)*a1);
    }
    goto LABEL_3;
  }
  if (v3 != 1) {
    goto LABEL_2;
  }
  *(_DWORD *)a1 = *(void *)(a2 + 32);
}

uint64_t sub_244CF7888(uint64_t a1)
{
  uint64_t v2 = 0;
  if (sub_244CF78C0(&v2, a1)) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_244CF78C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 1;
  switch(*(unsigned char *)a2)
  {
    case 0:
      unint64_t v5 = *(int **)(a2 + 8);
      if (!v5) {
        goto LABEL_5;
      }
      if (!sub_244CF7AFC(a1, v5)) {
        return 0;
      }
      return v2;
    case 1:
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6)
      {
        char v7 = 0;
        goto LABEL_22;
      }
      char v7 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void))(v6 + 16);
      if (!v7)
      {
LABEL_22:
        char v9 = 1;
LABEL_23:
        uint64_t v14 = sub_244D44058(*(void *)(a2 + 32));
        *a1 = (uint64_t)v14;
        if (!v14) {
          return 0;
        }
        sub_244CF7FA4(a1, a2);
        sub_244CF8010(a1, a2);
        if (*(uint64_t *)(a2 + 16) >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(int **)(a2 + 8);
          do
          {
            uint64_t v17 = (_DWORD *)sub_244CF81E4(a1, (uint64_t)v16);
            if (!sub_244CF7AFC(v17, v16))
            {
              sub_244CF7494(a1, a2);
              return 0;
            }
            v16 += 8;
            ++v15;
          }
          while (*(void *)(a2 + 16) > v15);
        }
        if (v9) {
          return 1;
        }
        goto LABEL_29;
      }
      int v8 = v7(0, a1, a2, 0);
      if (!v8) {
        goto LABEL_31;
      }
      char v9 = 0;
      if (v8 != 2) {
        goto LABEL_23;
      }
      return v2;
    case 2:
      uint64_t v10 = *(void *)(a2 + 24);
      if (v10)
      {
        char v7 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void))(v10 + 16);
        if (v7)
        {
          int v11 = v7(0, a1, a2, 0);
          if (!v11) {
            goto LABEL_31;
          }
          LOBYTE(v2) = 0;
          if (v11 == 2) {
            return 1;
          }
        }
      }
      else
      {
        char v7 = 0;
      }
      uint64_t v18 = sub_244D44058(*(void *)(a2 + 32));
      *a1 = (uint64_t)v18;
      if (!v18) {
        return 0;
      }
      sub_244CF7F90(a1, -1, a2);
      if (v2) {
        return 1;
      }
LABEL_29:
      uint64_t v2 = 1;
      if (v7(1, a1, a2, 0)) {
        return v2;
      }
      sub_244CF7494(a1, a2);
LABEL_31:
      sub_244D0B884(12, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_new.c", 181);
      return 0;
    case 4:
      uint64_t v12 = *(unsigned int (***)(uint64_t *, uint64_t))(a2 + 24);
      if (v12)
      {
        unsigned int v13 = *v12;
        if (v13)
        {
          if (!v13(a1, a2)) {
            return 0;
          }
        }
      }
      return v2;
    case 5:
LABEL_5:
      if (!sub_244CF7BDC(a1, a2)) {
        return 0;
      }
      return v2;
    default:
      return v2;
  }
}

uint64_t sub_244CF7AFC(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    while ((*(_WORD *)a2 & 0x306) == 0)
    {
      unint64_t v5 = (char *)*((void *)a2 + 3);
      int v6 = *v5;
      if (*v5)
      {
        if ((v6 - 1) < 2) {
          goto LABEL_17;
        }
        if (v6 != 5)
        {
          if (v6 == 4) {
            goto LABEL_17;
          }
          return 1;
        }
LABEL_14:
        if (*v5 != 5 && *((_DWORD *)v5 + 1) == 1)
        {
          *a1 = *((void *)v5 + 4);
          return 1;
        }
        goto LABEL_17;
      }
      a2 = (int *)*((void *)v5 + 1);
      if (!a2) {
        goto LABEL_14;
      }
    }
    goto LABEL_17;
  }
  if ((v3 & 0x300) != 0)
  {
LABEL_17:
    *(void *)a1 = 0;
    return 1;
  }
  if ((v3 & 6) != 0)
  {
    uint64_t result = (uint64_t)sub_244D4B4C8();
    if (!result) {
      return result;
    }
    *(void *)a1 = result;
    return 1;
  }
  uint64_t v7 = *((void *)a2 + 3);

  return sub_244CF78C0(a1, v7);
}

uint64_t sub_244CF7BDC(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)a2 == 5)
  {
    int v3 = -1;
LABEL_4:
    uint64_t result = (uint64_t)sub_244CF47D0(v3);
LABEL_5:
    *a1 = result;
    return result != 0;
  }
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3 > 4)
  {
    if (v3 != 5)
    {
      if (v3 != 6) {
        goto LABEL_4;
      }
      *a1 = sub_244D44FC8();
      return 1;
    }
    uint64_t result = 1;
    *a1 = 1;
  }
  else
  {
    if (v3 != -4)
    {
      if (v3 != 1) {
        goto LABEL_4;
      }
      *(_DWORD *)a1 = *(void *)(a2 + 32);
      return 1;
    }
    uint64_t result = (uint64_t)sub_244D43FF4(0x10uLL);
    if (result)
    {
      *(void *)(result + 8) = 0;
      *(_DWORD *)uint64_t result = -1;
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_244CF7C9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D170);
}

uint64_t sub_244CF7CA8(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D170);
}

void *sub_244CF7CB4()
{
  return sub_244CF47D0(4);
}

uint64_t sub_244CF7CC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D1A0);
}

uint64_t sub_244CF7CCC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D1A0);
}

void *sub_244CF7CD8()
{
  return sub_244CF47D0(2);
}

uint64_t sub_244CF7CE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D1D0);
}

uint64_t sub_244CF7CEC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D1D0);
}

void *sub_244CF7CF8()
{
  return sub_244CF47D0(10);
}

uint64_t sub_244CF7D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D200);
}

uint64_t sub_244CF7D0C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D200);
}

void *sub_244CF7D18()
{
  return sub_244CF47D0(3);
}

uint64_t sub_244CF7D20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D230);
}

uint64_t sub_244CF7D2C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D230);
}

void *sub_244CF7D38()
{
  return sub_244CF47D0(12);
}

uint64_t sub_244CF7D40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D260);
}

uint64_t sub_244CF7D4C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D260);
}

void *sub_244CF7D58()
{
  return sub_244CF47D0(19);
}

uint64_t sub_244CF7D60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D290);
}

uint64_t sub_244CF7D6C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D290);
}

void *sub_244CF7D78()
{
  return sub_244CF47D0(20);
}

uint64_t sub_244CF7D80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D2C0);
}

uint64_t sub_244CF7D8C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D2C0);
}

void *sub_244CF7D98()
{
  return sub_244CF47D0(22);
}

uint64_t sub_244CF7DA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D2F0);
}

uint64_t sub_244CF7DAC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D2F0);
}

void *sub_244CF7DB8()
{
  return sub_244CF47D0(27);
}

uint64_t sub_244CF7DC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D320);
}

uint64_t sub_244CF7DCC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D320);
}

void *sub_244CF7DD8()
{
  return sub_244CF47D0(23);
}

uint64_t sub_244CF7DE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D350);
}

uint64_t sub_244CF7DEC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D350);
}

void *sub_244CF7DF8()
{
  return sub_244CF47D0(24);
}

uint64_t sub_244CF7E00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D380);
}

uint64_t sub_244CF7E0C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D380);
}

void *sub_244CF7E18()
{
  return sub_244CF47D0(26);
}

uint64_t sub_244CF7E20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D3B0);
}

uint64_t sub_244CF7E2C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D3B0);
}

void *sub_244CF7E38()
{
  return sub_244CF47D0(28);
}

uint64_t sub_244CF7E40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D3E0);
}

uint64_t sub_244CF7E4C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D3E0);
}

void *sub_244CF7E58()
{
  return sub_244CF47D0(30);
}

uint64_t sub_244CF7E60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D410);
}

uint64_t sub_244CF7E6C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D410);
}

uint64_t sub_244CF7E78()
{
  return sub_244CF7888((uint64_t)&unk_26519D410);
}

void sub_244CF7E84(uint64_t a1)
{
}

uint64_t sub_244CF7E90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D470);
}

uint64_t sub_244CF7E9C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D470);
}

uint64_t sub_244CF7EA8()
{
  return sub_244CF7888((uint64_t)&unk_26519D470);
}

void sub_244CF7EB4(uint64_t a1)
{
}

uint64_t sub_244CF7EC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D4D0);
}

uint64_t sub_244CF7ECC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D4D0);
}

uint64_t sub_244CF7ED8()
{
  return sub_244CF7888((uint64_t)&unk_26519D4D0);
}

void sub_244CF7EE4(uint64_t a1)
{
}

uint64_t sub_244CF7EF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D500);
}

uint64_t sub_244CF7EFC(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D500);
}

uint64_t sub_244CF7F08()
{
  return sub_244CF7888((uint64_t)&unk_26519D500);
}

void sub_244CF7F14(uint64_t a1)
{
}

uint64_t sub_244CF7F20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D530);
}

uint64_t sub_244CF7F2C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D530);
}

uint64_t sub_244CF7F38()
{
  return sub_244CF7888((uint64_t)&unk_26519D530);
}

void sub_244CF7F44(uint64_t a1)
{
}

uint64_t sub_244CF7F50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D610);
}

uint64_t sub_244CF7F5C(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D610);
}

uint64_t sub_244CF7F68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_244CF5200(a1, a2, a3, (uint64_t)&unk_26519D660);
}

uint64_t sub_244CF7F74(uint64_t a1, void **a2)
{
  return sub_244CF6668(a1, a2, (uint64_t)&unk_26519D660);
}

uint64_t sub_244CF7F80(void *a1, uint64_t a2)
{
  return *(unsigned int *)(*a1 + *(int *)(a2 + 4));
}

uint64_t sub_244CF7F90(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(a3 + 4);
  uint64_t result = *(unsigned int *)(*a1 + v4);
  *(_DWORD *)(v3 + v4) = a2;
  return result;
}

void *sub_244CF7FA4(void *result, uint64_t a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    uint64_t v2 = *(void *)(a2 + 24);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 8))
      {
        if (*result) {
          *(_DWORD *)(*result + *(int *)(v2 + 12)) = 1;
        }
      }
    }
  }
  return result;
}

BOOL sub_244CF7FD8(void *a1, uint64_t a2)
{
  return *(unsigned char *)a2 != 1
      || (uint64_t v2 = *(void *)(a2 + 24)) == 0
      || (*(unsigned char *)(v2 + 8) & 1) == 0
      || !*a1
      || sub_244D49A14((unsigned int *)(*a1 + *(int *)(v2 + 12)));
}

void *sub_244CF8010(void *result, uint64_t a2)
{
  if (result)
  {
    if (*result)
    {
      uint64_t v2 = *(void *)(a2 + 24);
      if (v2)
      {
        if ((*(unsigned char *)(v2 + 8) & 2) != 0)
        {
          uint64_t v3 = (void *)(*result + *(int *)(v2 + 24));
          void *v3 = 0;
          v3[1] = 0;
          _OWORD v3[2] = 0;
        }
      }
    }
  }
  return result;
}

void sub_244CF8040(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (*a1)
    {
      uint64_t v2 = *(void *)(a2 + 24);
      if (v2)
      {
        if ((*(unsigned char *)(v2 + 8) & 2) != 0) {
          sub_244CF806C(*a1 + *(int *)(v2 + 24));
        }
      }
    }
  }
}

void sub_244CF806C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 16);
  if (v2) {
    sub_244D49714(v2);
  }
  else {
    sub_244D440EC(*(void **)a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t sub_244CF80AC(void *a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 1;
  }
  if (*a1)
  {
    uint64_t v5 = *(void *)(a4 + 24);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 8) & 2) != 0)
      {
        char v9 = (uint64_t *)(*a1 + *(int *)(v5 + 24));
        sub_244CF806C((uint64_t)v9);
        if (a5)
        {
          sub_244D49858(a5);
          unsigned char v9[2] = a5;
          uint64_t *v9 = (uint64_t)a2;
        }
        else
        {
          uint64_t result = (uint64_t)sub_244D442F4(a2, a3);
          uint64_t *v9 = result;
          if (!result) {
            return result;
          }
        }
        v9[1] = a3;
      }
    }
  }
  return 1;
}

uint64_t sub_244CF8148(_DWORD *a1, void **a2, void *a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  if (!*a3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a4 + 24);
  if (!v4) {
    return 0;
  }
  if ((*(unsigned char *)(v4 + 8) & 2) == 0) {
    return 0;
  }
  uint64_t v5 = *a3 + *(int *)(v4 + 24);
  size_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return 0;
  }
  if (a2)
  {
    memcpy(*a2, *(const void **)v5, v6);
    *a2 = (char *)*a2 + *(void *)(v5 + 8);
  }
  if (a1) {
    *a1 = *(void *)(v5 + 8);
  }
  return 1;
}

uint64_t sub_244CF81E4(void *a1, uint64_t a2)
{
  return *a1 + *(void *)(a2 + 8);
}

uint64_t sub_244CF81F4(void *a1, uint64_t a2, int a3)
{
  if ((*(unsigned char *)(a2 + 1) & 3) == 0) {
    return a2;
  }
  uint64_t v4 = *(void **)(a2 + 24);
  uint64_t v5 = *(unsigned __int16 **)(*a1 + v4[1]);
  if (!v5)
  {
    a2 = v4[6];
    if (a2) {
      return a2;
    }
LABEL_10:
    if (a3) {
      sub_244D0B884(12, 0, 186, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_utl.c", 265);
    }
    return 0;
  }
  unsigned int v6 = sub_244D449A4(v5);
  uint64_t v7 = v4[4];
  if (v7 < 1)
  {
LABEL_7:
    a2 = v4[5];
    if (a2) {
      return a2;
    }
    goto LABEL_10;
  }
  a2 = v4[3] + 8;
  while (*(_DWORD *)(a2 - 8) != v6)
  {
    a2 += 40;
    if (!--v7) {
      goto LABEL_7;
    }
  }
  return a2;
}

void *sub_244CF82A0(uint64_t a1)
{
  uint64_t v2 = sub_244D44058(0x48uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    void *v2 = a1;
    *((_DWORD *)v2 + 5) = 1;
    *((_DWORD *)v2 + 9) = 1;
    sub_244D1389C(v2 + 1);
    uint64_t v4 = *(unsigned int (**)(void *))(a1 + 56);
    if (v4)
    {
      if (!v4(v3))
      {
        sub_244D440EC(v3);
        return 0;
      }
    }
  }
  return v3;
}

BOOL sub_244CF830C(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = a1;
  while (1)
  {
    uint64_t v2 = (uint64_t *)v1;
    BOOL result = sub_244D49A14((unsigned int *)(v1 + 36));
    if (!result) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 48);
    v2[6] = 0;
    if (*v2)
    {
      uint64_t v4 = *(void (**)(uint64_t *))(*v2 + 64);
      if (v4) {
        v4(v2);
      }
    }
    sub_244D138A4((uint64_t)&unk_268EBD290, (uint64_t)v2, v2 + 1);
    sub_244D440EC(v2);
    if (!v1) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CF839C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL result = *(void *)(result + 48);
    *(void *)(v1 + 48) = 0;
  }
  return result;
}

uint64_t sub_244CF83B0(uint64_t a1)
{
  return 1;
}

uint64_t sub_244CF83D4(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !*(void *)a1 || (uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 24)) == 0)
  {
    int v6 = 115;
    __int16 v7 = 129;
LABEL_9:
    sub_244D0B884(17, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v7);
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    int v6 = 114;
    __int16 v7 = 133;
    goto LABEL_9;
  }
  if (a3 < 1) {
    return 0;
  }
  uint64_t result = v4(a1);
  if ((int)result >= 1) {
    *(void *)(a1 + 56) += result;
  }
  return result;
}

uint64_t sub_244CF847C(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !*(void *)a1 || (uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 40)) == 0)
  {
    int v6 = 115;
    __int16 v7 = 148;
LABEL_9:
    sub_244D0B884(17, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v7);
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    int v6 = 114;
    __int16 v7 = 152;
    goto LABEL_9;
  }
  if (a3 < 1) {
    return 0;
  }
  uint64_t result = v4(a1);
  if ((int)result >= 1) {
    *(void *)(a1 + 56) += result;
  }
  return result;
}

uint64_t sub_244CF8524(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !*(void *)a1 || (uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 16)) == 0)
  {
    int v6 = 115;
    __int16 v7 = 167;
LABEL_9:
    sub_244D0B884(17, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v7);
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    int v6 = 114;
    __int16 v7 = 171;
    goto LABEL_9;
  }
  if (a3 < 1) {
    return 0;
  }
  uint64_t result = v4(a1);
  if ((int)result >= 1) {
    *(void *)(a1 + 64) += result;
  }
  return result;
}

uint64_t sub_244CF85CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  while (a3)
  {
    if (a3 >= 0x7FFFFFFF) {
      int v6 = 0x7FFFFFFF;
    }
    else {
      int v6 = a3;
    }
    int v7 = sub_244CF8524(a1, a2, v6);
    a2 += v7;
    a3 -= v7;
    if (v7 <= 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_244CF8634(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >> 31)
  {
    sub_244D0B884(17, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 201);
    return 0xFFFFFFFFLL;
  }
  else
  {
    return sub_244CF8524(a1, (uint64_t)__s, v4);
  }
}

uint64_t sub_244CF86B0(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF86D4(uint64_t result)
{
  if (result)
  {
    if (*(void *)result && (uint64_t v1 = *(uint64_t (**)(void))(*(void *)result + 48)) != 0)
    {
      return v1();
    }
    else
    {
      sub_244D0B884(17, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 217);
      return -2;
    }
  }
  return result;
}

uint64_t sub_244CF8734(uint64_t a1)
{
  if (sub_244CF86D4(a1) >= 1) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t sub_244CF8768(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF8790(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF87B4(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF87D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) |= a2;
  return result;
}

uint64_t sub_244CF87E8(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 24) & a2;
}

uint64_t sub_244CF87F4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 1;
}

uint64_t sub_244CF8800(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 2;
}

uint64_t sub_244CF880C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 8;
}

uint64_t sub_244CF8818(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 4;
}

uint64_t sub_244CF8824(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_244CF882C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t sub_244CF8834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) &= ~a2;
  return result;
}

uint64_t sub_244CF8844(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 9u;
  return result;
}

uint64_t sub_244CF8858(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 0xAu;
  return result;
}

uint64_t sub_244CF886C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 0xF;
}

uint64_t sub_244CF8878(uint64_t result)
{
  *(void *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFF0;
  return result;
}

uint64_t sub_244CF8888(unsigned int **a1)
{
  return **a1;
}

uint64_t sub_244CF8894(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v1 & 0xFFFFFFF0;
  *(_DWORD *)(result + 28) = 0;
  uint64_t v2 = *(void *)(result + 48);
  *(_DWORD *)(result + 24) = v1 & 0xFFFFFFF0 | *(_DWORD *)(v2 + 24) & 0xF;
  *(_DWORD *)(result + 28) = *(_DWORD *)(v2 + 28);
  return result;
}

uint64_t sub_244CF88BC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)a1 || (int v1 = *(uint64_t (**)(void))(*(void *)a1 + 72)) == 0)
  {
    sub_244D0B884(17, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 313);
    return 0;
  }

  return v1();
}

uint64_t sub_244CF891C(uint64_t a1)
{
  uint64_t v1 = sub_244CF86D4(a1);
  return v1 & ~(v1 >> 63);
}

uint64_t sub_244CF8944(uint64_t a1)
{
  uint64_t v1 = sub_244CF86D4(a1);
  return v1 & ~(v1 >> 63);
}

uint64_t sub_244CF896C(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF8990(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_244CF8998(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_244CF89A0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = *(void *)(v2 + 48);
    }
    while (v2);
    *(void *)(v3 + 48) = a2;
  }
  return result;
}

uint64_t sub_244CF89BC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

int *sub_244CF89C8(int *result, int a2)
{
  for (; result; uint64_t result = (int *)*((void *)result + 6))
  {
    if (*(void *)result)
    {
      int v2 = **(_DWORD **)result;
      if ((_BYTE)a2)
      {
        if (v2 == a2) {
          return result;
        }
      }
      else if ((v2 & a2) != 0)
      {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_244CF8A00(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = a2;
  }
  unsigned int v5 = v4 + 1;
  while (--v5)
  {
    if (sub_244CF8634(a1, " ") != 1) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_244CF8A64(uint64_t a1)
{
  return sub_244D0B738((uint64_t (*)(char *, size_t, uint64_t))sub_244CF8A7C, a1);
}

uint64_t sub_244CF8A7C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  while (a2)
  {
    if (a2 >= 0x7FFFFFFF) {
      int v6 = 0x7FFFFFFF;
    }
    else {
      int v6 = a2;
    }
    int v7 = sub_244CF8524(a3, a1, v6);
    a1 += v7;
    a2 -= v7;
    if (v7 <= 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_244CF8AE4(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  int v8 = sub_244CF83D4(a1, (uint64_t)&__src, 2);
  int v9 = v8;
  if (v8 < 1)
  {
LABEL_8:
    if (v9 > 0 || v8)
    {
      int v13 = 162;
      __int16 v14 = 542;
    }
    else
    {
      int v13 = 123;
      __int16 v14 = 540;
    }
    goto LABEL_73;
  }
  p_src = &__src;
  unint64_t v11 = 2;
  while (1)
  {
    v11 -= v8;
    if (!v11) {
      break;
    }
    p_src = (__int16 *)((char *)p_src + v8);
    if (v11 >> 31) {
      int v12 = 0x7FFFFFFF;
    }
    else {
      int v12 = v11;
    }
    int v8 = sub_244CF83D4(a1, (uint64_t)p_src, v12);
    if (v8 < 1) {
      goto LABEL_8;
    }
  }
  if ((~__src & 0x1F) == 0)
  {
    int v13 = 109;
    __int16 v14 = 552;
LABEL_73:
    sub_244D0B884(12, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v14);
    return 0;
  }
  unint64_t v15 = HIBYTE(__src);
  if (__src < 0)
  {
    uint64_t v19 = HIBYTE(__src) & 0x7F;
    if ((__src & 0x20) != 0 && (__src & 0x7F00) == 0)
    {
      if (a4 >= 0x1002) {
        unint64_t v20 = 4098;
      }
      else {
        unint64_t v20 = a4;
      }
      if (v20 >= 2)
      {
        uint64_t v21 = sub_244D43FF4(v20);
        *a2 = (uint64_t)v21;
        if (v21)
        {
          *(_WORD *)uint64_t v21 = __src;
          if (v20 != 2)
          {
            uint64_t v22 = 2;
            do
            {
              int v23 = v20 - v22 >= 0x7FFFFFFF ? 0x7FFFFFFF : v20 - v22;
              int v24 = sub_244CF83D4(a1, *a2 + v22, v23);
              if (v24 == -1) {
                break;
              }
              if (!v24)
              {
                *a3 = v22;
                return 1;
              }
              v22 += v24;
              if (v20 < a4 && v20 - v22 <= 0x7FF)
              {
                if (v20 + 4096 > a4 || v20 > 0xFFFFFFFFFFFFEFFFLL) {
                  unint64_t v20 = a4;
                }
                else {
                  v20 += 4096;
                }
                int v26 = sub_244D44148((void *)*a2, v20);
                if (!v26) {
                  break;
                }
                *a2 = (uint64_t)v26;
              }
            }
            while (v22 != v20);
          }
          sub_244D440EC((void *)*a2);
        }
      }
      int v13 = 162;
      __int16 v14 = 568;
      goto LABEL_73;
    }
    if ((v19 - 5) <= 0xFFFFFFFB)
    {
      int v13 = 109;
      __int16 v14 = 575;
      goto LABEL_73;
    }
    uint64_t v32 = v40;
    unint64_t v33 = HIBYTE(__src) & 0x7F;
    do
    {
      if (v33 >> 31) {
        int v34 = 0x7FFFFFFF;
      }
      else {
        int v34 = v33;
      }
      int v35 = sub_244CF83D4(a1, (uint64_t)v32, v34);
      if (v35 < 1)
      {
        int v13 = 162;
        __int16 v14 = 580;
        goto LABEL_73;
      }
      v32 += v35;
      v33 -= v35;
    }
    while (v33);
    if (!v19) {
      goto LABEL_70;
    }
    LODWORD(v15) = 0;
    size_t v16 = v19 + 2;
    int v36 = v40;
    uint64_t v37 = v19;
    do
    {
      unsigned int v38 = *v36++;
      unint64_t v15 = v38 | (v15 << 8);
      --v37;
    }
    while (v37);
    if (v15 < 0x80)
    {
LABEL_70:
      int v13 = 109;
      __int16 v14 = 593;
      goto LABEL_73;
    }
    if (!(v15 >> (8 * v19 - 8)))
    {
      int v13 = 109;
      __int16 v14 = 599;
      goto LABEL_73;
    }
  }
  else
  {
    size_t v16 = 2;
  }
  unint64_t v17 = v16 + v15;
  if (v15 >> 31) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v17 > a4;
  }
  if (v18)
  {
    int v13 = 177;
    __int16 v14 = 609;
    goto LABEL_73;
  }
  *a3 = v17;
  uint64_t result = (uint64_t)sub_244D43FF4(v17);
  *a2 = result;
  if (result)
  {
    memcpy((void *)result, &__src, v16);
    if (!v15) {
      return 1;
    }
    uint64_t v28 = *a2 + v16;
    while (1)
    {
      int v29 = v15 >> 31 ? 0x7FFFFFFF : v15;
      int v30 = sub_244CF83D4(a1, v28, v29);
      if (v30 < 1) {
        break;
      }
      unsigned int v31 = v30;
      v28 += v30;
      uint64_t result = 1;
      v15 -= v31;
      if (!v15) {
        return result;
      }
    }
    sub_244D0B884(12, 0, 162, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 621);
    sub_244D440EC((void *)*a2);
    return 0;
  }
  return result;
}

uint64_t sub_244CF8EAC(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 5u;
  return result;
}

uint64_t sub_244CF8EC0()
{
  sub_244D4BD70(&stru_268EBD370);
  uint64_t v0 = dword_268EBD438;
  if (dword_268EBD438 <= 255) {
    ++dword_268EBD438;
  }
  else {
    uint64_t v0 = 0xFFFFFFFFLL;
  }
  sub_244D4BD90(&stru_268EBD370);
  return v0;
}

void *sub_244CF8F18(int a1, uint64_t a2)
{
  uint64_t result = sub_244D44058(0x50uLL);
  if (result)
  {
    *(_DWORD *)uint64_t result = a1;
    result[1] = a2;
  }
  return result;
}

uint64_t sub_244CF8F54(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = a2;
  return 1;
}

uint64_t sub_244CF8F60(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = a2;
  return 1;
}

uint64_t sub_244CF8F6C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  return 1;
}

uint64_t sub_244CF8F78(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 1;
}

uint64_t sub_244CF8F84(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  return 1;
}

uint64_t sub_244CF8F90(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  return 1;
}

uint64_t sub_244CF8F9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_244CF8FA4(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_244CF8FAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_244CF8FB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_244CF8FBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t sub_244CF8FC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_244CF8FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_244D136D4((uint64_t)&unk_268EBD290, a1, a2, a5);
}

uint64_t sub_244CF8FE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_244D137A8((unint64_t **)(a1 + 8), a2, a3);
}

unint64_t *sub_244CF8FEC(uint64_t a1, unsigned int a2)
{
  return sub_244D13838((uint64_t *)(a1 + 8), a2);
}

void *sub_244CF8FF4(const char *a1, const char *a2)
{
  int v2 = fopen(a1, a2);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = sub_244CF90D4();
    if (result) {
      return result;
    }
    fclose(v3);
  }
  else
  {
    sub_244D0B884(2, 0, 0, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 110);
    sub_244D0B930(5u, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"fopen('");
    if (*__error() == 2)
    {
      int v12 = 110;
      __int16 v13 = 114;
    }
    else
    {
      int v12 = 112;
      __int16 v13 = 116;
    }
    sub_244D0B884(17, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", v13);
  }
  return 0;
}

void *sub_244CF90D4()
{
  uint64_t v0 = sub_244CF82A0((uint64_t)&unk_26F954658);
  uint64_t v1 = v0;
  if (v0) {
    sub_244CF86D4((uint64_t)v0);
  }
  return v1;
}

void *sub_244CF912C()
{
  return &unk_26F954658;
}

uint64_t sub_244CF9138(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF915C(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF9180(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF91A4(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF91C8(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF91EC(uint64_t a1)
{
  return sub_244CF86D4(a1);
}

uint64_t sub_244CF9210(uint64_t result)
{
  return sub_244CF86D4(result);
}

uint64_t sub_244CF9220(uint64_t result)
{
  return sub_244CF86D4(result);
}

uint64_t sub_244CF9230(uint64_t a1, void *__ptr, unsigned int a3)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  LODWORD(result) = fwrite(__ptr, (int)a3, 1uLL, *(FILE **)(a1 + 40));
  if ((int)result <= 0) {
    return result;
  }
  else {
    return a3;
  }
}

size_t sub_244CF9280(uint64_t a1, void *__ptr, int a3)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  size_t v4 = fread(__ptr, 1uLL, a3, *(FILE **)(a1 + 40));
  if (!v4 && ferror(*(FILE **)(a1 + 40)))
  {
    sub_244D0B884(2, 0, 0, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 161);
    sub_244D0B884(17, 0, 2, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 162);
    return 0xFFFFFFFFLL;
  }
  return v4;
}

char *sub_244CF9318(uint64_t a1, char *a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = fgets(a2, a3, *(FILE **)(a1 + 40));
  if (result) {
    return (char *)strlen(a2);
  }
  *a2 = 0;
  return result;
}

uint64_t sub_244CF9370(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = a3;
  uint64_t result = 0;
  if (a2 <= 105)
  {
    switch(a2)
    {
      case 1:
        uint64_t v4 = 0;
        goto LABEL_14;
      case 2:
        LODWORD(result) = feof(*(FILE **)(a1 + 40));
        return (int)result;
      case 3:
        goto LABEL_8;
      case 8:
        return *(int *)(a1 + 20);
      case 9:
        *(_DWORD *)(a1 + 20) = a3;
        return 1;
      case 11:
        return fflush(*(FILE **)(a1 + 40)) == 0;
      default:
        return result;
    }
  }
  if (a2 > 107)
  {
    if (a2 != 108)
    {
      if (a2 == 128)
      {
LABEL_14:
        LODWORD(result) = fseek(*(FILE **)(a1 + 40), v4, 0);
        return (int)result;
      }
      else if (a2 == 133)
      {
LABEL_8:
        JUMPOUT(0x245696480);
      }
      return result;
    }
    sub_244CF95EC(a1);
    *(_DWORD *)(a1 + 20) = v4 & 1;
    if ((v4 & 8) != 0)
    {
      if ((v4 & 2) != 0) {
        uint64_t v9 = "ab+";
      }
      else {
        uint64_t v9 = "ab";
      }
    }
    else
    {
      uint64_t v8 = v4 & 6;
      if (v8 == 6)
      {
        uint64_t v9 = "rb+";
      }
      else
      {
        if ((v4 & 4) != 0) {
          uint64_t v9 = "wb";
        }
        else {
          uint64_t v9 = "rb";
        }
        if (!v8)
        {
          int v18 = 100;
          __int16 v19 = 235;
LABEL_36:
          sub_244D0B884(17, 0, v18, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", v19);
          return 0;
        }
      }
    }
    uint64_t v10 = fopen(a4, v9);
    if (v10)
    {
      *(void *)(a1 + 40) = v10;
      uint64_t result = 1;
      *(_DWORD *)(a1 + 16) = 1;
      return result;
    }
    sub_244D0B884(2, 0, 0, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 241);
    sub_244D0B930(5u, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"fopen('");
    int v18 = 2;
    __int16 v19 = 243;
    goto LABEL_36;
  }
  if (a2 == 106)
  {
    sub_244CF95EC(a1);
    *(void *)(a1 + 40) = a4;
    uint64_t result = 1;
    *(_DWORD *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 20) = v4 & 1;
  }
  else
  {
    if (a4) {
      *(void *)a4 = *(void *)(a1 + 40);
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CF95EC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      int v2 = *(FILE **)(a1 + 40);
      if (v2)
      {
        fclose(v2);
        *(void *)(a1 + 40) = 0;
      }
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
  return 1;
}

BOOL sub_244CF9634(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v18 = 0u;
  long long v19 = 0u;
  *(void *)uint64_t v17 = a1;
  uint64_t v20 = a4;
  if (!a3) {
    return 1;
  }
  int v6 = 0;
  BOOL v7 = 0;
  for (i = 0; i != a3; BOOL v7 = i >= a3)
  {
    if (!v6)
    {
      sub_244CF8A00(*(uint64_t *)v17, v20, 0xFFFFFFFF);
      v21[0] = a0123456789abcd_2[DWORD2(v19) >> 28];
      v21[1] = a0123456789abcd_2[(*((void *)&v19 + 1) >> 24) & 0xFLL];
      void v21[2] = a0123456789abcd_2[(*((void *)&v19 + 1) >> 20) & 0xFLL];
      void v21[3] = a0123456789abcd_2[(*((void *)&v19 + 1) >> 16) & 0xFLL];
      unsigned char v21[4] = a0123456789abcd_2[WORD4(v19) >> 12];
      char v22 = a0123456789abcd_2[(*((void *)&v19 + 1) >> 8) & 0xFLL];
      char v23 = a0123456789abcd_2[BYTE8(v19) >> 4];
      char v24 = a0123456789abcd_2[BYTE8(v19) & 0xF];
      __int16 v25 = 8224;
      if ((sub_244CF8524(*(uint64_t *)v17, (uint64_t)v21, 10) & 0x80000000) != 0) {
        break;
      }
      int v6 = DWORD1(v19);
    }
    unint64_t v9 = *(unsigned __int8 *)(a2 + i);
    v21[0] = a0123456789abcd_2[v9 >> 4];
    v21[1] = a0123456789abcd_2[v9 & 0xF];
    void v21[2] = 32;
    if (v6 == 15)
    {
      *(_WORD *)&void v21[3] = 31776;
      int v10 = 5;
    }
    else if (v6 == 7)
    {
      void v21[3] = 32;
      int v10 = 4;
    }
    else
    {
      int v10 = 3;
    }
    if ((sub_244CF8524(*(uint64_t *)v17, (uint64_t)v21, v10) & 0x80000000) != 0) {
      break;
    }
    int v11 = *(unsigned __int8 *)(a2 + i);
    if ((v11 - 127) < 0xFFFFFFA1) {
      LOBYTE(v11) = 46;
    }
    *((unsigned char *)&v17[2] + DWORD1(v19)) = v11;
    int v6 = DWORD1(v19) + 1;
    DWORD1(v19) = v6;
    ++*((void *)&v19 + 1);
    if (v6 == 16)
    {
      LOWORD(v19) = 2684;
      if ((sub_244CF8524(*(uint64_t *)v17, (uint64_t)&v18, 18) & 0x80000000) != 0) {
        break;
      }
      int v6 = 0;
      DWORD1(v19) = 0;
    }
    ++i;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v12 = DWORD1(v19);
  if (!DWORD1(v19)) {
    return 1;
  }
  qmemcpy(v21, "    |", sizeof(v21));
  if (DWORD1(v19) <= 0xF)
  {
    for (unsigned int j = DWORD1(v19); j < 0x10; DWORD1(v19) = j)
    {
      int v14 = j == 15 ? 5 : 3;
      int v15 = j == 7 ? 4 : v14;
      if ((sub_244CF8524(*(uint64_t *)v17, (uint64_t)v21, v15) & 0x80000000) != 0) {
        return 0;
      }
      unsigned int j = DWORD1(v19) + 1;
    }
  }
  *((unsigned char *)&v18 + v12) = 124;
  *((unsigned char *)&v18 + (v12 + 1)) = 10;
  return (sub_244CF8524(*(uint64_t *)v17, (uint64_t)&v18, (int)v12 + 2) & 0x80000000) == 0;
}

uint64_t sub_244CF98F4(uint64_t a1, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v4 = vsnprintf(__str, 0x100uLL, __format, va);
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (v4 > 0xFF)
  {
    unint64_t v6 = v4 + 1;
    BOOL v7 = (char *)sub_244D43FF4(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      int v9 = vsnprintf(v7, v6, __format, va);
      uint64_t v5 = sub_244CF8524(a1, (uint64_t)v8, v9);
      sub_244D440EC(v8);
      return v5;
    }
    return 0xFFFFFFFFLL;
  }
  return sub_244CF8524(a1, (uint64_t)__str, v4);
}

double sub_244CF99F4(uint64_t a1)
{
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  double result = 2.87627503e82;
  *(_OWORD *)(a1 + 32) = xmmword_244EAF498;
  *(_OWORD *)(a1 + 48) = unk_244EAF4A8;
  *(_OWORD *)a1 = xmmword_244EAF478;
  *(_OWORD *)(a1 + 16) = unk_244EAF488;
  *(void *)a1 ^= 0x1010020uLL;
  return result;
}

void *sub_244CF9A48(void *result, char *__src, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = result[26];
    if (128 - v6 >= a3) {
      size_t v7 = a3;
    }
    else {
      size_t v7 = 128 - v6;
    }
    if (v7)
    {
      double result = memcpy((char *)result + v6 + 80, __src, v7);
      uint64_t v6 = *(void *)(v5 + 208);
    }
    *(void *)(v5 + 208) = v6 + v7;
    size_t v8 = a3 - v7;
    if (v8)
    {
      int v9 = &__src[v7];
      sub_244CF9B28((long long *)v5, v5 + 80, 128, 0);
      *(void *)(v5 + 208) = 0;
      if (v8 >= 0x81)
      {
        do
        {
          sub_244CF9B28((long long *)v5, (uint64_t)v9, 128, 0);
          v9 += 128;
          v8 -= 128;
        }
        while (v8 > 0x80);
      }
      double result = memcpy((void *)(v5 + 80), v9, v8);
      *(void *)(v5 + 208) = v8;
    }
  }
  return result;
}

int8x16_t sub_244CF9B28(long long *a1, uint64_t a2, uint64_t a3, int a4)
{
  v85[9] = *MEMORY[0x263EF8340];
  long long v4 = a1[1];
  long long v81 = *a1;
  long long v82 = v4;
  long long v5 = a1[3];
  long long v83 = a1[2];
  long long v84 = v5;
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v7 = *((void *)a1 + 9);
  uint64_t v8 = v6 + a3;
  *((void *)a1 + 8) = v6 + a3;
  if (__CFADD__(v6, a3)) {
    *((void *)a1 + 9) = ++v7;
  }
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = v8 ^ 0x510E527FADE682D1;
  unint64_t v12 = v7 ^ 0x9B05688C2B3E6C1FLL;
  uint64_t v14 = *((void *)&v81 + 1);
  uint64_t v13 = v81;
  uint64_t v15 = *((void *)&v83 + 1);
  uint64_t v16 = v83;
  if (a4) {
    unint64_t v17 = 0xE07C265404BE4294;
  }
  else {
    unint64_t v17 = 0x1F83D9ABFB41BD6BLL;
  }
  unint64_t v18 = 0xA54FF53A5F1D36F1;
  uint64_t v19 = 0x5BE0CD19137E2179;
  uint64_t v21 = *((void *)&v82 + 1);
  uint64_t v20 = v82;
  uint64_t v22 = 0x3C6EF372FE94F82BLL;
  unint64_t v23 = 0xBB67AE8584CAA73BLL;
  uint64_t v24 = 0x6A09E667F3BCC908;
  uint64_t v25 = *((void *)&v84 + 1);
  uint64_t v26 = v84;
  do
  {
    LODWORD(v27) = v9 - 160;
    if (v10 >= 0xA) {
      uint64_t v27 = v27;
    }
    else {
      uint64_t v27 = v9;
    }
    uint64_t v28 = (unsigned __int8 *)&unk_244EAF4B8 + v27;
    uint64_t v29 = v13 + v16 + *(void *)(a2 + 8 * *v28);
    uint64_t v30 = v11 ^ v29;
    uint64_t v31 = v14 + v15 + *(void *)(a2 + 8 * v28[2]);
    unint64_t v32 = v12 ^ v31;
    uint64_t v33 = v24 + __ROR8__(v30, 32);
    uint64_t v34 = v33 ^ v16;
    unint64_t v35 = v23 + __ROR8__(v32, 32);
    unint64_t v36 = v35 ^ v15;
    uint64_t v37 = v29 + *(void *)(a2 + 8 * v28[1]) + __ROR8__(v34, 24);
    uint64_t v38 = v37 ^ __ROR8__(v30, 32);
    uint64_t v39 = v31 + *(void *)(a2 + 8 * v28[3]) + __ROR8__(v35 ^ v15, 24);
    uint64_t v40 = v39 ^ __ROR8__(v32, 32);
    uint64_t v41 = v20 + v26 + *(void *)(a2 + 8 * v28[4]);
    unint64_t v42 = v17 ^ v41;
    uint64_t v43 = __ROR8__(v38, 16) + v33;
    uint64_t v44 = v22 + __ROR8__(v17 ^ v41, 32);
    uint64_t v45 = v44 ^ v26;
    unint64_t v46 = __ROR8__(v40, 16) + v35;
    uint64_t v47 = v41 + *(void *)(a2 + 8 * v28[5]) + __ROR8__(v44 ^ v26, 24);
    uint64_t v48 = v47 ^ __ROR8__(v42, 32);
    uint64_t v49 = v43 ^ __ROR8__(v34, 24);
    uint64_t v50 = __ROR8__(v48, 16) + v44;
    unint64_t v51 = v46 ^ __ROR8__(v36, 24);
    uint64_t v52 = v21 + v25 + *(void *)(a2 + 8 * v28[6]);
    uint64_t v53 = v19 ^ v52;
    uint64_t v54 = v50 ^ __ROR8__(v45, 24);
    unint64_t v55 = v18 + __ROR8__(v53, 32);
    unint64_t v56 = v55 ^ v25;
    uint64_t v57 = v52 + *(void *)(a2 + 8 * v28[7]) + __ROR8__(v55 ^ v25, 24);
    uint64_t v58 = v57 ^ __ROR8__(v53, 32);
    unint64_t v59 = __ROR8__(v58, 16) + v55;
    unint64_t v60 = v59 ^ __ROR8__(v56, 24);
    uint64_t v61 = __ROR8__(v51, 63) + v37 + *(void *)(a2 + 8 * v28[8]);
    uint64_t v62 = v61 ^ __ROR8__(v58, 16);
    uint64_t v63 = __ROR8__(v62, 32) + v50;
    uint64_t v64 = v63 ^ __ROR8__(v51, 63);
    uint64_t v65 = __ROR8__(v54, 63) + v39 + *(void *)(a2 + 8 * v28[10]);
    uint64_t v66 = __ROR8__(v65 ^ __ROR8__(v38, 16), 32);
    uint64_t v13 = v61 + *(void *)(a2 + 8 * v28[9]) + __ROR8__(v64, 24);
    uint64_t v67 = v66 + v59;
    unint64_t v68 = (v66 + v59) ^ __ROR8__(v54, 63);
    uint64_t v14 = v65 + *(void *)(a2 + 8 * v28[11]) + __ROR8__(v68, 24);
    uint64_t v69 = v14 ^ v66;
    uint64_t v19 = __ROR8__(v13 ^ __ROR8__(v62, 32), 16);
    uint64_t v70 = __ROR8__(v60, 63) + v47 + *(void *)(a2 + 8 * v28[12]);
    uint64_t v71 = v70 ^ __ROR8__(v40, 16);
    uint64_t v11 = __ROR8__(v69, 16);
    uint64_t v22 = v19 + v63;
    uint64_t v72 = __ROR8__(v71, 32) + v43;
    uint64_t v73 = v72 ^ __ROR8__(v60, 63);
    unint64_t v18 = v11 + v67;
    uint64_t v20 = v70 + *(void *)(a2 + 8 * v28[13]) + __ROR8__(v73, 24);
    unint64_t v12 = __ROR8__(v20 ^ __ROR8__(v71, 32), 16);
    uint64_t v24 = v12 + v72;
    uint64_t v74 = v57 + *(void *)(a2 + 8 * v28[14]) + __ROR8__(v49, 63);
    uint64_t v75 = v74 ^ __ROR8__(v48, 16);
    unint64_t v76 = (v12 + v72) ^ __ROR8__(v73, 24);
    unint64_t v77 = __ROR8__(v75, 32) + v46;
    uint64_t v78 = v77 ^ __ROR8__(v49, 63);
    uint64_t v15 = __ROR8__(v22 ^ __ROR8__(v64, 24), 63);
    uint64_t v21 = v74 + *(void *)(a2 + 8 * v28[15]) + __ROR8__(v78, 24);
    uint64_t v26 = __ROR8__(v18 ^ __ROR8__(v68, 24), 63);
    unint64_t v17 = __ROR8__(v21 ^ __ROR8__(v75, 32), 16);
    unint64_t v23 = v17 + v77;
    uint64_t v25 = __ROR8__(v76, 63);
    ++v10;
    v9 += 16;
    uint64_t v16 = __ROR8__((v17 + v77) ^ __ROR8__(v78, 24), 63);
  }
  while (v10 != 12);
  unint64_t v79 = 0;
  *(void *)&long long v81 = v13;
  *((void *)&v81 + 1) = v14;
  *(void *)&long long v83 = v16;
  *((void *)&v83 + 1) = v15;
  v85[4] = v11;
  v85[5] = v12;
  v85[0] = v24;
  v85[1] = v17 + v77;
  *(void *)&long long v82 = v20;
  *((void *)&v82 + 1) = v21;
  *(void *)&long long v84 = v26;
  *((void *)&v84 + 1) = v25;
  v85[6] = v17;
  v85[7] = v19;
  v85[2] = v22;
  v85[3] = v18;
  do
  {
    int8x16_t result = veorq_s8(*(int8x16_t *)&v85[v79 / 8], veorq_s8((int8x16_t)a1[v79 / 0x10], *(int8x16_t *)((char *)&v81 + v79)));
    a1[v79 / 0x10] = (__int128)result;
    v79 += 16;
  }
  while (v79 != 64);
  return result;
}

__n128 sub_244CF9F20(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 208);
  if (v4 == 128)
  {
    uint64_t v5 = 128;
  }
  else
  {
    bzero((void *)(a2 + v4 + 80), 128 - v4);
    uint64_t v5 = *(void *)(a2 + 208);
  }
  sub_244CF9B28((long long *)a2, a2 + 80, v5, 1);
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v7;
  return result;
}

double sub_244CF9F88(char *a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  sub_244CF99F4((uint64_t)v7);
  sub_244CF9A48(v7, a1, a2);
  *(void *)&double result = sub_244CF9F20(a3, (uint64_t)v7).n128_u64[0];
  return result;
}

BOOL sub_244CFA034(long long *a1, void *a2)
{
  long long v7 = 0;
  unint64_t v8 = 0;
  unsigned int v6 = 0;
  if (sub_244CFCD34(a1, &v7, 2) && sub_244CFD114(&v7, &v6))
  {
    if (!v6) {
      return sub_244D16D20(v7, v8, a2) != 0;
    }
    int v3 = 109;
    __int16 v4 = 31;
  }
  else
  {
    int v3 = 117;
    __int16 v4 = 26;
  }
  sub_244D0B884(3, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/bn_asn1.c", v4);
  return 0;
}

uint64_t sub_244CFA0E0(uint64_t *a1, uint64_t *a2)
{
  if (sub_244D16B50((uint64_t)a2))
  {
    int v4 = 109;
    __int16 v5 = 41;
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    if (sub_244CFB808(a1, (uint64_t)v8, 2u)
      && ((sub_244D168EC(a2) & 7) != 0 || sub_244CFB8C4((uint64_t)v8, 0)))
    {
      unsigned int v6 = sub_244D1695C(a2);
      if (sub_244CFA1C4((uint64_t)v8, v6, (uint64_t)a2))
      {
        if (sub_244CFB540(a1)) {
          return 1;
        }
      }
    }
    int v4 = 118;
    __int16 v5 = 52;
  }
  sub_244D0B884(3, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/bn_asn1.c", v5);
  return 0;
}

uint64_t sub_244CFA1C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6 = 0;
  uint64_t result = sub_244CFBA94(a1, &v6, a2);
  if (result) {
    return sub_244D16FA8(v6, a2, a3) != 0;
  }
  return result;
}

void *sub_244CFA21C(uint64_t a1)
{
  int v2 = sub_244D1663C(a1);
  int v3 = sub_244D43FF4((16 * v2) | 3);
  int v4 = v3;
  if (v3)
  {
    __int16 v5 = v3;
    if (*(_DWORD *)(a1 + 16))
    {
      *(unsigned char *)int v3 = 45;
      __int16 v5 = (char *)v3 + 1;
    }
    if (sub_244D160FC(a1)) {
      *v5++ = 48;
    }
    if (v2 >= 1)
    {
      int v6 = 0;
      uint64_t v7 = v2;
      do
      {
        uint64_t v8 = v7--;
        for (uint64_t i = 56; i != -8; i -= 8)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * v7) >> i;
          v6 |= v10;
          if (v6)
          {
            unsigned char *v5 = a0123456789abcd_5[(unint64_t)v10 >> 4];
            v5[1] = a0123456789abcd_5[v10 & 0xF];
            v5 += 2;
            int v6 = 1;
          }
        }
      }
      while (v8 >= 2);
    }
    unsigned char *v5 = 0;
  }
  return v4;
}

uint64_t sub_244CFA30C(uint64_t *a1, unsigned char *a2)
{
  return sub_244CFA330(a1, a2, (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_244CFA42C, (uint64_t (*)(void))sub_244D44374);
}

uint64_t sub_244CFA330(uint64_t *a1, unsigned char *a2, unsigned int (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(void))
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)(v4 == 45 ? a2 + 1 : a2);
    BOOL v10 = v4 == 45;
    do
    {
      int v11 = a4(*(unsigned __int8 *)(v9 + v8));
      uint64_t v12 = (v4 == 45) - 0x7FFFFFFFLL + v8++;
      if (v11) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
    }
    while (!v13);
    uint64_t v14 = v8 - 1;
    uint64_t v4 = v14 + v10;
    if (a1)
    {
      uint64_t v15 = *a1;
      if (*a1)
      {
        sub_244D1697C(*a1);
      }
      else
      {
        uint64_t v15 = (uint64_t)sub_244D16670();
        if (!v15) {
          return 0;
        }
      }
      if (a3(v15, v9, v14))
      {
        sub_244D15F70(v15);
        if (!sub_244D160FC(v15)) {
          *(_DWORD *)(v15 + 16) = v10;
        }
        *a1 = v15;
        return v4;
      }
      if (!*a1) {
        sub_244D166B0((void **)v15);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t sub_244CFA42C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 0x20000000)
  {
    int v4 = a3;
    uint64_t result = sub_244D16B60((void **)a1, 4 * a3);
    if (result)
    {
      if (v4 < 1)
      {
        int v13 = 0;
      }
      else
      {
        uint64_t v7 = 0;
        do
        {
          unint64_t v8 = 0;
          if (v4 >= 0x10) {
            uint64_t v9 = 16;
          }
          else {
            uint64_t v9 = v4;
          }
          unint64_t v10 = v9 + 1;
          int v11 = (char *)(a2 - v9 + v4);
          do
          {
            unsigned __int8 v14 = 0;
            int v12 = *v11++;
            sub_244D44390(&v14, v12);
            unint64_t v8 = v14 | (16 * v8);
            --v10;
          }
          while (v10 > 1);
          int v13 = v7 + 1;
          *(void *)(*(void *)a1 + 8 * v7) = v8;
          if (v4 >= 0x10) {
            v4 -= 16;
          }
          else {
            int v4 = 0;
          }
          ++v7;
        }
        while (v4 > 0);
      }
      *(_DWORD *)(a1 + 8) = v13;
      return 1;
    }
  }
  else
  {
    sub_244D0B884(3, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/convert.c", 116);
    return 0;
  }
  return result;
}

uint64_t sub_244CFA530(uint64_t a1)
{
  memset(v17, 0, sizeof(v17));
  if (!sub_244CFB3DC((uint64_t)v17, 0x10uLL) || !sub_244CFB8C4((uint64_t)v17, 0))
  {
    int v2 = 0;
    goto LABEL_7;
  }
  if (!sub_244D160FC(a1))
  {
    int v4 = sub_244D16714(a1);
    int v2 = v4;
    if (v4)
    {
      if (!sub_244D160FC((uint64_t)v4))
      {
        while (1)
        {
          uint64_t v9 = sub_244D18F6C((uint64_t)v2, 0x8AC7230489E80000);
          if (v9 == -1) {
            goto LABEL_7;
          }
          unint64_t v10 = v9;
          BOOL v11 = sub_244D160FC((uint64_t)v2);
          if (!v11 || v10)
          {
            unsigned int v12 = 0;
            while (sub_244CFB8C4((uint64_t)v17, (v10 % 0xA) | 0x30))
            {
              char v14 = !v11 || v10 > 9;
              if (v12 <= 0x11)
              {
                ++v12;
                v10 /= 0xAuLL;
                if (v14) {
                  continue;
                }
              }
              goto LABEL_30;
            }
            goto LABEL_7;
          }
LABEL_30:
          if (sub_244D160FC((uint64_t)v2)) {
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
LABEL_7:
    sub_244D166B0((void **)v2);
    sub_244CFB470((uint64_t)v17);
    return 0;
  }
  int v2 = 0;
  if (!sub_244CFB8C4((uint64_t)v17, 0x30u)) {
    goto LABEL_7;
  }
LABEL_10:
  if (sub_244D16B50(a1) && !sub_244CFB8C4((uint64_t)v17, 0x2Du)) {
    goto LABEL_7;
  }
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  if (!sub_244CFB48C((uint64_t)v17, &v16, &v15)) {
    goto LABEL_7;
  }
  unint64_t v5 = v15;
  if (v15 >= 2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = -1;
    do
    {
      char v8 = *(unsigned char *)(v16 + v6);
      *(unsigned char *)(v16 + v6) = *(unsigned char *)(v16 + v5 + v7);
      *(unsigned char *)(v16 + v15 + v7) = v8;
      ++v6;
      unint64_t v5 = v15;
      --v7;
    }
    while (v6 < v15 >> 1);
  }
  sub_244D166B0((void **)v2);
  return v16;
}

uint64_t sub_244CFA714(uint64_t *a1, unsigned char *a2)
{
  return sub_244CFA330(a1, a2, (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_244CFA738, (uint64_t (*)(void))sub_244D44364);
}

uint64_t sub_244CFA738(uint64_t a1, char *a2, unsigned int a3)
{
  if ((int)a3 < 1) {
    return 1;
  }
  unint64_t v5 = 0;
  if (a3 % 0x13) {
    LODWORD(result) = 19 - a3 % 0x13;
  }
  else {
    LODWORD(result) = 0;
  }
  uint64_t v7 = a3;
  do
  {
    uint64_t v8 = *a2++;
    unint64_t v5 = v8 + 10 * v5 - 48;
    LODWORD(result) = result + 1;
    if (result == 19)
    {
      uint64_t result = sub_244D1EDFC(a1, 0x8AC7230489E80000);
      if (!result) {
        return result;
      }
      int v9 = sub_244D15FB8(a1, v5);
      uint64_t result = 0;
      if (!v9) {
        return result;
      }
      unint64_t v5 = 0;
    }
    --v7;
  }
  while (v7);
  return 1;
}

uint64_t sub_244CFA814(uint64_t *a1, unsigned char *a2)
{
  int v2 = a2;
  if (*a2 == 45) {
    ++a2;
  }
  if (*a2 == 48 && (a2[1] | 0x20) == 0x78)
  {
    a2 += 2;
    int v4 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_244CFA42C;
    unint64_t v5 = sub_244D44374;
  }
  else
  {
    int v4 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_244CFA738;
    unint64_t v5 = sub_244D44364;
  }
  uint64_t result = sub_244CFA330(a1, a2, v4, (uint64_t (*)(void))v5);
  if (result)
  {
    if (*v2 == 45)
    {
      BOOL v7 = sub_244D160FC(*a1);
      uint64_t result = 1;
      if (!v7) {
        *(_DWORD *)(*a1 + 16) = 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CFA8E4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) && sub_244CF8524(a1, (uint64_t)"-", 1) != 1
    || sub_244D160FC(a2) && sub_244CF8524(a1, (uint64_t)"0", 1) != 1)
  {
    return 0;
  }
  int v4 = sub_244D1663C(a2);
  if (v4 < 1) {
    return 1;
  }
  int v5 = 0;
  uint64_t v6 = v4;
  do
  {
    uint64_t v7 = v6--;
    for (uint64_t i = 60; i != -4; i -= 4)
    {
      uint64_t v9 = (*(void *)(*(void *)a2 + 8 * v6) >> i) & 0xFLL;
      if (v5 || v9)
      {
        int v5 = 1;
        if (sub_244CF8524(a1, (uint64_t)&a0123456789abcd_5[v9], 1) != 1) {
          return 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    uint64_t result = 1;
  }
  while (v7 >= 2);
  return result;
}

void *sub_244CFAA00(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_244CF90D4();
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = sub_244CFA8E4((uint64_t)result, a2);
    sub_244CF830C(v4);
    return (void *)v5;
  }
  return result;
}

unint64_t sub_244CFAA48(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_244D168EC((uint64_t *)a1);
  BOOL v5 = (v4 & 7) != 0 || v4 == 0;
  uint64_t v6 = !v5;
  if (v5) {
    unint64_t v7 = ((unint64_t)v4 + 7) >> 3;
  }
  else {
    unint64_t v7 = (((unint64_t)v4 + 7) >> 3) + 1;
  }
  if (a2)
  {
    *(_DWORD *)a2 = bswap32(v7);
    if (v6) {
      *(unsigned char *)(a2 + 4) = 0;
    }
    uint64_t v8 = (unsigned char *)(a2 + 4);
    sub_244D16EC0(a1, &v8[v6]);
    if (*(_DWORD *)(a1 + 16) && v7) {
      *v8 |= 0x80u;
    }
  }
  return v7 + 4;
}

void *sub_244CFAAD4(unsigned int *a1, unint64_t a2, void *a3)
{
  if (a2 <= 3)
  {
    __int16 v3 = 411;
LABEL_11:
    sub_244D0B884(3, 0, 117, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/convert.c", v3);
    return 0;
  }
  unint64_t v5 = bswap32(*a1);
  if (v5 != a2 - 4)
  {
    __int16 v3 = 419;
    goto LABEL_11;
  }
  unint64_t v7 = a3;
  if (a3 || (unint64_t v7 = sub_244D16670()) != 0)
  {
    if (!v5)
    {
      sub_244D1697C((uint64_t)v7);
      return v7;
    }
    uint64_t v8 = (unsigned __int8 *)(a1 + 1);
    if (!sub_244D16D20(v8, v5, v7))
    {
      if (!a3) {
        sub_244D166B0((void **)v7);
      }
      return 0;
    }
    unsigned int v9 = (char)*v8;
    *((_DWORD *)v7 + 4) = (v9 >> 7) & 1;
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = sub_244D168EC(v7);
      sub_244D20F50((uint64_t)v7, v10 - 1);
    }
  }
  return v7;
}

uint64_t sub_244CFABD0(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (sub_244D16FA8(a2, a3, a1)) {
    return a3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_244CFAC18(char **a1, char *__dst, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (sub_244D16F10(__dst, a3, a1)) {
    return a3;
  }
  return 0xFFFFFFFFLL;
}

void *sub_244CFAC60()
{
  return sub_244D44058(0x18uLL);
}

uint64_t sub_244CFAC68(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) >= a2) {
    return 1;
  }
  if (a2 < 0xFFFFFFFFFFFFFFFDLL)
  {
    if (a2 >= 0xBFFFFFFFFFFFFFFDLL)
    {
      __int16 v2 = 91;
      goto LABEL_9;
    }
    unint64_t v4 = (2 * (((a2 + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t result = (uint64_t)sub_244D44148(*(void **)(a1 + 8), v4);
    if (!result) {
      return result;
    }
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = v4;
    return 1;
  }
  __int16 v2 = 85;
LABEL_9:
  sub_244D0B884(7, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/buf/buf.c", v2);
  return 0;
}

unint64_t sub_244CFAD1C(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (!sub_244CFAC68((uint64_t)a1, a2)) {
    return 0;
  }
  if (v2 > *a1) {
    bzero((void *)(a1[1] + *a1), v2 - *a1);
  }
  *a1 = v2;
  return v2;
}

uint64_t sub_244CFAD74(void *a1, const void *a2, size_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v5 = *a1 + a3;
  if (__CFADD__(*a1, a3))
  {
    sub_244D0B884(7, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/buf/buf.c", 127);
    return 0;
  }
  else
  {
    uint64_t result = sub_244CFAC68((uint64_t)a1, *a1 + a3);
    if (result)
    {
      memcpy((void *)(a1[1] + *a1), a2, a3);
      *a1 = v5;
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CFAE28(uint64_t a1, void **a2)
{
  size_t __n = 0;
  __int16 __src = 0;
  if (!sub_244CFB48C(a1, &__src, &__n))
  {
    sub_244CFB470(a1);
    return 0xFFFFFFFFLL;
  }
  if (__n >> 31)
  {
    sub_244D440EC(__src);
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    size_t v5 = (char *)*a2;
    if (*a2)
    {
      if (__n)
      {
        memcpy(v5, __src, __n);
        size_t v6 = __n;
        size_t v5 = (char *)*a2;
      }
      else
      {
        size_t v6 = 0;
      }
      *a2 = &v5[v6];
    }
    else
    {
      *a2 = __src;
      __int16 __src = 0;
    }
  }
  sub_244D440EC(__src);
  return __n;
}

uint64_t sub_244CFAEDC(uint64_t a1, void *a2, void *a3)
{
  memset(v10, 0, sizeof(v10));
  int v9 = 0;
  uint64_t result = sub_244CFAFC0((long long *)a1, (char *)&v9, 0);
  if (result)
  {
    if (v9)
    {
      uint64_t v8 = 0;
      if (!sub_244CFB3DC((uint64_t)v10, *(void *)(a1 + 8))
        || !sub_244CFB0C4((long long *)a1, (uint64_t *)v10, 0, 0, 0)
        || !sub_244CFB48C((uint64_t)v10, a3, &v8))
      {
        sub_244CFB470((uint64_t)v10);
        return 0;
      }
      uint64_t v7 = v8;
      *a2 = *a3;
      a2[1] = v7;
    }
    else
    {
      uint64_t result = sub_244CFCB34((long long *)a1, a2, 0, 0);
      if (!result) {
        return result;
      }
      *a3 = 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CFAFC0(long long *a1, char *a2, unsigned int a3)
{
  if (a3 <= 0x80)
  {
    long long v12 = *a1;
    *(_DWORD *)a2 = 0;
    uint64_t v3 = 1;
    if (!*((void *)&v12 + 1)) {
      return v3;
    }
    uint64_t v5 = a3 + 1;
    while (1)
    {
      v11[0] = 0;
      v11[1] = 0;
      int v10 = 0;
      unint64_t v9 = 0;
      int v8 = 0;
      if (!sub_244CFCD04(&v12, v11, &v10, &v9, a2, &v8)) {
        break;
      }
      if (*(_DWORD *)a2) {
        return 1;
      }
      if ((v10 & 0x20000000) != 0)
      {
        if ((v10 & 0xDFFFFFFF) <= 0x1E && ((1 << v10) & 0x5E7C1010) != 0)
        {
          uint64_t v3 = 1;
          *(_DWORD *)a2 = 1;
          return v3;
        }
        if (!sub_244CFC510(v11, v9) || !sub_244CFAFC0(v11, a2, v5)) {
          return 0;
        }
        if (*(_DWORD *)a2) {
          return 1;
        }
      }
      if (!*((void *)&v12 + 1)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_244CFB0C4(long long *a1, uint64_t *a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5 > 0x80) {
    return 0;
  }
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  uint64_t v12 = a5 + 1;
  while (1)
  {
    uint64_t v13 = *((void *)a1 + 1);
    if (!v13) {
      return a4 == 0;
    }
    if (a4 && v13 != 1 && !**(unsigned char **)a1 && !*(unsigned char *)(*(void *)a1 + 1) && sub_244CFC510(a1, 2uLL)) {
      return 1;
    }
    uint64_t v26 = 0;
    size_t v27 = 0;
    unsigned int v25 = 0;
    unint64_t v24 = 0;
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    if (!sub_244CFCD04(a1, &v26, &v25, &v24, 0, &v23)) {
      return 0;
    }
    unsigned int v14 = v25;
    if (a3)
    {
      uint64_t v15 = a3;
      uint64_t v16 = a2;
      if ((v25 & 0xDFFFFFFF) != a3) {
        return 0;
      }
    }
    else
    {
      if ((v25 & 0x20000000) != 0
        && (signed int v17 = (v25 & 0xDFFFFFFF) - 4, v17 <= 0x1A)
        && ((0x5E7C101u >> (v25 - 4)) & 1) != 0)
      {
        uint64_t v15 = dword_244EAF56C[v17];
        unsigned int v14 = dword_244EAF56C[v17];
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (uint64_t *)v22;
      if (!sub_244CFB808(a2, (uint64_t)v22, v14)) {
        return 0;
      }
    }
    if (v23)
    {
      unint64_t v18 = (const void **)a1;
      uint64_t v19 = v16;
      uint64_t v20 = v15;
      uint64_t v21 = 1;
    }
    else
    {
      if (!sub_244CFC510(&v26, v24)) {
        return 0;
      }
      if ((v25 & 0x20000000) == 0)
      {
        if (!sub_244CFBA40((uint64_t)v16, v26, v27)) {
          return 0;
        }
        goto LABEL_27;
      }
      unint64_t v18 = &v26;
      uint64_t v19 = v16;
      uint64_t v20 = v15;
      uint64_t v21 = 0;
    }
    if (!sub_244CFB0C4(v18, v19, v20, v21, v12)) {
      return 0;
    }
LABEL_27:
    uint64_t result = sub_244CFB540(a2);
    if (!result) {
      return result;
    }
  }
}

uint64_t sub_244CFB2A0(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  if (sub_244CFCE04((long long *)a1, a4))
  {
    *a3 = 0;
    return sub_244CFCD34((long long *)a1, a2, a4);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
    long long v17 = 0uLL;
    if (!sub_244CFB3DC((uint64_t)v18, *(void *)(a1 + 8))
      || !sub_244CFCD34((long long *)a1, &v17, a4 | 0x20000000u))
    {
      goto LABEL_13;
    }
    while (*((void *)&v17 + 1))
    {
      uint64_t v15 = 0;
      size_t v16 = 0;
      if (!sub_244CFCD34(&v17, &v15, a5) || !sub_244CFBA40((uint64_t)v18, v15, v16)) {
        goto LABEL_13;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (sub_244CFB48C((uint64_t)v18, &v14, &v13))
    {
      uint64_t v12 = v13;
      uint64_t v11 = v14;
      *a2 = v14;
      a2[1] = v12;
      *a3 = v11;
      return 1;
    }
    else
    {
LABEL_13:
      sub_244CFB470((uint64_t)v18);
      return 0;
    }
  }
}

double sub_244CFB3CC(_OWORD *a1)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_244CFB3DC(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t result = (uint64_t)sub_244D43FF4(a2);
  if (!a2 || result)
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 16) = result;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = a2;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 40) & 0xFC | 1;
    return 1;
  }
  return result;
}

uint64_t sub_244CFB440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) &= 0xFCu;
  return 1;
}

void sub_244CFB470(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8) && (*(unsigned char *)(a1 + 40) & 1) != 0) {
    sub_244D440EC(*(void **)(a1 + 16));
  }
}

uint64_t sub_244CFB48C(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_244D0B884(14, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", 127);
    return 0;
  }
  uint64_t result = sub_244CFB540((uint64_t *)a1);
  if (result)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t result = 0;
      if (!a2 || !a3) {
        return result;
      }
    }
    else if (!a2)
    {
      goto LABEL_10;
    }
    *a2 = *(void *)(a1 + 16);
LABEL_10:
    if (a3) {
      *a3 = *(void *)(a1 + 24);
    }
    *(void *)(a1 + 16) = 0;
    if (!*(unsigned char *)(a1 + 8) && (*(unsigned char *)(a1 + 40) & 1) != 0) {
      sub_244D440EC(0);
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CFB540(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v3 = *(void *)v2;
    if (!*(void *)v2) {
      return 0;
    }
  }
  if ((*(unsigned char *)(v3 + 24) & 2) != 0) {
    return 0;
  }
  uint64_t v4 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 32);
  if (!sub_244CFB540(*a1)) {
    goto LABEL_31;
  }
  unint64_t v7 = v5 + v6;
  unint64_t v8 = *(void *)(v4 + 24);
  if (v5 + v6 < v8) {
    goto LABEL_31;
  }
  unint64_t v9 = *(void *)(v3 + 8);
  size_t v10 = v9 - v7;
  if (v9 < v7) {
    goto LABEL_31;
  }
  if ((*(unsigned char *)(v4 + 33) & 1) == 0)
  {
    unsigned __int8 v11 = *(unsigned char *)(v4 + 32);
    goto LABEL_25;
  }
  if (v10 > 0xFFFFFFFE)
  {
    __int16 v13 = 221;
LABEL_30:
    sub_244D0B884(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", v13);
    goto LABEL_31;
  }
  if (v10 >> 24)
  {
    char v14 = -124;
    int v15 = 5;
LABEL_22:
    uint64_t v16 = (v15 - 1);
    if (!sub_244CFBBAC(v3, 0, v16))
    {
LABEL_31:
      if (*((unsigned char *)a1 + 8)) {
        uint64_t v2 = *(void *)v2;
      }
      uint64_t result = 0;
      *(unsigned char *)(v2 + 24) |= 2u;
      goto LABEL_34;
    }
    uint64_t v17 = *(void *)v3;
    *(void *)(v3 + 8) += v16;
    memmove((void *)(v17 + v7 + v16), (const void *)(v17 + v7), v10);
    unint64_t v8 = *(void *)(v4 + 24);
    goto LABEL_24;
  }
  if (v10 >> 16)
  {
    char v14 = -125;
    int v15 = 4;
    goto LABEL_22;
  }
  if (v10 > 0xFF)
  {
    char v14 = -126;
    int v15 = 3;
    goto LABEL_22;
  }
  if (v10 > 0x7F)
  {
    char v14 = -127;
    int v15 = 2;
    goto LABEL_22;
  }
  LOBYTE(v15) = 1;
  char v14 = v9 - v7;
  size_t v10 = 0;
LABEL_24:
  uint64_t v18 = *(void *)v3;
  *(void *)(v4 + 24) = v8 + 1;
  *(unsigned char *)(v18 + v8) = v14;
  unsigned __int8 v11 = v15 - 1;
  *(unsigned char *)(v4 + 32) = v15 - 1;
LABEL_25:
  if (v11)
  {
    unint64_t v19 = v11 - 1;
    do
    {
      *(unsigned char *)(*(void *)v3 + *(void *)(v4 + 24) + v19) = v10;
      v10 >>= 8;
      --v19;
    }
    while (v19 < *(unsigned __int8 *)(v4 + 32));
  }
  if (v10)
  {
    __int16 v13 = 260;
    goto LABEL_30;
  }
  *(void *)(v4 + 16) = 0;
  uint64_t result = 1;
LABEL_34:
  *a1 = 0;
  return result;
}

void *sub_244CFB738(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 16);
  if (v2) {
    return (void *)(*result + *(void *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
  }
  return result;
}

uint64_t sub_244CFB760(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return *(void *)(*(void *)(a1 + 16) + 8) - (*(void *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
  }
  else {
    return *(void *)(a1 + 24);
  }
}

uint64_t sub_244CFB788(uint64_t *a1, uint64_t a2)
{
  return sub_244CFB790(a1, a2, 1u);
}

uint64_t sub_244CFB790(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = sub_244CFB540(a1);
  if (result)
  {
    return sub_244CFB97C((uint64_t)a1, a2, a3, 0);
  }
  return result;
}

uint64_t sub_244CFB7F8(uint64_t *a1, uint64_t a2)
{
  return sub_244CFB790(a1, a2, 2u);
}

uint64_t sub_244CFB800(uint64_t *a1, uint64_t a2)
{
  return sub_244CFB790(a1, a2, 3u);
}

uint64_t sub_244CFB808(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!sub_244CFB540(a1)) {
    return 0;
  }
  if ((a3 & 0x1FFFFFFF) < 0x1F)
  {
    if (!sub_244CFBCC4((uint64_t)a1, HIBYTE(a3) & 0xE0 | a3, 1uLL)) {
      return 0;
    }
  }
  else if (!sub_244CFBCC4((uint64_t)a1, HIBYTE(a3) | 0x1F, 1uLL) {
         || !sub_244CFB8D0((uint64_t)a1, a3 & 0x1FFFFFFF))
  }
  {
    return 0;
  }

  return sub_244CFB97C((uint64_t)a1, a2, 1u, 1);
}

uint64_t sub_244CFB8C4(uint64_t a1, unsigned int a2)
{
  return sub_244CFBCC4(a1, a2, 1uLL);
}

BOOL sub_244CFB8D0(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = 0;
  if (a2)
  {
    unint64_t v5 = a2;
    do
    {
      ++v4;
      BOOL v6 = v5 > 0x7F;
      v5 >>= 7;
    }
    while (v6);
  }
  if (v4 <= 1) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = v4;
  }
  unsigned int v8 = v7 - 1;
  int v9 = 7 * v7 - 7;
  do
  {
    unsigned int v10 = v8;
    if (v8 >= v7) {
      break;
    }
    int v11 = sub_244CFBCC4(a1, (a2 >> v9) & 0x7F | ((unint64_t)(v8 != 0) << 7), 1uLL);
    unsigned int v8 = v10 - 1;
    v9 -= 7;
  }
  while (v11);
  return v10 >= v7;
}

uint64_t sub_244CFB97C(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  unsigned int v8 = (void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    unsigned int v8 = (void *)*v8;
  }
  uint64_t v9 = v8[1];
  int v11 = 0;
  uint64_t result = sub_244CFBBAC((uint64_t)v8, &v11, a3);
  if (result)
  {
    v8[1] += a3;
    if (a3) {
      bzero(v11, a3);
    }
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t result = 1;
    *(unsigned char *)(a2 + 8) = 1;
    *(void *)(a2 + 16) = v8;
    *(void *)(a2 + 24) = v9;
    *(unsigned char *)(a2 + 32) = a3;
    *(unsigned char *)(a2 + 33) = *(unsigned char *)(a2 + 33) & 0xFE | a4 & 1;
    *(void *)a1 = a2;
  }
  return result;
}

uint64_t sub_244CFBA40(uint64_t a1, const void *a2, size_t a3)
{
  __dst = 0;
  uint64_t result = sub_244CFBA94(a1, &__dst, a3);
  if (result)
  {
    if (a3) {
      memcpy(__dst, a2, a3);
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CFBA94(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_244CFB540((uint64_t *)a1);
  if (result)
  {
    int v7 = *(unsigned __int8 *)(a1 + 8);
    unsigned int v8 = (void *)(a1 + 16);
    if (v7) {
      unsigned int v8 = (void *)*v8;
    }
    uint64_t result = sub_244CFBBAC((uint64_t)v8, a2, a3);
    if (result)
    {
      v8[1] += a3;
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CFBB00(uint64_t a1, size_t a2)
{
  unsigned int v4 = 0;
  uint64_t result = sub_244CFBA94(a1, &v4, a2);
  if (result)
  {
    if (a2) {
      bzero(v4, a2);
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CFBB50(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_244CFB540((uint64_t *)a1);
  if (result)
  {
    int v7 = (void *)(a1 + 16);
    if (*(unsigned char *)(a1 + 8)) {
      int v7 = (void *)*v7;
    }
    return sub_244CFBBAC((uint64_t)v7, a2, a3) != 0;
  }
  return result;
}

uint64_t sub_244CFBBAC(uint64_t result, void *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 8);
    BOOL v5 = __CFADD__(v4, a3);
    unint64_t v6 = v4 + a3;
    if (v5)
    {
      __int16 v7 = 81;
LABEL_5:
      sub_244D0B884(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", v7);
LABEL_6:
      uint64_t result = 0;
      *(unsigned char *)(v3 + 24) |= 2u;
      return result;
    }
    uint64_t v9 = *(void *)(result + 16);
    if (v6 > v9)
    {
      if ((*(unsigned char *)(result + 24) & 1) == 0)
      {
        __int16 v7 = 87;
        goto LABEL_5;
      }
      if (2 * v9 < v6 || v9 < 0) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = 2 * v9;
      }
      uint64_t v12 = sub_244D44148(*(void **)result, v11);
      if (!v12) {
        goto LABEL_6;
      }
      *(void *)uint64_t v3 = v12;
      *(void *)(v3 + 16) = v11;
    }
    if (a2) {
      *a2 = *(void *)v3 + *(void *)(v3 + 8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CFBC74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v3 = (void *)*v3;
  }
  uint64_t result = 0;
  uint64_t v5 = v3[1];
  BOOL v6 = __CFADD__(v5, a2);
  unint64_t v7 = v5 + a2;
  char v8 = v6;
  if (!*(void *)a1 && (v8 & 1) == 0)
  {
    if (v7 <= v3[2])
    {
      v3[1] = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_244CFBCC4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t result = sub_244CFBA94(a1, &v9, a3);
  if (result)
  {
    if (a3)
    {
      unint64_t v7 = a3 - 1;
      do
      {
        *(unsigned char *)(v9 + v7) = a2;
        a2 >>= 8;
        --v7;
      }
      while (v7 < a3);
    }
    if (a2)
    {
      uint64_t v8 = a1 + 16;
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v8 = *(void *)v8;
      }
      uint64_t result = 0;
      *(unsigned char *)(v8 + 24) |= 2u;
      *(void *)a1 = 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CFBD5C(uint64_t a1, unsigned int a2)
{
  return sub_244CFBCC4(a1, a2, 2uLL);
}

uint64_t sub_244CFBD68(uint64_t a1, unsigned int a2)
{
  return sub_244CFBCC4(a1, __rev16(a2), 2uLL);
}

uint64_t sub_244CFBD74(uint64_t a1, unsigned int a2)
{
  return sub_244CFBCC4(a1, a2, 3uLL);
}

uint64_t sub_244CFBD80(uint64_t a1, unsigned int a2)
{
  return sub_244CFBCC4(a1, a2, 4uLL);
}

uint64_t sub_244CFBD8C(uint64_t a1, unsigned int a2)
{
  return sub_244CFBCC4(a1, bswap32(a2), 4uLL);
}

uint64_t sub_244CFBD98(uint64_t a1, unint64_t a2)
{
  return sub_244CFBCC4(a1, a2, 8uLL);
}

uint64_t sub_244CFBDA0(uint64_t a1, unint64_t a2)
{
  return sub_244CFBCC4(a1, bswap64(a2), 8uLL);
}

unsigned char *sub_244CFBDAC(unsigned char *result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result + 16;
    if (result[8]) {
      uint64_t v1 = (void *)*v1;
    }
    v1[1] = *(void *)(*(void *)result + 24);
    *(void *)(*(void *)result + 16) = 0;
    *(void *)uint64_t result = 0;
  }
  return result;
}

uint64_t sub_244CFBDDC(uint64_t a1, unint64_t a2)
{
  return sub_244CFBDE4(a1, a2, 2u);
}

uint64_t sub_244CFBDE4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  memset(v9, 0, sizeof(v9));
  if (!sub_244CFB808((uint64_t *)a1, (uint64_t)v9, a3))
  {
LABEL_13:
    uint64_t v8 = (uint64_t *)(a1 + 16);
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    uint64_t result = 0;
    *((unsigned char *)v8 + 24) |= 2u;
    *(void *)a1 = 0;
    return result;
  }
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    while ((v6 & 1) == 0)
    {
LABEL_7:
      if (!sub_244CFBCC4((uint64_t)v9, (a2 >> (56 - 8 * v5)), 1uLL)) {
        goto LABEL_13;
      }
      char v6 = 0;
      if (++v5 == 8) {
        return sub_244CFB540((uint64_t *)a1);
      }
    }
    if ((a2 >> (56 - 8 * v5)))
    {
      if (((a2 >> (56 - 8 * v5)) & 0x80) != 0 && !sub_244CFBCC4((uint64_t)v9, 0, 1uLL)) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
    ++v5;
    char v6 = 1;
  }
  while (v5 != 8);
  if (!sub_244CFBCC4((uint64_t)v9, 0, 1uLL)) {
    goto LABEL_13;
  }
  return sub_244CFB540((uint64_t *)a1);
}

uint64_t sub_244CFBEEC(uint64_t a1, unint64_t a2)
{
  return sub_244CFBEF4(a1, a2, 2u);
}

uint64_t sub_244CFBEF4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  v10[1] = *MEMORY[0x263EF8340];
  if ((a2 & 0x8000000000000000) != 0)
  {
    v10[0] = a2;
    unsigned int v5 = 7;
    do
    {
      LODWORD(v6) = v5;
      if (!v5) {
        break;
      }
      if (*((unsigned __int8 *)v10 + v5) != 255) {
        break;
      }
      --v5;
    }
    while (*((char *)v10 + v5) < 0);
    memset(v9, 0, sizeof(v9));
    if (sub_244CFB808((uint64_t *)a1, (uint64_t)v9, a3))
    {
      if ((v6 & 0x80000000) != 0) {
        return sub_244CFB540((uint64_t *)a1);
      }
      uint64_t v6 = v6;
      while (sub_244CFBCC4((uint64_t)v9, *((unsigned __int8 *)v10 + v6), 1uLL))
      {
        if (v6-- < 1) {
          return sub_244CFB540((uint64_t *)a1);
        }
      }
    }
    uint64_t v8 = a1 + 16;
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v8 = *(void *)v8;
    }
    uint64_t result = 0;
    *(unsigned char *)(v8 + 24) |= 2u;
    *(void *)a1 = 0;
  }
  else
  {
    return sub_244CFBDE4(a1, a2, a3);
  }
  return result;
}

uint64_t sub_244CFC034(uint64_t a1, const void *a2, size_t a3)
{
  memset(v8, 0, sizeof(v8));
  if (sub_244CFB808((uint64_t *)a1, (uint64_t)v8, 4u)
    && sub_244CFBA40((uint64_t)v8, a2, a3)
    && sub_244CFB540((uint64_t *)a1))
  {
    return 1;
  }
  unint64_t v7 = (uint64_t *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v7 = (uint64_t *)*v7;
  }
  uint64_t result = 0;
  *((unsigned char *)v7 + 24) |= 2u;
  *(void *)a1 = 0;
  return result;
}

uint64_t sub_244CFC0D4(uint64_t a1, int a2)
{
  memset(v7, 0, sizeof(v7));
  if (sub_244CFB808((uint64_t *)a1, (uint64_t)v7, 1u))
  {
    unint64_t v4 = a2 ? 255 : 0;
    if (sub_244CFBCC4((uint64_t)v7, v4, 1uLL) && sub_244CFB540((uint64_t *)a1)) {
      return 1;
    }
  }
  uint64_t v6 = (uint64_t *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v6 = (uint64_t *)*v6;
  }
  uint64_t result = 0;
  *((unsigned char *)v6 + 24) |= 2u;
  *(void *)a1 = 0;
  return result;
}

uint64_t sub_244CFC170(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_244CFB540(a1);
  if (result)
  {
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t result = sub_244CFC254((uint64_t)&v11, &v10);
    if (result)
    {
      uint64_t result = sub_244CFC254((uint64_t)&v11, &v9);
      if (result)
      {
        if (v10 <= 2)
        {
          uint64_t result = 0;
          if ((v9 <= 0x27 || v10 == 2) && v9 <= 0xFFFFFFFFFFFFFFAFLL)
          {
            uint64_t result = sub_244CFB8D0((uint64_t)a1, v9 + 40 * v10);
            if (result)
            {
              while (v12)
              {
                uint64_t result = sub_244CFC254((uint64_t)&v11, &v10);
                if (result)
                {
                  BOOL v8 = sub_244CFB8D0((uint64_t)a1, v10);
                  uint64_t result = 0;
                  if (v8) {
                    continue;
                  }
                }
                return result;
              }
              return 1;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_244CFC254(uint64_t a1, unint64_t *a2)
{
  BOOL result = sub_244CFC9E0((unsigned __int8 **)a1, a2);
  if (result)
  {
    char v4 = 0;
    if (sub_244CFC650((void *)a1, &v4)) {
      return v4 == 46 && *(void *)(a1 + 8) != 0;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t sub_244CFC2C0(uint64_t a1)
{
  if (!sub_244CFB540((uint64_t *)a1)) {
    return 0;
  }
  int v2 = *(void **)(a1 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32);
    char v4 = (void *)(v3 + *v2);
    uint64_t v5 = v2[1] - v3;
    int v2 = v4;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  *(void *)&long long v22 = v2;
  *((void *)&v22 + 1) = v5;
  if (!v5) {
    return 1;
  }
  unint64_t v6 = 0;
  do
  {
    if (!sub_244CFCB34(&v22, 0, 0, 0))
    {
      sub_244D0B884(14, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", 676);
      return 0;
    }
    ++v6;
  }
  while (*((void *)&v22 + 1));
  if (v6 < 2) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v9 = *(void *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32);
    unint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8) - v9;
    uint64_t v11 = (const void *)(v9 + **(void **)(a1 + 16));
  }
  else
  {
    uint64_t v11 = *(const void **)(a1 + 16);
    unint64_t v10 = *(void *)(a1 + 24);
  }
  uint64_t v12 = sub_244D442F4(v11, v10);
  __int16 v13 = sub_244D44098(v6, 0x10uLL);
  char v14 = v13;
  if (v12) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    *(void *)&long long v22 = v12;
    *((void *)&v22 + 1) = v10;
    uint64_t v16 = v13;
    unint64_t v17 = v6;
    while (sub_244CFCB34(&v22, v16, 0, 0))
    {
      v16 += 2;
      if (!--v17)
      {
        qsort(v14, v6, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_244CFC4AC);
        uint64_t v18 = *(void **)(a1 + 16);
        if (*(unsigned char *)(a1 + 8)) {
          uint64_t v18 = (void *)(*v18 + *(void *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
        }
        uint64_t v19 = 0;
        uint64_t v20 = v14 + 1;
        do
        {
          if (*v20)
          {
            memcpy((char *)v18 + v19, (const void *)*(v20 - 1), *v20);
            size_t v21 = *v20;
          }
          else
          {
            size_t v21 = 0;
          }
          v19 += v21;
          v20 += 2;
          --v6;
        }
        while (v6);
        uint64_t v7 = 1;
        goto LABEL_33;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_33:
  sub_244D440EC(v12);
  sub_244D440EC(v14);
  return v7;
}

uint64_t sub_244CFC4AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v2 >= v3) {
    size_t v4 = *(void *)(a2 + 8);
  }
  else {
    size_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    uint64_t result = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v2 < v3) {
      LODWORD(v6) = -1;
    }
    else {
      LODWORD(v6) = 1;
    }
    if (v2 == v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v6;
    }
    if (!result) {
      return v6;
    }
  }
  else
  {
    if (v2 < v3) {
      unsigned int v7 = -1;
    }
    else {
      unsigned int v7 = 1;
    }
    if (v2 == v3) {
      return 0;
    }
    else {
      return v7;
    }
  }
  return result;
}

uint64_t sub_244CFC510(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  BOOL v3 = v2 >= a2;
  unint64_t v4 = v2 - a2;
  if (!v3) {
    return 0;
  }
  *a1 += a2;
  a1[1] = v4;
  return 1;
}

uint64_t sub_244CFC538(uint64_t a1, uint64_t *a2, void *a3)
{
  sub_244D440EC((void *)*a2);
  *a2 = 0;
  *a3 = 0;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t result = (uint64_t)sub_244D442F4(*(const void **)a1, v6);
    *a2 = result;
    if (!result) {
      return result;
    }
    *a3 = *(void *)(a1 + 8);
  }
  return 1;
}

BOOL sub_244CFC59C(uint64_t a1, void **a2)
{
  if (*a2) {
    sub_244D440EC(*a2);
  }
  unint64_t v4 = sub_244D446C4(*(unsigned char **)a1, *(void *)(a1 + 8));
  *a2 = v4;
  return v4 != 0;
}

BOOL sub_244CFC5E0(uint64_t a1)
{
  size_t v1 = *(void *)(a1 + 8);
  return v1 && memchr(*(void **)a1, 0, v1) != 0;
}

BOOL sub_244CFC618(uint64_t a1, char *a2, uint64_t a3)
{
  return *(void *)(a1 + 8) == a3 && sub_244D441D4(*(char **)a1, a2, a3) == 0;
}

uint64_t sub_244CFC650(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  BOOL v3 = (unsigned char *)(*a1)++;
  a1[1] = v2 - 1;
  *a2 = *v3;
  return 1;
}

uint64_t sub_244CFC680(unsigned __int16 **a1, _WORD *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  BOOL v3 = v2 >= 2;
  unint64_t v4 = v2 - 2;
  if (!v3) {
    return 0;
  }
  unint64_t v6 = (*a1)++;
  a1[1] = (unsigned __int16 *)v4;
  *a2 = bswap32(*v6) >> 16;
  return 1;
}

uint64_t sub_244CFC6B8(uint64_t a1, _WORD *a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v2 >= 2;
  unint64_t v4 = v2 - 2;
  if (!v3) {
    return 0;
  }
  unint64_t v6 = *(_WORD **)a1;
  *(void *)a1 += 2;
  *(void *)(a1 + 8) = v4;
  *a2 = *v6;
  return 1;
}

uint64_t sub_244CFC6E8(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 3;
  if (v2 < 3) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 3;
  a1[1] = v3;
  do
    int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 3);
  *a2 = v6;
  return 1;
}

uint64_t sub_244CFC730(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 4;
  if (v2 < 4) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 4;
  a1[1] = v3;
  do
    int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  *a2 = v6;
  return 1;
}

uint64_t sub_244CFC778(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 4;
  if (v2 < 4) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 4;
  a1[1] = v3;
  do
    unsigned int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  *a2 = bswap32(v6);
  return 1;
}

uint64_t sub_244CFC7C4(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 8;
  if (v2 < 8) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 8;
  a1[1] = v3;
  do
    unint64_t v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 8);
  *a2 = v6;
  return 1;
}

uint64_t sub_244CFC80C(uint64_t *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 8;
  if (v2 < 8) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 8;
  a1[1] = v3;
  do
    unint64_t v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 8);
  *a2 = bswap64(v6);
  return 1;
}

uint64_t sub_244CFC858(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  *a2 = *(unsigned char *)(v2 + *a1 - 1);
  --a1[1];
  return 1;
}

uint64_t sub_244CFC88C(uint64_t *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (!v4) {
    return 0;
  }
  uint64_t v7 = *a1;
  *a1 += a3;
  a1[1] = v5;
  *a2 = v7;
  a2[1] = a3;
  return 1;
}

uint64_t sub_244CFC8B8(uint64_t a1, void *__dst, size_t a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  size_t v4 = v3 - a3;
  if (v3 < a3) {
    return 0;
  }
  unint64_t v6 = *(const void **)a1;
  *(void *)a1 += a3;
  *(void *)(a1 + 8) = v4;
  if (a3) {
    memcpy(__dst, v6, a3);
  }
  return 1;
}

uint64_t sub_244CFC900(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_244CFC908(a1, a2, 1uLL);
}

uint64_t sub_244CFC908(unsigned __int8 **a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (!v4) {
    return 0;
  }
  unint64_t v6 = *a1;
  unint64_t v7 = (unint64_t)&(*a1)[a3];
  *a1 = (unsigned __int8 *)v7;
  a1[1] = (unsigned __int8 *)v5;
  unint64_t v8 = 0;
  if (a3)
  {
    do
    {
      unsigned int v9 = *v6++;
      unint64_t v8 = v9 | (v8 << 8);
      --a3;
    }
    while (a3);
    if (v5 < v8) {
      return 0;
    }
  }
  *a1 = (unsigned __int8 *)(v7 + v8);
  a1[1] = (unsigned __int8 *)(v5 - v8);
  *a2 = v7;
  a2[1] = v8;
  return 1;
}

uint64_t sub_244CFC960(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_244CFC908(a1, a2, 2uLL);
}

uint64_t sub_244CFC968(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_244CFC908(a1, a2, 3uLL);
}

uint64_t sub_244CFC970(uint64_t a1, void *a2, int __c)
{
  size_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v6 = *(void **)a1;
  uint64_t result = (uint64_t)memchr(*(void **)a1, __c, v3);
  if (!result) {
    return result;
  }
  if (v3 < result - (uint64_t)v6) {
    return 0;
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3 - (result - (void)v6);
  *a2 = v6;
  a2[1] = result - (void)v6;
  return 1;
}

BOOL sub_244CFC9E0(unsigned __int8 **a1, unint64_t *a2)
{
  if (!a1[1])
  {
    unint64_t v6 = 0;
    BOOL result = 0;
    goto LABEL_13;
  }
  int v4 = **a1;
  BOOL result = sub_244D44364(v4);
  unint64_t v6 = 0;
  if (!result)
  {
LABEL_13:
    *a2 = v6;
    return result;
  }
  char v7 = 0;
  while (1)
  {
    unint64_t v8 = a1[1];
    if (v8)
    {
      --v8;
      ++*a1;
      a1[1] = v8;
    }
    BOOL result = 0;
    if (v6 > 0x1999999999999999 || ((v6 == 0) & v7) != 0) {
      return result;
    }
    if (__CFADD__(10 * v6, v4 - 48)) {
      return 0;
    }
    unint64_t v6 = 10 * v6 + v4 - 48;
    if (v8)
    {
      int v4 = **a1;
      BOOL v9 = sub_244D44364(v4);
      char v7 = 1;
      if (v9) {
        continue;
      }
    }
    BOOL result = 1;
    goto LABEL_13;
  }
}

uint64_t sub_244CFCAC8(long long *a1, void *a2, _DWORD *a3)
{
  unint64_t v8 = 0;
  uint64_t result = sub_244CFCB44(a1, a2, a3, &v8, 0, 0, 0);
  if (result)
  {
    unint64_t v5 = a2[1];
    BOOL v6 = v5 >= v8;
    uint64_t v7 = v5 - v8;
    if (v6)
    {
      *a2 += v8;
      a2[1] = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_244CFCB34(long long *a1, void *a2, _DWORD *a3, unint64_t *a4)
{
  return sub_244CFCB44(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t sub_244CFCB44(long long *a1, void *a2, _DWORD *a3, unint64_t *a4, _DWORD *a5, _DWORD *a6, int a7)
{
  long long v31 = *a1;
  if (a7)
  {
    *a5 = 0;
    *a6 = 0;
  }
  unsigned int v30 = 0;
  uint64_t result = sub_244CFCE54(&v31, &v30);
  if (result)
  {
    if (a3) {
      *a3 = v30;
    }
    if (!*((void *)&v31 + 1)) {
      return 0;
    }
    BOOL v15 = (unsigned __int8 *)(v31 + 1);
    uint64_t v16 = *(unsigned __int8 *)v31;
    unint64_t v17 = *((void *)a1 + 1) - (*((void *)&v31 + 1) - 1);
    if ((*(char *)v31 & 0x80000000) == 0)
    {
      unint64_t v18 = v17 + v16;
      if (!a4) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    unint64_t v22 = v16 & 0x7F;
    if (a7)
    {
      if (!v22 && (v30 & 0x20000000) != 0)
      {
        if (a4) {
          *a4 = v17;
        }
        *a5 = 1;
        *a6 = 1;
        unint64_t v28 = *((void *)a1 + 1);
        BOOL v24 = v28 >= v17;
        unint64_t v29 = v28 - v17;
        if (!v24) {
          return 0;
        }
        uint64_t v21 = *(void *)a1;
        *(void *)a1 += v17;
        *((void *)a1 + 1) = v29;
        if (a2)
        {
LABEL_13:
          *a2 = v21;
          a2[1] = v17;
        }
        return 1;
      }
    }
    BOOL v24 = (v22 - 5) >= 0xFFFFFFFC && *((void *)&v31 + 1) - 1 >= v22;
    if (!v24) {
      return 0;
    }
    unint64_t v25 = 0;
    unint64_t v26 = v22;
    do
    {
      unsigned int v27 = *v15++;
      unint64_t v25 = v27 | (v25 << 8);
      --v26;
    }
    while (v26);
    if (v25 > 0x7F)
    {
      if (v25 >> (8 * v22 - 8)) {
        goto LABEL_41;
      }
      if (!a7) {
        return 0;
      }
    }
    else
    {
      if (!a7) {
        return 0;
      }
      *a5 = 1;
      if (v25 >> (8 * v22 - 8))
      {
LABEL_41:
        v17 += v22;
        if (!__CFADD__(v25, v17))
        {
          unint64_t v18 = v25 + v17;
          if (!a4)
          {
LABEL_10:
            unint64_t v19 = *((void *)a1 + 1);
            BOOL v24 = v19 >= v18;
            unint64_t v20 = v19 - v18;
            if (!v24) {
              return 0;
            }
            uint64_t v21 = *(void *)a1;
            *(void *)a1 += v18;
            *((void *)a1 + 1) = v20;
            unint64_t v17 = v18;
            if (a2) {
              goto LABEL_13;
            }
            return 1;
          }
LABEL_9:
          *a4 = v17;
          goto LABEL_10;
        }
        return 0;
      }
    }
    *a5 = 1;
    goto LABEL_41;
  }
  return result;
}

uint64_t sub_244CFCD04(long long *a1, void *a2, _DWORD *a3, unint64_t *a4, char *a5, _DWORD *a6)
{
  if (!a5) {
    a5 = &v7;
  }
  return sub_244CFCB44(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t sub_244CFCD34(long long *a1, void *a2, int a3)
{
  return sub_244CFCD3C(a1, a2, a3, 1);
}

uint64_t sub_244CFCD3C(long long *a1, void *a2, int a3, int a4)
{
  unint64_t v17 = 0;
  int v16 = 0;
  v15[0] = 0;
  v15[1] = 0;
  if (a2) {
    char v7 = a2;
  }
  else {
    char v7 = v15;
  }
  int v8 = sub_244CFCB44(a1, v7, &v16, &v17, 0, 0, 0);
  uint64_t result = 0;
  if (v8) {
    BOOL v10 = v16 == a3;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (a4)
    {
      uint64_t v11 = v15;
      if (a2) {
        uint64_t v11 = a2;
      }
      unint64_t v12 = v11[1];
      BOOL v13 = v12 >= v17;
      uint64_t v14 = v12 - v17;
      if (!v13) {
        return 0;
      }
      *v7 += v17;
      v11[1] = v14;
    }
    return 1;
  }
  return result;
}

uint64_t sub_244CFCDFC(long long *a1, void *a2, int a3)
{
  return sub_244CFCD3C(a1, a2, a3, 0);
}

BOOL sub_244CFCE04(long long *a1, int a2)
{
  long long v6 = *a1;
  unsigned int v5 = 0;
  return sub_244CFCE54(&v6, &v5) && v5 == a2;
}

uint64_t sub_244CFCE54(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  int v4 = (unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  int v5 = *v4;
  int v6 = v5 & 0x1F;
  if (v6 != 31
    || (v10 = 0, int v7 = sub_244CFD69C(a1, &v10), result = 0, v7) && (v6 = v10, !(v10 >> 29)) && v10 >= 0x1F)
  {
    unsigned int v9 = v6 | (v5 << 24) & 0xE0000000;
    if ((v9 & 0xDFFFFFFF) != 0)
    {
      *a2 = v9;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_244CFCEF4(long long *a1, unint64_t *a2)
{
  BOOL v15 = 0;
  unint64_t v16 = 0;
  uint64_t result = sub_244CFCD3C(a1, &v15, 2, 1);
  if (!result) {
    return result;
  }
  unint64_t v4 = v16;
  if (!v16) {
    return 0;
  }
  int v5 = v15;
  int v6 = *v15;
  unint64_t v7 = v16 - 1;
  if (v16 == 1)
  {
    BOOL v8 = 0;
    goto LABEL_14;
  }
  int v9 = (char)v15[1];
  if (!*v15 && (v9 & 0x80000000) == 0) {
    return 0;
  }
  BOOL v8 = v6 == 255 && v9 < 0;
LABEL_14:
  uint64_t result = 0;
  if (!v8 && ((char)v6 & 0x80000000) == 0)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    *a2 = 0;
    do
    {
      *a2 = v12 << 8;
      unint64_t v13 = v5[v11] | (v12 << 8);
      *a2 = v13;
      unint64_t v14 = v11 + 1;
      if (v7 == v11) {
        break;
      }
      ++v11;
      unint64_t v12 = v13;
    }
    while (!HIBYTE(v13));
    return v14 >= v4;
  }
  return result;
}

BOOL sub_244CFCFC8(unsigned __int8 **a1)
{
  size_t v1 = a1[1];
  if (!v1) {
    goto LABEL_6;
  }
  unsigned int v2 = **a1;
  unsigned int v3 = v2 >> 7;
  if (v1 == (unsigned __int8 *)1)
  {
    BOOL v4 = 1;
    return !v3 && v4;
  }
  int v5 = (char)(*a1)[1];
  if (**a1 || v5 < 0)
  {
    BOOL v4 = v2 != 255 || v5 >= 0;
  }
  else
  {
LABEL_6:
    unsigned int v3 = 0;
    BOOL v4 = 0;
  }
  return !v3 && v4;
}