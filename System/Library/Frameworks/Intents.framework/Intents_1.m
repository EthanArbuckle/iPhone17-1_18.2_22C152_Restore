uint64_t _INPBPayloadUnsupportedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  _INPBConflictingParameter *v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t result;
  char v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  uint64_t v215;
  char v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  uint64_t v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  uint64_t v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  uint64_t v243;
  char v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char v249;
  uint64_t v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char v256;
  uint64_t v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  uint64_t v271;
  char v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  uint64_t v278;
  char v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char v284;
  uint64_t v285;
  char v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  uint64_t v292;
  char v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  uint64_t v299;
  char v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  uint64_t v306;
  char v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char v312;
  uint64_t v313;
  char v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char v326;
  uint64_t v327;
  char v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;

  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 1299)
      {
        if ((int)v17 > 1149)
        {
          switch((int)v17)
          {
            case 1200:
              v46 = 0;
              v47 = 0;
              v48 = 0;
              while (1)
              {
                v49 = *v3;
                v50 = *(void *)(a2 + v49);
                if (v50 == -1 || v50 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
                *(void *)(a2 + v49) = v50 + 1;
                v48 |= (unint64_t)(v51 & 0x7F) << v46;
                if ((v51 & 0x80) == 0) {
                  goto LABEL_392;
                }
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_395;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_392:
              if (*(unsigned char *)(a2 + *v5)) {
                v52 = 0;
              }
              else {
                v52 = v48;
              }
LABEL_395:
              objc_msgSend(a1, "setRunWorkflowIntentWorkflowUnsupportedReason:", v52, v335, v336);
              continue;
            case 1201:
              v223 = 0;
              v224 = 0;
              v225 = 0;
              while (2)
              {
                v226 = *v3;
                v227 = *(void *)(a2 + v226);
                if (v227 == -1 || v227 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v228 = *(unsigned char *)(*(void *)(a2 + *v7) + v227);
                  *(void *)(a2 + v226) = v227 + 1;
                  v225 |= (unint64_t)(v228 & 0x7F) << v223;
                  if (v228 < 0)
                  {
                    v223 += 7;
                    v14 = v224++ >= 9;
                    if (v14)
                    {
                      v229 = 0;
                      goto LABEL_505;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v229 = 0;
              }
              else {
                v229 = v225;
              }
LABEL_505:
              objc_msgSend(a1, "setStopShareETAIntentRecipientUnsupportedReason:", v229, v335, v336);
              continue;
            case 1202:
              v230 = 0;
              v231 = 0;
              v232 = 0;
              while (2)
              {
                v233 = *v3;
                v234 = *(void *)(a2 + v233);
                if (v234 == -1 || v234 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v235 = *(unsigned char *)(*(void *)(a2 + *v7) + v234);
                  *(void *)(a2 + v233) = v234 + 1;
                  v232 |= (unint64_t)(v235 & 0x7F) << v230;
                  if (v235 < 0)
                  {
                    v230 += 7;
                    v14 = v231++ >= 9;
                    if (v14)
                    {
                      v236 = 0;
                      goto LABEL_510;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v236 = 0;
              }
              else {
                v236 = v232;
              }
LABEL_510:
              objc_msgSend(a1, "setShareETAIntentRecipientUnsupportedReason:", v236, v335, v336);
              continue;
            case 1203:
              v237 = 0;
              v238 = 0;
              v239 = 0;
              while (2)
              {
                v240 = *v3;
                v241 = *(void *)(a2 + v240);
                if (v241 == -1 || v241 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v242 = *(unsigned char *)(*(void *)(a2 + *v7) + v241);
                  *(void *)(a2 + v240) = v241 + 1;
                  v239 |= (unint64_t)(v242 & 0x7F) << v237;
                  if (v242 < 0)
                  {
                    v237 += 7;
                    v14 = v238++ >= 9;
                    if (v14)
                    {
                      v243 = 0;
                      goto LABEL_515;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v243 = 0;
              }
              else {
                v243 = v239;
              }
LABEL_515:
              objc_msgSend(a1, "setReportIncidentIntentIncidentTypeUnsupportedReason:", v243, v335, v336);
              continue;
            default:
              if (v17 == 1150)
              {
                v251 = 0;
                v252 = 0;
                v253 = 0;
                while (1)
                {
                  v254 = *v3;
                  v255 = *(void *)(a2 + v254);
                  if (v255 == -1 || v255 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  v256 = *(unsigned char *)(*(void *)(a2 + *v7) + v255);
                  *(void *)(a2 + v254) = v255 + 1;
                  v253 |= (unint64_t)(v256 & 0x7F) << v251;
                  if ((v256 & 0x80) == 0) {
                    goto LABEL_522;
                  }
                  v251 += 7;
                  v14 = v252++ >= 9;
                  if (v14)
                  {
                    v257 = 0;
                    goto LABEL_525;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_522:
                if (*(unsigned char *)(a2 + *v5)) {
                  v257 = 0;
                }
                else {
                  v257 = v253;
                }
LABEL_525:
                objc_msgSend(a1, "setCreateTimerIntentLabelUnsupportedReason:", v257, v335, v336);
              }
              else
              {
                if (v17 != 1151) {
                  goto LABEL_147;
                }
                v67 = 0;
                v68 = 0;
                v69 = 0;
                while (1)
                {
                  v70 = *v3;
                  v71 = *(void *)(a2 + v70);
                  if (v71 == -1 || v71 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  v72 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
                  *(void *)(a2 + v70) = v71 + 1;
                  v69 |= (unint64_t)(v72 & 0x7F) << v67;
                  if ((v72 & 0x80) == 0) {
                    goto LABEL_402;
                  }
                  v67 += 7;
                  v14 = v68++ >= 9;
                  if (v14)
                  {
                    v73 = 0;
                    goto LABEL_405;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_402:
                if (*(unsigned char *)(a2 + *v5)) {
                  v73 = 0;
                }
                else {
                  v73 = v69;
                }
LABEL_405:
                objc_msgSend(a1, "setSetTimerAttributeIntentTargetTimerUnsupportedReason:", v73, v335, v336);
              }
              break;
          }
          continue;
        }
        if ((int)v17 <= 1009)
        {
          switch(v17)
          {
            case 1:
              v88 = 0;
              v89 = 0;
              v90 = 0;
              while (1)
              {
                v91 = *v3;
                v92 = *(void *)(a2 + v91);
                if (v92 == -1 || v92 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v93 = *(unsigned char *)(*(void *)(a2 + *v7) + v92);
                *(void *)(a2 + v91) = v92 + 1;
                v90 |= (unint64_t)(v93 & 0x7F) << v88;
                if ((v93 & 0x80) == 0) {
                  goto LABEL_372;
                }
                v88 += 7;
                v14 = v89++ >= 9;
                if (v14)
                {
                  v94 = 0;
                  goto LABEL_375;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_372:
              if (*(unsigned char *)(a2 + *v5)) {
                v94 = 0;
              }
              else {
                v94 = v90;
              }
LABEL_375:
              objc_msgSend(a1, "setReason:", v94, v335, v336);
              break;
            case 2:
              v95 = objc_alloc_init(_INPBConflictingParameter);
              v335 = 0;
              v336 = 0;
              if (!PBReaderPlaceMark() || !_INPBConflictingParameterReadFrom(v95, a2))
              {

                return 0;
              }
              PBReaderRecallMark();
              if (v95) {
                objc_msgSend(a1, "addConflictingParameters:", v95, 0, 0);
              }

              break;
            case 0x3E8:
              v53 = 0;
              v54 = 0;
              v55 = 0;
              while (1)
              {
                v56 = *v3;
                v57 = *(void *)(a2 + v56);
                if (v57 == -1 || v57 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
                *(void *)(a2 + v56) = v57 + 1;
                v55 |= (unint64_t)(v58 & 0x7F) << v53;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_367;
                }
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_370;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_367:
              if (*(unsigned char *)(a2 + *v5)) {
                v59 = 0;
              }
              else {
                v59 = v55;
              }
LABEL_370:
              objc_msgSend(a1, "setSendMessageIntentRecipientUnsupportedReason:", v59, v335, v336);
              break;
            default:
              goto LABEL_147;
          }
        }
        else
        {
          switch((int)v17)
          {
            case 1100:
              v25 = 0;
              v26 = 0;
              v27 = 0;
              while (1)
              {
                v28 = *v3;
                v29 = *(void *)(a2 + v28);
                if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
                *(void *)(a2 + v28) = v29 + 1;
                v27 |= (unint64_t)(v30 & 0x7F) << v25;
                if ((v30 & 0x80) == 0) {
                  goto LABEL_537;
                }
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_540;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_537:
              if (*(unsigned char *)(a2 + *v5)) {
                v31 = 0;
              }
              else {
                v31 = v27;
              }
LABEL_540:
              objc_msgSend(a1, "setSendPaymentIntentPayeeUnsupportedReason:", v31, v335, v336);
              break;
            case 1101:
              v272 = 0;
              v273 = 0;
              v274 = 0;
              while (1)
              {
                v275 = *v3;
                v276 = *(void *)(a2 + v275);
                if (v276 == -1 || v276 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v277 = *(unsigned char *)(*(void *)(a2 + *v7) + v276);
                *(void *)(a2 + v275) = v276 + 1;
                v274 |= (unint64_t)(v277 & 0x7F) << v272;
                if ((v277 & 0x80) == 0) {
                  goto LABEL_547;
                }
                v272 += 7;
                v14 = v273++ >= 9;
                if (v14)
                {
                  v278 = 0;
                  goto LABEL_550;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_547:
              if (*(unsigned char *)(a2 + *v5)) {
                v278 = 0;
              }
              else {
                v278 = v274;
              }
LABEL_550:
              objc_msgSend(a1, "setSendPaymentIntentCurrencyAmountUnsupportedReason:", v278, v335, v336);
              break;
            case 1102:
              v279 = 0;
              v280 = 0;
              v281 = 0;
              while (1)
              {
                v282 = *v3;
                v283 = *(void *)(a2 + v282);
                if (v283 == -1 || v283 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v284 = *(unsigned char *)(*(void *)(a2 + *v7) + v283);
                *(void *)(a2 + v282) = v283 + 1;
                v281 |= (unint64_t)(v284 & 0x7F) << v279;
                if ((v284 & 0x80) == 0) {
                  goto LABEL_552;
                }
                v279 += 7;
                v14 = v280++ >= 9;
                if (v14)
                {
                  v285 = 0;
                  goto LABEL_555;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_552:
              if (*(unsigned char *)(a2 + *v5)) {
                v285 = 0;
              }
              else {
                v285 = v281;
              }
LABEL_555:
              objc_msgSend(a1, "setRequestPaymentIntentPayerUnsupportedReason:", v285, v335, v336);
              break;
            case 1103:
              v286 = 0;
              v287 = 0;
              v288 = 0;
              while (1)
              {
                v289 = *v3;
                v290 = *(void *)(a2 + v289);
                if (v290 == -1 || v290 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v291 = *(unsigned char *)(*(void *)(a2 + *v7) + v290);
                *(void *)(a2 + v289) = v290 + 1;
                v288 |= (unint64_t)(v291 & 0x7F) << v286;
                if ((v291 & 0x80) == 0) {
                  goto LABEL_557;
                }
                v286 += 7;
                v14 = v287++ >= 9;
                if (v14)
                {
                  v292 = 0;
                  goto LABEL_560;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_557:
              if (*(unsigned char *)(a2 + *v5)) {
                v292 = 0;
              }
              else {
                v292 = v288;
              }
LABEL_560:
              objc_msgSend(a1, "setRequestPaymentIntentCurrencyAmountUnsupportedReason:", v292, v335, v336);
              break;
            case 1104:
              v293 = 0;
              v294 = 0;
              v295 = 0;
              while (1)
              {
                v296 = *v3;
                v297 = *(void *)(a2 + v296);
                if (v297 == -1 || v297 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v298 = *(unsigned char *)(*(void *)(a2 + *v7) + v297);
                *(void *)(a2 + v296) = v297 + 1;
                v295 |= (unint64_t)(v298 & 0x7F) << v293;
                if ((v298 & 0x80) == 0) {
                  goto LABEL_562;
                }
                v293 += 7;
                v14 = v294++ >= 9;
                if (v14)
                {
                  v299 = 0;
                  goto LABEL_565;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_562:
              if (*(unsigned char *)(a2 + *v5)) {
                v299 = 0;
              }
              else {
                v299 = v295;
              }
LABEL_565:
              objc_msgSend(a1, "setPlayMediaIntentMediaItemsUnsupportedReason:", v299, v335, v336);
              break;
            case 1105:
              v300 = 0;
              v301 = 0;
              v302 = 0;
              while (1)
              {
                v303 = *v3;
                v304 = *(void *)(a2 + v303);
                if (v304 == -1 || v304 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v305 = *(unsigned char *)(*(void *)(a2 + *v7) + v304);
                *(void *)(a2 + v303) = v304 + 1;
                v302 |= (unint64_t)(v305 & 0x7F) << v300;
                if ((v305 & 0x80) == 0) {
                  goto LABEL_567;
                }
                v300 += 7;
                v14 = v301++ >= 9;
                if (v14)
                {
                  v306 = 0;
                  goto LABEL_570;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_567:
              if (*(unsigned char *)(a2 + *v5)) {
                v306 = 0;
              }
              else {
                v306 = v302;
              }
LABEL_570:
              objc_msgSend(a1, "setPlayMediaIntentPlaybackSpeedUnsupportedReason:", v306, v335, v336);
              break;
            case 1106:
              v307 = 0;
              v308 = 0;
              v309 = 0;
              while (1)
              {
                v310 = *v3;
                v311 = *(void *)(a2 + v310);
                if (v311 == -1 || v311 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v312 = *(unsigned char *)(*(void *)(a2 + *v7) + v311);
                *(void *)(a2 + v310) = v311 + 1;
                v309 |= (unint64_t)(v312 & 0x7F) << v307;
                if ((v312 & 0x80) == 0) {
                  goto LABEL_572;
                }
                v307 += 7;
                v14 = v308++ >= 9;
                if (v14)
                {
                  v313 = 0;
                  goto LABEL_575;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_572:
              if (*(unsigned char *)(a2 + *v5)) {
                v313 = 0;
              }
              else {
                v313 = v309;
              }
LABEL_575:
              objc_msgSend(a1, "setSearchForMediaIntentMediaItemsUnsupportedReason:", v313, v335, v336);
              break;
            case 1107:
              v314 = 0;
              v315 = 0;
              v316 = 0;
              while (1)
              {
                v317 = *v3;
                v318 = *(void *)(a2 + v317);
                if (v318 == -1 || v318 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v319 = *(unsigned char *)(*(void *)(a2 + *v7) + v318);
                *(void *)(a2 + v317) = v318 + 1;
                v316 |= (unint64_t)(v319 & 0x7F) << v314;
                if ((v319 & 0x80) == 0) {
                  goto LABEL_577;
                }
                v314 += 7;
                v14 = v315++ >= 9;
                if (v14)
                {
                  v320 = 0;
                  goto LABEL_580;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_577:
              if (*(unsigned char *)(a2 + *v5)) {
                v320 = 0;
              }
              else {
                v320 = v316;
              }
LABEL_580:
              objc_msgSend(a1, "setAddMediaIntentMediaItemsUnsupportedReason:", v320, v335, v336);
              break;
            case 1108:
              v321 = 0;
              v322 = 0;
              v323 = 0;
              while (1)
              {
                v324 = *v3;
                v325 = *(void *)(a2 + v324);
                if (v325 == -1 || v325 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v326 = *(unsigned char *)(*(void *)(a2 + *v7) + v325);
                *(void *)(a2 + v324) = v325 + 1;
                v323 |= (unint64_t)(v326 & 0x7F) << v321;
                if ((v326 & 0x80) == 0) {
                  goto LABEL_582;
                }
                v321 += 7;
                v14 = v322++ >= 9;
                if (v14)
                {
                  v327 = 0;
                  goto LABEL_585;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_582:
              if (*(unsigned char *)(a2 + *v5)) {
                v327 = 0;
              }
              else {
                v327 = v323;
              }
LABEL_585:
              objc_msgSend(a1, "setAddMediaIntentMediaDestinationUnsupportedReason:", v327, v335, v336);
              break;
            case 1109:
              v328 = 0;
              v329 = 0;
              v330 = 0;
              while (1)
              {
                v331 = *v3;
                v332 = *(void *)(a2 + v331);
                if (v332 == -1 || v332 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v333 = *(unsigned char *)(*(void *)(a2 + *v7) + v332);
                *(void *)(a2 + v331) = v332 + 1;
                v330 |= (unint64_t)(v333 & 0x7F) << v328;
                if ((v333 & 0x80) == 0) {
                  goto LABEL_587;
                }
                v328 += 7;
                v14 = v329++ >= 9;
                if (v14)
                {
                  v334 = 0;
                  goto LABEL_590;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_587:
              if (*(unsigned char *)(a2 + *v5)) {
                v334 = 0;
              }
              else {
                v334 = v330;
              }
LABEL_590:
              objc_msgSend(a1, "setUpdateMediaAffinityIntentMediaItemsUnsupportedReason:", v334, v335, v336);
              break;
            default:
              if (v17 != 1010) {
                goto LABEL_147;
              }
              v110 = 0;
              v111 = 0;
              v112 = 0;
              while (1)
              {
                v113 = *v3;
                v114 = *(void *)(a2 + v113);
                if (v114 == -1 || v114 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v115 = *(unsigned char *)(*(void *)(a2 + *v7) + v114);
                *(void *)(a2 + v113) = v114 + 1;
                v112 |= (unint64_t)(v115 & 0x7F) << v110;
                if ((v115 & 0x80) == 0) {
                  goto LABEL_542;
                }
                v110 += 7;
                v14 = v111++ >= 9;
                if (v14)
                {
                  v116 = 0;
                  goto LABEL_545;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_542:
              if (*(unsigned char *)(a2 + *v5)) {
                v116 = 0;
              }
              else {
                v116 = v112;
              }
LABEL_545:
              objc_msgSend(a1, "setSaveHealthSampleIntentRecordDateUnsupportedReason:", v116, v335, v336);
              break;
          }
        }
      }
      else if ((int)v17 <= 1550)
      {
        if ((int)v17 > 1399)
        {
          if ((int)v17 > 1401)
          {
            if (v17 == 1402)
            {
              v265 = 0;
              v266 = 0;
              v267 = 0;
              while (1)
              {
                v268 = *v3;
                v269 = *(void *)(a2 + v268);
                if (v269 == -1 || v269 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v270 = *(unsigned char *)(*(void *)(a2 + *v7) + v269);
                *(void *)(a2 + v268) = v269 + 1;
                v267 |= (unint64_t)(v270 & 0x7F) << v265;
                if ((v270 & 0x80) == 0) {
                  goto LABEL_532;
                }
                v265 += 7;
                v14 = v266++ >= 9;
                if (v14)
                {
                  v271 = 0;
                  goto LABEL_535;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_532:
              if (*(unsigned char *)(a2 + *v5)) {
                v271 = 0;
              }
              else {
                v271 = v267;
              }
LABEL_535:
              objc_msgSend(a1, "setTargetEventUnsupportedReason:", v271, v335, v336);
            }
            else
            {
              if (v17 != 1500)
              {
LABEL_147:
                result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
                continue;
              }
              v81 = 0;
              v82 = 0;
              v83 = 0;
              while (1)
              {
                v84 = *v3;
                v85 = *(void *)(a2 + v84);
                if (v85 == -1 || v85 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v86 = *(unsigned char *)(*(void *)(a2 + *v7) + v85);
                *(void *)(a2 + v84) = v85 + 1;
                v83 |= (unint64_t)(v86 & 0x7F) << v81;
                if ((v86 & 0x80) == 0) {
                  goto LABEL_412;
                }
                v81 += 7;
                v14 = v82++ >= 9;
                if (v14)
                {
                  v87 = 0;
                  goto LABEL_415;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_412:
              if (*(unsigned char *)(a2 + *v5)) {
                v87 = 0;
              }
              else {
                v87 = v83;
              }
LABEL_415:
              objc_msgSend(a1, "setSnoozeTasksIntentTaskUnsupportedReason:", v87, v335, v336);
            }
          }
          else if (v17 == 1400)
          {
            v244 = 0;
            v245 = 0;
            v246 = 0;
            while (1)
            {
              v247 = *v3;
              v248 = *(void *)(a2 + v247);
              if (v248 == -1 || v248 >= *(void *)(a2 + *v4)) {
                break;
              }
              v249 = *(unsigned char *)(*(void *)(a2 + *v7) + v248);
              *(void *)(a2 + v247) = v248 + 1;
              v246 |= (unint64_t)(v249 & 0x7F) << v244;
              if ((v249 & 0x80) == 0) {
                goto LABEL_517;
              }
              v244 += 7;
              v14 = v245++ >= 9;
              if (v14)
              {
                v250 = 0;
                goto LABEL_520;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_517:
            if (*(unsigned char *)(a2 + *v5)) {
              v250 = 0;
            }
            else {
              v250 = v246;
            }
LABEL_520:
            objc_msgSend(a1, "setDateTimeRangeUnsupportedReason:", v250, v335, v336);
          }
          else
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            while (1)
            {
              v63 = *v3;
              v64 = *(void *)(a2 + v63);
              if (v64 == -1 || v64 >= *(void *)(a2 + *v4)) {
                break;
              }
              v65 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
              *(void *)(a2 + v63) = v64 + 1;
              v62 |= (unint64_t)(v65 & 0x7F) << v60;
              if ((v65 & 0x80) == 0) {
                goto LABEL_397;
              }
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                v66 = 0;
                goto LABEL_400;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_397:
            if (*(unsigned char *)(a2 + *v5)) {
              v66 = 0;
            }
            else {
              v66 = v62;
            }
LABEL_400:
            objc_msgSend(a1, "setParticipantUnsupportedReason:", v66, v335, v336);
          }
        }
        else
        {
          switch((int)v17)
          {
            case 1300:
              v32 = 0;
              v33 = 0;
              v34 = 0;
              while (2)
              {
                v35 = *v3;
                v36 = *(void *)(a2 + v35);
                if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
                  *(void *)(a2 + v35) = v36 + 1;
                  v34 |= (unint64_t)(v37 & 0x7F) << v32;
                  if (v37 < 0)
                  {
                    v32 += 7;
                    v14 = v33++ >= 9;
                    if (v14)
                    {
                      v38 = 0;
                      goto LABEL_385;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v38 = 0;
              }
              else {
                v38 = v34;
              }
LABEL_385:
              objc_msgSend(a1, "setStartCallIntentContactsUnsupportedReason:", v38, v335, v336);
              continue;
            case 1301:
              v160 = 0;
              v161 = 0;
              v162 = 0;
              while (2)
              {
                v163 = *v3;
                v164 = *(void *)(a2 + v163);
                if (v164 == -1 || v164 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v165 = *(unsigned char *)(*(void *)(a2 + *v7) + v164);
                  *(void *)(a2 + v163) = v164 + 1;
                  v162 |= (unint64_t)(v165 & 0x7F) << v160;
                  if (v165 < 0)
                  {
                    v160 += 7;
                    v14 = v161++ >= 9;
                    if (v14)
                    {
                      v166 = 0;
                      goto LABEL_460;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v166 = 0;
              }
              else {
                v166 = v162;
              }
LABEL_460:
              objc_msgSend(a1, "setStartCallIntentCallCapabilityUnsupportedReason:", v166, v335, v336);
              continue;
            case 1302:
              v167 = 0;
              v168 = 0;
              v169 = 0;
              while (2)
              {
                v170 = *v3;
                v171 = *(void *)(a2 + v170);
                if (v171 == -1 || v171 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v172 = *(unsigned char *)(*(void *)(a2 + *v7) + v171);
                  *(void *)(a2 + v170) = v171 + 1;
                  v169 |= (unint64_t)(v172 & 0x7F) << v167;
                  if (v172 < 0)
                  {
                    v167 += 7;
                    v14 = v168++ >= 9;
                    if (v14)
                    {
                      v173 = 0;
                      goto LABEL_465;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v173 = 0;
              }
              else {
                v173 = v169;
              }
LABEL_465:
              objc_msgSend(a1, "setStartCallIntentPreferredCallProviderUnsupportedReason:", v173, v335, v336);
              continue;
            case 1303:
              v174 = 0;
              v175 = 0;
              v176 = 0;
              while (2)
              {
                v177 = *v3;
                v178 = *(void *)(a2 + v177);
                if (v178 == -1 || v178 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v179 = *(unsigned char *)(*(void *)(a2 + *v7) + v178);
                  *(void *)(a2 + v177) = v178 + 1;
                  v176 |= (unint64_t)(v179 & 0x7F) << v174;
                  if (v179 < 0)
                  {
                    v174 += 7;
                    v14 = v175++ >= 9;
                    if (v14)
                    {
                      v180 = 0;
                      goto LABEL_470;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v180 = 0;
              }
              else {
                v180 = v176;
              }
LABEL_470:
              objc_msgSend(a1, "setStartCallIntentCallRecordToCallBackUnsupportedReason:", v180, v335, v336);
              continue;
            case 1304:
              v181 = 0;
              v182 = 0;
              v183 = 0;
              while (2)
              {
                v184 = *v3;
                v185 = *(void *)(a2 + v184);
                if (v185 == -1 || v185 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  v186 = *(unsigned char *)(*(void *)(a2 + *v7) + v185);
                  *(void *)(a2 + v184) = v185 + 1;
                  v183 |= (unint64_t)(v186 & 0x7F) << v181;
                  if (v186 < 0)
                  {
                    v181 += 7;
                    v14 = v182++ >= 9;
                    if (v14)
                    {
                      v187 = 0;
                      goto LABEL_475;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                v187 = 0;
              }
              else {
                v187 = v183;
              }
LABEL_475:
              objc_msgSend(a1, "setJoinCallIntentGroupConversationUnsupportedReason:", v187, v335, v336);
              continue;
            case 1305:
              v188 = 0;
              v189 = 0;
              v190 = 0;
              break;
            default:
              goto LABEL_147;
          }
          while (1)
          {
            v191 = *v3;
            v192 = *(void *)(a2 + v191);
            if (v192 == -1 || v192 >= *(void *)(a2 + *v4)) {
              break;
            }
            v193 = *(unsigned char *)(*(void *)(a2 + *v7) + v192);
            *(void *)(a2 + v191) = v192 + 1;
            v190 |= (unint64_t)(v193 & 0x7F) << v188;
            if ((v193 & 0x80) == 0) {
              goto LABEL_477;
            }
            v188 += 7;
            v14 = v189++ >= 9;
            if (v14)
            {
              v194 = 0;
              goto LABEL_480;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_477:
          if (*(unsigned char *)(a2 + *v5)) {
            v194 = 0;
          }
          else {
            v194 = v190;
          }
LABEL_480:
          objc_msgSend(a1, "setAddCallParticipantIntentParticipantsUnsupportedReason:", v194, v335, v336);
        }
      }
      else if ((int)v17 > 1600)
      {
        if ((int)v17 > 1649)
        {
          if (v17 == 1650)
          {
            v258 = 0;
            v259 = 0;
            v260 = 0;
            while (1)
            {
              v261 = *v3;
              v262 = *(void *)(a2 + v261);
              if (v262 == -1 || v262 >= *(void *)(a2 + *v4)) {
                break;
              }
              v263 = *(unsigned char *)(*(void *)(a2 + *v7) + v262);
              *(void *)(a2 + v261) = v262 + 1;
              v260 |= (unint64_t)(v263 & 0x7F) << v258;
              if ((v263 & 0x80) == 0) {
                goto LABEL_527;
              }
              v258 += 7;
              v14 = v259++ >= 9;
              if (v14)
              {
                v264 = 0;
                goto LABEL_530;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_527:
            if (*(unsigned char *)(a2 + *v5)) {
              v264 = 0;
            }
            else {
              v264 = v260;
            }
LABEL_530:
            objc_msgSend(a1, "setFindDeviceAndPlaySoundIntentDeviceUnsupportedReason:", v264, v335, v336);
          }
          else
          {
            if (v17 != 2000) {
              goto LABEL_147;
            }
            v74 = 0;
            v75 = 0;
            v76 = 0;
            while (1)
            {
              v77 = *v3;
              v78 = *(void *)(a2 + v77);
              if (v78 == -1 || v78 >= *(void *)(a2 + *v4)) {
                break;
              }
              v79 = *(unsigned char *)(*(void *)(a2 + *v7) + v78);
              *(void *)(a2 + v77) = v78 + 1;
              v76 |= (unint64_t)(v79 & 0x7F) << v74;
              if ((v79 & 0x80) == 0) {
                goto LABEL_407;
              }
              v74 += 7;
              v14 = v75++ >= 9;
              if (v14)
              {
                v80 = 0;
                goto LABEL_410;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_407:
            if (*(unsigned char *)(a2 + *v5)) {
              v80 = 0;
            }
            else {
              v80 = v76;
            }
LABEL_410:
            objc_msgSend(a1, "setCustomUnsupportedReason:", v80, v335, v336);
          }
        }
        else
        {
          switch((int)v17)
          {
            case 1621:
              v39 = 0;
              v40 = 0;
              v41 = 0;
              while (1)
              {
                v42 = *v3;
                v43 = *(void *)(a2 + v42);
                if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
                *(void *)(a2 + v42) = v43 + 1;
                v41 |= (unint64_t)(v44 & 0x7F) << v39;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_387;
                }
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_390;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_387:
              if (*(unsigned char *)(a2 + *v5)) {
                v45 = 0;
              }
              else {
                v45 = v41;
              }
LABEL_390:
              objc_msgSend(a1, "setChangeAlarmStatusIntentAlarmsUnsupportedReason:", v45, v335, v336);
              break;
            case 1622:
              v195 = 0;
              v196 = 0;
              v197 = 0;
              while (1)
              {
                v198 = *v3;
                v199 = *(void *)(a2 + v198);
                if (v199 == -1 || v199 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v200 = *(unsigned char *)(*(void *)(a2 + *v7) + v199);
                *(void *)(a2 + v198) = v199 + 1;
                v197 |= (unint64_t)(v200 & 0x7F) << v195;
                if ((v200 & 0x80) == 0) {
                  goto LABEL_482;
                }
                v195 += 7;
                v14 = v196++ >= 9;
                if (v14)
                {
                  v201 = 0;
                  goto LABEL_485;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_482:
              if (*(unsigned char *)(a2 + *v5)) {
                v201 = 0;
              }
              else {
                v201 = v197;
              }
LABEL_485:
              objc_msgSend(a1, "setUpdateAlarmIntentAlarmUnsupportedReason:", v201, v335, v336);
              break;
            case 1623:
              v202 = 0;
              v203 = 0;
              v204 = 0;
              while (1)
              {
                v205 = *v3;
                v206 = *(void *)(a2 + v205);
                if (v206 == -1 || v206 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v207 = *(unsigned char *)(*(void *)(a2 + *v7) + v206);
                *(void *)(a2 + v205) = v206 + 1;
                v204 |= (unint64_t)(v207 & 0x7F) << v202;
                if ((v207 & 0x80) == 0) {
                  goto LABEL_487;
                }
                v202 += 7;
                v14 = v203++ >= 9;
                if (v14)
                {
                  v208 = 0;
                  goto LABEL_490;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_487:
              if (*(unsigned char *)(a2 + *v5)) {
                v208 = 0;
              }
              else {
                v208 = v204;
              }
LABEL_490:
              objc_msgSend(a1, "setDeleteAlarmIntentAlarmsUnsupportedReason:", v208, v335, v336);
              break;
            case 1624:
              v209 = 0;
              v210 = 0;
              v211 = 0;
              while (1)
              {
                v212 = *v3;
                v213 = *(void *)(a2 + v212);
                if (v213 == -1 || v213 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v214 = *(unsigned char *)(*(void *)(a2 + *v7) + v213);
                *(void *)(a2 + v212) = v213 + 1;
                v211 |= (unint64_t)(v214 & 0x7F) << v209;
                if ((v214 & 0x80) == 0) {
                  goto LABEL_492;
                }
                v209 += 7;
                v14 = v210++ >= 9;
                if (v14)
                {
                  v215 = 0;
                  goto LABEL_495;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_492:
              if (*(unsigned char *)(a2 + *v5)) {
                v215 = 0;
              }
              else {
                v215 = v211;
              }
LABEL_495:
              objc_msgSend(a1, "setSnoozeAlarmIntentAlarmsUnsupportedReason:", v215, v335, v336);
              break;
            case 1625:
              v216 = 0;
              v217 = 0;
              v218 = 0;
              while (1)
              {
                v219 = *v3;
                v220 = *(void *)(a2 + v219);
                if (v220 == -1 || v220 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v221 = *(unsigned char *)(*(void *)(a2 + *v7) + v220);
                *(void *)(a2 + v219) = v220 + 1;
                v218 |= (unint64_t)(v221 & 0x7F) << v216;
                if ((v221 & 0x80) == 0) {
                  goto LABEL_497;
                }
                v216 += 7;
                v14 = v217++ >= 9;
                if (v14)
                {
                  v222 = 0;
                  goto LABEL_500;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_497:
              if (*(unsigned char *)(a2 + *v5)) {
                v222 = 0;
              }
              else {
                v222 = v218;
              }
LABEL_500:
              objc_msgSend(a1, "setSearchAlarmIntentAlarmsUnsupportedReason:", v222, v335, v336);
              break;
            default:
              if (v17 != 1601) {
                goto LABEL_147;
              }
              v103 = 0;
              v104 = 0;
              v105 = 0;
              while (1)
              {
                v106 = *v3;
                v107 = *(void *)(a2 + v106);
                if (v107 == -1 || v107 >= *(void *)(a2 + *v4)) {
                  break;
                }
                v108 = *(unsigned char *)(*(void *)(a2 + *v7) + v107);
                *(void *)(a2 + v106) = v107 + 1;
                v105 |= (unint64_t)(v108 & 0x7F) << v103;
                if ((v108 & 0x80) == 0) {
                  goto LABEL_422;
                }
                v103 += 7;
                v14 = v104++ >= 9;
                if (v14)
                {
                  v109 = 0;
                  goto LABEL_425;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_422:
              if (*(unsigned char *)(a2 + *v5)) {
                v109 = 0;
              }
              else {
                v109 = v105;
              }
LABEL_425:
              objc_msgSend(a1, "setSendAnnouncementIntentAnnouncementUnsupportedReason:", v109, v335, v336);
              break;
          }
        }
      }
      else
      {
        switch((int)v17)
        {
          case 1551:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_377;
              }
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_380;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_377:
            if (*(unsigned char *)(a2 + *v5)) {
              v24 = 0;
            }
            else {
              v24 = v20;
            }
LABEL_380:
            objc_msgSend(a1, "setDeleteTasksIntentTaskUnsupportedReason:", v24, v335, v336);
            break;
          case 1552:
            v118 = 0;
            v119 = 0;
            v120 = 0;
            while (1)
            {
              v121 = *v3;
              v122 = *(void *)(a2 + v121);
              if (v122 == -1 || v122 >= *(void *)(a2 + *v4)) {
                break;
              }
              v123 = *(unsigned char *)(*(void *)(a2 + *v7) + v122);
              *(void *)(a2 + v121) = v122 + 1;
              v120 |= (unint64_t)(v123 & 0x7F) << v118;
              if ((v123 & 0x80) == 0) {
                goto LABEL_427;
              }
              v118 += 7;
              v14 = v119++ >= 9;
              if (v14)
              {
                v124 = 0;
                goto LABEL_430;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_427:
            if (*(unsigned char *)(a2 + *v5)) {
              v124 = 0;
            }
            else {
              v124 = v120;
            }
LABEL_430:
            objc_msgSend(a1, "setDeleteTasksIntentTaskListUnsupportedReason:", v124, v335, v336);
            break;
          case 1553:
            v125 = 0;
            v126 = 0;
            v127 = 0;
            while (1)
            {
              v128 = *v3;
              v129 = *(void *)(a2 + v128);
              if (v129 == -1 || v129 >= *(void *)(a2 + *v4)) {
                break;
              }
              v130 = *(unsigned char *)(*(void *)(a2 + *v7) + v129);
              *(void *)(a2 + v128) = v129 + 1;
              v127 |= (unint64_t)(v130 & 0x7F) << v125;
              if ((v130 & 0x80) == 0) {
                goto LABEL_432;
              }
              v125 += 7;
              v14 = v126++ >= 9;
              if (v14)
              {
                v131 = 0;
                goto LABEL_435;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_432:
            if (*(unsigned char *)(a2 + *v5)) {
              v131 = 0;
            }
            else {
              v131 = v127;
            }
LABEL_435:
            objc_msgSend(a1, "setAddTasksIntentTemporalEventTriggerUnsupportedReason:", v131, v335, v336);
            break;
          case 1554:
            v132 = 0;
            v133 = 0;
            v134 = 0;
            while (1)
            {
              v135 = *v3;
              v136 = *(void *)(a2 + v135);
              if (v136 == -1 || v136 >= *(void *)(a2 + *v4)) {
                break;
              }
              v137 = *(unsigned char *)(*(void *)(a2 + *v7) + v136);
              *(void *)(a2 + v135) = v136 + 1;
              v134 |= (unint64_t)(v137 & 0x7F) << v132;
              if ((v137 & 0x80) == 0) {
                goto LABEL_437;
              }
              v132 += 7;
              v14 = v133++ >= 9;
              if (v14)
              {
                v138 = 0;
                goto LABEL_440;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_437:
            if (*(unsigned char *)(a2 + *v5)) {
              v138 = 0;
            }
            else {
              v138 = v134;
            }
LABEL_440:
            objc_msgSend(a1, "setAddTasksIntentContactEventTriggerUnsupportedReason:", v138, v335, v336);
            break;
          case 1555:
            v139 = 0;
            v140 = 0;
            v141 = 0;
            while (1)
            {
              v142 = *v3;
              v143 = *(void *)(a2 + v142);
              if (v143 == -1 || v143 >= *(void *)(a2 + *v4)) {
                break;
              }
              v144 = *(unsigned char *)(*(void *)(a2 + *v7) + v143);
              *(void *)(a2 + v142) = v143 + 1;
              v141 |= (unint64_t)(v144 & 0x7F) << v139;
              if ((v144 & 0x80) == 0) {
                goto LABEL_442;
              }
              v139 += 7;
              v14 = v140++ >= 9;
              if (v14)
              {
                v145 = 0;
                goto LABEL_445;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_442:
            if (*(unsigned char *)(a2 + *v5)) {
              v145 = 0;
            }
            else {
              v145 = v141;
            }
LABEL_445:
            objc_msgSend(a1, "setAddTasksIntentTargetTaskListMembersUnsupportedReason:", v145, v335, v336);
            break;
          case 1556:
            v146 = 0;
            v147 = 0;
            v148 = 0;
            while (1)
            {
              v149 = *v3;
              v150 = *(void *)(a2 + v149);
              if (v150 == -1 || v150 >= *(void *)(a2 + *v4)) {
                break;
              }
              v151 = *(unsigned char *)(*(void *)(a2 + *v7) + v150);
              *(void *)(a2 + v149) = v150 + 1;
              v148 |= (unint64_t)(v151 & 0x7F) << v146;
              if ((v151 & 0x80) == 0) {
                goto LABEL_447;
              }
              v146 += 7;
              v14 = v147++ >= 9;
              if (v14)
              {
                v152 = 0;
                goto LABEL_450;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_447:
            if (*(unsigned char *)(a2 + *v5)) {
              v152 = 0;
            }
            else {
              v152 = v148;
            }
LABEL_450:
            objc_msgSend(a1, "setSetTaskAttributeIntentTemporalEventTriggerUnsupportedReason:", v152, v335, v336);
            break;
          case 1557:
            v153 = 0;
            v154 = 0;
            v155 = 0;
            while (1)
            {
              v156 = *v3;
              v157 = *(void *)(a2 + v156);
              if (v157 == -1 || v157 >= *(void *)(a2 + *v4)) {
                break;
              }
              v158 = *(unsigned char *)(*(void *)(a2 + *v7) + v157);
              *(void *)(a2 + v156) = v157 + 1;
              v155 |= (unint64_t)(v158 & 0x7F) << v153;
              if ((v158 & 0x80) == 0) {
                goto LABEL_452;
              }
              v153 += 7;
              v14 = v154++ >= 9;
              if (v14)
              {
                v159 = 0;
                goto LABEL_455;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_452:
            if (*(unsigned char *)(a2 + *v5)) {
              v159 = 0;
            }
            else {
              v159 = v155;
            }
LABEL_455:
            objc_msgSend(a1, "setSetTaskAttributeIntentContactEventTriggerUnsupportedReason:", v159, v335, v336);
            break;
          default:
            if (v17 != 1600) {
              goto LABEL_147;
            }
            v96 = 0;
            v97 = 0;
            v98 = 0;
            while (1)
            {
              v99 = *v3;
              v100 = *(void *)(a2 + v99);
              if (v100 == -1 || v100 >= *(void *)(a2 + *v4)) {
                break;
              }
              v101 = *(unsigned char *)(*(void *)(a2 + *v7) + v100);
              *(void *)(a2 + v99) = v100 + 1;
              v98 |= (unint64_t)(v101 & 0x7F) << v96;
              if ((v101 & 0x80) == 0) {
                goto LABEL_417;
              }
              v96 += 7;
              v14 = v97++ >= 9;
              if (v14)
              {
                v102 = 0;
                goto LABEL_420;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_417:
            if (*(unsigned char *)(a2 + *v5)) {
              v102 = 0;
            }
            else {
              v102 = v98;
            }
LABEL_420:
            objc_msgSend(a1, "setSendAnnouncementIntentRecipientsUnsupportedReason:", v102, v335, v336);
            break;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INCarDefrosterHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCarDefrosterGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INCarDefrosterGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INCarDefrosterGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E551AC60[a1 - 1];
  }
}

uint64_t INCarDefrosterWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"front"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"rear"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"all"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCarDefrosterGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = @"all";
      goto LABEL_7;
    case 2:
      v4 = @"rear";
      goto LABEL_7;
    case 1:
      v4 = @"front";
LABEL_7:
      v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  v5 = 0;
LABEL_9:

  return v5;
}

uint64_t _INPBTemporalEventTriggerReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBActivityReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addActivityDescriptors:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setActivityType:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBAppNamesReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          v17 = PBReaderReadString();
          [a1 setAppName:v17];
          goto LABEL_25;
        case 2u:
          v17 = PBReaderReadString();
          [a1 setDisplayName:v17];
          goto LABEL_25;
        case 3u:
          v17 = PBReaderReadString();
          [a1 setSpotlightName:v17];
          goto LABEL_25;
        case 4u:
          v17 = PBReaderReadString();
          [a1 setAxSpokenName:v17];
LABEL_25:

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18CD4ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__68186(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__68187(uint64_t a1)
{
}

void sub_18CD4EFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD4F2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

id _INSchemasByIdentifierWithSchemaURLsByIdentifier(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    uint64_t v2 = objc_opt_new();
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v23 = v1;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v33 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v32 + 1) + 8 * i);
          unsigned int v9 = [v3 objectForKeyedSubscript:v8];
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          uint64_t v10 = [v9 countByEnumeratingWithState:&v28 objects:v37 count:16];
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = *(void *)v29;
            do
            {
              for (uint64_t j = 0; j != v11; ++j)
              {
                if (*(void *)v29 != v12) {
                  objc_enumerationMutation(v9);
                }
                [*(id *)(*((void *)&v28 + 1) + 8 * j) startAccessingSecurityScopedResource];
              }
              uint64_t v11 = [v9 countByEnumeratingWithState:&v28 objects:v37 count:16];
            }
            while (v11);
          }
          if ([v9 count])
          {
            v14 = [v9 allObjects];
            int v15 = +[INSchema _schemaWithIntentDefinitionURLs:v14 bundleIdentifier:v8 mainBundleIdentifier:v8 contentOptions:31];
            [v2 setObject:v15 forKeyedSubscript:v8];
          }
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          id v16 = v9;
          uint64_t v17 = [v16 countByEnumeratingWithState:&v24 objects:v36 count:16];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = *(void *)v25;
            do
            {
              for (uint64_t k = 0; k != v18; ++k)
              {
                if (*(void *)v25 != v19) {
                  objc_enumerationMutation(v16);
                }
                [*(id *)(*((void *)&v24 + 1) + 8 * k) stopAccessingSecurityScopedResource];
              }
              uint64_t v18 = [v16 countByEnumeratingWithState:&v24 objects:v36 count:16];
            }
            while (v18);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v5);
    }

    if ([v2 count]) {
      v21 = (void *)[v2 copy];
    }
    else {
      v21 = 0;
    }

    id v1 = v23;
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

void sub_18CD4FBAC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18CD50EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t _INPBMoveFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_60;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_62;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_60:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_62:
        [a1 setOverwrite:v20 != 0];
        goto LABEL_77;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v26 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_66:
        objc_msgSend(a1, "setSuccess:", v26 != 0, v44, v45);
        goto LABEL_77;
      case 3u:
        if (v16 == 2)
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v33 = 0;
            while (1)
            {
              uint64_t v34 = *v3;
              unint64_t v35 = *(void *)(a2 + v34);
              if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_47;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          while (1)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v14 = v39++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_76;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
        goto LABEL_77;
      case 4u:
        v37 = objc_alloc_init(_INPBString);
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v37, a2)) {
          goto LABEL_80;
        }
        PBReaderRecallMark();
        if (v37) {
          objc_msgSend(a1, "addEntityName:", v37, 0, 0);
        }
        goto LABEL_58;
      case 5u:
        v37 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v37, a2) & 1) == 0) {
          goto LABEL_80;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSourceName:", v37, 0, 0);
        goto LABEL_58;
      case 6u:
        v37 = objc_alloc_init(_INPBString);
        if PBReaderPlaceMark() && (_INPBStringReadFrom(v37, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDestinationName:", v37, 0, 0);
LABEL_58:

LABEL_77:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_80:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_77;
    }
  }
}

INPaymentRecord *INIntentSlotValueTransformFromPaymentRecord(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INPaymentRecord alloc];
    uint64_t v20 = [v1 payee];
    id v3 = INIntentSlotValueTransformFromContact(v20);
    unsigned int v19 = [v1 payer];
    uint64_t v4 = INIntentSlotValueTransformFromContact(v19);
    char v18 = [v1 currencyAmount];
    int v16 = INIntentSlotValueTransformFromCurrencyAmount(v18);
    uint64_t v17 = [v1 paymentMethod];
    uint64_t v5 = INIntentSlotValueTransformFromPaymentMethodValue(v17);
    uint64_t v6 = [v1 note];
    v7 = INIntentSlotValueTransformFromString(v6);
    int v8 = [v1 hasStatus];
    uint64_t v9 = [v1 status] - 1;
    if (v9 <= 4) {
      uint64_t v10 = v9 + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v8) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = [v1 feeAmount];

    char v13 = INIntentSlotValueTransformFromCurrencyAmount(v12);
    BOOL v14 = [(INPaymentRecord *)v2 initWithPayee:v3 payer:v4 currencyAmount:v16 paymentMethod:v5 note:v7 status:v11 feeAmount:v13];
  }
  else
  {
    BOOL v14 = 0;
  }

  return v14;
}

_INPBPaymentRecord *INIntentSlotValueTransformToPaymentRecord(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBPaymentRecord);
    id v3 = [v1 payee];
    uint64_t v4 = INIntentSlotValueTransformToContact(v3);
    [(_INPBPaymentRecord *)v2 setPayee:v4];

    uint64_t v5 = [v1 payer];
    uint64_t v6 = INIntentSlotValueTransformToContact(v5);
    [(_INPBPaymentRecord *)v2 setPayer:v6];

    v7 = [v1 currencyAmount];
    int v8 = INIntentSlotValueTransformToCurrencyAmount(v7);
    [(_INPBPaymentRecord *)v2 setCurrencyAmount:v8];

    uint64_t v9 = [v1 note];
    uint64_t v10 = INIntentSlotValueTransformToString(v9);
    [(_INPBPaymentRecord *)v2 setNote:v10];

    unint64_t v11 = [v1 status] - 1;
    if (v11 < 5) {
      uint64_t v12 = (v11 + 1);
    }
    else {
      uint64_t v12 = 0x7FFFFFFFLL;
    }
    [(_INPBPaymentRecord *)v2 setStatus:v12];
    char v13 = [v1 paymentMethod];
    BOOL v14 = INIntentSlotValueTransformToPaymentMethodValue(v13);
    [(_INPBPaymentRecord *)v2 setPaymentMethod:v14];

    int v15 = [v1 feeAmount];

    int v16 = INIntentSlotValueTransformToCurrencyAmount(v15);
    [(_INPBPaymentRecord *)v2 setFeeAmount:v16];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromPaymentRecords(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformFromPaymentRecord(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPaymentRecords(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformToPaymentRecord(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPaymentRecordFromPaymentRecord(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t __Block_byref_object_copy__68995(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__68996(uint64_t a1)
{
}

uint64_t _INPBSearchCallHistoryIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_135;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_53;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_99:
        objc_msgSend(a1, "setCallType:", v25, v76, v77);
        goto LABEL_132;
      case 3u:
        char v18 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_135;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetContact:", v18, 0, 0);
        goto LABEL_53;
      case 4u:
        if (v16 != 2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v60 = 0;
          while (1)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4)) {
              goto LABEL_130;
            }
            char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
            *(void *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v14 = v59++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_131;
          }
        }
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_46;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
          PBRepeatedInt32Add();
        }
        goto LABEL_80;
      case 5u:
        char v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_135;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateCreated:", v18, 0, 0);
        goto LABEL_53;
      case 6u:
        char v18 = objc_alloc_init(_INPBContact);
        if PBReaderPlaceMark() && (_INPBContactReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRecipient:", v18, 0, 0);
LABEL_53:

LABEL_132:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_135:

        return 0;
      case 7u:
        if (v16 != 2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v66 = 0;
          while (1)
          {
            uint64_t v67 = *v3;
            unint64_t v68 = *(void *)(a2 + v67);
            if (v68 == -1 || v68 >= *(void *)(a2 + *v4)) {
              goto LABEL_130;
            }
            char v69 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
            *(void *)(a2 + v67) = v68 + 1;
            v66 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              BOOL v14 = v65++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_131;
          }
        }
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_66;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_66:
          PBRepeatedInt32Add();
        }
        goto LABEL_80;
      case 8u:
        if (v16 == 2)
        {
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            while (1)
            {
              uint64_t v42 = *v3;
              unint64_t v43 = *(void *)(a2 + v42);
              if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_79;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_79:
            PBRepeatedInt32Add();
          }
LABEL_80:
          PBReaderRecallMark();
        }
        else
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v72 = 0;
          while (1)
          {
            uint64_t v73 = *v3;
            unint64_t v74 = *(void *)(a2 + v73);
            if (v74 == -1 || v74 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v75 = *(unsigned char *)(*(void *)(a2 + *v7) + v74);
            *(void *)(a2 + v73) = v74 + 1;
            v72 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              BOOL v14 = v71++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_131;
          }
LABEL_130:
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_131:
          PBRepeatedInt32Add();
        }
        goto LABEL_132;
      case 9u:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        while (2)
        {
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v14 = v46++ >= 9;
              if (v14)
              {
                uint64_t v51 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v51 = 0;
        }
        else {
          uint64_t v51 = v47;
        }
LABEL_104:
        objc_msgSend(a1, "setPreferredCallProvider:", v51, v76, v77);
        goto LABEL_132;
      case 0xAu:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        while (2)
        {
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v14 = v53++ >= 9;
              if (v14)
              {
                uint64_t v54 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v54 = 0;
        }
LABEL_108:
        [a1 setUnseen:v54 != 0];
        goto LABEL_132;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_132;
    }
  }
}

uint64_t _INPBShareDestinationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v24 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContact:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setDeviceType:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBCopyFileIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_77;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_58;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_65:
        objc_msgSend(a1, "setEntityType:", v25, v40, v41);
        goto LABEL_59;
      case 3u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_77;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v17, 0, 0);
        goto LABEL_58;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_70:
        objc_msgSend(a1, "setSourceType:", v32, v40, v41);
        goto LABEL_59;
      case 5u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_77;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSourceName:", v17, 0, 0);
        goto LABEL_58;
      case 6u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v35;
        }
LABEL_75:
        objc_msgSend(a1, "setDestinationType:", v39, v40, v41);
        goto LABEL_59;
      case 7u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_77;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDestinationName:", v17, 0, 0);
        goto LABEL_58;
      case 8u:
        char v17 = objc_alloc_init(_INPBFileProperty);
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        if (PBReaderPlaceMark() && _INPBFilePropertyReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addProperties:", v17, 0, 0);
          }
LABEL_58:

LABEL_59:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_77:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_59;
    }
  }
}

uint64_t INCallAudioRouteHasBackingType(uint64_t a1)
{
  BOOL v1 = a1 == 2 || a1 == 1;
  return a1 == 1000 || v1;
}

uint64_t INCallAudioRouteGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    unsigned int v1 = 3;
  }
  if (a1 == 1000) {
    return 4;
  }
  else {
    return v1;
  }
}

uint64_t INCallAudioRouteGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 2) <= 2) {
    return qword_18CFC4B68[a2 - 2];
  }
  else {
    return 0;
  }
}

__CFString *INCallAudioRouteGetName(uint64_t a1)
{
  unsigned int v1 = @"heySiriAudioRoute";
  uint64_t v2 = @"unknown";
  if (a1 == 2) {
    uint64_t v2 = @"bluetoothAudioRoute";
  }
  if (a1 != 1000) {
    unsigned int v1 = v2;
  }
  if (a1 == 1) {
    return @"speakerphoneAudioRoute";
  }
  else {
    return v1;
  }
}

uint64_t INCallAudioRouteWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"speakerphoneAudioRoute"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"bluetoothAudioRoute"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"heySiriAudioRoute"])
  {
    uint64_t v2 = 1000;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCallAudioRouteGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1000:
      uint64_t v4 = @"hey siri audio route";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"bluetooth audio route";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"speakerphone audio route";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

__CFString *INScanVisualCodeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551B0E8[a1];
  }
}

uint64_t _INPBAppendToNoteIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBNote);
        if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNote:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBPauseTimerIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_38;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_40;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_40:
            [a1 setPauseMultiple:v20 != 0];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v24 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v24, a2) & 1) == 0) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v24, 0, 0);
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBArchivedObjectReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = PBReaderReadData();
        [a1 setMessageData:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = PBReaderReadString();
    [a1 setTypeName:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentResponsePayloadFailureReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_44;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v27 = 0;
            goto LABEL_46;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_46:
        [a1 setAppLaunchRequested:v27 != 0];
      }
      else if (v17 == 2)
      {
        char v31 = PBReaderReadString();
        [a1 setEnumTypeName:v31];
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v24 = 0;
            goto LABEL_42;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        uint64_t v24 = *(unsigned char *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        [a1 setErrorCode:v24];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INTimerTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INTimerTypeGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INTimerTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INTimerTypeGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"sleepTimer";
  }
  if (a1 == 1) {
    return @"defaultType";
  }
  else {
    return v1;
  }
}

uint64_t INTimerTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"defaultType"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"sleepTimer"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INTimerTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"sleep timer";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"default type";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBResumeWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__71855(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__71856(uint64_t a1)
{
}

void INLogInitIfNeeded()
{
  if (INLogInitIfNeeded_once != -1) {
    dispatch_once(&INLogInitIfNeeded_once, &__block_literal_global_71966);
  }
}

void INAppResolverLogInitIfNeeded()
{
  if (INAppResolverLogInitIfNeeded_once != -1) {
    dispatch_once(&INAppResolverLogInitIfNeeded_once, &__block_literal_global_6_71970);
  }
}

uint64_t __INAppResolverLogInitIfNeeded_block_invoke()
{
  os_log_t v0 = os_log_create((const char *)INLogShortcutsSubsystem, (const char *)INLogCategoryAppResolver);
  uint64_t v1 = INLogContextAppResolver;
  INLogContextAppResolver = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

__CFString *INPersonHandleLabelGetFacadeObject(int a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a2 <= 9)
  {
    if (a1) {
      return off_1E551B200[a2];
    }
  }
  return result;
}

uint64_t INPersonHandleLabelGetBackingType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:@"com.apple.intents.PersonHandleLabel.Home"])
    {
      uint64_t v3 = 0;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Work"])
    {
      uint64_t v3 = 1;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.iPhone"])
    {
      uint64_t v3 = 2;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Mobile"])
    {
      uint64_t v3 = 3;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Main"])
    {
      uint64_t v3 = 4;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Home_Fax"])
    {
      uint64_t v3 = 5;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Work_Fax"])
    {
      uint64_t v3 = 6;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Pager"])
    {
      uint64_t v3 = 7;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.Other"])
    {
      uint64_t v3 = 8;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.PersonHandleLabel.School"])
    {
      uint64_t v3 = 9;
    }
    else
    {
      uint64_t v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INPersonHandleLabelValueAsString(__CFString *a1)
{
  if (a1)
  {
    uint64_t BackingType = INPersonHandleLabelGetBackingType(a1);
    if (BackingType >= 0xA)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", BackingType);
      a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = off_1E551B250[BackingType];
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t _INPBSaveHealthSampleIntentReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_54;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_54;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecordDate:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_52:
        objc_msgSend(a1, "setObjectType:", v25, v26, v27);
        goto LABEL_46;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBWellnessValue);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBWellnessValueReadFrom(v17, a2)) {
          goto LABEL_54;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValues:", v17, 0, 0);
        }
        goto LABEL_45;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBWellnessUnitType);
        if (!PBReaderPlaceMark() || (_INPBWellnessUnitTypeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_54;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnit:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBWellnessMetadataPair);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (PBReaderPlaceMark() && _INPBWellnessMetadataPairReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addSampleMetadata:", v17, 0, 0);
          }
LABEL_45:

LABEL_46:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_54:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_46;
    }
  }
}

INWellnessMetadataPair *INIntentSlotValueTransformFromWellnessMetadataPair(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1 || ![v1 hasKey])
  {
    uint64_t v11 = 0;
    goto LABEL_15;
  }
  uint64_t v3 = [v2 key];
  uint64_t v4 = INIntentSlotValueTransformFromString(v3);

  if (![v2 hasValue]) {
    goto LABEL_13;
  }
  uint64_t v5 = [v2 value];
  int v6 = [v5 hasPbDoubleValue];

  v7 = [v2 value];
  char v8 = v7;
  if (!v6)
  {
    int v12 = [v7 hasOrdinalValue];

    char v13 = [v2 value];
    char v8 = v13;
    if (v12)
    {
      unsigned int v9 = [v13 ordinalValue];
      uint64_t v10 = INIntentSlotValueTransformFromInteger(v9);
      goto LABEL_9;
    }
    int v16 = [v13 hasPbStringValue];

    if (v16)
    {
      unint64_t v17 = [v2 value];
      char v18 = [v17 pbStringValue];
      BOOL v14 = INIntentSlotValueTransformFromString(v18);

      int v15 = [[INWellnessMetadataPair alloc] initWithString:v14 key:v4];
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  unsigned int v9 = [v7 pbDoubleValue];
  uint64_t v10 = INIntentSlotValueTransformFromDouble(v9);
LABEL_9:
  BOOL v14 = (void *)v10;

  int v15 = [[INWellnessMetadataPair alloc] initWithNumber:v14 key:v4];
LABEL_10:
  uint64_t v11 = v15;

LABEL_14:
LABEL_15:

  return v11;
}

_INPBWellnessMetadataPair *INIntentSlotValueTransformToWellnessMetadataPair(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t v2 = objc_alloc_init(_INPBWellnessMetadataPair);
  uint64_t v3 = [v1 key];
  uint64_t v4 = INIntentSlotValueTransformToString(v3);
  [(_INPBWellnessMetadataPair *)v2 setKey:v4];

  uint64_t v5 = objc_alloc_init(_INPBWellnessMetadataValue);
  [(_INPBWellnessMetadataPair *)v2 setValue:v5];

  int v6 = [v1 stringValue];

  if (v6)
  {
    v7 = [(_INPBWellnessMetadataPair *)v2 value];
    char v8 = [v1 stringValue];
    unsigned int v9 = INIntentSlotValueTransformToString(v8);
    [v7 setPbStringValue:v9];
  }
  else
  {
    uint64_t v10 = [v1 numberValue];

    if (!v10) {
      goto LABEL_11;
    }
    CFNumberRef v11 = [v1 numberValue];
    CFNumberType Type = CFNumberGetType(v11);

    if ((unint64_t)Type <= kCFNumberDoubleType && ((1 << Type) & 0x3060) != 0)
    {
      v7 = [(_INPBWellnessMetadataPair *)v2 value];
      char v8 = [v1 numberValue];
      unsigned int v9 = INIntentSlotValueTransformToDouble(v8);
      [v7 setPbDoubleValue:v9];
    }
    else
    {
      v7 = [(_INPBWellnessMetadataPair *)v2 value];
      char v8 = [v1 numberValue];
      unsigned int v9 = INIntentSlotValueTransformToInteger(v8);
      [v7 setOrdinalValue:v9];
    }
  }

LABEL_11:

  return v2;
}

id INIntentSlotValueTransformFromWellnessMetadataPairs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromWellnessMetadataPair(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWellnessMetadataPairs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToWellnessMetadataPair(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

void INCallCapabilityOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v4 = v3;
    if (a1)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
      id v3 = v4;
    }
    if ((a1 & 2) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
      id v3 = v4;
    }
  }
}

uint64_t INCallCapabilityOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2 = (a1 >> 1) & 1;
  int v3 = a1 & 1;
  if (a2 != 1) {
    int v3 = 0;
  }
  if (a2 != 2) {
    LODWORD(v2) = v3;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t *INCallCapabilityOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    if (a2 == 1) {
      uint64_t v2 = *result | 1;
    }
    if (a2 == 2) {
      uint64_t v2 = *result | 2;
    }
    *uint64_t result = v2;
  }
  return result;
}

unint64_t *INCallCapabilityOptionsRemoveBackingType(unint64_t *result, int a2)
{
  if (result)
  {
    unint64_t v2 = *result;
    if (a2 == 1) {
      unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    }
    if (a2 == 2) {
      unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INCallCapabilityOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    int v3 = v2;
    if (v1) {
      [v2 addObject:@"audioCall"];
    }
    if ((v1 & 2) != 0) {
      [v3 addObject:@"videoCall"];
    }
    id v4 = (void *)[v3 copy];
  }
  else
  {
    id v4 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v4;
}

uint64_t INCallCapabilityOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v1);
        }
        v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v4 |= [v7 isEqualToString:@"audioCall"];
        if ([v7 isEqualToString:@"videoCall"]) {
          v4 |= 2uLL;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id INCallCapabilityOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      uint64_t v5 = INLocalizedStringWithLocalizer(@"audio call", @"audio call", v3);
      [v4 addObject:v5];
    }
    if ((a1 & 2) != 0)
    {
      uint64_t v6 = INLocalizedStringWithLocalizer(@"video call", @"video call", v3);
      [v4 addObject:v6];
    }
    v7 = (void *)[v4 copy];
  }
  else
  {
    v7 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v7;
}

__CFString *INPlayVoicemailIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7) {
    return 0;
  }
  else {
    return off_1E551B4F8[a1];
  }
}

uint64_t _INPBPlaceReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaceType:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaceSubType:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBString);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (PBReaderPlaceMark() && _INPBStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addPlaceDescriptors:", v17, 0, 0);
          }
LABEL_31:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_43:
        objc_msgSend(a1, "setPersonalPlaceType:", v25, v26, v27);
        goto LABEL_44;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

BOOL INWellnessQuestionTypeHasBackingType(unint64_t a1)
{
  return a1 < 8;
}

unint64_t INWellnessQuestionTypeGetBackingType(unint64_t result)
{
  if (result >= 8) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INWellnessQuestionTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 6) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INWellnessQuestionTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return @"unknown";
  }
  else {
    return off_1E551B538[a1 - 1];
  }
}

uint64_t INWellnessQuestionTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"verification"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"quantification"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"temporal"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"comparison"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"quality"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"speedRate"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"instanceCount"])
  {
    uint64_t v2 = 7;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INWellnessQuestionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"verification";
      goto LABEL_10;
    case 2:
      id v4 = @"quantification";
      goto LABEL_10;
    case 3:
      id v4 = @"temporal";
      goto LABEL_10;
    case 4:
      id v4 = @"comparison";
      goto LABEL_10;
    case 5:
      id v4 = @"quality";
      goto LABEL_10;
    case 6:
      id v4 = @"speed rate";
      goto LABEL_10;
    case 7:
      id v4 = @"instance count";
LABEL_10:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t INIntentSlotValueTransformFromNull()
{
  return [MEMORY[0x1E4F1CA98] null];
}

id INIntentSlotValueTransformFromNulls(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (1)
    {
      if (*(void *)v11 != v6) {
        objc_enumerationMutation(v3);
      }
      v7 = objc_msgSend(MEMORY[0x1E4F1CA98], "null", v10);
      if (v7) {
        [v2 addObject:v7];
      }

      if (!--v5)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (!v5) {
          break;
        }
      }
    }
  }

  char v8 = (void *)[v2 copy];

  return v8;
}

_INPBEmpty *INIntentSlotValueTransformToNull()
{
  os_log_t v0 = objc_alloc_init(_INPBEmpty);

  return v0;
}

id INIntentSlotValueTransformToNulls(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    while (1)
    {
      if (*(void *)v10 != v6) {
        objc_enumerationMutation(v3);
      }
      v7 = objc_alloc_init(_INPBEmpty);
      if (v7) {
        objc_msgSend(v2, "addObject:", v7, v9);
      }

      if (!--v5)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (!v5) {
          break;
        }
      }
    }
  }

  return v2;
}

uint64_t _INPBSearchForAccountsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || !_INPBFinancialAccountValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addAccounts:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBCreateTaskListIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_37;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_37;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_34;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_37;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addTaskTitles:", v17, 0, 0);
        }
        goto LABEL_34;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setGroupName:", v17, 0, 0);
LABEL_34:

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_35;
    }
  }
}

INWellnessObjectResultValue *INIntentSlotValueTransformFromWellnessObjectResultValue(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [v1 unit];
    id v3 = INIntentSlotValueTransformFromString(v2);

    uint64_t v4 = [v1 recordDate];
    uint64_t v5 = INIntentSlotValueTransformFromDateTimeRange(v4);

    int v6 = [v1 hasResultType];
    uint64_t v7 = [v1 resultType] - 1;
    if (v7 <= 8) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v6) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [v1 values];

    uint64_t v11 = INIntentSlotValueTransformFromWellnessValues(v10);

    unint64_t v12 = [[INWellnessObjectResultValue alloc] initWithRecordDate:v5 unit:v3 values:v11 resultType:v9];
  }
  else
  {
    unint64_t v12 = 0;
  }

  return v12;
}

_INPBWellnessObjectResultValue *INIntentSlotValueTransformToWellnessObjectResultValue(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBWellnessObjectResultValue);
    id v3 = [v1 unit];
    uint64_t v4 = INIntentSlotValueTransformToString(v3);
    [(_INPBWellnessObjectResultValue *)v2 setUnit:v4];

    uint64_t v5 = [v1 recordDate];
    int v6 = INIntentSlotValueTransformToDateTimeRange(v5);
    [(_INPBWellnessObjectResultValue *)v2 setRecordDate:v6];

    uint64_t v7 = [v1 values];
    uint64_t v8 = INIntentSlotValueTransformToWellnessValues(v7);
    [(_INPBWellnessObjectResultValue *)v2 setValues:v8];

    unint64_t v9 = [v1 resultType];
    if (v9 >= 0xA) {
      uint64_t v10 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v10 = v9;
    }
    [(_INPBWellnessObjectResultValue *)v2 setResultType:v10];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromWellnessObjectResultValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromWellnessObjectResultValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    unint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWellnessObjectResultValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToWellnessObjectResultValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    unint64_t v9 = 0;
  }

  return v9;
}

BOOL _INPBCurrencyAmountValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_28;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v18 = objc_alloc_init(_INPBDecimalNumberValue);
        if (!PBReaderPlaceMark() || (_INPBDecimalNumberValueReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_33;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAmount:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadString();
    char v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
    [a1 setCurrencyCode:v18];
LABEL_28:

    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBQueryHomeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

id INIntentSlotValueTransformFromGEOLatLng(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (objc_class *)MEMORY[0x1E4F1E5F0];
    id v3 = a1;
    id v4 = [v2 alloc];
    [v3 lat];
    double v6 = v5;
    [v3 lng];
    double v8 = v7;

    a1 = (void *)[v4 initWithLatitude:v6 longitude:v8];
    uint64_t v1 = vars8;
  }
  return a1;
}

id INIntentSlotValueTransformToGEOLatLng(void *a1)
{
  if (a1)
  {
    [a1 coordinate];
    double v2 = v1;
    double v4 = v3;
    id v5 = objc_alloc_init(MEMORY[0x1E4F64638]);
    [v5 setLat:v2];
    [v5 setLng:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id INIntentSlotValueTransformFromGEOLatLngs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformFromGEOLatLng(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToGEOLatLngs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformToGEOLatLng(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformFromDistance(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = objc_msgSend(a1, "values", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = INIntentSlotValueTransformFromDistanceValue(*(void **)(*((void *)&v9 + 1) + 8 * i));
        if (v6)
        {
          double v7 = (void *)v6;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  double v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromDistanceValue(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 valueMetadata];
    INPrivacyEntitlementValidateValueMetadata(v3);

    if (![v2 hasUnit]) {
      goto LABEL_28;
    }
    switch([v2 unit])
    {
      case 1u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] meters];
        break;
      case 2u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] miles];
        break;
      case 3u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] centimeters];
        break;
      case 4u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] feet];
        break;
      case 5u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] inches];
        break;
      case 6u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] yards];
        break;
      case 7u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] kilometers];
        break;
      case 8u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] megameters];
        break;
      case 9u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] hectometers];
        break;
      case 0xAu:
        uint64_t v4 = [MEMORY[0x1E4F291E0] decameters];
        break;
      case 0xBu:
        uint64_t v4 = [MEMORY[0x1E4F291E0] decimeters];
        break;
      case 0xCu:
        uint64_t v4 = [MEMORY[0x1E4F291E0] millimeters];
        break;
      case 0xDu:
        uint64_t v4 = [MEMORY[0x1E4F291E0] micrometers];
        break;
      case 0xEu:
        uint64_t v4 = [MEMORY[0x1E4F291E0] nanometers];
        break;
      case 0xFu:
        uint64_t v4 = [MEMORY[0x1E4F291E0] picometers];
        break;
      case 0x10u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] scandinavianMiles];
        break;
      case 0x11u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] lightyears];
        break;
      case 0x12u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] nauticalMiles];
        break;
      case 0x13u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] fathoms];
        break;
      case 0x14u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] furlongs];
        break;
      case 0x15u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] astronomicalUnits];
        break;
      case 0x16u:
        uint64_t v4 = [MEMORY[0x1E4F291E0] parsecs];
        break;
      default:
        goto LABEL_28;
    }
    uint64_t v6 = (void *)v4;
    if (!v4)
    {
LABEL_28:
      double v7 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315138;
        long long v12 = "INIntentSlotValueTransformFromDistanceValue";
        _os_log_error_impl(&dword_18CB2F000, v7, OS_LOG_TYPE_ERROR, "%s _INPBDistanceValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v11, 0xCu);
      }
      double v8 = [MEMORY[0x1E4F1CA20] currentLocale];
      if ([v8 usesMetricSystem]) {
        [MEMORY[0x1E4F291E0] meters];
      }
      else {
      uint64_t v6 = [MEMORY[0x1E4F291E0] miles];
      }
    }
    id v9 = objc_alloc(MEMORY[0x1E4F28E28]);
    [v2 magnitude];
    uint64_t v5 = objc_msgSend(v9, "initWithDoubleValue:unit:", v6);
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

_INPBDistance *INIntentSlotValueTransformToDistance(void *a1)
{
  id v1 = INIntentSlotValueTransformToDistanceValue(a1);
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(_INPBDistance);
    [(_INPBDistance *)v2 addValue:v1];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

_INPBDistanceValue *INIntentSlotValueTransformToDistanceValue(void *a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = 0;
    goto LABEL_49;
  }
  uint64_t v2 = objc_alloc_init(_INPBDistanceValue);
  uint64_t v3 = [v1 unit];
  [v1 doubleValue];
  -[_INPBDistanceValue setMagnitude:](v2, "setMagnitude:");
  uint64_t v4 = [MEMORY[0x1E4F291E0] kilometers];
  int v5 = [v3 isEqual:v4];

  if (v5)
  {
    uint64_t v6 = v2;
    uint64_t v7 = 7;
  }
  else
  {
    double v8 = [MEMORY[0x1E4F291E0] meters];
    int v9 = [v3 isEqual:v8];

    if (v9)
    {
      uint64_t v6 = v2;
      uint64_t v7 = 1;
    }
    else
    {
      long long v10 = [MEMORY[0x1E4F291E0] centimeters];
      int v11 = [v3 isEqual:v10];

      if (v11)
      {
        uint64_t v6 = v2;
        uint64_t v7 = 3;
      }
      else
      {
        long long v12 = [MEMORY[0x1E4F291E0] inches];
        int v13 = [v3 isEqual:v12];

        if (v13)
        {
          uint64_t v6 = v2;
          uint64_t v7 = 5;
        }
        else
        {
          uint64_t v14 = [MEMORY[0x1E4F291E0] feet];
          int v15 = [v3 isEqual:v14];

          if (v15)
          {
            uint64_t v6 = v2;
            uint64_t v7 = 4;
          }
          else
          {
            uint64_t v16 = [MEMORY[0x1E4F291E0] yards];
            int v17 = [v3 isEqual:v16];

            if (v17)
            {
              uint64_t v6 = v2;
              uint64_t v7 = 6;
            }
            else
            {
              char v18 = [MEMORY[0x1E4F291E0] miles];
              int v19 = [v3 isEqual:v18];

              if (v19)
              {
                uint64_t v6 = v2;
                uint64_t v7 = 2;
              }
              else
              {
                unsigned int v20 = [MEMORY[0x1E4F291E0] megameters];
                int v21 = [v3 isEqual:v20];

                if (v21)
                {
                  uint64_t v6 = v2;
                  uint64_t v7 = 8;
                }
                else
                {
                  uint64_t v22 = [MEMORY[0x1E4F291E0] hectometers];
                  int v23 = [v3 isEqual:v22];

                  if (v23)
                  {
                    uint64_t v6 = v2;
                    uint64_t v7 = 9;
                  }
                  else
                  {
                    char v24 = [MEMORY[0x1E4F291E0] decameters];
                    int v25 = [v3 isEqual:v24];

                    if (v25)
                    {
                      uint64_t v6 = v2;
                      uint64_t v7 = 10;
                    }
                    else
                    {
                      uint64_t v26 = [MEMORY[0x1E4F291E0] decimeters];
                      int v27 = [v3 isEqual:v26];

                      if (v27)
                      {
                        uint64_t v6 = v2;
                        uint64_t v7 = 11;
                      }
                      else
                      {
                        uint64_t v28 = [MEMORY[0x1E4F291E0] millimeters];
                        int v29 = [v3 isEqual:v28];

                        if (v29)
                        {
                          uint64_t v6 = v2;
                          uint64_t v7 = 12;
                        }
                        else
                        {
                          char v30 = [MEMORY[0x1E4F291E0] micrometers];
                          int v31 = [v3 isEqual:v30];

                          if (v31)
                          {
                            uint64_t v6 = v2;
                            uint64_t v7 = 13;
                          }
                          else
                          {
                            uint64_t v32 = [MEMORY[0x1E4F291E0] nanometers];
                            int v33 = [v3 isEqual:v32];

                            if (v33)
                            {
                              uint64_t v6 = v2;
                              uint64_t v7 = 14;
                            }
                            else
                            {
                              unsigned int v34 = [MEMORY[0x1E4F291E0] picometers];
                              int v35 = [v3 isEqual:v34];

                              if (v35)
                              {
                                uint64_t v6 = v2;
                                uint64_t v7 = 15;
                              }
                              else
                              {
                                uint64_t v36 = [MEMORY[0x1E4F291E0] scandinavianMiles];
                                int v37 = [v3 isEqual:v36];

                                if (v37)
                                {
                                  uint64_t v6 = v2;
                                  uint64_t v7 = 16;
                                }
                                else
                                {
                                  char v38 = [MEMORY[0x1E4F291E0] lightyears];
                                  int v39 = [v3 isEqual:v38];

                                  if (v39)
                                  {
                                    uint64_t v6 = v2;
                                    uint64_t v7 = 17;
                                  }
                                  else
                                  {
                                    uint64_t v40 = [MEMORY[0x1E4F291E0] nauticalMiles];
                                    int v41 = [v3 isEqual:v40];

                                    if (v41)
                                    {
                                      uint64_t v6 = v2;
                                      uint64_t v7 = 18;
                                    }
                                    else
                                    {
                                      uint64_t v42 = [MEMORY[0x1E4F291E0] fathoms];
                                      int v43 = [v3 isEqual:v42];

                                      if (v43)
                                      {
                                        uint64_t v6 = v2;
                                        uint64_t v7 = 19;
                                      }
                                      else
                                      {
                                        char v44 = [MEMORY[0x1E4F291E0] furlongs];
                                        int v45 = [v3 isEqual:v44];

                                        if (v45)
                                        {
                                          uint64_t v6 = v2;
                                          uint64_t v7 = 20;
                                        }
                                        else
                                        {
                                          unsigned int v46 = [MEMORY[0x1E4F291E0] astronomicalUnits];
                                          int v47 = [v3 isEqual:v46];

                                          if (v47)
                                          {
                                            uint64_t v6 = v2;
                                            uint64_t v7 = 21;
                                          }
                                          else
                                          {
                                            uint64_t v48 = [MEMORY[0x1E4F291E0] parsecs];
                                            int v49 = [v3 isEqual:v48];

                                            if (!v49)
                                            {
                                              uint64_t v51 = INSiriLogContextIntents;
                                              if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
                                              {
                                                int v57 = 136315394;
                                                char v58 = "INIntentSlotValueTransformToDistanceValue";
                                                __int16 v59 = 2112;
                                                uint64_t v60 = v3;
                                                _os_log_error_impl(&dword_18CB2F000, v51, OS_LOG_TYPE_ERROR, "%s NSMeasurement<NSUnitLength *> distance unit is %@. Only meters and miles are supported", (uint8_t *)&v57, 0x16u);
                                              }
                                              char v52 = [MEMORY[0x1E4F1CA20] currentLocale];
                                              int v53 = [v52 usesMetricSystem];

                                              if (v53) {
                                                uint64_t v54 = 1;
                                              }
                                              else {
                                                uint64_t v54 = 2;
                                              }
                                              [(_INPBDistanceValue *)v2 setUnit:v54];
                                              if (v53) {
                                                [MEMORY[0x1E4F291E0] meters];
                                              }
                                              else {
                                              uint64_t v55 = [MEMORY[0x1E4F291E0] miles];
                                              }
                                              unint64_t v56 = [v1 measurementByConvertingToUnit:v55];
                                              [v56 doubleValue];
                                              -[_INPBDistanceValue setMagnitude:](v2, "setMagnitude:");

                                              goto LABEL_48;
                                            }
                                            uint64_t v6 = v2;
                                            uint64_t v7 = 22;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  [(_INPBDistanceValue *)v6 setUnit:v7];
LABEL_48:

LABEL_49:

  return v2;
}

id INIntentSlotValueTransformFromDistanceValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformFromDistanceValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  int v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformFromDistances(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformFromDistance(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  int v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToDistanceValues(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformToDistanceValue(*(void **)(*((void *)&v10 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToDistances(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformToDistance(*(void **)(*((void *)&v10 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromDistanceValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 valueMetadata];
  uint64_t v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (void *)[v3 copy];
  }

  return v6;
}

_INPBDistance *INIntentSlotValueRedactedDistanceFromDistance(void *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = objc_alloc_init(_INPBDistance);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    double v8 = objc_msgSend(v5, "values", 0);
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          long long v13 = INIntentSlotValueRedactedValueFromDistanceValue(*(void **)(*((void *)&v15 + 1) + 8 * i), a2);
          if (v13) {
            [(_INPBDistance *)v7 addValue:v13];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedDistancesFromDistances(void *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v8 = v5;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = INIntentSlotValueRedactedDistanceFromDistance(*(void **)(*((void *)&v16 + 1) + 8 * i), a2, v6);
        objc_msgSend(v7, "addObject:", v13, (void)v16);
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }

  long long v14 = (void *)[v7 copy];

  return v14;
}

BOOL INIsDeviceLocked()
{
  return MKBGetDeviceLockState() - 1 < 2;
}

uint64_t INProcessHasEntitlement(_OWORD *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = a1[1];
  *(_OWORD *)v10.val = *a1;
  *(_OWORD *)&v10.val[4] = v4;
  id v5 = SecTaskCreateWithAuditToken(0, &v10);
  if (v5)
  {
    id v6 = v5;
    uint64_t HasEntitlement = _INProcessHasEntitlement(v5, v3);
    CFRelease(v6);
  }
  else
  {
    id v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v10.val[0] = 136315138;
      *(void *)&v10.val[1] = "INProcessHasEntitlement";
      _os_log_error_impl(&dword_18CB2F000, v8, OS_LOG_TYPE_ERROR, "%s SecTaskCreateWithAuditToken() failed, assuming the process is NOT entitled.", (uint8_t *)&v10, 0xCu);
    }
    uint64_t HasEntitlement = 0;
  }

  return HasEntitlement;
}

uint64_t INThisProcessHasSiriDeveloperEntitlement()
{
  return INThisProcessHasEntitlement(@"com.apple.developer.siri", 1);
}

uint64_t INThisProcessHasSiriDeveloperEntitlementWithoutCheckingBundle()
{
  return INThisProcessHasEntitlement(@"com.apple.developer.siri", 0);
}

uint64_t INThisProcessIsAssistantd()
{
  if (INThisProcessIsAssistantd_onceToken != -1) {
    dispatch_once(&INThisProcessIsAssistantd_onceToken, &__block_literal_global_74918);
  }
  return INThisProcessIsAssistantd_isAssistantd;
}

uint64_t INThisProcessIsSiri()
{
  if (INThisProcessIsSiri_onceToken != -1) {
    dispatch_once(&INThisProcessIsSiri_onceToken, &__block_literal_global_40);
  }
  return INThisProcessIsSiri_isSiri;
}

void __INThisProcessIsSiri_block_invoke()
{
  id v1 = [MEMORY[0x1E4F28B50] mainBundle];
  os_log_t v0 = [v1 bundleIdentifier];
  INThisProcessIsSiri_isSiruint64_t i = [v0 isEqualToString:@"com.apple.siri"];
}

uint64_t INThisProcessIsCarousel()
{
  if (INThisProcessIsCarousel_onceToken != -1) {
    dispatch_once(&INThisProcessIsCarousel_onceToken, &__block_literal_global_43);
  }
  return INThisProcessIsCarousel_isCarousel;
}

void __INThisProcessIsCarousel_block_invoke()
{
  id v1 = [MEMORY[0x1E4F28B50] mainBundle];
  os_log_t v0 = [v1 bundleIdentifier];
  INThisProcessIsCarousel_isCarousel = [v0 isEqualToString:@"com.apple.Carousel"];
}

uint64_t INThisProcessIsSystemProcess()
{
  if (INThisProcessIsSystemProcess_onceToken != -1) {
    dispatch_once(&INThisProcessIsSystemProcess_onceToken, &__block_literal_global_48);
  }
  return INThisProcessIsSystemProcess_isSystemProcess;
}

BOOL INThisProcessIsRunningAsInstance()
{
  if (_INProcessGetInstanceUUID_onceToken != -1) {
    dispatch_once(&_INProcessGetInstanceUUID_onceToken, &__block_literal_global_331);
  }
  return _INProcessGetInstanceUUID_instanceUUID != 0;
}

uint64_t INAppCanDonateIntent(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F223F0];
  id v4 = a2;
  id v5 = [v3 bundleProxyForIdentifier:a1];
  uint64_t CanDonateIntent = INBundleProxyCanDonateIntent(v5, v4);

  return CanDonateIntent;
}

uint64_t INAppHasExtensionForIntent(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F223B8] applicationProxyForIdentifier:a1];
  if (v4)
  {
    id v5 = +[INAppInfo appInfoWithAppProxy:v4];
    id v6 = [v5 supportedActionsByExtensions];
    uint64_t v7 = [v6 containsObject:v3];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id INAppIntentVocabularyInBundleProxy(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v2 = [a1 bundleURL];
  id v3 = [v1 bundleWithURL:v2];

  id v4 = [v3 localizations];
  id v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v4, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v11 = [v3 URLForResource:@"AppIntentVocabulary" withExtension:@"plist" subdirectory:0 localization:v10];
        if (v11)
        {
          long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfURL:v11];
          if (v12) {
            [v14 setObject:v12 forKey:v10];
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v7);
  }

  return v14;
}

void __INUserSupportDirectoryPath_block_invoke()
{
  CPSharedResourcesDirectory();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v2 stringByAppendingPathComponent:@"Library/Assistant"];
  id v1 = (void *)INUserSupportDirectoryPath_sUserSupportDirectoryPath;
  INUserSupportDirectoryPath_sUserSupportDirectoryPath = v0;
}

uint64_t INSupportsPairedDevice()
{
  if (INSupportsPairedDevice_onceToken != -1) {
    dispatch_once(&INSupportsPairedDevice_onceToken, &__block_literal_global_81);
  }
  return INSupportsPairedDevice_supportsPairedDevice;
}

uint64_t __INSupportsPairedDevice_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  INSupportsPairedDevice_supportsPairedDevice = result;
  return result;
}

uint64_t INIsHomepod()
{
  if (INIsHomepod_onceToken != -1) {
    dispatch_once(&INIsHomepod_onceToken, &__block_literal_global_86);
  }
  return INIsHomepod_isHomepod;
}

uint64_t __INIsHomepod_block_invoke()
{
  uint64_t result = MGGetSInt32Answer();
  INIsHomepod_isHomepod = result == 7;
  return result;
}

id INSupportedIntentsByExtensions(void *a1, void *a2)
{
  return _INSupportedIntentsByExtensions(0, a1, a2);
}

id _INSupportedIntentsByExtensions(int a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obuint64_t j = v5;
  uint64_t v24 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v24)
  {
    uint64_t v23 = *(void *)v33;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v33 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v25 = v7;
        uint64_t v8 = *(void **)(*((void *)&v32 + 1) + 8 * v7);
        uint64_t v9 = [v8 objectForInfoDictionaryKey:@"IntentsSupported" ofClass:objc_opt_class() inScope:0];
        uint64_t v10 = v9;
        if (!a3)
        {
          long long v19 = [MEMORY[0x1E4F1CAD0] setWithArray:v9];
          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 3221225472;
          v26[2] = ___INSupportedIntentsByExtensions_block_invoke;
          v26[3] = &unk_1E551B6B8;
          char v27 = a1;
          v26[4] = v8;
          uint64_t v20 = [v19 objectsPassingTest:v26];

          [v6 unionSet:v20];
          goto LABEL_24;
        }
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        uint64_t v11 = [v9 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (!v11) {
          goto LABEL_24;
        }
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v29;
        do
        {
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v29 != v13) {
              objc_enumerationMutation(v10);
            }
            long long v15 = *(void **)(*((void *)&v28 + 1) + 8 * v14);
            if ([v6 containsObject:v15])
            {
              long long v16 = (void *)MEMORY[0x1E4F28C58];
              uint64_t v17 = 2001;
LABEL_14:
              *a3 = [v16 errorWithDomain:@"IntentsErrorDomain" code:v17 userInfo:0];
              goto LABEL_18;
            }
            if (_INIsValidIntentNameForBundleProxy(a1, v15, v8))
            {
              [v6 addObject:v15];
            }
            else if ((_INIsValidCustomIntentNameForBundleProxy(v15, v8) & 1) == 0)
            {
              long long v16 = (void *)MEMORY[0x1E4F28C58];
              uint64_t v17 = 2004;
              goto LABEL_14;
            }
LABEL_18:
            ++v14;
          }
          while (v12 != v14);
          uint64_t v18 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
          uint64_t v12 = v18;
        }
        while (v18);
LABEL_24:

        uint64_t v7 = v25 + 1;
      }
      while (v25 + 1 != v24);
      uint64_t v24 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v24);
  }

  return v6;
}

uint64_t _INIsValidIntentNameForBundleProxy(int a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = NSClassFromString(v5);
  uint64_t v8 = INIntentSchemaGetIntentDescriptionWithFacadeClass(v7);

  if (!a1 || v8)
  {
    if (v6 && (objc_msgSend(v6, "if_isSystem") & 1) == 0)
    {
      unsigned int valid = _INIsValidCustomIntentNameForBundleProxy(v5, v6);
      if (v8) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = valid;
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
  }

  return v8;
}

uint64_t _INIsValidCustomIntentNameForBundleProxy(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = _INContainingBundleProxyWithBundleProxy(a2);
  if (v4)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = (void *)MEMORY[0x1E4F1CAD0];
      id v6 = [v4 siriActionDefinitionURLs];
      uint64_t v7 = [v6 allKeys];
      uint64_t v8 = [v5 setWithArray:v7];

      uint64_t v9 = [v8 containsObject:v3];
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

id INIntentsRestrictedWhileLocked(void *a1, void *a2)
{
  return _INIntentsSetForExtensionAttributesKey(0, a1, @"IntentsRestrictedWhileLocked", a2);
}

id _INIntentsSetForExtensionAttributesKey(char a1, void *a2, void *a3, void *a4)
{
  v44[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v28 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  obuint64_t j = v5;
  uint64_t v29 = [obj countByEnumeratingWithState:&v35 objects:v42 count:16];
  if (v29)
  {
    uint64_t v26 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v36 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        uint64_t v9 = [v8 objectForInfoDictionaryKey:v6 ofClass:objc_opt_class() inScope:0];
        uint64_t v10 = [v8 objectForInfoDictionaryKey:@"IntentsSupported" ofClass:objc_opt_class() inScope:0];
        long long v32 = (void *)v9;
        uint64_t v11 = [MEMORY[0x1E4F1CA80] setWithArray:v9];
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = ___INIntentsSetForExtensionAttributesKey_block_invoke;
        v33[3] = &unk_1E551B6B8;
        char v34 = a1;
        v33[4] = v8;
        uint64_t v12 = [v11 objectsPassingTest:v33];

        long long v31 = (void *)v10;
        uint64_t v13 = [MEMORY[0x1E4F1CAD0] setWithArray:v10];
        if (a4 && ([v12 isSubsetOfSet:v13] & 1) == 0)
        {
          *a4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IntentsErrorDomain" code:2002 userInfo:0];
        }
        [v28 intersectSet:v13];
        id v14 = v6;
        v43[0] = @"IntentsRestrictedWhileLocked";
        long long v15 = (objc_class *)MEMORY[0x1E4F1CAD0];
        id v16 = v13;
        uint64_t v17 = objc_msgSend([v15 alloc], "initWithObjects:", @"INRequestRideIntent", @"INRequestPaymentIntent", @"INSendPaymentIntent", @"INPayBillIntent", @"INSearchForBillsIntent", @"INSearchForAccountsIntent", @"INTransferMoneyIntent", @"INSearchForNotebookItemsIntent", @"INSearchCallHistoryIntent", @"INGetVisualCodeIntent", @"INSearchForPhotosIntent", @"INStartPhotoPlaybackIntent", @"INGetCarLockStatusIntent", @"INSetCarLockStatusIntent", @"INGetCarPowerLevelStatusIntent", @"INActivateCarSignalIntent", 0);
        v43[1] = @"IntentsRestrictedWhileProtectedDataUnavailable";
        v44[0] = v17;
        uint64_t v18 = [MEMORY[0x1E4F1CAD0] set];
        v44[1] = v18;
        [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v44 forKeys:v43 count:2];
        v20 = id v19 = v6;

        v39[0] = MEMORY[0x1E4F143A8];
        v39[1] = 3221225472;
        v39[2] = ___INRequiredIntentsSetForExtensionAttributesKey_block_invoke;
        v39[3] = &unk_1E551B6E0;
        id v40 = v20;
        id v41 = v14;
        id v21 = v20;
        id v22 = v14;
        uint64_t v23 = [v16 objectsPassingTest:v39];

        id v6 = v19;
        [v28 unionSet:v23];

        [v28 unionSet:v12];
      }
      uint64_t v29 = [obj countByEnumeratingWithState:&v35 objects:v42 count:16];
    }
    while (v29);
  }

  return v28;
}

id INIntentsRestrictedWhileProtectedDataUnavailable(void *a1, void *a2)
{
  return _INIntentsSetForExtensionAttributesKey(0, a1, @"IntentsRestrictedWhileProtectedDataUnavailable", a2);
}

id INSiriSupportedIntentsByExtensions(void *a1, void *a2)
{
  return _INSupportedIntentsByExtensions(1, a1, a2);
}

id INSiriIntentsRestrictedWhileLocked(void *a1, void *a2)
{
  return _INIntentsSetForExtensionAttributesKey(1, a1, @"IntentsRestrictedWhileLocked", a2);
}

id INSiriIntentsRestrictedWhileProtectedDataUnavailable(void *a1, void *a2)
{
  return _INIntentsSetForExtensionAttributesKey(1, a1, @"IntentsRestrictedWhileProtectedDataUnavailable", a2);
}

void INSupportedActionsForAppProxy(uint64_t a1, void *a2, void *a3)
{
  id v5 = +[INAppInfo appInfoWithAppProxy:a1];
  *a2 = [v5 supportedActions];
  *a3 = [v5 actionsRestrictedWhileLocked];
}

id INLocalAppBundleIdentifierForIntentBundleIdentifier(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v23 = 136315394;
    *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    *(_WORD *)&v23[12] = 2112;
    *(void *)&v23[14] = v1;
    _os_log_impl(&dword_18CB2F000, v2, OS_LOG_TYPE_INFO, "%s Looking for local app bundle identifier for intent bundle identifier: %@", v23, 0x16u);
  }
  if (!v1 || ![v1 length])
  {
    id v6 = v1;
    goto LABEL_31;
  }
  id v3 = [MEMORY[0x1E4F223F0] bundleProxyForIdentifier:v1];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    id v5 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
      *(_WORD *)&v23[12] = 2112;
      *(void *)&v23[14] = v4;
      _os_log_impl(&dword_18CB2F000, v5, OS_LOG_TYPE_INFO, "%s originalBundleProxy is a LSApplicationProxy: %@", v23, 0x16u);
    }
    goto LABEL_19;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v4 = 0;
LABEL_19:
    uint64_t v10 = [v4 appState];
    int v11 = [v10 isInstalled];

    uint64_t v12 = INSiriLogContextIntents;
    BOOL v13 = os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)uint64_t v23 = 136315394;
        *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
        *(_WORD *)&v23[12] = 2112;
        *(void *)&v23[14] = v4;
        _os_log_impl(&dword_18CB2F000, v12, OS_LOG_TYPE_INFO, "%s Has app proxy but it is not installed: %@", v23, 0x16u);
        uint64_t v12 = INSiriLogContextIntents;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v23 = 136315650;
        *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
        *(_WORD *)&v23[12] = 2112;
        *(void *)&v23[14] = v3;
        *(_WORD *)&v23[22] = 2112;
        id v24 = v4;
        _os_log_error_impl(&dword_18CB2F000, v12, OS_LOG_TYPE_ERROR, "%s Didn't find any installed apps for originalBundleProxy: %@, appProxy: %@; returning nil",
          v23,
          0x20u);
      }
      id v6 = 0;
      goto LABEL_30;
    }
    if (!v13) {
      goto LABEL_23;
    }
    id v14 = v12;
    long long v15 = [v4 bundleIdentifier];
    *(_DWORD *)uint64_t v23 = 136315394;
    *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    *(_WORD *)&v23[12] = 2114;
    *(void *)&v23[14] = v15;
    id v16 = "%s Original app (with bundleID=%{public}@) is installed; choosing that";
    goto LABEL_22;
  }
  uint64_t v7 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v23 = 136315138;
    *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    _os_log_impl(&dword_18CB2F000, v7, OS_LOG_TYPE_INFO, "%s originalBundleProxy is a LSPlugInKitProxy", v23, 0xCu);
  }
  _INContainingBundleProxyWithBundleProxy(v3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v23 = 136315394;
    *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    *(_WORD *)&v23[12] = 2112;
    *(void *)&v23[14] = v4;
    _os_log_impl(&dword_18CB2F000, v8, OS_LOG_TYPE_INFO, "%s Containing bundle proxy: %@", v23, 0x16u);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v4;
    uint64_t v9 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
      *(_WORD *)&v23[12] = 2112;
      *(void *)&v23[14] = v4;
      _os_log_impl(&dword_18CB2F000, v9, OS_LOG_TYPE_INFO, "%s containing bundle proxy is a LSApplicationProxy: %@", v23, 0x16u);
    }

    goto LABEL_19;
  }
  id v19 = (void *)INSiriLogContextIntents;
  BOOL v20 = os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO);
  if (!v4)
  {
    if (v20)
    {
      id v21 = v19;
      id v22 = [0 bundleIdentifier];
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
      *(_WORD *)&v23[12] = 2114;
      *(void *)&v23[14] = v22;
      _os_log_impl(&dword_18CB2F000, v21, OS_LOG_TYPE_INFO, "%s Original bundle proxy (with bundleID=%{public}@) is not app and containingBundleProxy is nil but it still exists; choosing that",
        v23,
        0x16u);
    }
    uint64_t v17 = v3;
    goto LABEL_24;
  }
  if (v20)
  {
    id v14 = v19;
    long long v15 = [v4 bundleIdentifier];
    *(_DWORD *)uint64_t v23 = 136315394;
    *(void *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    *(_WORD *)&v23[12] = 2114;
    *(void *)&v23[14] = v15;
    id v16 = "%s Containing bundle proxy is not app (with bundleID=%{public}@) but it still exists; choosing that";
LABEL_22:
    _os_log_impl(&dword_18CB2F000, v14, OS_LOG_TYPE_INFO, v16, v23, 0x16u);
  }
LABEL_23:
  uint64_t v17 = v4;
LABEL_24:
  objc_msgSend(v17, "bundleIdentifier", *(_OWORD *)v23, *(void *)&v23[16]);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_30:

LABEL_31:

  return v6;
}

id INSupportedMediaCategories(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "objectForInfoDictionaryKey:ofClass:inScope:", @"SupportedMediaCategories", objc_opt_class(), 0, (void)v10);
        if (v8) {
          [v2 addObjectsFromArray:v8];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id INAppProxyForAppOrContainedPluginWithBundleIdentifier(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F223F0] bundleProxyForIdentifier:a1];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    _INContainingBundleProxyWithBundleProxy(v1);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_7;
    }
  }
  id v2 = 0;
LABEL_7:

  return v2;
}

__CFString *INDisplayableOrLaunchableBundleIdForBundleIdFromUserActivity(void *a1)
{
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F22458] pluginKitProxyForIdentifier:v1];
  id v3 = [v2 protocol];
  char v4 = [v3 isEqualToString:@"com.apple.fileprovider-nonui"];

  if (v4) {
    uint64_t v5 = @"com.apple.DocumentsApp";
  }
  else {
    uint64_t v5 = (__CFString *)v1;
  }

  return v5;
}

id INUserActivityGetSerializationQueue()
{
  if (INUserActivityGetSerializationQueue_onceToken != -1) {
    dispatch_once(&INUserActivityGetSerializationQueue_onceToken, &__block_literal_global_100_75055);
  }
  uint64_t v0 = (void *)INUserActivityGetSerializationQueue_queue;

  return v0;
}

uint64_t __INUserActivityGetSerializationQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.intents.user-activity.serialization", 0);
  uint64_t v1 = INUserActivityGetSerializationQueue_queue;
  INUserActivityGetSerializationQueue_queue = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id INUserActivitySerializeToData(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    [v1 _intentsPrepareForEncoding];
    uint64_t v12 = 0;
    long long v13 = &v12;
    uint64_t v14 = 0x3032000000;
    uint64_t v15 = __Block_byref_object_copy__75060;
    id v16 = __Block_byref_object_dispose__75061;
    id v17 = 0;
    dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
    char v4 = INUserActivityGetSerializationQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __INUserActivitySerializeToData_block_invoke;
    block[3] = &unk_1E551B620;
    dispatch_semaphore_t v10 = v3;
    long long v11 = &v12;
    id v9 = v2;
    uint64_t v5 = v3;
    dispatch_async(v4, block);

    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    id v6 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t __Block_byref_object_copy__75060(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__75061(uint64_t a1)
{
}

void __INUserActivitySerializeToData_block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __INUserActivitySerializeToData_block_invoke_2;
  v5[3] = &unk_1E551B5F8;
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  if (([v2 _createUserActivityDataWithOptions:0 completionHandler:v5] & 1) == 0) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
}

intptr_t __INUserActivitySerializeToData_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2 && !a3)
  {
    uint64_t v4 = [a2 copy];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  uint64_t v7 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v7);
}

id INUserActivityDeserializeFromData(void *a1)
{
  if (a1)
  {
    id v1 = (objc_class *)MEMORY[0x1E4F22488];
    id v2 = a1;
    id v3 = (void *)[[v1 alloc] _initWithUserActivityData:v2];

    id v4 = (id)[v3 _intentsIdentifier];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

_INPBUserActivity *INUserActivitySerializeToBackingStore(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_alloc_init(_INPBUserActivity);
    id v3 = [v1 _intentsIdentifier];
    if (v3) {
      [(_INPBUserActivity *)v2 setUri:v3];
    }
    id v4 = INUserActivitySerializeToData(v1);
    if (v4) {
      [(_INPBUserActivity *)v2 setData:v4];
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id INUserActivityDeserializeFromBackingStore(void *a1)
{
  if (a1)
  {
    id v1 = [a1 data];
    id v2 = INUserActivityDeserializeFromData(v1);
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void INFindMatchingAppsForIntent(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v4)
  {
    if (v3)
    {
      if (INFindMatchingAppsForIntent_onceToken != -1) {
        dispatch_once(&INFindMatchingAppsForIntent_onceToken, &__block_literal_global_108);
      }
      uint64_t v5 = (void *)INFindMatchingAppsForIntent_matchingSystemAppBundleIdentifiersByIntentName;
      long long v6 = [v3 _className];
      uint64_t v7 = [v5 objectForKeyedSubscript:v6];

      uint64_t v8 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        id v16 = "INFindMatchingAppsForIntent";
        __int16 v17 = 2112;
        uint64_t v18 = v7;
        __int16 v19 = 2112;
        id v20 = v3;
        _os_log_impl(&dword_18CB2F000, v8, OS_LOG_TYPE_INFO, "%s found matching system apps: %@ for intent: %@", buf, 0x20u);
      }
      id v9 = (void *)MEMORY[0x1E4F28C70];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __INFindMatchingAppsForIntent_block_invoke_215;
      v11[3] = &unk_1E551B670;
      id v12 = v7;
      id v13 = v3;
      id v14 = v4;
      id v10 = v7;
      objc_msgSend(v9, "_intents_matchExtensionsForIntent:shouldIgnoreLaunchId:completion:", v13, 1, v11);
    }
    else
    {
      id v10 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IntentsErrorDomain" code:2004 userInfo:0];
      (*((void (**)(id, void, id))v4 + 2))(v4, 0, v10);
    }
  }
}

void __INFindMatchingAppsForIntent_block_invoke_215(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 valueForKey:@"_plugIn"];
  uint64_t v8 = [v7 valueForKey:@"containingUrl"];

  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000;
  id v16 = __Block_byref_object_copy__75060;
  __int16 v17 = __Block_byref_object_dispose__75061;
  id v18 = (id)[*(id *)(a1 + 32) mutableCopy];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __INFindMatchingAppsForIntent_block_invoke_2;
  v12[3] = &unk_1E551B648;
  v12[4] = &v13;
  [v8 enumerateObjectsUsingBlock:v12];
  id v9 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v14[5];
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315906;
    id v20 = "INFindMatchingAppsForIntent_block_invoke";
    __int16 v21 = 2112;
    uint64_t v22 = v10;
    __int16 v23 = 2112;
    uint64_t v24 = v11;
    __int16 v25 = 2112;
    id v26 = v6;
    _os_log_impl(&dword_18CB2F000, v9, OS_LOG_TYPE_INFO, "%s found matching system & non-system apps: %@ for intent: %@ with error: %@", buf, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  _Block_object_dispose(&v13, 8);
}

void sub_18CD74C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __INFindMatchingAppsForIntent_block_invoke_2(uint64_t a1, void *a2)
{
  id v14 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v14;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  if (v4)
  {
    id v5 = [MEMORY[0x1E4F223B8] applicationProxyForBundleURL:v4];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = [v5 bundleIdentifier];
      if (v7)
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
        id v9 = *(void **)(v8 + 40);
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void **)(v8 + 40);
          *(void *)(v8 + 40) = v10;
        }
        else
        {
          uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
          uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v11 = *(void **)(v13 + 40);
          *(void *)(v13 + 40) = v12;
        }

        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v7];
      }
    }
  }
}

void __INFindMatchingAppsForIntent_block_invoke()
{
  v45[21] = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = (objc_class *)objc_opt_class();
  int v43 = NSStringFromClass(v0);
  v44[0] = v43;
  v45[0] = &unk_1EDBAB118;
  id v1 = (objc_class *)objc_opt_class();
  uint64_t v42 = NSStringFromClass(v1);
  v44[1] = v42;
  v45[1] = &unk_1EDBAB130;
  id v2 = (objc_class *)objc_opt_class();
  id v41 = NSStringFromClass(v2);
  v44[2] = v41;
  v45[2] = &unk_1EDBAB148;
  id v3 = (objc_class *)objc_opt_class();
  id v40 = NSStringFromClass(v3);
  v44[3] = v40;
  v45[3] = &unk_1EDBAB160;
  id v4 = (objc_class *)objc_opt_class();
  int v39 = NSStringFromClass(v4);
  void v44[4] = v39;
  v45[4] = &unk_1EDBAB178;
  id v5 = (objc_class *)objc_opt_class();
  long long v38 = NSStringFromClass(v5);
  v44[5] = v38;
  v45[5] = &unk_1EDBAB190;
  id v6 = (objc_class *)objc_opt_class();
  long long v37 = NSStringFromClass(v6);
  v44[6] = v37;
  v45[6] = &unk_1EDBAB1A8;
  uint64_t v7 = (objc_class *)objc_opt_class();
  long long v36 = NSStringFromClass(v7);
  v44[7] = v36;
  v45[7] = &unk_1EDBAB1C0;
  uint64_t v8 = (objc_class *)objc_opt_class();
  long long v35 = NSStringFromClass(v8);
  v44[8] = v35;
  v45[8] = &unk_1EDBAB1D8;
  id v9 = (objc_class *)objc_opt_class();
  char v34 = NSStringFromClass(v9);
  v44[9] = v34;
  v45[9] = &unk_1EDBAB1F0;
  id v10 = (objc_class *)objc_opt_class();
  long long v33 = NSStringFromClass(v10);
  v44[10] = v33;
  v45[10] = &unk_1EDBAB208;
  uint64_t v11 = (objc_class *)objc_opt_class();
  uint64_t v12 = NSStringFromClass(v11);
  v44[11] = v12;
  v45[11] = &unk_1EDBAB220;
  uint64_t v13 = (objc_class *)objc_opt_class();
  id v14 = NSStringFromClass(v13);
  v44[12] = v14;
  v45[12] = &unk_1EDBAB238;
  uint64_t v15 = (objc_class *)objc_opt_class();
  id v16 = NSStringFromClass(v15);
  v44[13] = v16;
  v45[13] = &unk_1EDBAB250;
  __int16 v17 = (objc_class *)objc_opt_class();
  id v18 = NSStringFromClass(v17);
  v44[14] = v18;
  v45[14] = &unk_1EDBAB268;
  __int16 v19 = (objc_class *)objc_opt_class();
  id v20 = NSStringFromClass(v19);
  v44[15] = v20;
  v45[15] = &unk_1EDBAB280;
  __int16 v21 = (objc_class *)objc_opt_class();
  uint64_t v22 = NSStringFromClass(v21);
  v44[16] = v22;
  v45[16] = &unk_1EDBAB298;
  __int16 v23 = (objc_class *)objc_opt_class();
  uint64_t v24 = NSStringFromClass(v23);
  v44[17] = v24;
  v45[17] = &unk_1EDBAB2B0;
  __int16 v25 = (objc_class *)objc_opt_class();
  id v26 = NSStringFromClass(v25);
  v44[18] = v26;
  v45[18] = &unk_1EDBAB2C8;
  uint64_t v27 = (objc_class *)objc_opt_class();
  id v28 = NSStringFromClass(v27);
  v44[19] = v28;
  v45[19] = &unk_1EDBAB2E0;
  uint64_t v29 = (objc_class *)objc_opt_class();
  long long v30 = NSStringFromClass(v29);
  v44[20] = v30;
  v45[20] = &unk_1EDBAB2F8;
  uint64_t v31 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v45 forKeys:v44 count:21];
  long long v32 = (void *)INFindMatchingAppsForIntent_matchingSystemAppBundleIdentifiersByIntentName;
  INFindMatchingAppsForIntent_matchingSystemAppBundleIdentifiersByIntentName = v31;
}

id INContainingAppBundleIdentifierForBundle(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F223F0];
  id v2 = [a1 bundleIdentifier];
  id v3 = [v1 bundleProxyForIdentifier:v2];

  id v4 = _INContainingBundleProxyWithBundleProxy(v3);
  id v5 = v4;
  if (v4)
  {
    id v6 = [v4 bundleIdentifier];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t INIsInternalInstall()
{
  if (INIsInternalInstall_onceToken != -1) {
    dispatch_once(&INIsInternalInstall_onceToken, &__block_literal_global_226);
  }
  return INIsInternalInstall_isInternal;
}

uint64_t __INIsInternalInstall_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  INIsInternalInstall_isInternal = result;
  return result;
}

SEL INSetterFromString(void *a1, objc_class *a2)
{
  id v3 = (const char *)[a1 cStringUsingEncoding:1];
  Property = class_getProperty(a2, v3);
  id v5 = property_copyAttributeValue(Property, "S");
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = [NSString stringWithCString:v5 encoding:1];
    free(v6);
  }
  else
  {
    uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%c", (char)__toupper(*v3));
    id v9 = [NSString stringWithCString:v3 + 1 encoding:1];
    uint64_t v7 = [NSString stringWithFormat:@"set%@%@:", v8, v9];
  }
  SEL v10 = NSSelectorFromString(v7);

  return v10;
}

id INTypedIntentWithIntent(void *a1)
{
  id v1 = a1;
  id v2 = [v1 _className];
  id v3 = NSClassFromString(v2);

  id v4 = v1;
  if (v3)
  {
    id v5 = [v1 backingStore];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    id v4 = v1;
    if (isKindOfClass)
    {
      id v7 = [v3 alloc];
      uint64_t v8 = [v1 identifier];
      id v9 = [v1 backingStore];
      id v4 = (void *)[v7 initWithIdentifier:v8 backingStore:v9];

      SEL v10 = [v1 launchId];
      [v4 _setLaunchId:v10];

      uint64_t v11 = [v1 extensionBundleId];
      [v4 _setExtensionBundleId:v11];

      uint64_t v12 = [v1 suggestedInvocationPhrase];
      [v4 setSuggestedInvocationPhrase:v12];

      uint64_t v13 = [v1 _parameterCombinations];
      [v4 _setParameterCombinations:v13];

      id v14 = [v1 _parameterContexts];
      [v4 _setParameterContexts:v14];
    }
  }
  id v15 = v4;

  return v15;
}

id INTypedObjectWithCustomObject(void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [v1 codableDescription];
  id v3 = [v2 className];
  id v4 = NSClassFromString(v3);

  if (v4)
  {
    id v5 = [v4 alloc];
    id v6 = [v1 identifier];
    id v7 = [v1 displayString];
    uint64_t v8 = (void *)[v5 initWithIdentifier:v6 displayString:v7];

    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v28 = v2;
    id v9 = [v2 attributes];
    SEL v10 = [v9 allValues];

    uint64_t v30 = [v10 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (!v30) {
      goto LABEL_28;
    }
    uint64_t v11 = *(void *)v32;
    uint64_t v29 = v8;
    while (1)
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(v10);
        }
        uint64_t v13 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        id v14 = [v13 propertyName];
        id v15 = [v1 valueForKey:v14];
        id v16 = v13;
        if (v16)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            __int16 v17 = v16;
          }
          else {
            __int16 v17 = 0;
          }
        }
        else
        {
          __int16 v17 = 0;
        }
        id v18 = v17;

        if (v15) {
          BOOL v19 = v18 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v20 = objc_msgSend(v15, "if_flatMap:", &__block_literal_global_239);
          }
          else
          {
            uint64_t v21 = v11;
            uint64_t v22 = v10;
            id v23 = v1;
            id v24 = v15;
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) == 0)
            {
              id v15 = v24;
              id v1 = v23;
              SEL v10 = v22;
              uint64_t v11 = v21;
              uint64_t v8 = v29;
              goto LABEL_22;
            }
            uint64_t v20 = INTypedObjectWithCustomObject(v24);
            id v1 = v23;
            SEL v10 = v22;
            uint64_t v11 = v21;
            uint64_t v8 = v29;
          }

          id v15 = (void *)v20;
        }
LABEL_22:
        uint64_t v26 = [v16 setter];
        if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)) {
          [v8 performSelector:v26 withObject:v15];
        }
        else {
          [v8 setValue:v15 forKey:v14];
        }
      }
      uint64_t v30 = [v10 countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (!v30)
      {
LABEL_28:

        id v2 = v28;
        goto LABEL_30;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_30:

  return v8;
}

id __INTypedObjectWithCustomObject_block_invoke(uint64_t a1, void *a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = INTypedObjectWithCustomObject(v2);
      v7[0] = v3;
      id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
    }
    else
    {

      id v6 = v2;
      id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v6 count:1];
    }
  }
  else
  {
    id v4 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v4;
}

id INObjectWithTypedObject(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = [v4 codableDescription];
    _INObjectWithTypedObject(v3, v5);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {

    id v6 = v3;
  }

  return v6;
}

id INTypedIntentResponseWithIntentResponse(void *a1)
{
  id v1 = a1;
  id v2 = [v1 _className];
  id v3 = NSClassFromString(v2);

  id v4 = v1;
  if (v3)
  {
    id v4 = v1;
    if ([v1 _type] == 2)
    {
      id v5 = [v3 alloc];
      id v6 = [v1 backingStore];
      id v4 = (void *)[v5 initWithBackingStore:v6];
    }
  }

  return v4;
}

void *INTypedInteractionWithInteraction(void *a1)
{
  id v1 = a1;
  id v2 = [v1 intent];
  id v3 = [v2 backingStore];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  id v5 = v1;
  if (isKindOfClass)
  {
    id v5 = (void *)[v1 copy];

    id v6 = [v1 intent];
    uint64_t v7 = INTypedIntentWithIntent(v6);
    uint64_t v8 = (void *)v5[1];
    v5[1] = v7;

    id v9 = [v1 intentResponse];
    uint64_t v10 = INTypedIntentResponseWithIntentResponse(v9);
    uint64_t v11 = (void *)v5[2];
    v5[2] = v10;
  }

  return v5;
}

id INLocalizedStringWithLocalizer(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v7) {
    id v7 = (id)objc_opt_new();
  }
  uint64_t v8 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  id v9 = [v8 bundleIdentifier];
  uint64_t v10 = [v7 bundleWithIdentifier:v9 fileURL:0];

  [v7 preferredLocalizationsForBundle:v10];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v12)
  {

LABEL_16:
    if (objc_msgSend(v6, "length", v20)) {
      id v18 = v6;
    }
    else {
      id v18 = v5;
    }
    id v14 = v18;
    goto LABEL_20;
  }
  uint64_t v13 = v12;
  id v14 = 0;
  uint64_t v15 = *(void *)v21;
  while (2)
  {
    uint64_t v16 = 0;
    __int16 v17 = v14;
    do
    {
      if (*(void *)v21 != v15) {
        objc_enumerationMutation(v11);
      }
      id v14 = (void *)CFBundleCopyLocalizedStringForLocalization();

      if (v14 && (objc_msgSend(v14, "isEqualToString:", v5, v20) & 1) == 0)
      {

        goto LABEL_20;
      }
      ++v16;
      __int16 v17 = v14;
    }
    while (v13 != v16);
    uint64_t v13 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v13) {
      continue;
    }
    break;
  }

  if (!v14) {
    goto LABEL_16;
  }
LABEL_20:

  return v14;
}

id INDictionaryWithObjectsForKeysPassingTest(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)[v3 mutableCopy];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = objc_msgSend(v3, "allKeys", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        if ((v4[2](v4, v11) & 1) == 0) {
          [v5 removeObjectForKey:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v5;
}

id INDictionaryWithContentsOfURLs(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  obuint64_t j = v1;
  uint64_t v22 = [obj countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v22)
  {
    uint64_t v21 = *(void *)v30;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v30 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = v3;
        id v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:*(void *)(*((void *)&v29 + 1) + 8 * v3)];
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        id v24 = [v4 allKeys];
        uint64_t v5 = [v24 countByEnumeratingWithState:&v25 objects:v33 count:16];
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = *(void *)v26;
          do
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              if (*(void *)v26 != v7) {
                objc_enumerationMutation(v24);
              }
              uint64_t v9 = *(void *)(*((void *)&v25 + 1) + 8 * i);
              uint64_t v10 = [v4 objectForKeyedSubscript:v9];
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                goto LABEL_16;
              }
              uint64_t v11 = [v2 objectForKeyedSubscript:v9];
              if (!v11
                || (uint64_t v12 = (void *)v11,
                    [v2 objectForKeyedSubscript:v9],
                    long long v13 = objc_claimAutoreleasedReturnValue(),
                    objc_opt_class(),
                    char isKindOfClass = objc_opt_isKindOfClass(),
                    v13,
                    v12,
                    (isKindOfClass & 1) != 0))
              {
                long long v15 = [v2 objectForKeyedSubscript:v9];
                long long v16 = v15;
                if (v15)
                {
                  id v17 = v15;
                }
                else
                {
                  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  [v2 setObject:v17 forKeyedSubscript:v9];
                }

                [v17 addObjectsFromArray:v10];
              }
              else
              {
LABEL_16:
                [v2 setObject:v10 forKeyedSubscript:v9];
              }
            }
            uint64_t v6 = [v24 countByEnumeratingWithState:&v25 objects:v33 count:16];
          }
          while (v6);
        }

        uint64_t v3 = v23 + 1;
      }
      while (v23 + 1 != v22);
      uint64_t v22 = [obj countByEnumeratingWithState:&v29 objects:v34 count:16];
    }
    while (v22);
  }

  uint64_t v18 = (void *)[v2 copy];

  return v18;
}

id INSchemaURLsForIntentNamesWithBundle(__CFBundle *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = [MEMORY[0x1E4F1CA48] array];
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v3 = INSchemaFileExtensions();
    uint64_t v4 = [v3 countByEnumeratingWithState:&v45 objects:v57 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v46 != v6) {
            objc_enumerationMutation(v3);
          }
          CFArrayRef v8 = CFBundleCopyResourceURLsOfType(a1, *(CFStringRef *)(*((void *)&v45 + 1) + 8 * i), 0);
          [v2 addObjectsFromArray:v8];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v45 objects:v57 count:16];
      }
      while (v5);
    }
  }
  else
  {
    id v2 = 0;
  }
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  obuint64_t j = v2;
  uint64_t v32 = [obj countByEnumeratingWithState:&v41 objects:v56 count:16];
  if (v32)
  {
    uint64_t v31 = *(void *)v42;
    *(void *)&long long v10 = 136315650;
    long long v29 = v10;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v42 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v41 + 1) + 8 * v11);
        long long v13 = (void *)MEMORY[0x192F98250]();
        id v40 = 0;
        long long v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v12 error:&v40];
        id v15 = v40;
        long long v16 = v15;
        if (v14)
        {
          id v33 = v15;
          long long v34 = v14;
          uint64_t v35 = v13;
          id v17 = [v14 objectForKeyedSubscript:@"INIntents"];
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          uint64_t v18 = [v17 countByEnumeratingWithState:&v36 objects:v49 count:16];
          if (v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = *(void *)v37;
            do
            {
              for (uint64_t j = 0; j != v19; ++j)
              {
                if (*(void *)v37 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = +[INIntentCodableDescription _intentClassNameWithDictionary:](INIntentCodableDescription, "_intentClassNameWithDictionary:", *(void *)(*((void *)&v36 + 1) + 8 * j), v29);
                if (v22)
                {
                  uint64_t v23 = [v12 path];
                  objc_msgSend(v9, "if_setObjectIfNonNil:forKey:", v23, v22);
                }
              }
              uint64_t v19 = [v17 countByEnumeratingWithState:&v36 objects:v49 count:16];
            }
            while (v19);
          }

          long long v14 = v34;
          long long v13 = v35;
          long long v16 = v33;
        }
        else
        {
          id v24 = (void *)INSiriLogContextIntents;
          if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
            long long v25 = v24;
            long long v26 = [v12 path];
            *(_DWORD *)buf = v29;
            uint64_t v51 = "INSchemaURLsForIntentNamesWithBundle";
            __int16 v52 = 2114;
            int v53 = v26;
            __int16 v54 = 2114;
            uint64_t v55 = v16;
            _os_log_error_impl(&dword_18CB2F000, v25, OS_LOG_TYPE_ERROR, "%s Invalid intent definition plist found at %{public}@, error: %{public}@", buf, 0x20u);
          }
        }

        ++v11;
      }
      while (v11 != v32);
      uint64_t v32 = [obj countByEnumeratingWithState:&v41 objects:v56 count:16];
    }
    while (v32);
  }

  long long v27 = (void *)[v9 copy];

  return v27;
}

id INIntentDefinitionURLsForBundleProxy(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bundleURL];

  if (v2)
  {
    uint64_t v3 = [v1 bundleURL];
    uint64_t v4 = INSchemaURLsWithBundleURL(v3);
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v4;
}

id INIntentDefinitionURLsForInstalledApps()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = [MEMORY[0x1E4F1CA48] array];
  id v1 = [MEMORY[0x1E4F223C8] enumeratorWithOptions:0];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "if_allIntentDefinitionURLs");
        uint64_t v7 = [v6 allObjects];
        [v0 addObjectsFromArray:v7];
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }
  CFArrayRef v8 = (void *)[v0 copy];

  return v8;
}

id INIntentDefinitionLocalizableFileURLsForBundleRecord(void *a1)
{
  id v1 = [a1 URL];
  uint64_t v2 = INIntentDefinitionLocalizableFileURLsForBundleWithURL(v1);

  return v2;
}

id INIntentDefinitionLocalizableFileURLsForBundleWithURL(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  Unique = (__CFBundle *)_CFBundleCreateUnique();
  if (Unique)
  {
    uint64_t v3 = Unique;
    id v25 = v1;
    uint64_t v4 = INSchemaURLsWithCFBundle(Unique);
    uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    CFArrayRef v6 = CFBundleCopyBundleLocalizations(v3);
    uint64_t v7 = (void *)MEMORY[0x1E4F28B50];
    CFArrayRef v8 = [MEMORY[0x1E4F1CA20] preferredLanguages];
    CFArrayRef v24 = v6;
    id v9 = [v7 preferredLocalizationsFromArray:v6 forPreferences:v8];

    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    obuint64_t j = v4;
    uint64_t v28 = [obj countByEnumeratingWithState:&v34 objects:v43 count:16];
    if (v28)
    {
      uint64_t v27 = *(void *)v35;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v35 != v27) {
            objc_enumerationMutation(obj);
          }
          uint64_t v29 = v10;
          long long v11 = [*(id *)(*((void *)&v34 + 1) + 8 * v10) lastPathComponent];
          long long v12 = [v11 stringByDeletingPathExtension];

          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          if (_INSupportedLocalizableFileExtensions_onceToken != -1) {
            dispatch_once(&_INSupportedLocalizableFileExtensions_onceToken, &__block_literal_global_383);
          }
          id v13 = (id)_INSupportedLocalizableFileExtensions_supportedLocalizableFileExtensions;
          uint64_t v14 = [v13 countByEnumeratingWithState:&v30 objects:v42 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v31;
            do
            {
              for (uint64_t i = 0; i != v15; ++i)
              {
                if (*(void *)v31 != v16) {
                  objc_enumerationMutation(v13);
                }
                CFStringRef v18 = *(const __CFString **)(*((void *)&v30 + 1) + 8 * i);
                uint64_t v19 = [v9 firstObject];
                CFURLRef v20 = CFBundleCopyResourceURLForLocalization(v3, v12, v18, 0, v19);

                if (v20) {
                  [v5 addObject:v20];
                }
              }
              uint64_t v15 = [v13 countByEnumeratingWithState:&v30 objects:v42 count:16];
            }
            while (v15);
          }

          uint64_t v10 = v29 + 1;
        }
        while (v29 + 1 != v28);
        uint64_t v28 = [obj countByEnumeratingWithState:&v34 objects:v43 count:16];
      }
      while (v28);
    }

    CFRelease(v3);
    uint64_t v21 = (void *)[v5 copy];

    id v1 = v25;
  }
  else
  {
    uint64_t v22 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      long long v39 = "INIntentDefinitionLocalizableFileURLsForBundleWithURL";
      __int16 v40 = 2114;
      id v41 = v1;
      _os_log_error_impl(&dword_18CB2F000, v22, OS_LOG_TYPE_ERROR, "%s Unable to create bundle with URL %{public}@", buf, 0x16u);
    }
    uint64_t v21 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v21;
}

id INIntentDefinitionLocalizableFileURLsForBundleProxy(void *a1)
{
  id v1 = [a1 bundleURL];
  uint64_t v2 = INIntentDefinitionLocalizableFileURLsForBundleWithURL(v1);

  return v2;
}

id INIntentDefinitionLocalizableFileURLsForInstalledApps()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = [MEMORY[0x1E4F1CA48] array];
  id v1 = [MEMORY[0x1E4F223C8] enumeratorWithOptions:0];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        CFArrayRef v6 = INIntentDefinitionLocalizableFileURLsForBundleRecord(*(void **)(*((void *)&v9 + 1) + 8 * i));
        [v0 addObjectsFromArray:v6];
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  uint64_t v7 = (void *)[v0 copy];

  return v7;
}

id INCExtensionPlugInBundleManagerPath()
{
  dispatch_queue_t v0 = [NSString stringWithUTF8String:""];
  id v1 = [v0 stringByAppendingString:@"/System/Library/Assistant/SiriKit/Plugins/"];

  return v1;
}

id INVocabulariesByLocaleByAddingInvocationPhrases(void *a1, void *a2, void *a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v52 = a3;
  uint64_t v7 = [v6 siriActionDefinitionURLs];
  if ([v7 count])
  {
    CFArrayRef v8 = (void *)MEMORY[0x1E4F1CAD0];
    long long v9 = [v7 allValues];
    long long v10 = [v8 setWithArray:v9];

    int v49 = v10;
    long long v11 = [v10 allObjects];
    [v6 bundleIdentifier];
    long long v12 = v65 = v5;
    id v50 = v6;
    id v13 = [v6 bundleIdentifier];
    __int16 v54 = +[INSchema _schemaWithIntentDefinitionURLs:v11 bundleIdentifier:v12 mainBundleIdentifier:v13 contentOptions:1];

    id v5 = v65;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    obuint64_t j = [v7 allKeys];
    uint64_t v55 = [obj countByEnumeratingWithState:&v74 objects:v86 count:16];
    if (v55)
    {
      uint64_t v53 = *(void *)v75;
      do
      {
        for (uint64_t i = 0; i != v55; ++i)
        {
          if (*(void *)v75 != v53) {
            objc_enumerationMutation(obj);
          }
          uint64_t v60 = *(void *)(*((void *)&v74 + 1) + 8 * i);
          uint64_t v15 = objc_msgSend(v54, "intentCodableDescriptionWithIntentClassName:");
          uint64_t v61 = [v15 phrases];
          if ([v61 count])
          {
            unint64_t v56 = v15;
            uint64_t v57 = i;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            id v58 = v52;
            uint64_t v62 = [v58 countByEnumeratingWithState:&v70 objects:v85 count:16];
            if (v62)
            {
              uint64_t v59 = *(void *)v71;
              do
              {
                uint64_t v16 = 0;
                do
                {
                  if (*(void *)v71 != v59) {
                    objc_enumerationMutation(v58);
                  }
                  uint64_t v64 = v16;
                  uint64_t v17 = *(void *)(*((void *)&v70 + 1) + 8 * v16);
                  CFStringRef v18 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v61, "count"));
                  long long v66 = 0u;
                  long long v67 = 0u;
                  long long v68 = 0u;
                  long long v69 = 0u;
                  id v19 = v61;
                  uint64_t v20 = [v19 countByEnumeratingWithState:&v66 objects:v84 count:16];
                  if (v20)
                  {
                    uint64_t v21 = v20;
                    uint64_t v22 = *(void *)v67;
                    do
                    {
                      for (uint64_t j = 0; j != v21; ++j)
                      {
                        if (*(void *)v67 != v22) {
                          objc_enumerationMutation(v19);
                        }
                        CFArrayRef v24 = *(void **)(*((void *)&v66 + 1) + 8 * j);
                        id v25 = [v24 localizedPhraseForLanguage:v17];
                        long long v26 = [v24 localizedPronunciationHintForLanguage:v17];
                        if ([v25 length])
                        {
                          uint64_t v27 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:2];
                          [v27 setObject:v25 forKeyedSubscript:@"VocabularyItemPhrase"];
                          if ([v26 length]) {
                            [v27 setObject:v26 forKeyedSubscript:@"VocabularyItemPronunciation"];
                          }
                          [v18 addObject:v27];
                        }
                      }
                      uint64_t v21 = [v19 countByEnumeratingWithState:&v66 objects:v84 count:16];
                    }
                    while (v21);
                  }

                  uint64_t v28 = [v65 objectForKeyedSubscript:v17];
                  if (v28)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      uint64_t v29 = v28;
                    }
                    else {
                      uint64_t v29 = 0;
                    }
                  }
                  else
                  {
                    uint64_t v29 = 0;
                  }
                  id v30 = v29;

                  long long v31 = (void *)[v30 mutableCopy];
                  if (v31) {
                    id v32 = v31;
                  }
                  else {
                    id v32 = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
                  }
                  long long v33 = v32;

                  long long v34 = [v33 objectForKeyedSubscript:@"ParameterVocabularies"];
                  if (v34)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      long long v35 = v34;
                    }
                    else {
                      long long v35 = 0;
                    }
                  }
                  else
                  {
                    long long v35 = 0;
                  }
                  id v36 = v35;

                  long long v37 = (void *)[v36 mutableCopy];
                  char v63 = v33;
                  if (v37) {
                    id v38 = v37;
                  }
                  else {
                    id v38 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
                  }
                  long long v39 = v38;

                  v82[0] = @"ParameterNames";
                  __int16 v40 = NSString;
                  id v41 = (objc_class *)objc_opt_class();
                  long long v42 = NSStringFromClass(v41);
                  long long v43 = [v40 stringWithFormat:@"%@.%@", v42, @"voiceCommand"];
                  v81 = v43;
                  uint64_t v44 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v81 count:1];
                  v82[1] = @"ParameterVocabulary";
                  v83[0] = v44;
                  v78[0] = @"VocabularyItemIdentifier";
                  v78[1] = @"VocabularyItemSynonyms";
                  v79[0] = v60;
                  v79[1] = v18;
                  long long v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v79 forKeys:v78 count:2];
                  v80 = v45;
                  long long v46 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v80 count:1];
                  v83[1] = v46;
                  long long v47 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v83 forKeys:v82 count:2];
                  [v39 addObject:v47];

                  [v63 setObject:v39 forKeyedSubscript:@"ParameterVocabularies"];
                  id v5 = v65;
                  [v65 setObject:v63 forKeyedSubscript:v17];

                  uint64_t v16 = v64 + 1;
                }
                while (v64 + 1 != v62);
                uint64_t v62 = [v58 countByEnumeratingWithState:&v70 objects:v85 count:16];
              }
              while (v62);
            }

            uint64_t v15 = v56;
            uint64_t i = v57;
          }
        }
        uint64_t v55 = [obj countByEnumeratingWithState:&v74 objects:v86 count:16];
      }
      while (v55);
    }

    id v6 = v50;
  }

  return v5;
}

CFTypeRef INIntentSlotValueTransformFromColor(void *a1)
{
  id v1 = a1;
  if ([v1 hasRed]
    && [v1 hasGreen]
    && [v1 hasBlue])
  {
    [v1 red];
    double v3 = v2;
    [v1 green];
    double v5 = v4;
    [v1 blue];
    double v7 = v6;
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000;
    CFArrayRef v8 = (uint64_t (*)(double, double, double, double))getCGColorCreateSRGBSymbolLoc_ptr;
    uint64_t v17 = getCGColorCreateSRGBSymbolLoc_ptr;
    if (!getCGColorCreateSRGBSymbolLoc_ptr)
    {
      long long v9 = (void *)CoreGraphicsLibrary();
      v15[3] = (uint64_t)dlsym(v9, "CGColorCreateSRGB");
      getCGColorCreateSRGBSymbolLoc_ptr = (_UNKNOWN *)v15[3];
      CFArrayRef v8 = (uint64_t (*)(double, double, double, double))v15[3];
    }
    _Block_object_dispose(&v14, 8);
    if (!v8)
    {
      dlerror();
      id v13 = (_Unwind_Exception *)abort_report_np();
      _Block_object_dispose(&v14, 8);
      _Unwind_Resume(v13);
    }
    long long v10 = (const void *)v8(v3 / 255.0, v5 / 255.0, v7 / 255.0, 1.0);
    CFTypeRef v11 = CFAutorelease(v10);
  }
  else
  {
    CFTypeRef v11 = 0;
  }

  return v11;
}

void *__getCGColorCreateSRGBSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = (void *)CoreGraphicsLibrary();
  uint64_t result = dlsym(v2, "CGColorCreateSRGB");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCGColorCreateSRGBSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CoreGraphicsLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!CoreGraphicsLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __CoreGraphicsLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E551B700;
    uint64_t v5 = 0;
    CoreGraphicsLibraryCore_frameworkLibrary = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = CoreGraphicsLibraryCore_frameworkLibrary;
    if (CoreGraphicsLibraryCore_frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return CoreGraphicsLibraryCore_frameworkLibrary;
}

uint64_t __CoreGraphicsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreGraphicsLibraryCore_frameworkLibrary = result;
  return result;
}

_INPBColor *INIntentSlotValueTransformToColor(uint64_t a1)
{
  uint64_t v10 = 0;
  CFTypeRef v11 = &v10;
  uint64_t v12 = 0x2020000000;
  double v2 = (uint64_t (*)(uint64_t))getCGColorGetNumberOfComponentsSymbolLoc_ptr;
  id v13 = getCGColorGetNumberOfComponentsSymbolLoc_ptr;
  if (!getCGColorGetNumberOfComponentsSymbolLoc_ptr)
  {
    double v3 = (void *)CoreGraphicsLibrary();
    v11[3] = (uint64_t)dlsym(v3, "CGColorGetNumberOfComponents");
    getCGColorGetNumberOfComponentsSymbolLoc_ptr = (_UNKNOWN *)v11[3];
    double v2 = (uint64_t (*)(uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (!v2) {
    goto LABEL_13;
  }
  if ((unint64_t)v2(a1) < 3)
  {
    long long v4 = 0;
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  CFTypeRef v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v5 = (uint64_t (*)(uint64_t))getCGColorGetComponentsSymbolLoc_ptr;
  id v13 = getCGColorGetComponentsSymbolLoc_ptr;
  if (!getCGColorGetComponentsSymbolLoc_ptr)
  {
    uint64_t v6 = (void *)CoreGraphicsLibrary();
    v11[3] = (uint64_t)dlsym(v6, "CGColorGetComponents");
    getCGColorGetComponentsSymbolLoc_ptr = (_UNKNOWN *)v11[3];
    uint64_t v5 = (uint64_t (*)(uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (!v5)
  {
LABEL_13:
    dlerror();
    long long v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  double v7 = (double *)v5(a1);
  long long v4 = objc_alloc_init(_INPBColor);
  [(_INPBColor *)v4 setRed:*v7 * 255.0];
  [(_INPBColor *)v4 setGreen:v7[1] * 255.0];
  [(_INPBColor *)v4 setBlue:v7[2] * 255.0];
LABEL_10:

  return v4;
}

void *__getCGColorGetNumberOfComponentsSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = (void *)CoreGraphicsLibrary();
  uint64_t result = dlsym(v2, "CGColorGetNumberOfComponents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCGColorGetNumberOfComponentsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCGColorGetComponentsSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = (void *)CoreGraphicsLibrary();
  uint64_t result = dlsym(v2, "CGColorGetComponents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCGColorGetComponentsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id INIntentSlotValueRedactedColorFromColor(void *a1)
{
  id v1 = a1;

  return v1;
}

INTextNoteContent *INIntentSlotValueTransformFromNoteContent(void *a1)
{
  id v1 = a1;
  int v2 = [v1 type];
  if (v2 == 2)
  {
    double v7 = [INImageNoteContent alloc];
    long long v4 = [v1 image];
    uint64_t v5 = [v4 image];
    CFArrayRef v8 = INIntentSlotValueTransformFromImageValue(v5);
    uint64_t v6 = [(INImageNoteContent *)v7 _initWithImage:v8];

    goto LABEL_5;
  }
  if (v2 == 1)
  {
    double v3 = [INTextNoteContent alloc];
    long long v4 = [v1 text];
    uint64_t v5 = [v4 text];
    uint64_t v6 = [(INTextNoteContent *)v3 initWithText:v5];
LABEL_5:

    goto LABEL_7;
  }
  uint64_t v6 = 0;
LABEL_7:

  return v6;
}

_INPBNoteContent *INIntentSlotValueTransformToNoteContent(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    int v2 = 0;
    goto LABEL_9;
  }
  int v2 = objc_alloc_init(_INPBNoteContent);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v3 = objc_alloc_init(_INPBTextNoteContent);
    long long v4 = [v1 text];
    [(_INPBTextNoteContent *)v3 setText:v4];

    [(_INPBNoteContent *)v2 setText:v3];
    uint64_t v5 = v2;
    uint64_t v6 = 1;
LABEL_7:
    [(_INPBNoteContent *)v5 setType:v6];

    goto LABEL_9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v3 = objc_alloc_init(_INPBImageNoteContent);
    double v7 = [v1 image];
    CFArrayRef v8 = INIntentSlotValueTransformToImageValue(v7);
    [(_INPBTextNoteContent *)v3 setImage:v8];

    [(_INPBNoteContent *)v2 setImage:v3];
    uint64_t v5 = v2;
    uint64_t v6 = 2;
    goto LABEL_7;
  }
  [(_INPBNoteContent *)v2 setType:0];
LABEL_9:

  return v2;
}

id INIntentSlotValueTransformFromNoteContents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        CFArrayRef v8 = INIntentSlotValueTransformFromNoteContent(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  long long v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToNoteContents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        CFArrayRef v8 = INIntentSlotValueTransformToNoteContent(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  long long v9 = (void *)[v2 copy];

  return v9;
}

BOOL _INPBPauseWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBLocationListReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(_INPBLocation);
    if (!PBReaderPlaceMark() || !_INPBLocationReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addLocation:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBRunVoiceCommandIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        uint64_t v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        [a1 setAppBundleId:v17];
        goto LABEL_74;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_88:
        objc_msgSend(a1, "setIntentCategory:", v25, v57, v58);
        goto LABEL_75;
      case 3u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_92:
        [a1 setCustomResponsesDisabled:v28 != 0];
        goto LABEL_75;
      case 4u:
        PBReaderReadString();
        uint64_t v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        [a1 setResponseTemplate:v17];
        goto LABEL_74;
      case 5u:
        uint64_t v17 = objc_alloc_init(_INPBDictionary);
        if (!PBReaderPlaceMark() || (_INPBDictionaryReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_111;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParameters:", v17, 0, 0);
        goto LABEL_74;
      case 6u:
        PBReaderReadString();
        uint64_t v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        [a1 setVerb:v17];
        goto LABEL_74;
      case 7u:
        uint64_t v17 = objc_alloc_init(_INPBArchivedObject);
        if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v17, a2)) {
          goto LABEL_111;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnderlyingIntent:", v17, 0, 0);
        goto LABEL_74;
      case 8u:
        PBReaderReadString();
        uint64_t v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        [a1 setLocalizedAppName:v17];
        goto LABEL_74;
      case 9u:
        uint64_t v17 = objc_alloc_init(_INPBArchivedObject);
        if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v17, a2)) {
          goto LABEL_111;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnderlyingIntentResponse:", v17, 0, 0);
        goto LABEL_74;
      case 0xAu:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v38 = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = v34;
        }
LABEL_97:
        objc_msgSend(a1, "setToggleState:", v38, v57, v58);
        goto LABEL_75;
      case 0xBu:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        while (2)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v41 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v41 = 0;
        }
LABEL_101:
        [a1 setContinueRunning:v41 != 0];
        goto LABEL_75;
      case 0xCu:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        while (2)
        {
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v14 = v46++ >= 9;
              if (v14)
              {
                uint64_t v47 = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v47 = 0;
        }
LABEL_105:
        [a1 setInterstitialDisabled:v47 != 0];
        goto LABEL_75;
      case 0xDu:
        PBReaderReadString();
        uint64_t v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        [a1 setUnderlyingIntentTitle:v17];
        goto LABEL_74;
      case 0xEu:
        uint64_t v17 = objc_alloc_init(_INPBVoiceCommandStepInfo);
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        if (PBReaderPlaceMark() && _INPBVoiceCommandStepInfoReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addStep:", v17, 0, 0);
          }
LABEL_74:

LABEL_75:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_111:

        return 0;
      case 0xFu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        while (2)
        {
          uint64_t v54 = *v3;
          unint64_t v55 = *(void *)(a2 + v54);
          if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
            *(void *)(a2 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v14 = v52++ >= 9;
              if (v14)
              {
                uint64_t v53 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v53 = 0;
        }
LABEL_109:
        [a1 setPrefersExecutionOnCompanion:v53 != 0];
        goto LABEL_75;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_75;
    }
  }
}

INTask *INIntentSlotValueTransformFromTask(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    unint64_t v30 = [INTask alloc];
    char v32 = [v1 title];
    uint64_t v29 = INIntentSlotValueTransformFromDataString(v32);
    int v2 = [v1 hasStatus];
    int v3 = [v1 status];
    uint64_t v4 = v3 == 10;
    if (v3 == 20) {
      uint64_t v4 = 2;
    }
    if (v2) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = [v1 hasTaskType];
    int v7 = [v1 taskType];
    uint64_t v8 = v7 == 10;
    if (v7 == 20) {
      uint64_t v8 = 2;
    }
    if (v6) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    char v31 = [v1 spatialEventTrigger];
    uint64_t v25 = INIntentSlotValueTransformFromSpatialEventTrigger(v31);
    uint64_t v28 = [v1 temporalEventTrigger];
    char v24 = INIntentSlotValueTransformFromTemporalEventTrigger(v28);
    unsigned int v27 = [v1 createdDateTime];
    unint64_t v23 = INIntentSlotValueTransformFromDateTime(v27);
    char v26 = [v1 modifiedDateTime];
    unint64_t v10 = INIntentSlotValueTransformFromDateTime(v26);
    uint64_t v11 = [v1 identifier];
    int v12 = [v1 hasPriority];
    int v13 = [v1 priority];
    uint64_t v14 = v13 == 1;
    if (v13 == 2) {
      uint64_t v14 = 2;
    }
    if (v12) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = [v1 contactEventTrigger];
    uint64_t v17 = INIntentSlotValueTransformFromContactEventTrigger(v16);
    unsigned int v18 = [v1 hasTaskReference];
    if ([v1 taskReference]) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
    unsigned int v20 = [v1 parentIdentifier];

    uint64_t v21 = [(INTask *)v30 initWithTitle:v29 status:v5 taskType:v9 spatialEventTrigger:v25 temporalEventTrigger:v24 createdDateComponents:v23 modifiedDateComponents:v10 identifier:v11 priority:v15 contactEventTrigger:v17 taskReference:v19 parentIdentifier:v20];
  }
  else
  {
    uint64_t v21 = 0;
  }

  return v21;
}

_INPBTask *INIntentSlotValueTransformToTask(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    int v2 = objc_alloc_init(_INPBTask);
    int v3 = [v1 title];
    uint64_t v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBTask *)v2 setTitle:v4];

    unint64_t v5 = [v1 status];
    if (v5 >= 3) {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v6 = (10 * v5);
    }
    [(_INPBTask *)v2 setStatus:v6];
    int v7 = [v1 spatialEventTrigger];
    uint64_t v8 = INIntentSlotValueTransformToSpatialEventTrigger(v7);
    [(_INPBTask *)v2 setSpatialEventTrigger:v8];

    uint64_t v9 = [v1 temporalEventTrigger];
    unint64_t v10 = INIntentSlotValueTransformToTemporalEventTrigger(v9);
    [(_INPBTask *)v2 setTemporalEventTrigger:v10];

    uint64_t v11 = [v1 createdDateComponents];
    int v12 = INIntentSlotValueTransformToDateTime(v11);
    [(_INPBTask *)v2 setCreatedDateTime:v12];

    int v13 = [v1 modifiedDateComponents];
    uint64_t v14 = INIntentSlotValueTransformToDateTime(v13);
    [(_INPBTask *)v2 setModifiedDateTime:v14];

    uint64_t v15 = [v1 identifier];
    [(_INPBTask *)v2 setIdentifier:v15];

    unint64_t v16 = [v1 taskType];
    if (v16 >= 3) {
      uint64_t v17 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v17 = (10 * v16);
    }
    [(_INPBTask *)v2 setTaskType:v17];
    unint64_t v18 = [v1 priority];
    if (v18 >= 3) {
      uint64_t v19 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v19 = v18;
    }
    [(_INPBTask *)v2 setPriority:v19];
    unsigned int v20 = [v1 contactEventTrigger];
    uint64_t v21 = INIntentSlotValueTransformToContactEventTrigger(v20);
    [(_INPBTask *)v2 setContactEventTrigger:v21];

    if ([v1 taskReference] == 1) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = 0x7FFFFFFFLL;
    }
    [(_INPBTask *)v2 setTaskReference:v22];
    unint64_t v23 = [v1 parentIdentifier];

    [(_INPBTask *)v2 setParentIdentifier:v23];
  }
  else
  {
    int v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromTasks(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    int v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromTask(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTasks(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    int v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToTask(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTaskFromTask(void *a1)
{
  id v1 = a1;

  return v1;
}

id INIntentError(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int v7 = objc_opt_new();
  [v7 setObject:v6 forKeyedSubscript:*MEMORY[0x1E4F28228]];

  if (v5) {
    [v7 setObject:v5 forKeyedSubscript:*MEMORY[0x1E4F28A50]];
  }
  uint64_t v8 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IntentsErrorDomain" code:a1 userInfo:v7];

  return v8;
}

uint64_t _INPBConditionReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_32;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        uint64_t v23 = *(unsigned char *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        [a1 setConditionalOperator:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromGEOLocation(void *a1)
{
  if (a1)
  {
    id v1 = (objc_class *)MEMORY[0x1E4F1E5F0];
    id v2 = a1;
    id v3 = [v1 alloc];
    uint64_t v4 = [v2 latLng];
    [v4 lat];
    CLLocationDegrees v6 = v5;
    int v7 = [v2 latLng];
    [v7 lng];
    CLLocationCoordinate2D v9 = CLLocationCoordinate2DMake(v6, v8);
    double v10 = (double)(int)[v2 altitude];
    [v2 horizontalAccuracy];
    double v12 = v11;
    [v2 verticalAccuracy];
    double v14 = v13;
    [v2 course];
    double v16 = v15;
    [v2 speed];
    double v18 = v17;
    uint64_t v19 = (void *)MEMORY[0x1E4F1C9C8];
    [v2 timestamp];
    double v21 = v20;

    char v22 = [v19 dateWithTimeIntervalSince1970:v21];
    uint64_t v23 = objc_msgSend(v3, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", v22, v9.latitude, v9.longitude, v10, v12, v14, v16, v18);
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

id INIntentSlotValueTransformToGEOLocation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    [v1 coordinate];
    double v3 = v2;
    double v5 = v4;
    id v6 = objc_alloc_init(MEMORY[0x1E4F64638]);
    [v6 setLat:v3];
    [v6 setLng:v5];
    id v7 = objc_alloc_init(MEMORY[0x1E4F64660]);
    [v7 setLatLng:v6];
    [v1 altitude];
    [v7 setAltitude:(int)v8];
    [v1 horizontalAccuracy];
    objc_msgSend(v7, "setHorizontalAccuracy:");
    [v1 verticalAccuracy];
    objc_msgSend(v7, "setVerticalAccuracy:");
    [v1 course];
    objc_msgSend(v7, "setCourse:");
    [v1 speed];
    objc_msgSend(v7, "setSpeed:");
    CLLocationCoordinate2D v9 = [v1 timestamp];

    [v9 timeIntervalSince1970];
    objc_msgSend(v7, "setTimestamp:");
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id INIntentSlotValueTransformFromGEOLocations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformFromGEOLocation(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  CLLocationCoordinate2D v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToGEOLocations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = INIntentSlotValueTransformToGEOLocation(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  CLLocationCoordinate2D v9 = (void *)[v2 copy];

  return v9;
}

uint64_t _INPBFinancialAccountValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        double v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_44;
      case 2u:
        double v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAccountNickname:", v17, 0, 0);
        goto LABEL_44;
      case 3u:
        PBReaderReadString();
        double v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setAccountNumber:v17];
        goto LABEL_44;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_51:
        [a1 setAccountType:v25];
        goto LABEL_45;
      case 5u:
        double v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOrganizationName:", v17, 0, 0);
        goto LABEL_44;
      case 6u:
        double v17 = objc_alloc_init(_INPBBalanceAmountValue);
        if (!PBReaderPlaceMark() || (_INPBBalanceAmountValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBalance:", v17, 0, 0);
        goto LABEL_44;
      case 7u:
        double v17 = objc_alloc_init(_INPBBalanceAmountValue);
        if PBReaderPlaceMark() && (_INPBBalanceAmountValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSecondaryBalance:", v17, 0, 0);
LABEL_44:

LABEL_45:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_53:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_45;
    }
  }
}

id INIntentSlotValueTransformFromLocationValue(void *a1)
{
  id v1 = a1;
  double v2 = v1;
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  id v3 = [v1 valueMetadata];
  INPrivacyEntitlementValidateValueMetadata(v3);

  uint64_t v4 = [v2 mapItemStorage];
  if (v4) {
    goto LABEL_3;
  }
  uint64_t v5 = [v2 place];
  if (v5)
  {
    uint64_t v4 = [MEMORY[0x1E4F646E0] mapItemStorageForPlaceData:v5];

    if (v4)
    {
LABEL_3:
      uint64_t v5 = [MEMORY[0x1E4F1E630] placemarkWithGEOMapItem:v4];
      if (!v5)
      {
        [v4 coordinate];
        if (v7 >= -180.0 && v7 <= 180.0 && v6 >= -90.0 && v6 <= 90.0)
        {
          char v8 = (void *)[objc_alloc(MEMORY[0x1E4F1E5F0]) initWithLatitude:v6 longitude:v7];
          id v9 = objc_alloc(MEMORY[0x1E4F1E630]);
          unint64_t v10 = [v4 addressDictionary];
          uint64_t v11 = [v4 areasOfInterest];
          uint64_t v5 = (void *)[v9 initWithLocation:v8 addressDictionary:v10 region:0 areasOfInterest:v11];
        }
      }
      goto LABEL_14;
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_14:

LABEL_15:

  return v5;
}

_INPBLocation *INIntentSlotValueTransformToLocation(void *a1)
{
  id v1 = INIntentSlotValueTransformToLocationValue(a1);
  if (v1)
  {
    double v2 = objc_alloc_init(_INPBLocation);
    [(_INPBLocation *)v2 addValue:v1];
  }
  else
  {
    double v2 = 0;
  }

  return v2;
}

_INPBLocationValue *INIntentSlotValueTransformToLocationValue(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    double v2 = 0;
    goto LABEL_15;
  }
  double v2 = objc_alloc_init(_INPBLocationValue);
  id v3 = [v1 _geoMapItem];
  if (v3) {
    goto LABEL_4;
  }
  id v4 = objc_alloc(MEMORY[0x1E4F64660]);
  uint64_t v5 = [v1 location];
  [v5 coordinate];
  double v7 = v6;
  char v8 = [v1 location];
  [v8 coordinate];
  id v9 = objc_msgSend(v4, "initWithLatitude:longitude:", v7);

  id v10 = objc_alloc(MEMORY[0x1E4F64698]);
  uint64_t v11 = [v1 postalAddress];
  unint64_t v12 = [v11 dictionaryRepresentation];
  char v13 = [v1 name];
  LODWORD(v26) = 0;
  id v3 = (void *)[v10 initWithWithLocation:v9 addressDictionary:v12 name:v13 businessURL:0 phoneNumber:0 sessionID:0 muid:0.0 attributionID:0 sampleSizeForUserRatingScore:0 normalizedUserRatingScore:v26];

  if (v3)
  {
LABEL_4:
    uint64_t v14 = [v3 _placeData];
    if (!v14)
    {
      int v15 = [v1 location];
      [v15 coordinate];
      double latitude = v28.latitude;
      double longitude = v28.longitude;
      if (!CLLocationCoordinate2DIsValid(v28)) {
        goto LABEL_10;
      }
      double v18 = [v1 name];
      uint64_t v14 = __INGEOPDPlaceCreateFromCoordinate(v18, latitude, longitude);

      if (!v14)
      {
LABEL_11:
        char v19 = [MEMORY[0x1E4F646E0] mapItemStorageForGEOMapItem:v3 clientAttributes:0];
        if (v19) {
          [(_INPBLocationValue *)v2 setMapItemStorage:v19];
        }
        goto LABEL_13;
      }
    }
    [(_INPBLocationValue *)v2 setPlace:v14];
    int v15 = (void *)v14;
LABEL_10:

    goto LABEL_11;
  }
  id v3 = [v1 location];
  [v3 coordinate];
  double v21 = v29.latitude;
  double v22 = v29.longitude;
  if (!CLLocationCoordinate2DIsValid(v29)) {
    goto LABEL_14;
  }
  unint64_t v23 = [v1 name];
  char v19 = __INGEOPDPlaceCreateFromCoordinate(v23, v21, v22);

  if (v19) {
    [(_INPBLocationValue *)v2 setPlace:v19];
  }
  char v24 = (void *)[objc_alloc(MEMORY[0x1E4F64828]) initWithLatitude:v21 longitude:v22];
  uint64_t v25 = [MEMORY[0x1E4F646E0] mapItemStorageForPlace:v24];
  if (v25) {
    [(_INPBLocationValue *)v2 setMapItemStorage:v25];
  }

LABEL_13:
LABEL_14:

LABEL_15:

  return v2;
}

id INIntentSlotValueTransformFromLocations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformFromLocation(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  id v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToLocations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformToLocation(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  id v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformFromLocationValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformFromLocationValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  id v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueRedactedValueFromLocationValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 valueMetadata];
  uint64_t v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0) {
    id v6 = 0;
  }
  else {
    id v6 = v3;
  }

  return v6;
}

_INPBLocation *INIntentSlotValueRedactedLocationFromLocation(void *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    double v7 = objc_alloc_init(_INPBLocation);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    char v8 = objc_msgSend(v5, "values", 0);
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          long long v13 = INIntentSlotValueRedactedValueFromLocationValue(*(void **)(*((void *)&v15 + 1) + 8 * i), a2);
          if (v13) {
            [(_INPBLocation *)v7 addValue:v13];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }
  }
  else
  {
    double v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedLocationsFromLocations(void *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  double v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v8 = v5;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = INIntentSlotValueRedactedLocationFromLocation(*(void **)(*((void *)&v16 + 1) + 8 * i), a2, v6);
        objc_msgSend(v7, "addObject:", v13, (void)v16);
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }

  long long v14 = (void *)[v7 copy];

  return v14;
}

uint64_t _INPBSetRadioStationIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        long long v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_43;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_50:
        [a1 setRadioType:v25];
        goto LABEL_44;
      case 3u:
        long long v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFrequency:", v17, 0, 0);
        goto LABEL_43;
      case 4u:
        long long v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStationName:", v17, 0, 0);
        goto LABEL_43;
      case 5u:
        long long v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setChannel:", v17, 0, 0);
        goto LABEL_43;
      case 6u:
        long long v17 = objc_alloc_init(_INPBInteger);
        if PBReaderPlaceMark() && (_INPBIntegerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPresetNumber:", v17, 0, 0);
LABEL_43:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_52:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

BOOL _INPBBuildIdReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 3)
      {
        long long v17 = PBReaderReadString();
        [a1 setBuildNumber:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    long long v17 = PBReaderReadString();
    [a1 setVersionNumber:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForNotebookItemsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        long long v17 = objc_alloc_init(_INPBNote);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v17, a2)) {
          goto LABEL_48;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addNotes:", v17, 0, 0);
        }
        goto LABEL_33;
      case 2u:
        long long v17 = objc_alloc_init(_INPBTaskList);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v17, a2)) {
          goto LABEL_48;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addTaskLists:", v17, 0, 0);
        }
        goto LABEL_33;
      case 3u:
        long long v17 = objc_alloc_init(_INPBTask);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (PBReaderPlaceMark() && _INPBTaskReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addTasks:", v17, 0, 0);
          }
LABEL_33:

LABEL_46:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_48:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_45:
        objc_msgSend(a1, "setSortType:", v25, v26, v27);
        goto LABEL_46;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_46;
    }
  }
}

uint64_t _INPBDateTimeRangeValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        long long v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_73;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_55;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (2)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v20;
        }
LABEL_62:
        [a1 setStartCalendar:v24];
        goto LABEL_56;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v31 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v27;
        }
LABEL_67:
        [a1 setEndCalendar:v31];
        goto LABEL_56;
      case 4u:
        long long v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_73;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartDateTime:", v17, 0, 0);
        goto LABEL_55;
      case 5u:
        long long v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_73;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndDateTime:", v17, 0, 0);
        goto LABEL_55;
      case 6u:
        long long v17 = objc_alloc_init(_INPBRecurrenceValue);
        if PBReaderPlaceMark() && (_INPBRecurrenceValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRecurrence:", v17, 0, 0);
LABEL_55:

LABEL_56:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_73:

        return 0;
      case 8u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v35 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_71:
        [a1 setAllDay:v35 != 0];
        goto LABEL_56;
      case 9u:
        PBReaderReadString();
        long long v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setName:v17];
        goto LABEL_55;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_56;
    }
  }
}

BOOL _INPBGeographicalFeatureListReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        long long v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    long long v17 = objc_alloc_init(_INPBGeographicalFeature);
    if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addGeographicalFeature:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INCreateEventConfirmationReasonHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCreateEventConfirmationReasonGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INCreateEventConfirmationReasonGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INCreateEventConfirmationReasonGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return *(&off_1E551B8F8 + a1 - 1);
  }
}

uint64_t INCreateEventConfirmationReasonWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"scheduleConflict"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"sendInvitationToParticipants"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"dateTimeClarification"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCreateEventConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"date time clarification";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"send invitation to participants";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"schedule conflict";
LABEL_7:
      id v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  id v5 = 0;
LABEL_9:

  return v5;
}

BOOL _INPBRunVoiceCommandIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        long long v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        long long v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceCommand:", v17, 0, 0);
        goto LABEL_34;
      case 3u:
        long long v17 = objc_alloc_init(_INPBVoiceCommandDeviceInformation);
        if (!PBReaderPlaceMark() || (_INPBVoiceCommandDeviceInformationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginDevice:", v17, 0, 0);
        goto LABEL_34;
      case 4u:
        long long v17 = objc_alloc_init(_INPBIntentExecutionResult);
        if PBReaderPlaceMark() && (_INPBIntentExecutionResultReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setExecutionResult:", v17, 0, 0);
LABEL_34:

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      case 5u:
        PBReaderReadString();
        long long v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setPreviousIntentIdentifier:v17];
        goto LABEL_34;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_35;
    }
  }
}

BOOL _INPBStringListReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        long long v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    long long v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBTaskReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        long long v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_93;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_69;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_76:
        [a1 setStatus:v25];
        goto LABEL_70;
      case 4u:
        long long v17 = objc_alloc_init(_INPBSpatialEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBSpatialEventTriggerReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_93;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpatialEventTrigger:", v17, 0, 0);
        goto LABEL_69;
      case 5u:
        long long v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_93;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
        goto LABEL_69;
      case 6u:
        long long v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_93;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedDateTime:", v17, 0, 0);
        goto LABEL_69;
      case 7u:
        long long v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_93;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setModifiedDateTime:", v17, 0, 0);
        goto LABEL_69;
      case 8u:
        PBReaderReadString();
        long long v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setIdentifier:v17];
        goto LABEL_69;
      case 9u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_81:
        [a1 setTaskType:v32];
        goto LABEL_70;
      case 0xAu:
        long long v17 = objc_alloc_init(_INPBContactEventTrigger);
        if PBReaderPlaceMark() && (_INPBContactEventTriggerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setContactEventTrigger:", v17, 0, 0);
LABEL_69:

LABEL_70:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_93:

        return 0;
      case 0xBu:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v35;
        }
LABEL_86:
        [a1 setTaskReference:v39];
        goto LABEL_70;
      case 0xCu:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v14 = v41++ >= 9;
              if (v14)
              {
                uint64_t v46 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = v42;
        }
LABEL_91:
        [a1 setPriority:v46];
        goto LABEL_70;
      case 0xDu:
        PBReaderReadString();
        long long v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setParentIdentifier:v17];
        goto LABEL_69;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_70;
    }
  }
}

BOOL _INPBRidePartySizeOptionReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(_INPBPriceRangeValue);
        if (!PBReaderPlaceMark() || !_INPBPriceRangeValueReadFrom(v18, a2))
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPriceRange:", v18, 0, 0);
        goto LABEL_28;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(_INPBRangeValue);
        if (!PBReaderPlaceMark() || (_INPBRangeValueReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_33;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPartySizeRange:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadString();
    char v18 = (_INPBPriceRangeValue *)objc_claimAutoreleasedReturnValue();
    [a1 setSizeDescription:v18];
LABEL_28:

    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBWellnessValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v18 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPbDoubleValue:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBInteger);
    if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setOrdinalValue:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INGetCarPowerLevelStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551B928 + a1);
  }
}

void sub_18CD92B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCSSearchableItemAttributeSetClass_block_invoke_79697(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CoreSpotlightLibraryCore_frameworkLibrary_79698)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __CoreSpotlightLibraryCore_block_invoke_79699;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551B958;
    uint64_t v6 = 0;
    CoreSpotlightLibraryCore_frameworkLibrary_79698 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!CoreSpotlightLibraryCore_frameworkLibrary_79698)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CSSearchableItemAttributeSet");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getCSSearchableItemAttributeSetClass_softClass_79696 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreSpotlightLibraryCore_block_invoke_79699()
{
  uint64_t result = _sl_dlopen();
  CoreSpotlightLibraryCore_frameworkLibrary_79698 = result;
  return result;
}

uint64_t _INIsIntentValidForSuggestion(void *a1)
{
  id v1 = a1;
  if ([v1 _type] == 2)
  {
    uint64_t v2 = [v1 _codableDescription];
    int v3 = [v2 isDeprecated];

    if (v3)
    {
      NSLog((NSString *)@"Cannot create shortcut from intent (%@) because it has been deprecated", v1);
LABEL_13:
      uint64_t v6 = 0;
      goto LABEL_14;
    }
  }
  uint64_t v4 = [v1 _validParameterCombinations];
  uint64_t v5 = [v4 count];

  if (!v5)
  {
    NSLog((NSString *)@"Cannot create shortcut from intent (%@) because it has no valid parameter combinations", v1);
    goto LABEL_13;
  }
  if (([v1 _hasTitle] & 1) == 0)
  {
    uint64_t v7 = [v1 _nonNilParameters];
    char v8 = (void *)[v7 mutableCopy];

    unsigned int v9 = [(id)objc_opt_class() _ignoredParameters];
    [v8 minusSet:v9];

    if ([v8 count])
    {
      unint64_t v10 = [v8 allObjects];
      uint64_t v11 = [v10 componentsJoinedByString:@", "];
    }
    else
    {
      uint64_t v11 = @"(No Parameters)";
    }
    unint64_t v12 = [v1 _className];
    NSLog((NSString *)@"Cannot create shortcut from intent (%@) because title is empty. Please make sure that your intent definition includes the following shortcut type for %@: %@.", v1, v12, v11);

    goto LABEL_13;
  }
  uint64_t v6 = 1;
LABEL_14:

  return v6;
}

BOOL _INPBNoteReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBNoteContent);
        if (!PBReaderPlaceMark() || !_INPBNoteContentReadFrom(v17, a2)) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addContent:", v17, 0, 0);
        }
        goto LABEL_39;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupName:", v17, 0, 0);
        goto LABEL_39;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedDateTime:", v17, 0, 0);
        goto LABEL_39;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBDateTime);
        if PBReaderPlaceMark() && (_INPBDateTimeReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setModifiedDateTime:", v17, 0, 0);
LABEL_39:

LABEL_40:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      case 6u:
        PBReaderReadString();
        unint64_t v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setIdentifier:v17];
        goto LABEL_39;
      case 7u:
        PBReaderReadString();
        unint64_t v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setAccountIdentifier:v17];
        goto LABEL_39;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_40;
    }
  }
}

BOOL _INPBLongListReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBLong);
    if (!PBReaderPlaceMark() || !_INPBLongReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBActivityListReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBActivity);
        if (!PBReaderPlaceMark() || !_INPBActivityReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addActivity:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBCondition);
    if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setCondition:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INCodablePlacemarkAttributeMetadataTypeAsString(uint64_t a1)
{
  id v1 = @"Name";
  if (a1 == 1) {
    id v1 = @"Address";
  }
  if (a1 == 2) {
    return @"City";
  }
  else {
    return v1;
  }
}

INEventParticipant *INIntentSlotValueTransformFromEventParticipant(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INEventParticipant alloc];
    int v3 = [v1 person];
    uint64_t v4 = INIntentSlotValueTransformFromContact(v3);
    int v5 = [v1 hasStatus];
    uint64_t v6 = [v1 status] - 2;
    if (v6 <= 6) {
      uint64_t v7 = v6 + 1;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v5) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    unsigned int v9 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v1, "isUser"));
    unint64_t v10 = NSNumber;
    uint64_t v11 = [v1 isEventOrganizer];

    unint64_t v12 = [v10 numberWithBool:v11];
    char v13 = [(INEventParticipant *)v2 initWithPerson:v4 status:v8 isUser:v9 isEventOrganizer:v12];
  }
  else
  {
    char v13 = 0;
  }

  return v13;
}

_INPBEventParticipant *INIntentSlotValueTransformToEventParticipant(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBEventParticipant);
    int v3 = [v1 person];
    uint64_t v4 = INIntentSlotValueTransformToContact(v3);
    [(_INPBEventParticipant *)v2 setPerson:v4];

    unint64_t v5 = [v1 status];
    if (v5 < 8) {
      uint64_t v6 = (v5 + 1);
    }
    else {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    [(_INPBEventParticipant *)v2 setStatus:v6];
    uint64_t v7 = [v1 isUser];
    -[_INPBEventParticipant setIsUser:](v2, "setIsUser:", [v7 BOOLValue]);

    uint64_t v8 = [v1 isEventOrganizer];

    -[_INPBEventParticipant setIsEventOrganizer:](v2, "setIsEventOrganizer:", [v8 BOOLValue]);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromEventParticipants(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromEventParticipant(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToEventParticipants(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToEventParticipant(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedEventParticipantFromEventParticipant(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBTemperatureListReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBTemperature);
    if (!PBReaderPlaceMark() || !_INPBTemperatureReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addTemperature:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBRequestRideIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_55;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupLocation:", v17, 0, 0);
        goto LABEL_55;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDropOffLocation:", v17, 0, 0);
        goto LABEL_55;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRideOptionName:", v17, 0, 0);
        goto LABEL_55;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPartySize:", v17, 0, 0);
        goto LABEL_55;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentMethodName:", v17, 0, 0);
        goto LABEL_55;
      case 7u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_61:
        [a1 setUsesApplePayForPayment:v21 != 0];
        goto LABEL_56;
      case 8u:
        unint64_t v17 = objc_alloc_init(_INPBPaymentMethod);
        if (!PBReaderPlaceMark() || (_INPBPaymentMethodReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentMethod:", v17, 0, 0);
        goto LABEL_55;
      case 9u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_63;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupTime:", v17, 0, 0);
        goto LABEL_55;
      case 0xAu:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setScheduledPickupTime:", v17, 0, 0);
LABEL_55:

LABEL_56:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_63:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_56;
    }
  }
}

__CFString *INCodablePersonAttributeMetadataTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"Contact";
  }
  else {
    return off_1E551B970[a1 - 1];
  }
}

__CFString *INGetCarLockStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551B990[a1];
  }
}

__CFString *INCodableDateComponentsAttributeMetadataTypeAsString(uint64_t a1)
{
  id v1 = @"DateTime";
  if (a1 == 1) {
    id v1 = @"Date";
  }
  if (a1 == 2) {
    return @"Time";
  }
  else {
    return v1;
  }
}

__CFString *INCodableDateComponentsAttributeMetadataFormatAsString(uint64_t a1)
{
  id v1 = @"Style";
  if (a1 == 1) {
    id v1 = @"Relative";
  }
  if (a1 == 2) {
    return @"Template";
  }
  else {
    return v1;
  }
}

__CFString *INCodableDateComponentsAttributeMetadataStyleAsString(unint64_t a1)
{
  if (a1 > 3) {
    return @"Full";
  }
  else {
    return off_1E551B9C0[a1];
  }
}

uint64_t _INPBLongReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBLongValue);
        if (!PBReaderPlaceMark() || !_INPBLongValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValue:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INSendPaymentIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD) {
    return 0;
  }
  else {
    return off_1E551B9E0[a1];
  }
}

uint64_t _INPBSendPaymentIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBPaymentRecord);
        if (!PBReaderPlaceMark() || (_INPBPaymentRecordReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentRecord:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INLocationSearchTypeHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INLocationSearchTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 10;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t INLocationSearchTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 10) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INLocationSearchTypeGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"byLocationTrigger";
  }
  else {
    return @"unknown";
  }
}

uint64_t INLocationSearchTypeWithString(void *a1)
{
  return [a1 isEqualToString:@"byLocationTrigger"];
}

id INLocationSearchTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"by location trigger", @"by location trigger", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

BOOL _INPBDialingContactValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(_INPBStringValue);
        if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDialingPhoneLabel:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || (_INPBContactValueReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDialingContact:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBStringValue);
    if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setDialingPhoneNumber:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBTransferMoneyIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFromAccount:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setToAccount:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBPaymentAmountValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentAmountValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionAmount:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionScheduledDate:", v17, 0, 0);
        goto LABEL_37;
      case 7u:
        PBReaderReadString();
        unint64_t v17 = (_INPBFinancialAccountValue *)objc_claimAutoreleasedReturnValue();
        [a1 setTransactionNote:v17];
        goto LABEL_37;
      case 8u:
        unint64_t v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (PBReaderPlaceMark() && _INPBCurrencyAmountValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTransferFee:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_38;
    }
  }
}

uint64_t _INPBStartAudioCallIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_98;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_70;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBDialingContact);
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v17, a2)) {
          goto LABEL_98;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addTargetContacts:", v17, 0, 0);
        }
        goto LABEL_70;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_75:
        objc_msgSend(a1, "setAudioRoute:", v25, v54, v55);
        goto LABEL_96;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_80:
        objc_msgSend(a1, "setDestinationType:", v32, v54, v55);
        goto LABEL_96;
      case 5u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v35;
        }
LABEL_85:
        objc_msgSend(a1, "setPreferredCallProvider:", v39, v54, v55);
        goto LABEL_96;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBDialingContact);
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v17, a2)) {
          goto LABEL_98;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addContact:", v17, 0, 0);
        }
        goto LABEL_70;
      case 7u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v14 = v41++ >= 9;
              if (v14)
              {
                uint64_t v46 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = v42;
        }
LABEL_90:
        objc_msgSend(a1, "setRecordTypeForRedialing:", v46, v54, v55);
        goto LABEL_96;
      case 8u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              BOOL v14 = v48++ >= 9;
              if (v14)
              {
                uint64_t v53 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = v49;
        }
LABEL_95:
        objc_msgSend(a1, "setTtyType:", v53, v54, v55);
        goto LABEL_96;
      case 9u:
        unint64_t v17 = objc_alloc_init(_INPBStartCallRequestMetadata);
        if PBReaderPlaceMark() && (_INPBStartCallRequestMetadataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallRequestMetadata:", v17, 0, 0);
LABEL_70:

LABEL_96:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_98:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_96;
    }
  }
}

uint64_t _INPBWellnessObjectResultValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecordDate:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnit:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBWellnessValue);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (PBReaderPlaceMark() && _INPBWellnessValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addValues:", v17, 0, 0);
          }
LABEL_31:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_43:
        objc_msgSend(a1, "setResultType:", v25, v26, v27);
        goto LABEL_44;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

void sub_18CDA61D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getINUIPortableImageLoaderHelperClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!IntentsUILibraryCore_frameworkLibrary_83572)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __IntentsUILibraryCore_block_invoke_83573;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551BC70;
    uint64_t v6 = 0;
    IntentsUILibraryCore_frameworkLibrary_83572 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!IntentsUILibraryCore_frameworkLibrary_83572)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("INUIPortableImageLoaderHelper");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getINUIPortableImageLoaderHelperClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __IntentsUILibraryCore_block_invoke_83573()
{
  uint64_t result = _sl_dlopen();
  IntentsUILibraryCore_frameworkLibrary_83572 = result;
  return result;
}

void sub_18CDA6A58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

__CFString *INPauseWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7) {
    return 0;
  }
  else {
    return off_1E551BC88[a1];
  }
}

__CFString *INRequestPaymentIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xC) {
    return 0;
  }
  else {
    return off_1E551BCC8[a1];
  }
}

BOOL INCarAirCirculationModeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INCarAirCirculationModeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INCarAirCirculationModeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INCarAirCirculationModeGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"recirculateAir";
  }
  if (a1 == 1) {
    return @"freshAir";
  }
  else {
    return v1;
  }
}

uint64_t INCarAirCirculationModeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"freshAir"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"recirculateAir"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCarAirCirculationModeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"recirculate air";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"fresh air";
LABEL_5:
    long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  long long v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBDistanceListReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBDistance);
    if (!PBReaderPlaceMark() || !_INPBDistanceReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addDistance:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBIntentSlotVocabularyValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 == 2)
      {
        char v18 = PBReaderReadString();
        [a1 setPronunciation:v18];
        goto LABEL_25;
      }
      if (v17 == 3)
      {
        char v18 = PBReaderReadString();
        if (v18) {
          [a1 addExamples:v18];
        }
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = PBReaderReadString();
    [a1 setPhrase:v18];
LABEL_25:

    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBDistanceValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);
      }
      else if (v19 == 2)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          double v31 = *(double *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v31 = 0.0;
        }
        [a1 setMagnitude:v31];
      }
      else if (v19 == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v22;
        }
LABEL_40:
        [a1 setUnit:v27];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBLocalTimeReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_53;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v19;
          }
LABEL_53:
          [a1 setMillisOfSecond:v23];
          continue;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                BOOL v14 = v26++ >= 9;
                if (v14)
                {
                  uint64_t v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = v27;
          }
LABEL_58:
          [a1 setSecondOfMinute:v31];
          continue;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          while (2)
          {
            uint64_t v35 = *v3;
            unint64_t v36 = *(void *)(a2 + v35);
            if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
              *(void *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v14 = v33++ >= 9;
                if (v14)
                {
                  uint64_t v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = v34;
          }
LABEL_63:
          [a1 setMinuteOfHour:v38];
          continue;
        case 4u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0) {
          goto LABEL_65;
        }
        v39 += 7;
        BOOL v14 = v40++ >= 9;
        if (v14)
        {
          uint64_t v45 = 0;
          goto LABEL_68;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_65:
      uint64_t v45 = *(unsigned char *)(a2 + *v5) ? 0 : v41;
LABEL_68:
      [a1 setHourOfDay:v45];
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBAppendToNoteIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        unsigned int v18 = objc_alloc_init(_INPBNoteContent);
        if (!PBReaderPlaceMark() || (_INPBNoteContentReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContent:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(_INPBNote);
    if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetNote:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForNotebookItemsIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    unint64_t v18 = v10 >> 3;
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_139;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_93;
      case 2u:
        uint64_t v19 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v19, a2)) {
          goto LABEL_139;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v19, 0, 0);
        goto LABEL_93;
      case 3u:
        PBReaderReadString();
        uint64_t v19 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setContent:v19];
        goto LABEL_93;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_106:
        objc_msgSend(a1, "setItemType:", v32, v74, v75);
        goto LABEL_94;
      case 5u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v35;
        }
LABEL_111:
        objc_msgSend(a1, "setStatus:", v39, v74, v75);
        goto LABEL_94;
      case 6u:
        uint64_t v19 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_139;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v19, 0, 0);
        goto LABEL_93;
      case 7u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v14 = v41++ >= 9;
              if (v14)
              {
                uint64_t v46 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = v42;
        }
LABEL_116:
        objc_msgSend(a1, "setLocationSearchType:", v46, v74, v75);
        goto LABEL_94;
      case 8u:
        uint64_t v19 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_139;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v19, 0, 0);
        goto LABEL_93;
      case 9u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              BOOL v14 = v48++ >= 9;
              if (v14)
              {
                uint64_t v53 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = v49;
        }
LABEL_121:
        objc_msgSend(a1, "setDateSearchType:", v53, v74, v75);
        goto LABEL_94;
      case 0xAu:
        PBReaderReadString();
        uint64_t v19 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setNotebookItemIdentifier:v19];
        goto LABEL_93;
      case 0xBu:
        if (v16 == 2)
        {
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            while (1)
            {
              uint64_t v58 = *v3;
              unint64_t v59 = *(void *)(a2 + v58);
              if (v59 == -1 || v59 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v59);
              *(void *)(a2 + v58) = v59 + 1;
              v57 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                BOOL v14 = v56++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_82;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_82:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v70 = 0;
          while (1)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v72);
            *(void *)(a2 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v14 = v69++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_136;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_136:
          PBRepeatedInt32Add();
        }
        goto LABEL_94;
      case 0xCu:
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v63 = 0;
        while (2)
        {
          uint64_t v64 = *v3;
          unint64_t v65 = *(void *)(a2 + v64);
          if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(a2 + *v7) + v65);
            *(void *)(a2 + v64) = v65 + 1;
            v63 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              BOOL v14 = v62++ >= 9;
              if (v14)
              {
                uint64_t v67 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v67 = 0;
        }
        else {
          uint64_t v67 = v63;
        }
LABEL_126:
        objc_msgSend(a1, "setTaskPriority:", v67, v74, v75);
        goto LABEL_94;
      default:
        if (v18 != 50)
        {
          if (v18 == 51)
          {
            char v20 = 0;
            unsigned int v21 = 0;
            uint64_t v22 = 0;
            while (1)
            {
              uint64_t v23 = *v3;
              unint64_t v24 = *(void *)(a2 + v23);
              if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if ((v25 & 0x80) == 0) {
                goto LABEL_99;
              }
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_101;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_99:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v22 = 0;
            }
LABEL_101:
            objc_msgSend(a1, "setIncludeAllNoteContents:", v22 != 0, v74, v75);
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            return 0;
          }
LABEL_94:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        uint64_t v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setGroupName:", v19, 0, 0);
LABEL_93:

          goto LABEL_94;
        }
LABEL_139:

        return 0;
    }
  }
}

__CFString *INCodableAttributeMetadataInputTypeAsString(uint64_t a1)
{
  id v1 = @"Field";
  if (a1 == 1) {
    id v1 = @"Stepper";
  }
  if (a1 == 2) {
    return @"Slider";
  }
  else {
    return v1;
  }
}

uint64_t _INPBSearchForBillsIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_47;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBBillPayeeValue);
        if (!PBReaderPlaceMark() || !_INPBBillPayeeValueReadFrom(v17, a2)) {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBillPayee:", v17, 0, 0);
        goto LABEL_47;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentDateRange:", v17, 0, 0);
        goto LABEL_47;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_52:
        [a1 setBillType:v25];
        goto LABEL_58;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_57:
        [a1 setStatus:v32];
        goto LABEL_58;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDueDateRange:", v17, 0, 0);
LABEL_47:

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_60:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

__CFString *INSaveProfileInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551C0E8[a1];
  }
}

id INIntentSlotValueTransformFromDataString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 vocabularyIdentifier];
  if (v2 || ([v1 localizedValue], (char v13 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v3 = [INSpeakableString alloc];
    uint64_t v4 = [v1 vocabularyIdentifier];
    long long v5 = [v1 localizedValue];
    uint64_t v6 = objc_msgSend(v5, "_intents_decodeFromProto");
    uint64_t v7 = [v1 pronunciationHint];
    char v8 = objc_msgSend(v7, "_intents_decodeFromProto");
    unsigned int v9 = [v1 alternatives];
    unint64_t v10 = INIntentSlotValueTransformFromDataStrings(v9);
    id v11 = [(INSpeakableString *)v3 _initWithVocabularyIdentifier:v4 spokenPhrase:v6 pronunciationHint:v8 alternativeMatches:v10];

    if (v2) {
      goto LABEL_7;
    }
  }
  else
  {
    char v13 = 0;
    id v11 = 0;
  }

LABEL_7:

  return v11;
}

id INIntentSlotValueTransformFromDataStrings(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformFromDataString(*(void *)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = (void *)[v2 copy];

  return v9;
}

_INPBDataString *INIntentSlotValueTransformToDataString(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBDataString);
    id v3 = [v1 vocabularyIdentifier];
    [(_INPBDataString *)v2 setVocabularyIdentifier:v3];

    uint64_t v4 = [v1 spokenPhrase];
    uint64_t v5 = objc_msgSend(v4, "_intents_encodeForProto");
    [(_INPBDataString *)v2 setLocalizedValue:v5];

    uint64_t v6 = [v1 pronunciationHint];

    uint64_t v7 = objc_msgSend(v6, "_intents_encodeForProto");
    [(_INPBDataString *)v2 setPronunciationHint:v7];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromDataStringList(void *a1)
{
  id v1 = [a1 dataStrings];
  uint64_t v2 = INIntentSlotValueTransformFromDataStrings(v1);

  return v2;
}

id INIntentSlotValueTransformToDataStrings(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformToDataString(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = (void *)[v2 copy];

  return v9;
}

_INPBDataStringList *INIntentSlotValueTransformToDataStringList(void *a1)
{
  id v1 = INIntentSlotValueTransformToDataStrings(a1);
  uint64_t v2 = objc_alloc_init(_INPBDataStringList);
  id v3 = (void *)[v1 copy];
  [(_INPBDataStringList *)v2 setDataStrings:v3];

  return v2;
}

BOOL _INPBPayBillIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFromAccount:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBBillDetailsValue);
        if (!PBReaderPlaceMark() || (_INPBBillDetailsValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBillDetails:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBPaymentAmountValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentAmountValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionAmount:", v17, 0, 0);
        goto LABEL_36;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionScheduledDate:", v17, 0, 0);
        goto LABEL_36;
      case 7u:
        unint64_t v17 = objc_alloc_init(_INPBString);
        if PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTransactionNote:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
    }
  }
}

BOOL INOvulationValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INOvulationValueTypeGetBackingType(unint64_t result)
{
  if (result >= 4) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INOvulationValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INOvulationValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E551C118[a1 - 1];
  }
}

uint64_t INOvulationValueTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"negative"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"positive"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"indeterminate"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INOvulationValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"indeterminate";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"positive";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"negative";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

BOOL _INPBLocationValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unint64_t v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        unint64_t v18 = (_INPBValueMetadata *)objc_alloc_init(MEMORY[0x1E4F646E0]);
        if (!PBReaderPlaceMark() || (GEOMapItemStorageReadAllFrom() & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMapItemStorage:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v18 = (_INPBValueMetadata *)objc_alloc_init(MEMORY[0x1E4F647E0]);
    if (!PBReaderPlaceMark() || (GEOPDPlaceReadAllFrom() & 1) == 0) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setPlace:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INHomeAction *INIntentSlotValueTransformFromHomeAction(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    unsigned __int8 v3 = [v1 hasAttributeType];
    unsigned int v4 = [v2 attributeType];
    if (((v4 < 0x42) & v3) != 0) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    if ([v2 hasAttributeValue])
    {
      uint64_t v6 = [v2 attributeValue];
      unsigned __int8 v7 = [v6 hasValueType];
      unsigned int v8 = [v6 valueType];
      if (((v8 < 6) & v7) != 0) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = 0;
      }
      if ([v6 hasBooleanValue]) {
        uint64_t v10 = [v6 BOOLeanValue];
      }
      else {
        uint64_t v10 = 0;
      }
      double v14 = 0.0;
      if ([v6 hasDoubleValue])
      {
        [v6 doubleValue];
        double v14 = v15;
      }
      if ([v6 hasIntegerValue]) {
        uint64_t v12 = [v6 integerValue];
      }
      else {
        uint64_t v12 = 0;
      }
      if ([v6 hasStringValue])
      {
        char v13 = [v6 stringValue];
      }
      else
      {
        char v13 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      double v14 = 0.0;
    }
    uint64_t v11 = [[INHomeAction alloc] initWithType:v5 valueType:v9 BOOLValue:v10 doubleValue:v12 integerValue:v13 stringValue:v14];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

_INPBHomeAttribute *INIntentSlotValueTransformToHomeAction(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(_INPBHomeAttribute);
    if (INHomeAttributeTypeHasBackingType([v1 type]))
    {
      unint64_t v3 = [v1 type] - 1;
      if (v3 >= 0x42) {
        uint64_t v4 = 0x7FFFFFFFLL;
      }
      else {
        uint64_t v4 = v3;
      }
      [(_INPBHomeAttribute *)v2 setAttributeType:v4];
    }
    uint64_t v5 = objc_alloc_init(_INPBHomeAttributeValue);
    unint64_t v6 = [v1 valueType];
    if (v6 <= 6 && ((0x7Eu >> v6) & 1) != 0)
    {
      unint64_t v7 = [v1 valueType] - 1;
      if (v7 >= 6) {
        uint64_t v8 = 0x7FFFFFFFLL;
      }
      else {
        uint64_t v8 = v7;
      }
      [(_INPBHomeAttributeValue *)v5 setValueType:v8];
    }
    switch([v1 valueType])
    {
      case 1:
        -[_INPBHomeAttributeValue setBooleanValue:](v5, "setBooleanValue:", [v1 BOOLValue]);
        break;
      case 2:
        [v1 doubleValue];
        -[_INPBHomeAttributeValue setDoubleValue:](v5, "setDoubleValue:");
        break;
      case 3:
        uint64_t v9 = [v1 stringValue];
        [(_INPBHomeAttributeValue *)v5 setStringValue:v9];

        break;
      case 4:
        -[_INPBHomeAttributeValue setIntegerValue:](v5, "setIntegerValue:", [v1 integerValue]);
        break;
      default:
        break;
    }
    [(_INPBHomeAttribute *)v2 setAttributeValue:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeActions(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromHomeAction(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeActions(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToHomeAction(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t _INPBIntentSlotResolutionResultReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_50;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_53;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_53:
        [a1 setType:v23];
        goto LABEL_47;
      case 2u:
        char v24 = objc_alloc_init(_INPBPayloadSuccess);
        if (!PBReaderPlaceMark() || !_INPBPayloadSuccessReadFrom(v24, a2)) {
          goto LABEL_55;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadSuccess:", v24, 0, 0);
        goto LABEL_46;
      case 3u:
        char v24 = objc_alloc_init(_INPBPayloadUnsupported);
        if (!PBReaderPlaceMark() || (_INPBPayloadUnsupportedReadFrom(v24, a2) & 1) == 0) {
          goto LABEL_55;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadUnsupported:", v24, 0, 0);
        goto LABEL_46;
      case 4u:
        char v24 = objc_alloc_init(_INPBPayloadNeedsValue);
        if (!PBReaderPlaceMark() || (_INPBPayloadNeedsValueReadFrom(v24, a2) & 1) == 0) {
          goto LABEL_55;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadNeedsValue:", v24, 0, 0);
        goto LABEL_46;
      case 5u:
        char v24 = objc_alloc_init(_INPBPayloadNeedsDisambiguation);
        if (!PBReaderPlaceMark() || (_INPBPayloadNeedsDisambiguationReadFrom(v24, a2) & 1) == 0) {
          goto LABEL_55;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadNeedsDisambiguation:", v24, 0, 0);
        goto LABEL_46;
      case 7u:
        char v24 = objc_alloc_init(_INPBPayloadConfirmation);
        if (!PBReaderPlaceMark() || (_INPBPayloadConfirmationReadFrom(v24, a2) & 1) == 0) {
          goto LABEL_55;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadConfirmation:", v24, 0, 0);
        goto LABEL_46;
      case 8u:
        char v24 = objc_alloc_init(_INPBPayloadNeedsExecuteIntent);
        if PBReaderPlaceMark() && (_INPBPayloadNeedsExecuteIntentReadFrom(v24, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPayloadNeedsExecuteIntent:", v24, 0, 0);
LABEL_46:

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_55:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

BOOL _INPBConfigureHomeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBPauseWorkoutIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t _INPBStartWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_79;
      case 2u:
        char v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
        goto LABEL_79;
      case 3u:
        char v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setGoalValue:", v17, 0, 0);
        goto LABEL_79;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_86:
        objc_msgSend(a1, "setWorkoutGoalUnitType:", v25, v58, v59);
        goto LABEL_80;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_91:
        objc_msgSend(a1, "setWorkoutLocationType:", v32, v58, v59);
        goto LABEL_80;
      case 6u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v35 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_95:
        [a1 setIsOpenEnded:v35 != 0];
        goto LABEL_80;
      case 7u:
        char v17 = objc_alloc_init(_INPBWorkoutAssociatedItem);
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        if (!PBReaderPlaceMark() || !_INPBWorkoutAssociatedItemReadFrom(v17, a2)) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addAssociatedItems:", v17, 0, 0);
        }
        goto LABEL_79;
      case 8u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        while (2)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v41 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v41 = 0;
        }
LABEL_99:
        [a1 setIsBuiltInWorkoutType:v41 != 0];
        goto LABEL_80;
      case 9u:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        while (2)
        {
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v14 = v46++ >= 9;
              if (v14)
              {
                uint64_t v47 = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v47 = 0;
        }
LABEL_103:
        [a1 setIsVoiceOnly:v47 != 0];
        goto LABEL_80;
      case 0xAu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        while (2)
        {
          uint64_t v54 = *v3;
          unint64_t v55 = *(void *)(a2 + v54);
          if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
            *(void *)(a2 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v14 = v52++ >= 9;
              if (v14)
              {
                uint64_t v57 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v57 = 0;
        }
        else {
          uint64_t v57 = v53;
        }
LABEL_108:
        objc_msgSend(a1, "setSequenceLabel:", v57, v58, v59);
        goto LABEL_80;
      case 0xBu:
        char v17 = objc_alloc_init(_INPBWorkoutCustomization);
        if (PBReaderPlaceMark() && _INPBWorkoutCustomizationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCustomization:", v17, 0, 0);
LABEL_79:

LABEL_80:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_110:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_80;
    }
  }
}

BOOL _INPBUserActivityReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 == 2)
      {
        unsigned int v18 = PBReaderReadString();
        [a1 setTitle:v18];
        goto LABEL_24;
      }
      if (v17 == 3)
      {
        unsigned int v18 = PBReaderReadData();
        [a1 setData:v18];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = PBReaderReadString();
    [a1 setUri:v18];
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INTaskList *INIntentSlotValueTransformFromTaskList(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    char v13 = [INTaskList alloc];
    int v15 = [v1 title];
    uint64_t v2 = INIntentSlotValueTransformFromDataString(v15);
    BOOL v14 = [v1 tasks];
    id v3 = INIntentSlotValueTransformFromTasks(v14);
    uint64_t v4 = [v1 groupName];
    uint64_t v5 = INIntentSlotValueTransformFromDataString(v4);
    uint64_t v6 = [v1 createdDateTime];
    int v7 = INIntentSlotValueTransformFromDateTime(v6);
    char v8 = [v1 modifiedDateTime];
    unsigned int v9 = INIntentSlotValueTransformFromDateTime(v8);
    unint64_t v10 = [v1 identifier];

    uint64_t v11 = [(INTaskList *)v13 initWithTitle:v2 tasks:v3 groupName:v5 createdDateComponents:v7 modifiedDateComponents:v9 identifier:v10];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

id INIntentSlotValueRedactedTaskListFromTaskList(void *a1)
{
  id v1 = a1;

  return v1;
}

void sub_18CDC8EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__90373(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__90374(uint64_t a1)
{
}

void sub_18CDCBF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDCC0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _INPBSetMessageAttributeIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 3)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_37;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_40;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_40:
            [a1 setAttribute:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        PBReaderReadString();
        uint64_t v25 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        if (v25) {
          [a1 addIdentifier:v25];
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBPayloadSuccessReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        unint64_t v17 = (_INPBIntentSlotValue *)objc_claimAutoreleasedReturnValue();
        [a1 setResolvedKeyPath:v17];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBIntentSlotValue);
    if (!PBReaderPlaceMark() || (_INPBIntentSlotValueReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setResolvedValue:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBEventReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addEventDescriptors:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEventType:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _INProtocolFromType(uint64_t a1, objc_class *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  size_t v4 = strlen((const char *)a1);
  if (*(unsigned char *)a1 == 64
    && *(unsigned char *)(a1 + 1) == 34
    && *(unsigned char *)(v4 + a1 - 1) == 34
    && *(unsigned char *)(a1 + 2) == 60
    && *(unsigned char *)(v4 + a1 - 2) == 62)
  {
    uint64_t v5 = (char *)v9 - ((MEMORY[0x1F4188790]() + 11) & 0xFFFFFFFFFFFFFFF0);
    strlcpy(v5, (const char *)(a1 + 3), v6);
    int v7 = _INLookupNameInModule(v5, a2, &__block_literal_global_11);
  }
  else
  {
    int v7 = 0;
  }

  return v7;
}

void _INSetIntProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithInt:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetUnsignedIntProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithUnsignedInt:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetLongProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithLong:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetUnsignedLongProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithUnsignedLong:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetLongLongProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithLongLong:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetUnsignedLongLongProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithUnsignedLongLong:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetBoolProperty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithBool:a3];
  _INSetIdProperty(v6, a2, v7);
}

void _INSetFloatProperty(void *a1, const char *a2, float a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  *(float *)&double v7 = a3;
  id v8 = [v5 numberWithFloat:v7];
  _INSetIdProperty(v6, a2, v8);
}

void _INSetDoubleProperty(void *a1, const char *a2, double a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a1;
  id v7 = [v5 numberWithDouble:a3];
  _INSetIdProperty(v6, a2, v7);
}

uint64_t _INGetIntProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 intValue];

  return v3;
}

uint64_t _INGetUnsignedIntProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 unsignedIntValue];

  return v3;
}

uint64_t _INGetLongProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 longValue];

  return v3;
}

uint64_t _INGetUnsignedLongProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 unsignedLongValue];

  return v3;
}

uint64_t _INGetLongLongProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 longLongValue];

  return v3;
}

uint64_t _INGetUnsignedLongLongProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 unsignedLongLongValue];

  return v3;
}

uint64_t _INGetBoolProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

float _INGetFloatProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 floatValue];
    float v5 = v4;
  }
  else
  {
    float v5 = 0.0;
  }

  return v5;
}

double _INGetDoubleProperty(void *a1, const char *a2)
{
  uint64_t v2 = _INGetIdProperty(a1, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 doubleValue];
    double v5 = v4;
  }
  else
  {
    double v5 = 0.0;
  }

  return v5;
}

BOOL INSortTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INSortTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 0;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t INSortTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 1);
  if (!a2) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INSortTypeGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"byDate";
  }
  if (a1 == 1) {
    return @"asIs";
  }
  else {
    return v1;
  }
}

uint64_t INSortTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"asIs"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"byDate"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INSortTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    double v4 = @"by date";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    double v4 = @"as is";
LABEL_5:
    double v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  double v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBContactRelationshipReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = PBReaderReadString();
        [a1 setName:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = PBReaderReadString();
    [a1 setRelation:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBSaveProfileInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBSetProfileInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBEmptyReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t _INPBSearchForBillsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBBillDetailsValue);
        if (!PBReaderPlaceMark() || !_INPBBillDetailsValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addBills:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INCancelWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7) {
    return 0;
  }
  else {
    return off_1E551C718[a1];
  }
}

BOOL INNoteContentTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INNoteContentTypeGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INNoteContentTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INNoteContentTypeGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"image";
  }
  if (a1 == 1) {
    return @"text";
  }
  else {
    return v1;
  }
}

uint64_t INNoteContentTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"text"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"image"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INNoteContentTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    double v4 = @"image";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    double v4 = @"text";
LABEL_5:
    double v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  double v5 = 0;
LABEL_7:

  return v5;
}

uint64_t _INPBIntentSlotValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          uint64_t v15 = *v5;
          int v16 = *(unsigned __int8 *)(a2 + v15);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v15 = *v5;
      int v16 = *(unsigned __int8 *)(a2 + v15);
      if (*(unsigned char *)(a2 + v15)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v17 = v10 & 7;
      if (v16 || v17 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((int)(v10 >> 3) > 1649)
      {
        if ((int)v19 <= 2000)
        {
          if ((int)v19 <= 1900)
          {
            if (v19 <= 0x76C)
            {
              switch((int)v19)
              {
                case 1800:
                  if (v17 != 2)
                  {
                    char v471 = 0;
                    unsigned int v472 = 0;
                    uint64_t v473 = 0;
                    while (1)
                    {
                      uint64_t v474 = *v3;
                      unint64_t v475 = *(void *)(a2 + v474);
                      if (v475 == -1 || v475 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v476 = *(unsigned char *)(*(void *)(a2 + *v7) + v475);
                      *(void *)(a2 + v474) = v475 + 1;
                      v473 |= (unint64_t)(v476 & 0x7F) << v471;
                      if (v476 < 0)
                      {
                        v471 += 7;
                        BOOL v14 = v472++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v73 = 0;
                    unsigned int v74 = 0;
                    uint64_t v75 = 0;
                    while (1)
                    {
                      uint64_t v76 = *v3;
                      unint64_t v77 = *(void *)(a2 + v76);
                      if (v77 == -1 || v77 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
                      *(void *)(a2 + v76) = v77 + 1;
                      v75 |= (unint64_t)(v78 & 0x7F) << v73;
                      if (v78 < 0)
                      {
                        v73 += 7;
                        BOOL v14 = v74++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_145;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_145:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1801:
                  if (v17 != 2)
                  {
                    char v736 = 0;
                    unsigned int v737 = 0;
                    uint64_t v738 = 0;
                    while (1)
                    {
                      uint64_t v739 = *v3;
                      unint64_t v740 = *(void *)(a2 + v739);
                      if (v740 == -1 || v740 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v741 = *(unsigned char *)(*(void *)(a2 + *v7) + v740);
                      *(void *)(a2 + v739) = v740 + 1;
                      v738 |= (unint64_t)(v741 & 0x7F) << v736;
                      if (v741 < 0)
                      {
                        v736 += 7;
                        BOOL v14 = v737++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v363 = 0;
                    unsigned int v364 = 0;
                    uint64_t v365 = 0;
                    while (1)
                    {
                      uint64_t v366 = *v3;
                      unint64_t v367 = *(void *)(a2 + v366);
                      if (v367 == -1 || v367 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v368 = *(unsigned char *)(*(void *)(a2 + *v7) + v367);
                      *(void *)(a2 + v366) = v367 + 1;
                      v365 |= (unint64_t)(v368 & 0x7F) << v363;
                      if (v368 < 0)
                      {
                        v363 += 7;
                        BOOL v14 = v364++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_995;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_995:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1802:
                  unsigned int v40 = objc_alloc_init(_INPBHomeEntity);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBHomeEntityReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadHomeEntity:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 1803:
                  if (v17 != 2)
                  {
                    char v742 = 0;
                    unsigned int v743 = 0;
                    uint64_t v744 = 0;
                    while (1)
                    {
                      uint64_t v745 = *v3;
                      uint64_t v746 = *(void *)(a2 + v745);
                      unint64_t v747 = v746 + 1;
                      if (v746 == -1 || v747 > *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v748 = *(unsigned char *)(*(void *)(a2 + *v7) + v746);
                      *(void *)(a2 + v745) = v747;
                      v744 |= (unint64_t)(v748 & 0x7F) << v742;
                      if (v748 < 0)
                      {
                        v742 += 7;
                        BOOL v14 = v743++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v369 = 0;
                    unsigned int v370 = 0;
                    uint64_t v371 = 0;
                    while (1)
                    {
                      uint64_t v372 = *v3;
                      uint64_t v373 = *(void *)(a2 + v372);
                      unint64_t v374 = v373 + 1;
                      if (v373 == -1 || v374 > *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v375 = *(unsigned char *)(*(void *)(a2 + *v7) + v373);
                      *(void *)(a2 + v372) = v374;
                      v371 |= (unint64_t)(v375 & 0x7F) << v369;
                      if (v375 < 0)
                      {
                        v369 += 7;
                        BOOL v14 = v370++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1012;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_1012:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1804:
                  if (v17 != 2)
                  {
                    char v749 = 0;
                    unsigned int v750 = 0;
                    uint64_t v751 = 0;
                    while (1)
                    {
                      uint64_t v752 = *v3;
                      uint64_t v753 = *(void *)(a2 + v752);
                      unint64_t v754 = v753 + 1;
                      if (v753 == -1 || v754 > *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v755 = *(unsigned char *)(*(void *)(a2 + *v7) + v753);
                      *(void *)(a2 + v752) = v754;
                      v751 |= (unint64_t)(v755 & 0x7F) << v749;
                      if (v755 < 0)
                      {
                        v749 += 7;
                        BOOL v14 = v750++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v376 = 0;
                    unsigned int v377 = 0;
                    uint64_t v378 = 0;
                    while (1)
                    {
                      uint64_t v379 = *v3;
                      uint64_t v380 = *(void *)(a2 + v379);
                      unint64_t v381 = v380 + 1;
                      if (v380 == -1 || v381 > *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v382 = *(unsigned char *)(*(void *)(a2 + *v7) + v380);
                      *(void *)(a2 + v379) = v381;
                      v378 |= (unint64_t)(v382 & 0x7F) << v376;
                      if (v382 < 0)
                      {
                        v376 += 7;
                        BOOL v14 = v377++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1025;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_1025:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1805:
                  unsigned int v40 = objc_alloc_init(_INPBHomeAttributeValue);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBHomeAttributeValueReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadHomeAttributeValue:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 1806:
                  unsigned int v40 = objc_alloc_init(_INPBHomeAttribute);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBHomeAttributeReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadHomeAttribute:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 1807:
                  unsigned int v40 = objc_alloc_init(_INPBHomeFilter);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBHomeFilterReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadHomeFilter:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 1808:
                  unsigned int v40 = objc_alloc_init(_INPBHomeUserTask);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBHomeUserTaskReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadHomeUserTask:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                default:
                  JUMPOUT(0);
              }
            }
            else
            {
              switch((int)v19)
              {
                case 1700:
                  if (v17 != 2)
                  {
                    char v458 = 0;
                    unsigned int v459 = 0;
                    uint64_t v460 = 0;
                    while (1)
                    {
                      uint64_t v461 = *v3;
                      unint64_t v462 = *(void *)(a2 + v461);
                      if (v462 == -1 || v462 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v463 = *(unsigned char *)(*(void *)(a2 + *v7) + v462);
                      *(void *)(a2 + v461) = v462 + 1;
                      v460 |= (unint64_t)(v463 & 0x7F) << v458;
                      if (v463 < 0)
                      {
                        v458 += 7;
                        BOOL v14 = v459++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v54 = 0;
                    unsigned int v55 = 0;
                    uint64_t v56 = 0;
                    while (1)
                    {
                      uint64_t v57 = *v3;
                      unint64_t v58 = *(void *)(a2 + v57);
                      if (v58 == -1 || v58 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
                      *(void *)(a2 + v57) = v58 + 1;
                      v56 |= (unint64_t)(v59 & 0x7F) << v54;
                      if (v59 < 0)
                      {
                        v54 += 7;
                        BOOL v14 = v55++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_109;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_109:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1701:
                  if (v17 != 2)
                  {
                    char v671 = 0;
                    unsigned int v672 = 0;
                    uint64_t v673 = 0;
                    while (1)
                    {
                      uint64_t v674 = *v3;
                      unint64_t v675 = *(void *)(a2 + v674);
                      if (v675 == -1 || v675 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v676 = *(unsigned char *)(*(void *)(a2 + *v7) + v675);
                      *(void *)(a2 + v674) = v675 + 1;
                      v673 |= (unint64_t)(v676 & 0x7F) << v671;
                      if (v676 < 0)
                      {
                        v671 += 7;
                        BOOL v14 = v672++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v281 = 0;
                    unsigned int v282 = 0;
                    uint64_t v283 = 0;
                    while (1)
                    {
                      uint64_t v284 = *v3;
                      unint64_t v285 = *(void *)(a2 + v284);
                      if (v285 == -1 || v285 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v286 = *(unsigned char *)(*(void *)(a2 + *v7) + v285);
                      *(void *)(a2 + v284) = v285 + 1;
                      v283 |= (unint64_t)(v286 & 0x7F) << v281;
                      if (v286 < 0)
                      {
                        v281 += 7;
                        BOOL v14 = v282++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_820;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_820:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1702:
                  if (v17 != 2)
                  {
                    char v677 = 0;
                    unsigned int v678 = 0;
                    uint64_t v679 = 0;
                    while (1)
                    {
                      uint64_t v680 = *v3;
                      unint64_t v681 = *(void *)(a2 + v680);
                      if (v681 == -1 || v681 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v682 = *(unsigned char *)(*(void *)(a2 + *v7) + v681);
                      *(void *)(a2 + v680) = v681 + 1;
                      v679 |= (unint64_t)(v682 & 0x7F) << v677;
                      if (v682 < 0)
                      {
                        v677 += 7;
                        BOOL v14 = v678++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v287 = 0;
                    unsigned int v288 = 0;
                    uint64_t v289 = 0;
                    while (1)
                    {
                      uint64_t v290 = *v3;
                      unint64_t v291 = *(void *)(a2 + v290);
                      if (v291 == -1 || v291 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v292 = *(unsigned char *)(*(void *)(a2 + *v7) + v291);
                      *(void *)(a2 + v290) = v291 + 1;
                      v289 |= (unint64_t)(v292 & 0x7F) << v287;
                      if (v292 < 0)
                      {
                        v287 += 7;
                        BOOL v14 = v288++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_833;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_833:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 1703:
                  unsigned int v40 = objc_alloc_init(_INPBSendMessageAttachment);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBSendMessageAttachmentReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadSendMessageAttachment:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 1704:
                  if (v17 != 2)
                  {
                    char v683 = 0;
                    unsigned int v684 = 0;
                    uint64_t v685 = 0;
                    while (1)
                    {
                      uint64_t v686 = *v3;
                      unint64_t v687 = *(void *)(a2 + v686);
                      if (v687 == -1 || v687 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v688 = *(unsigned char *)(*(void *)(a2 + *v7) + v687);
                      *(void *)(a2 + v686) = v687 + 1;
                      v685 |= (unint64_t)(v688 & 0x7F) << v683;
                      if (v688 < 0)
                      {
                        v683 += 7;
                        BOOL v14 = v684++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v293 = 0;
                    unsigned int v294 = 0;
                    uint64_t v295 = 0;
                    while (1)
                    {
                      uint64_t v296 = *v3;
                      unint64_t v297 = *(void *)(a2 + v296);
                      if (v297 == -1 || v297 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v298 = *(unsigned char *)(*(void *)(a2 + *v7) + v297);
                      *(void *)(a2 + v296) = v297 + 1;
                      v295 |= (unint64_t)(v298 & 0x7F) << v293;
                      if (v298 < 0)
                      {
                        v293 += 7;
                        BOOL v14 = v294++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_850;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_850:
                    PBRepeatedInt32Add();
                  }
                  break;
                default:
                  goto LABEL_1212;
              }
            }
          }
          else
          {
            switch((int)v19)
            {
              case 1901:
                unsigned int v40 = objc_alloc_init(_INPBMediaItemValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadMediaItemValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1902:
                if (v17 != 2)
                {
                  char v550 = 0;
                  unsigned int v551 = 0;
                  uint64_t v552 = 0;
                  while (1)
                  {
                    uint64_t v553 = *v3;
                    unint64_t v554 = *(void *)(a2 + v553);
                    if (v554 == -1 || v554 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v555 = *(unsigned char *)(*(void *)(a2 + *v7) + v554);
                    *(void *)(a2 + v553) = v554 + 1;
                    v552 |= (unint64_t)(v555 & 0x7F) << v550;
                    if (v555 < 0)
                    {
                      v550 += 7;
                      BOOL v14 = v551++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v160 = 0;
                  unsigned int v161 = 0;
                  uint64_t v162 = 0;
                  while (1)
                  {
                    uint64_t v163 = *v3;
                    unint64_t v164 = *(void *)(a2 + v163);
                    if (v164 == -1 || v164 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v165 = *(unsigned char *)(*(void *)(a2 + *v7) + v164);
                    *(void *)(a2 + v163) = v164 + 1;
                    v162 |= (unint64_t)(v165 & 0x7F) << v160;
                    if (v165 < 0)
                    {
                      v160 += 7;
                      BOOL v14 = v161++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_518;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_518:
                  PBRepeatedInt32Add();
                }
                break;
              case 1903:
                if (v17 != 2)
                {
                  char v556 = 0;
                  unsigned int v557 = 0;
                  uint64_t v558 = 0;
                  while (1)
                  {
                    uint64_t v559 = *v3;
                    unint64_t v560 = *(void *)(a2 + v559);
                    if (v560 == -1 || v560 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v561 = *(unsigned char *)(*(void *)(a2 + *v7) + v560);
                    *(void *)(a2 + v559) = v560 + 1;
                    v558 |= (unint64_t)(v561 & 0x7F) << v556;
                    if (v561 < 0)
                    {
                      v556 += 7;
                      BOOL v14 = v557++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v166 = 0;
                  unsigned int v167 = 0;
                  uint64_t v168 = 0;
                  while (1)
                  {
                    uint64_t v169 = *v3;
                    unint64_t v170 = *(void *)(a2 + v169);
                    if (v170 == -1 || v170 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v171 = *(unsigned char *)(*(void *)(a2 + *v7) + v170);
                    *(void *)(a2 + v169) = v170 + 1;
                    v168 |= (unint64_t)(v171 & 0x7F) << v166;
                    if (v171 < 0)
                    {
                      v166 += 7;
                      BOOL v14 = v167++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_531;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_531:
                  PBRepeatedInt32Add();
                }
                break;
              case 1904:
                unsigned int v40 = objc_alloc_init(_INPBMediaDestination);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaDestinationReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadMediaDestination:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1905:
                if (v17 != 2)
                {
                  char v562 = 0;
                  unsigned int v563 = 0;
                  uint64_t v564 = 0;
                  while (1)
                  {
                    uint64_t v565 = *v3;
                    unint64_t v566 = *(void *)(a2 + v565);
                    if (v566 == -1 || v566 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v567 = *(unsigned char *)(*(void *)(a2 + *v7) + v566);
                    *(void *)(a2 + v565) = v566 + 1;
                    v564 |= (unint64_t)(v567 & 0x7F) << v562;
                    if (v567 < 0)
                    {
                      v562 += 7;
                      BOOL v14 = v563++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v172 = 0;
                  unsigned int v173 = 0;
                  uint64_t v174 = 0;
                  while (1)
                  {
                    uint64_t v175 = *v3;
                    unint64_t v176 = *(void *)(a2 + v175);
                    if (v176 == -1 || v176 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v177 = *(unsigned char *)(*(void *)(a2 + *v7) + v176);
                    *(void *)(a2 + v175) = v176 + 1;
                    v174 |= (unint64_t)(v177 & 0x7F) << v172;
                    if (v177 < 0)
                    {
                      v172 += 7;
                      BOOL v14 = v173++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_548;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_548:
                  PBRepeatedInt32Add();
                }
                break;
              case 1906:
                unsigned int v40 = objc_alloc_init(_INPBMediaSearch);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaSearchReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadMediaSearch:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1907:
                unsigned int v40 = objc_alloc_init(_INPBMediaItemGroup);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaItemGroupReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadMediaItemGroup:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1908:
                if (v17 != 2)
                {
                  char v568 = 0;
                  unsigned int v569 = 0;
                  uint64_t v570 = 0;
                  while (1)
                  {
                    uint64_t v571 = *v3;
                    unint64_t v572 = *(void *)(a2 + v571);
                    if (v572 == -1 || v572 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v573 = *(unsigned char *)(*(void *)(a2 + *v7) + v572);
                    *(void *)(a2 + v571) = v572 + 1;
                    v570 |= (unint64_t)(v573 & 0x7F) << v568;
                    if (v573 < 0)
                    {
                      v568 += 7;
                      BOOL v14 = v569++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v178 = 0;
                  unsigned int v179 = 0;
                  uint64_t v180 = 0;
                  while (1)
                  {
                    uint64_t v181 = *v3;
                    unint64_t v182 = *(void *)(a2 + v181);
                    if (v182 == -1 || v182 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v183 = *(unsigned char *)(*(void *)(a2 + *v7) + v182);
                    *(void *)(a2 + v181) = v182 + 1;
                    v180 |= (unint64_t)(v183 & 0x7F) << v178;
                    if (v183 < 0)
                    {
                      v178 += 7;
                      BOOL v14 = v179++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_569;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_569:
                  PBRepeatedInt32Add();
                }
                break;
              case 1909:
                unsigned int v40 = objc_alloc_init(_INPBPrivatePlayMediaIntentData);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBPrivatePlayMediaIntentDataReadFrom(v40, a2))
                {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadPrivatePlayMediaIntentData:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1910:
                unsigned int v40 = objc_alloc_init(_INPBPrivateAddMediaIntentData);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBPrivateAddMediaIntentDataReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadPrivateAddMediaIntentData:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1911:
                unsigned int v40 = objc_alloc_init(_INPBPrivateUpdateMediaAffinityIntentData);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBPrivateUpdateMediaAffinityIntentDataReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadPrivateUpdateMediaAffinityIntentData:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1912:
                unsigned int v40 = objc_alloc_init(_INPBPrivateSearchForMediaIntentData);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBPrivateSearchForMediaIntentDataReadFrom(v40, a2))
                {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadPrivateSearchForMediaIntentData:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1913:
                unsigned int v40 = objc_alloc_init(_INPBBillPayeeValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBBillPayeeValueReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadBillPayeeValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1914:
                unsigned int v40 = objc_alloc_init(_INPBFinancialAccountValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBFinancialAccountValueReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadFinancialAccountValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1915:
                unsigned int v40 = objc_alloc_init(_INPBPaymentAmountValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBPaymentAmountValueReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadPaymentAmountValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1916:
                unsigned int v40 = objc_alloc_init(_INPBBillDetailsValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBBillDetailsValueReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadBillDetailsValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1917:
                if (v17 != 2)
                {
                  char v574 = 0;
                  unsigned int v575 = 0;
                  uint64_t v576 = 0;
                  while (1)
                  {
                    uint64_t v577 = *v3;
                    uint64_t v578 = *(void *)(a2 + v577);
                    unint64_t v579 = v578 + 1;
                    if (v578 == -1 || v579 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v580 = *(unsigned char *)(*(void *)(a2 + *v7) + v578);
                    *(void *)(a2 + v577) = v579;
                    v576 |= (unint64_t)(v580 & 0x7F) << v574;
                    if (v580 < 0)
                    {
                      v574 += 7;
                      BOOL v14 = v575++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v184 = 0;
                  unsigned int v185 = 0;
                  uint64_t v186 = 0;
                  while (1)
                  {
                    uint64_t v187 = *v3;
                    uint64_t v188 = *(void *)(a2 + v187);
                    unint64_t v189 = v188 + 1;
                    if (v188 == -1 || v189 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v190 = *(unsigned char *)(*(void *)(a2 + *v7) + v188);
                    *(void *)(a2 + v187) = v189;
                    v186 |= (unint64_t)(v190 & 0x7F) << v184;
                    if (v190 < 0)
                    {
                      v184 += 7;
                      BOOL v14 = v185++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_614;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_614:
                  PBRepeatedInt32Add();
                }
                break;
              case 1918:
                if (v17 != 2)
                {
                  char v581 = 0;
                  unsigned int v582 = 0;
                  uint64_t v583 = 0;
                  while (1)
                  {
                    uint64_t v584 = *v3;
                    uint64_t v585 = *(void *)(a2 + v584);
                    unint64_t v586 = v585 + 1;
                    if (v585 == -1 || v586 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v587 = *(unsigned char *)(*(void *)(a2 + *v7) + v585);
                    *(void *)(a2 + v584) = v586;
                    v583 |= (unint64_t)(v587 & 0x7F) << v581;
                    if (v587 < 0)
                    {
                      v581 += 7;
                      BOOL v14 = v582++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v191 = 0;
                  unsigned int v192 = 0;
                  uint64_t v193 = 0;
                  while (1)
                  {
                    uint64_t v194 = *v3;
                    uint64_t v195 = *(void *)(a2 + v194);
                    unint64_t v196 = v195 + 1;
                    if (v195 == -1 || v196 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v197 = *(unsigned char *)(*(void *)(a2 + *v7) + v195);
                    *(void *)(a2 + v194) = v196;
                    v193 |= (unint64_t)(v197 & 0x7F) << v191;
                    if (v197 < 0)
                    {
                      v191 += 7;
                      BOOL v14 = v192++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_627;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_627:
                  PBRepeatedInt32Add();
                }
                break;
              case 1919:
                if (v17 != 2)
                {
                  char v588 = 0;
                  unsigned int v589 = 0;
                  uint64_t v590 = 0;
                  while (1)
                  {
                    uint64_t v591 = *v3;
                    unint64_t v592 = *(void *)(a2 + v591);
                    if (v592 == -1 || v592 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v593 = *(unsigned char *)(*(void *)(a2 + *v7) + v592);
                    *(void *)(a2 + v591) = v592 + 1;
                    v590 |= (unint64_t)(v593 & 0x7F) << v588;
                    if (v593 < 0)
                    {
                      v588 += 7;
                      BOOL v14 = v589++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v198 = 0;
                  unsigned int v199 = 0;
                  uint64_t v200 = 0;
                  while (1)
                  {
                    uint64_t v201 = *v3;
                    unint64_t v202 = *(void *)(a2 + v201);
                    if (v202 == -1 || v202 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v203 = *(unsigned char *)(*(void *)(a2 + *v7) + v202);
                    *(void *)(a2 + v201) = v202 + 1;
                    v200 |= (unint64_t)(v203 & 0x7F) << v198;
                    if (v203 < 0)
                    {
                      v198 += 7;
                      BOOL v14 = v199++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_640;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_640:
                  PBRepeatedInt32Add();
                }
                break;
              case 1920:
                if (v17 != 2)
                {
                  char v594 = 0;
                  unsigned int v595 = 0;
                  uint64_t v596 = 0;
                  while (1)
                  {
                    uint64_t v597 = *v3;
                    uint64_t v598 = *(void *)(a2 + v597);
                    unint64_t v599 = v598 + 1;
                    if (v598 == -1 || v599 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v600 = *(unsigned char *)(*(void *)(a2 + *v7) + v598);
                    *(void *)(a2 + v597) = v599;
                    v596 |= (unint64_t)(v600 & 0x7F) << v594;
                    if (v600 < 0)
                    {
                      v594 += 7;
                      BOOL v14 = v595++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v204 = 0;
                  unsigned int v205 = 0;
                  uint64_t v206 = 0;
                  while (1)
                  {
                    uint64_t v207 = *v3;
                    uint64_t v208 = *(void *)(a2 + v207);
                    unint64_t v209 = v208 + 1;
                    if (v208 == -1 || v209 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v210 = *(unsigned char *)(*(void *)(a2 + *v7) + v208);
                    *(void *)(a2 + v207) = v209;
                    v206 |= (unint64_t)(v210 & 0x7F) << v204;
                    if (v210 < 0)
                    {
                      v204 += 7;
                      BOOL v14 = v205++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_653;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_653:
                  PBRepeatedInt32Add();
                }
                break;
              default:
                goto LABEL_1212;
            }
          }
        }
        else if ((int)v19 > 2500)
        {
          if ((int)v19 > 2800)
          {
            if ((int)v19 <= 4000)
            {
              switch((int)v19)
              {
                case 3001:
                  unsigned int v40 = objc_alloc_init(_INPBCustomObject);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBCustomObjectReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadCustomObject:", v40, 0, 0);
                  }
                  break;
                case 3002:
                  unsigned int v40 = objc_alloc_init(_INPBURLValue);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadURLValue:", v40, 0, 0);
                  }
                  break;
                case 3003:
                  unsigned int v40 = objc_alloc_init(_INPBArchivedObject);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadArchivedObject:", v40, 0, 0);
                  }
                  break;
                case 3004:
                  unsigned int v40 = objc_alloc_init(_INPBFile);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBFileReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadFile:", v40, 0, 0);
                  }
                  break;
                default:
                  if (v19 != 2801) {
                    goto LABEL_1212;
                  }
                  unsigned int v40 = objc_alloc_init(_INPBDeviceDetail);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBDeviceDetailReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadDeviceDetail:", v40, 0, 0);
                  }
                  break;
              }
LABEL_1211:

              continue;
            }
            switch(v19)
            {
              case 0xFA1:
                unsigned int v40 = objc_alloc_init(_INPBAnnouncement);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBAnnouncementReadFrom(v40, a2))
                {
LABEL_1652:

                  return 0;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadAnnouncement:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 0xFA2:
                if (v17 != 2)
                {
                  char v800 = 0;
                  unsigned int v801 = 0;
                  uint64_t v802 = 0;
                  while (1)
                  {
                    uint64_t v803 = *v3;
                    unint64_t v804 = *(void *)(a2 + v803);
                    if (v804 == -1 || v804 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v805 = *(unsigned char *)(*(void *)(a2 + *v7) + v804);
                    *(void *)(a2 + v803) = v804 + 1;
                    v802 |= (unint64_t)(v805 & 0x7F) << v800;
                    if (v805 < 0)
                    {
                      v800 += 7;
                      BOOL v14 = v801++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
LABEL_1639:
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_1640:
                  PBRepeatedInt32Add();
                  continue;
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v427 = 0;
                  unsigned int v428 = 0;
                  uint64_t v429 = 0;
                  while (1)
                  {
                    uint64_t v430 = *v3;
                    unint64_t v431 = *(void *)(a2 + v430);
                    if (v431 == -1 || v431 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v432 = *(unsigned char *)(*(void *)(a2 + *v7) + v431);
                    *(void *)(a2 + v430) = v431 + 1;
                    v429 |= (unint64_t)(v432 & 0x7F) << v427;
                    if (v432 < 0)
                    {
                      v427 += 7;
                      BOOL v14 = v428++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1205;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_1205:
                  PBRepeatedInt32Add();
                }
                break;
              case 0xFA3:
                if (v17 != 2)
                {
                  char v489 = 0;
                  unsigned int v490 = 0;
                  uint64_t v491 = 0;
                  while (1)
                  {
                    uint64_t v492 = *v3;
                    unint64_t v493 = *(void *)(a2 + v492);
                    if (v493 == -1 || v493 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v494 = *(unsigned char *)(*(void *)(a2 + *v7) + v493);
                    *(void *)(a2 + v492) = v493 + 1;
                    v491 |= (unint64_t)(v494 & 0x7F) << v489;
                    if (v494 < 0)
                    {
                      v489 += 7;
                      BOOL v14 = v490++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v91 = 0;
                  unsigned int v92 = 0;
                  uint64_t v93 = 0;
                  while (1)
                  {
                    uint64_t v94 = *v3;
                    unint64_t v95 = *(void *)(a2 + v94);
                    if (v95 == -1 || v95 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v96 = *(unsigned char *)(*(void *)(a2 + *v7) + v95);
                    *(void *)(a2 + v94) = v95 + 1;
                    v93 |= (unint64_t)(v96 & 0x7F) << v91;
                    if (v96 < 0)
                    {
                      v91 += 7;
                      BOOL v14 = v92++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_200;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_200:
                  PBRepeatedInt32Add();
                }
                break;
              default:
LABEL_1212:
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
                continue;
            }
          }
          else
          {
            switch((int)v19)
            {
              case 2601:
                if (v17 != 2)
                {
                  char v445 = 0;
                  unsigned int v446 = 0;
                  uint64_t v447 = 0;
                  while (1)
                  {
                    uint64_t v448 = *v3;
                    unint64_t v449 = *(void *)(a2 + v448);
                    if (v449 == -1 || v449 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v450 = *(unsigned char *)(*(void *)(a2 + *v7) + v449);
                    *(void *)(a2 + v448) = v449 + 1;
                    v447 |= (unint64_t)(v450 & 0x7F) << v445;
                    if (v450 < 0)
                    {
                      v445 += 7;
                      BOOL v14 = v446++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v41 = 0;
                  unsigned int v42 = 0;
                  uint64_t v43 = 0;
                  while (1)
                  {
                    uint64_t v44 = *v3;
                    unint64_t v45 = *(void *)(a2 + v44);
                    if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
                    *(void *)(a2 + v44) = v45 + 1;
                    v43 |= (unint64_t)(v46 & 0x7F) << v41;
                    if (v46 < 0)
                    {
                      v41 += 7;
                      BOOL v14 = v42++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_79;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_79:
                  PBRepeatedInt32Add();
                }
                break;
              case 2602:
                if (v17 != 2)
                {
                  char v601 = 0;
                  unsigned int v602 = 0;
                  uint64_t v603 = 0;
                  while (1)
                  {
                    uint64_t v604 = *v3;
                    uint64_t v605 = *(void *)(a2 + v604);
                    unint64_t v606 = v605 + 1;
                    if (v605 == -1 || v606 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v607 = *(unsigned char *)(*(void *)(a2 + *v7) + v605);
                    *(void *)(a2 + v604) = v606;
                    v603 |= (unint64_t)(v607 & 0x7F) << v601;
                    if (v607 < 0)
                    {
                      v601 += 7;
                      BOOL v14 = v602++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v211 = 0;
                  unsigned int v212 = 0;
                  uint64_t v213 = 0;
                  while (1)
                  {
                    uint64_t v214 = *v3;
                    uint64_t v215 = *(void *)(a2 + v214);
                    unint64_t v216 = v215 + 1;
                    if (v215 == -1 || v216 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v217 = *(unsigned char *)(*(void *)(a2 + *v7) + v215);
                    *(void *)(a2 + v214) = v216;
                    v213 |= (unint64_t)(v217 & 0x7F) << v211;
                    if (v217 < 0)
                    {
                      v211 += 7;
                      BOOL v14 = v212++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_666;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_666:
                  PBRepeatedInt32Add();
                }
                break;
              case 2603:
                if (v17 != 2)
                {
                  char v608 = 0;
                  unsigned int v609 = 0;
                  uint64_t v610 = 0;
                  while (1)
                  {
                    uint64_t v611 = *v3;
                    uint64_t v612 = *(void *)(a2 + v611);
                    unint64_t v613 = v612 + 1;
                    if (v612 == -1 || v613 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v614 = *(unsigned char *)(*(void *)(a2 + *v7) + v612);
                    *(void *)(a2 + v611) = v613;
                    v610 |= (unint64_t)(v614 & 0x7F) << v608;
                    if (v614 < 0)
                    {
                      v608 += 7;
                      BOOL v14 = v609++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v218 = 0;
                  unsigned int v219 = 0;
                  uint64_t v220 = 0;
                  while (1)
                  {
                    uint64_t v221 = *v3;
                    uint64_t v222 = *(void *)(a2 + v221);
                    unint64_t v223 = v222 + 1;
                    if (v222 == -1 || v223 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v224 = *(unsigned char *)(*(void *)(a2 + *v7) + v222);
                    *(void *)(a2 + v221) = v223;
                    v220 |= (unint64_t)(v224 & 0x7F) << v218;
                    if (v224 < 0)
                    {
                      v218 += 7;
                      BOOL v14 = v219++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_679;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_679:
                  PBRepeatedInt32Add();
                }
                break;
              case 2604:
                unsigned int v40 = objc_alloc_init(_INPBAlarm);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadAlarm:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 2605:
                unsigned int v40 = objc_alloc_init(_INPBAlarmSearch);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBAlarmSearchReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadAlarmSearch:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 2606:
                unsigned int v40 = objc_alloc_init(_INPBSleepAlarmAttribute);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBSleepAlarmAttributeReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadSleepAlarmAttribute:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 2607:
                if (v17 != 2)
                {
                  char v615 = 0;
                  unsigned int v616 = 0;
                  uint64_t v617 = 0;
                  while (1)
                  {
                    uint64_t v618 = *v3;
                    uint64_t v619 = *(void *)(a2 + v618);
                    unint64_t v620 = v619 + 1;
                    if (v619 == -1 || v620 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v621 = *(unsigned char *)(*(void *)(a2 + *v7) + v619);
                    *(void *)(a2 + v618) = v620;
                    v617 |= (unint64_t)(v621 & 0x7F) << v615;
                    if (v621 < 0)
                    {
                      v615 += 7;
                      BOOL v14 = v616++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v225 = 0;
                  unsigned int v226 = 0;
                  uint64_t v227 = 0;
                  while (1)
                  {
                    uint64_t v228 = *v3;
                    uint64_t v229 = *(void *)(a2 + v228);
                    unint64_t v230 = v229 + 1;
                    if (v229 == -1 || v230 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v231 = *(unsigned char *)(*(void *)(a2 + *v7) + v229);
                    *(void *)(a2 + v228) = v230;
                    v227 |= (unint64_t)(v231 & 0x7F) << v225;
                    if (v231 < 0)
                    {
                      v225 += 7;
                      BOOL v14 = v226++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_704;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_704:
                  PBRepeatedInt32Add();
                }
                break;
              case 2608:
                if (v17 != 2)
                {
                  char v622 = 0;
                  unsigned int v623 = 0;
                  uint64_t v624 = 0;
                  while (1)
                  {
                    uint64_t v625 = *v3;
                    uint64_t v626 = *(void *)(a2 + v625);
                    unint64_t v627 = v626 + 1;
                    if (v626 == -1 || v627 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v628 = *(unsigned char *)(*(void *)(a2 + *v7) + v626);
                    *(void *)(a2 + v625) = v627;
                    v624 |= (unint64_t)(v628 & 0x7F) << v622;
                    if (v628 < 0)
                    {
                      v622 += 7;
                      BOOL v14 = v623++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v232 = 0;
                  unsigned int v233 = 0;
                  uint64_t v234 = 0;
                  while (1)
                  {
                    uint64_t v235 = *v3;
                    uint64_t v236 = *(void *)(a2 + v235);
                    unint64_t v237 = v236 + 1;
                    if (v236 == -1 || v237 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v238 = *(unsigned char *)(*(void *)(a2 + *v7) + v236);
                    *(void *)(a2 + v235) = v237;
                    v234 |= (unint64_t)(v238 & 0x7F) << v232;
                    if (v238 < 0)
                    {
                      v232 += 7;
                      BOOL v14 = v233++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_717;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_717:
                  PBRepeatedInt32Add();
                }
                break;
              default:
                switch((int)v19)
                {
                  case 2501:
                    unsigned int v40 = objc_alloc_init(_INPBTimer);
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v40, a2)) {
                      goto LABEL_1652;
                    }
                    PBReaderRecallMark();
                    if (v40) {
                      objc_msgSend(a1, "addPayloadTimer:", v40, 0, 0);
                    }
                    goto LABEL_1211;
                  case 2502:
                    if (v17 != 2)
                    {
                      char v788 = 0;
                      unsigned int v789 = 0;
                      uint64_t v790 = 0;
                      while (1)
                      {
                        uint64_t v791 = *v3;
                        unint64_t v792 = *(void *)(a2 + v791);
                        if (v792 == -1 || v792 >= *(void *)(a2 + *v4)) {
                          goto LABEL_1639;
                        }
                        char v793 = *(unsigned char *)(*(void *)(a2 + *v7) + v792);
                        *(void *)(a2 + v791) = v792 + 1;
                        v790 |= (unint64_t)(v793 & 0x7F) << v788;
                        if (v793 < 0)
                        {
                          v788 += 7;
                          BOOL v14 = v789++ >= 9;
                          if (!v14) {
                            continue;
                          }
                        }
                        goto LABEL_1640;
                      }
                    }
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    uint64_t result = PBReaderPlaceMark();
                    if (!result) {
                      return result;
                    }
                    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                    {
                      char v415 = 0;
                      unsigned int v416 = 0;
                      uint64_t v417 = 0;
                      while (1)
                      {
                        uint64_t v418 = *v3;
                        unint64_t v419 = *(void *)(a2 + v418);
                        if (v419 == -1 || v419 >= *(void *)(a2 + *v4)) {
                          break;
                        }
                        char v420 = *(unsigned char *)(*(void *)(a2 + *v7) + v419);
                        *(void *)(a2 + v418) = v419 + 1;
                        v417 |= (unint64_t)(v420 & 0x7F) << v415;
                        if (v420 < 0)
                        {
                          v415 += 7;
                          BOOL v14 = v416++ >= 9;
                          if (!v14) {
                            continue;
                          }
                        }
                        goto LABEL_1167;
                      }
                      *(unsigned char *)(a2 + *v5) = 1;
LABEL_1167:
                      PBRepeatedInt32Add();
                    }
                    goto LABEL_1206;
                  case 2503:
                    unsigned int v40 = objc_alloc_init(_INPBVoiceCommandDeviceInformation);
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    if (!PBReaderPlaceMark()
                      || !_INPBVoiceCommandDeviceInformationReadFrom(v40, a2))
                    {
                      goto LABEL_1652;
                    }
                    PBReaderRecallMark();
                    if (v40) {
                      objc_msgSend(a1, "addPayloadVoiceCommandDeviceInformation:", v40, 0, 0);
                    }
                    goto LABEL_1211;
                  case 2504:
                    if (v17 != 2)
                    {
                      char v794 = 0;
                      unsigned int v795 = 0;
                      uint64_t v796 = 0;
                      while (1)
                      {
                        uint64_t v797 = *v3;
                        unint64_t v798 = *(void *)(a2 + v797);
                        if (v798 == -1 || v798 >= *(void *)(a2 + *v4)) {
                          goto LABEL_1639;
                        }
                        char v799 = *(unsigned char *)(*(void *)(a2 + *v7) + v798);
                        *(void *)(a2 + v797) = v798 + 1;
                        v796 |= (unint64_t)(v799 & 0x7F) << v794;
                        if (v799 < 0)
                        {
                          v794 += 7;
                          BOOL v14 = v795++ >= 9;
                          if (!v14) {
                            continue;
                          }
                        }
                        goto LABEL_1640;
                      }
                    }
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    uint64_t result = PBReaderPlaceMark();
                    if (!result) {
                      return result;
                    }
                    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                    {
                      char v421 = 0;
                      unsigned int v422 = 0;
                      uint64_t v423 = 0;
                      while (1)
                      {
                        uint64_t v424 = *v3;
                        unint64_t v425 = *(void *)(a2 + v424);
                        if (v425 == -1 || v425 >= *(void *)(a2 + *v4)) {
                          break;
                        }
                        char v426 = *(unsigned char *)(*(void *)(a2 + *v7) + v425);
                        *(void *)(a2 + v424) = v425 + 1;
                        v423 |= (unint64_t)(v426 & 0x7F) << v421;
                        if (v426 < 0)
                        {
                          v421 += 7;
                          BOOL v14 = v422++ >= 9;
                          if (!v14) {
                            continue;
                          }
                        }
                        goto LABEL_1184;
                      }
                      *(unsigned char *)(a2 + *v5) = 1;
LABEL_1184:
                      PBRepeatedInt32Add();
                    }
                    break;
                  case 2505:
                  case 2506:
                  case 2507:
                    goto LABEL_1212;
                  case 2508:
                    unsigned int v40 = objc_alloc_init(_INPBIntentExecutionResult);
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    if (!PBReaderPlaceMark()
                      || !_INPBIntentExecutionResultReadFrom(v40, a2))
                    {
                      goto LABEL_1652;
                    }
                    PBReaderRecallMark();
                    if (v40) {
                      objc_msgSend(a1, "addPayloadIntentExecutionResult:", v40, 0, 0);
                    }
                    goto LABEL_1211;
                  default:
                    if (v19 != 2573) {
                      goto LABEL_1212;
                    }
                    unsigned int v40 = objc_alloc_init(_INPBAppIdentifier);
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v40, a2)) {
                      goto LABEL_1652;
                    }
                    PBReaderRecallMark();
                    if (v40) {
                      objc_msgSend(a1, "addPayloadAppIdentifier:", v40, 0, 0);
                    }
                    goto LABEL_1211;
                }
                break;
            }
          }
        }
        else
        {
          switch((int)v19)
          {
            case 2400:
              if (v17 != 2)
              {
                char v439 = 0;
                unsigned int v440 = 0;
                uint64_t v441 = 0;
                while (1)
                {
                  uint64_t v442 = *v3;
                  unint64_t v443 = *(void *)(a2 + v442);
                  if (v443 == -1 || v443 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v444 = *(unsigned char *)(*(void *)(a2 + *v7) + v443);
                  *(void *)(a2 + v442) = v443 + 1;
                  v441 |= (unint64_t)(v444 & 0x7F) << v439;
                  if (v444 < 0)
                  {
                    v439 += 7;
                    BOOL v14 = v440++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v29 = 0;
                while (1)
                {
                  uint64_t v30 = *v3;
                  unint64_t v31 = *(void *)(a2 + v30);
                  if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
                  *(void *)(a2 + v30) = v31 + 1;
                  v29 |= (unint64_t)(v32 & 0x7F) << v27;
                  if (v32 < 0)
                  {
                    v27 += 7;
                    BOOL v14 = v28++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_50;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
                PBRepeatedInt32Add();
              }
              break;
            case 2401:
              unsigned int v40 = objc_alloc_init(_INPBNoteContent);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBNoteContentReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadNoteContent:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2402:
              unsigned int v40 = objc_alloc_init(_INPBTemporalEventTrigger);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBTemporalEventTriggerReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadTemporalEventTrigger:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2403:
              unsigned int v40 = objc_alloc_init(_INPBSpatialEventTrigger);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBSpatialEventTriggerReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadSpatialEventTrigger:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2404:
              if (v17 != 2)
              {
                char v507 = 0;
                unsigned int v508 = 0;
                uint64_t v509 = 0;
                while (1)
                {
                  uint64_t v510 = *v3;
                  unint64_t v511 = *(void *)(a2 + v510);
                  if (v511 == -1 || v511 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v512 = *(unsigned char *)(*(void *)(a2 + *v7) + v511);
                  *(void *)(a2 + v510) = v511 + 1;
                  v509 |= (unint64_t)(v512 & 0x7F) << v507;
                  if (v512 < 0)
                  {
                    v507 += 7;
                    BOOL v14 = v508++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v117 = 0;
                unsigned int v118 = 0;
                uint64_t v119 = 0;
                while (1)
                {
                  uint64_t v120 = *v3;
                  unint64_t v121 = *(void *)(a2 + v120);
                  if (v121 == -1 || v121 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v122 = *(unsigned char *)(*(void *)(a2 + *v7) + v121);
                  *(void *)(a2 + v120) = v121 + 1;
                  v119 |= (unint64_t)(v122 & 0x7F) << v117;
                  if (v122 < 0)
                  {
                    v117 += 7;
                    BOOL v14 = v118++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_303;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_303:
                PBRepeatedInt32Add();
              }
              break;
            case 2405:
              if (v17 != 2)
              {
                char v513 = 0;
                unsigned int v514 = 0;
                uint64_t v515 = 0;
                while (1)
                {
                  uint64_t v516 = *v3;
                  unint64_t v517 = *(void *)(a2 + v516);
                  if (v517 == -1 || v517 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v518 = *(unsigned char *)(*(void *)(a2 + *v7) + v517);
                  *(void *)(a2 + v516) = v517 + 1;
                  v515 |= (unint64_t)(v518 & 0x7F) << v513;
                  if (v518 < 0)
                  {
                    v513 += 7;
                    BOOL v14 = v514++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v123 = 0;
                unsigned int v124 = 0;
                uint64_t v125 = 0;
                while (1)
                {
                  uint64_t v126 = *v3;
                  unint64_t v127 = *(void *)(a2 + v126);
                  if (v127 == -1 || v127 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v128 = *(unsigned char *)(*(void *)(a2 + *v7) + v127);
                  *(void *)(a2 + v126) = v127 + 1;
                  v125 |= (unint64_t)(v128 & 0x7F) << v123;
                  if (v128 < 0)
                  {
                    v123 += 7;
                    BOOL v14 = v124++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_316;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_316:
                PBRepeatedInt32Add();
              }
              break;
            case 2406:
            case 2413:
              goto LABEL_1212;
            case 2407:
              if (v17 != 2)
              {
                char v519 = 0;
                unsigned int v520 = 0;
                uint64_t v521 = 0;
                while (1)
                {
                  uint64_t v522 = *v3;
                  uint64_t v523 = *(void *)(a2 + v522);
                  unint64_t v524 = v523 + 1;
                  if (v523 == -1 || v524 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v525 = *(unsigned char *)(*(void *)(a2 + *v7) + v523);
                  *(void *)(a2 + v522) = v524;
                  v521 |= (unint64_t)(v525 & 0x7F) << v519;
                  if (v525 < 0)
                  {
                    v519 += 7;
                    BOOL v14 = v520++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v129 = 0;
                unsigned int v130 = 0;
                uint64_t v131 = 0;
                while (1)
                {
                  uint64_t v132 = *v3;
                  uint64_t v133 = *(void *)(a2 + v132);
                  unint64_t v134 = v133 + 1;
                  if (v133 == -1 || v134 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v135 = *(unsigned char *)(*(void *)(a2 + *v7) + v133);
                  *(void *)(a2 + v132) = v134;
                  v131 |= (unint64_t)(v135 & 0x7F) << v129;
                  if (v135 < 0)
                  {
                    v129 += 7;
                    BOOL v14 = v130++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_329;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_329:
                PBRepeatedInt32Add();
              }
              break;
            case 2408:
              if (v17 != 2)
              {
                char v526 = 0;
                unsigned int v527 = 0;
                uint64_t v528 = 0;
                while (1)
                {
                  uint64_t v529 = *v3;
                  unint64_t v530 = *(void *)(a2 + v529);
                  if (v530 == -1 || v530 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v531 = *(unsigned char *)(*(void *)(a2 + *v7) + v530);
                  *(void *)(a2 + v529) = v530 + 1;
                  v528 |= (unint64_t)(v531 & 0x7F) << v526;
                  if (v531 < 0)
                  {
                    v526 += 7;
                    BOOL v14 = v527++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v136 = 0;
                unsigned int v137 = 0;
                uint64_t v138 = 0;
                while (1)
                {
                  uint64_t v139 = *v3;
                  unint64_t v140 = *(void *)(a2 + v139);
                  if (v140 == -1 || v140 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v141 = *(unsigned char *)(*(void *)(a2 + *v7) + v140);
                  *(void *)(a2 + v139) = v140 + 1;
                  v138 |= (unint64_t)(v141 & 0x7F) << v136;
                  if (v141 < 0)
                  {
                    v136 += 7;
                    BOOL v14 = v137++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_342;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_342:
                PBRepeatedInt32Add();
              }
              break;
            case 2409:
              if (v17 != 2)
              {
                char v532 = 0;
                unsigned int v533 = 0;
                uint64_t v534 = 0;
                while (1)
                {
                  uint64_t v535 = *v3;
                  unint64_t v536 = *(void *)(a2 + v535);
                  if (v536 == -1 || v536 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v537 = *(unsigned char *)(*(void *)(a2 + *v7) + v536);
                  *(void *)(a2 + v535) = v536 + 1;
                  v534 |= (unint64_t)(v537 & 0x7F) << v532;
                  if (v537 < 0)
                  {
                    v532 += 7;
                    BOOL v14 = v533++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v142 = 0;
                unsigned int v143 = 0;
                uint64_t v144 = 0;
                while (1)
                {
                  uint64_t v145 = *v3;
                  unint64_t v146 = *(void *)(a2 + v145);
                  if (v146 == -1 || v146 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v147 = *(unsigned char *)(*(void *)(a2 + *v7) + v146);
                  *(void *)(a2 + v145) = v146 + 1;
                  v144 |= (unint64_t)(v147 & 0x7F) << v142;
                  if (v147 < 0)
                  {
                    v142 += 7;
                    BOOL v14 = v143++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_355;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_355:
                PBRepeatedInt32Add();
              }
              break;
            case 2410:
              unsigned int v40 = objc_alloc_init(_INPBTaskList);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadTaskList:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2411:
              unsigned int v40 = objc_alloc_init(_INPBTask);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadTask:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2412:
              unsigned int v40 = objc_alloc_init(_INPBNote);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadNote:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2414:
              unsigned int v40 = objc_alloc_init(_INPBContactEventTrigger);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBContactEventTriggerReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadContactEventTrigger:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 2415:
              if (v17 != 2)
              {
                char v538 = 0;
                unsigned int v539 = 0;
                uint64_t v540 = 0;
                while (1)
                {
                  uint64_t v541 = *v3;
                  unint64_t v542 = *(void *)(a2 + v541);
                  if (v542 == -1 || v542 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v543 = *(unsigned char *)(*(void *)(a2 + *v7) + v542);
                  *(void *)(a2 + v541) = v542 + 1;
                  v540 |= (unint64_t)(v543 & 0x7F) << v538;
                  if (v543 < 0)
                  {
                    v538 += 7;
                    BOOL v14 = v539++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v148 = 0;
                unsigned int v149 = 0;
                uint64_t v150 = 0;
                while (1)
                {
                  uint64_t v151 = *v3;
                  unint64_t v152 = *(void *)(a2 + v151);
                  if (v152 == -1 || v152 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v153 = *(unsigned char *)(*(void *)(a2 + *v7) + v152);
                  *(void *)(a2 + v151) = v152 + 1;
                  v150 |= (unint64_t)(v153 & 0x7F) << v148;
                  if (v153 < 0)
                  {
                    v148 += 7;
                    BOOL v14 = v149++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_384;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_384:
                PBRepeatedInt32Add();
              }
              break;
            case 2416:
              if (v17 != 2)
              {
                char v544 = 0;
                unsigned int v545 = 0;
                uint64_t v546 = 0;
                while (1)
                {
                  uint64_t v547 = *v3;
                  unint64_t v548 = *(void *)(a2 + v547);
                  if (v548 == -1 || v548 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v549 = *(unsigned char *)(*(void *)(a2 + *v7) + v548);
                  *(void *)(a2 + v547) = v548 + 1;
                  v546 |= (unint64_t)(v549 & 0x7F) << v544;
                  if (v549 < 0)
                  {
                    v544 += 7;
                    BOOL v14 = v545++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v154 = 0;
                unsigned int v155 = 0;
                uint64_t v156 = 0;
                while (1)
                {
                  uint64_t v157 = *v3;
                  unint64_t v158 = *(void *)(a2 + v157);
                  if (v158 == -1 || v158 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v159 = *(unsigned char *)(*(void *)(a2 + *v7) + v158);
                  *(void *)(a2 + v157) = v158 + 1;
                  v156 |= (unint64_t)(v159 & 0x7F) << v154;
                  if (v159 < 0)
                  {
                    v154 += 7;
                    BOOL v14 = v155++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_397;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_397:
                PBRepeatedInt32Add();
              }
              break;
            default:
              switch((int)v19)
              {
                case 2001:
                  if (v17 != 2)
                  {
                    char v483 = 0;
                    unsigned int v484 = 0;
                    uint64_t v485 = 0;
                    while (1)
                    {
                      uint64_t v486 = *v3;
                      unint64_t v487 = *(void *)(a2 + v486);
                      if (v487 == -1 || v487 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v488 = *(unsigned char *)(*(void *)(a2 + *v7) + v487);
                      *(void *)(a2 + v486) = v487 + 1;
                      v485 |= (unint64_t)(v488 & 0x7F) << v483;
                      if (v488 < 0)
                      {
                        v483 += 7;
                        BOOL v14 = v484++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v85 = 0;
                    unsigned int v86 = 0;
                    uint64_t v87 = 0;
                    while (1)
                    {
                      uint64_t v88 = *v3;
                      unint64_t v89 = *(void *)(a2 + v88);
                      if (v89 == -1 || v89 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v90 = *(unsigned char *)(*(void *)(a2 + *v7) + v89);
                      *(void *)(a2 + v88) = v89 + 1;
                      v87 |= (unint64_t)(v90 & 0x7F) << v85;
                      if (v90 < 0)
                      {
                        v85 += 7;
                        BOOL v14 = v86++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_173;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_173:
                    PBRepeatedInt32Add();
                  }
                  goto LABEL_1206;
                case 2002:
                  unsigned int v40 = objc_alloc_init(_INPBNumericSettingValue);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBNumericSettingValueReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadNumericSettingValue:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 2003:
                  if (v17 != 2)
                  {
                    char v768 = 0;
                    unsigned int v769 = 0;
                    uint64_t v770 = 0;
                    while (1)
                    {
                      uint64_t v771 = *v3;
                      unint64_t v772 = *(void *)(a2 + v771);
                      if (v772 == -1 || v772 >= *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v773 = *(unsigned char *)(*(void *)(a2 + *v7) + v772);
                      *(void *)(a2 + v771) = v772 + 1;
                      v770 |= (unint64_t)(v773 & 0x7F) << v768;
                      if (v773 < 0)
                      {
                        v768 += 7;
                        BOOL v14 = v769++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v395 = 0;
                    unsigned int v396 = 0;
                    uint64_t v397 = 0;
                    while (1)
                    {
                      uint64_t v398 = *v3;
                      unint64_t v399 = *(void *)(a2 + v398);
                      if (v399 == -1 || v399 >= *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v400 = *(unsigned char *)(*(void *)(a2 + *v7) + v399);
                      *(void *)(a2 + v398) = v399 + 1;
                      v397 |= (unint64_t)(v400 & 0x7F) << v395;
                      if (v400 < 0)
                      {
                        v395 += 7;
                        BOOL v14 = v396++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1104;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_1104:
                    PBRepeatedInt32Add();
                  }
                  goto LABEL_1206;
                case 2004:
                  unsigned int v40 = objc_alloc_init(_INPBSettingMetadata);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadSettingMetadata:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 2005:
                  if (v17 != 2)
                  {
                    char v774 = 0;
                    unsigned int v775 = 0;
                    uint64_t v776 = 0;
                    while (1)
                    {
                      uint64_t v777 = *v3;
                      uint64_t v778 = *(void *)(a2 + v777);
                      unint64_t v779 = v778 + 1;
                      if (v778 == -1 || v779 > *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v780 = *(unsigned char *)(*(void *)(a2 + *v7) + v778);
                      *(void *)(a2 + v777) = v779;
                      v776 |= (unint64_t)(v780 & 0x7F) << v774;
                      if (v780 < 0)
                      {
                        v774 += 7;
                        BOOL v14 = v775++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v401 = 0;
                    unsigned int v402 = 0;
                    uint64_t v403 = 0;
                    while (1)
                    {
                      uint64_t v404 = *v3;
                      uint64_t v405 = *(void *)(a2 + v404);
                      unint64_t v406 = v405 + 1;
                      if (v405 == -1 || v406 > *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v407 = *(unsigned char *)(*(void *)(a2 + *v7) + v405);
                      *(void *)(a2 + v404) = v406;
                      v403 |= (unint64_t)(v407 & 0x7F) << v401;
                      if (v407 < 0)
                      {
                        v401 += 7;
                        BOOL v14 = v402++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1121;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_1121:
                    PBRepeatedInt32Add();
                  }
                  goto LABEL_1206;
                case 2006:
                  if (v17 != 2)
                  {
                    char v781 = 0;
                    unsigned int v782 = 0;
                    uint64_t v783 = 0;
                    while (1)
                    {
                      uint64_t v784 = *v3;
                      uint64_t v785 = *(void *)(a2 + v784);
                      unint64_t v786 = v785 + 1;
                      if (v785 == -1 || v786 > *(void *)(a2 + *v4)) {
                        goto LABEL_1639;
                      }
                      char v787 = *(unsigned char *)(*(void *)(a2 + *v7) + v785);
                      *(void *)(a2 + v784) = v786;
                      v783 |= (unint64_t)(v787 & 0x7F) << v781;
                      if (v787 < 0)
                      {
                        v781 += 7;
                        BOOL v14 = v782++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1640;
                    }
                  }
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  uint64_t result = PBReaderPlaceMark();
                  if (!result) {
                    return result;
                  }
                  while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                  {
                    char v408 = 0;
                    unsigned int v409 = 0;
                    uint64_t v410 = 0;
                    while (1)
                    {
                      uint64_t v411 = *v3;
                      uint64_t v412 = *(void *)(a2 + v411);
                      unint64_t v413 = v412 + 1;
                      if (v412 == -1 || v413 > *(void *)(a2 + *v4)) {
                        break;
                      }
                      char v414 = *(unsigned char *)(*(void *)(a2 + *v7) + v412);
                      *(void *)(a2 + v411) = v413;
                      v410 |= (unint64_t)(v414 & 0x7F) << v408;
                      if (v414 < 0)
                      {
                        v408 += 7;
                        BOOL v14 = v409++ >= 9;
                        if (!v14) {
                          continue;
                        }
                      }
                      goto LABEL_1134;
                    }
                    *(unsigned char *)(a2 + *v5) = 1;
LABEL_1134:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 2007:
                  unsigned int v40 = objc_alloc_init(_INPBGetSettingResponseData);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBGetSettingResponseDataReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadGetSettingResponseData:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                case 2008:
                  unsigned int v40 = objc_alloc_init(_INPBDevice);
                  uint64_t v806 = 0;
                  uint64_t v807 = 0;
                  if (!PBReaderPlaceMark() || !_INPBDeviceReadFrom(v40, a2)) {
                    goto LABEL_1652;
                  }
                  PBReaderRecallMark();
                  if (v40) {
                    objc_msgSend(a1, "addPayloadDevice:", v40, 0, 0);
                  }
                  goto LABEL_1211;
                default:
                  goto LABEL_1212;
              }
              break;
          }
        }
      }
      else if ((int)v19 <= 1000)
      {
        switch((int)v19)
        {
          case 1:
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            while (2)
            {
              uint64_t v36 = *v3;
              unint64_t v37 = *(void *)(a2 + v36);
              if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                *(void *)(a2 + v36) = v37 + 1;
                v35 |= (unint64_t)(v38 & 0x7F) << v33;
                if (v38 < 0)
                {
                  v33 += 7;
                  BOOL v14 = v34++ >= 9;
                  if (v14)
                  {
                    uint64_t v39 = 0;
                    goto LABEL_1218;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v39 = 0;
            }
            else {
              uint64_t v39 = v35;
            }
LABEL_1218:
            objc_msgSend(a1, "setType:", v39, v806, v807);
            continue;
          case 2:
            unsigned int v40 = objc_alloc_init(_INPBStringValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadStringValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 3:
            unsigned int v40 = objc_alloc_init(_INPBDoubleValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDoubleValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDoubleValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 4:
            unsigned int v40 = objc_alloc_init(_INPBIntegerValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBIntegerValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadIntegerValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 5:
            unsigned int v40 = objc_alloc_init(_INPBContactValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadContactValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 6:
            unsigned int v40 = objc_alloc_init(_INPBDateTimeRangeValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDateTimeRangeValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDateTimeRangeValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 7:
            unsigned int v40 = objc_alloc_init(_INPBLocationValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadLocation:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 8:
            unsigned int v40 = objc_alloc_init(_INPBDataString);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDataString:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 9:
            unsigned int v40 = objc_alloc_init(_INPBLongValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBLongValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadLongValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 10:
            unsigned int v40 = objc_alloc_init(_INPBPaymentMethodValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBPaymentMethodValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadPaymentMethodValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 11:
            unsigned int v40 = objc_alloc_init(_INPBTemperatureValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBTemperatureValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadTemperatureValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 12:
            unsigned int v40 = objc_alloc_init(_INPBDistanceValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDistanceValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDistanceValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 13:
            unsigned int v40 = objc_alloc_init(_INPBDateTime);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDateTimeReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDateTimeValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 14:
            unsigned int v40 = objc_alloc_init(_INPBMassValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBMassValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadMassValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 15:
            unsigned int v40 = objc_alloc_init(_INPBVolumeValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBVolumeValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadVolumeValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 16:
            unsigned int v40 = objc_alloc_init(_INPBSpeedValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBSpeedValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadSpeedValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 17:
            unsigned int v40 = objc_alloc_init(_INPBEnergyValue);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBEnergyValueReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadEnergyValue:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
            goto LABEL_1212;
          case 50:
            unsigned int v40 = objc_alloc_init(_INPBStringList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadStringList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 51:
            unsigned int v40 = objc_alloc_init(_INPBDoubleList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDoubleListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDoubleList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 52:
            unsigned int v40 = objc_alloc_init(_INPBIntegerList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBIntegerListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadIntegerList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 53:
            unsigned int v40 = objc_alloc_init(_INPBContactList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBContactListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadContactList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 54:
            unsigned int v40 = objc_alloc_init(_INPBDateTimeRangeList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDateTimeRangeListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDateTimeRangeList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 55:
            unsigned int v40 = objc_alloc_init(_INPBLocationList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBLocationListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadLocationList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 56:
            unsigned int v40 = objc_alloc_init(_INPBDataStringList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDataStringListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDataStringList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 57:
            unsigned int v40 = objc_alloc_init(_INPBLongList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBLongListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadLongList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 58:
            unsigned int v40 = objc_alloc_init(_INPBPaymentMethodList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBPaymentMethodListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadPaymentMethodList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 59:
            unsigned int v40 = objc_alloc_init(_INPBTemperatureList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBTemperatureListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadTemperatureList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 60:
            unsigned int v40 = objc_alloc_init(_INPBDistanceList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBDistanceListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadDistanceList:", v40, 0, 0);
            }
            goto LABEL_1211;
          default:
            switch((int)v19)
            {
              case 'd':
                char v60 = 0;
                unsigned int v61 = 0;
                uint64_t v62 = 0;
                while (2)
                {
                  uint64_t v63 = *v3;
                  unint64_t v64 = *(void *)(a2 + v63);
                  if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
                  {
                    *(unsigned char *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    char v65 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
                    *(void *)(a2 + v63) = v64 + 1;
                    v62 |= (unint64_t)(v65 & 0x7F) << v60;
                    if (v65 < 0)
                    {
                      v60 += 7;
                      BOOL v14 = v61++ >= 9;
                      if (v14)
                      {
                        uint64_t v62 = 0;
                        goto LABEL_1222;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(unsigned char *)(a2 + *v5)) {
                  uint64_t v62 = 0;
                }
LABEL_1222:
                [a1 addPayloadPrimitiveBool:v62 != 0];
                continue;
              case 'e':
                char v299 = 0;
                unsigned int v300 = 0;
                uint64_t v301 = 0;
                while (2)
                {
                  uint64_t v302 = *v3;
                  unint64_t v303 = *(void *)(a2 + v302);
                  if (v303 == -1 || v303 >= *(void *)(a2 + *v4))
                  {
                    *(unsigned char *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    char v304 = *(unsigned char *)(*(void *)(a2 + *v7) + v303);
                    *(void *)(a2 + v302) = v303 + 1;
                    v301 |= (unint64_t)(v304 & 0x7F) << v299;
                    if (v304 < 0)
                    {
                      v299 += 7;
                      BOOL v14 = v300++ >= 9;
                      if (v14)
                      {
                        uint64_t v305 = 0;
                        goto LABEL_1227;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(unsigned char *)(a2 + *v5)) {
                  uint64_t v305 = 0;
                }
                else {
                  uint64_t v305 = v301;
                }
LABEL_1227:
                objc_msgSend(a1, "addPayloadPrimitiveInt:", v305, v806, v807);
                continue;
              case 'f':
                char v306 = 0;
                unsigned int v307 = 0;
                uint64_t v308 = 0;
                while (2)
                {
                  uint64_t v309 = *v3;
                  unint64_t v310 = *(void *)(a2 + v309);
                  if (v310 == -1 || v310 >= *(void *)(a2 + *v4))
                  {
                    *(unsigned char *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    char v311 = *(unsigned char *)(*(void *)(a2 + *v7) + v310);
                    *(void *)(a2 + v309) = v310 + 1;
                    v308 |= (unint64_t)(v311 & 0x7F) << v306;
                    if (v311 < 0)
                    {
                      v306 += 7;
                      BOOL v14 = v307++ >= 9;
                      if (v14)
                      {
                        uint64_t v312 = 0;
                        goto LABEL_1232;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(unsigned char *)(a2 + *v5)) {
                  uint64_t v312 = 0;
                }
                else {
                  uint64_t v312 = v308;
                }
LABEL_1232:
                objc_msgSend(a1, "addPayloadPrimitiveLong:", v312, v806, v807);
                continue;
              case 'g':
                uint64_t v313 = *v3;
                unint64_t v314 = *(void *)(a2 + v313);
                if (v314 <= 0xFFFFFFFFFFFFFFF7 && v314 + 8 <= *(void *)(a2 + *v4))
                {
                  double v315 = *(double *)(*(void *)(a2 + *v7) + v314);
                  *(void *)(a2 + v313) = v314 + 8;
                }
                else
                {
                  *(unsigned char *)(a2 + v15) = 1;
                  double v315 = 0.0;
                }
                objc_msgSend(a1, "addPayloadPrimitiveDouble:", v315, v806, v807);
                continue;
              case 'h':
                PBReaderReadString();
                unsigned int v40 = (_INPBHomeEntity *)objc_claimAutoreleasedReturnValue();
                if (v40) {
                  [a1 addPayloadPrimitiveString:v40];
                }
                goto LABEL_1211;
              case 'i':
              case 'j':
                goto LABEL_1212;
              case 'k':
                unsigned int v40 = objc_alloc_init(_INPBIntent);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBIntentReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadIntent:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 'l':
                unsigned int v40 = objc_alloc_init(_INPBModifyRelationship);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBModifyRelationshipReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadModifyRelationship:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 'm':
                unsigned int v40 = objc_alloc_init(_INPBModifyNickname);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBModifyNicknameReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadModifyNickname:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 'n':
                unsigned int v40 = objc_alloc_init(_INPBCalendarEvent);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBCalendarEventReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadCalendarEvent:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 'o':
                unsigned int v40 = objc_alloc_init(_INPBEventParticipant);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBEventParticipantReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadEventParticipant:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 'p':
                if (v17 != 2)
                {
                  char v689 = 0;
                  unsigned int v690 = 0;
                  uint64_t v691 = 0;
                  while (1)
                  {
                    uint64_t v692 = *v3;
                    uint64_t v693 = *(void *)(a2 + v692);
                    unint64_t v694 = v693 + 1;
                    if (v693 == -1 || v694 > *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v695 = *(unsigned char *)(*(void *)(a2 + *v7) + v693);
                    *(void *)(a2 + v692) = v694;
                    v691 |= (unint64_t)(v695 & 0x7F) << v689;
                    if (v695 < 0)
                    {
                      v689 += 7;
                      BOOL v14 = v690++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v316 = 0;
                  unsigned int v317 = 0;
                  uint64_t v318 = 0;
                  while (1)
                  {
                    uint64_t v319 = *v3;
                    uint64_t v320 = *(void *)(a2 + v319);
                    unint64_t v321 = v320 + 1;
                    if (v320 == -1 || v321 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v322 = *(unsigned char *)(*(void *)(a2 + *v7) + v320);
                    *(void *)(a2 + v319) = v321;
                    v318 |= (unint64_t)(v322 & 0x7F) << v316;
                    if (v322 < 0)
                    {
                      v316 += 7;
                      BOOL v14 = v317++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_902;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_902:
                  PBRepeatedInt32Add();
                }
                break;
              default:
                if (v19 != 200) {
                  goto LABEL_1212;
                }
                char v103 = 0;
                unsigned int v104 = 0;
                uint64_t v105 = 0;
                while (2)
                {
                  uint64_t v106 = *v3;
                  uint64_t v107 = *(void *)(a2 + v106);
                  unint64_t v108 = v107 + 1;
                  if (v107 == -1 || v108 > *(void *)(a2 + *v4))
                  {
                    *(unsigned char *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    char v109 = *(unsigned char *)(*(void *)(a2 + *v7) + v107);
                    *(void *)(a2 + v106) = v108;
                    v105 |= (unint64_t)(v109 & 0x7F) << v103;
                    if (v109 < 0)
                    {
                      v103 += 7;
                      BOOL v14 = v104++ >= 9;
                      if (v14)
                      {
                        uint64_t v110 = 0;
                        goto LABEL_1647;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(unsigned char *)(a2 + *v5)) {
                  uint64_t v110 = 0;
                }
                else {
                  uint64_t v110 = v105;
                }
LABEL_1647:
                objc_msgSend(a1, "addPayloadEnumeration:", v110, v806, v807);
                continue;
            }
            break;
        }
      }
      else if ((int)v19 <= 1400)
      {
        if ((int)v19 > 1199)
        {
          switch((int)v19)
          {
            case 1301:
              if (v17 != 2)
              {
                char v464 = 0;
                unsigned int v465 = 0;
                uint64_t v466 = 0;
                while (1)
                {
                  uint64_t v467 = *v3;
                  uint64_t v468 = *(void *)(a2 + v467);
                  unint64_t v469 = v468 + 1;
                  if (v468 == -1 || v469 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v470 = *(unsigned char *)(*(void *)(a2 + *v7) + v468);
                  *(void *)(a2 + v467) = v469;
                  v466 |= (unint64_t)(v470 & 0x7F) << v464;
                  if (v470 < 0)
                  {
                    v464 += 7;
                    BOOL v14 = v465++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v66 = 0;
                unsigned int v67 = 0;
                uint64_t v68 = 0;
                while (1)
                {
                  uint64_t v69 = *v3;
                  uint64_t v70 = *(void *)(a2 + v69);
                  unint64_t v71 = v70 + 1;
                  if (v70 == -1 || v71 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v72 = *(unsigned char *)(*(void *)(a2 + *v7) + v70);
                  *(void *)(a2 + v69) = v71;
                  v68 |= (unint64_t)(v72 & 0x7F) << v66;
                  if (v72 < 0)
                  {
                    v66 += 7;
                    BOOL v14 = v67++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_131;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_131:
                PBRepeatedInt32Add();
              }
              break;
            case 1302:
              if (v17 != 2)
              {
                char v696 = 0;
                unsigned int v697 = 0;
                uint64_t v698 = 0;
                while (1)
                {
                  uint64_t v699 = *v3;
                  uint64_t v700 = *(void *)(a2 + v699);
                  unint64_t v701 = v700 + 1;
                  if (v700 == -1 || v701 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v702 = *(unsigned char *)(*(void *)(a2 + *v7) + v700);
                  *(void *)(a2 + v699) = v701;
                  v698 |= (unint64_t)(v702 & 0x7F) << v696;
                  if (v702 < 0)
                  {
                    v696 += 7;
                    BOOL v14 = v697++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v323 = 0;
                unsigned int v324 = 0;
                uint64_t v325 = 0;
                while (1)
                {
                  uint64_t v326 = *v3;
                  uint64_t v327 = *(void *)(a2 + v326);
                  unint64_t v328 = v327 + 1;
                  if (v327 == -1 || v328 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v329 = *(unsigned char *)(*(void *)(a2 + *v7) + v327);
                  *(void *)(a2 + v326) = v328;
                  v325 |= (unint64_t)(v329 & 0x7F) << v323;
                  if (v329 < 0)
                  {
                    v323 += 7;
                    BOOL v14 = v324++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_915;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_915:
                PBRepeatedInt32Add();
              }
              break;
            case 1303:
              if (v17 != 2)
              {
                char v703 = 0;
                unsigned int v704 = 0;
                uint64_t v705 = 0;
                while (1)
                {
                  uint64_t v706 = *v3;
                  unint64_t v707 = *(void *)(a2 + v706);
                  if (v707 == -1 || v707 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v708 = *(unsigned char *)(*(void *)(a2 + *v7) + v707);
                  *(void *)(a2 + v706) = v707 + 1;
                  v705 |= (unint64_t)(v708 & 0x7F) << v703;
                  if (v708 < 0)
                  {
                    v703 += 7;
                    BOOL v14 = v704++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v330 = 0;
                unsigned int v331 = 0;
                uint64_t v332 = 0;
                while (1)
                {
                  uint64_t v333 = *v3;
                  unint64_t v334 = *(void *)(a2 + v333);
                  if (v334 == -1 || v334 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v335 = *(unsigned char *)(*(void *)(a2 + *v7) + v334);
                  *(void *)(a2 + v333) = v334 + 1;
                  v332 |= (unint64_t)(v335 & 0x7F) << v330;
                  if (v335 < 0)
                  {
                    v330 += 7;
                    BOOL v14 = v331++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_928;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_928:
                PBRepeatedInt32Add();
              }
              break;
            case 1304:
              if (v17 != 2)
              {
                char v709 = 0;
                unsigned int v710 = 0;
                uint64_t v711 = 0;
                while (1)
                {
                  uint64_t v712 = *v3;
                  uint64_t v713 = *(void *)(a2 + v712);
                  unint64_t v714 = v713 + 1;
                  if (v713 == -1 || v714 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v715 = *(unsigned char *)(*(void *)(a2 + *v7) + v713);
                  *(void *)(a2 + v712) = v714;
                  v711 |= (unint64_t)(v715 & 0x7F) << v709;
                  if (v715 < 0)
                  {
                    v709 += 7;
                    BOOL v14 = v710++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v336 = 0;
                unsigned int v337 = 0;
                uint64_t v338 = 0;
                while (1)
                {
                  uint64_t v339 = *v3;
                  uint64_t v340 = *(void *)(a2 + v339);
                  unint64_t v341 = v340 + 1;
                  if (v340 == -1 || v341 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v342 = *(unsigned char *)(*(void *)(a2 + *v7) + v340);
                  *(void *)(a2 + v339) = v341;
                  v338 |= (unint64_t)(v342 & 0x7F) << v336;
                  if (v342 < 0)
                  {
                    v336 += 7;
                    BOOL v14 = v337++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_941;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_941:
                PBRepeatedInt32Add();
              }
              break;
            case 1305:
              if (v17 != 2)
              {
                char v716 = 0;
                unsigned int v717 = 0;
                uint64_t v718 = 0;
                while (1)
                {
                  uint64_t v719 = *v3;
                  uint64_t v720 = *(void *)(a2 + v719);
                  unint64_t v721 = v720 + 1;
                  if (v720 == -1 || v721 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v722 = *(unsigned char *)(*(void *)(a2 + *v7) + v720);
                  *(void *)(a2 + v719) = v721;
                  v718 |= (unint64_t)(v722 & 0x7F) << v716;
                  if (v722 < 0)
                  {
                    v716 += 7;
                    BOOL v14 = v717++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v343 = 0;
                unsigned int v344 = 0;
                uint64_t v345 = 0;
                while (1)
                {
                  uint64_t v346 = *v3;
                  uint64_t v347 = *(void *)(a2 + v346);
                  unint64_t v348 = v347 + 1;
                  if (v347 == -1 || v348 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v349 = *(unsigned char *)(*(void *)(a2 + *v7) + v347);
                  *(void *)(a2 + v346) = v348;
                  v345 |= (unint64_t)(v349 & 0x7F) << v343;
                  if (v349 < 0)
                  {
                    v343 += 7;
                    BOOL v14 = v344++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_954;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_954:
                PBRepeatedInt32Add();
              }
              break;
            case 1306:
              if (v17 != 2)
              {
                char v723 = 0;
                unsigned int v724 = 0;
                uint64_t v725 = 0;
                while (1)
                {
                  uint64_t v726 = *v3;
                  unint64_t v727 = *(void *)(a2 + v726);
                  if (v727 == -1 || v727 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v728 = *(unsigned char *)(*(void *)(a2 + *v7) + v727);
                  *(void *)(a2 + v726) = v727 + 1;
                  v725 |= (unint64_t)(v728 & 0x7F) << v723;
                  if (v728 < 0)
                  {
                    v723 += 7;
                    BOOL v14 = v724++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v350 = 0;
                unsigned int v351 = 0;
                uint64_t v352 = 0;
                while (1)
                {
                  uint64_t v353 = *v3;
                  unint64_t v354 = *(void *)(a2 + v353);
                  if (v354 == -1 || v354 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v355 = *(unsigned char *)(*(void *)(a2 + *v7) + v354);
                  *(void *)(a2 + v353) = v354 + 1;
                  v352 |= (unint64_t)(v355 & 0x7F) << v350;
                  if (v355 < 0)
                  {
                    v350 += 7;
                    BOOL v14 = v351++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_967;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_967:
                PBRepeatedInt32Add();
              }
              break;
            case 1307:
              if (v17 != 2)
              {
                char v729 = 0;
                unsigned int v730 = 0;
                uint64_t v731 = 0;
                while (1)
                {
                  uint64_t v732 = *v3;
                  uint64_t v733 = *(void *)(a2 + v732);
                  unint64_t v734 = v733 + 1;
                  if (v733 == -1 || v734 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v735 = *(unsigned char *)(*(void *)(a2 + *v7) + v733);
                  *(void *)(a2 + v732) = v734;
                  v731 |= (unint64_t)(v735 & 0x7F) << v729;
                  if (v735 < 0)
                  {
                    v729 += 7;
                    BOOL v14 = v730++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v356 = 0;
                unsigned int v357 = 0;
                uint64_t v358 = 0;
                while (1)
                {
                  uint64_t v359 = *v3;
                  uint64_t v360 = *(void *)(a2 + v359);
                  unint64_t v361 = v360 + 1;
                  if (v360 == -1 || v361 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v362 = *(unsigned char *)(*(void *)(a2 + *v7) + v360);
                  *(void *)(a2 + v359) = v361;
                  v358 |= (unint64_t)(v362 & 0x7F) << v356;
                  if (v362 < 0)
                  {
                    v356 += 7;
                    BOOL v14 = v357++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_980;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_980:
                PBRepeatedInt32Add();
              }
              break;
            case 1308:
              PBReaderReadString();
              unsigned int v40 = (_INPBHomeEntity *)objc_claimAutoreleasedReturnValue();
              if (v40) {
                [a1 addPayloadChargingConnectorType:v40];
              }
              goto LABEL_1211;
            default:
              if (v19 == 1200)
              {
                unsigned int v40 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBSupportedTrafficIncidentTypeReadFrom(v40, a2))
                {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadSupportedTrafficIncidentType:", v40, 0, 0);
                }
                goto LABEL_1211;
              }
              if (v19 != 1201) {
                goto LABEL_1212;
              }
              if (v17 != 2)
              {
                char v495 = 0;
                unsigned int v496 = 0;
                uint64_t v497 = 0;
                while (1)
                {
                  uint64_t v498 = *v3;
                  unint64_t v499 = *(void *)(a2 + v498);
                  if (v499 == -1 || v499 >= *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v500 = *(unsigned char *)(*(void *)(a2 + *v7) + v499);
                  *(void *)(a2 + v498) = v499 + 1;
                  v497 |= (unint64_t)(v500 & 0x7F) << v495;
                  if (v500 < 0)
                  {
                    v495 += 7;
                    BOOL v14 = v496++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v97 = 0;
                unsigned int v98 = 0;
                uint64_t v99 = 0;
                while (1)
                {
                  uint64_t v100 = *v3;
                  unint64_t v101 = *(void *)(a2 + v100);
                  if (v101 == -1 || v101 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v102 = *(unsigned char *)(*(void *)(a2 + *v7) + v101);
                  *(void *)(a2 + v100) = v101 + 1;
                  v99 |= (unint64_t)(v102 & 0x7F) << v97;
                  if (v102 < 0)
                  {
                    v97 += 7;
                    BOOL v14 = v98++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_215;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_215:
                PBRepeatedInt32Add();
              }
              break;
          }
        }
        else
        {
          switch((int)v19)
          {
            case 1001:
              if (v17 != 2)
              {
                char v451 = 0;
                unsigned int v452 = 0;
                uint64_t v453 = 0;
                while (1)
                {
                  uint64_t v454 = *v3;
                  uint64_t v455 = *(void *)(a2 + v454);
                  unint64_t v456 = v455 + 1;
                  if (v455 == -1 || v456 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v457 = *(unsigned char *)(*(void *)(a2 + *v7) + v455);
                  *(void *)(a2 + v454) = v456;
                  v453 |= (unint64_t)(v457 & 0x7F) << v451;
                  if (v457 < 0)
                  {
                    v451 += 7;
                    BOOL v14 = v452++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v49 = 0;
                while (1)
                {
                  uint64_t v50 = *v3;
                  uint64_t v51 = *(void *)(a2 + v50);
                  unint64_t v52 = v51 + 1;
                  if (v51 == -1 || v52 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
                  *(void *)(a2 + v50) = v52;
                  v49 |= (unint64_t)(v53 & 0x7F) << v47;
                  if (v53 < 0)
                  {
                    v47 += 7;
                    BOOL v14 = v48++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_94;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_94:
                PBRepeatedInt32Add();
              }
              break;
            case 1002:
              if (v17 != 2)
              {
                char v629 = 0;
                unsigned int v630 = 0;
                uint64_t v631 = 0;
                while (1)
                {
                  uint64_t v632 = *v3;
                  uint64_t v633 = *(void *)(a2 + v632);
                  unint64_t v634 = v633 + 1;
                  if (v633 == -1 || v634 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v635 = *(unsigned char *)(*(void *)(a2 + *v7) + v633);
                  *(void *)(a2 + v632) = v634;
                  v631 |= (unint64_t)(v635 & 0x7F) << v629;
                  if (v635 < 0)
                  {
                    v629 += 7;
                    BOOL v14 = v630++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v239 = 0;
                unsigned int v240 = 0;
                uint64_t v241 = 0;
                while (1)
                {
                  uint64_t v242 = *v3;
                  uint64_t v243 = *(void *)(a2 + v242);
                  unint64_t v244 = v243 + 1;
                  if (v243 == -1 || v244 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v245 = *(unsigned char *)(*(void *)(a2 + *v7) + v243);
                  *(void *)(a2 + v242) = v244;
                  v241 |= (unint64_t)(v245 & 0x7F) << v239;
                  if (v245 < 0)
                  {
                    v239 += 7;
                    BOOL v14 = v240++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_730;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_730:
                PBRepeatedInt32Add();
              }
              break;
            case 1003:
              if (v17 != 2)
              {
                char v636 = 0;
                unsigned int v637 = 0;
                uint64_t v638 = 0;
                while (1)
                {
                  uint64_t v639 = *v3;
                  uint64_t v640 = *(void *)(a2 + v639);
                  unint64_t v641 = v640 + 1;
                  if (v640 == -1 || v641 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v642 = *(unsigned char *)(*(void *)(a2 + *v7) + v640);
                  *(void *)(a2 + v639) = v641;
                  v638 |= (unint64_t)(v642 & 0x7F) << v636;
                  if (v642 < 0)
                  {
                    v636 += 7;
                    BOOL v14 = v637++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v246 = 0;
                unsigned int v247 = 0;
                uint64_t v248 = 0;
                while (1)
                {
                  uint64_t v249 = *v3;
                  uint64_t v250 = *(void *)(a2 + v249);
                  unint64_t v251 = v250 + 1;
                  if (v250 == -1 || v251 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v252 = *(unsigned char *)(*(void *)(a2 + *v7) + v250);
                  *(void *)(a2 + v249) = v251;
                  v248 |= (unint64_t)(v252 & 0x7F) << v246;
                  if (v252 < 0)
                  {
                    v246 += 7;
                    BOOL v14 = v247++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_743;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_743:
                PBRepeatedInt32Add();
              }
              break;
            case 1004:
              if (v17 != 2)
              {
                char v643 = 0;
                unsigned int v644 = 0;
                uint64_t v645 = 0;
                while (1)
                {
                  uint64_t v646 = *v3;
                  uint64_t v647 = *(void *)(a2 + v646);
                  unint64_t v648 = v647 + 1;
                  if (v647 == -1 || v648 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v649 = *(unsigned char *)(*(void *)(a2 + *v7) + v647);
                  *(void *)(a2 + v646) = v648;
                  v645 |= (unint64_t)(v649 & 0x7F) << v643;
                  if (v649 < 0)
                  {
                    v643 += 7;
                    BOOL v14 = v644++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v253 = 0;
                unsigned int v254 = 0;
                uint64_t v255 = 0;
                while (1)
                {
                  uint64_t v256 = *v3;
                  uint64_t v257 = *(void *)(a2 + v256);
                  unint64_t v258 = v257 + 1;
                  if (v257 == -1 || v258 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v259 = *(unsigned char *)(*(void *)(a2 + *v7) + v257);
                  *(void *)(a2 + v256) = v258;
                  v255 |= (unint64_t)(v259 & 0x7F) << v253;
                  if (v259 < 0)
                  {
                    v253 += 7;
                    BOOL v14 = v254++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_756;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_756:
                PBRepeatedInt32Add();
              }
              break;
            case 1005:
              unsigned int v40 = objc_alloc_init(_INPBFilePropertyValue);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBFilePropertyValueReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadFilePropertyValue:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 1006:
              unsigned int v40 = objc_alloc_init(_INPBFileProperty);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBFilePropertyReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadFileProperty:", v40, 0, 0);
              }
              goto LABEL_1211;
            case 1007:
              if (v17 != 2)
              {
                char v650 = 0;
                unsigned int v651 = 0;
                uint64_t v652 = 0;
                while (1)
                {
                  uint64_t v653 = *v3;
                  uint64_t v654 = *(void *)(a2 + v653);
                  unint64_t v655 = v654 + 1;
                  if (v654 == -1 || v655 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v656 = *(unsigned char *)(*(void *)(a2 + *v7) + v654);
                  *(void *)(a2 + v653) = v655;
                  v652 |= (unint64_t)(v656 & 0x7F) << v650;
                  if (v656 < 0)
                  {
                    v650 += 7;
                    BOOL v14 = v651++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v260 = 0;
                unsigned int v261 = 0;
                uint64_t v262 = 0;
                while (1)
                {
                  uint64_t v263 = *v3;
                  uint64_t v264 = *(void *)(a2 + v263);
                  unint64_t v265 = v264 + 1;
                  if (v264 == -1 || v265 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v266 = *(unsigned char *)(*(void *)(a2 + *v7) + v264);
                  *(void *)(a2 + v263) = v265;
                  v262 |= (unint64_t)(v266 & 0x7F) << v260;
                  if (v266 < 0)
                  {
                    v260 += 7;
                    BOOL v14 = v261++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_777;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_777:
                PBRepeatedInt32Add();
              }
              break;
            case 1008:
              if (v17 != 2)
              {
                char v657 = 0;
                unsigned int v658 = 0;
                uint64_t v659 = 0;
                while (1)
                {
                  uint64_t v660 = *v3;
                  uint64_t v661 = *(void *)(a2 + v660);
                  unint64_t v662 = v661 + 1;
                  if (v661 == -1 || v662 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v663 = *(unsigned char *)(*(void *)(a2 + *v7) + v661);
                  *(void *)(a2 + v660) = v662;
                  v659 |= (unint64_t)(v663 & 0x7F) << v657;
                  if (v663 < 0)
                  {
                    v657 += 7;
                    BOOL v14 = v658++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v267 = 0;
                unsigned int v268 = 0;
                uint64_t v269 = 0;
                while (1)
                {
                  uint64_t v270 = *v3;
                  uint64_t v271 = *(void *)(a2 + v270);
                  unint64_t v272 = v271 + 1;
                  if (v271 == -1 || v272 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v273 = *(unsigned char *)(*(void *)(a2 + *v7) + v271);
                  *(void *)(a2 + v270) = v272;
                  v269 |= (unint64_t)(v273 & 0x7F) << v267;
                  if (v273 < 0)
                  {
                    v267 += 7;
                    BOOL v14 = v268++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_790;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_790:
                PBRepeatedInt32Add();
              }
              break;
            case 1009:
              if (v17 != 2)
              {
                char v664 = 0;
                unsigned int v665 = 0;
                uint64_t v666 = 0;
                while (1)
                {
                  uint64_t v667 = *v3;
                  uint64_t v668 = *(void *)(a2 + v667);
                  unint64_t v669 = v668 + 1;
                  if (v668 == -1 || v669 > *(void *)(a2 + *v4)) {
                    goto LABEL_1639;
                  }
                  char v670 = *(unsigned char *)(*(void *)(a2 + *v7) + v668);
                  *(void *)(a2 + v667) = v669;
                  v666 |= (unint64_t)(v670 & 0x7F) << v664;
                  if (v670 < 0)
                  {
                    v664 += 7;
                    BOOL v14 = v665++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_1640;
                }
              }
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v274 = 0;
                unsigned int v275 = 0;
                uint64_t v276 = 0;
                while (1)
                {
                  uint64_t v277 = *v3;
                  uint64_t v278 = *(void *)(a2 + v277);
                  unint64_t v279 = v278 + 1;
                  if (v278 == -1 || v279 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v280 = *(unsigned char *)(*(void *)(a2 + *v7) + v278);
                  *(void *)(a2 + v277) = v279;
                  v276 |= (unint64_t)(v280 & 0x7F) << v274;
                  if (v280 < 0)
                  {
                    v274 += 7;
                    BOOL v14 = v275++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_803;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_803:
                PBRepeatedInt32Add();
              }
              break;
            case 1010:
              unsigned int v40 = objc_alloc_init(_INPBShareDestination);
              uint64_t v806 = 0;
              uint64_t v807 = 0;
              if (!PBReaderPlaceMark() || !_INPBShareDestinationReadFrom(v40, a2)) {
                goto LABEL_1652;
              }
              PBReaderRecallMark();
              if (v40) {
                objc_msgSend(a1, "addPayloadShareDestination:", v40, 0, 0);
              }
              goto LABEL_1211;
            default:
              goto LABEL_1212;
          }
        }
      }
      else
      {
        switch((int)v19)
        {
          case 1601:
            if (v17 != 2)
            {
              char v433 = 0;
              unsigned int v434 = 0;
              uint64_t v435 = 0;
              while (1)
              {
                uint64_t v436 = *v3;
                unint64_t v437 = *(void *)(a2 + v436);
                if (v437 == -1 || v437 >= *(void *)(a2 + *v4)) {
                  goto LABEL_1639;
                }
                char v438 = *(unsigned char *)(*(void *)(a2 + *v7) + v437);
                *(void *)(a2 + v436) = v437 + 1;
                v435 |= (unint64_t)(v438 & 0x7F) << v433;
                if (v438 < 0)
                {
                  v433 += 7;
                  BOOL v14 = v434++ >= 9;
                  if (!v14) {
                    continue;
                  }
                }
                goto LABEL_1640;
              }
            }
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            uint64_t result = PBReaderPlaceMark();
            if (!result) {
              return result;
            }
            while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
            {
              char v21 = 0;
              unsigned int v22 = 0;
              uint64_t v23 = 0;
              while (1)
              {
                uint64_t v24 = *v3;
                unint64_t v25 = *(void *)(a2 + v24);
                if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
                *(void *)(a2 + v24) = v25 + 1;
                v23 |= (unint64_t)(v26 & 0x7F) << v21;
                if (v26 < 0)
                {
                  v21 += 7;
                  BOOL v14 = v22++ >= 9;
                  if (!v14) {
                    continue;
                  }
                }
                goto LABEL_34;
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
              PBRepeatedInt32Add();
            }
            break;
          case 1602:
            unsigned int v40 = objc_alloc_init(_INPBEvent);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBEventReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadEvent:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1603:
            unsigned int v40 = objc_alloc_init(_INPBEventList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBEventListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadEventList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1604:
            unsigned int v40 = objc_alloc_init(_INPBPlace);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBPlaceReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadPlace:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1605:
            unsigned int v40 = objc_alloc_init(_INPBPlaceList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBPlaceListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadPlaceList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1606:
            unsigned int v40 = objc_alloc_init(_INPBActivity);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBActivityReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadActivity:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1607:
            unsigned int v40 = objc_alloc_init(_INPBActivityList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBActivityListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadActivityList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1608:
            unsigned int v40 = objc_alloc_init(_INPBGeographicalFeature);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadGeographicalFeature:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1609:
            unsigned int v40 = objc_alloc_init(_INPBGeographicalFeatureList);
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureListReadFrom(v40, a2)) {
              goto LABEL_1652;
            }
            PBReaderRecallMark();
            if (v40) {
              objc_msgSend(a1, "addPayloadGeographicalFeatureList:", v40, 0, 0);
            }
            goto LABEL_1211;
          case 1610:
            if (v17 != 2)
            {
              char v501 = 0;
              unsigned int v502 = 0;
              uint64_t v503 = 0;
              while (1)
              {
                uint64_t v504 = *v3;
                unint64_t v505 = *(void *)(a2 + v504);
                if (v505 == -1 || v505 >= *(void *)(a2 + *v4)) {
                  goto LABEL_1639;
                }
                char v506 = *(unsigned char *)(*(void *)(a2 + *v7) + v505);
                *(void *)(a2 + v504) = v505 + 1;
                v503 |= (unint64_t)(v506 & 0x7F) << v501;
                if (v506 < 0)
                {
                  v501 += 7;
                  BOOL v14 = v502++ >= 9;
                  if (!v14) {
                    continue;
                  }
                }
                goto LABEL_1640;
              }
            }
            uint64_t v806 = 0;
            uint64_t v807 = 0;
            uint64_t result = PBReaderPlaceMark();
            if (!result) {
              return result;
            }
            while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
            {
              char v111 = 0;
              unsigned int v112 = 0;
              uint64_t v113 = 0;
              while (1)
              {
                uint64_t v114 = *v3;
                unint64_t v115 = *(void *)(a2 + v114);
                if (v115 == -1 || v115 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v116 = *(unsigned char *)(*(void *)(a2 + *v7) + v115);
                *(void *)(a2 + v114) = v115 + 1;
                v113 |= (unint64_t)(v116 & 0x7F) << v111;
                if (v116 < 0)
                {
                  v111 += 7;
                  BOOL v14 = v112++ >= 9;
                  if (!v14) {
                    continue;
                  }
                }
                goto LABEL_278;
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_278:
              PBRepeatedInt32Add();
            }
            break;
          default:
            switch((int)v19)
            {
              case 1501:
                if (v17 != 2)
                {
                  char v477 = 0;
                  unsigned int v478 = 0;
                  uint64_t v479 = 0;
                  while (1)
                  {
                    uint64_t v480 = *v3;
                    unint64_t v481 = *(void *)(a2 + v480);
                    if (v481 == -1 || v481 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v482 = *(unsigned char *)(*(void *)(a2 + *v7) + v481);
                    *(void *)(a2 + v480) = v481 + 1;
                    v479 |= (unint64_t)(v482 & 0x7F) << v477;
                    if (v482 < 0)
                    {
                      v477 += 7;
                      BOOL v14 = v478++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v79 = 0;
                  unsigned int v80 = 0;
                  uint64_t v81 = 0;
                  while (1)
                  {
                    uint64_t v82 = *v3;
                    unint64_t v83 = *(void *)(a2 + v82);
                    if (v83 == -1 || v83 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v84 = *(unsigned char *)(*(void *)(a2 + *v7) + v83);
                    *(void *)(a2 + v82) = v83 + 1;
                    v81 |= (unint64_t)(v84 & 0x7F) << v79;
                    if (v84 < 0)
                    {
                      v79 += 7;
                      BOOL v14 = v80++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_159;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_159:
                  PBRepeatedInt32Add();
                }
                goto LABEL_1206;
              case 1502:
                unsigned int v40 = objc_alloc_init(_INPBWellnessUnitType);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBWellnessUnitTypeReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadWellnessUnitType:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1503:
                unsigned int v40 = objc_alloc_init(_INPBWellnessMetadataPair);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBWellnessMetadataPairReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadWellnessMetadataPair:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1504:
                unsigned int v40 = objc_alloc_init(_INPBWellnessValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBWellnessValueReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadWellnessValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1505:
                if (v17 != 2)
                {
                  char v756 = 0;
                  unsigned int v757 = 0;
                  uint64_t v758 = 0;
                  while (1)
                  {
                    uint64_t v759 = *v3;
                    unint64_t v760 = *(void *)(a2 + v759);
                    if (v760 == -1 || v760 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v761 = *(unsigned char *)(*(void *)(a2 + *v7) + v760);
                    *(void *)(a2 + v759) = v760 + 1;
                    v758 |= (unint64_t)(v761 & 0x7F) << v756;
                    if (v761 < 0)
                    {
                      v756 += 7;
                      BOOL v14 = v757++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v383 = 0;
                  unsigned int v384 = 0;
                  uint64_t v385 = 0;
                  while (1)
                  {
                    uint64_t v386 = *v3;
                    unint64_t v387 = *(void *)(a2 + v386);
                    if (v387 == -1 || v387 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v388 = *(unsigned char *)(*(void *)(a2 + *v7) + v387);
                    *(void *)(a2 + v386) = v387 + 1;
                    v385 |= (unint64_t)(v388 & 0x7F) << v383;
                    if (v388 < 0)
                    {
                      v383 += 7;
                      BOOL v14 = v384++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1066;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_1066:
                  PBRepeatedInt32Add();
                }
                goto LABEL_1206;
              case 1506:
                unsigned int v40 = objc_alloc_init(_INPBWellnessObjectResultValue);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBWellnessObjectResultValueReadFrom(v40, a2))
                {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadWellnessObjectResultValue:", v40, 0, 0);
                }
                goto LABEL_1211;
              case 1507:
                if (v17 != 2)
                {
                  char v762 = 0;
                  unsigned int v763 = 0;
                  uint64_t v764 = 0;
                  while (1)
                  {
                    uint64_t v765 = *v3;
                    unint64_t v766 = *(void *)(a2 + v765);
                    if (v766 == -1 || v766 >= *(void *)(a2 + *v4)) {
                      goto LABEL_1639;
                    }
                    char v767 = *(unsigned char *)(*(void *)(a2 + *v7) + v766);
                    *(void *)(a2 + v765) = v766 + 1;
                    v764 |= (unint64_t)(v767 & 0x7F) << v762;
                    if (v767 < 0)
                    {
                      v762 += 7;
                      BOOL v14 = v763++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1640;
                  }
                }
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v389 = 0;
                  unsigned int v390 = 0;
                  uint64_t v391 = 0;
                  while (1)
                  {
                    uint64_t v392 = *v3;
                    unint64_t v393 = *(void *)(a2 + v392);
                    if (v393 == -1 || v393 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v394 = *(unsigned char *)(*(void *)(a2 + *v7) + v393);
                    *(void *)(a2 + v392) = v393 + 1;
                    v391 |= (unint64_t)(v394 & 0x7F) << v389;
                    if (v394 < 0)
                    {
                      v389 += 7;
                      BOOL v14 = v390++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_1083;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_1083:
                  PBRepeatedInt32Add();
                }
                break;
              case 1512:
                unsigned int v40 = objc_alloc_init(_INPBCurrencyAmount);
                uint64_t v806 = 0;
                uint64_t v807 = 0;
                if (!PBReaderPlaceMark() || !_INPBCurrencyAmountReadFrom(v40, a2)) {
                  goto LABEL_1652;
                }
                PBReaderRecallMark();
                if (v40) {
                  objc_msgSend(a1, "addPayloadCurrencyAmount:", v40, 0, 0);
                }
                goto LABEL_1211;
              default:
                goto LABEL_1212;
            }
            break;
        }
      }
LABEL_1206:
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBSetCarLockStatusIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

id getHKUnitClass_95404()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getHKUnitClass_softClass_95405;
  uint64_t v7 = getHKUnitClass_softClass_95405;
  if (!getHKUnitClass_softClass_95405)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getHKUnitClass_block_invoke_95406;
    v3[3] = &unk_1E5520EB8;
    v3[4] = &v4;
    __getHKUnitClass_block_invoke_95406((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18CDF66D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKUnitClass_block_invoke_95406(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!HealthKitLibraryCore_frameworkLibrary_95407)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __HealthKitLibraryCore_block_invoke_95408;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551D7E8;
    uint64_t v6 = 0;
    HealthKitLibraryCore_frameworkLibrary_95407 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!HealthKitLibraryCore_frameworkLibrary_95407)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("HKUnit");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getHKUnitClass_softClass_95405 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __HealthKitLibraryCore_block_invoke_95408()
{
  uint64_t result = _sl_dlopen();
  HealthKitLibraryCore_frameworkLibrary_95407 = result;
  return result;
}

id INIntentSlotValueTransformFromWellnessUnitType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_70;
  }
  if ([v1 hasMassUnit])
  {
    switch([v2 massUnit])
    {
      case 1u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"kg";
        goto LABEL_41;
      case 2u:
        uint64_t v5 = [getHKUnitClass_95404() gramUnit];
        goto LABEL_42;
      case 3u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"dg";
        goto LABEL_41;
      case 4u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"cg";
        goto LABEL_41;
      case 5u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"mg";
        goto LABEL_41;
      case 6u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"µg";
        goto LABEL_41;
      case 7u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"ng";
        goto LABEL_41;
      case 8u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"pg";
        goto LABEL_41;
      case 9u:
        uint64_t v5 = [getHKUnitClass_95404() ounceUnit];
        goto LABEL_42;
      case 0xAu:
        uint64_t v5 = [getHKUnitClass_95404() poundUnit];
        goto LABEL_42;
      case 0xBu:
        uint64_t v5 = [getHKUnitClass_95404() stoneUnit];
        goto LABEL_42;
      case 0xCu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"t";
        goto LABEL_41;
      case 0xDu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"ton";
        goto LABEL_41;
      case 0xEu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"ct";
        goto LABEL_41;
      case 0xFu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"oz t";
        goto LABEL_41;
      case 0x10u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"slug";
        goto LABEL_41;
      default:
        goto LABEL_70;
    }
  }
  if ([v2 hasTimeUnit])
  {
    switch([v2 timeUnit])
    {
      case 1u:
        uint64_t v5 = [getHKUnitClass_95404() secondUnit];
        goto LABEL_42;
      case 2u:
        uint64_t v5 = [getHKUnitClass_95404() minuteUnit];
        goto LABEL_42;
      case 3u:
        uint64_t v5 = [getHKUnitClass_95404() hourUnit];
        goto LABEL_42;
      case 4u:
        uint64_t v5 = [getHKUnitClass_95404() dayUnit];
        goto LABEL_42;
      default:
        goto LABEL_70;
    }
  }
  if ([v2 hasEnergyUnit])
  {
    switch([v2 energyUnit])
    {
      case 1u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"kJ";
        goto LABEL_41;
      case 2u:
        uint64_t v5 = [getHKUnitClass_95404() jouleUnit];
        goto LABEL_42;
      case 3u:
        uint64_t v5 = [getHKUnitClass_95404() kilocalorieUnit];
        goto LABEL_42;
      case 4u:
        uint64_t v5 = [getHKUnitClass_95404() largeCalorieUnit];
        goto LABEL_42;
      case 5u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"kWh";
        goto LABEL_41;
      default:
        goto LABEL_70;
    }
  }
  if ([v2 hasLengthUnit])
  {
    switch([v2 lengthUnit])
    {
      case 1u:
        uint64_t v5 = [getHKUnitClass_95404() meterUnit];
        goto LABEL_42;
      case 2u:
        uint64_t v5 = [getHKUnitClass_95404() mileUnit];
        goto LABEL_42;
      case 3u:
        id v8 = getHKUnitClass_95404();
        uint64_t v9 = 5;
        break;
      case 4u:
        uint64_t v5 = [getHKUnitClass_95404() footUnit];
        goto LABEL_42;
      case 5u:
        uint64_t v5 = [getHKUnitClass_95404() inchUnit];
        goto LABEL_42;
      case 6u:
        uint64_t v5 = [getHKUnitClass_95404() yardUnit];
        goto LABEL_42;
      case 7u:
        id v8 = getHKUnitClass_95404();
        uint64_t v9 = 9;
        break;
      default:
        goto LABEL_70;
    }
    uint64_t v5 = [v8 meterUnitWithMetricPrefix:v9];
    goto LABEL_42;
  }
  if ([v2 hasVolumeUnit])
  {
    switch([v2 volumeUnit])
    {
      case 1u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"ML";
        goto LABEL_41;
      case 2u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"kL";
        goto LABEL_41;
      case 3u:
        uint64_t v5 = [getHKUnitClass_95404() literUnit];
        goto LABEL_42;
      case 4u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"dL";
        goto LABEL_41;
      case 5u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"cL";
        goto LABEL_41;
      case 6u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"mL";
        goto LABEL_41;
      case 7u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"km³";
        goto LABEL_41;
      case 8u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"dm³";
        goto LABEL_41;
      case 9u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"mm³";
        goto LABEL_41;
      case 0xAu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"in³";
        goto LABEL_41;
      case 0xBu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"ft³";
        goto LABEL_41;
      case 0xCu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"yd³";
        goto LABEL_41;
      case 0xDu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"mi³";
        goto LABEL_41;
      case 0xEu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"af";
        goto LABEL_41;
      case 0xFu:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"bsh";
        goto LABEL_41;
      case 0x10u:
      case 0x17u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"tsp";
        goto LABEL_41;
      case 0x11u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"tbsp";
        goto LABEL_41;
      case 0x12u:
        uint64_t v5 = [getHKUnitClass_95404() fluidOunceUSUnit];
        goto LABEL_42;
      case 0x13u:
        uint64_t v5 = [getHKUnitClass_95404() cupUSUnit];
        goto LABEL_42;
      case 0x14u:
        uint64_t v5 = [getHKUnitClass_95404() pintUSUnit];
        goto LABEL_42;
      case 0x15u:
      case 0x18u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"qt";
        goto LABEL_41;
      case 0x16u:
      case 0x19u:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"gal";
        goto LABEL_41;
      case 0x1Au:
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"metric cup";
        goto LABEL_41;
      default:
        goto LABEL_70;
    }
  }
  if (![v2 hasTemperatureUnit])
  {
    if ([v2 hasRespiratoryRateUnit])
    {
      if ([v2 respiratoryRateUnit] != 1) {
        goto LABEL_70;
      }
      id HKUnitClass_95404 = getHKUnitClass_95404();
      uint64_t v4 = @"breaths/min";
    }
    else if ([v2 hasHeartRateUnit])
    {
      if ([v2 heartRateUnit] != 1) {
        goto LABEL_70;
      }
      id HKUnitClass_95404 = getHKUnitClass_95404();
      uint64_t v4 = @"bpm";
    }
    else if ([v2 hasBloodPressureUnit])
    {
      if ([v2 bloodPressureUnit] != 1) {
        goto LABEL_70;
      }
      id HKUnitClass_95404 = getHKUnitClass_95404();
      uint64_t v4 = @"mmHg";
    }
    else
    {
      if (![v2 hasBloodGlucoseUnit]) {
        goto LABEL_70;
      }
      int v10 = [v2 bloodGlucoseUnit];
      if (v10 == 2)
      {
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"mmol/L";
      }
      else
      {
        if (v10 != 1) {
          goto LABEL_70;
        }
        id HKUnitClass_95404 = getHKUnitClass_95404();
        uint64_t v4 = @"mg/dL";
      }
    }
LABEL_41:
    uint64_t v5 = [HKUnitClass_95404 unitFromString:v4];
    goto LABEL_42;
  }
  int v6 = [v2 temperatureUnit];
  switch(v6)
  {
    case 3:
      uint64_t v5 = [getHKUnitClass_95404() kelvinUnit];
      goto LABEL_42;
    case 2:
      uint64_t v5 = [getHKUnitClass_95404() degreeFahrenheitUnit];
      goto LABEL_42;
    case 1:
      uint64_t v5 = [getHKUnitClass_95404() degreeCelsiusUnit];
LABEL_42:
      uint64_t v7 = (void *)v5;
      goto LABEL_71;
  }
LABEL_70:
  uint64_t v7 = 0;
LABEL_71:

  return v7;
}

id INIntentSlotValueTransformFromWellnessUnitTypes(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = INIntentSlotValueTransformFromWellnessUnitType(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  uint64_t v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToWellnessUnitTypes(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = INIntentSlotValueTransformToWellnessUnitType(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  uint64_t v9 = (void *)[v2 copy];

  return v9;
}

__CFString *INSearchForAccountsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 9) {
    return 0;
  }
  else {
    return off_1E551D8A0[a1];
  }
}

uint64_t _INPBRangeValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unint64_t v25 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v25, 0, 0);
      }
      else if (v17 == 3)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (1)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0) {
            goto LABEL_46;
          }
          v26 += 7;
          BOOL v14 = v27++ >= 9;
          if (v14)
          {
            uint64_t v32 = 0;
            goto LABEL_49;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_49:
        [a1 setLength:v32];
      }
      else if (v17 == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v24 = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v20;
        }
LABEL_44:
        [a1 setLocation:v24];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromTimestamp(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    uint64_t v3 = [v2 seconds];
    int v4 = [v2 nanos];

    double v5 = (double)v3;
    if (v4 >= 1) {
      double v5 = (double)v4 / 1000000000.0 + v5;
    }
    a1 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:v5];
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBTimestamp *INIntentSlotValueTransformToTimestamp(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc_init(_INPBTimestamp);
    [v1 timeIntervalSince1970];
    double v4 = v3;

    [(_INPBTimestamp *)v2 setSeconds:vcvtmd_s64_f64(v4)];
    [(_INPBTimestamp *)v2 setNanos:(int)((v4 - floor(v4)) * 1000000000.0)];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromTimestamps(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformFromTimestamp(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToTimestamps(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = INIntentSlotValueTransformToTimestamp(*(void **)(*((void *)&v10 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

BOOL _INPBGenericIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBProperty);
    if (!PBReaderPlaceMark() || !_INPBPropertyReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addProperties:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _INImageFilePersistenceDirectoryPathWithStoreTypeCreateIfNeeded(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = CPSharedResourcesDirectory();
  id v3 = [v2 stringByAppendingPathComponent:@"Library/Intents/Images"];

  if (a1 == 2)
  {
    uint64_t v4 = [v3 stringByAppendingPathComponent:@"Persistent"];

    id v3 = (void *)v4;
  }
  id v5 = v3;
  uint64_t v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v11 = 0;
  char v7 = [v6 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:&v11];
  id v8 = v11;

  if ((v7 & 1) == 0)
  {
    unsigned int v9 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      char v13 = "_INImageFilePersistenceCreateDirectoryIfNeeded";
      __int16 v14 = 2114;
      id v15 = v5;
      __int16 v16 = 2114;
      id v17 = v8;
      _os_log_error_impl(&dword_18CB2F000, v9, OS_LOG_TYPE_ERROR, "%s Couldn't create image file directory at path %{public}@ %{public}@", buf, 0x20u);
    }
  }

  return v5;
}

id _INImageFilePersistenceUpdateModifiedDateAtFilePath(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v15 = 0;
  id v3 = [v2 attributesOfItemAtPath:v1 error:&v15];
  id v4 = v15;
  id v5 = (void *)[v3 mutableCopy];

  if (v4)
  {
    uint64_t v6 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      id v17 = "_INImageFilePersistenceUpdateModifiedDateAtFilePath";
      __int16 v18 = 2112;
      id v19 = v1;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_error_impl(&dword_18CB2F000, v6, OS_LOG_TYPE_ERROR, "%s Failed to get attributes for item currently at path %@: %@", buf, 0x20u);
    }
    id v7 = v4;
  }
  else
  {
    id v8 = [MEMORY[0x1E4F1C9C8] date];
    [v5 setObject:v8 forKey:*MEMORY[0x1E4F28310]];

    unsigned int v9 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v14 = 0;
    [v9 setAttributes:v5 ofItemAtPath:v1 error:&v14];
    id v7 = v14;

    if (v7)
    {
      unint64_t v10 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        id v17 = "_INImageFilePersistenceUpdateModifiedDateAtFilePath";
        __int16 v18 = 2112;
        id v19 = v1;
        __int16 v20 = 2112;
        id v21 = v7;
        _os_log_error_impl(&dword_18CB2F000, v10, OS_LOG_TYPE_ERROR, "%s Failed to set attributes for item currently at path %@: %@", buf, 0x20u);
      }
      id v11 = v7;
    }
  }
  id v12 = v7;

  return v12;
}

BOOL _INPBQueryHomeIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        id v17 = objc_alloc_init(_INPBHomeEntity);
        if (!PBReaderPlaceMark() || !_INPBHomeEntityReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addEntities:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INTrainReservation *INIntentSlotValueTransformFromTrainReservation(INTrainReservation *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = [(INTrainReservation *)v2 reservation];
    id v4 = [INTrainReservation alloc];
    char v23 = [v3 itemReference];
    uint64_t v24 = INIntentSlotValueTransformFromDataString(v23);
    id v5 = [v3 reservationNumber];
    uint64_t v22 = [v3 bookingTime];
    __int16 v20 = INIntentSlotValueTransformFromTimestamp(v22);
    int v6 = [v3 hasReservationStatus];
    uint64_t v7 = [v3 reservationStatus] - 2;
    if (v7 <= 3) {
      char v8 = (void *)(v7 + 1);
    }
    else {
      char v8 = 0;
    }
    if (!v6) {
      char v8 = 0;
    }
    id v17 = v8;
    __int16 v16 = [v3 reservationHolderName];
    id v21 = [v3 actions];
    int v15 = INIntentSlotValueTransformFromReservationActions(v21);
    id v19 = [v3 url];
    unsigned int v9 = INIntentSlotValueTransformFromURLValue(v19);
    unint64_t v10 = [(INTrainReservation *)v2 reservedSeat];
    uint64_t v11 = INIntentSlotValueTransformFromSeat(v10);
    unint64_t v12 = [(INTrainReservation *)v2 trainTrip];

    char v13 = INIntentSlotValueTransformFromTrainTrip(v12);
    __int16 v18 = [(INTrainReservation *)v4 initWithItemReference:v24 reservationNumber:v5 bookingTime:v20 reservationStatus:v17 reservationHolderName:v16 actions:v15 URL:v9 reservedSeat:v11 trainTrip:v13];

    a1 = v18;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBTrainReservation *INIntentSlotValueTransformToTrainReservation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc_init(_INPBReservation);
    id v3 = [v1 itemReference];
    id v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBReservation *)v2 setItemReference:v4];

    id v5 = [v1 reservationNumber];
    [(_INPBReservation *)v2 setReservationNumber:v5];

    int v6 = [v1 bookingTime];
    uint64_t v7 = INIntentSlotValueTransformToTimestamp(v6);
    [(_INPBReservation *)v2 setBookingTime:v7];

    unint64_t v8 = [v1 reservationStatus];
    if (v8 < 5) {
      uint64_t v9 = (v8 + 1);
    }
    else {
      uint64_t v9 = 0x7FFFFFFFLL;
    }
    [(_INPBReservation *)v2 setReservationStatus:v9];
    unint64_t v10 = [v1 reservationHolderName];
    [(_INPBReservation *)v2 setReservationHolderName:v10];

    uint64_t v11 = [v1 actions];
    unint64_t v12 = INIntentSlotValueTransformToReservationActions(v11);
    [(_INPBReservation *)v2 setActions:v12];

    char v13 = [v1 URL];
    id v14 = INIntentSlotValueTransformToURLValue(v13);
    [(_INPBReservation *)v2 setUrl:v14];

    int v15 = objc_alloc_init(_INPBTrainReservation);
    [(_INPBTrainReservation *)v15 setReservation:v2];
    __int16 v16 = [v1 reservedSeat];
    id v17 = INIntentSlotValueTransformToSeat(v16);
    [(_INPBTrainReservation *)v15 setReservedSeat:v17];

    __int16 v18 = [v1 trainTrip];

    id v19 = INIntentSlotValueTransformToTrainTrip(v18);
    [(_INPBTrainReservation *)v15 setTrainTrip:v19];
  }
  else
  {
    int v15 = 0;
  }

  return v15;
}

id INIntentSlotValueTransformFromTrainReservations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformFromTrainReservation(*(INTrainReservation **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTrainReservations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformToTrainReservation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTrainReservationFromTrainReservation(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL INCervicalMucusQualityValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 6;
}

unint64_t INCervicalMucusQualityValueTypeGetBackingType(unint64_t result)
{
  if (result >= 6) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INCervicalMucusQualityValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 4) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INCervicalMucusQualityValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E551D8F0[a1 - 1];
  }
}

uint64_t INCervicalMucusQualityValueTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"dry"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"sticky"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"creamy"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"watery"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"eggwhite"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCervicalMucusQualityValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"dry";
      goto LABEL_8;
    case 2:
      uint64_t v4 = @"sticky";
      goto LABEL_8;
    case 3:
      uint64_t v4 = @"creamy";
      goto LABEL_8;
    case 4:
      uint64_t v4 = @"watery";
      goto LABEL_8;
    case 5:
      uint64_t v4 = @"eggwhite";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL INRelativeSettingHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INRelativeSettingGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 4) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INRelativeSettingGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 3) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INRelativeSettingGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return off_1E551D918[a1 - 1];
  }
}

uint64_t INRelativeSettingWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"lowest"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"lower"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"higher"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"highest"])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INRelativeSettingGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"lowest";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"lower";
      goto LABEL_7;
    case 3:
      uint64_t v4 = @"higher";
      goto LABEL_7;
    case 4:
      uint64_t v4 = @"highest";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL INTaskStatusHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

uint64_t INTaskStatusGetBackingType(unint64_t a1)
{
  if (a1 >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (10 * a1);
  }
}

uint64_t INTaskStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 10;
  if (a2 == 20) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INTaskStatusGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"completed";
  }
  if (a1 == 1) {
    return @"notCompleted";
  }
  else {
    return v1;
  }
}

uint64_t INTaskStatusWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"notCompleted"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"completed"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INTaskStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"completed";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"not completed";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBURLValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        __int16 v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_26;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        PBReaderReadString();
        __int16 v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setAbsoluteString:v18];
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadData();
    __int16 v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
    [a1 setScope:v18];
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INBillPayee *INIntentSlotValueTransformFromBillPayeeValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 valueMetadata];
    INPrivacyEntitlementValidateValueMetadata(v3);

    uint64_t v4 = [INBillPayee alloc];
    uint64_t v5 = [v2 nickname];
    uint64_t v6 = INIntentSlotValueTransformFromDataString(v5);
    uint64_t v7 = [v2 accountNumber];
    char v8 = [v2 organizationName];
    unsigned int v9 = INIntentSlotValueTransformFromDataString(v8);
    unint64_t v10 = [(INBillPayee *)v4 initWithNickname:v6 number:v7 organizationName:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBBillPayeeValue *INIntentSlotValueTransformToBillPayeeValue(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBBillPayeeValue);
    id v3 = [v1 nickname];
    uint64_t v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBBillPayeeValue *)v2 setNickname:v4];

    uint64_t v5 = [v1 accountNumber];
    [(_INPBBillPayeeValue *)v2 setAccountNumber:v5];

    uint64_t v6 = [v1 organizationName];

    uint64_t v7 = INIntentSlotValueTransformToDataString(v6);
    [(_INPBBillPayeeValue *)v2 setOrganizationName:v7];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromBillPayeeValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromBillPayeeValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBillPayeeValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToBillPayeeValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

_INPBBillPayeeValue *INIntentSlotValueRedactedBillPayeeValueFromBillPayeeValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 valueMetadata];
  uint64_t v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = objc_alloc_init(_INPBBillPayeeValue);
    uint64_t v7 = [v3 nickname];
    [(_INPBBillPayeeValue *)v6 setNickname:v7];

    char v8 = [v3 accountNumber];
    [(_INPBBillPayeeValue *)v6 setAccountNumber:v8];

    unsigned int v9 = [v3 organizationName];
    [(_INPBBillPayeeValue *)v6 setOrganizationName:v9];
  }

  return v6;
}

void INPhotoAttributeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_33;
  }
  id v4 = v3;
  if (a1)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 2);
    id v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  id v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  id v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 10);
  id v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 11);
  id v3 = v4;
  if ((a1 & 0x20) == 0)
  {
LABEL_9:
    if ((a1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 12);
  id v3 = v4;
  if ((a1 & 0x40) == 0)
  {
LABEL_10:
    if ((a1 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 13);
  id v3 = v4;
  if ((a1 & 0x80) == 0)
  {
LABEL_11:
    if ((a1 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 14);
  id v3 = v4;
  if ((a1 & 0x100) == 0)
  {
LABEL_12:
    if ((a1 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 15);
  id v3 = v4;
  if ((a1 & 0x200) == 0)
  {
LABEL_13:
    if ((a1 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 16);
  id v3 = v4;
  if ((a1 & 0x400) == 0)
  {
LABEL_14:
    if ((a1 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 50);
  id v3 = v4;
  if ((a1 & 0x800) == 0)
  {
LABEL_15:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 51);
  id v3 = v4;
  if ((a1 & 0x1000) == 0)
  {
LABEL_16:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 52);
  id v3 = v4;
  if ((a1 & 0x2000) == 0)
  {
LABEL_17:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 53);
  id v3 = v4;
  if ((a1 & 0x4000) == 0)
  {
LABEL_18:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 80);
  id v3 = v4;
  if ((a1 & 0x8000) == 0)
  {
LABEL_19:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 81);
  id v3 = v4;
  if ((a1 & 0x10000) == 0)
  {
LABEL_20:
    if ((a1 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 300);
  id v3 = v4;
  if ((a1 & 0x20000) == 0)
  {
LABEL_21:
    if ((a1 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 301);
  id v3 = v4;
  if ((a1 & 0x40000) == 0)
  {
LABEL_22:
    if ((a1 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 302);
  id v3 = v4;
  if ((a1 & 0x80000) == 0)
  {
LABEL_23:
    if ((a1 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 303);
  id v3 = v4;
  if ((a1 & 0x100000) == 0)
  {
LABEL_24:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 304);
  id v3 = v4;
  if ((a1 & 0x200000) == 0)
  {
LABEL_25:
    if ((a1 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 305);
  id v3 = v4;
  if ((a1 & 0x400000) == 0)
  {
LABEL_26:
    if ((a1 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 306);
  id v3 = v4;
  if ((a1 & 0x800000) == 0)
  {
LABEL_27:
    if ((a1 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 307);
  id v3 = v4;
  if ((a1 & 0x1000000) == 0)
  {
LABEL_28:
    if ((a1 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 54);
  id v3 = v4;
  if ((a1 & 0x2000000) == 0)
  {
LABEL_29:
    if ((a1 & 0x4000000) == 0) {
      goto LABEL_30;
    }
LABEL_62:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 56);
    id v3 = v4;
    if ((a1 & 0x8000000) == 0)
    {
LABEL_31:
      if ((a1 & 0x10000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_61:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 55);
  id v3 = v4;
  if ((a1 & 0x4000000) != 0) {
    goto LABEL_62;
  }
LABEL_30:
  if ((a1 & 0x8000000) == 0) {
    goto LABEL_31;
  }
LABEL_63:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 57);
  id v3 = v4;
  if ((a1 & 0x10000000) != 0)
  {
LABEL_32:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 58);
    id v3 = v4;
  }
LABEL_33:
}

unint64_t INPhotoAttributeOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    unint64_t v2 = result;
    if (a2 <= 49)
    {
      uint64_t result = 0;
      switch(a2)
      {
        case 2:
          uint64_t result = v2 & 1;
          break;
        case 3:
          uint64_t result = (v2 >> 1) & 1;
          break;
        case 4:
          uint64_t result = (v2 >> 2) & 1;
          break;
        case 10:
          uint64_t result = (v2 >> 3) & 1;
          break;
        case 11:
          uint64_t result = (v2 >> 4) & 1;
          break;
        case 12:
          uint64_t result = (v2 >> 5) & 1;
          break;
        case 13:
          uint64_t result = (v2 >> 6) & 1;
          break;
        case 14:
          uint64_t result = (v2 >> 7) & 1;
          break;
        case 15:
          uint64_t result = (v2 >> 8) & 1;
          break;
        case 16:
          uint64_t result = (v2 >> 9) & 1;
          break;
        default:
          return result;
      }
    }
    else if (a2 > 80)
    {
      switch(a2)
      {
        case 300:
          uint64_t result = (result >> 16) & 1;
          break;
        case 301:
          uint64_t result = (result >> 17) & 1;
          break;
        case 302:
          uint64_t result = (result >> 18) & 1;
          break;
        case 303:
          uint64_t result = (result >> 19) & 1;
          break;
        case 304:
          uint64_t result = (result >> 20) & 1;
          break;
        case 305:
          uint64_t result = (result >> 21) & 1;
          break;
        case 306:
          uint64_t result = (result >> 22) & 1;
          break;
        case 307:
          uint64_t result = (result >> 23) & 1;
          break;
        default:
          BOOL v3 = a2 == 81;
          uint64_t v4 = (result >> 15) & 1;
LABEL_13:
          if (v3) {
            uint64_t result = v4;
          }
          else {
            uint64_t result = 0;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '2':
          uint64_t result = (result >> 10) & 1;
          break;
        case '3':
          uint64_t result = (result >> 11) & 1;
          break;
        case '4':
          uint64_t result = (result >> 12) & 1;
          break;
        case '5':
          uint64_t result = (result >> 13) & 1;
          break;
        case '6':
          uint64_t result = (result >> 24) & 1;
          break;
        case '7':
          uint64_t result = (result >> 25) & 1;
          break;
        case '8':
          uint64_t result = (result >> 26) & 1;
          break;
        case '9':
          uint64_t result = (result >> 27) & 1;
          break;
        case ':':
          uint64_t result = (result >> 28) & 1;
          break;
        default:
          BOOL v3 = a2 == 80;
          uint64_t v4 = (result >> 14) & 1;
          goto LABEL_13;
      }
    }
  }
  return result;
}

uint64_t *INPhotoAttributeOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    if (a2 <= 49)
    {
      switch(a2)
      {
        case 2:
          v2 |= 1uLL;
          break;
        case 3:
          v2 |= 2uLL;
          break;
        case 4:
          v2 |= 4uLL;
          break;
        case 10:
          v2 |= 8uLL;
          break;
        case 11:
          v2 |= 0x10uLL;
          break;
        case 12:
          v2 |= 0x20uLL;
          break;
        case 13:
          v2 |= 0x40uLL;
          break;
        case 14:
          v2 |= 0x80uLL;
          break;
        case 15:
          v2 |= 0x100uLL;
          break;
        case 16:
          v2 |= 0x200uLL;
          break;
        default:
          break;
      }
    }
    else if (a2 > 80)
    {
      switch(a2)
      {
        case 300:
          v2 |= 0x10000uLL;
          break;
        case 301:
          v2 |= 0x20000uLL;
          break;
        case 302:
          v2 |= 0x40000uLL;
          break;
        case 303:
          v2 |= 0x80000uLL;
          break;
        case 304:
          v2 |= 0x100000uLL;
          break;
        case 305:
          v2 |= 0x200000uLL;
          break;
        case 306:
          v2 |= 0x400000uLL;
          break;
        case 307:
          v2 |= 0x800000uLL;
          break;
        default:
          BOOL v3 = a2 == 81;
          uint64_t v4 = v2 | 0x8000;
LABEL_12:
          if (v3) {
            uint64_t v2 = v4;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '2':
          v2 |= 0x400uLL;
          break;
        case '3':
          v2 |= 0x800uLL;
          break;
        case '4':
          v2 |= 0x1000uLL;
          break;
        case '5':
          v2 |= 0x2000uLL;
          break;
        case '6':
          v2 |= 0x1000000uLL;
          break;
        case '7':
          v2 |= 0x2000000uLL;
          break;
        case '8':
          v2 |= 0x4000000uLL;
          break;
        case '9':
          v2 |= 0x8000000uLL;
          break;
        case ':':
          v2 |= 0x10000000uLL;
          break;
        default:
          BOOL v3 = a2 == 80;
          uint64_t v4 = v2 | 0x4000;
          goto LABEL_12;
      }
    }
    *uint64_t result = v2;
  }
  return result;
}

unint64_t *INPhotoAttributeOptionsRemoveBackingType(unint64_t *result, int a2)
{
  if (result)
  {
    unint64_t v2 = *result;
    if (a2 <= 49)
    {
      switch(a2)
      {
        case 2:
          v2 &= ~1uLL;
          break;
        case 3:
          v2 &= ~2uLL;
          break;
        case 4:
          v2 &= ~4uLL;
          break;
        case 10:
          v2 &= ~8uLL;
          break;
        case 11:
          v2 &= ~0x10uLL;
          break;
        case 12:
          v2 &= ~0x20uLL;
          break;
        case 13:
          v2 &= ~0x40uLL;
          break;
        case 14:
          v2 &= ~0x80uLL;
          break;
        case 15:
          v2 &= ~0x100uLL;
          break;
        case 16:
          v2 &= ~0x200uLL;
          break;
        default:
          break;
      }
    }
    else if (a2 > 80)
    {
      switch(a2)
      {
        case 300:
          v2 &= ~0x10000uLL;
          break;
        case 301:
          v2 &= ~0x20000uLL;
          break;
        case 302:
          v2 &= ~0x40000uLL;
          break;
        case 303:
          v2 &= ~0x80000uLL;
          break;
        case 304:
          v2 &= ~0x100000uLL;
          break;
        case 305:
          v2 &= ~0x200000uLL;
          break;
        case 306:
          v2 &= ~0x400000uLL;
          break;
        case 307:
          v2 &= ~0x800000uLL;
          break;
        default:
          BOOL v3 = a2 == 81;
          unint64_t v4 = v2 & 0xFFFFFFFFFFFF7FFFLL;
LABEL_12:
          if (v3) {
            unint64_t v2 = v4;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '2':
          v2 &= ~0x400uLL;
          break;
        case '3':
          v2 &= ~0x800uLL;
          break;
        case '4':
          v2 &= ~0x1000uLL;
          break;
        case '5':
          v2 &= ~0x2000uLL;
          break;
        case '6':
          v2 &= ~0x1000000uLL;
          break;
        case '7':
          v2 &= ~0x2000000uLL;
          break;
        case '8':
          v2 &= ~0x4000000uLL;
          break;
        case '9':
          v2 &= ~0x8000000uLL;
          break;
        case ':':
          v2 &= ~0x10000000uLL;
          break;
        default:
          BOOL v3 = a2 == 80;
          unint64_t v4 = v2 & 0xFFFFFFFFFFFFBFFFLL;
          goto LABEL_12;
      }
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t INPhotoAttributeOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  obuint64_t j = a1;
  uint64_t v1 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v3 |= [v6 isEqualToString:@"photo"];
        if ([v6 isEqualToString:@"video"]) {
          v3 |= 2uLL;
        }
        if ([v6 isEqualToString:@"GIF"]) {
          v3 |= 4uLL;
        }
        if ([v6 isEqualToString:@"flash"]) {
          v3 |= 8uLL;
        }
        if ([v6 isEqualToString:@"landscapeOrientation"]) {
          v3 |= 0x10uLL;
        }
        if ([v6 isEqualToString:@"portraitOrientation"]) {
          v3 |= 0x20uLL;
        }
        if ([v6 isEqualToString:@"favorite"]) {
          v3 |= 0x40uLL;
        }
        if ([v6 isEqualToString:@"selfie"]) {
          v3 |= 0x80uLL;
        }
        if ([v6 isEqualToString:@"frontFacingCamera"]) {
          v3 |= 0x100uLL;
        }
        if ([v6 isEqualToString:@"screenshot"]) {
          v3 |= 0x200uLL;
        }
        if ([v6 isEqualToString:@"burstPhoto"]) {
          v3 |= 0x400uLL;
        }
        if ([v6 isEqualToString:@"HDRPhoto"]) {
          v3 |= 0x800uLL;
        }
        if ([v6 isEqualToString:@"squarePhoto"]) {
          v3 |= 0x1000uLL;
        }
        if ([v6 isEqualToString:@"panoramaPhoto"]) {
          v3 |= 0x2000uLL;
        }
        if ([v6 isEqualToString:@"timeLapseVideo"]) {
          v3 |= 0x4000uLL;
        }
        if ([v6 isEqualToString:@"slowMotionVideo"]) {
          v3 |= 0x8000uLL;
        }
        if ([v6 isEqualToString:@"noirFilter"]) {
          v3 |= 0x10000uLL;
        }
        if ([v6 isEqualToString:@"chromeFilter"]) {
          v3 |= 0x20000uLL;
        }
        if ([v6 isEqualToString:@"instantFilter"]) {
          v3 |= 0x40000uLL;
        }
        if ([v6 isEqualToString:@"tonalFilter"]) {
          v3 |= 0x80000uLL;
        }
        if ([v6 isEqualToString:@"transferFilter"]) {
          v3 |= 0x100000uLL;
        }
        if ([v6 isEqualToString:@"monoFilter"]) {
          v3 |= 0x200000uLL;
        }
        if ([v6 isEqualToString:@"fadeFilter"]) {
          v3 |= 0x400000uLL;
        }
        if ([v6 isEqualToString:@"processFilter"]) {
          v3 |= 0x800000uLL;
        }
        if ([v6 isEqualToString:@"portraitPhoto"]) {
          v3 |= 0x1000000uLL;
        }
        if ([v6 isEqualToString:@"livePhoto"]) {
          v3 |= 0x2000000uLL;
        }
        if ([v6 isEqualToString:@"loopPhoto"]) {
          v3 |= 0x4000000uLL;
        }
        if ([v6 isEqualToString:@"bouncePhoto"]) {
          v3 |= 0x8000000uLL;
        }
        if ([v6 isEqualToString:@"longExposurePhoto"]) {
          v3 |= 0x10000000uLL;
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id INPhotoAttributeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"photo", @"photo", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_39;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"video", @"video", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_40;
    }
LABEL_39:
    long long v10 = INLocalizedStringWithLocalizer(@"GIF", @"GIF", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_41;
    }
LABEL_40:
    long long v11 = INLocalizedStringWithLocalizer(@"flash", @"flash", v3);
    [v4 addObject:v11];

    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_42;
    }
LABEL_41:
    long long v12 = INLocalizedStringWithLocalizer(@"landscape orientation", @"landscape orientation", v3);
    [v4 addObject:v12];

    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
LABEL_42:
    long long v13 = INLocalizedStringWithLocalizer(@"portrait orientation", @"portrait orientation", v3);
    [v4 addObject:v13];

    if ((a1 & 0x40) == 0)
    {
LABEL_9:
      if ((a1 & 0x80) == 0) {
        goto LABEL_10;
      }
      goto LABEL_44;
    }
LABEL_43:
    uint64_t v14 = INLocalizedStringWithLocalizer(@"favorite", @"favorite", v3);
    [v4 addObject:v14];

    if ((a1 & 0x80) == 0)
    {
LABEL_10:
      if ((a1 & 0x100) == 0) {
        goto LABEL_11;
      }
      goto LABEL_45;
    }
LABEL_44:
    int v15 = INLocalizedStringWithLocalizer(@"selfie", @"selfie", v3);
    [v4 addObject:v15];

    if ((a1 & 0x100) == 0)
    {
LABEL_11:
      if ((a1 & 0x200) == 0) {
        goto LABEL_12;
      }
      goto LABEL_46;
    }
LABEL_45:
    uint64_t v16 = INLocalizedStringWithLocalizer(@"front facing camera", @"front facing camera", v3);
    [v4 addObject:v16];

    if ((a1 & 0x200) == 0)
    {
LABEL_12:
      if ((a1 & 0x400) == 0) {
        goto LABEL_13;
      }
      goto LABEL_47;
    }
LABEL_46:
    unint64_t v17 = INLocalizedStringWithLocalizer(@"screenshot", @"screenshot", v3);
    [v4 addObject:v17];

    if ((a1 & 0x400) == 0)
    {
LABEL_13:
      if ((a1 & 0x800) == 0) {
        goto LABEL_14;
      }
      goto LABEL_48;
    }
LABEL_47:
    __int16 v18 = INLocalizedStringWithLocalizer(@"burst photo", @"burst photo", v3);
    [v4 addObject:v18];

    if ((a1 & 0x800) == 0)
    {
LABEL_14:
      if ((a1 & 0x1000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_49;
    }
LABEL_48:
    id v19 = INLocalizedStringWithLocalizer(@"HDR Photo", @"HDR Photo", v3);
    [v4 addObject:v19];

    if ((a1 & 0x1000) == 0)
    {
LABEL_15:
      if ((a1 & 0x2000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_50;
    }
LABEL_49:
    __int16 v20 = INLocalizedStringWithLocalizer(@"square photo", @"square photo", v3);
    [v4 addObject:v20];

    if ((a1 & 0x2000) == 0)
    {
LABEL_16:
      if ((a1 & 0x4000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_51;
    }
LABEL_50:
    id v21 = INLocalizedStringWithLocalizer(@"panorama photo", @"panorama photo", v3);
    [v4 addObject:v21];

    if ((a1 & 0x4000) == 0)
    {
LABEL_17:
      if ((a1 & 0x8000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_52;
    }
LABEL_51:
    uint64_t v22 = INLocalizedStringWithLocalizer(@"time lapse video", @"time lapse video", v3);
    [v4 addObject:v22];

    if ((a1 & 0x8000) == 0)
    {
LABEL_18:
      if ((a1 & 0x10000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_53;
    }
LABEL_52:
    char v23 = INLocalizedStringWithLocalizer(@"slow motion video", @"slow motion video", v3);
    [v4 addObject:v23];

    if ((a1 & 0x10000) == 0)
    {
LABEL_19:
      if ((a1 & 0x20000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_54;
    }
LABEL_53:
    uint64_t v24 = INLocalizedStringWithLocalizer(@"noir filter", @"noir filter", v3);
    [v4 addObject:v24];

    if ((a1 & 0x20000) == 0)
    {
LABEL_20:
      if ((a1 & 0x40000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_55;
    }
LABEL_54:
    unint64_t v25 = INLocalizedStringWithLocalizer(@"chrome filter", @"chrome filter", v3);
    [v4 addObject:v25];

    if ((a1 & 0x40000) == 0)
    {
LABEL_21:
      if ((a1 & 0x80000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_56;
    }
LABEL_55:
    char v26 = INLocalizedStringWithLocalizer(@"instant filter", @"instant filter", v3);
    [v4 addObject:v26];

    if ((a1 & 0x80000) == 0)
    {
LABEL_22:
      if ((a1 & 0x100000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_57;
    }
LABEL_56:
    unsigned int v27 = INLocalizedStringWithLocalizer(@"tonal filter", @"tonal filter", v3);
    [v4 addObject:v27];

    if ((a1 & 0x100000) == 0)
    {
LABEL_23:
      if ((a1 & 0x200000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_58;
    }
LABEL_57:
    uint64_t v28 = INLocalizedStringWithLocalizer(@"transfer filter", @"transfer filter", v3);
    [v4 addObject:v28];

    if ((a1 & 0x200000) == 0)
    {
LABEL_24:
      if ((a1 & 0x400000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v29 = INLocalizedStringWithLocalizer(@"mono filter", @"mono filter", v3);
    [v4 addObject:v29];

    if ((a1 & 0x400000) == 0)
    {
LABEL_25:
      if ((a1 & 0x800000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_60;
    }
LABEL_59:
    unint64_t v30 = INLocalizedStringWithLocalizer(@"fade filter", @"fade filter", v3);
    [v4 addObject:v30];

    if ((a1 & 0x800000) == 0)
    {
LABEL_26:
      if ((a1 & 0x1000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_61;
    }
LABEL_60:
    char v31 = INLocalizedStringWithLocalizer(@"process filter", @"process filter", v3);
    [v4 addObject:v31];

    if ((a1 & 0x1000000) == 0)
    {
LABEL_27:
      if ((a1 & 0x2000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_62;
    }
LABEL_61:
    uint64_t v32 = INLocalizedStringWithLocalizer(@"portrait photo", @"portrait photo", v3);
    [v4 addObject:v32];

    if ((a1 & 0x2000000) == 0)
    {
LABEL_28:
      if ((a1 & 0x4000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_63;
    }
LABEL_62:
    char v33 = INLocalizedStringWithLocalizer(@"live photo", @"live photo", v3);
    [v4 addObject:v33];

    if ((a1 & 0x4000000) == 0)
    {
LABEL_29:
      if ((a1 & 0x8000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_64;
    }
LABEL_63:
    unsigned int v34 = INLocalizedStringWithLocalizer(@"loop photo", @"loop photo", v3);
    [v4 addObject:v34];

    if ((a1 & 0x8000000) == 0)
    {
LABEL_30:
      if ((a1 & 0x10000000) == 0)
      {
LABEL_32:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_34;
      }
LABEL_31:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"long exposure photo", @"long exposure photo", v3);
      [v4 addObject:v5];

      goto LABEL_32;
    }
LABEL_64:
    uint64_t v35 = INLocalizedStringWithLocalizer(@"bounce photo", @"bounce photo", v3);
    [v4 addObject:v35];

    if ((a1 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_34:

  return v6;
}

void sub_18CE0E4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEKRecurrenceDayOfWeekClass_block_invoke(uint64_t a1)
{
  EventKitLibrary();
  Class result = objc_getClass("EKRecurrenceDayOfWeek");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEKRecurrenceDayOfWeekClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getEKRecurrenceRuleClass_block_invoke(v3);
  }
  return result;
}

void __getEKRecurrenceRuleClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EKRecurrenceRule");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEKRecurrenceRuleClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    EventKitLibrary();
  }
}

void EventKitLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!EventKitLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __EventKitLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E551DA30;
    uint64_t v3 = 0;
    EventKitLibraryCore_frameworkLibrary = _sl_dlopen();
    uint64_t v0 = (void *)v1[0];
    if (EventKitLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      uint64_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __EventKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  EventKitLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t _INPBFindEventsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBCalendarEvent);
        if (!PBReaderPlaceMark() || !_INPBCalendarEventReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addEvents:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INWellnessQueryResultTypeHasBackingType(unint64_t a1)
{
  return a1 < 0xA;
}

unint64_t INWellnessQueryResultTypeGetBackingType(unint64_t result)
{
  if (result >= 0xA) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INWellnessQueryResultTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 8) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INWellnessQueryResultTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8) {
    return @"unknown";
  }
  else {
    return off_1E551DA48[a1 - 1];
  }
}

uint64_t INWellnessQueryResultTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"raw"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"average"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"minimum"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"maximum"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"sum"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"first"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"last"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"above"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"below"])
  {
    uint64_t v2 = 9;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INWellnessQueryResultTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"raw";
      goto LABEL_12;
    case 2:
      uint64_t v4 = @"average";
      goto LABEL_12;
    case 3:
      uint64_t v4 = @"minimum";
      goto LABEL_12;
    case 4:
      uint64_t v4 = @"maximum";
      goto LABEL_12;
    case 5:
      uint64_t v4 = @"sum";
      goto LABEL_12;
    case 6:
      uint64_t v4 = @"first";
      goto LABEL_12;
    case 7:
      uint64_t v4 = @"last";
      goto LABEL_12;
    case 8:
      uint64_t v4 = @"above";
      goto LABEL_12;
    case 9:
      uint64_t v4 = @"below";
LABEL_12:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

void sub_18CE14F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE173A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t __Block_byref_object_copy__100459(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__100460(uint64_t a1)
{
}

uint64_t _INPBPlatformSupportReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v24 = PBReaderReadString();
        [a1 setMinimumOsVersion:v24];
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_34;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        uint64_t v23 = *(unsigned char *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        [a1 setSupportedPlatform:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBPairReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        char v17 = (_INPBStringValue *)objc_claimAutoreleasedReturnValue();
        [a1 setKey:v17];
        goto LABEL_84;
      case 2u:
        char v17 = objc_alloc_init(_INPBStringValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairStringValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 3u:
        char v17 = objc_alloc_init(_INPBURLValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairUrlValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 4u:
        char v17 = objc_alloc_init(_INPBDoubleValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBDoubleValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairDoubleValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 5u:
        char v17 = objc_alloc_init(_INPBImageValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBImageValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairImageValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 6u:
        char v17 = objc_alloc_init(_INPBIntegerValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBIntegerValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairIntegerValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 7u:
        char v17 = objc_alloc_init(_INPBDistanceValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBDistanceValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairDistanceValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 8u:
        char v17 = objc_alloc_init(_INPBTemperatureValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBTemperatureValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairTemperatureValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 9u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairLocationValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 0xAu:
        char v17 = objc_alloc_init(_INPBContactValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairPersonValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 0xBu:
        char v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairCurrencyAmountValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 0xCu:
        char v17 = objc_alloc_init(_INPBPaymentMethodValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBPaymentMethodValueReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairPaymentMethodValue:", v17, 0, 0);
        }
        goto LABEL_84;
      case 0xDu:
        char v17 = objc_alloc_init(_INPBDataString);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairDataString:", v17, 0, 0);
        }
        goto LABEL_84;
      case 0xEu:
        char v17 = objc_alloc_init(_INPBCustomObject);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBCustomObjectReadFrom(v17, a2)) {
          goto LABEL_94;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPairCustomObject:", v17, 0, 0);
        }
        goto LABEL_84;
      case 0xFu:
        char v17 = objc_alloc_init(_INPBDataValue);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (PBReaderPlaceMark() && _INPBDataValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addPairDataValue:", v17, 0, 0);
          }
LABEL_84:

LABEL_85:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_94:

        return 0;
      default:
        if ((v10 >> 3) == 1000)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_90;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_92;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_90:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_92:
          objc_msgSend(a1, "setRepeated:", v20 != 0, v25, v26);
        }
        else
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        goto LABEL_85;
    }
  }
}

__CFString *INWorkoutNameIdentifierGetFacadeObject(int a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a2 <= 0x14)
  {
    if (a1) {
      return off_1E551E020[a2];
    }
  }
  return result;
}

uint64_t INWorkoutNameIdentifierGetBackingType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Run"])
    {
      uint64_t v3 = 0;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Sit"])
    {
      uint64_t v3 = 1;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Steps"])
    {
      uint64_t v3 = 2;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Stand"])
    {
      uint64_t v3 = 3;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Move"])
    {
      uint64_t v3 = 4;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Walk"])
    {
      uint64_t v3 = 5;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Yoga"])
    {
      uint64_t v3 = 6;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Dance"])
    {
      uint64_t v3 = 7;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Crosstraining"])
    {
      uint64_t v3 = 8;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Elliptical"])
    {
      uint64_t v3 = 9;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Rower"])
    {
      uint64_t v3 = 10;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Cycle"])
    {
      uint64_t v3 = 11;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Stairs"])
    {
      uint64_t v3 = 12;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Other"])
    {
      uint64_t v3 = 13;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Indoorrun"])
    {
      uint64_t v3 = 14;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Indoorcycle"])
    {
      uint64_t v3 = 15;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Indoorwalk"])
    {
      uint64_t v3 = 16;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Exercise"])
    {
      uint64_t v3 = 17;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Hike"])
    {
      uint64_t v3 = 18;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.HighIntensityIntervalTraining"])
    {
      uint64_t v3 = 19;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.WorkoutNameIdentifier.Swim"])
    {
      uint64_t v3 = 20;
    }
    else
    {
      uint64_t v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INWorkoutNameIdentifierValueAsString(__CFString *a1)
{
  if (a1)
  {
    uint64_t BackingType = INWorkoutNameIdentifierGetBackingType(a1);
    if (BackingType >= 0x15)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", BackingType);
      a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = off_1E551E0C8[BackingType];
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

BOOL _INPBEndWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INCreateTaskListIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551E198[a1];
  }
}

uint64_t _INPBSetSeatSettingsInCarIntentReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_65;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_69:
        [a1 setEnableHeating:v21 != 0];
        goto LABEL_88;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v27 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_73:
        [a1 setEnableCooling:v27 != 0];
        goto LABEL_88;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                uint64_t v33 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_77:
        [a1 setEnableMassage:v33 != 0];
        goto LABEL_88;
      case 5u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        while (2)
        {
          uint64_t v40 = *v3;
          unint64_t v41 = *(void *)(a2 + v40);
          if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              BOOL v14 = v38++ >= 9;
              if (v14)
              {
                uint64_t v43 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v43 = 0;
        }
        else {
          uint64_t v43 = v39;
        }
LABEL_82:
        [a1 setSeat:v43];
        goto LABEL_88;
      case 6u:
        char v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLevel:", v17, 0, 0);
        goto LABEL_65;
      case 7u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        while (2)
        {
          uint64_t v47 = *v3;
          unint64_t v48 = *(void *)(a2 + v47);
          if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v14 = v45++ >= 9;
              if (v14)
              {
                uint64_t v50 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v50 = 0;
        }
        else {
          uint64_t v50 = v46;
        }
LABEL_87:
        [a1 setRelativeLevelSetting:v50];
        goto LABEL_88;
      case 8u:
        char v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_65:

LABEL_88:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_90:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_88;
    }
  }
}

INEvent *INIntentSlotValueTransformFromEvent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INEvent alloc];
    uint64_t v3 = [v1 eventType];
    uint64_t v4 = INIntentSlotValueTransformFromString(v3);
    uint64_t v5 = [v1 eventDescriptors];

    uint64_t v6 = INIntentSlotValueTransformFromStrings(v5);
    uint64_t v7 = [(INEvent *)v2 initWithEventType:v4 eventDescriptors:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id INIntentSlotValueTransformFromEvents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromEvent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedEventFromEvent(void *a1)
{
  id v1 = a1;

  return v1;
}

INPlace *INIntentSlotValueTransformFromPlace(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    long long v14 = [INPlace alloc];
    uint64_t v2 = [v1 placeType];
    id v3 = INIntentSlotValueTransformFromString(v2);
    uint64_t v4 = [v1 placeSubType];
    uint64_t v5 = INIntentSlotValueTransformFromString(v4);
    uint64_t v6 = [v1 placeDescriptors];
    uint64_t v7 = INIntentSlotValueTransformFromStrings(v6);
    int v8 = [v1 hasPersonalPlaceType];
    int v9 = [v1 personalPlaceType];

    uint64_t v10 = 2 * (v9 == 3);
    if (v9 == 2) {
      uint64_t v10 = 1;
    }
    if (v8) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    long long v12 = [(INPlace *)v14 initWithPlaceType:v3 placeSubType:v5 placeDescriptors:v7 personalPlaceType:v11];
  }
  else
  {
    long long v12 = 0;
  }

  return v12;
}

_INPBPlace *INIntentSlotValueTransformToPlace(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBPlace);
    id v3 = [v1 placeType];
    uint64_t v4 = INIntentSlotValueTransformToString(v3);
    [(_INPBPlace *)v2 setPlaceType:v4];

    uint64_t v5 = [v1 placeSubType];
    uint64_t v6 = INIntentSlotValueTransformToString(v5);
    [(_INPBPlace *)v2 setPlaceSubType:v6];

    uint64_t v7 = [v1 placeDescriptors];
    int v8 = INIntentSlotValueTransformToStrings(v7);
    [(_INPBPlace *)v2 setPlaceDescriptors:v8];

    uint64_t v9 = [v1 personalPlaceType];
    if (v9 == 1) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = 0x7FFFFFFF;
    }
    if (v9 == 2) {
      uint64_t v11 = 3;
    }
    else {
      uint64_t v11 = v10;
    }
    [(_INPBPlace *)v2 setPersonalPlaceType:v11];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromPlaces(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformFromPlace(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPlaces(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformToPlace(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPlaceFromPlace(void *a1)
{
  id v1 = a1;

  return v1;
}

id INIntentSlotValueRedactedActivityFromActivity(void *a1)
{
  id v1 = a1;

  return v1;
}

id INIntentSlotValueTransformFromFile(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v4 = 0;
    goto LABEL_17;
  }
  if ([v1 hasRemovedOnCompletion])
  {
    id v3 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v2, "removedOnCompletion"));
  }
  else
  {
    id v3 = 0;
  }
  uint64_t v5 = [v2 fileURL];

  if (v5)
  {
    uint64_t v6 = [INFile alloc];
    uint64_t v7 = [v2 filename];
    int v8 = [v2 fileURL];
    uint64_t v9 = INIntentSlotValueTransformFromURLValue(v8);
    unsigned int v10 = [v2 typeIdentifier];
    id v4 = [(INFile *)v6 _initWithData:0 filename:v7 fileURL:v9 typeIdentifier:v10 removedOnCompletion:v3];
  }
  else
  {
    uint64_t v11 = [v2 data];
    if (v11
      && (long long v12 = (void *)v11,
          [v2 filename],
          long long v13 = objc_claimAutoreleasedReturnValue(),
          v13,
          v12,
          v13))
    {
      long long v14 = [INFile alloc];
      uint64_t v7 = [v2 data];
      int v8 = [v2 filename];
      uint64_t v9 = [v2 typeIdentifier];
      uint64_t v15 = [(INFile *)v14 _initWithData:v7 filename:v8 fileURL:0 typeIdentifier:v9 removedOnCompletion:v3];
    }
    else
    {
      uint64_t v16 = [v2 bookmarkData];
      if (!v16
        || (char v17 = (void *)v16,
            [v2 filename],
            char v18 = objc_claimAutoreleasedReturnValue(),
            v18,
            v17,
            !v18))
      {
        id v4 = 0;
        goto LABEL_16;
      }
      char v19 = [INFile alloc];
      uint64_t v7 = [v2 bookmarkData];
      int v8 = [v2 filename];
      uint64_t v9 = [v2 typeIdentifier];
      uint64_t v15 = [(INFile *)v19 _initWithBookmarkData:v7 filename:v8 typeIdentifier:v9 removedOnCompletion:v3];
    }
    id v4 = (id)v15;
  }

LABEL_16:
LABEL_17:

  return v4;
}

_INPBFile *INIntentSlotValueTransformToFile(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(_INPBFile);
    if ([v1 _isFileURLBased])
    {
      id v3 = [v1 fileURL];
      id v4 = INIntentSlotValueTransformToURLValue(v3);
      [(_INPBFile *)v2 setFileURL:v4];
    }
    else
    {
      uint64_t v5 = [v1 _bookmarkData];

      if (v5)
      {
        id v3 = [v1 _bookmarkData];
        [(_INPBFile *)v2 setBookmarkData:v3];
      }
      else
      {
        id v3 = [v1 data];
        [(_INPBFile *)v2 setData:v3];
      }
    }

    uint64_t v6 = [v1 filename];
    [(_INPBFile *)v2 setFilename:v6];

    uint64_t v7 = [v1 typeIdentifier];
    [(_INPBFile *)v2 setTypeIdentifier:v7];

    int v8 = [v1 _removedOnCompletionValue];

    if (v8) {
      -[_INPBFile setRemovedOnCompletion:](v2, "setRemovedOnCompletion:", [v1 removedOnCompletion]);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformToFiles(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformToFile(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

INGeographicalFeature *INIntentSlotValueTransformFromGeographicalFeature(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INGeographicalFeature alloc];
    id v3 = [v1 geographicalFeatureType];
    uint64_t v4 = INIntentSlotValueTransformFromString(v3);
    uint64_t v5 = [v1 geographicalFeatureDescriptors];

    uint64_t v6 = INIntentSlotValueTransformFromStrings(v5);
    uint64_t v7 = [(INGeographicalFeature *)v2 initWithGeographicalFeatureType:v4 geographicalFeatureDescriptors:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id INIntentSlotValueTransformToGeographicalFeatures(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformToGeographicalFeature(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedGeographicalFeatureFromGeographicalFeature(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBSearchForTimersIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    uint64_t v16 = *v5;
    int v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(unsigned char *)(a2 + v16)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v17 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_59;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_27;
      case 2u:
        char v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLabel:", v19, 0, 0);
LABEL_27:

LABEL_57:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_59:

        return 0;
      case 3u:
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          double v23 = *(double *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v23 = 0.0;
        }
        [a1 setDuration:v23];
        goto LABEL_57;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (2)
        {
          uint64_t v27 = *v3;
          uint64_t v28 = *(void *)(a2 + v27);
          unint64_t v29 = v28 + 1;
          if (v28 == -1 || v29 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              BOOL v15 = v25++ >= 9;
              if (v15)
              {
                uint64_t v31 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v26;
        }
LABEL_49:
        [a1 setState:v31];
        goto LABEL_57;
      case 5u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        while (2)
        {
          uint64_t v35 = *v3;
          uint64_t v36 = *(void *)(a2 + v35);
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v37;
            v34 |= (unint64_t)(v38 & 0x7F) << v32;
            if (v38 < 0)
            {
              v32 += 7;
              BOOL v15 = v33++ >= 9;
              if (v15)
              {
                uint64_t v39 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v34;
        }
LABEL_54:
        [a1 setType:v39];
        goto LABEL_57;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_57;
    }
  }
}

uint64_t _INPBMediaItemValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 99)
      {
        switch((int)v17)
        {
          case 1:
            char v18 = objc_alloc_init(_INPBValueMetadata);
            if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0) {
              goto LABEL_62;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
            goto LABEL_51;
          case 2:
            PBReaderReadString();
            char v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            [a1 setIdentifier:v18];
            goto LABEL_51;
          case 3:
            PBReaderReadString();
            char v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            [a1 setTitle:v18];
            goto LABEL_51;
          case 4:
            char v20 = 0;
            unsigned int v21 = 0;
            uint64_t v22 = 0;
            break;
          case 5:
            char v18 = objc_alloc_init(_INPBImageValue);
            if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v18, a2) & 1) == 0) {
              goto LABEL_62;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "setArtwork:", v18, 0, 0);
            goto LABEL_51;
          case 6:
            PBReaderReadString();
            char v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            [a1 setArtist:v18];
            goto LABEL_51;
          case 7:
            PBReaderReadString();
            char v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            [a1 setAssetInfo:v18];
            goto LABEL_51;
          default:
            goto LABEL_54;
        }
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_57;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            uint64_t v26 = 0;
            goto LABEL_60;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = v22;
        }
LABEL_60:
        objc_msgSend(a1, "setType:", v26, v28, v29);
        goto LABEL_52;
      }
      if (v17 == 100)
      {
        char v18 = objc_alloc_init(_INPBScoredValue);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        if (!PBReaderPlaceMark() || !_INPBScoredValueReadFrom(v18, a2))
        {
LABEL_62:

          return 0;
        }
        PBReaderRecallMark();
        if (v18) {
          objc_msgSend(a1, "addTopics:", v18, 0, 0);
        }
        goto LABEL_51;
      }
      if (v17 == 101) {
        break;
      }
      if (v17 == 102)
      {
        char v18 = objc_alloc_init(_INPBPrivateMediaItemValueData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaItemValueDataReadFrom(v18, a2, v19) & 1) == 0) {
          goto LABEL_62;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaItemValueData:", v18, 0, 0);
LABEL_51:

        goto LABEL_52;
      }
LABEL_54:
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
LABEL_52:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBScoredValue);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if (!PBReaderPlaceMark() || !_INPBScoredValueReadFrom(v18, a2)) {
      goto LABEL_62;
    }
    PBReaderRecallMark();
    if (v18) {
      objc_msgSend(a1, "addNamedEntities:", v18, 0, 0);
    }
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBDeleteEventIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_32;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        uint64_t v23 = *(unsigned char *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        [a1 setConfirmationReason:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18CE27138(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CE27380(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CE27720(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t _INPBCalendarEventReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        [a1 setEventIdentifier:v17];
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        [a1 setTitle:v17];
        goto LABEL_41;
      case 3u:
        char v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTimeRange:", v17, 0, 0);
        goto LABEL_41;
      case 4u:
        char v17 = objc_alloc_init(_INPBEventParticipant);
        if (!PBReaderPlaceMark() || !_INPBEventParticipantReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addParticipants:", v17, 0, 0);
        }
        goto LABEL_41;
      case 5u:
        char v17 = objc_alloc_init(_INPBLocation);
        if PBReaderPlaceMark() && (_INPBLocationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLocation:", v17, 0, 0);
LABEL_41:

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_49:

        return 0;
      case 6u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_47:
        [a1 setIsContactBirthday:v21 != 0];
        goto LABEL_42;
      case 7u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        [a1 setCalendarPunchoutURI:v17];
        goto LABEL_41;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

void sub_18CE29820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__104412(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__104413(uint64_t a1)
{
}

uint64_t _INPBSetTimerAttributeIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    uint64_t v16 = *v5;
    int v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(unsigned char *)(a2 + v16)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v17 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_33;
      case 2u:
        char v19 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v19, 0, 0);
        goto LABEL_33;
      case 3u:
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          double v23 = *(double *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v23 = 0.0;
        }
        [a1 setToDuration:v23];
        goto LABEL_36;
      case 4u:
        char v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setToLabel:", v19, 0, 0);
LABEL_33:

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_36;
    }
  }
}

uint64_t _INPBMessageLinkMetadataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    unint64_t v17 = v10 >> 3;
    if ((int)(v10 >> 3) > 79) {
      break;
    }
    if ((int)v17 <= 59)
    {
      switch((int)v17)
      {
        case 1:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setSiteName:v18];
          goto LABEL_100;
        case 2:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setSummary:v18];
          goto LABEL_100;
        case 3:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setTitle:v18];
          goto LABEL_100;
        case 4:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setOpenGraphType:v18];
          goto LABEL_100;
        case 5:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setItemType:v18];
          goto LABEL_100;
        case 6:
          unsigned int v18 = objc_alloc_init(_INPBURLValue);
          if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v18, a2)) {
            goto LABEL_109;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setLinkURL:", v18, 0, 0);
          goto LABEL_100;
        case 7:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setOriginalURL:v18];
          goto LABEL_100;
        case 8:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          if (v18) {
            [a1 addImageURL:v18];
          }
          goto LABEL_100;
        case 9:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          if (v18) {
            [a1 addIconURL:v18];
          }
          goto LABEL_100;
        case 10:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setCreator:v18];
          goto LABEL_100;
        case 11:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          break;
        case 12:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setITunesStoreIdentifier:v18];
          goto LABEL_100;
        case 13:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setITunesStoreFrontIdentifier:v18];
          goto LABEL_100;
        case 20:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setSongTitle:v18];
          goto LABEL_100;
        case 21:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setSongArtist:v18];
          goto LABEL_100;
        case 22:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setSongAlbum:v18];
          goto LABEL_100;
        case 30:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setAlbumName:v18];
          goto LABEL_100;
        case 31:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setAlbumArtist:v18];
          goto LABEL_100;
        case 40:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setMusicVideoName:v18];
          goto LABEL_100;
        case 41:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setMusicVideoArtist:v18];
          goto LABEL_100;
        case 50:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setArtistName:v18];
          goto LABEL_100;
        case 51:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setArtistGenre:v18];
          goto LABEL_100;
        default:
          goto LABEL_51;
      }
      while (1)
      {
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
        *(void *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0) {
          goto LABEL_104;
        }
        v20 += 7;
        BOOL v14 = v21++ >= 9;
        if (v14)
        {
          uint64_t v26 = 0;
          goto LABEL_107;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_104:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v22;
      }
LABEL_107:
      [a1 setLinkMediaType:v26];
      goto LABEL_101;
    }
    if ((int)v17 > 69)
    {
      if (v17 == 70)
      {
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setRadioName:v18];
      }
      else
      {
        if (v17 != 71)
        {
LABEL_51:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_101;
        }
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setRadioCurator:v18];
      }
    }
    else if (v17 == 60)
    {
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setPlaylistName:v18];
    }
    else
    {
      if (v17 != 61) {
        goto LABEL_51;
      }
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setPlaylistCurator:v18];
    }
LABEL_100:

LABEL_101:
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
  }
  if ((int)v17 > 149)
  {
    if ((int)v17 <= 169)
    {
      switch(v17)
      {
        case 0x96:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setMovieName:v18];
          break;
        case 0x97:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setMovieGenre:v18];
          break;
        case 0xA0:
          PBReaderReadString();
          unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setTvShowName:v18];
          break;
        default:
          goto LABEL_51;
      }
    }
    else if ((int)v17 > 179)
    {
      if (v17 == 180)
      {
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setAppleTvTitle:v18];
      }
      else
      {
        if (v17 != 181) {
          goto LABEL_51;
        }
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setAppleTvSubtitle:v18];
      }
    }
    else if (v17 == 170)
    {
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setMovieBundleName:v18];
    }
    else
    {
      if (v17 != 171) {
        goto LABEL_51;
      }
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setMovieBundleGenre:v18];
    }
    goto LABEL_100;
  }
  if (v17 > 0x95)
  {
    switch((int)v17)
    {
      case 'd':
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setAudioBookName:v18];
        goto LABEL_100;
      case 'e':
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setAudioBookAuthor:v18];
        goto LABEL_100;
      case 'f':
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setAudioBookNarrator:v18];
        goto LABEL_100;
      case 'n':
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPodcastName:v18];
        goto LABEL_100;
      case 'o':
        PBReaderReadString();
        unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPodcastArtist:v18];
        goto LABEL_100;
      default:
        goto LABEL_51;
    }
  }
  switch((int)v17)
  {
    case 120:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setPodcastEpisodeName:v18];
      goto LABEL_100;
    case 121:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setPodcastEpisodePodcastName:v18];
      goto LABEL_100;
    case 122:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setPodcastEpisodeArtist:v18];
      goto LABEL_100;
    case 123:
      unsigned int v18 = objc_alloc_init(_INPBDateTime);
      if PBReaderPlaceMark() && (_INPBDateTimeReadFrom(v18, a2))
      {
        PBReaderRecallMark();
        objc_msgSend(a1, "setPodcastEpisodeReleaseDate:", v18, 0, 0);
        goto LABEL_100;
      }
LABEL_109:

      return 0;
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
      goto LABEL_51;
    case 130:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setTvEpisodeEpisodeName:v18];
      goto LABEL_100;
    case 131:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setTvEpisodeSeasonName:v18];
      goto LABEL_100;
    case 132:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setTvEpisodeGenre:v18];
      goto LABEL_100;
    case 140:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setTvSeasonName:v18];
      goto LABEL_100;
    case 141:
      PBReaderReadString();
      unsigned int v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      [a1 setTvSeasonGenre:v18];
      goto LABEL_100;
    default:
      JUMPOUT(0);
  }
}

__CFString *INPlayMediaIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return off_1E551E460[a1];
  }
}

uint64_t INPlaybackRepeatModeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INPlaybackRepeatModeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INPlaybackRepeatModeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 3) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INPlaybackRepeatModeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E4E8 + a1 - 1);
  }
}

uint64_t INPlaybackRepeatModeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"all"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"one"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INPlaybackRepeatModeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"one";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"all";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"none";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

BOOL INMediaItemTypeHasBackingType(unint64_t a1)
{
  return a1 < 0x15;
}

unint64_t INMediaItemTypeGetBackingType(unint64_t result)
{
  if (result >= 0x15) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INMediaItemTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 0x13) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INMediaItemTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E500 + a1 - 1);
  }
}

uint64_t INMediaItemTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"song"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"album"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"artist"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"genre"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"playlist"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"podcastShow"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"podcastEpisode"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"podcastPlaylist"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"musicStation"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"audioBook"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"movie"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"TVShow"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"TVShowEpisode"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"musicVideo"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"podcastStation"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"radioStation"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"station"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"music"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"algorithmicRadioStation"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"news"])
  {
    uint64_t v2 = 20;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMediaItemTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"song";
      goto LABEL_23;
    case 2:
      uint64_t v4 = @"album";
      goto LABEL_23;
    case 3:
      uint64_t v4 = @"artist";
      goto LABEL_23;
    case 4:
      uint64_t v4 = @"genre";
      goto LABEL_23;
    case 5:
      uint64_t v4 = @"playlist";
      goto LABEL_23;
    case 6:
      uint64_t v4 = @"podcast show";
      goto LABEL_23;
    case 7:
      uint64_t v4 = @"podcast episode";
      goto LABEL_23;
    case 8:
      uint64_t v4 = @"podcast playlist";
      goto LABEL_23;
    case 9:
      uint64_t v4 = @"music station";
      goto LABEL_23;
    case 10:
      uint64_t v4 = @"audio book";
      goto LABEL_23;
    case 11:
      uint64_t v4 = @"movie";
      goto LABEL_23;
    case 12:
      uint64_t v4 = @"t v show";
      goto LABEL_23;
    case 13:
      uint64_t v4 = @"t v show episode";
      goto LABEL_23;
    case 14:
      uint64_t v4 = @"music video";
      goto LABEL_23;
    case 15:
      uint64_t v4 = @"podcast station";
      goto LABEL_23;
    case 16:
      uint64_t v4 = @"radio station";
      goto LABEL_23;
    case 17:
      uint64_t v4 = @"station";
      goto LABEL_23;
    case 18:
      uint64_t v4 = @"music";
      goto LABEL_23;
    case 19:
      uint64_t v4 = @"algorithmic radio station";
      goto LABEL_23;
    case 20:
      uint64_t v4 = @"news";
LABEL_23:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t INSetTimerAttributeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E5A0 + a1);
  }
}

uint64_t INResumeTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E5E8 + a1);
  }
}

uint64_t _INPBCreateTimerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedTimer:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INResetTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E640 + a1);
  }
}

uint64_t INEventAttributeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INEventAttributeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INEventAttributeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INEventAttributeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E680 + a1 - 1);
  }
}

uint64_t INEventAttributeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"eventLocation"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"participants"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"datetime"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INEventAttributeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"datetime";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"participants";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"event location";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

uint64_t INCreateTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E698 + a1);
  }
}

uint64_t _INPBCreateTimerIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    uint64_t v16 = *v5;
    int v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(unsigned char *)(a2 + v16)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v17 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_47;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_30;
      case 2u:
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          double v23 = *(double *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v23 = 0.0;
        }
        [a1 setDuration:v23];
        goto LABEL_45;
      case 3u:
        char v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLabel:", v19, 0, 0);
LABEL_30:

LABEL_45:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_47:

        return 0;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (2)
        {
          uint64_t v27 = *v3;
          uint64_t v28 = *(void *)(a2 + v27);
          unint64_t v29 = v28 + 1;
          if (v28 == -1 || v29 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              BOOL v15 = v25++ >= 9;
              if (v15)
              {
                uint64_t v31 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v26;
        }
LABEL_42:
        [a1 setType:v31];
        goto LABEL_45;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_45;
    }
  }
}

uint64_t _INPBDeleteEventIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 3)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_36;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_38;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_38:
            [a1 setDeleteAllOccurrences:v20 != 0];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        PBReaderReadString();
        char v24 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setTargetEventIdentifier:v24];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INDeleteTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E710 + a1);
  }
}

uint64_t _INPBResetTimerIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_38;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_40;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_40:
            [a1 setResetMultiple:v20 != 0];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v24 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v24, a2) & 1) == 0) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v24, 0, 0);
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INPauseTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E750 + a1);
  }
}

INTimer *INIntentSlotValueTransformFromTimer(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INTimer alloc];
    id v3 = [v1 label];
    uint64_t v4 = INIntentSlotValueTransformFromDataString(v3);
    [v1 duration];
    double v6 = v5;
    [v1 remainingTime];
    double v8 = v7;
    unsigned int v9 = [v1 identifier];
    int v10 = [v1 hasState];
    int v11 = [v1 state];
    uint64_t v12 = v11 == 1;
    if (v11 == 2) {
      uint64_t v12 = 2;
    }
    if (v10) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = [v1 hasType];
    int v15 = [v1 type];

    uint64_t v16 = v15 == 1;
    if (v15 == 2) {
      uint64_t v16 = 2;
    }
    if (v14) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    char v18 = [(INTimer *)v2 initWithLabel:v4 duration:v9 remainingTime:v13 identifier:v17 state:v6 type:v8];
  }
  else
  {
    char v18 = 0;
  }

  return v18;
}

_INPBTimer *INIntentSlotValueTransformToTimer(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBTimer);
    id v3 = [v1 label];
    uint64_t v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBTimer *)v2 setLabel:v4];

    [v1 duration];
    -[_INPBTimer setDuration:](v2, "setDuration:");
    [v1 remainingTime];
    -[_INPBTimer setRemainingTime:](v2, "setRemainingTime:");
    double v5 = [v1 identifier];
    [(_INPBTimer *)v2 setIdentifier:v5];

    unint64_t v6 = [v1 state];
    if (v6 >= 3) {
      uint64_t v7 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v7 = v6;
    }
    [(_INPBTimer *)v2 setState:v7];
    unint64_t v8 = [v1 type];

    if (v8 >= 3) {
      uint64_t v9 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v9 = v8;
    }
    [(_INPBTimer *)v2 setType:v9];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromTimers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformFromTimer(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTimers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformToTimer(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTimerFromTimer(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t INSearchForTimersIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551E7A8 + a1);
  }
}

BOOL INTimerStateHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INTimerStateGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INTimerStateGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INTimerStateGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"timerPaused";
  }
  if (a1 == 1) {
    return @"timerRunning";
  }
  else {
    return v1;
  }
}

uint64_t INTimerStateWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"timerRunning"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"timerPaused"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INTimerStateGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"timer paused";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"timer running";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

INHomeContent *INIntentSlotValueTransformFromHomeContent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INHomeContent alloc];
    id v3 = [v1 filter];
    uint64_t v4 = INIntentSlotValueTransformFromHomeFilter(v3);
    uint64_t v5 = [v1 actions];

    uint64_t v6 = INIntentSlotValueTransformFromHomeActions(v5);
    uint64_t v7 = [(INHomeContent *)v2 initWithFilter:v4 actions:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

_INPBHomeContent *INIntentSlotValueTransformToHomeContent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBHomeContent);
    id v3 = [v1 filter];
    uint64_t v4 = INIntentSlotValueTransformToHomeFilter(v3);
    [(_INPBHomeContent *)v2 setFilter:v4];

    uint64_t v5 = [v1 actions];

    uint64_t v6 = INIntentSlotValueTransformToHomeActions(v5);
    [(_INPBHomeContent *)v2 setActions:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeContents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformFromHomeContent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeContents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformToHomeContent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeContentFromHomeContent(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t INHomeServiceTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0x28) & (0xFFFFFFFFFEuLL >> a1);
}

uint64_t INHomeServiceTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0x27) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INHomeServiceTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 0x27) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INHomeServiceTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x26) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E7D8 + a1 - 1);
  }
}

uint64_t INHomeServiceTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"lightbulb"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"switch"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"thermostat"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"garageDoorOpener"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"fan"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"outlet"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"doorLock"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"motorizedDoor"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"securitySystem"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"motorizedWindow"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"shades"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"speaker"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"heaterCooler"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"humidifierDehumidifier"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"slat"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"irrigationSystem"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"valve"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"faucet"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"television"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"ipCamera"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"custom"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"temperatureSensor"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"humiditySensor"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"airQualitySensor"])
  {
    uint64_t v2 = 24;
  }
  else if ([v1 isEqualToString:@"smokeSensor"])
  {
    uint64_t v2 = 25;
  }
  else if ([v1 isEqualToString:@"carbonMonoxideSensor"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"carbonDioxideSensor"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"contactSensor"])
  {
    uint64_t v2 = 28;
  }
  else if ([v1 isEqualToString:@"occupancySensor"])
  {
    uint64_t v2 = 29;
  }
  else if ([v1 isEqualToString:@"motionSensor"])
  {
    uint64_t v2 = 30;
  }
  else if ([v1 isEqualToString:@"lightSensor"])
  {
    uint64_t v2 = 31;
  }
  else if ([v1 isEqualToString:@"leakSensor"])
  {
    uint64_t v2 = 32;
  }
  else if ([v1 isEqualToString:@"batteryService"])
  {
    uint64_t v2 = 33;
  }
  else if ([v1 isEqualToString:@"doorBell"])
  {
    uint64_t v2 = 34;
  }
  else if ([v1 isEqualToString:@"airPurifier"])
  {
    uint64_t v2 = 35;
  }
  else if ([v1 isEqualToString:@"filterMaintenance"])
  {
    uint64_t v2 = 36;
  }
  else if ([v1 isEqualToString:@"AppleTV"])
  {
    uint64_t v2 = 37;
  }
  else if ([v1 isEqualToString:@"airportExpress"])
  {
    uint64_t v2 = 38;
  }
  else if ([v1 isEqualToString:@"cameraRecording"])
  {
    uint64_t v2 = 39;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeServiceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"lightbulb";
      goto LABEL_42;
    case 2:
      uint64_t v4 = @"switch";
      goto LABEL_42;
    case 3:
      uint64_t v4 = @"thermostat";
      goto LABEL_42;
    case 4:
      uint64_t v4 = @"garage door opener";
      goto LABEL_42;
    case 5:
      uint64_t v4 = @"fan";
      goto LABEL_42;
    case 6:
      uint64_t v4 = @"outlet";
      goto LABEL_42;
    case 7:
      uint64_t v4 = @"door lock";
      goto LABEL_42;
    case 8:
      uint64_t v4 = @"motorized door";
      goto LABEL_42;
    case 9:
      uint64_t v4 = @"security system";
      goto LABEL_42;
    case 10:
      uint64_t v4 = @"motorized window";
      goto LABEL_42;
    case 11:
      uint64_t v4 = @"shades";
      goto LABEL_42;
    case 12:
      uint64_t v4 = @"speaker";
      goto LABEL_42;
    case 13:
      uint64_t v4 = @"heater cooler";
      goto LABEL_42;
    case 14:
      uint64_t v4 = @"humidifier dehumidifier";
      goto LABEL_42;
    case 15:
      uint64_t v4 = @"slat";
      goto LABEL_42;
    case 16:
      uint64_t v4 = @"irrigation system";
      goto LABEL_42;
    case 17:
      uint64_t v4 = @"valve";
      goto LABEL_42;
    case 18:
      uint64_t v4 = @"faucet";
      goto LABEL_42;
    case 19:
      uint64_t v4 = @"television";
      goto LABEL_42;
    case 20:
      uint64_t v4 = @"ip camera";
      goto LABEL_42;
    case 21:
      uint64_t v4 = @"custom";
      goto LABEL_42;
    case 22:
      uint64_t v4 = @"temperature sensor";
      goto LABEL_42;
    case 23:
      uint64_t v4 = @"humidity sensor";
      goto LABEL_42;
    case 24:
      uint64_t v4 = @"air quality sensor";
      goto LABEL_42;
    case 25:
      uint64_t v4 = @"smoke sensor";
      goto LABEL_42;
    case 26:
      uint64_t v4 = @"carbon monoxide sensor";
      goto LABEL_42;
    case 27:
      uint64_t v4 = @"carbon dioxide sensor";
      goto LABEL_42;
    case 28:
      uint64_t v4 = @"contact sensor";
      goto LABEL_42;
    case 29:
      uint64_t v4 = @"occupancy sensor";
      goto LABEL_42;
    case 30:
      uint64_t v4 = @"motion sensor";
      goto LABEL_42;
    case 31:
      uint64_t v4 = @"light sensor";
      goto LABEL_42;
    case 32:
      uint64_t v4 = @"leak sensor";
      goto LABEL_42;
    case 33:
      uint64_t v4 = @"battery service";
      goto LABEL_42;
    case 34:
      uint64_t v4 = @"door bell";
      goto LABEL_42;
    case 35:
      uint64_t v4 = @"air purifier";
      goto LABEL_42;
    case 36:
      uint64_t v4 = @"filter maintenance";
      goto LABEL_42;
    case 37:
      uint64_t v4 = @"Apple TV";
      goto LABEL_42;
    case 38:
      uint64_t v4 = @"airport express";
      goto LABEL_42;
    case 39:
      uint64_t v4 = @"camera recording";
LABEL_42:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INHomeFilter *INIntentSlotValueTransformFromHomeFilter(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    char v32 = [INHomeFilter alloc];
    uint64_t v35 = [v1 entityIdentifiers];
    uint64_t v2 = [v1 entityName];
    id v3 = v2;
    if (v2)
    {
      int v33 = 0;
    }
    else
    {
      uint64_t v2 = [v1 service];
      if (v2)
      {
        int v33 = 0;
        char v23 = v2;
      }
      else
      {
        uint64_t v2 = [v1 scene];
        char v23 = 0;
        int v33 = 1;
      }
    }
    char v24 = v2;
    uint64_t v31 = INIntentSlotValueTransformFromDataString(v2);
    int v5 = [v1 hasEntityType];
    unsigned int v6 = [v1 entityType];
    uint64_t v7 = 0;
    if (v6 <= 6 && v5) {
      uint64_t v7 = qword_18CFC4460[v6];
    }
    uint64_t v30 = v7;
    int v8 = [v1 hasOuterDeviceType];
    unsigned int v9 = [v1 outerDeviceType];
    uint64_t v10 = 0;
    uint64_t v34 = v3;
    if (v9 <= 0x31 && v8) {
      uint64_t v10 = qword_18CFC4720[v9];
    }
    unint64_t v29 = [v1 outerDeviceName];
    uint64_t v28 = INIntentSlotValueTransformFromDataString(v29);
    int v11 = [v1 hasDeviceType];
    unsigned int v12 = [v1 deviceType];
    uint64_t v13 = 0;
    if (v12 <= 0x31 && v11) {
      uint64_t v13 = qword_18CFC4720[v12];
    }
    uint64_t v25 = v13;
    uint64_t v27 = [v1 home];
    long long v14 = INIntentSlotValueTransformFromDataString(v27);
    uint64_t v26 = [v1 zone];
    int v15 = INIntentSlotValueTransformFromDataString(v26);
    uint64_t v16 = [v1 group];
    uint64_t v17 = INIntentSlotValueTransformFromDataString(v16);
    char v18 = [v1 room];
    unsigned int v19 = INIntentSlotValueTransformFromDataString(v18);
    char v20 = [v1 isExcludeFilter];
    BYTE1(v22) = [v1 hasAllQuantifier];
    LOBYTE(v22) = v20;
    uint64_t v4 = -[INHomeFilter initWithEntityIdentifiers:entityName:entityType:outerDeviceType:outerDeviceName:deviceType:home:zone:group:room:isExcludeFilter:hasAllQuantifier:](v32, "initWithEntityIdentifiers:entityName:entityType:outerDeviceType:outerDeviceName:deviceType:home:zone:group:room:isExcludeFilter:hasAllQuantifier:", v35, v31, v30, v10, v28, v25, v14, v15, v17, v19, v22);

    if (v33) {
    if (!v34)
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id INIntentSlotValueTransformFromHomeFilters(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformFromHomeFilter(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeFilters(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = INIntentSlotValueTransformToHomeFilter(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeFilterFromHomeFilter(void *a1)
{
  id v1 = a1;

  return v1;
}

void *INMetadataPlistDictionary()
{
  return &unk_1EDBAF810;
}

void *INSupportedTypesPlist()
{
  return &unk_1EDBAC6C0;
}

uint64_t INHomeAttributeValueTypeHasBackingType(unint64_t a1)
{
  return (a1 < 7) & (0x7Eu >> a1);
}

uint64_t INHomeAttributeValueTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 6) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INHomeAttributeValueTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 6) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INHomeAttributeValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E910 + a1 - 1);
  }
}

uint64_t INHomeAttributeValueTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"BOOLean"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"double"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"string"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"integer"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"limit"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"range"])
  {
    uint64_t v2 = 6;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeAttributeValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"BOOLean";
      goto LABEL_9;
    case 2:
      uint64_t v4 = @"double";
      goto LABEL_9;
    case 3:
      uint64_t v4 = @"string";
      goto LABEL_9;
    case 4:
      uint64_t v4 = @"integer";
      goto LABEL_9;
    case 5:
      uint64_t v4 = @"limit";
      goto LABEL_9;
    case 6:
      uint64_t v4 = @"range";
LABEL_9:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL INHomeServiceSubtypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INHomeServiceSubtypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 4) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INHomeServiceSubtypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 3) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INHomeServiceSubtypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E940 + a1 - 1);
  }
}

uint64_t INHomeServiceSubtypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"genericValve"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"irrigationValve"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"showerheadValve"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"faucetValve"])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeServiceSubtypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"generic valve";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"irrigation valve";
      goto LABEL_7;
    case 3:
      uint64_t v4 = @"showerhead valve";
      goto LABEL_7;
    case 4:
      uint64_t v4 = @"faucet valve";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL INMessageLinkMediaTypeHasBackingType(unint64_t a1)
{
  return a1 < 0x12;
}

uint64_t INMessageLinkMediaTypeGetBackingType(unint64_t a1)
{
  if (a1 >= 0x12) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (10 * a1 + 10);
  }
}

uint64_t INMessageLinkMediaTypeGetFacadeType(int a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 <= 99)
  {
    uint64_t v2 = 7;
    uint64_t v13 = 8;
    if (a2 != 90) {
      uint64_t v13 = 0;
    }
    if (a2 != 80) {
      uint64_t v2 = v13;
    }
    uint64_t v14 = 5;
    uint64_t v15 = 6;
    if (a2 != 70) {
      uint64_t v15 = 0;
    }
    if (a2 != 60) {
      uint64_t v14 = v15;
    }
    if (a2 <= 79) {
      uint64_t v2 = v14;
    }
    uint64_t v7 = 3;
    uint64_t v16 = 4;
    if (a2 != 50) {
      uint64_t v16 = 0;
    }
    if (a2 != 40) {
      uint64_t v7 = v16;
    }
    uint64_t v17 = 1;
    uint64_t v18 = 2;
    if (a2 != 30) {
      uint64_t v18 = 0;
    }
    if (a2 != 20) {
      uint64_t v17 = v18;
    }
    if (a2 <= 39) {
      uint64_t v7 = v17;
    }
    BOOL v11 = a2 <= 59;
  }
  else
  {
    uint64_t v2 = 15;
    uint64_t v3 = 16;
    uint64_t v4 = 17;
    if (a2 != 180) {
      uint64_t v4 = 0;
    }
    if (a2 != 170) {
      uint64_t v3 = v4;
    }
    if (a2 != 160) {
      uint64_t v2 = v3;
    }
    uint64_t v5 = 13;
    uint64_t v6 = 14;
    if (a2 != 150) {
      uint64_t v6 = 0;
    }
    if (a2 != 140) {
      uint64_t v5 = v6;
    }
    if (a2 <= 159) {
      uint64_t v2 = v5;
    }
    uint64_t v7 = 11;
    uint64_t v8 = 12;
    if (a2 != 130) {
      uint64_t v8 = 0;
    }
    if (a2 != 120) {
      uint64_t v7 = v8;
    }
    uint64_t v9 = 9;
    uint64_t v10 = 10;
    if (a2 != 110) {
      uint64_t v10 = 0;
    }
    if (a2 != 100) {
      uint64_t v9 = v10;
    }
    if (a2 <= 119) {
      uint64_t v7 = v9;
    }
    BOOL v11 = a2 <= 139;
  }
  if (v11) {
    return v7;
  }
  else {
    return v2;
  }
}

__CFString *INMessageLinkMediaTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x10) {
    return @"unknown";
  }
  else {
    return *(&off_1E551E960 + a1 - 1);
  }
}

uint64_t INMessageLinkMediaTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"song"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"album"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"musicVideo"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"artist"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"playlist"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"radio"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"software"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"book"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"audioBook"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"podcast"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"podcastEpisode"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"TVEpisode"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"TVSeason"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"movie"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"TVShow"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"movieBundle"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"AppleTV"])
  {
    uint64_t v2 = 17;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMessageLinkMediaTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"song";
      goto LABEL_20;
    case 2:
      uint64_t v4 = @"album";
      goto LABEL_20;
    case 3:
      uint64_t v4 = @"music video";
      goto LABEL_20;
    case 4:
      uint64_t v4 = @"artist";
      goto LABEL_20;
    case 5:
      uint64_t v4 = @"playlist";
      goto LABEL_20;
    case 6:
      uint64_t v4 = @"radio";
      goto LABEL_20;
    case 7:
      uint64_t v4 = @"software";
      goto LABEL_20;
    case 8:
      uint64_t v4 = @"book";
      goto LABEL_20;
    case 9:
      uint64_t v4 = @"audio book";
      goto LABEL_20;
    case 10:
      uint64_t v4 = @"podcast";
      goto LABEL_20;
    case 11:
      uint64_t v4 = @"podcast episode";
      goto LABEL_20;
    case 12:
      uint64_t v4 = @"t v episode";
      goto LABEL_20;
    case 13:
      uint64_t v4 = @"t v season";
      goto LABEL_20;
    case 14:
      uint64_t v4 = @"movie";
      goto LABEL_20;
    case 15:
      uint64_t v4 = @"t v show";
      goto LABEL_20;
    case 16:
      uint64_t v4 = @"movie bundle";
      goto LABEL_20;
    case 17:
      uint64_t v4 = @"Apple TV";
LABEL_20:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INMessageLinkMetadata *INIntentSlotValueTransformFromMessageLinkMetadata(INMessageLinkMetadata *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v17 = [INMessageLinkMetadata alloc];
    char v59 = [(INMessageLinkMetadata *)v2 siteName];
    unint64_t v58 = [(INMessageLinkMetadata *)v2 summary];
    uint64_t v57 = [(INMessageLinkMetadata *)v2 title];
    uint64_t v56 = [(INMessageLinkMetadata *)v2 openGraphType];
    unsigned int v55 = [(INMessageLinkMetadata *)v2 itemType];
    unsigned int v19 = [(INMessageLinkMetadata *)v2 linkURL];
    uint64_t v50 = INIntentSlotValueTransformFromURLValue(v19);
    char v54 = [(INMessageLinkMetadata *)v2 originalURL];
    char v53 = [(INMessageLinkMetadata *)v2 imageURLs];
    unint64_t v52 = [(INMessageLinkMetadata *)v2 iconURLs];
    uint64_t v51 = [(INMessageLinkMetadata *)v2 creator];
    FacadeCFNumberType Type = INMessageLinkMediaTypeGetFacadeType([(INMessageLinkMetadata *)v2 hasLinkMediaType], [(INMessageLinkMetadata *)v2 linkMediaType]);
    uint64_t v47 = [(INMessageLinkMetadata *)v2 iTunesStoreIdentifier];
    char v49 = [(INMessageLinkMetadata *)v2 iTunesStoreFrontIdentifier];
    unint64_t v48 = [(INMessageLinkMetadata *)v2 songTitle];
    char v44 = [(INMessageLinkMetadata *)v2 songArtist];
    uint64_t v46 = [(INMessageLinkMetadata *)v2 songAlbum];
    unsigned int v45 = [(INMessageLinkMetadata *)v2 albumName];
    unint64_t v41 = [(INMessageLinkMetadata *)v2 albumArtist];
    uint64_t v43 = [(INMessageLinkMetadata *)v2 musicVideoName];
    char v42 = [(INMessageLinkMetadata *)v2 musicVideoArtist];
    uint64_t v39 = [(INMessageLinkMetadata *)v2 artistName];
    uint64_t v40 = [(INMessageLinkMetadata *)v2 artistGenre];
    unint64_t v37 = [(INMessageLinkMetadata *)v2 playlistName];
    char v38 = [(INMessageLinkMetadata *)v2 playlistCurator];
    uint64_t v35 = [(INMessageLinkMetadata *)v2 radioName];
    uint64_t v36 = [(INMessageLinkMetadata *)v2 radioCurator];
    int v33 = [(INMessageLinkMetadata *)v2 softwareName];
    uint64_t v34 = [(INMessageLinkMetadata *)v2 softwareGenre];
    char v32 = [(INMessageLinkMetadata *)v2 softwarePlatform];
    uint64_t v14 = [(INMessageLinkMetadata *)v2 bookName];
    uint64_t v31 = [(INMessageLinkMetadata *)v2 bookAuthor];
    uint64_t v13 = [(INMessageLinkMetadata *)v2 audioBookName];
    uint64_t v30 = [(INMessageLinkMetadata *)v2 audioBookAuthor];
    unint64_t v29 = [(INMessageLinkMetadata *)v2 audioBookNarrator];
    uint64_t v28 = [(INMessageLinkMetadata *)v2 podcastName];
    uint64_t v27 = [(INMessageLinkMetadata *)v2 podcastArtist];
    uint64_t v26 = [(INMessageLinkMetadata *)v2 podcastEpisodeName];
    uint64_t v25 = [(INMessageLinkMetadata *)v2 podcastEpisodePodcastName];
    char v24 = [(INMessageLinkMetadata *)v2 podcastEpisodeArtist];
    uint64_t v15 = [(INMessageLinkMetadata *)v2 podcastEpisodeReleaseDate];
    char v23 = INIntentSlotValueTransformFromDateTime(v15);
    uint64_t v22 = [(INMessageLinkMetadata *)v2 tvEpisodeEpisodeName];
    char v20 = [(INMessageLinkMetadata *)v2 tvEpisodeSeasonName];
    uint64_t v21 = [(INMessageLinkMetadata *)v2 tvEpisodeGenre];
    long long v12 = [(INMessageLinkMetadata *)v2 tvSeasonName];
    id v3 = [(INMessageLinkMetadata *)v2 tvSeasonGenre];
    uint64_t v4 = [(INMessageLinkMetadata *)v2 movieName];
    uint64_t v5 = [(INMessageLinkMetadata *)v2 movieGenre];
    uint64_t v6 = [(INMessageLinkMetadata *)v2 tvShowName];
    uint64_t v7 = [(INMessageLinkMetadata *)v2 movieBundleName];
    uint64_t v8 = [(INMessageLinkMetadata *)v2 movieBundleGenre];
    uint64_t v9 = [(INMessageLinkMetadata *)v2 appleTvTitle];
    uint64_t v10 = [(INMessageLinkMetadata *)v2 appleTvSubtitle];

    uint64_t v18 = -[INMessageLinkMetadata initWithSiteName:summary:title:openGraphType:itemType:linkURL:originalURL:imageURLs:iconURLs:creator:linkMediaType:iTunesStoreIdentifier:iTunesStoreFrontIdentifier:songTitle:songArtist:songAlbum:albumName:albumArtist:musicVideoName:musicVideoArtist:artistName:artistGenre:playlistName:playlistCurator:radioName:radioCurator:softwareName:softwareGenre:softwarePlatform:bookName:bookAuthor:audioBookName:audioBookAuthor:audioBookNarrator:podcastName:podcastArtist:podcastEpisodeName:podcastEpisodePodcastName:podcastEpisodeArtist:podcastEpisodeReleaseDate:tvEpisodeEpisodeName:tvEpisodeSeasonName:tvEpisodeGenre:tvSeasonName:tvSeasonGenre:movieName:movieGenre:tvShowName:movieBundleName:movieBundleGenre:appleTvTitle:appleTvSubtitle:](v17, "initWithSiteName:summary:title:openGraphType:itemType:linkURL:originalURL:imageURLs:iconURLs:creator:linkMediaType:iTunesStoreIdentifier:iTunesStoreFrontIdentifier:songTitle:songArtist:songAlbum:albumName:albumArtist:musicVideoName:musicVideoArtist:artistName:artistGenre:playlistName:playlistCurator:radioName:radioCurator:softwareName:softwareGenre:softwarePlatform:bookName:bookAuthor:audioBookName:audioBookAuthor:audioBookNarrator:podcastName:podcastArtist:podcastEpisodeName:podcastEpisodePodcastName:podcastEpisodeArtist:podcastEpisodeReleaseDate:tvEpisodeEpisodeName:tvEpisodeSeasonName:tvEpisodeGenre:tvSeasonName:tvSeasonGenre:movieName:movieGenre:tvShowName:movieBundleName:movieBundleGenre:appleTvTitle:appleTvSubtitle:", v59, v58, v57, v56, v55, v50, v54, v53, v52, v51, FacadeType,
            v47,
            v49,
            v48,
            v44,
            v46,
            v45,
            v41,
            v43,
            v42,
            v39,
            v40,
            v37,
            v38,
            v35,
            v36,
            v33,
            v34,
            v32,
            v14,
            v31,
            v13,
            v30,
            v29,
            v28,
            v27,
            v26,
            v25,
            v24,
            v23,
            v22,
            v20,
            v21,
            v12,
            v3,
            v4,
            v5,
            v6,
            v7,
            v8,
            v9,
            v10);

    a1 = v18;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBMessageLinkMetadata *INIntentSlotValueTransformToMessageLinkMetadata(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBMessageLinkMetadata);
    id v3 = [v1 siteName];
    [(_INPBMessageLinkMetadata *)v2 setSiteName:v3];

    uint64_t v4 = [v1 summary];
    [(_INPBMessageLinkMetadata *)v2 setSummary:v4];

    uint64_t v5 = [v1 title];
    [(_INPBMessageLinkMetadata *)v2 setTitle:v5];

    uint64_t v6 = [v1 openGraphType];
    [(_INPBMessageLinkMetadata *)v2 setOpenGraphType:v6];

    uint64_t v7 = [v1 itemType];
    [(_INPBMessageLinkMetadata *)v2 setItemType:v7];

    uint64_t v8 = [v1 linkURL];
    uint64_t v9 = INIntentSlotValueTransformToURLValue(v8);
    [(_INPBMessageLinkMetadata *)v2 setLinkURL:v9];

    uint64_t v10 = [v1 originalURL];
    [(_INPBMessageLinkMetadata *)v2 setOriginalURL:v10];

    BOOL v11 = [v1 imageURLs];
    [(_INPBMessageLinkMetadata *)v2 setImageURLs:v11];

    long long v12 = [v1 iconURLs];
    [(_INPBMessageLinkMetadata *)v2 setIconURLs:v12];

    uint64_t v13 = [v1 creator];
    [(_INPBMessageLinkMetadata *)v2 setCreator:v13];

    unint64_t v14 = [v1 linkMediaType];
    if (v14 >= 0x12) {
      uint64_t v15 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v15 = (10 * v14 + 10);
    }
    [(_INPBMessageLinkMetadata *)v2 setLinkMediaType:v15];
    uint64_t v16 = [v1 iTunesStoreIdentifier];
    [(_INPBMessageLinkMetadata *)v2 setITunesStoreIdentifier:v16];

    uint64_t v17 = [v1 iTunesStoreFrontIdentifier];
    [(_INPBMessageLinkMetadata *)v2 setITunesStoreFrontIdentifier:v17];

    uint64_t v18 = [v1 songTitle];
    [(_INPBMessageLinkMetadata *)v2 setSongTitle:v18];

    unsigned int v19 = [v1 songArtist];
    [(_INPBMessageLinkMetadata *)v2 setSongArtist:v19];

    char v20 = [v1 songAlbum];
    [(_INPBMessageLinkMetadata *)v2 setSongAlbum:v20];

    uint64_t v21 = [v1 albumName];
    [(_INPBMessageLinkMetadata *)v2 setAlbumName:v21];

    uint64_t v22 = [v1 albumArtist];
    [(_INPBMessageLinkMetadata *)v2 setAlbumArtist:v22];

    char v23 = [v1 musicVideoName];
    [(_INPBMessageLinkMetadata *)v2 setMusicVideoName:v23];

    char v24 = [v1 musicVideoArtist];
    [(_INPBMessageLinkMetadata *)v2 setMusicVideoArtist:v24];

    uint64_t v25 = [v1 artistName];
    [(_INPBMessageLinkMetadata *)v2 setArtistName:v25];

    uint64_t v26 = [v1 artistGenre];
    [(_INPBMessageLinkMetadata *)v2 setArtistGenre:v26];

    uint64_t v27 = [v1 playlistName];
    [(_INPBMessageLinkMetadata *)v2 setPlaylistName:v27];

    uint64_t v28 = [v1 playlistCurator];
    [(_INPBMessageLinkMetadata *)v2 setPlaylistCurator:v28];

    unint64_t v29 = [v1 radioName];
    [(_INPBMessageLinkMetadata *)v2 setRadioName:v29];

    uint64_t v30 = [v1 radioCurator];
    [(_INPBMessageLinkMetadata *)v2 setRadioCurator:v30];

    uint64_t v31 = [v1 softwareName];
    [(_INPBMessageLinkMetadata *)v2 setSoftwareName:v31];

    char v32 = [v1 softwareGenre];
    [(_INPBMessageLinkMetadata *)v2 setSoftwareGenre:v32];

    int v33 = [v1 softwarePlatform];
    [(_INPBMessageLinkMetadata *)v2 setSoftwarePlatform:v33];

    uint64_t v34 = [v1 bookName];
    [(_INPBMessageLinkMetadata *)v2 setBookName:v34];

    uint64_t v35 = [v1 bookAuthor];
    [(_INPBMessageLinkMetadata *)v2 setBookAuthor:v35];

    uint64_t v36 = [v1 audioBookName];
    [(_INPBMessageLinkMetadata *)v2 setAudioBookName:v36];

    unint64_t v37 = [v1 audioBookAuthor];
    [(_INPBMessageLinkMetadata *)v2 setAudioBookAuthor:v37];

    char v38 = [v1 audioBookNarrator];
    [(_INPBMessageLinkMetadata *)v2 setAudioBookNarrator:v38];

    uint64_t v39 = [v1 podcastName];
    [(_INPBMessageLinkMetadata *)v2 setPodcastName:v39];

    uint64_t v40 = [v1 podcastArtist];
    [(_INPBMessageLinkMetadata *)v2 setPodcastArtist:v40];

    unint64_t v41 = [v1 podcastEpisodeName];
    [(_INPBMessageLinkMetadata *)v2 setPodcastEpisodeName:v41];

    char v42 = [v1 podcastEpisodePodcastName];
    [(_INPBMessageLinkMetadata *)v2 setPodcastEpisodePodcastName:v42];

    uint64_t v43 = [v1 podcastEpisodeArtist];
    [(_INPBMessageLinkMetadata *)v2 setPodcastEpisodeArtist:v43];

    char v44 = [v1 podcastEpisodeReleaseDate];
    unsigned int v45 = INIntentSlotValueTransformToDateTime(v44);
    [(_INPBMessageLinkMetadata *)v2 setPodcastEpisodeReleaseDate:v45];

    uint64_t v46 = [v1 tvEpisodeEpisodeName];
    [(_INPBMessageLinkMetadata *)v2 setTvEpisodeEpisodeName:v46];

    uint64_t v47 = [v1 tvEpisodeSeasonName];
    [(_INPBMessageLinkMetadata *)v2 setTvEpisodeSeasonName:v47];

    unint64_t v48 = [v1 tvEpisodeGenre];
    [(_INPBMessageLinkMetadata *)v2 setTvEpisodeGenre:v48];

    char v49 = [v1 tvSeasonName];
    [(_INPBMessageLinkMetadata *)v2 setTvSeasonName:v49];

    uint64_t v50 = [v1 tvSeasonGenre];
    [(_INPBMessageLinkMetadata *)v2 setTvSeasonGenre:v50];

    uint64_t v51 = [v1 movieName];
    [(_INPBMessageLinkMetadata *)v2 setMovieName:v51];

    unint64_t v52 = [v1 movieGenre];
    [(_INPBMessageLinkMetadata *)v2 setMovieGenre:v52];

    char v53 = [v1 tvShowName];
    [(_INPBMessageLinkMetadata *)v2 setTvShowName:v53];

    char v54 = [v1 movieBundleName];
    [(_INPBMessageLinkMetadata *)v2 setMovieBundleName:v54];

    unsigned int v55 = [v1 movieBundleGenre];
    [(_INPBMessageLinkMetadata *)v2 setMovieBundleGenre:v55];

    uint64_t v56 = [v1 appleTvTitle];
    [(_INPBMessageLinkMetadata *)v2 setAppleTvTitle:v56];

    uint64_t v57 = [v1 appleTvSubtitle];

    [(_INPBMessageLinkMetadata *)v2 setAppleTvSubtitle:v57];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMessageLinkMetadatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromMessageLinkMetadata(*(INMessageLinkMetadata **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMessageLinkMetadatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToMessageLinkMetadata(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMessageLinkMetadataFromMessageLinkMetadata(void *a1)
{
  id v1 = a1;

  return v1;
}

void sub_18CE48A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNPostalAddressClass_block_invoke_110968(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_110969)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke_110970;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551E9E8;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary_110969 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!ContactsLibraryCore_frameworkLibrary_110969)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CNPostalAddress");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getCNPostalAddressClass_softClass_110967 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke_110970()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_110969 = result;
  return result;
}

uint64_t INIntentCategoryHasBackingType(unint64_t a1)
{
  return (a1 < 0x15) & (0x1FFFFEu >> a1);
}

uint64_t INIntentCategoryGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13) {
    return 0x7FFFFFFFLL;
  }
  else {
    return dword_18CFC4F38[a1 - 1];
  }
}

uint64_t INIntentCategoryGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 0x14) {
    return qword_18CFC4F88[a2 - 1];
  }
  else {
    return 0;
  }
}

__CFString *INIntentCategoryGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13) {
    return @"unknown";
  }
  else {
    return off_1E551EA00[a1 - 1];
  }
}

id INIntentCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"Information";
      goto LABEL_23;
    case 2:
      uint64_t v4 = @"Play Audio";
      goto LABEL_23;
    case 3:
      uint64_t v4 = @"Play Video";
      goto LABEL_23;
    case 4:
      uint64_t v4 = @"Order";
      goto LABEL_23;
    case 5:
      uint64_t v4 = @"Navigation";
      goto LABEL_23;
    case 6:
      uint64_t v4 = @"Start";
      goto LABEL_23;
    case 7:
      uint64_t v4 = @"Share";
      goto LABEL_23;
    case 8:
      uint64_t v4 = @"Create";
      goto LABEL_23;
    case 9:
      uint64_t v4 = @"Search";
      goto LABEL_23;
    case 10:
      uint64_t v4 = @"Toggle";
      goto LABEL_23;
    case 11:
      uint64_t v4 = @"Download";
      goto LABEL_23;
    case 12:
      uint64_t v4 = @"Log";
      goto LABEL_23;
    case 13:
      uint64_t v4 = @"Check In";
      goto LABEL_23;
    case 14:
      uint64_t v4 = @"Workflow";
      goto LABEL_23;
    case 15:
      uint64_t v4 = @"Request";
      goto LABEL_23;
    case 16:
      uint64_t v4 = @"Set";
      goto LABEL_23;
    case 17:
      uint64_t v4 = @"Call Audio";
      goto LABEL_23;
    case 18:
      uint64_t v4 = @"Call Video";
      goto LABEL_23;
    case 19:
      uint64_t v4 = @"Play Sound";
      goto LABEL_23;
    case 20:
      uint64_t v4 = @"User Activity";
LABEL_23:
      long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      long long v5 = 0;
      break;
  }

  return v5;
}

uint64_t INExecutionContextHasBackingType(unint64_t a1)
{
  return (a1 < 0xB) & (0x7FEu >> a1);
}

uint64_t INExecutionContextGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xA) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INExecutionContextGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 9) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INExecutionContextGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return @"unknown";
  }
  else {
    return off_1E551EAA0[a1 - 1];
  }
}

uint64_t INExecutionContextWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"assistantDialog"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"assistantVoiceShortcut"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"coverSheetPrediction"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"spotlightPrediction"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"spotlightSearch"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"maps"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"workflow"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"watchFace"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"assistantVoiceShortcutViaCloudRelay"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"CarPlayHomeScreen"])
  {
    uint64_t v2 = 10;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INExecutionContextGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"assistant dialog";
      goto LABEL_13;
    case 2:
      uint64_t v4 = @"assistant voice shortcut";
      goto LABEL_13;
    case 3:
      uint64_t v4 = @"cover sheet prediction";
      goto LABEL_13;
    case 4:
      uint64_t v4 = @"spotlight prediction";
      goto LABEL_13;
    case 5:
      uint64_t v4 = @"spotlight search";
      goto LABEL_13;
    case 6:
      uint64_t v4 = @"maps";
      goto LABEL_13;
    case 7:
      uint64_t v4 = @"workflow";
      goto LABEL_13;
    case 8:
      uint64_t v4 = @"watch face";
      goto LABEL_13;
    case 9:
      uint64_t v4 = @"assistant voice shortcut via cloud relay";
      goto LABEL_13;
    case 10:
      uint64_t v4 = @"car play home screen";
LABEL_13:
      long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      long long v5 = 0;
      break;
  }

  return v5;
}

INArchivedObject *INIntentSlotValueTransformFromArchivedObject(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INArchivedObject alloc];
    id v3 = [v1 typeName];
    uint64_t v4 = [v1 messageData];

    long long v5 = [(INArchivedObject *)v2 initWithTypeName:v3 messageData:v4];
  }
  else
  {
    long long v5 = 0;
  }

  return v5;
}

_INPBArchivedObject *INIntentSlotValueTransformToArchivedObject(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBArchivedObject);
    id v3 = [v1 typeName];
    [(_INPBArchivedObject *)v2 setTypeName:v3];

    uint64_t v4 = [v1 messageData];

    [(_INPBArchivedObject *)v2 setMessageData:v4];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromArchivedObjects(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromArchivedObject(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToArchivedObjects(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToArchivedObject(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedArchivedObjectFromArchivedObject(void *a1)
{
  id v1 = a1;

  return v1;
}

id _INEnumerableValueProcessingBlock(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___INEnumerableValueProcessingBlock_block_invoke;
  v7[3] = &unk_1E551EAF8;
  id v8 = v3;
  uint64_t v9 = a1;
  id v4 = v3;
  uint64_t v5 = (void *)MEMORY[0x192F984C0](v7);

  return v5;
}

uint64_t INDeviceIdiomHasBackingType(unint64_t a1)
{
  return (a1 < 8) & (0xFEu >> a1);
}

uint64_t INDeviceIdiomGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 7) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INDeviceIdiomGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 6) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INDeviceIdiomGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return @"unknown";
  }
  else {
    return off_1E551EB18[a1 - 1];
  }
}

uint64_t INDeviceIdiomWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"phone"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"pad"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"watch"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"homePod"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"CarPlay"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"AppleTV"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"Mac"])
  {
    uint64_t v2 = 7;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INDeviceIdiomGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"phone";
      goto LABEL_10;
    case 2:
      id v4 = @"pad";
      goto LABEL_10;
    case 3:
      id v4 = @"watch";
      goto LABEL_10;
    case 4:
      id v4 = @"home pod";
      goto LABEL_10;
    case 5:
      id v4 = @"CarPlay";
      goto LABEL_10;
    case 6:
      id v4 = @"Apple TV";
      goto LABEL_10;
    case 7:
      id v4 = @"Mac";
LABEL_10:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INVoiceCommandDeviceInformation *INIntentSlotValueTransformFromVoiceCommandDeviceInformation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INVoiceCommandDeviceInformation alloc];
    int v3 = [v1 hasDeviceIdiom];
    uint64_t v4 = [v1 deviceIdiom] - 1;
    if (v4 <= 6) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v3) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = NSNumber;
    uint64_t v8 = [v1 isHomePodInUltimateMode];

    uint64_t v9 = [v7 numberWithBool:v8];
    uint64_t v10 = [(INVoiceCommandDeviceInformation *)v2 initWithDeviceIdiom:v6 isHomePodInUltimateMode:v9];
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

_INPBVoiceCommandDeviceInformation *INIntentSlotValueTransformToVoiceCommandDeviceInformation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBVoiceCommandDeviceInformation);
    unint64_t v3 = [v1 deviceIdiom] - 1;
    if (v3 < 7) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    [(_INPBVoiceCommandDeviceInformation *)v2 setDeviceIdiom:v4];
    uint64_t v5 = [v1 isHomePodInUltimateMode];

    -[_INPBVoiceCommandDeviceInformation setIsHomePodInUltimateMode:](v2, "setIsHomePodInUltimateMode:", [v5 BOOLValue]);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromVoiceCommandDeviceInformations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromVoiceCommandDeviceInformation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToVoiceCommandDeviceInformations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToVoiceCommandDeviceInformation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedVoiceCommandDeviceInformationFromVoiceCommandDeviceInformation(void *a1)
{
  id v1 = a1;

  return v1;
}

void sub_18CE4B8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCHSWidgetDescriptorsPredicateClass_block_invoke(uint64_t a1)
{
  ChronoServicesLibrary();
  Class result = objc_getClass("CHSWidgetDescriptorsPredicate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHSWidgetDescriptorsPredicateClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getCHSControlDescriptorsPredicateClass_block_invoke(v3);
  }
  return result;
}

Class __getCHSControlDescriptorsPredicateClass_block_invoke(uint64_t a1)
{
  ChronoServicesLibrary();
  Class result = objc_getClass("CHSControlDescriptorsPredicate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHSControlDescriptorsPredicateClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getCHSWidgetExtensionProviderOptionsClass_block_invoke(v3);
  }
  return result;
}

Class __getCHSWidgetExtensionProviderOptionsClass_block_invoke(uint64_t a1)
{
  ChronoServicesLibrary();
  Class result = objc_getClass("CHSWidgetExtensionProviderOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHSWidgetExtensionProviderOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getCHSWidgetExtensionProviderClass_block_invoke(v3);
  }
  return result;
}

void __getCHSWidgetExtensionProviderClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHSWidgetExtensionProvider");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHSWidgetExtensionProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    ChronoServicesLibrary();
  }
}

void ChronoServicesLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!ChronoServicesLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __ChronoServicesLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E551EC00;
    uint64_t v3 = 0;
    ChronoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    uint64_t v0 = (void *)v1[0];
    if (ChronoServicesLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      uint64_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __ChronoServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ChronoServicesLibraryCore_frameworkLibrary = result;
  return result;
}

BOOL INToggleStateHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INToggleStateGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INToggleStateGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INToggleStateGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"off";
  }
  if (a1 == 1) {
    return @"on";
  }
  else {
    return v1;
  }
}

uint64_t INToggleStateWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"on"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"off"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *INToggleStateGetDisplayName(uint64_t a1)
{
  id v1 = @"Turn Off";
  if (a1 != 2) {
    id v1 = 0;
  }
  if (a1 == 1) {
    return @"Turn On";
  }
  else {
    return v1;
  }
}

id INToggleStateGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"Off";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"On";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL INPersonalPlaceTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INPersonalPlaceTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 3;
  }
  else {
    return v1;
  }
}

uint64_t INPersonalPlaceTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 3);
  if (a2 == 2) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INPersonalPlaceTypeGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"work";
  }
  if (a1 == 1) {
    return @"home";
  }
  else {
    return v1;
  }
}

uint64_t INPersonalPlaceTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"home"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"work"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INPersonalPlaceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"work";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"home";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

__CFString *INRunWorkflowIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 9) {
    return 0;
  }
  else {
    return off_1E551EC20[a1];
  }
}

INMediaSearch *INIntentSlotValueTransformFromMediaSearch(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v28 = [INMediaSearch alloc];
    int v2 = [v1 hasMediaType];
    uint64_t v3 = [v1 mediaType] - 1;
    if (v3 <= 0x13) {
      uint64_t v4 = v3 + 1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v2) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = [v1 hasSortOrder];
    uint64_t v7 = [v1 sortOrder] - 1;
    if (v7 <= 7) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v6) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v30 = [v1 mediaName];
    uint64_t v10 = INIntentSlotValueTransformFromString(v30);
    unint64_t v29 = [v1 artistName];
    char v24 = INIntentSlotValueTransformFromString(v29);
    uint64_t v27 = [v1 albumName];
    char v23 = INIntentSlotValueTransformFromString(v27);
    uint64_t v26 = [v1 genreNames];
    uint64_t v22 = INIntentSlotValueTransformFromStrings(v26);
    uint64_t v25 = [v1 moodNames];
    long long v11 = INIntentSlotValueTransformFromStrings(v25);
    long long v12 = [v1 releaseDate];
    long long v13 = INIntentSlotValueTransformFromDateTimeRange(v12);
    int v14 = [v1 hasReference];
    int v15 = [v1 reference];
    uint64_t v16 = v15 == 1;
    if (v15 == 2) {
      uint64_t v16 = 2;
    }
    if (v14) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = [v1 mediaIdentifier];

    unsigned int v19 = INIntentSlotValueTransformFromString(v18);
    char v20 = [(INMediaSearch *)v28 initWithMediaType:v5 sortOrder:v9 mediaName:v10 artistName:v24 albumName:v23 genreNames:v22 moodNames:v11 releaseDate:v13 reference:v17 mediaIdentifier:v19];
  }
  else
  {
    char v20 = 0;
  }

  return v20;
}

_INPBMediaSearch *INIntentSlotValueTransformToMediaSearch(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    int v2 = objc_alloc_init(_INPBMediaSearch);
    unint64_t v3 = [v1 mediaType];
    if (v3 >= 0x15) {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v4 = v3;
    }
    [(_INPBMediaSearch *)v2 setMediaType:v4];
    unint64_t v5 = [v1 sortOrder];
    if (v5 >= 9) {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v6 = v5;
    }
    [(_INPBMediaSearch *)v2 setSortOrder:v6];
    uint64_t v7 = [v1 mediaName];
    uint64_t v8 = INIntentSlotValueTransformToString(v7);
    [(_INPBMediaSearch *)v2 setMediaName:v8];

    uint64_t v9 = [v1 artistName];
    uint64_t v10 = INIntentSlotValueTransformToString(v9);
    [(_INPBMediaSearch *)v2 setArtistName:v10];

    long long v11 = [v1 albumName];
    long long v12 = INIntentSlotValueTransformToString(v11);
    [(_INPBMediaSearch *)v2 setAlbumName:v12];

    long long v13 = [v1 genreNames];
    int v14 = INIntentSlotValueTransformToStrings(v13);
    [(_INPBMediaSearch *)v2 setGenreNames:v14];

    int v15 = [v1 moodNames];
    uint64_t v16 = INIntentSlotValueTransformToStrings(v15);
    [(_INPBMediaSearch *)v2 setMoodNames:v16];

    uint64_t v17 = [v1 releaseDate];
    uint64_t v18 = INIntentSlotValueTransformToDateTimeRange(v17);
    [(_INPBMediaSearch *)v2 setReleaseDate:v18];

    unint64_t v19 = [v1 reference];
    if (v19 >= 3) {
      uint64_t v20 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    [(_INPBMediaSearch *)v2 setReference:v20];
    uint64_t v21 = [v1 mediaIdentifier];

    uint64_t v22 = INIntentSlotValueTransformToString(v21);
    [(_INPBMediaSearch *)v2 setMediaIdentifier:v22];
  }
  else
  {
    int v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMediaSearchs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    int v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromMediaSearch(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaSearchs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    int v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToMediaSearch(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMediaSearchFromMediaSearch(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBMediaSearchReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_69;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_72;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_69:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_72:
        objc_msgSend(a1, "setMediaType:", v23, v40, v41);
        goto LABEL_66;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v30 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v26;
        }
LABEL_77:
        objc_msgSend(a1, "setSortOrder:", v30, v40, v41);
        goto LABEL_66;
      case 3u:
        uint64_t v31 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v31, a2) & 1) == 0) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaName:", v31, 0, 0);
        goto LABEL_65;
      case 4u:
        uint64_t v31 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v31, a2) & 1) == 0) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setArtistName:", v31, 0, 0);
        goto LABEL_65;
      case 5u:
        uint64_t v31 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v31, a2) & 1) == 0) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlbumName:", v31, 0, 0);
        goto LABEL_65;
      case 7u:
        uint64_t v31 = objc_alloc_init(_INPBString);
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v31, a2)) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        if (v31) {
          objc_msgSend(a1, "addGenreNames:", v31, 0, 0);
        }
        goto LABEL_65;
      case 0xCu:
        uint64_t v31 = objc_alloc_init(_INPBString);
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v31, a2)) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        if (v31) {
          objc_msgSend(a1, "addMoodNames:", v31, 0, 0);
        }
        goto LABEL_65;
      case 0xEu:
        uint64_t v31 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v31, a2) & 1) == 0) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReleaseDate:", v31, 0, 0);
        goto LABEL_65;
      case 0xFu:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v35;
        }
LABEL_82:
        objc_msgSend(a1, "setReference:", v39, v40, v41);
        goto LABEL_66;
      case 0x10u:
        uint64_t v31 = objc_alloc_init(_INPBString);
        if PBReaderPlaceMark() && (_INPBStringReadFrom(v31, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMediaIdentifier:", v31, 0, 0);
LABEL_65:

LABEL_66:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_84:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_66;
    }
  }
}

__CFString *INUpdateMediaAffinityIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551ED78[a1];
  }
}

BOOL _INPBUpdateMediaAffinityIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_18CE52798(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getWFOnScreenContentExtractorClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary_112905)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __VoiceShortcutClientLibraryCore_block_invoke_112906;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551EDD0;
    uint64_t v6 = 0;
    VoiceShortcutClientLibraryCore_frameworkLibrary_112905 = _sl_dlopen();
    int v2 = (void *)v4[0];
    if (!VoiceShortcutClientLibraryCore_frameworkLibrary_112905)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("WFOnScreenContentExtractor");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    int v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getWFOnScreenContentExtractorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __VoiceShortcutClientLibraryCore_block_invoke_112906()
{
  uint64_t result = _sl_dlopen();
  VoiceShortcutClientLibraryCore_frameworkLibrary_112905 = result;
  return result;
}

uint64_t _INPBUpdateMediaAffinityIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_41;
      case 2u:
        char v17 = objc_alloc_init(_INPBMediaItemValue);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addMediaItems:", v17, 0, 0);
        }
        goto LABEL_41;
      case 3u:
        char v17 = objc_alloc_init(_INPBMediaSearch);
        if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaSearch:", v17, 0, 0);
        goto LABEL_41;
      case 4u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (2)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_46;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v20;
        }
LABEL_46:
        objc_msgSend(a1, "setAffinityType:", v24, v26, v27);
        goto LABEL_47;
      case 6u:
        char v17 = objc_alloc_init(_INPBPrivateUpdateMediaAffinityIntentData);
        if (PBReaderPlaceMark() && _INPBPrivateUpdateMediaAffinityIntentDataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivateUpdateMediaAffinityIntentData:", v17, 0, 0);
LABEL_41:

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_49:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

BOOL _INPBAddMediaIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        char v17 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2)) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addMediaItems:", v17, 0, 0);
        }
        goto LABEL_37;
      case 3u:
        char v17 = objc_alloc_init(_INPBMediaSearch);
        if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaSearch:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        char v17 = objc_alloc_init(_INPBMediaDestination);
        if (!PBReaderPlaceMark() || (_INPBMediaDestinationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaDestination:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        char v17 = objc_alloc_init(_INPBPrivateAddMediaIntentData);
        if (PBReaderPlaceMark() && _INPBPrivateAddMediaIntentDataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivateAddMediaIntentData:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_38;
    }
  }
}

BOOL INMediaAffinityTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INMediaAffinityTypeGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INMediaAffinityTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INMediaAffinityTypeGetName(uint64_t a1)
{
  uint64_t v1 = @"unknown";
  if (a1 == 2) {
    uint64_t v1 = @"dislike";
  }
  if (a1 == 1) {
    return @"like";
  }
  else {
    return v1;
  }
}

uint64_t INMediaAffinityTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"like"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"dislike"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMediaAffinityTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"Dislike";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"Like";
LABEL_5:
    long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  long long v5 = 0;
LABEL_7:

  return v5;
}

BOOL INMediaReferenceHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INMediaReferenceGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INMediaReferenceGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INMediaReferenceGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"my";
  }
  if (a1 == 1) {
    return @"currentlyPlaying";
  }
  else {
    return v1;
  }
}

uint64_t INMediaReferenceWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"currentlyPlaying"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"my"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMediaReferenceGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"my";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"currently playing";
LABEL_5:
    long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  long long v5 = 0;
LABEL_7:

  return v5;
}

__CFString *INAddMediaIntentResponseCodeGetName(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = @"INAddMediaIntentResponseCodeUnspecified";
      break;
    case 1:
      uint64_t result = @"INAddMediaIntentResponseCodeReady";
      break;
    case 2:
      uint64_t result = @"INAddMediaIntentResponseCodeInProgress";
      break;
    case 3:
      uint64_t result = @"INAddMediaIntentResponseCodeSuccess";
      break;
    case 4:
      uint64_t result = @"INAddMediaIntentResponseCodeHandleInApp";
      break;
    case 5:
      uint64_t result = @"INAddMediaIntentResponseCodeFailure";
      break;
    case 6:
      uint64_t result = @"INAddMediaIntentResponseCodeFailureRequiringAppLaunch";
      break;
    default:
      if (a1 == 1000) {
        uint64_t result = @"INAddMediaIntentResponseCodeFailureAlreadyInLibrary";
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

BOOL _INPBAddMediaIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBSearchForMediaIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if (v17 == 3)
        {
          char v18 = objc_alloc_init(_INPBMediaSearch);
          if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v18, a2) & 1) == 0)
          {
LABEL_40:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setMediaSearch:", v18, 0, 0);
          goto LABEL_36;
        }
        if (v17 == 100)
        {
          char v18 = objc_alloc_init(_INPBPrivateSearchForMediaIntentData);
          if (!PBReaderPlaceMark() || (_INPBPrivateSearchForMediaIntentDataReadFrom(v18, a2) & 1) == 0) {
            goto LABEL_40;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivateSearchForMediaIntentData:", v18, 0, 0);
          goto LABEL_36;
        }
      }
      else
      {
        if (v17 == 1)
        {
          char v18 = objc_alloc_init(_INPBIntentMetadata);
          if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0) {
            goto LABEL_40;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
          goto LABEL_36;
        }
        if (v17 == 2)
        {
          char v18 = objc_alloc_init(_INPBMediaItemValue);
          if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v18, a2)) {
            goto LABEL_40;
          }
          PBReaderRecallMark();
          if (v18) {
            objc_msgSend(a1, "addMediaItems:", v18, 0, 0);
          }
LABEL_36:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INSearchForMediaIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return off_1E551EE00[a1];
  }
}

uint64_t _INPBSearchForMediaIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addMediaItems:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INMediaSortOrderHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INMediaSortOrderGetBackingType(unint64_t result)
{
  if (result >= 9) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INMediaSortOrderGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 7) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INMediaSortOrderGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7) {
    return @"unknown";
  }
  else {
    return off_1E551EE38[a1 - 1];
  }
}

id INMediaSortOrderGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"newest";
      goto LABEL_11;
    case 2:
      uint64_t v4 = @"oldest";
      goto LABEL_11;
    case 3:
      uint64_t v4 = @"best";
      goto LABEL_11;
    case 4:
      uint64_t v4 = @"worst";
      goto LABEL_11;
    case 5:
      uint64_t v4 = @"popular";
      goto LABEL_11;
    case 6:
      uint64_t v4 = @"unpopular";
      goto LABEL_11;
    case 7:
      uint64_t v4 = @"trending";
      goto LABEL_11;
    case 8:
      uint64_t v4 = @"recommended";
LABEL_11:
      long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      long long v5 = 0;
      break;
  }

  return v5;
}

BOOL INMediaDestinationTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INMediaDestinationTypeGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INMediaDestinationTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INMediaDestinationTypeGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"playlist";
  }
  if (a1 == 1) {
    return @"library";
  }
  else {
    return v1;
  }
}

uint64_t INMediaDestinationTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"library"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"playlist"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMediaDestinationTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"playlist";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"library";
LABEL_5:
    long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  long long v5 = 0;
LABEL_7:

  return v5;
}

BOOL INPlaybackQueueLocationHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INPlaybackQueueLocationGetBackingType(unint64_t result)
{
  if (result >= 4) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INPlaybackQueueLocationGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INPlaybackQueueLocationGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E551EE78[a1 - 1];
  }
}

uint64_t INPlaybackQueueLocationWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"now"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"next"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"later"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INPlaybackQueueLocationGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"later";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"next";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"now";
LABEL_7:
      long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  long long v5 = 0;
LABEL_9:

  return v5;
}

BOOL INEventParticipantStatusHasBackingType(unint64_t a1)
{
  return a1 < 8;
}

uint64_t INEventParticipantStatusGetBackingType(unint64_t a1)
{
  if (a1 < 8) {
    return (a1 + 1);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INEventParticipantStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 2);
  if (v2 <= 6) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INEventParticipantStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return @"unknown";
  }
  else {
    return off_1E551EE90[a1 - 1];
  }
}

uint64_t INEventParticipantStatusWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"pending"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"accepted"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"declined"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"tentative"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"delegated"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"completed"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"inProcess"])
  {
    uint64_t v2 = 7;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INEventParticipantStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"pending";
      goto LABEL_10;
    case 2:
      uint64_t v4 = @"accepted";
      goto LABEL_10;
    case 3:
      uint64_t v4 = @"declined";
      goto LABEL_10;
    case 4:
      uint64_t v4 = @"tentative";
      goto LABEL_10;
    case 5:
      uint64_t v4 = @"delegated";
      goto LABEL_10;
    case 6:
      uint64_t v4 = @"completed";
      goto LABEL_10;
    case 7:
      uint64_t v4 = @"in process";
LABEL_10:
      long long v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      long long v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBMediaDestinationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaylistName:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setMediaDestinationType:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INVoiceCommandStepInfo *INIntentSlotValueTransformFromVoiceCommandStepInfo(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INVoiceCommandStepInfo alloc];
    id v3 = [v1 applicationIdentifier];
    int v4 = [v1 hasCategory];
    int v5 = [v1 category];
    if (v4 && (v5 - 1) <= 0x14) {
      uint64_t v6 = qword_18CFC4F88[v5 - 1];
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = [v1 name];

    char v8 = [(INVoiceCommandStepInfo *)v2 initWithApplicationIdentifier:v3 category:v6 name:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

_INPBVoiceCommandStepInfo *INIntentSlotValueTransformToVoiceCommandStepInfo(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBVoiceCommandStepInfo);
    id v3 = [v1 applicationIdentifier];
    [(_INPBVoiceCommandStepInfo *)v2 setApplicationIdentifier:v3];

    unint64_t v4 = [v1 category] - 1;
    if (v4 > 0x13) {
      uint64_t v5 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v5 = dword_18CFC4F38[v4];
    }
    [(_INPBVoiceCommandStepInfo *)v2 setCategory:v5];
    uint64_t v6 = [v1 name];

    [(_INPBVoiceCommandStepInfo *)v2 setName:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromVoiceCommandStepInfos(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromVoiceCommandStepInfo(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToVoiceCommandStepInfos(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToVoiceCommandStepInfo(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedVoiceCommandStepInfoFromVoiceCommandStepInfo(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBVoiceCommandStepInfoReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v25 = PBReaderReadString();
        [a1 setApplicationIdentifier:v25];
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_37;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_37:
            [a1 setCategory:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        unsigned int v25 = PBReaderReadString();
        [a1 setName:v25];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INMessageEffectTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0xE) & (0x3FFEu >> a1);
}

uint64_t INMessageEffectTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xD) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INMessageEffectTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 0xC) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INMessageEffectTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xC) {
    return @"unknown";
  }
  else {
    return off_1E551EF88[a1 - 1];
  }
}

uint64_t INMessageEffectTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"happyBirthday"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"confetti"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"lasers"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"fireworks"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"shootingStar"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"invisibleInk"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"gentle"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"loud"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"impact"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"sparkles"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"heart"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"echo"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"spotlight"])
  {
    uint64_t v2 = 13;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMessageEffectTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"happy birthday";
      goto LABEL_16;
    case 2:
      uint64_t v4 = @"confetti";
      goto LABEL_16;
    case 3:
      uint64_t v4 = @"lasers";
      goto LABEL_16;
    case 4:
      uint64_t v4 = @"fireworks";
      goto LABEL_16;
    case 5:
      uint64_t v4 = @"shooting star";
      goto LABEL_16;
    case 6:
      uint64_t v4 = @"invisible ink";
      goto LABEL_16;
    case 7:
      uint64_t v4 = @"gentle";
      goto LABEL_16;
    case 8:
      uint64_t v4 = @"loud";
      goto LABEL_16;
    case 9:
      uint64_t v4 = @"impact";
      goto LABEL_16;
    case 10:
      uint64_t v4 = @"sparkles";
      goto LABEL_16;
    case 11:
      uint64_t v4 = @"heart";
      goto LABEL_16;
    case 12:
      uint64_t v4 = @"echo";
      goto LABEL_16;
    case 13:
      uint64_t v4 = @"spotlight";
LABEL_16:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBHomeEntityResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBHomeEntity);
        if (!PBReaderPlaceMark() || (_INPBHomeEntityReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntity:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBHomeUserTaskResponse);
    if (!PBReaderPlaceMark() || !_INPBHomeUserTaskResponseReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addTaskResponses:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBHomeUserTaskResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v24 = objc_alloc_init(_INPBHomeUserTask);
        if (!PBReaderPlaceMark() || (_INPBHomeUserTaskReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserTask:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setTaskOutcome:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INHomeUserTask *INIntentSlotValueTransformFromHomeUserTask(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INHomeUserTask alloc];
    int v3 = [v1 hasTaskType];
    uint64_t v4 = [v1 taskType] - 1;
    if (v4 <= 5) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v3) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    unsigned __int8 v7 = [v1 hasAttribute];
    unsigned int v8 = [v1 attribute];
    if (((v8 < 0x42) & v7) != 0) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [v1 value];

    uint64_t v11 = INIntentSlotValueTransformFromHomeAttributeValue(v10);
    unint64_t v12 = [(INHomeUserTask *)v2 initWithTaskType:v6 attribute:v9 value:v11];
  }
  else
  {
    unint64_t v12 = 0;
  }

  return v12;
}

_INPBHomeUserTask *INIntentSlotValueTransformToHomeUserTask(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBHomeUserTask);
    unint64_t v3 = [v1 taskType] - 1;
    if (v3 < 6) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    [(_INPBHomeUserTask *)v2 setTaskType:v4];
    unint64_t v5 = [v1 attribute] - 1;
    if (v5 >= 0x42) {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v6 = v5;
    }
    [(_INPBHomeUserTask *)v2 setAttribute:v6];
    unsigned __int8 v7 = [v1 value];

    unsigned int v8 = INIntentSlotValueTransformToHomeAttributeValue(v7);
    [(_INPBHomeUserTask *)v2 setValue:v8];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeUserTasks(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = INIntentSlotValueTransformFromHomeUserTask(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeUserTasks(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = INIntentSlotValueTransformToHomeUserTask(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeUserTaskFromHomeUserTask(void *a1)
{
  id v1 = a1;

  return v1;
}

INHomeEntityResponse *INIntentSlotValueTransformFromHomeEntityResponse(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INHomeEntityResponse alloc];
    id v3 = [v1 entity];
    uint64_t v4 = INIntentSlotValueTransformFromHomeEntity(v3);
    uint64_t v5 = [v1 taskResponses];

    uint64_t v6 = INIntentSlotValueTransformFromHomeUserTaskResponses(v5);
    unsigned __int8 v7 = [(INHomeEntityResponse *)v2 initWithEntity:v4 taskResponses:v6];
  }
  else
  {
    unsigned __int8 v7 = 0;
  }

  return v7;
}

_INPBHomeEntityResponse *INIntentSlotValueTransformToHomeEntityResponse(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBHomeEntityResponse);
    id v3 = [v1 entity];
    uint64_t v4 = INIntentSlotValueTransformToHomeEntity(v3);
    [(_INPBHomeEntityResponse *)v2 setEntity:v4];

    uint64_t v5 = [v1 taskResponses];

    uint64_t v6 = INIntentSlotValueTransformToHomeUserTaskResponses(v5);
    [(_INPBHomeEntityResponse *)v2 setTaskResponses:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeEntityResponses(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = INIntentSlotValueTransformFromHomeEntityResponse(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeEntityResponses(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = INIntentSlotValueTransformToHomeEntityResponse(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeEntityResponseFromHomeEntityResponse(void *a1)
{
  id v1 = a1;

  return v1;
}

INHomeUserTaskResponse *INIntentSlotValueTransformFromHomeUserTaskResponse(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INHomeUserTaskResponse alloc];
    id v3 = [v1 userTask];
    uint64_t v4 = INIntentSlotValueTransformFromHomeUserTask(v3);
    int v5 = [v1 hasTaskOutcome];
    int v6 = [v1 taskOutcome];

    uint64_t v7 = (v6 - 1);
    if (v7 <= 0x16) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v5) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [(INHomeUserTaskResponse *)v2 initWithUserTask:v4 taskOutcome:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBHomeUserTaskResponse *INIntentSlotValueTransformToHomeUserTaskResponse(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBHomeUserTaskResponse);
    id v3 = [v1 userTask];
    uint64_t v4 = INIntentSlotValueTransformToHomeUserTask(v3);
    [(_INPBHomeUserTaskResponse *)v2 setUserTask:v4];

    uint64_t v5 = [v1 taskOutcome];
    if ((unint64_t)(v5 - 1) < 0x17) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    [(_INPBHomeUserTaskResponse *)v2 setTaskOutcome:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeUserTaskResponses(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromHomeUserTaskResponse(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeUserTaskResponses(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToHomeUserTaskResponse(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeUserTaskResponseFromHomeUserTaskResponse(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t INHomeTaskOutcomeHasBackingType(unint64_t a1)
{
  return (a1 < 0x18) & (0xFFFFFEu >> a1);
}

uint64_t INHomeTaskOutcomeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0x17) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INHomeTaskOutcomeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 0x16) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INHomeTaskOutcomeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x16) {
    return @"unknown";
  }
  else {
    return off_1E551F2E8[a1 - 1];
  }
}

uint64_t INHomeTaskOutcomeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"success"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"unsupportedAttribute"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"readOnly"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"alreadyAtMaxValue"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"alreadyAtMinValue"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"unreachable"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"failure"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"setToMaxValue"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"setToMinValue"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"largerThanMaxValue"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"smallerThanMinValue"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"noRemoteAccess"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"noMatchingAttribute"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"bluetoothIsOff"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"wifiIsOff"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"bridgedAccessoryUnreachable"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"inProgress"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"sceneNotSetUp"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"securingFailure"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"bluetoothWakeup"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"unlockRequired"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"securedAccessDenied"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"calibrationInProgress"])
  {
    uint64_t v2 = 23;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeTaskOutcomeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"success";
      goto LABEL_26;
    case 2:
      uint64_t v4 = @"unsupported attribute";
      goto LABEL_26;
    case 3:
      uint64_t v4 = @"read only";
      goto LABEL_26;
    case 4:
      uint64_t v4 = @"already at max value";
      goto LABEL_26;
    case 5:
      uint64_t v4 = @"already at min value";
      goto LABEL_26;
    case 6:
      uint64_t v4 = @"unreachable";
      goto LABEL_26;
    case 7:
      uint64_t v4 = @"failure";
      goto LABEL_26;
    case 8:
      uint64_t v4 = @"set to max value";
      goto LABEL_26;
    case 9:
      uint64_t v4 = @"set to min value";
      goto LABEL_26;
    case 10:
      uint64_t v4 = @"larger than max value";
      goto LABEL_26;
    case 11:
      uint64_t v4 = @"smaller than min value";
      goto LABEL_26;
    case 12:
      uint64_t v4 = @"no remote access";
      goto LABEL_26;
    case 13:
      uint64_t v4 = @"no matching attribute";
      goto LABEL_26;
    case 14:
      uint64_t v4 = @"bluetooth is off";
      goto LABEL_26;
    case 15:
      uint64_t v4 = @"wifi is off";
      goto LABEL_26;
    case 16:
      uint64_t v4 = @"bridged accessory unreachable";
      goto LABEL_26;
    case 17:
      uint64_t v4 = @"in progress";
      goto LABEL_26;
    case 18:
      uint64_t v4 = @"scene not set up";
      goto LABEL_26;
    case 19:
      uint64_t v4 = @"securing failure";
      goto LABEL_26;
    case 20:
      uint64_t v4 = @"bluetooth wakeup";
      goto LABEL_26;
    case 21:
      uint64_t v4 = @"unlock required";
      goto LABEL_26;
    case 22:
      uint64_t v4 = @"secured access denied";
      goto LABEL_26;
    case 23:
      uint64_t v4 = @"calibration in progress";
LABEL_26:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t INHomeUserTaskTypeHasBackingType(unint64_t a1)
{
  return (a1 < 7) & (0x7Eu >> a1);
}

uint64_t INHomeUserTaskTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 6) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INHomeUserTaskTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 5) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INHomeUserTaskTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return @"unknown";
  }
  else {
    return off_1E551F3A0[a1 - 1];
  }
}

uint64_t INHomeUserTaskTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"set"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"increase"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"decrease"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"get"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"getTarget"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"toggle"])
  {
    uint64_t v2 = 6;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeUserTaskTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"set";
      goto LABEL_9;
    case 2:
      uint64_t v4 = @"increase";
      goto LABEL_9;
    case 3:
      uint64_t v4 = @"decrease";
      goto LABEL_9;
    case 4:
      uint64_t v4 = @"get";
      goto LABEL_9;
    case 5:
      uint64_t v4 = @"get target";
      goto LABEL_9;
    case 6:
      uint64_t v4 = @"toggle";
LABEL_9:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL INHomeAttributeLimitHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INHomeAttributeLimitGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INHomeAttributeLimitGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INHomeAttributeLimitGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"max";
  }
  if (a1 == 1) {
    return @"min";
  }
  else {
    return v1;
  }
}

uint64_t INHomeAttributeLimitWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"min"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"max"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeAttributeLimitGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"max";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"min";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

uint64_t INHomeAttributeUnitHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INHomeAttributeUnitGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INHomeAttributeUnitGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 4) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INHomeAttributeUnitGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E551F3D0[a1 - 1];
  }
}

uint64_t INHomeAttributeUnitWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"percent"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"fahrenheit"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"celsius"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"lux"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"seconds"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeAttributeUnitGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"percent";
      goto LABEL_8;
    case 2:
      uint64_t v4 = @"fahrenheit";
      goto LABEL_8;
    case 3:
      uint64_t v4 = @"celsius";
      goto LABEL_8;
    case 4:
      uint64_t v4 = @"lux";
      goto LABEL_8;
    case 5:
      uint64_t v4 = @"seconds";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBAnswerCallIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_36;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_39;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_39:
            [a1 setAudioRoute:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        PBReaderReadString();
        unsigned int v25 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setCallIdentifier:v25];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INIdentifyIncomingCallerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return off_1E551F438[a1];
  }
}

uint64_t _INPBIdentifyIncomingCallerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v24 = objc_alloc_init(_INPBCallRecordValue);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBCallRecordValueReadFrom(v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v24) {
          objc_msgSend(a1, "addCallRecords:", v24, 0, 0);
        }
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_35;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_38;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_38:
        objc_msgSend(a1, "setStatusCode:", v23, v26, v27);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBIdentifyIncomingCallerIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INAnswerCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return off_1E551F470[a1];
  }
}

uint64_t _INPBAnswerCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unsigned int v25 = objc_alloc_init(_INPBConnectedCall);
        if (!PBReaderPlaceMark() || (_INPBConnectedCallReadFrom(v25, a2) & 1) == 0)
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAnsweredCall:", v25, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_39;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_42;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_42:
            objc_msgSend(a1, "setStatusCode:", v24, v27, v28);
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        unsigned int v25 = objc_alloc_init(_INPBCallRecordValue);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (!PBReaderPlaceMark() || !_INPBCallRecordValueReadFrom(v25, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        if (v25) {
          objc_msgSend(a1, "addCallRecords:", v25, 0, 0);
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBCreateEventIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v25 = objc_alloc_init(_INPBCalendarEvent);
        if (!PBReaderPlaceMark() || (_INPBCalendarEventReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedEvent:", v25, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 3)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_37;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_40;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_40:
            [a1 setConfirmationReason:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        PBReaderReadString();
        unsigned int v25 = (_INPBCalendarEvent *)objc_claimAutoreleasedReturnValue();
        if (v25) {
          [a1 addConflictingEventIdentifiers:v25];
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBStartCallIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_130;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_92;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_99:
        objc_msgSend(a1, "setAudioRoute:", v25, v67, v68);
        goto LABEL_93;
      case 3u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_104:
        objc_msgSend(a1, "setDestinationType:", v32, v67, v68);
        goto LABEL_93;
      case 4u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v35;
        }
LABEL_109:
        objc_msgSend(a1, "setPreferredCallProvider:", v39, v67, v68);
        goto LABEL_93;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBContact);
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2)) {
          goto LABEL_130;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addContacts:", v17, 0, 0);
        }
        goto LABEL_92;
      case 6u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v14 = v41++ >= 9;
              if (v14)
              {
                uint64_t v46 = 0;
                goto LABEL_114;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = v42;
        }
LABEL_114:
        objc_msgSend(a1, "setRecordTypeForRedialing:", v46, v67, v68);
        goto LABEL_93;
      case 7u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              BOOL v14 = v48++ >= 9;
              if (v14)
              {
                uint64_t v53 = 0;
                goto LABEL_119;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = v49;
        }
LABEL_119:
        objc_msgSend(a1, "setTtyType:", v53, v67, v68);
        goto LABEL_93;
      case 8u:
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        while (2)
        {
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v14 = v55++ >= 9;
              if (v14)
              {
                uint64_t v60 = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = v56;
        }
LABEL_124:
        objc_msgSend(a1, "setCallCapability:", v60, v67, v68);
        goto LABEL_93;
      case 9u:
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v63 = 0;
        while (2)
        {
          uint64_t v64 = *v3;
          unint64_t v65 = *(void *)(a2 + v64);
          if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(a2 + *v7) + v65);
            *(void *)(a2 + v64) = v65 + 1;
            v63 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              BOOL v14 = v62++ >= 9;
              if (v14)
              {
                uint64_t v63 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v63 = 0;
        }
LABEL_128:
        [a1 setIsGroupCall:v63 != 0];
        goto LABEL_93;
      case 0xAu:
        unint64_t v17 = objc_alloc_init(_INPBCallGroup);
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        if (!PBReaderPlaceMark() || !_INPBCallGroupReadFrom(v17, a2)) {
          goto LABEL_130;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addCallGroups:", v17, 0, 0);
        }
        goto LABEL_92;
      case 0xBu:
        PBReaderReadString();
        unint64_t v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setNotificationThreadIdentifier:v17];
        goto LABEL_92;
      case 0xCu:
        PBReaderReadString();
        unint64_t v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setFaceTimeLink:v17];
        goto LABEL_92;
      case 0xDu:
        unint64_t v17 = objc_alloc_init(_INPBCallRecordFilter);
        if (!PBReaderPlaceMark() || (_INPBCallRecordFilterReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_130;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallRecordFilter:", v17, 0, 0);
        goto LABEL_92;
      case 0xEu:
        unint64_t v17 = objc_alloc_init(_INPBCallRecordValue);
        if (!PBReaderPlaceMark() || (_INPBCallRecordValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_130;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallRecordToCallBack:", v17, 0, 0);
        goto LABEL_92;
      case 0xFu:
        unint64_t v17 = objc_alloc_init(_INPBStartCallRequestMetadata);
        if PBReaderPlaceMark() && (_INPBStartCallRequestMetadataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallRequestMetadata:", v17, 0, 0);
LABEL_92:

LABEL_93:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_130:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_93;
    }
  }
}

__CFString *INHangUpCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return off_1E551F580[a1];
  }
}

uint64_t _INPBHangUpCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_32;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        uint64_t v23 = *(unsigned char *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        [a1 setHungUpCallType:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18CE6FD88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id __INExtensionIdentifiersForApplicationRecord_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 extensionPointRecord];
  uint64_t v4 = [v3 identifier];
  int v5 = [v4 isEqualToString:@"com.apple.intents-service"];

  if (v5)
  {
    uint64_t v6 = [v2 bundleIdentifier];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_18CE70110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL _INPBHangUpCallIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        char v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setCallIdentifier:v17];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBUpdateEventIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_66;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_40;
      case 2u:
        PBReaderReadString();
        char v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setTargetEventIdentifier:v17];
        goto LABEL_40;
      case 3u:
        PBReaderReadString();
        char v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setSetTitle:v17];
        goto LABEL_40;
      case 4u:
        char v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_66;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSetDateTimeRange:", v17, 0, 0);
        goto LABEL_40;
      case 5u:
        char v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_66;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSetLocation:", v17, 0, 0);
        goto LABEL_40;
      case 6u:
        char v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2)) {
          goto LABEL_66;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addAddParticipants:", v17, 0, 0);
        }
        goto LABEL_40;
      case 7u:
        char v17 = objc_alloc_init(_INPBContact);
        if (PBReaderPlaceMark() && _INPBContactReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addRemoveParticipants:", v17, 0, 0);
          }
LABEL_40:

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_66:

        return 0;
      case 8u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_60:
        [a1 setUpdateAllOccurrences:v21 != 0];
        goto LABEL_41;
      case 9u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v27 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_64:
        [a1 setRemoveLocation:v27 != 0];
        goto LABEL_41;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

INIntentExecutionResult *INIntentSlotValueTransformFromIntentExecutionResult(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 hasEncodedIntent])
    {
      id v3 = [v2 encodedIntent];
      uint64_t v4 = [v3 dataUsingEncoding:4];
      int v5 = INIntentCreate(0, v4);
    }
    else
    {
      int v5 = 0;
    }
    if ([v2 hasEncodedIntentResponse])
    {
      uint64_t v7 = [v2 encodedIntentResponse];
      char v8 = [v7 dataUsingEncoding:4];
      unsigned int v9 = INIntentResponseCreate(0, v8);
    }
    else
    {
      unsigned int v9 = 0;
    }
    uint64_t v6 = [[INIntentExecutionResult alloc] initWithIntent:v5 response:v9];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

_INPBIntentExecutionResult *INIntentSlotValueTransformToIntentExecutionResult(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_alloc_init(_INPBIntentExecutionResult);
    id v3 = [v1 intent];

    if (v3)
    {
      uint64_t v4 = [v1 intent];
      int v5 = [v4 _JSONDictionaryRepresentation];
      uint64_t v6 = objc_msgSend(v5, "if_JSONStringRepresentation");
      [(_INPBIntentExecutionResult *)v2 setEncodedIntent:v6];
    }
    uint64_t v7 = [v1 intentResponse];

    if (v7)
    {
      char v8 = [v1 intentResponse];
      unsigned int v9 = [v8 _JSONDictionaryRepresentation];
      unint64_t v10 = objc_msgSend(v9, "if_JSONStringRepresentation");
      [(_INPBIntentExecutionResult *)v2 setEncodedIntentResponse:v10];
    }
    [(_INPBIntentExecutionResult *)v2 setEncodingFormat:1];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromIntentExecutionResults(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromIntentExecutionResult(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToIntentExecutionResults(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToIntentExecutionResult(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

__CFString *INStartCallIntentResponseCodeGetName(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = @"INStartCallIntentResponseCodeUnspecified";
      break;
    case 1:
      uint64_t result = @"INStartCallIntentResponseCodeReady";
      break;
    case 2:
      uint64_t result = @"INStartCallIntentResponseCodeContinueInApp";
      break;
    case 3:
      uint64_t result = @"INStartCallIntentResponseCodeUserConfirmationRequired";
      break;
    case 4:
      uint64_t result = @"INStartCallIntentResponseCodeFailure";
      break;
    case 5:
      uint64_t result = @"INStartCallIntentResponseCodeFailureRequiringAppLaunch";
      break;
    case 6:
      uint64_t result = @"INStartCallIntentResponseCodeFailureCallingServiceNotAvailable";
      break;
    case 7:
      uint64_t result = @"INStartCallIntentResponseCodeFailureContactNotSupportedByApp";
      break;
    case 8:
      uint64_t result = @"INStartCallIntentResponseCodeFailureAirplaneModeEnabled";
      break;
    case 9:
      uint64_t result = @"INStartCallIntentResponseCodeFailureUnableToHandOff";
      break;
    case 10:
      uint64_t result = @"INStartCallIntentResponseCodeFailureAppConfigurationRequired";
      break;
    case 11:
      uint64_t result = @"INStartCallIntentResponseCodeFailureCallInProgress";
      break;
    case 12:
      uint64_t result = @"INStartCallIntentResponseCodeFailureCallRinging";
      break;
    case 13:
      uint64_t result = @"INStartCallIntentResponseCodeFailureRequiringInAppAuthentication";
      break;
    default:
      id v2 = @"INStartCallIntentResponseCodeFailureDownTimeRestrictionEnabled";
      if (a1 != 1001) {
        id v2 = 0;
      }
      if (a1 == 1000) {
        uint64_t result = @"INStartCallIntentResponseCodeFailureScreenTimeRestrictionEnabled";
      }
      else {
        uint64_t result = v2;
      }
      break;
  }
  return result;
}

uint64_t _INPBStartCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_44;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_46;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_46:
        [a1 setShouldDoEmergencyCountdown:v19 != 0];
        goto LABEL_52;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v30 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v26;
        }
LABEL_51:
        objc_msgSend(a1, "setConfirmationReason:", v30, v32, v33);
        goto LABEL_52;
      case 3u:
        char v31 = objc_alloc_init(_INPBConnectedCall);
        if (!PBReaderPlaceMark() || (_INPBConnectedCallReadFrom(v31, a2) & 1) == 0) {
          goto LABEL_54;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedCall:", v31, 0, 0);
        goto LABEL_42;
      case 4u:
        char v31 = objc_alloc_init(_INPBContactValue);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        if (PBReaderPlaceMark() && _INPBContactValueReadFrom(v31, a2))
        {
          PBReaderRecallMark();
          if (v31) {
            objc_msgSend(a1, "addRestrictedContacts:", v31, 0, 0);
          }
LABEL_42:

LABEL_52:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_54:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_52;
    }
  }
}

id INIntentSlotValueTransformFromSendMessageAttachment(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_27;
  }
  id v3 = [v1 speechDataURL];

  if (v3)
  {
    uint64_t v4 = [v2 speechDataURL];
    uint64_t v5 = INIntentSlotValueTransformFromURLValue(v4);
    uint64_t v6 = +[INSendMessageAttachment attachmentWithSpeechDataURL:v5];
LABEL_6:
    char v8 = (void *)v6;

LABEL_7:
    goto LABEL_28;
  }
  uint64_t v7 = [v2 sharedLink];

  if (v7)
  {
    uint64_t v4 = [v2 sharedLink];
    uint64_t v5 = INIntentSlotValueTransformFromURLValue(v4);
    uint64_t v6 = +[INSendMessageAttachment attachmentWithSharedLink:v5];
    goto LABEL_6;
  }
  if ([v2 currentLocation])
  {
    char v8 = +[INSendMessageAttachment attachmentWithCurrentLocation];
    goto LABEL_28;
  }
  unsigned int v9 = [v2 audioMessageFileURL];

  if (v9)
  {
    unint64_t v10 = [v2 audioMessageFileURL];
    uint64_t v11 = INIntentSlotValueTransformFromURLValue(v10);
    unint64_t v12 = [v2 typeIdentifier];
    uint64_t v4 = +[INFile fileWithFileURL:v11 filename:0 typeIdentifier:v12];
    goto LABEL_14;
  }
  char v13 = [v2 audioMessageFile];

  if (v13)
  {
    unint64_t v10 = [v2 audioMessageFile];
    uint64_t v11 = [v10 data];
    unint64_t v12 = [v2 audioMessageFile];
    BOOL v14 = [v12 fileName];
    int v15 = [v2 typeIdentifier];
    uint64_t v4 = +[INFile fileWithData:v11 filename:v14 typeIdentifier:v15];

LABEL_14:
    if (v4)
    {
      uint64_t v16 = +[INSendMessageAttachment attachmentWithAudioMessageFile:v4];
LABEL_16:
      char v8 = (void *)v16;
      goto LABEL_7;
    }
    goto LABEL_20;
  }
  char v17 = [v2 phAssetId];

  if (v17)
  {
    uint64_t v4 = [v2 phAssetId];
    if (v4)
    {
      uint64_t v16 = +[INSendMessageAttachment attachmentWithPHAssetId:v4];
      goto LABEL_16;
    }
LABEL_20:
    char v8 = 0;
    goto LABEL_7;
  }
  unsigned int v18 = [v2 fileURL];

  if (v18)
  {
    uint64_t v19 = [v2 fileURL];
    uint64_t v20 = INIntentSlotValueTransformFromURLValue(v19);
    unint64_t v21 = [v2 typeIdentifier];
    char v22 = +[INFile fileWithFileURL:v20 filename:0 typeIdentifier:v21];
  }
  else
  {
    char v8 = [v2 file];

    if (!v8) {
      goto LABEL_28;
    }
    uint64_t v19 = [v2 file];
    uint64_t v20 = [v19 data];
    unint64_t v21 = [v2 file];
    unint64_t v23 = [v21 fileName];
    char v24 = [v2 typeIdentifier];
    char v22 = +[INFile fileWithData:v20 filename:v23 typeIdentifier:v24];
  }
  if (v22)
  {
    char v8 = +[INSendMessageAttachment attachmentWithFile:v22];
  }
  else
  {
LABEL_27:
    char v8 = 0;
  }
LABEL_28:

  return v8;
}

_INPBSendMessageAttachment *INIntentSlotValueTransformToSendMessageAttachment(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = 0;
    goto LABEL_9;
  }
  id v2 = objc_alloc_init(_INPBSendMessageAttachment);
  id v3 = [v1 speechDataURL];

  if (v3)
  {
    uint64_t v4 = [v1 speechDataURL];
    INIntentSlotValueTransformToURLValue(v4);
    uint64_t v5 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
    [(_INPBSendMessageAttachment *)v2 setSpeechDataURL:v5];
LABEL_7:

LABEL_8:
    goto LABEL_9;
  }
  uint64_t v6 = [v1 sharedLink];

  if (v6)
  {
    uint64_t v4 = [v1 sharedLink];
    INIntentSlotValueTransformToURLValue(v4);
    uint64_t v5 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
    [(_INPBSendMessageAttachment *)v2 setSharedLink:v5];
    goto LABEL_7;
  }
  if (![v1 currentLocation])
  {
    char v8 = [v1 audioMessageFile];

    if (v8)
    {
      uint64_t v4 = [v1 audioMessageFile];
      if ([v4 _isFileURLBased])
      {
        unsigned int v9 = [v4 fileURL];
        unint64_t v10 = INIntentSlotValueTransformToURLValue(v9);
        [(_INPBSendMessageAttachment *)v2 setAudioMessageFileURL:v10];
LABEL_17:

        uint64_t v5 = [v4 typeIdentifier];
        [(_INPBSendMessageAttachment *)v2 setTypeIdentifier:v5];
        goto LABEL_7;
      }
      uint64_t v5 = objc_alloc_init(_INPBFileDataAttachment);
      unint64_t v12 = [v4 data];
      [(_INPBFileDataAttachment *)v5 setData:v12];

      char v13 = [v4 filename];
      [(_INPBFileDataAttachment *)v5 setFileName:v13];

      [(_INPBSendMessageAttachment *)v2 setAudioMessageFile:v5];
    }
    else
    {
      uint64_t v11 = [v1 phAssetId];

      if (v11)
      {
        uint64_t v4 = [v1 phAssetId];
        [(_INPBSendMessageAttachment *)v2 setPhAssetId:v4];
        goto LABEL_8;
      }
      uint64_t v4 = [v1 file];
      if ([v4 _isFileURLBased])
      {
        unsigned int v9 = [v4 fileURL];
        unint64_t v10 = INIntentSlotValueTransformToURLValue(v9);
        [(_INPBSendMessageAttachment *)v2 setFileURL:v10];
        goto LABEL_17;
      }
      uint64_t v5 = objc_alloc_init(_INPBFileDataAttachment);
      int v15 = [v4 data];
      [(_INPBFileDataAttachment *)v5 setData:v15];

      uint64_t v16 = [v4 filename];
      [(_INPBFileDataAttachment *)v5 setFileName:v16];

      [(_INPBSendMessageAttachment *)v2 setFile:v5];
    }
    BOOL v14 = [v4 typeIdentifier];
    [(_INPBSendMessageAttachment *)v2 setTypeIdentifier:v14];

    goto LABEL_7;
  }
  [(_INPBSendMessageAttachment *)v2 setCurrentLocation:1];
LABEL_9:

  return v2;
}

id INIntentSlotValueTransformFromSendMessageAttachments(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromSendMessageAttachment(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSendMessageAttachments(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToSendMessageAttachment(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

INSeat *INIntentSlotValueTransformFromSeat(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = [INSeat alloc];
    id v3 = [v1 seatSection];
    uint64_t v4 = [v1 seatRow];
    uint64_t v5 = [v1 seatNumber];
    uint64_t v6 = [v1 seatingType];

    uint64_t v7 = [(INSeat *)v2 initWithSeatSection:v3 seatRow:v4 seatNumber:v5 seatingType:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

_INPBSeat *INIntentSlotValueTransformToSeat(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc_init(_INPBSeat);
    id v3 = [v1 seatSection];
    [(_INPBSeat *)v2 setSeatSection:v3];

    uint64_t v4 = [v1 seatRow];
    [(_INPBSeat *)v2 setSeatRow:v4];

    uint64_t v5 = [v1 seatNumber];
    [(_INPBSeat *)v2 setSeatNumber:v5];

    uint64_t v6 = [v1 seatingType];

    [(_INPBSeat *)v2 setSeatingType:v6];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromSeats(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromSeat(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSeats(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToSeat(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSeatFromSeat(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBSeatReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = PBReaderReadString();
          [a1 setSeatSection:v17];
          goto LABEL_25;
        case 2u:
          char v17 = PBReaderReadString();
          [a1 setSeatRow:v17];
          goto LABEL_25;
        case 3u:
          char v17 = PBReaderReadString();
          [a1 setSeatNumber:v17];
          goto LABEL_25;
        case 4u:
          char v17 = PBReaderReadString();
          [a1 setSeatingType:v17];
LABEL_25:

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INAirport *INIntentSlotValueTransformFromAirport(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = [INAirport alloc];
    id v3 = [v1 name];
    uint64_t v4 = [v1 iataCode];
    uint64_t v5 = [v1 icaoCode];

    uint64_t v6 = [(INAirport *)v2 initWithName:v3 iataCode:v4 icaoCode:v5];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

_INPBAirport *INIntentSlotValueTransformToAirport(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc_init(_INPBAirport);
    id v3 = [v1 name];
    [(_INPBAirport *)v2 setName:v3];

    uint64_t v4 = [v1 iataCode];
    [(_INPBAirport *)v2 setIataCode:v4];

    uint64_t v5 = [v1 icaoCode];

    [(_INPBAirport *)v2 setIcaoCode:v5];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAirports(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAirport(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAirports(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAirport(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAirportFromAirport(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBAirportReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 == 3)
      {
        unsigned int v18 = PBReaderReadString();
        [a1 setIcaoCode:v18];
        goto LABEL_24;
      }
      if (v17 == 2)
      {
        unsigned int v18 = PBReaderReadString();
        [a1 setIataCode:v18];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = PBReaderReadString();
    [a1 setName:v18];
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INReservationStatusHasBackingType(unint64_t a1)
{
  return a1 < 5;
}

uint64_t INReservationStatusGetBackingType(unint64_t a1)
{
  if (a1 < 5) {
    return (a1 + 1);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INReservationStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 2);
  if (v2 <= 3) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INReservationStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return *(&off_1E551F680 + a1 - 1);
  }
}

uint64_t INReservationStatusWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"canceled"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"pending"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"hold"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"confirmed"])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INReservationStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"canceled";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"pending";
      goto LABEL_7;
    case 3:
      uint64_t v4 = @"hold";
      goto LABEL_7;
    case 4:
      uint64_t v4 = @"confirmed";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBFlightReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        unsigned int v18 = objc_alloc_init(_INPBFlight);
        if (!PBReaderPlaceMark() || !_INPBFlightReadFrom(v18, a2)) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlight:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INFlight *INIntentSlotValueTransformFromFlight(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    long long v14 = [INFlight alloc];
    int v15 = [v1 airline];
    char v13 = INIntentSlotValueTransformFromAirline(v15);
    uint64_t v2 = [v1 flightNumber];
    id v3 = [v1 boardingTime];
    uint64_t v4 = INIntentSlotValueTransformFromDateTimeRange(v3);
    uint64_t v5 = [v1 flightDuration];
    uint64_t v6 = INIntentSlotValueTransformFromDateTimeRange(v5);
    uint64_t v7 = [v1 departureAirportGate];
    char v8 = INIntentSlotValueTransformFromAirportGate(v7);
    unsigned int v9 = [v1 arrivalAirportGate];

    unint64_t v10 = INIntentSlotValueTransformFromAirportGate(v9);
    uint64_t v11 = [(INFlight *)v14 initWithAirline:v13 flightNumber:v2 boardingTime:v4 flightDuration:v6 departureAirportGate:v8 arrivalAirportGate:v10];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

_INPBFlight *INIntentSlotValueTransformToFlight(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBFlight);
    id v3 = [v1 airline];
    uint64_t v4 = INIntentSlotValueTransformToAirline(v3);
    [(_INPBFlight *)v2 setAirline:v4];

    uint64_t v5 = [v1 flightNumber];
    [(_INPBFlight *)v2 setFlightNumber:v5];

    uint64_t v6 = [v1 boardingTime];
    uint64_t v7 = INIntentSlotValueTransformToDateTimeRange(v6);
    [(_INPBFlight *)v2 setBoardingTime:v7];

    char v8 = [v1 flightDuration];
    unsigned int v9 = INIntentSlotValueTransformToDateTimeRange(v8);
    [(_INPBFlight *)v2 setFlightDuration:v9];

    unint64_t v10 = [v1 departureAirportGate];
    uint64_t v11 = INIntentSlotValueTransformToAirportGate(v10);
    [(_INPBFlight *)v2 setDepartureAirportGate:v11];

    unint64_t v12 = [v1 arrivalAirportGate];

    char v13 = INIntentSlotValueTransformToAirportGate(v12);
    [(_INPBFlight *)v2 setArrivalAirportGate:v13];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromFlights(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromFlight(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFlights(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToFlight(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedFlightFromFlight(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBFlightReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBAirline);
        if (!PBReaderPlaceMark() || !_INPBAirlineReadFrom(v17, a2)) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAirline:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        PBReaderReadString();
        unint64_t v17 = (_INPBAirline *)objc_claimAutoreleasedReturnValue();
        [a1 setFlightNumber:v17];
        goto LABEL_37;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBoardingTime:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlightDuration:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBAirportGate);
        if (!PBReaderPlaceMark() || !_INPBAirportGateReadFrom(v17, a2)) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureAirportGate:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBAirportGate);
        if (PBReaderPlaceMark() && _INPBAirportGateReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalAirportGate:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_38;
    }
  }
}

INAirline *INIntentSlotValueTransformFromAirline(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INAirline alloc];
    id v3 = [v1 name];
    uint64_t v4 = [v1 iataCode];
    uint64_t v5 = [v1 icaoCode];

    uint64_t v6 = [(INAirline *)v2 initWithName:v3 iataCode:v4 icaoCode:v5];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

_INPBAirline *INIntentSlotValueTransformToAirline(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAirline);
    id v3 = [v1 name];
    [(_INPBAirline *)v2 setName:v3];

    uint64_t v4 = [v1 iataCode];
    [(_INPBAirline *)v2 setIataCode:v4];

    uint64_t v5 = [v1 icaoCode];

    [(_INPBAirline *)v2 setIcaoCode:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAirlines(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAirline(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAirlines(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAirline(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAirlineFromAirline(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBAirlineReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 == 3)
      {
        unsigned int v18 = PBReaderReadString();
        [a1 setIcaoCode:v18];
        goto LABEL_24;
      }
      if (v17 == 2)
      {
        unsigned int v18 = PBReaderReadString();
        [a1 setIataCode:v18];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = PBReaderReadString();
    [a1 setName:v18];
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setItemReference:", v17, 0, 0);
        goto LABEL_43;
      case 2u:
        PBReaderReadString();
        unint64_t v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setReservationNumber:v17];
        goto LABEL_43;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBookingTime:", v17, 0, 0);
        goto LABEL_43;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_50:
        objc_msgSend(a1, "setReservationStatus:", v25, v26, v27);
        goto LABEL_44;
      case 5u:
        PBReaderReadString();
        unint64_t v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setReservationHolderName:v17];
        goto LABEL_43;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBReservationAction);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBReservationActionReadFrom(v17, a2)) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addActions:", v17, 0, 0);
        }
        goto LABEL_43;
      case 7u:
        unint64_t v17 = objc_alloc_init(_INPBURLValue);
        if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUrl:", v17, 0, 0);
LABEL_43:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_52:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

INMediaItem *INIntentSlotValueTransformFromMediaItemValue(void *a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 valueMetadata];
    INPrivacyEntitlementValidateValueMetadata(v3);

    uint64_t v4 = [v2 topics];

    if (v4)
    {
      uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v2, "topicsCount"));
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      uint64_t v5 = [v2 topics];
      uint64_t v6 = [v5 countByEnumeratingWithState:&v41 objects:v46 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v42;
        do
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v42 != v8) {
              objc_enumerationMutation(v5);
            }
            unint64_t v10 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            uint64_t v11 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v10, "score"));
            unint64_t v12 = [v10 value];
            [v4 setObject:v11 forKey:v12];
          }
          uint64_t v7 = [v5 countByEnumeratingWithState:&v41 objects:v46 count:16];
        }
        while (v7);
      }
    }
    char v13 = [v2 namedEntities];

    if (v13)
    {
      char v13 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v2, "namedEntitiesCount"));
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      BOOL v14 = [v2 namedEntities];
      uint64_t v15 = [v14 countByEnumeratingWithState:&v37 objects:v45 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v38;
        do
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (*(void *)v38 != v17) {
              objc_enumerationMutation(v14);
            }
            char v19 = *(void **)(*((void *)&v37 + 1) + 8 * j);
            unsigned int v20 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v19, "score"));
            uint64_t v21 = [v19 value];
            [v13 setObject:v20 forKey:v21];
          }
          uint64_t v16 = [v14 countByEnumeratingWithState:&v37 objects:v45 count:16];
        }
        while (v16);
      }
    }
    uint64_t v36 = [INMediaItem alloc];
    uint64_t v22 = [v2 identifier];
    uint64_t v35 = (void *)v22;
    unint64_t v23 = [v2 title];
    int v24 = [v2 hasType];
    uint64_t v25 = [v2 type] - 1;
    if (v25 <= 0x13) {
      uint64_t v26 = v25 + 1;
    }
    else {
      uint64_t v26 = 0;
    }
    if (!v24) {
      uint64_t v26 = 0;
    }
    uint64_t v34 = v26;
    uint64_t v27 = [v2 artwork];
    unint64_t v28 = INIntentSlotValueTransformFromImageValue(v27);
    char v29 = [v2 artist];
    uint64_t v30 = [v2 privateMediaItemValueData];
    char v31 = INIntentSlotValueTransformFromPrivateMediaItemValueData(v30);
    uint64_t v32 = [(INMediaItem *)v36 initWithIdentifier:v22 title:v23 type:v34 artwork:v28 artist:v29 topics:v4 namedEntities:v13 privateMediaItemValueData:v31];
  }
  else
  {
    uint64_t v32 = 0;
  }

  return v32;
}

_INPBMediaItemValue *INIntentSlotValueTransformToMediaItemValue(void *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(_INPBMediaItemValue);
    id v3 = [v1 identifier];
    [(_INPBMediaItemValue *)v2 setIdentifier:v3];

    uint64_t v4 = [v1 title];
    [(_INPBMediaItemValue *)v2 setTitle:v4];

    unint64_t v5 = [v1 type];
    if (v5 >= 0x15) {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v6 = v5;
    }
    [(_INPBMediaItemValue *)v2 setType:v6];
    uint64_t v7 = [v1 artwork];
    uint64_t v8 = INIntentSlotValueTransformToImageValue(v7);
    [(_INPBMediaItemValue *)v2 setArtwork:v8];

    unsigned int v9 = [v1 artist];
    [(_INPBMediaItemValue *)v2 setArtist:v9];

    unint64_t v10 = [v1 topics];

    long long v37 = v2;
    if (v10)
    {
      id v11 = objc_alloc(MEMORY[0x1E4F1CA48]);
      unint64_t v12 = [v1 topics];
      unint64_t v10 = objc_msgSend(v11, "initWithCapacity:", objc_msgSend(v12, "count"));

      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      char v13 = [v1 topics];
      uint64_t v14 = [v13 countByEnumeratingWithState:&v42 objects:v47 count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v43;
        do
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v43 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v18 = *(void *)(*((void *)&v42 + 1) + 8 * i);
            char v19 = objc_alloc_init(_INPBScoredValue);
            [(_INPBScoredValue *)v19 setValue:v18];
            unsigned int v20 = [v1 topics];
            uint64_t v21 = [v20 objectForKey:v18];
            -[_INPBScoredValue setScore:](v19, "setScore:", [v21 integerValue]);

            [v10 addObject:v19];
          }
          uint64_t v15 = [v13 countByEnumeratingWithState:&v42 objects:v47 count:16];
        }
        while (v15);
      }

      uint64_t v2 = v37;
    }
    [(_INPBMediaItemValue *)v2 setTopics:v10];

    uint64_t v22 = [v1 namedEntities];

    if (v22)
    {
      id v23 = objc_alloc(MEMORY[0x1E4F1CA48]);
      int v24 = [v1 namedEntities];
      uint64_t v22 = objc_msgSend(v23, "initWithCapacity:", objc_msgSend(v24, "count"));

      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      uint64_t v25 = [v1 namedEntities];
      uint64_t v26 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v39;
        do
        {
          for (uint64_t j = 0; j != v27; ++j)
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = *(void *)(*((void *)&v38 + 1) + 8 * j);
            char v31 = objc_alloc_init(_INPBScoredValue);
            [(_INPBScoredValue *)v31 setValue:v30];
            uint64_t v32 = [v1 namedEntities];
            uint64_t v33 = [v32 objectForKey:v30];
            -[_INPBScoredValue setScore:](v31, "setScore:", [v33 integerValue]);

            [v22 addObject:v31];
          }
          uint64_t v27 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
        }
        while (v27);
      }

      uint64_t v2 = v37;
    }
    [(_INPBMediaItemValue *)v2 setNamedEntities:v22];

    uint64_t v34 = [v1 privateMediaItemValueData];
    uint64_t v35 = INIntentSlotValueTransformToPrivateMediaItemValueData(v34);
    [(_INPBMediaItemValue *)v2 setPrivateMediaItemValueData:v35];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMediaItemValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromMediaItemValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaItemValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToMediaItemValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

_INPBMediaItemValue *INIntentSlotValueRedactedMediaItemValueFromMediaItemValue(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = [v5 valueMetadata];
  uint64_t v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
  {
    unsigned int v9 = 0;
  }
  else
  {
    unsigned int v9 = objc_alloc_init(_INPBMediaItemValue);
    unint64_t v10 = [v5 identifier];
    [(_INPBMediaItemValue *)v9 setIdentifier:v10];

    long long v11 = [v5 title];
    [(_INPBMediaItemValue *)v9 setTitle:v11];

    -[_INPBMediaItemValue setType:](v9, "setType:", [v5 type]);
    long long v12 = [v5 artwork];
    long long v13 = INIntentSlotValueRedactedImageValueFromImageValue(v12, a2);
    [(_INPBMediaItemValue *)v9 setArtwork:v13];

    long long v14 = [v5 artist];
    [(_INPBMediaItemValue *)v9 setArtist:v14];

    uint64_t v15 = [v5 topics];
    [(_INPBMediaItemValue *)v9 setTopics:v15];

    uint64_t v16 = [v5 namedEntities];
    [(_INPBMediaItemValue *)v9 setNamedEntities:v16];

    id v17 = [v5 privateMediaItemValueData];
    [(_INPBMediaItemValue *)v9 setPrivateMediaItemValueData:v17];
  }

  return v9;
}

uint64_t INHomeSceneTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INHomeSceneTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INHomeSceneTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INHomeSceneTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return *(&off_1E551F6C8 + a1 - 1);
  }
}

uint64_t INHomeSceneTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"userDefined"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"goodMorning"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"imLeaving"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"imHome"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"goodNight"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeSceneTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"user defined";
      goto LABEL_8;
    case 2:
      uint64_t v4 = @"good morning";
      goto LABEL_8;
    case 3:
      uint64_t v4 = @"im leaving";
      goto LABEL_8;
    case 4:
      uint64_t v4 = @"im home";
      goto LABEL_8;
    case 5:
      uint64_t v4 = @"good night";
LABEL_8:
      id v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      id v5 = 0;
      break;
  }

  return v5;
}

uint64_t INShowHomeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551F6F0 + a1);
  }
}

BOOL _INPBShowHomeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBShowHomeIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_31;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = objc_alloc_init(_INPBHomeFilter);
        if (!PBReaderPlaceMark() || !_INPBHomeFilterReadFrom(v18, a2)) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        if (v18) {
          objc_msgSend(a1, "addFilters:", v18, 0, 0);
        }
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(_INPBDateTimeRange);
    if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_36;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTime:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBScoredValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v24 = PBReaderReadString();
        [a1 setValue:v24];
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_34;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        uint64_t v23 = *(unsigned char *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        [a1 setScore:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBContactEventTriggerReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTriggerContact:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INTaskReferenceHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INTaskReferenceGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    return 0;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INTaskReferenceGetFacadeType(uint64_t result, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return result;
  }
}

__CFString *INTaskReferenceGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"currentActivity";
  }
  else {
    return @"unknown";
  }
}

uint64_t INTaskReferenceWithString(void *a1)
{
  return [a1 isEqualToString:@"currentActivity"];
}

id INTaskReferenceGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"current activity", @"current activity", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_18CE84CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWFOnScreenContentServiceOptionsClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary_123454)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __VoiceShortcutClientLibraryCore_block_invoke_123455;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551F720;
    uint64_t v6 = 0;
    VoiceShortcutClientLibraryCore_frameworkLibrary_123454 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!VoiceShortcutClientLibraryCore_frameworkLibrary_123454)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("WFOnScreenContentServiceOptions");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getWFOnScreenContentServiceOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __VoiceShortcutClientLibraryCore_block_invoke_123455()
{
  uint64_t result = _sl_dlopen();
  VoiceShortcutClientLibraryCore_frameworkLibrary_123454 = result;
  return result;
}

BOOL INMobileSpaceHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INMobileSpaceGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t INMobileSpaceGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INMobileSpaceGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"car";
  }
  else {
    return @"unknown";
  }
}

uint64_t INMobileSpaceWithString(void *a1)
{
  return [a1 isEqualToString:@"car"];
}

id INMobileSpaceGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"car", @"car", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_18CE85440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCHSWidgetDescriptorProviderClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!ChronoServicesLibraryCore_frameworkLibrary_123531)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __ChronoServicesLibraryCore_block_invoke_123532;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E551F7B0;
    uint64_t v6 = 0;
    ChronoServicesLibraryCore_frameworkLibrary_123531 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!ChronoServicesLibraryCore_frameworkLibrary_123531)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CHSWidgetDescriptorProvider");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getCHSWidgetDescriptorProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ChronoServicesLibraryCore_block_invoke_123532()
{
  uint64_t result = _sl_dlopen();
  ChronoServicesLibraryCore_frameworkLibrary_123531 = result;
  return result;
}

INContactEventTrigger *INIntentSlotValueTransformFromContactEventTrigger(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INContactEventTrigger alloc];
    id v3 = [v1 triggerContact];

    uint64_t v4 = INIntentSlotValueTransformFromContact(v3);
    long long v5 = [(INContactEventTrigger *)v2 initWithTriggerContact:v4];
  }
  else
  {
    long long v5 = 0;
  }

  return v5;
}

_INPBContactEventTrigger *INIntentSlotValueTransformToContactEventTrigger(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBContactEventTrigger);
    id v3 = [v1 triggerContact];

    uint64_t v4 = INIntentSlotValueTransformToContact(v3);
    [(_INPBContactEventTrigger *)v2 setTriggerContact:v4];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromContactEventTriggers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromContactEventTrigger(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToContactEventTriggers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToContactEventTrigger(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedContactEventTriggerFromContactEventTrigger(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL INIncomingCallStatusCodeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INIncomingCallStatusCodeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INIncomingCallStatusCodeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INIncomingCallStatusCodeGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"incomingCall";
  }
  if (a1 == 1) {
    return @"noIncomingCall";
  }
  else {
    return v1;
  }
}

uint64_t INIncomingCallStatusCodeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"noIncomingCall"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"incomingCall"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIncomingCallStatusCodeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"incoming call";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"no incoming call";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBTrainTripReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        char v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        [a1 setProvider:v17];
        goto LABEL_38;
      case 2u:
        PBReaderReadString();
        char v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        [a1 setTrainName:v17];
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        char v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        [a1 setTrainNumber:v17];
        goto LABEL_38;
      case 4u:
        char v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOnlineCheckInTime:", v17, 0, 0);
        goto LABEL_38;
      case 5u:
        char v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTripDuration:", v17, 0, 0);
        goto LABEL_38;
      case 6u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2)) {
          goto LABEL_42;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureStationLocation:", v17, 0, 0);
        goto LABEL_38;
      case 7u:
        PBReaderReadString();
        char v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        [a1 setDeparturePlatform:v17];
        goto LABEL_38;
      case 8u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalStationLocation:", v17, 0, 0);
LABEL_38:

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_42:

        return 0;
      case 9u:
        PBReaderReadString();
        char v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        [a1 setArrivalPlatform:v17];
        goto LABEL_38;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_39;
    }
  }
}

BOOL _INPBRentalCarReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        char v17 = objc_alloc_init(_INPBRentalCar);
        if (!PBReaderPlaceMark() || !_INPBRentalCarReadFrom(v17, a2)) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRentalCar:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        char v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRentalDuration:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2)) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupLocation:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDropOffLocation:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
    }
  }
}

BOOL _INPBTicketedEventReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        unsigned int v18 = objc_alloc_init(_INPBTicketedEvent);
        if (!PBReaderPlaceMark() || (_INPBTicketedEventReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEvent:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBTrainReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unsigned int v18 = objc_alloc_init(_INPBTrainTrip);
        if (!PBReaderPlaceMark() || !_INPBTrainTripReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrainTrip:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBLodgingReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLodgingBusinessLocation:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservationDuration:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumberOfAdults:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBInteger);
        if PBReaderPlaceMark() && (_INPBIntegerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNumberOfChildren:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
    }
  }
}

uint64_t _INPBTicketedEventReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_40:
        [a1 setCategory:v23];
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        uint64_t v25 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setName:v25];
        goto LABEL_35;
      case 3u:
        uint64_t v25 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v25, a2) & 1) == 0) {
          goto LABEL_43;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventDuration:", v25, 0, 0);
        goto LABEL_35;
      case 4u:
        uint64_t v25 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLocation:", v25, 0, 0);
LABEL_35:

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

BOOL _INPBRentalCarReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = PBReaderReadString();
          [a1 setRentalCompanyName:v17];
          goto LABEL_24;
        case 2u:
          char v17 = PBReaderReadString();
          [a1 setType:v17];
          goto LABEL_24;
        case 3u:
          char v17 = PBReaderReadString();
          [a1 setMake:v17];
          goto LABEL_24;
        case 4u:
          char v17 = PBReaderReadString();
          [a1 setModel:v17];
          goto LABEL_24;
        case 5u:
          char v17 = PBReaderReadString();
          [a1 setRentalCarDescription:v17];
LABEL_24:

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_25:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromEnergy(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = objc_msgSend(a1, "values", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = INIntentSlotValueTransformFromEnergyValue(*(void **)(*((void *)&v9 + 1) + 8 * i));
        if (v6)
        {
          uint64_t v7 = (void *)v6;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromEnergyValue(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 valueMetadata];
    INPrivacyEntitlementValidateValueMetadata(v3);

    if ([v2 hasUnit])
    {
      switch([v2 unit])
      {
        case 1u:
          uint64_t v4 = [MEMORY[0x1E4F291B0] kilojoules];
          break;
        case 2u:
          uint64_t v4 = [MEMORY[0x1E4F291B0] joules];
          break;
        case 3u:
          uint64_t v4 = [MEMORY[0x1E4F291B0] kilocalories];
          break;
        case 4u:
          uint64_t v4 = [MEMORY[0x1E4F291B0] calories];
          break;
        case 5u:
          uint64_t v4 = [MEMORY[0x1E4F291B0] kilowattHours];
          break;
        default:
          goto LABEL_11;
      }
      uint64_t v5 = (void *)v4;
      if (v4)
      {
        id v6 = objc_alloc(MEMORY[0x1E4F28E28]);
        [v2 magnitude];
        uint64_t v7 = objc_msgSend(v6, "initWithDoubleValue:unit:", v5);

        goto LABEL_14;
      }
    }
LABEL_11:
    char v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      long long v11 = "INIntentSlotValueTransformFromEnergyValue";
      _os_log_error_impl(&dword_18CB2F000, v8, OS_LOG_TYPE_ERROR, "%s _INPBEnergyValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v7 = 0;
LABEL_14:

  return v7;
}

_INPBEnergy *INIntentSlotValueTransformToEnergy(void *a1)
{
  id v1 = INIntentSlotValueTransformToEnergyValue(a1);
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(_INPBEnergy);
    [(_INPBEnergy *)v2 addValue:v1];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

_INPBEnergyValue *INIntentSlotValueTransformToEnergyValue(void *a1)
{
  if (!a1)
  {
    uint64_t v2 = 0;
    goto LABEL_15;
  }
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(_INPBEnergyValue);
  uint64_t v3 = [v1 unit];
  [v1 doubleValue];
  double v5 = v4;

  [(_INPBEnergyValue *)v2 setMagnitude:v5];
  id v6 = [MEMORY[0x1E4F291B0] calories];
  char v7 = [v3 isEqual:v6];

  if (v7)
  {
    uint64_t v8 = 4;
LABEL_13:
    [(_INPBEnergyValue *)v2 setUnit:v8];
    goto LABEL_14;
  }
  long long v9 = [MEMORY[0x1E4F291B0] joules];
  char v10 = [v3 isEqual:v9];

  if (v10)
  {
    uint64_t v8 = 2;
    goto LABEL_13;
  }
  long long v11 = [MEMORY[0x1E4F291B0] kilocalories];
  char v12 = [v3 isEqual:v11];

  if (v12)
  {
    uint64_t v8 = 3;
    goto LABEL_13;
  }
  char v13 = [MEMORY[0x1E4F291B0] kilojoules];
  char v14 = [v3 isEqual:v13];

  if (v14)
  {
    uint64_t v8 = 1;
    goto LABEL_13;
  }
  int v15 = [MEMORY[0x1E4F291B0] kilowattHours];
  int v16 = [v3 isEqual:v15];

  if (v16)
  {
    uint64_t v8 = 5;
    goto LABEL_13;
  }
LABEL_14:

LABEL_15:

  return v2;
}

id INIntentSlotValueTransformFromEnergyValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = INIntentSlotValueTransformFromEnergyValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  long long v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformFromEnergies(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = INIntentSlotValueTransformFromEnergy(*(void **)(*((void *)&v11 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v11);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  long long v9 = (void *)[v2 copy];

  return v9;
}

id INIntentSlotValueTransformToEnergyValues(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = INIntentSlotValueTransformToEnergyValue(*(void **)(*((void *)&v10 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToEnergies(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = INIntentSlotValueTransformToEnergy(*(void **)(*((void *)&v10 + 1) + 8 * i));
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromEnergyValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 valueMetadata];
  uint64_t v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (void *)[v3 copy];
  }

  return v6;
}

_INPBEnergy *INIntentSlotValueRedactedEnergyFromEnergy(void *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    char v7 = objc_alloc_init(_INPBEnergy);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v8 = objc_msgSend(v5, "values", 0);
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          long long v13 = INIntentSlotValueRedactedValueFromEnergyValue(*(void **)(*((void *)&v15 + 1) + 8 * i), a2);
          if (v13) {
            [(_INPBEnergy *)v7 addValue:v13];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedEnergiesFromEnergies(void *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  char v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v8 = v5;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = INIntentSlotValueRedactedEnergyFromEnergy(*(void **)(*((void *)&v16 + 1) + 8 * i), a2, v6);
        objc_msgSend(v7, "addObject:", v13, (void)v16);
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }

  long long v14 = (void *)[v7 copy];

  return v14;
}

INCalendarEvent *INIntentSlotValueTransformFromCalendarEvent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    long long v13 = [INCalendarEvent alloc];
    uint64_t v2 = [v1 eventIdentifier];
    id v3 = [v1 title];
    long long v14 = [v1 dateTimeRange];
    uint64_t v4 = INIntentSlotValueTransformFromDateTimeRangeValue(v14);
    id v5 = [v1 participants];
    id v6 = INIntentSlotValueTransformFromEventParticipants(v5);
    char v7 = [v1 location];
    id v8 = INIntentSlotValueTransformFromLocation(v7);
    uint64_t v9 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v1, "isContactBirthday"));
    uint64_t v10 = [v1 calendarPunchoutURI];

    uint64_t v11 = [(INCalendarEvent *)v13 initWithEventIdentifier:v2 title:v3 dateTimeRange:v4 participants:v6 location:v8 isContactBirthday:v9 calendarPunchoutURI:v10];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

_INPBCalendarEvent *INIntentSlotValueTransformToCalendarEvent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCalendarEvent);
    id v3 = [v1 eventIdentifier];
    [(_INPBCalendarEvent *)v2 setEventIdentifier:v3];

    uint64_t v4 = [v1 title];
    [(_INPBCalendarEvent *)v2 setTitle:v4];

    id v5 = [v1 dateTimeRange];
    id v6 = INIntentSlotValueTransformToDateTimeRangeValue(v5);
    [(_INPBCalendarEvent *)v2 setDateTimeRange:v6];

    char v7 = [v1 participants];
    id v8 = INIntentSlotValueTransformToEventParticipants(v7);
    [(_INPBCalendarEvent *)v2 setParticipants:v8];

    uint64_t v9 = [v1 location];
    uint64_t v10 = INIntentSlotValueTransformToLocation(v9);
    [(_INPBCalendarEvent *)v2 setLocation:v10];

    uint64_t v11 = [v1 isContactBirthday];
    -[_INPBCalendarEvent setIsContactBirthday:](v2, "setIsContactBirthday:", [v11 BOOLValue]);

    long long v12 = [v1 calendarPunchoutURI];

    [(_INPBCalendarEvent *)v2 setCalendarPunchoutURI:v12];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCalendarEvents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = INIntentSlotValueTransformFromCalendarEvent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCalendarEvents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = INIntentSlotValueTransformToCalendarEvent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCalendarEventFromCalendarEvent(void *a1)
{
  id v1 = a1;

  return v1;
}

id INIntentSlotValueTransformFromMediaItemGroup(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "valuesCount"));
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = objc_msgSend(v1, "values", 0);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = INIntentSlotValueTransformFromMediaItemValue(*(void **)(*((void *)&v10 + 1) + 8 * i));
          [v2 addObject:v8];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

_INPBMediaItemGroup *INIntentSlotValueTransformToMediaItemGroup(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBMediaItemGroup);
    id v3 = INIntentSlotValueTransformToMediaItemValues(v1);

    [(_INPBMediaItemGroup *)v2 setValues:v3];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMediaItemGroups(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = INIntentSlotValueTransformFromMediaItemGroup(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaItemGroups(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = INIntentSlotValueTransformToMediaItemGroup(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

_INPBMediaItemGroup *INIntentSlotValueRedactedMediaItemGroupFromMediaItemGroup(void *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (a2)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = objc_alloc_init(_INPBMediaItemGroup);
    id v8 = [v5 values];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          long long v13 = INIntentSlotValueRedactedMediaItemValueFromMediaItemValue(*(void **)(*((void *)&v15 + 1) + 8 * i), 0, v6);
          [(_INPBMediaItemGroup *)v7 addValues:v13];
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }
  }

  return v7;
}

BOOL _INPBRestaurantReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  char v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        long long v17 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        long long v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservationDuration:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        long long v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPartySize:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        long long v17 = objc_alloc_init(_INPBLocation);
        if PBReaderPlaceMark() && (_INPBLocationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRestaurantLocation:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_34;
    }
  }
}

INTrainTrip *INIntentSlotValueTransformFromTrainTrip(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    long long v14 = [INTrainTrip alloc];
    char v13 = [v1 provider];
    unint64_t v12 = [v1 trainName];
    uint64_t v2 = [v1 trainNumber];
    int v15 = [v1 tripDuration];
    id v3 = INIntentSlotValueTransformFromDateTimeRange(v15);
    uint64_t v4 = [v1 departureStationLocation];
    id v5 = INIntentSlotValueTransformFromLocationValue(v4);
    id v6 = [v1 departurePlatform];
    char v7 = [v1 arrivalStationLocation];
    char v8 = INIntentSlotValueTransformFromLocationValue(v7);
    unsigned int v9 = [v1 arrivalPlatform];

    unint64_t v10 = [(INTrainTrip *)v14 initWithProvider:v13 trainName:v12 trainNumber:v2 tripDuration:v3 departureStationLocation:v5 departurePlatform:v6 arrivalStationLocation:v8 arrivalPlatform:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBTrainTrip *INIntentSlotValueTransformToTrainTrip(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBTrainTrip);
    id v3 = [v1 provider];
    [(_INPBTrainTrip *)v2 setProvider:v3];

    uint64_t v4 = [v1 trainName];
    [(_INPBTrainTrip *)v2 setTrainName:v4];

    id v5 = [v1 trainNumber];
    [(_INPBTrainTrip *)v2 setTrainNumber:v5];

    id v6 = [v1 tripDuration];
    char v7 = INIntentSlotValueTransformToDateTimeRange(v6);
    [(_INPBTrainTrip *)v2 setTripDuration:v7];

    char v8 = [v1 departureStationLocation];
    unsigned int v9 = INIntentSlotValueTransformToLocationValue(v8);
    [(_INPBTrainTrip *)v2 setDepartureStationLocation:v9];

    unint64_t v10 = [v1 departurePlatform];
    [(_INPBTrainTrip *)v2 setDeparturePlatform:v10];

    uint64_t v11 = [v1 arrivalStationLocation];
    unint64_t v12 = INIntentSlotValueTransformToLocationValue(v11);
    [(_INPBTrainTrip *)v2 setArrivalStationLocation:v12];

    char v13 = [v1 arrivalPlatform];

    [(_INPBTrainTrip *)v2 setArrivalPlatform:v13];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromTrainTrips(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromTrainTrip(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTrainTrips(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToTrainTrip(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTrainTripFromTrainTrip(void *a1)
{
  id v1 = a1;

  return v1;
}

INTicketedEvent *INIntentSlotValueTransformFromTicketedEvent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INTicketedEvent alloc];
    unsigned int v3 = [v1 hasCategory];
    if ([v1 category] == 2) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = [v1 name];
    uint64_t v6 = [v1 eventDuration];
    char v7 = INIntentSlotValueTransformFromDateTimeRange(v6);
    char v8 = [v1 location];

    unsigned int v9 = INIntentSlotValueTransformFromLocationValue(v8);
    unint64_t v10 = [(INTicketedEvent *)v2 initWithCategory:v4 name:v5 eventDuration:v7 location:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBTicketedEvent *INIntentSlotValueTransformToTicketedEvent(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBTicketedEvent);
    uint64_t v3 = [v1 category];
    if (v3 == 1) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 0x7FFFFFFF;
    }
    if (v3) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 1;
    }
    [(_INPBTicketedEvent *)v2 setCategory:v5];
    uint64_t v6 = [v1 name];
    [(_INPBTicketedEvent *)v2 setName:v6];

    char v7 = [v1 eventDuration];
    char v8 = INIntentSlotValueTransformToDateTimeRange(v7);
    [(_INPBTicketedEvent *)v2 setEventDuration:v8];

    unsigned int v9 = [v1 location];

    unint64_t v10 = INIntentSlotValueTransformToLocationValue(v9);
    [(_INPBTicketedEvent *)v2 setLocation:v10];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromTicketedEvents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromTicketedEvent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTicketedEvents(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToTicketedEvent(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTicketedEventFromTicketedEvent(void *a1)
{
  id v1 = a1;

  return v1;
}

INRentalCar *INIntentSlotValueTransformFromRentalCar(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INRentalCar alloc];
    id v3 = [v1 rentalCompanyName];
    uint64_t v4 = [v1 type];
    uint64_t v5 = [v1 make];
    uint64_t v6 = [v1 model];
    char v7 = [v1 rentalCarDescription];

    char v8 = [(INRentalCar *)v2 initWithRentalCompanyName:v3 type:v4 make:v5 model:v6 rentalCarDescription:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

_INPBRentalCar *INIntentSlotValueTransformToRentalCar(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBRentalCar);
    id v3 = [v1 rentalCompanyName];
    [(_INPBRentalCar *)v2 setRentalCompanyName:v3];

    uint64_t v4 = [v1 type];
    [(_INPBRentalCar *)v2 setType:v4];

    uint64_t v5 = [v1 make];
    [(_INPBRentalCar *)v2 setMake:v5];

    uint64_t v6 = [v1 model];
    [(_INPBRentalCar *)v2 setModel:v6];

    char v7 = [v1 rentalCarDescription];

    [(_INPBRentalCar *)v2 setRentalCarDescription:v7];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromRentalCars(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromRentalCar(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToRentalCars(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToRentalCar(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedRentalCarFromRentalCar(void *a1)
{
  id v1 = a1;

  return v1;
}

void INTemporalEventTriggerTypeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v4 = v3;
    if (a1)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
      id v3 = v4;
      if ((a1 & 2) == 0)
      {
LABEL_5:
        if ((a1 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_5;
    }
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
    id v3 = v4;
    if ((a1 & 4) != 0)
    {
LABEL_6:
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
      id v3 = v4;
    }
  }
LABEL_7:
}

uint64_t INTemporalEventTriggerTypeOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2 = (a1 >> 2) & 1;
  uint64_t v3 = (a1 >> 1) & 1;
  int v4 = a1 & 1;
  if (a2 != 1) {
    int v4 = 0;
  }
  if (a2 != 2) {
    LODWORD(v3) = v4;
  }
  if (a2 != 3) {
    LODWORD(v2) = v3;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t *INTemporalEventTriggerTypeOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    if (a2 == 1) {
      uint64_t v2 = *result | 1;
    }
    if (a2 == 2) {
      uint64_t v2 = *result | 2;
    }
    if (a2 == 3) {
      uint64_t v2 = *result | 4;
    }
    *uint64_t result = v2;
  }
  return result;
}

unint64_t *INTemporalEventTriggerTypeOptionsRemoveBackingType(unint64_t *result, int a2)
{
  if (result)
  {
    unint64_t v2 = *result;
    if (a2 == 1) {
      unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    }
    if (a2 == 2) {
      unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    }
    if (a2 == 3) {
      unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFBLL;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INTemporalEventTriggerTypeOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1)
    {
      [v2 addObject:@"notScheduled"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0)
        {
LABEL_6:
          int v4 = (void *)[v3 copy];

          goto LABEL_8;
        }
LABEL_5:
        [v3 addObject:@"scheduledRecurring"];
        goto LABEL_6;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"scheduledNonRecurring"];
    if ((v1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_8:

  return v4;
}

uint64_t INTemporalEventTriggerTypeOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v1);
        }
        char v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v4 |= [v7 isEqualToString:@"notScheduled"];
        if ([v7 isEqualToString:@"scheduledNonRecurring"]) {
          v4 |= 2uLL;
        }
        if ([v7 isEqualToString:@"scheduledRecurring"]) {
          v4 |= 4uLL;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id INTemporalEventTriggerTypeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"not scheduled", @"not scheduled", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0)
        {
LABEL_6:
          uint64_t v6 = (void *)[v4 copy];

          goto LABEL_8;
        }
LABEL_5:
        uint64_t v5 = INLocalizedStringWithLocalizer(@"scheduled recurring", @"scheduled recurring", v3);
        [v4 addObject:v5];

        goto LABEL_6;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"scheduled non recurring", @"scheduled non recurring", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_8:

  return v6;
}

BOOL INTaskPriorityHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INTaskPriorityGetBackingType(unint64_t result)
{
  if (result >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INTaskPriorityGetFacadeType(int a1, int a2)
{
  uint64_t v2 = a2 == 1;
  if (a2 == 2) {
    uint64_t v2 = 2;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INTaskPriorityGetName(uint64_t a1)
{
  id v1 = @"unknown";
  if (a1 == 2) {
    id v1 = @"flagged";
  }
  if (a1 == 1) {
    return @"notFlagged";
  }
  else {
    return v1;
  }
}

uint64_t INTaskPriorityWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"notFlagged"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"flagged"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INTaskPriorityGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    id v4 = @"flagged";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    id v4 = @"not flagged";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBAppIdentifierReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 == 2)
      {
        long long v18 = PBReaderReadString();
        [a1 setBundleVersion:v18];
        goto LABEL_24;
      }
      if (v17 == 3)
      {
        long long v18 = PBReaderReadString();
        [a1 setAppName:v18];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    long long v18 = PBReaderReadString();
    [a1 setBundleIdentifier:v18];
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBPayloadNeedsExecuteIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentExecutionRequest);
        if (!PBReaderPlaceMark() || (_INPBIntentExecutionRequestReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentExecution:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentExecutionRequestReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  char v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_35;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_38;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_38:
        [a1 setEncodingFormat:v23];
        goto LABEL_39;
      case 2u:
        uint64_t v25 = objc_alloc_init(_INPBAppIdentifier);
        if (PBReaderPlaceMark() && _INPBAppIdentifierReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAppIdentifier:", v25, 0, 0);
LABEL_33:

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        uint64_t v25 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
        [a1 setEncodedIntent:v25];
        goto LABEL_33;
      case 4u:
        PBReaderReadString();
        uint64_t v25 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
        [a1 setEncodedIntentDefinition:v25];
        goto LABEL_33;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

uint64_t _INPBSnoozeTasksIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  char v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        char v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addTasks:", v17, 0, 0);
        }
        goto LABEL_31;
      case 3u:
        char v17 = objc_alloc_init(_INPBDateTimeRange);
        if PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNextTriggerTime:", v17, 0, 0);
LABEL_31:

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_42:
        [a1 setAll:v21 != 0];
        goto LABEL_43;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

uint64_t _INPBDeleteTasksIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  char v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        char v17 = objc_alloc_init(_INPBTaskList);
        if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v17, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskList:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        char v17 = objc_alloc_init(_INPBTask);
        if (PBReaderPlaceMark() && _INPBTaskReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addTasks:", v17, 0, 0);
          }
LABEL_31:

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_42:
        [a1 setAll:v21 != 0];
        goto LABEL_43;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

__CFString *INSnoozeTasksIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551F7F0[a1];
  }
}

uint64_t _INPBSnoozeTasksIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addSnoozedTasks:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INDeleteTasksIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E551F820[a1];
  }
}

uint64_t _INPBDeleteTasksIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addDeletedTasks:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBFileDataAttachmentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v17 = PBReaderReadData();
        [a1 setData:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = PBReaderReadString();
    [a1 setFileName:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18CE9D3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void INFileURLSetAssociatedAuditToken(void *a1, _OWORD *a2)
{
  id v3 = (void *)MEMORY[0x1E4F28CB8];
  id v4 = a1;
  uint64_t v5 = [v3 defaultManager];
  long long v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  objc_msgSend(v5, "if_setAuditToken:forExtendedAttributeNamed:ofItemAtURL:", v8, @"INFileURLAssociatedAuditToken", v4);

  char v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  objc_msgSend(v7, "if_setBool:forExtendedAttributeNamed:ofItemAtURL:", 1, @"INFileURLHasAssociatedAuditToken", v4);
}

void INFileURLGetAssociatedAuditToken(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v5 = a1;
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "if_auditTokenForExtendedAttributeNamed:ofItemAtURL:", @"INFileURLAssociatedAuditToken", v5);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
}

void INFileURLSetMarkedForDeletionOnDeallocation(void *a1, uint64_t a2)
{
  id v3 = (void *)MEMORY[0x1E4F28CB8];
  id v4 = a1;
  id v5 = [v3 defaultManager];
  objc_msgSend(v5, "if_setBool:forExtendedAttributeNamed:ofItemAtURL:", a2, @"INFileURLIsMarkedForDeletionOnDeallocation", v4);
}

uint64_t INFileURLHasAssociatedAuditToken(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28CB8];
  id v2 = a1;
  id v3 = [v1 defaultManager];
  uint64_t v4 = objc_msgSend(v3, "if_BOOLForExtendedAttributeName:ofItemAtURL:", @"INFileURLHasAssociatedAuditToken", v2);

  return v4;
}

void INFileURLRemoveAssociatedAuditToken(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28CB8];
  id v2 = a1;
  id v3 = [v1 defaultManager];
  objc_msgSend(v3, "if_removeExtendedAttributeName:ofItemAtURL:", @"INFileURLAssociatedAuditToken", v2);

  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  objc_msgSend(v4, "if_removeExtendedAttributeName:ofItemAtURL:", @"INFileURLHasAssociatedAuditToken", v2);
}

BOOL INFileURLAuditTokenEquals(void *a1, void *a2)
{
  long long v7 = 0u;
  long long v8 = 0u;
  INFileURLGetAssociatedAuditToken(a1, &v7);
  return (void)v7 == *a2 && *((void *)&v7 + 1) == a2[1] && (void)v8 == a2[2] && *((void *)&v8 + 1) == a2[3];
}

BOOL INOutgoingMessageTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INOutgoingMessageTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INOutgoingMessageTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INOutgoingMessageTypeGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"outgoingMessageAudio";
  }
  if (a1 == 1) {
    return @"outgoingMessageText";
  }
  else {
    return v1;
  }
}

uint64_t INOutgoingMessageTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"outgoingMessageText"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"outgoingMessageAudio"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INOutgoingMessageTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    id v4 = @"outgoing message audio";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    id v4 = @"outgoing message text";
LABEL_5:
    id v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  id v5 = 0;
LABEL_7:

  return v5;
}

uint64_t _INPBFileReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        char v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setFilename:v17];
        goto LABEL_28;
      case 2u:
        PBReaderReadData();
        char v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setData:v17];
        goto LABEL_28;
      case 3u:
        char v17 = objc_alloc_init(_INPBURLValue);
        if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFileURL:", v17, 0, 0);
LABEL_28:

LABEL_29:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        PBReaderReadString();
        char v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setTypeIdentifier:v17];
        goto LABEL_28;
      case 5u:
        PBReaderReadData();
        char v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        [a1 setBookmarkData:v17];
        goto LABEL_28;
      case 6u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_41:
        [a1 setRemovedOnCompletion:v21 != 0];
        goto LABEL_29;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_29;
    }
  }
}

uint64_t _INPBIntentExecutionResultReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v25 = PBReaderReadString();
        [a1 setEncodedIntentResponse:v25];
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_37;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_37:
            [a1 setEncodingFormat:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v25 = PBReaderReadString();
        [a1 setEncodedIntent:v25];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              unint64_t v17 = objc_alloc_init(_INPBAppIdentifier);
              if (PBReaderPlaceMark() && _INPBAppIdentifierReadFrom(v17, a2))
              {
                PBReaderRecallMark();
                objc_msgSend(a1, "setAppIdentifier:", v17, 0, 0);
                goto LABEL_34;
              }

              return 0;
            case 2u:
              char v19 = 0;
              unsigned int v20 = 0;
              uint64_t v21 = 0;
              break;
            case 3u:
              PBReaderReadString();
              unint64_t v17 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
              [a1 setEncodedIntent:v17];
              goto LABEL_34;
            case 4u:
              PBReaderReadString();
              unint64_t v17 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
              [a1 setEncodedIntentDefinition:v17];
              goto LABEL_34;
            case 5u:
              PBReaderReadString();
              unint64_t v17 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
              [a1 setIntentTypeName:v17];
LABEL_34:

              goto LABEL_40;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_40:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_36;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = v21;
          }
LABEL_39:
          [a1 setEncodingFormat:v25];
          goto LABEL_40;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBEnergyValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);
      }
      else if (v19 == 2)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          double v31 = *(double *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v31 = 0.0;
        }
        [a1 setMagnitude:v31];
      }
      else if (v19 == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v22;
        }
LABEL_40:
        [a1 setUnit:v27];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBVolumeReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBVolumeValue);
        if (!PBReaderPlaceMark() || !_INPBVolumeValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValue:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBModifyNicknameReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetNickname:", v23, 0, 0);
      }
      else if ((v10 >> 3) == 3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        [a1 setIsRemoval:v19 != 0];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INDeleteEventConfirmationReasonHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INDeleteEventConfirmationReasonGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INDeleteEventConfirmationReasonGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INDeleteEventConfirmationReasonGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"deleteAllRecurrences";
  }
  else {
    return @"unknown";
  }
}

uint64_t INDeleteEventConfirmationReasonWithString(void *a1)
{
  return [a1 isEqualToString:@"deleteAllRecurrences"];
}

id INDeleteEventConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"delete all recurrences", @"delete all recurrences", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

uint64_t _INPBSpeedReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBSpeedValue);
        if (!PBReaderPlaceMark() || !_INPBSpeedValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValue:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBMassValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);
      }
      else if (v19 == 2)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          double v31 = *(double *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v31 = 0.0;
        }
        [a1 setMagnitude:v31];
      }
      else if (v19 == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v22;
        }
LABEL_40:
        [a1 setUnit:v27];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBMassReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBMassValue);
        if (!PBReaderPlaceMark() || !_INPBMassValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValue:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBVolumeValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);
      }
      else if (v19 == 2)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          double v31 = *(double *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v31 = 0.0;
        }
        [a1 setMagnitude:v31];
      }
      else if (v19 == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v22;
        }
LABEL_40:
        [a1 setUnit:v27];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBEnergyReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBEnergyValue);
        if (!PBReaderPlaceMark() || !_INPBEnergyValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValue:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSpeedValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);
      }
      else if (v19 == 2)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          double v31 = *(double *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v31 = 0.0;
        }
        [a1 setMagnitude:v31];
      }
      else if (v19 == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v22;
        }
LABEL_40:
        [a1 setUnit:v27];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBReservationWrapperReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        int v17 = objc_alloc_init(_INPBFlightReservation);
        if (!PBReaderPlaceMark() || !_INPBFlightReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlightReservation:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        int v17 = objc_alloc_init(_INPBTrainReservation);
        if (!PBReaderPlaceMark() || !_INPBTrainReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrainReservation:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        int v17 = objc_alloc_init(_INPBRentalCarReservation);
        if (!PBReaderPlaceMark() || !_INPBRentalCarReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRentalCarReservation:", v17, 0, 0);
        goto LABEL_45;
      case 4u:
        int v17 = objc_alloc_init(_INPBLodgingReservation);
        if (!PBReaderPlaceMark() || !_INPBLodgingReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLodgingReservation:", v17, 0, 0);
        goto LABEL_45;
      case 5u:
        int v17 = objc_alloc_init(_INPBRestaurantReservation);
        if (!PBReaderPlaceMark() || !_INPBRestaurantReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRestaurantReservation:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        int v17 = objc_alloc_init(_INPBTicketedEventReservation);
        if (!PBReaderPlaceMark() || !_INPBTicketedEventReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTicketedEventReservation:", v17, 0, 0);
        goto LABEL_45;
      case 7u:
        int v17 = objc_alloc_init(_INPBBusReservation);
        if (!PBReaderPlaceMark() || !_INPBBusReservationReadFrom(v17, a2)) {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBusReservation:", v17, 0, 0);
        goto LABEL_45;
      case 8u:
        int v17 = objc_alloc_init(_INPBBoatReservation);
        if (PBReaderPlaceMark() && _INPBBoatReservationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setBoatReservation:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_49:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_46;
    }
  }
}

uint64_t _INPBGetReservationDetailsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBReservationWrapper);
        if (!PBReaderPlaceMark() || !_INPBReservationWrapperReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addReservations:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBGetReservationDetailsIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unsigned int v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        if (v18) {
          objc_msgSend(a1, "addReservationItemReferences:", v18, 0, 0);
        }
        goto LABEL_31;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2)) {
      goto LABEL_36;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservationContainerReference:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromReservationWrapper(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 hasFlightReservation])
    {
      id v3 = [v2 flightReservation];
      uint64_t v4 = INIntentSlotValueTransformFromFlightReservation(v3);
LABEL_18:
      id v5 = (void *)v4;

      goto LABEL_20;
    }
    if ([v2 hasTrainReservation])
    {
      id v3 = [v2 trainReservation];
      uint64_t v4 = INIntentSlotValueTransformFromTrainReservation((INTrainReservation *)v3);
      goto LABEL_18;
    }
    if ([v2 hasRentalCarReservation])
    {
      id v3 = [v2 rentalCarReservation];
      uint64_t v4 = INIntentSlotValueTransformFromRentalCarReservation((INRentalCarReservation *)v3);
      goto LABEL_18;
    }
    if ([v2 hasLodgingReservation])
    {
      id v3 = [v2 lodgingReservation];
      uint64_t v4 = INIntentSlotValueTransformFromLodgingReservation((INLodgingReservation *)v3);
      goto LABEL_18;
    }
    if ([v2 hasRestaurantReservation])
    {
      id v3 = [v2 restaurantReservation];
      uint64_t v4 = INIntentSlotValueTransformFromRestaurantReservation((INRestaurantReservation *)v3);
      goto LABEL_18;
    }
    if ([v2 hasTicketedEventReservation])
    {
      id v3 = [v2 ticketedEventReservation];
      uint64_t v4 = INIntentSlotValueTransformFromTicketedEventReservation((INTicketedEventReservation *)v3);
      goto LABEL_18;
    }
    if ([v2 hasBusReservation])
    {
      id v3 = [v2 busReservation];
      uint64_t v4 = INIntentSlotValueTransformFromBusReservation((INBusReservation *)v3);
      goto LABEL_18;
    }
    if ([v2 hasBoatReservation])
    {
      id v3 = [v2 boatReservation];
      uint64_t v4 = INIntentSlotValueTransformFromBoatReservation((INBoatReservation *)v3);
      goto LABEL_18;
    }
  }
  id v5 = 0;
LABEL_20:

  return v5;
}

_INPBReservationWrapper *INIntentSlotValueTransformToReservationWrapper(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = 0;
    goto LABEL_20;
  }
  uint64_t v2 = objc_alloc_init(_INPBReservationWrapper);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = INIntentSlotValueTransformToFlightReservation(v1);
    [(_INPBReservationWrapper *)v2 setFlightReservation:v3];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = INIntentSlotValueTransformToTrainReservation(v1);
      [(_INPBReservationWrapper *)v2 setTrainReservation:v3];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v3 = INIntentSlotValueTransformToRentalCarReservation(v1);
        [(_INPBReservationWrapper *)v2 setRentalCarReservation:v3];
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v3 = INIntentSlotValueTransformToLodgingReservation(v1);
          [(_INPBReservationWrapper *)v2 setLodgingReservation:v3];
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v3 = INIntentSlotValueTransformToRestaurantReservation(v1);
            [(_INPBReservationWrapper *)v2 setRestaurantReservation:v3];
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v3 = INIntentSlotValueTransformToTicketedEventReservation(v1);
              [(_INPBReservationWrapper *)v2 setTicketedEventReservation:v3];
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                id v3 = INIntentSlotValueTransformToBusReservation(v1);
                [(_INPBReservationWrapper *)v2 setBusReservation:v3];
              }
              else
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_20;
                }
                id v3 = INIntentSlotValueTransformToBoatReservation(v1);
                [(_INPBReservationWrapper *)v2 setBoatReservation:v3];
              }
            }
          }
        }
      }
    }
  }

LABEL_20:

  return v2;
}

id INIntentSlotValueTransformFromReservationWrappers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromReservationWrapper(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToReservationWrappers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToReservationWrapper(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedReservationWrapperFromReservationWrapper(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBContactCardReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setContactIdentifier:v17];
        goto LABEL_82;
      case 2u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setNamePrefix:v17];
        goto LABEL_82;
      case 3u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setFirstName:v17];
        goto LABEL_82;
      case 4u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setMiddleName:v17];
        goto LABEL_82;
      case 5u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setLastName:v17];
        goto LABEL_82;
      case 6u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setNameSuffix:v17];
        goto LABEL_82;
      case 7u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setFullName:v17];
        goto LABEL_82;
      case 8u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setNickName:v17];
        goto LABEL_82;
      case 9u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_88:
        [a1 setIsMe:v21 != 0];
        goto LABEL_83;
      case 0xAu:
        unint64_t v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setImage:", v17, 0, 0);
        goto LABEL_82;
      case 0xBu:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setOrganizationName:v17];
        goto LABEL_82;
      case 0xCu:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setDepartmentName:v17];
        goto LABEL_82;
      case 0xDu:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setJobTitle:v17];
        goto LABEL_82;
      case 0xEu:
        unint64_t v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPhoneNumbers:", v17, 0, 0);
        }
        goto LABEL_82;
      case 0xFu:
        unint64_t v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addEmailAddresses:", v17, 0, 0);
        }
        goto LABEL_82;
      case 0x10u:
        unint64_t v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addPostalAddresses:", v17, 0, 0);
        }
        goto LABEL_82;
      case 0x11u:
        unint64_t v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addUrlAddresses:", v17, 0, 0);
        }
        goto LABEL_82;
      case 0x12u:
        unint64_t v17 = objc_alloc_init(_INPBContactRelationship);
        if (!PBReaderPlaceMark() || !_INPBContactRelationshipReadFrom(v17, a2)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addContactRelations:", v17, 0, 0);
        }
        goto LABEL_82;
      case 0x13u:
        unint64_t v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addInstantMessageAddresses:", v17, 0, 0);
        }
        goto LABEL_82;
      case 0x14u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBirthday:", v17, 0, 0);
        goto LABEL_82;
      case 0x15u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNonGregorianBirthday:", v17, 0, 0);
        goto LABEL_82;
      case 0x16u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (PBReaderPlaceMark() && _INPBDateTimeRangeValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addDates:", v17, 0, 0);
          }
LABEL_82:

LABEL_83:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_90:

        return 0;
      case 0x17u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPhoneticNamePrefix:v17];
        goto LABEL_82;
      case 0x18u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPhoneticFirstName:v17];
        goto LABEL_82;
      case 0x19u:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPhoneticMiddleName:v17];
        goto LABEL_82;
      case 0x1Au:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPhoneticNickName:v17];
        goto LABEL_82;
      case 0x1Bu:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPhoneticLastName:v17];
        goto LABEL_82;
      case 0x1Cu:
        PBReaderReadString();
        unint64_t v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPhoneticNameSuffix:v17];
        goto LABEL_82;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_83;
    }
  }
}

uint64_t INGetReservationDetailsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FB10 + a1);
  }
}

uint64_t _INPBListShortcutsIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unint64_t v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_39;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_42;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_42:
            objc_msgSend(a1, "setOriginDevice:", v24, v27, v28);
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        unint64_t v25 = objc_alloc_init(_INPBAppIdentifier);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v25, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        if (v25) {
          objc_msgSend(a1, "addAppTitle:", v25, 0, 0);
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INAppIdentifier *INIntentSlotValueTransformFromAppIdentifier(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INAppIdentifier alloc];
    id v3 = [v1 bundleIdentifier];
    uint64_t v4 = [v1 bundleVersion];
    uint64_t v5 = [v1 appName];

    uint64_t v6 = [(INAppIdentifier *)v2 initWithBundleIdentifier:v3 bundleVersion:v4 appName:v5];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

_INPBAppIdentifier *INIntentSlotValueTransformToAppIdentifier(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAppIdentifier);
    id v3 = [v1 bundleIdentifier];
    [(_INPBAppIdentifier *)v2 setBundleIdentifier:v3];

    uint64_t v4 = [v1 bundleVersion];
    [(_INPBAppIdentifier *)v2 setBundleVersion:v4];

    uint64_t v5 = [v1 appName];

    [(_INPBAppIdentifier *)v2 setAppName:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAppIdentifiers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAppIdentifier(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAppIdentifiers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAppIdentifier(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAppIdentifierFromAppIdentifier(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t INListShortcutsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FB78 + a1);
  }
}

uint64_t _INPBListShortcutsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBShortcutOverview);
        if (!PBReaderPlaceMark() || !_INPBShortcutOverviewReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addShortcuts:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INShortcutOverview *INIntentSlotValueTransformFromShortcutOverview(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    char v13 = [INShortcutOverview alloc];
    long long v14 = [v1 name];
    uint64_t v2 = INIntentSlotValueTransformFromDataString(v14);
    id v3 = [v1 voiceCommand];
    uint64_t v4 = INIntentSlotValueTransformFromDataString(v3);
    uint64_t v5 = [v1 icon];
    uint64_t v6 = INIntentSlotValueTransformFromImageValue(v5);
    long long v7 = [v1 descriptiveText];
    char v8 = INIntentSlotValueTransformFromDataString(v7);
    unsigned int v9 = [v1 steps];

    unint64_t v10 = INIntentSlotValueTransformFromImageValues(v9);
    uint64_t v11 = [(INShortcutOverview *)v13 initWithName:v2 voiceCommand:v4 icon:v6 descriptiveText:v8 steps:v10];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

_INPBShortcutOverview *INIntentSlotValueTransformToShortcutOverview(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBShortcutOverview);
    id v3 = [v1 name];
    uint64_t v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBShortcutOverview *)v2 setName:v4];

    uint64_t v5 = [v1 voiceCommand];
    uint64_t v6 = INIntentSlotValueTransformToDataString(v5);
    [(_INPBShortcutOverview *)v2 setVoiceCommand:v6];

    long long v7 = [v1 icon];
    char v8 = INIntentSlotValueTransformToImageValue(v7);
    [(_INPBShortcutOverview *)v2 setIcon:v8];

    unsigned int v9 = [v1 descriptiveText];
    unint64_t v10 = INIntentSlotValueTransformToDataString(v9);
    [(_INPBShortcutOverview *)v2 setDescriptiveText:v10];

    uint64_t v11 = [v1 steps];

    unint64_t v12 = INIntentSlotValueTransformToImageValues(v11);
    [(_INPBShortcutOverview *)v2 setSteps:v12];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromShortcutOverviews(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromShortcutOverview(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToShortcutOverviews(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToShortcutOverview(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedShortcutOverviewFromShortcutOverview(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBShortcutOverviewReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setName:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceCommand:", v17, 0, 0);
        goto LABEL_37;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIcon:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_41;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDescriptiveText:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && _INPBImageValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addSteps:", v17, 0, 0);
          }
LABEL_37:

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_38;
    }
  }
}

BOOL _INPBAirportGateReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        PBReaderReadString();
        char v18 = (_INPBAirport *)objc_claimAutoreleasedReturnValue();
        [a1 setTerminal:v18];
        goto LABEL_26;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(_INPBAirport);
        if (!PBReaderPlaceMark() || !_INPBAirportReadFrom(v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAirport:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadString();
    char v18 = (_INPBAirport *)objc_claimAutoreleasedReturnValue();
    [a1 setGate:v18];
LABEL_26:

    goto LABEL_28;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INAirportGate *INIntentSlotValueTransformFromAirportGate(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INAirportGate alloc];
    id v3 = [v1 airport];
    uint64_t v4 = INIntentSlotValueTransformFromAirport(v3);
    uint64_t v5 = [v1 terminal];
    uint64_t v6 = [v1 gate];

    long long v7 = [(INAirportGate *)v2 initWithAirport:v4 terminal:v5 gate:v6];
  }
  else
  {
    long long v7 = 0;
  }

  return v7;
}

_INPBAirportGate *INIntentSlotValueTransformToAirportGate(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAirportGate);
    id v3 = [v1 airport];
    uint64_t v4 = INIntentSlotValueTransformToAirport(v3);
    [(_INPBAirportGate *)v2 setAirport:v4];

    uint64_t v5 = [v1 terminal];
    [(_INPBAirportGate *)v2 setTerminal:v5];

    uint64_t v6 = [v1 gate];

    [(_INPBAirportGate *)v2 setGate:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAirportGates(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAirportGate(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAirportGates(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAirportGate(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAirportGateFromAirportGate(void *a1)
{
  id v1 = a1;

  return v1;
}

INReservationAction *INIntentSlotValueTransformFromReservationAction(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INReservationAction alloc];
    LODWORD(v3) = [v1 hasType];
    if ([v1 type] == 2) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = [v1 validDuration];
    uint64_t v5 = INIntentSlotValueTransformFromDateTimeRange(v4);
    uint64_t v6 = [v1 userActivity];

    long long v7 = INUserActivityDeserializeFromBackingStore(v6);
    char v8 = [(INReservationAction *)v2 initWithType:v3 validDuration:v5 userActivity:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

_INPBReservationAction *INIntentSlotValueTransformToReservationAction(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBReservationAction);
    uint64_t v3 = [v1 type];
    if (v3 == 1) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 0x7FFFFFFF;
    }
    if (v3) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 1;
    }
    [(_INPBReservationAction *)v2 setType:v5];
    uint64_t v6 = [v1 validDuration];
    long long v7 = INIntentSlotValueTransformToDateTimeRange(v6);
    [(_INPBReservationAction *)v2 setValidDuration:v7];

    char v8 = [v1 userActivity];

    unsigned int v9 = INUserActivitySerializeToBackingStore(v8);
    [(_INPBReservationAction *)v2 setUserActivity:v9];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromReservationActions(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromReservationAction(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToReservationActions(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToReservationAction(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedReservationActionFromReservationAction(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBReservationActionReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unint64_t v25 = objc_alloc_init(_INPBUserActivity);
        if (!PBReaderPlaceMark() || !_INPBUserActivityReadFrom(v25, a2))
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserActivity:", v25, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_38;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_41;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_41:
            [a1 setType:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        unint64_t v25 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v25, a2) & 1) == 0) {
          goto LABEL_44;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValidDuration:", v25, 0, 0);
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INReservationActionTypeHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INReservationActionTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1) {
    return v1;
  }
  else {
    return 1;
  }
}

uint64_t INReservationActionTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 2) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INReservationActionTypeGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"checkIn";
  }
  else {
    return @"unknown";
  }
}

uint64_t INReservationActionTypeWithString(void *a1)
{
  return [a1 isEqualToString:@"checkIn"];
}

id INReservationActionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"check in", @"check in", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

BOOL INTicketedEventCategoryHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INTicketedEventCategoryGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1) {
    return v1;
  }
  else {
    return 1;
  }
}

uint64_t INTicketedEventCategoryGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 2) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INTicketedEventCategoryGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"movie";
  }
  else {
    return @"unknown";
  }
}

uint64_t INTicketedEventCategoryWithString(void *a1)
{
  return [a1 isEqualToString:@"movie"];
}

id INTicketedEventCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"movie", @"movie", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

INMediaDestination *INIntentSlotValueTransformFromMediaDestination(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INMediaDestination alloc];
    int v3 = [v1 hasMediaDestinationType];
    int v4 = [v1 mediaDestinationType];
    uint64_t v5 = v4 == 1;
    if (v4 == 2) {
      uint64_t v5 = 2;
    }
    if (v3) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    long long v7 = [v1 playlistName];

    char v8 = INIntentSlotValueTransformFromString(v7);
    unsigned int v9 = [(INMediaDestination *)v2 initWithMediaDestinationType:v6 playlistName:v8];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

_INPBMediaDestination *INIntentSlotValueTransformToMediaDestination(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBMediaDestination);
    unint64_t v3 = [v1 mediaDestinationType];
    if (v3 >= 3) {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v4 = v3;
    }
    [(_INPBMediaDestination *)v2 setMediaDestinationType:v4];
    uint64_t v5 = [v1 playlistName];

    uint64_t v6 = INIntentSlotValueTransformToString(v5);
    [(_INPBMediaDestination *)v2 setPlaylistName:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMediaDestinations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromMediaDestination(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaDestinations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToMediaDestination(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMediaDestinationFromMediaDestination(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBConfidenceScoreComponentReadFrom(void *a1, uint64_t a2, double a3)
{
  uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v8 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v6)) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)(a2 + v12);
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)(a2 + *v5)) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          unint64_t v11 = 0;
          uint64_t v17 = *v6;
          int v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
      uint64_t v17 = *v6;
      int v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(unsigned char *)(a2 + v17)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      if (v18 || (v11 & 7) == 4) {
        break;
      }
      if ((v11 >> 3) == 1)
      {
        unint64_t v22 = PBReaderReadString();
        [a1 setSource:v22];
      }
      else if ((v11 >> 3) == 2)
      {
        uint64_t v20 = *v4;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + *v8) + v21);
          *(void *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v17) = 1;
          a3 = 0.0;
        }
        [a1 setScore:a3];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v4) < *(void *)(a2 + *v5));
  }
  return *(unsigned char *)(a2 + *v6) == 0;
}

uint64_t _INPBConfidenceScoreReadFrom(void *a1, uint64_t a2, double a3)
{
  uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v8 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v6)) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)(a2 + v12);
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)(a2 + *v5)) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          unint64_t v11 = 0;
          uint64_t v17 = *v6;
          int v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
      uint64_t v17 = *v6;
      int v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(unsigned char *)(a2 + v17)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      if (v18 || (v11 & 7) == 4) {
        break;
      }
      if ((v11 >> 3) == 2)
      {
        unint64_t v22 = objc_alloc_init(_INPBConfidenceScoreComponent);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBConfidenceScoreComponentReadFrom(v22, a2, v23))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v22) {
          objc_msgSend(a1, "addComponents:", v22, 0, 0);
        }
      }
      else if ((v11 >> 3) == 1)
      {
        uint64_t v20 = *v4;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + *v8) + v21);
          *(void *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v17) = 1;
          a3 = 0.0;
        }
        objc_msgSend(a1, "setAggregateScore:", a3, v25, v26);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v4) < *(void *)(a2 + *v5));
  }
  return *(unsigned char *)(a2 + *v6) == 0;
}

uint64_t _INPBHomeAttributeRangeReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          double v24 = *(double *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v24 = 0.0;
        }
        [a1 setUpperValue:v24];
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          double v21 = *(double *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v21 = 0.0;
        }
        [a1 setLowerValue:v21];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INStartCallIntentConfirmationReasonHasBackingType(uint64_t a1)
{
  BOOL v1 = a1 == 3 || a1 == 1000;
  BOOL v2 = a1 == 1 || a1 == 2;
  if (a1 <= 2) {
    return v2;
  }
  else {
    return v1;
  }
}

uint64_t INStartCallIntentConfirmationReasonGetBackingType(uint64_t a1)
{
  if (a1 == 1000) {
    int v1 = 4;
  }
  else {
    int v1 = 0x7FFFFFFF;
  }
  if (a1 == 3) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == 2) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 0x7FFFFFFF;
  }
  if (a1 == 1) {
    unsigned int v3 = 1;
  }
  if (a1 <= 2) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t INStartCallIntentConfirmationReasonGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 3) {
    return qword_18CFC5298[a2 - 1];
  }
  else {
    return 0;
  }
}

__CFString *INStartCallIntentConfirmationReasonGetName(uint64_t a1)
{
  if (a1 > 2)
  {
    if (a1 != 3)
    {
      if (a1 == 1000) {
        return @"hasRestrictedContacts";
      }
      return @"unknown";
    }
    return @"callBackEmergency";
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 2) {
        return @"redialEmergency";
      }
      return @"unknown";
    }
    return @"callsOnHomepod";
  }
}

uint64_t INStartCallIntentConfirmationReasonWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"callsOnHomepod"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"redialEmergency"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"callBackEmergency"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"hasRestrictedContacts"])
  {
    uint64_t v2 = 1000;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INStartCallIntentConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = 0;
  if (a1 > 2)
  {
    if (a1 == 3)
    {
      uint64_t v5 = @"call back emergency";
    }
    else
    {
      if (a1 != 1000) {
        goto LABEL_11;
      }
      uint64_t v5 = @"has restricted contacts";
    }
  }
  else if (a1 == 1)
  {
    uint64_t v5 = @"calls on homepod";
  }
  else
  {
    if (a1 != 2) {
      goto LABEL_11;
    }
    uint64_t v5 = @"redial emergency";
  }
  uint64_t v4 = INLocalizedStringWithLocalizer(v5, v5, v3);
LABEL_11:

  return v4;
}

uint64_t INPlayMessageSoundIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FBA8 + a1);
  }
}

BOOL _INPBPlayMessageSoundIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t _INPBPlayMessageSoundIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_36;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_39;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_39:
            [a1 setSoundType:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        PBReaderReadString();
        uint64_t v25 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setMessageIdentifier:v25];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INMessageSoundTypeHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INMessageSoundTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INMessageSoundTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INMessageSoundTypeGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"outgoingMessage";
  }
  else {
    return @"unknown";
  }
}

uint64_t INMessageSoundTypeWithString(void *a1)
{
  return [a1 isEqualToString:@"outgoingMessage"];
}

id INMessageSoundTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"outgoing message", @"outgoing message", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void INTaskWarningCodeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_8;
  }
  id v4 = v3;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
    id v3 = v4;
    if ((a1 & 4) == 0)
    {
LABEL_6:
      if ((a1 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
  id v3 = v4;
  if ((a1 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((a1 & 4) == 0) {
    goto LABEL_6;
  }
LABEL_13:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  id v3 = v4;
  if ((a1 & 8) != 0)
  {
LABEL_7:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
    id v3 = v4;
  }
LABEL_8:
}

unint64_t INTaskWarningCodeOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        uint64_t result = (result >> 1) & 1;
        break;
      case 3:
        uint64_t result = (result >> 2) & 1;
        break;
      case 4:
        uint64_t result = (result >> 3) & 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INTaskWarningCodeOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t *INTaskWarningCodeOptionsRemoveBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INTaskWarningCodeOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"locationServicesDisabled"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"flaggedNotAllowed"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0)
      {
LABEL_7:
        id v4 = (void *)[v3 copy];

        goto LABEL_9;
      }
LABEL_6:
      [v3 addObject:@"notUpgradedToCloudkit"];
      goto LABEL_7;
    }
LABEL_14:
    [v3 addObject:@"contactTriggerNotAllowed"];
    if ((v1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_9:

  return v4;
}

uint64_t INTaskWarningCodeOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v1);
        }
        int v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v4 |= [v7 isEqualToString:@"locationServicesDisabled"];
        if ([v7 isEqualToString:@"flaggedNotAllowed"]) {
          v4 |= 2uLL;
        }
        if ([v7 isEqualToString:@"contactTriggerNotAllowed"]) {
          v4 |= 4uLL;
        }
        if ([v7 isEqualToString:@"notUpgradedToCloudkit"]) {
          v4 |= 8uLL;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id INTaskWarningCodeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"location services disabled", @"location services disabled", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"flagged not allowed", @"flagged not allowed", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0)
      {
LABEL_7:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_9;
      }
LABEL_6:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"not upgraded to cloudkit", @"not upgraded to cloudkit", v3);
      [v4 addObject:v5];

      goto LABEL_7;
    }
LABEL_14:
    long long v10 = INLocalizedStringWithLocalizer(@"contact trigger not allowed", @"contact trigger not allowed", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_9:

  return v6;
}

uint64_t _INPBMediaItemGroupReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValues:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INParsecCategoryHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INParsecCategoryGetBackingType(unint64_t result)
{
  if (result >= 9) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INParsecCategoryGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 7) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INParsecCategoryGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7) {
    return @"unknown";
  }
  else {
    return *(&off_1E551FBD8 + a1 - 1);
  }
}

uint64_t INParsecCategoryWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"movie"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"TV"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"webVideo"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"music"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"podcast"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"app"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"book"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"other"])
  {
    uint64_t v2 = 8;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INParsecCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"movie";
      goto LABEL_11;
    case 2:
      id v4 = @"TV";
      goto LABEL_11;
    case 3:
      id v4 = @"web video";
      goto LABEL_11;
    case 4:
      id v4 = @"music";
      goto LABEL_11;
    case 5:
      id v4 = @"podcast";
      goto LABEL_11;
    case 6:
      id v4 = @"app";
      goto LABEL_11;
    case 7:
      id v4 = @"book";
      goto LABEL_11;
    case 8:
      id v4 = @"other";
LABEL_11:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t INFindEventsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FC18 + a1);
  }
}

uint64_t INFindDeviceAndPlaySoundIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FC48 + a1);
  }
}

uint64_t _INPBFindDeviceAndPlaySoundIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBDeviceDetail);
        if (!PBReaderPlaceMark() || !_INPBDeviceDetailReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addDevicesFound:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBFindDeviceAndPlaySoundIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 3)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_39;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_41;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_41:
            [a1 setIsStopRequest:v20 != 0];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = objc_alloc_init(_INPBDeviceDetail);
        if (!PBReaderPlaceMark() || !_INPBDeviceDetailReadFrom(v24, a2)) {
          goto LABEL_44;
        }
        PBReaderRecallMark();
        if (v24) {
          objc_msgSend(a1, "addDevice:", v24, 0, 0);
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBDeviceDetailReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        unint64_t v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setIdentifier:v17];
        goto LABEL_41;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_50;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDeviceName:", v17, 0, 0);
        goto LABEL_41;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_48:
        [a1 setDeviceClass:v25];
        goto LABEL_42;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_50;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProductName:", v17, 0, 0);
        goto LABEL_41;
      case 5u:
        unint64_t v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_50;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCategory:", v17, 0, 0);
        goto LABEL_41;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBContact);
        if PBReaderPlaceMark() && (_INPBContactReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDeviceOwner:", v17, 0, 0);
LABEL_41:

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_50:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

BOOL INDeviceClassHasBackingType(unint64_t a1)
{
  return a1 < 0xA;
}

unint64_t INDeviceClassGetBackingType(unint64_t result)
{
  if (result >= 0xA) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INDeviceClassGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 8) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INDeviceClassGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8) {
    return @"unknown";
  }
  else {
    return *(&off_1E551FCC8 + a1 - 1);
  }
}

uint64_t INDeviceClassWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"iPhone"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"iPad"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"watch"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"iPod"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"TV"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"Mac"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"homepod"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"headphone"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"accessories"])
  {
    uint64_t v2 = 9;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INDeviceClassGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"iPhone";
      goto LABEL_12;
    case 2:
      id v4 = @"iPad";
      goto LABEL_12;
    case 3:
      id v4 = @"watch";
      goto LABEL_12;
    case 4:
      id v4 = @"iPod";
      goto LABEL_12;
    case 5:
      id v4 = @"TV";
      goto LABEL_12;
    case 6:
      id v4 = @"Mac";
      goto LABEL_12;
    case 7:
      id v4 = @"homepod";
      goto LABEL_12;
    case 8:
      id v4 = @"headphone";
      goto LABEL_12;
    case 9:
      id v4 = @"accessories";
LABEL_12:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INDeviceDetail *INIntentSlotValueTransformFromDeviceDetail(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INDeviceDetail alloc];
    uint64_t v3 = [v1 identifier];
    char v19 = [v1 deviceName];
    id v4 = INIntentSlotValueTransformFromDataString(v19);
    int v5 = [v1 hasDeviceClass];
    uint64_t v6 = [v1 deviceClass] - 1;
    if (v6 <= 8) {
      uint64_t v7 = v6 + 1;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v5) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    unsigned int v9 = [v1 productName];
    unint64_t v10 = INIntentSlotValueTransformFromDataString(v9);
    uint64_t v11 = [v1 category];
    unint64_t v12 = INIntentSlotValueTransformFromDataString(v11);
    char v13 = [v1 deviceOwner];

    BOOL v14 = INIntentSlotValueTransformFromContact(v13);
    int v15 = v2;
    uint64_t v16 = (void *)v3;
    unint64_t v17 = [(INDeviceDetail *)v15 initWithIdentifier:v3 deviceName:v4 deviceClass:v8 productName:v10 category:v12 deviceOwner:v14];
  }
  else
  {
    unint64_t v17 = 0;
  }

  return v17;
}

_INPBDeviceDetail *INIntentSlotValueTransformToDeviceDetail(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBDeviceDetail);
    uint64_t v3 = [v1 identifier];
    [(_INPBDeviceDetail *)v2 setIdentifier:v3];

    id v4 = [v1 deviceName];
    int v5 = INIntentSlotValueTransformToDataString(v4);
    [(_INPBDeviceDetail *)v2 setDeviceName:v5];

    unint64_t v6 = [v1 deviceClass];
    if (v6 >= 0xA) {
      uint64_t v7 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v7 = v6;
    }
    [(_INPBDeviceDetail *)v2 setDeviceClass:v7];
    uint64_t v8 = [v1 productName];
    unsigned int v9 = INIntentSlotValueTransformToDataString(v8);
    [(_INPBDeviceDetail *)v2 setProductName:v9];

    unint64_t v10 = [v1 category];
    uint64_t v11 = INIntentSlotValueTransformToDataString(v10);
    [(_INPBDeviceDetail *)v2 setCategory:v11];

    unint64_t v12 = [v1 deviceOwner];

    char v13 = INIntentSlotValueTransformToContact(v12);
    [(_INPBDeviceDetail *)v2 setDeviceOwner:v13];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromDeviceDetails(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromDeviceDetail(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToDeviceDetails(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToDeviceDetail(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedDeviceDetailFromDeviceDetail(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBListCarsIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBListCarsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBCar);
        if (!PBReaderPlaceMark() || !_INPBCarReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addCars:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INListCarsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FD10 + a1);
  }
}

BOOL _INPBCarReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        unint64_t v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        [a1 setCarIdentifier:v17];
        goto LABEL_38;
      case 2u:
        PBReaderReadString();
        unint64_t v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        [a1 setDisplayName:v17];
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        unint64_t v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        [a1 setYear:v17];
        goto LABEL_38;
      case 4u:
        PBReaderReadString();
        unint64_t v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        [a1 setMake:v17];
        goto LABEL_38;
      case 5u:
        PBReaderReadString();
        unint64_t v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        [a1 setModel:v17];
        goto LABEL_38;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBColor);
        if (!PBReaderPlaceMark() || (_INPBColorReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setColor:", v17, 0, 0);
        goto LABEL_38;
      case 9u:
        unint64_t v17 = objc_alloc_init(_INPBCarHeadUnit);
        if (!PBReaderPlaceMark() || !_INPBCarHeadUnitReadFrom(v17, a2)) {
          goto LABEL_42;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHeadUnit:", v17, 0, 0);
        goto LABEL_38;
      case 0xAu:
        PBReaderReadString();
        unint64_t v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addSupportedChargingConnectors:v17];
        }
        goto LABEL_38;
      case 0xBu:
        unint64_t v17 = objc_alloc_init(_INPBCarChargingConnectorPower);
        if (PBReaderPlaceMark() && _INPBCarChargingConnectorPowerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addPowerPerConnector:", v17, 0, 0);
          }
LABEL_38:

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_39;
    }
  }
}

uint64_t _INPBColorReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
        {
          double v25 = *(double *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v25 = 0.0;
        }
        [a1 setRed:v25];
      }
      else if (v19 == 2)
      {
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          double v28 = *(double *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v28 = 0.0;
        }
        [a1 setGreen:v28];
      }
      else if (v19 == 3)
      {
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          double v22 = *(double *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v22 = 0.0;
        }
        [a1 setBlue:v22];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INCar *INIntentSlotValueTransformFromCar(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INCar alloc];
    int v17 = [v1 carIdentifier];
    id v3 = [v1 displayName];
    uint64_t v16 = [v1 year];
    int v15 = [v1 make];
    uint64_t v4 = [v1 model];
    char v18 = [v1 color];
    CFTypeRef v5 = INIntentSlotValueTransformFromColor(v18);
    uint64_t v6 = [v1 headUnit];
    uint64_t v7 = INIntentSlotValueTransformFromCarHeadUnit(v6);
    uint64_t v8 = [v1 supportedChargingConnectors];
    unsigned int v9 = (void *)v8;
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = MEMORY[0x1E4F1CBF0];
    }
    uint64_t v11 = [v1 powerPerConnectors];

    uint64_t v12 = INIntentSlotValueTransformFromCarChargingConnectorPowers(v11);
    unint64_t v13 = [(INCar *)v2 initWithCarIdentifier:v17 displayName:v3 year:v16 make:v15 model:v4 color:v5 headUnit:v7 supportedChargingConnectors:v10 powerPerConnectors:v12];
  }
  else
  {
    unint64_t v13 = 0;
  }

  return v13;
}

_INPBCar *INIntentSlotValueTransformToCar(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCar);
    id v3 = [v1 carIdentifier];
    [(_INPBCar *)v2 setCarIdentifier:v3];

    uint64_t v4 = [v1 displayName];
    [(_INPBCar *)v2 setDisplayName:v4];

    CFTypeRef v5 = [v1 year];
    [(_INPBCar *)v2 setYear:v5];

    uint64_t v6 = [v1 make];
    [(_INPBCar *)v2 setMake:v6];

    uint64_t v7 = [v1 model];
    [(_INPBCar *)v2 setModel:v7];

    uint64_t v8 = INIntentSlotValueTransformToColor([v1 color]);
    [(_INPBCar *)v2 setColor:v8];

    unsigned int v9 = [v1 headUnit];
    uint64_t v10 = INIntentSlotValueTransformToCarHeadUnit(v9);
    [(_INPBCar *)v2 setHeadUnit:v10];

    uint64_t v11 = [v1 supportedChargingConnectors];
    [(_INPBCar *)v2 setSupportedChargingConnectors:v11];

    uint64_t v12 = [v1 powerPerConnectors];

    unint64_t v13 = INIntentSlotValueTransformToCarChargingConnectorPowers(v12);
    [(_INPBCar *)v2 setPowerPerConnectors:v13];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCars(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromCar(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCars(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToCar(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCarFromCar(void *a1)
{
  id v1 = a1;

  return v1;
}

void *__getCGColorGetComponentsSymbolLoc_block_invoke_136571(uint64_t a1)
{
  uint64_t v2 = (void *)CoreGraphicsLibrary_136572();
  uint64_t result = dlsym(v2, "CGColorGetComponents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCGColorGetComponentsSymbolLoc_ptr_136570 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CoreGraphicsLibrary_136572()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!CoreGraphicsLibraryCore_frameworkLibrary_136577)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __CoreGraphicsLibraryCore_block_invoke_136578;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E551FD40;
    uint64_t v5 = 0;
    CoreGraphicsLibraryCore_frameworkLibrary_136577 = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = CoreGraphicsLibraryCore_frameworkLibrary_136577;
    if (CoreGraphicsLibraryCore_frameworkLibrary_136577)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return CoreGraphicsLibraryCore_frameworkLibrary_136577;
}

uint64_t __CoreGraphicsLibraryCore_block_invoke_136578()
{
  uint64_t result = _sl_dlopen();
  CoreGraphicsLibraryCore_frameworkLibrary_136577 = result;
  return result;
}

uint64_t soft_CGColorCreateSRGB(double a1, double a2, double a3, double a4)
{
  uint64_t v12 = 0;
  long long v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v8 = (uint64_t (*)(double, double, double, double))getCGColorCreateSRGBSymbolLoc_ptr_136622;
  int v15 = getCGColorCreateSRGBSymbolLoc_ptr_136622;
  if (!getCGColorCreateSRGBSymbolLoc_ptr_136622)
  {
    unsigned int v9 = (void *)CoreGraphicsLibrary_136572();
    v13[3] = (uint64_t)dlsym(v9, "CGColorCreateSRGB");
    getCGColorCreateSRGBSymbolLoc_ptr_136622 = (_UNKNOWN *)v13[3];
    uint64_t v8 = (uint64_t (*)(double, double, double, double))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    long long v11 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v11);
  }
  return v8(a1, a2, a3, a4);
}

void *__getCGColorCreateSRGBSymbolLoc_block_invoke_136623(uint64_t a1)
{
  uint64_t v2 = (void *)CoreGraphicsLibrary_136572();
  uint64_t result = dlsym(v2, "CGColorCreateSRGB");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCGColorCreateSRGBSymbolLoc_ptr_136622 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _INPBSetRelationshipIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_31;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v18, a2)) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        if (v18) {
          objc_msgSend(a1, "addContactIdentifiers:", v18, 0, 0);
        }
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBModifyRelationship);
    if (!PBReaderPlaceMark() || (_INPBModifyRelationshipReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_36;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetRelationship:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void INValidateReservationInteraction(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v25 = [a1 intentResponse];
  if (v25 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v1 = [MEMORY[0x1E4F1C9C8] date];
    id v2 = objc_alloc(MEMORY[0x1E4F1C9A8]);
    id v3 = (void *)[v2 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
    long long v4 = objc_opt_new();
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v5 = [v25 reservations];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v27;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v27 != v8) {
            objc_enumerationMutation(v5);
          }
          unint64_t v10 = *(void **)(*((void *)&v26 + 1) + 8 * v9);
          uint64_t v11 = [v10 itemReference];
          unint64_t v12 = [v11 vocabularyIdentifier];
          objc_msgSend(v4, "if_addObjectIfNonNil:", v12);

          char v13 = [v10 _duration];
          uint64_t v14 = [v13 startDateComponents];

          if (!v14) {
            NSLog((NSString *)@"Failed to process event suggestion – reservation start date missing.");
          }
          int v15 = [v13 endDateComponents];
          if (v15 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              NSLog((NSString *)@"Failed to process event suggestion – reservation end date missing.");
            }
          }
          uint64_t v16 = [v13 endDateComponents];

          if (v16)
          {
            unint64_t v17 = [v13 endDateComponents];
            char v18 = [v17 timeZone];
            [v3 setTimeZone:v18];

            unint64_t v19 = [v13 endDateComponents];
            uint64_t v20 = [v3 dateFromComponents:v19];

            if ([v1 compare:v20] == 1) {
              NSLog((NSString *)@"Failed to process event suggestion – reservation end date in the past (%@).", v20);
            }
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v21 = [v5 countByEnumeratingWithState:&v26 objects:v30 count:16];
        uint64_t v7 = v21;
      }
      while (v21);
    }

    uint64_t v22 = [v4 count];
    uint64_t v23 = [v25 reservations];
    uint64_t v24 = [v23 count];

    if (v22 != v24) {
      NSLog((NSString *)@"Failed to process event suggestion – two or more INReservation objects share the same INReservation.itemReference.vocabularyIdentifier value.");
    }
  }
  else
  {
  }
}

uint64_t _INPBSearchForContactIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || !_INPBContactCardReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addMatchedContacts:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForMeCardIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INSearchForMeCardIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FD58 + a1);
  }
}

BOOL _INPBSetNicknameIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBModifyNickname);
    if (!PBReaderPlaceMark() || (_INPBModifyNicknameReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetNickname:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INSearchForContactIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FDA0 + a1);
  }
}

uint64_t _INPBSetRelationshipIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || (_INPBContactCardReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMeCard:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INSetRelationshipIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FE10 + a1);
  }
}

uint64_t _INPBSearchForMeCardIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || (_INPBContactCardReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMeCard:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBSearchForContactIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addContactIdentifiers:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSetNicknameIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || (_INPBContactCardReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMeCard:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INSetNicknameIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FE68 + a1);
  }
}

BOOL _INPBRetrieveParkingLocationIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingLocation:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingNote:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INRetrieveParkingLocationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FEC0 + a1);
  }
}

uint64_t _INPBRetrieveParkingLocationIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBPrivateMediaItemValueDataReadFrom(void *a1, uint64_t a2, double a3)
{
  long long v4 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v6) == 0;
  }
  char v8 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v6)) {
      return *(unsigned char *)(a2 + *v6) == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *v4;
      uint64_t v13 = *(void *)(a2 + v12);
      unint64_t v14 = v13 + 1;
      if (v13 == -1 || v14 > *(void *)(a2 + *v5)) {
        break;
      }
      char v15 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
      *(void *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0) {
        goto LABEL_12;
      }
      v9 += 7;
      BOOL v16 = v10++ >= 9;
      if (v16)
      {
        unint64_t v11 = 0;
        uint64_t v17 = *v6;
        int v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
    uint64_t v17 = *v6;
    int v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(unsigned char *)(a2 + v17)) {
      unint64_t v11 = 0;
    }
LABEL_14:
    if (v18 || (v11 & 7) == 4) {
      return *(unsigned char *)(a2 + *v6) == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setRecommendationId:v20];
        goto LABEL_66;
      case 2u:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setAssetInfo:v20];
        goto LABEL_66;
      case 3u:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setSharedUserIdFromPlayableMusicAccount:v20];
        goto LABEL_66;
      case 4u:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setPunchoutURI:v20];
        goto LABEL_66;
      case 5u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        while (2)
        {
          uint64_t v24 = *v4;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v8) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v16 = v22++ >= 9;
              if (v16)
              {
                uint64_t v23 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v23 = 0;
        }
LABEL_74:
        [a1 setRequiresSubscription:v23 != 0];
        goto LABEL_67;
      case 6u:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setProvider:v20];
        goto LABEL_66;
      case 7u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        while (2)
        {
          uint64_t v31 = *v4;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v8) + v32);
            *(void *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v16 = v29++ >= 9;
              if (v16)
              {
                uint64_t v30 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v30 = 0;
        }
LABEL_78:
        [a1 setIsAvailable:v30 != 0];
        goto LABEL_67;
      case 8u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        while (2)
        {
          uint64_t v38 = *v4;
          uint64_t v39 = *(void *)(a2 + v38);
          unint64_t v40 = v39 + 1;
          if (v39 == -1 || v40 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v8) + v39);
            *(void *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              BOOL v16 = v36++ >= 9;
              if (v16)
              {
                uint64_t v37 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v37 = 0;
        }
LABEL_82:
        [a1 setIsHardBan:v37 != 0];
        goto LABEL_67;
      case 9u:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setBundleId:v20];
        goto LABEL_66;
      case 0xAu:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setUniversalResourceLink:v20];
        goto LABEL_66;
      case 0xBu:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setProviderAppName:v20];
        goto LABEL_66;
      case 0xCu:
        PBReaderReadString();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        if (v20) {
          [a1 addInternalSignal:v20];
        }
        goto LABEL_66;
      case 0xDu:
        uint64_t v42 = *v4;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(void *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + *v8) + v43);
          *(void *)(a2 + v42) = v43 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v17) = 1;
          a3 = 0.0;
        }
        objc_msgSend(a1, "setAmpConfidenceScore:", a3, v53, v54);
        goto LABEL_67;
      case 0xEu:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        while (2)
        {
          uint64_t v47 = *v4;
          uint64_t v48 = *(void *)(a2 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v8) + v48);
            *(void *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              BOOL v16 = v45++ >= 9;
              if (v16)
              {
                uint64_t v51 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v51 = 0;
        }
        else {
          uint64_t v51 = v46;
        }
LABEL_87:
        objc_msgSend(a1, "setAmpConfidenceLevel:", v51, v53, v54);
        goto LABEL_67;
      case 0xFu:
        PBReaderReadData();
        uint64_t v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        [a1 setPegasusMetaData:v20];
        goto LABEL_66;
      default:
        if ((v11 >> 3) != 100)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
LABEL_67:
          if (*(void *)(a2 + *v4) >= *(void *)(a2 + *v5)) {
            return *(unsigned char *)(a2 + *v6) == 0;
          }
          continue;
        }
        uint64_t v20 = objc_alloc_init(_INPBMediaSubItem);
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        if (PBReaderPlaceMark() && _INPBMediaSubItemReadFrom(v20, a2))
        {
          PBReaderRecallMark();
          if (v20) {
            objc_msgSend(a1, "addMediaSubItems:", v20, 0, 0);
          }
LABEL_66:

          goto LABEL_67;
        }

        return 0;
    }
  }
}

INPrivateMediaItemValueData *INIntentSlotValueTransformFromPrivateMediaItemValueData(INPrivateMediaItemValueData *a1)
{
  if (a1)
  {
    id v2 = a1;
    uint64_t v23 = [INPrivateMediaItemValueData alloc];
    uint64_t v25 = [(INPrivateMediaItemValueData *)v2 recommendationId];
    unint64_t v26 = [(INPrivateMediaItemValueData *)v2 assetInfo];
    uint64_t v3 = [(INPrivateMediaItemValueData *)v2 sharedUserIdFromPlayableMusicAccount];
    uint64_t v4 = [(INPrivateMediaItemValueData *)v2 punchoutURI];
    uint64_t v5 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivateMediaItemValueData requiresSubscription](v2, "requiresSubscription"));
    uint64_t v6 = [(INPrivateMediaItemValueData *)v2 provider];
    unsigned int v29 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivateMediaItemValueData isAvailable](v2, "isAvailable"));
    uint64_t v7 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivateMediaItemValueData isHardBan](v2, "isHardBan"));
    char v21 = [(INPrivateMediaItemValueData *)v2 bundleId];
    uint64_t v20 = [(INPrivateMediaItemValueData *)v2 universalResourceLink];
    unint64_t v19 = [(INPrivateMediaItemValueData *)v2 providerAppName];
    char v8 = [(INPrivateMediaItemValueData *)v2 internalSignals];
    char v9 = NSNumber;
    [(INPrivateMediaItemValueData *)v2 ampConfidenceScore];
    unsigned int v10 = objc_msgSend(v9, "numberWithFloat:");
    int v11 = [(INPrivateMediaItemValueData *)v2 hasAmpConfidenceLevel];
    int v12 = [(INPrivateMediaItemValueData *)v2 ampConfidenceLevel];
    unsigned int v22 = (void *)v6;
    char v27 = (void *)v3;
    char v28 = (void *)v4;
    if (v11)
    {
      uint64_t v13 = v25;
      switch(v12)
      {
        case 30:
          uint64_t v14 = 3;
          goto LABEL_9;
        case 20:
          uint64_t v14 = 2;
          goto LABEL_9;
        case 10:
          uint64_t v14 = 1;
LABEL_9:
          char v15 = [(INPrivateMediaItemValueData *)v2 pegasusMetaData];
          BOOL v16 = [(INPrivateMediaItemValueData *)v2 mediaSubItems];

          uint64_t v17 = INIntentSlotValueTransformFromMediaSubItems(v16);
          uint64_t v24 = -[INPrivateMediaItemValueData initWithRecommendationId:assetInfo:sharedUserIdFromPlayableMusicAccount:punchoutURI:requiresSubscription:provider:isAvailable:isHardBan:bundleId:universalResourceLink:providerAppName:internalSignals:ampConfidenceScore:ampConfidenceLevel:pegasusMetaData:mediaSubItems:](v23, "initWithRecommendationId:assetInfo:sharedUserIdFromPlayableMusicAccount:punchoutURI:requiresSubscription:provider:isAvailable:isHardBan:bundleId:universalResourceLink:providerAppName:internalSignals:ampConfidenceScore:ampConfidenceLevel:pegasusMetaData:mediaSubItems:", v13, v26, v27, v28, v5, v22, v29, v7, v21, v20, v19, v8, v10, v14, v15,
                  v17);

          a1 = v24;
          uint64_t v1 = vars8;
          goto LABEL_10;
      }
    }
    else
    {
      uint64_t v13 = v25;
    }
    uint64_t v14 = 0;
    goto LABEL_9;
  }
LABEL_10:
  return a1;
}

_INPBPrivateMediaItemValueData *INIntentSlotValueTransformToPrivateMediaItemValueData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc_init(_INPBPrivateMediaItemValueData);
    uint64_t v3 = [v1 recommendationId];
    [(_INPBPrivateMediaItemValueData *)v2 setRecommendationId:v3];

    uint64_t v4 = [v1 assetInfo];
    [(_INPBPrivateMediaItemValueData *)v2 setAssetInfo:v4];

    uint64_t v5 = [v1 sharedUserIdFromPlayableMusicAccount];
    [(_INPBPrivateMediaItemValueData *)v2 setSharedUserIdFromPlayableMusicAccount:v5];

    uint64_t v6 = [v1 punchoutURI];
    [(_INPBPrivateMediaItemValueData *)v2 setPunchoutURI:v6];

    uint64_t v7 = [v1 requiresSubscription];
    -[_INPBPrivateMediaItemValueData setRequiresSubscription:](v2, "setRequiresSubscription:", [v7 BOOLValue]);

    char v8 = [v1 provider];
    [(_INPBPrivateMediaItemValueData *)v2 setProvider:v8];

    char v9 = [v1 isAvailable];
    -[_INPBPrivateMediaItemValueData setIsAvailable:](v2, "setIsAvailable:", [v9 BOOLValue]);

    unsigned int v10 = [v1 isHardBan];
    -[_INPBPrivateMediaItemValueData setIsHardBan:](v2, "setIsHardBan:", [v10 BOOLValue]);

    int v11 = [v1 bundleId];
    [(_INPBPrivateMediaItemValueData *)v2 setBundleId:v11];

    int v12 = [v1 universalResourceLink];
    [(_INPBPrivateMediaItemValueData *)v2 setUniversalResourceLink:v12];

    uint64_t v13 = [v1 providerAppName];
    [(_INPBPrivateMediaItemValueData *)v2 setProviderAppName:v13];

    uint64_t v14 = [v1 internalSignals];
    [(_INPBPrivateMediaItemValueData *)v2 setInternalSignals:v14];

    char v15 = [v1 ampConfidenceScore];
    [v15 floatValue];
    -[_INPBPrivateMediaItemValueData setAmpConfidenceScore:](v2, "setAmpConfidenceScore:");

    unint64_t v16 = [v1 ampConfidenceLevel];
    if (v16 >= 4) {
      uint64_t v17 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v17 = (10 * v16);
    }
    [(_INPBPrivateMediaItemValueData *)v2 setAmpConfidenceLevel:v17];
    int v18 = [v1 pegasusMetaData];
    [(_INPBPrivateMediaItemValueData *)v2 setPegasusMetaData:v18];

    unint64_t v19 = [v1 mediaSubItems];

    uint64_t v20 = INIntentSlotValueTransformToMediaSubItems(v19);
    [(_INPBPrivateMediaItemValueData *)v2 setMediaSubItems:v20];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromPrivateMediaItemValueDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          INIntentSlotValueTransformFromPrivateMediaItemValueData(*(INPrivateMediaItemValueData **)(*((void *)&v11 + 1)
          char v8 = + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    char v9 = (void *)[v2 copy];
  }
  else
  {
    char v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateMediaItemValueDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToPrivateMediaItemValueData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    char v9 = (void *)[v2 copy];
  }
  else
  {
    char v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateMediaItemValueDataFromPrivateMediaItemValueData(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBStopShareETAIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addRecipient:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBShareETAIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v25 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v25, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v25) {
          objc_msgSend(a1, "addRecipient:", v25, 0, 0);
        }
      }
      else if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0;
            while (1)
            {
              uint64_t v22 = *v3;
              unint64_t v23 = *(void *)(a2 + v22);
              if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
              *(void *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                BOOL v14 = v20++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_32;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_32:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          while (1)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_49;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
          PBRepeatedInt32Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBShareETAIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addRecipient:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void INShareETAMediumOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_8;
  }
  id v4 = v3;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 1);
    id v3 = v4;
    if ((a1 & 4) == 0)
    {
LABEL_6:
      if ((a1 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  (*((void (**)(id, void))v3 + 2))(v3, 0);
  id v3 = v4;
  if ((a1 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((a1 & 4) == 0) {
    goto LABEL_6;
  }
LABEL_13:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  id v3 = v4;
  if ((a1 & 8) != 0)
  {
LABEL_7:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
    id v3 = v4;
  }
LABEL_8:
}

unint64_t INShareETAMediumOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result &= 1u;
        break;
      case 1:
        uint64_t result = (result >> 1) & 1;
        break;
      case 2:
        uint64_t result = (result >> 2) & 1;
        break;
      case 3:
        uint64_t result = (result >> 3) & 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INShareETAMediumOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 0:
        v2 |= 1uLL;
        break;
      case 1:
        v2 |= 2uLL;
        break;
      case 2:
        v2 |= 4uLL;
        break;
      case 3:
        v2 |= 8uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t *INShareETAMediumOptionsRemoveBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 0:
        v2 &= ~1uLL;
        break;
      case 1:
        v2 &= ~2uLL;
        break;
      case 2:
        v2 &= ~4uLL;
        break;
      case 3:
        v2 &= ~8uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INShareETAMediumOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"none"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"ids"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0)
      {
LABEL_7:
        id v4 = (void *)[v3 copy];

        goto LABEL_9;
      }
LABEL_6:
      [v3 addObject:@"SMS"];
      goto LABEL_7;
    }
LABEL_14:
    [v3 addObject:@"iMessage"];
    if ((v1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_9:

  return v4;
}

uint64_t INShareETAMediumOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v4 |= [v7 isEqualToString:@"none"];
        if ([v7 isEqualToString:@"ids"]) {
          v4 |= 2uLL;
        }
        if ([v7 isEqualToString:@"iMessage"]) {
          v4 |= 4uLL;
        }
        if ([v7 isEqualToString:@"SMS"]) {
          v4 |= 8uLL;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id INShareETAMediumOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"none", @"none", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"ids", @"ids", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0)
      {
LABEL_7:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_9;
      }
LABEL_6:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"SMS", @"SMS", v3);
      [v4 addObject:v5];

      goto LABEL_7;
    }
LABEL_14:
    long long v10 = INLocalizedStringWithLocalizer(@"iMessage", @"iMessage", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_9:

  return v6;
}

uint64_t INShareETAIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xF) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FF10 + a1);
  }
}

uint64_t _INPBStopShareETAIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v25 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v25, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v25) {
          objc_msgSend(a1, "addRecipient:", v25, 0, 0);
        }
      }
      else if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0;
            while (1)
            {
              uint64_t v22 = *v3;
              unint64_t v23 = *(void *)(a2 + v22);
              if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
              *(void *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                BOOL v14 = v20++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_32;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_32:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          while (1)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_49;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
          PBRepeatedInt32Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INStopShareETAIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0x10) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E551FFB0 + a1);
  }
}

uint64_t _INPBPrivatePlayMediaIntentDataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_125;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_127;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_125:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_127:
        [a1 setAppSelectionEnabled:v19 != 0];
        goto LABEL_122;
      case 2u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_131:
        [a1 setAppInferred:v25 != 0];
        goto LABEL_122;
      case 4u:
        unint64_t v30 = objc_alloc_init(_INPBMediaItemValue);
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v30, a2)) {
          goto LABEL_177;
        }
        PBReaderRecallMark();
        if (v30) {
          objc_msgSend(a1, "addAudioSearchResults:", v30, 0, 0);
        }
        goto LABEL_121;
      case 5u:
        unint64_t v30 = objc_alloc_init(_INPBPrivateMediaIntentData);
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v30, a2, v31) & 1) == 0) {
          goto LABEL_177;
        }
        PBReaderRecallMark();
        [a1 setPrivateMediaIntentData:v30];
        goto LABEL_121;
      case 6u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v34 = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v34 = 0;
        }
LABEL_135:
        [a1 setAppSelectionSignalsEnabled:v34 != 0];
        goto LABEL_122;
      case 7u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        while (2)
        {
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v14 = v39++ >= 9;
              if (v14)
              {
                uint64_t v44 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = v40;
        }
LABEL_140:
        objc_msgSend(a1, "setAppSelectionSignalsFrequencyDenominator:", v44, v96, v97);
        goto LABEL_122;
      case 8u:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        while (2)
        {
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v14 = v46++ >= 9;
              if (v14)
              {
                uint64_t v47 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v47 = 0;
        }
LABEL_144:
        [a1 setShouldSuppressCommonWholeHouseAudioRoutes:v47 != 0];
        goto LABEL_122;
      case 9u:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        while (2)
        {
          uint64_t v54 = *v3;
          unint64_t v55 = *(void *)(a2 + v54);
          if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
            *(void *)(a2 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v14 = v52++ >= 9;
              if (v14)
              {
                uint64_t v53 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v53 = 0;
        }
LABEL_148:
        [a1 setImmediatelyStartPlayback:v53 != 0];
        goto LABEL_122;
      case 0xAu:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v59 = 0;
        while (2)
        {
          uint64_t v60 = *v3;
          unint64_t v61 = *(void *)(a2 + v60);
          if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v61);
            *(void *)(a2 + v60) = v61 + 1;
            v59 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              BOOL v14 = v58++ >= 9;
              if (v14)
              {
                uint64_t v59 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v59 = 0;
        }
LABEL_152:
        [a1 setIsAmbiguousPlay:v59 != 0];
        goto LABEL_122;
      case 0xBu:
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v65 = 0;
        while (2)
        {
          uint64_t v66 = *v3;
          unint64_t v67 = *(void *)(a2 + v66);
          if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v68 = *(unsigned char *)(*(void *)(a2 + *v7) + v67);
            *(void *)(a2 + v66) = v67 + 1;
            v65 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              BOOL v14 = v64++ >= 9;
              if (v14)
              {
                uint64_t v65 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v65 = 0;
        }
LABEL_156:
        [a1 setIsPersonalizedRequest:v65 != 0];
        goto LABEL_122;
      case 0xCu:
        PBReaderReadString();
        unint64_t v30 = (_INPBMediaItemValue *)objc_claimAutoreleasedReturnValue();
        if (v30) {
          [a1 addInternalSignal:v30];
        }
        goto LABEL_121;
      case 0xDu:
        char v69 = 0;
        unsigned int v70 = 0;
        uint64_t v71 = 0;
        while (2)
        {
          uint64_t v72 = *v3;
          unint64_t v73 = *(void *)(a2 + v72);
          if (v73 == -1 || v73 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v74 = *(unsigned char *)(*(void *)(a2 + *v7) + v73);
            *(void *)(a2 + v72) = v73 + 1;
            v71 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              BOOL v14 = v70++ >= 9;
              if (v14)
              {
                uint64_t v71 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v71 = 0;
        }
LABEL_160:
        [a1 setEntityConfidenceSignalsEnabled:v71 != 0];
        goto LABEL_122;
      case 0xEu:
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v77 = 0;
        while (2)
        {
          uint64_t v78 = *v3;
          unint64_t v79 = *(void *)(a2 + v78);
          if (v79 == -1 || v79 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(a2 + *v7) + v79);
            *(void *)(a2 + v78) = v79 + 1;
            v77 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              BOOL v14 = v76++ >= 9;
              if (v14)
              {
                uint64_t v81 = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v81 = 0;
        }
        else {
          uint64_t v81 = v77;
        }
LABEL_165:
        objc_msgSend(a1, "setEntityConfidenceSignalsFrequencyDenominatorInternal:", v81, v96, v97);
        goto LABEL_122;
      case 0xFu:
        char v82 = 0;
        unsigned int v83 = 0;
        uint64_t v84 = 0;
        while (2)
        {
          uint64_t v85 = *v3;
          unint64_t v86 = *(void *)(a2 + v85);
          if (v86 == -1 || v86 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
            *(void *)(a2 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              BOOL v14 = v83++ >= 9;
              if (v14)
              {
                uint64_t v88 = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v88 = 0;
        }
        else {
          uint64_t v88 = v84;
        }
LABEL_170:
        objc_msgSend(a1, "setEntityConfidenceSignalsFrequencyDenominatorProd:", v88, v96, v97);
        goto LABEL_122;
      case 0x10u:
        char v89 = 0;
        unsigned int v90 = 0;
        uint64_t v91 = 0;
        while (2)
        {
          uint64_t v92 = *v3;
          unint64_t v93 = *(void *)(a2 + v92);
          if (v93 == -1 || v93 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v94 = *(unsigned char *)(*(void *)(a2 + *v7) + v93);
            *(void *)(a2 + v92) = v93 + 1;
            v91 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              BOOL v14 = v90++ >= 9;
              if (v14)
              {
                uint64_t v95 = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v95 = 0;
        }
        else {
          uint64_t v95 = v91;
        }
LABEL_175:
        objc_msgSend(a1, "setEntityConfidenceSignalsMaxItemsToDisambiguate:", v95, v96, v97);
        goto LABEL_122;
      case 0x11u:
        unint64_t v30 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v30, a2) & 1) == 0) {
          goto LABEL_177;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlternativeProviderBundleIdentifier:", v30, 0, 0);
        goto LABEL_121;
      case 0x12u:
        unint64_t v30 = objc_alloc_init(_INPBString);
        if PBReaderPlaceMark() && (_INPBStringReadFrom(v30, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAmpPAFDataSetID:", v30, 0, 0);
LABEL_121:

LABEL_122:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_177:

        return 0;
      case 0x13u:
        PBReaderReadData();
        unint64_t v30 = (_INPBMediaItemValue *)objc_claimAutoreleasedReturnValue();
        [a1 setPegasusMetaData:v30];
        goto LABEL_121;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_122;
    }
  }
}

INPrivatePlayMediaIntentData *INIntentSlotValueTransformFromPrivatePlayMediaIntentData(INPrivatePlayMediaIntentData *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v17 = [INPrivatePlayMediaIntentData alloc];
    unint64_t v27 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData appSelectionEnabled](v2, "appSelectionEnabled"));
    uint64_t v26 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData appInferred](v2, "appInferred"));
    unint64_t v21 = [(INPrivatePlayMediaIntentData *)v2 audioSearchResults];
    uint64_t v25 = INIntentSlotValueTransformFromMediaItemValues(v21);
    uint64_t v20 = [(INPrivatePlayMediaIntentData *)v2 privateMediaIntentData];
    uint64_t v19 = INIntentSlotValueTransformFromPrivateMediaIntentData(v20);
    int v16 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData appSelectionSignalsEnabled](v2, "appSelectionSignalsEnabled"));
    int v15 = objc_msgSend(NSNumber, "numberWithInt:", -[INPrivatePlayMediaIntentData appSelectionSignalsFrequencyDenominator](v2, "appSelectionSignalsFrequencyDenominator"));
    unsigned int v24 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData shouldSuppressCommonWholeHouseAudioRoutes](v2, "shouldSuppressCommonWholeHouseAudioRoutes"));
    char v23 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData immediatelyStartPlayback](v2, "immediatelyStartPlayback"));
    char v22 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData isAmbiguousPlay](v2, "isAmbiguousPlay"));
    BOOL v14 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData isPersonalizedRequest](v2, "isPersonalizedRequest"));
    unint64_t v12 = [(INPrivatePlayMediaIntentData *)v2 internalSignals];
    char v13 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsEnabled](v2, "entityConfidenceSignalsEnabled"));
    uint64_t v11 = objc_msgSend(NSNumber, "numberWithInt:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsFrequencyDenominatorInternal](v2, "entityConfidenceSignalsFrequencyDenominatorInternal"));
    unint64_t v10 = objc_msgSend(NSNumber, "numberWithInt:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsFrequencyDenominatorProd](v2, "entityConfidenceSignalsFrequencyDenominatorProd"));
    unsigned int v9 = objc_msgSend(NSNumber, "numberWithInt:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsMaxItemsToDisambiguate](v2, "entityConfidenceSignalsMaxItemsToDisambiguate"));
    id v3 = [(INPrivatePlayMediaIntentData *)v2 alternativeProviderBundleIdentifier];
    id v4 = INIntentSlotValueTransformFromString(v3);
    uint64_t v5 = [(INPrivatePlayMediaIntentData *)v2 ampPAFDataSetID];
    uint64_t v6 = INIntentSlotValueTransformFromString(v5);
    uint64_t v7 = [(INPrivatePlayMediaIntentData *)v2 pegasusMetaData];

    unsigned int v18 = -[INPrivatePlayMediaIntentData initWithAppSelectionEnabled:appInferred:audioSearchResults:privateMediaIntentData:appSelectionSignalsEnabled:appSelectionSignalsFrequencyDenominator:shouldSuppressCommonWholeHouseAudioRoutes:immediatelyStartPlayback:isAmbiguousPlay:isPersonalizedRequest:internalSignals:entityConfidenceSignalsEnabled:entityConfidenceSignalsFrequencyDenominatorInternal:entityConfidenceSignalsFrequencyDenominatorProd:entityConfidenceSignalsMaxItemsToDisambiguate:alternativeProviderBundleIdentifier:ampPAFDataSetID:pegasusMetaData:](v17, "initWithAppSelectionEnabled:appInferred:audioSearchResults:privateMediaIntentData:appSelectionSignalsEnabled:appSelectionSignalsFrequencyDenominator:shouldSuppressCommonWholeHouseAudioRoutes:immediatelyStartPlayback:isAmbiguousPlay:isPersonalizedRequest:internalSignals:entityConfidenceSignalsEnabled:entityConfidenceSignalsFrequencyDenominatorInternal:entityConfidenceSignalsFrequencyDenominatorProd:entityConfidenceSignalsMaxItemsToDisambiguate:alternativeProviderBundleIdentifier:ampPAFDataSetID:pegasusMetaData:", v27, v26, v25, v19, v16, v15, v24, v23, v22, v14, v12, v13, v11,
            v10,
            v9,
            v4,
            v6,
            v7);

    a1 = v18;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBPrivatePlayMediaIntentData *INIntentSlotValueTransformToPrivatePlayMediaIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBPrivatePlayMediaIntentData);
    id v3 = [v1 appSelectionEnabled];
    -[_INPBPrivatePlayMediaIntentData setAppSelectionEnabled:](v2, "setAppSelectionEnabled:", [v3 BOOLValue]);

    id v4 = [v1 appInferred];
    -[_INPBPrivatePlayMediaIntentData setAppInferred:](v2, "setAppInferred:", [v4 BOOLValue]);

    uint64_t v5 = [v1 audioSearchResults];
    uint64_t v6 = INIntentSlotValueTransformToMediaItemValues(v5);
    [(_INPBPrivatePlayMediaIntentData *)v2 setAudioSearchResults:v6];

    uint64_t v7 = [v1 privateMediaIntentData];
    char v8 = INIntentSlotValueTransformToPrivateMediaIntentData(v7);
    [(_INPBPrivatePlayMediaIntentData *)v2 setPrivateMediaIntentData:v8];

    unsigned int v9 = [v1 appSelectionSignalsEnabled];
    -[_INPBPrivatePlayMediaIntentData setAppSelectionSignalsEnabled:](v2, "setAppSelectionSignalsEnabled:", [v9 BOOLValue]);

    unint64_t v10 = [v1 appSelectionSignalsFrequencyDenominator];
    -[_INPBPrivatePlayMediaIntentData setAppSelectionSignalsFrequencyDenominator:](v2, "setAppSelectionSignalsFrequencyDenominator:", [v10 intValue]);

    uint64_t v11 = [v1 shouldSuppressCommonWholeHouseAudioRoutes];
    -[_INPBPrivatePlayMediaIntentData setShouldSuppressCommonWholeHouseAudioRoutes:](v2, "setShouldSuppressCommonWholeHouseAudioRoutes:", [v11 BOOLValue]);

    unint64_t v12 = [v1 immediatelyStartPlayback];
    -[_INPBPrivatePlayMediaIntentData setImmediatelyStartPlayback:](v2, "setImmediatelyStartPlayback:", [v12 BOOLValue]);

    char v13 = [v1 isAmbiguousPlay];
    -[_INPBPrivatePlayMediaIntentData setIsAmbiguousPlay:](v2, "setIsAmbiguousPlay:", [v13 BOOLValue]);

    BOOL v14 = [v1 isPersonalizedRequest];
    -[_INPBPrivatePlayMediaIntentData setIsPersonalizedRequest:](v2, "setIsPersonalizedRequest:", [v14 BOOLValue]);

    int v15 = [v1 internalSignals];
    [(_INPBPrivatePlayMediaIntentData *)v2 setInternalSignals:v15];

    int v16 = [v1 entityConfidenceSignalsEnabled];
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsEnabled:](v2, "setEntityConfidenceSignalsEnabled:", [v16 BOOLValue]);

    char v17 = [v1 entityConfidenceSignalsFrequencyDenominatorInternal];
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsFrequencyDenominatorInternal:](v2, "setEntityConfidenceSignalsFrequencyDenominatorInternal:", [v17 intValue]);

    unsigned int v18 = [v1 entityConfidenceSignalsFrequencyDenominatorProd];
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsFrequencyDenominatorProd:](v2, "setEntityConfidenceSignalsFrequencyDenominatorProd:", [v18 intValue]);

    uint64_t v19 = [v1 entityConfidenceSignalsMaxItemsToDisambiguate];
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsMaxItemsToDisambiguate:](v2, "setEntityConfidenceSignalsMaxItemsToDisambiguate:", [v19 intValue]);

    uint64_t v20 = [v1 alternativeProviderBundleIdentifier];
    unint64_t v21 = INIntentSlotValueTransformToString(v20);
    [(_INPBPrivatePlayMediaIntentData *)v2 setAlternativeProviderBundleIdentifier:v21];

    char v22 = [v1 ampPAFDataSetID];
    char v23 = INIntentSlotValueTransformToString(v22);
    [(_INPBPrivatePlayMediaIntentData *)v2 setAmpPAFDataSetID:v23];

    unsigned int v24 = [v1 pegasusMetaData];

    [(_INPBPrivatePlayMediaIntentData *)v2 setPegasusMetaData:v24];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromPrivatePlayMediaIntentDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromPrivatePlayMediaIntentData(*(INPrivatePlayMediaIntentData **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivatePlayMediaIntentDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToPrivatePlayMediaIntentData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivatePlayMediaIntentDataFromPrivatePlayMediaIntentData(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBBusTripReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setProvider:v17];
        goto LABEL_35;
      case 2u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setBusName:v17];
        goto LABEL_35;
      case 3u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setBusNumber:v17];
        goto LABEL_35;
      case 4u:
        char v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTripDuration:", v17, 0, 0);
        goto LABEL_35;
      case 5u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2)) {
          goto LABEL_39;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureBusStopLocation:", v17, 0, 0);
        goto LABEL_35;
      case 6u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setDeparturePlatform:v17];
        goto LABEL_35;
      case 7u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalBusStopLocation:", v17, 0, 0);
LABEL_35:

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_39:

        return 0;
      case 8u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setArrivalPlatform:v17];
        goto LABEL_35;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_36;
    }
  }
}

BOOL _INPBBoatTripReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setProvider:v17];
        goto LABEL_33;
      case 2u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setBoatName:v17];
        goto LABEL_33;
      case 3u:
        PBReaderReadString();
        char v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setBoatNumber:v17];
        goto LABEL_33;
      case 4u:
        char v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_37;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTripDuration:", v17, 0, 0);
        goto LABEL_33;
      case 5u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2)) {
          goto LABEL_37;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureBoatTerminalLocation:", v17, 0, 0);
        goto LABEL_33;
      case 6u:
        char v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalBoatTerminalLocation:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_34;
    }
  }
}

INBusTrip *INIntentSlotValueTransformFromBusTrip(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    long long v14 = [INBusTrip alloc];
    char v13 = [v1 provider];
    unint64_t v12 = [v1 busName];
    uint64_t v2 = [v1 busNumber];
    int v15 = [v1 tripDuration];
    id v3 = INIntentSlotValueTransformFromDateTimeRange(v15);
    uint64_t v4 = [v1 departureBusStopLocation];
    uint64_t v5 = INIntentSlotValueTransformFromLocationValue(v4);
    uint64_t v6 = [v1 departurePlatform];
    uint64_t v7 = [v1 arrivalBusStopLocation];
    char v8 = INIntentSlotValueTransformFromLocationValue(v7);
    unsigned int v9 = [v1 arrivalPlatform];

    unint64_t v10 = [(INBusTrip *)v14 initWithProvider:v13 busName:v12 busNumber:v2 tripDuration:v3 departureBusStopLocation:v5 departurePlatform:v6 arrivalBusStopLocation:v8 arrivalPlatform:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBBusTrip *INIntentSlotValueTransformToBusTrip(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBBusTrip);
    id v3 = [v1 provider];
    [(_INPBBusTrip *)v2 setProvider:v3];

    uint64_t v4 = [v1 busName];
    [(_INPBBusTrip *)v2 setBusName:v4];

    uint64_t v5 = [v1 busNumber];
    [(_INPBBusTrip *)v2 setBusNumber:v5];

    uint64_t v6 = [v1 tripDuration];
    uint64_t v7 = INIntentSlotValueTransformToDateTimeRange(v6);
    [(_INPBBusTrip *)v2 setTripDuration:v7];

    char v8 = [v1 departureBusStopLocation];
    unsigned int v9 = INIntentSlotValueTransformToLocationValue(v8);
    [(_INPBBusTrip *)v2 setDepartureBusStopLocation:v9];

    unint64_t v10 = [v1 departurePlatform];
    [(_INPBBusTrip *)v2 setDeparturePlatform:v10];

    uint64_t v11 = [v1 arrivalBusStopLocation];
    unint64_t v12 = INIntentSlotValueTransformToLocationValue(v11);
    [(_INPBBusTrip *)v2 setArrivalBusStopLocation:v12];

    char v13 = [v1 arrivalPlatform];

    [(_INPBBusTrip *)v2 setArrivalPlatform:v13];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromBusTrips(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromBusTrip(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBusTrips(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToBusTrip(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBusTripFromBusTrip(void *a1)
{
  id v1 = a1;

  return v1;
}

INBoatTrip *INIntentSlotValueTransformFromBoatTrip(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    long long v13 = [INBoatTrip alloc];
    uint64_t v2 = [v1 provider];
    id v3 = [v1 boatName];
    uint64_t v4 = [v1 boatNumber];
    uint64_t v5 = [v1 tripDuration];
    uint64_t v6 = INIntentSlotValueTransformFromDateTimeRange(v5);
    uint64_t v7 = [v1 departureBoatTerminalLocation];
    char v8 = INIntentSlotValueTransformFromLocationValue(v7);
    unsigned int v9 = [v1 arrivalBoatTerminalLocation];

    unint64_t v10 = INIntentSlotValueTransformFromLocationValue(v9);
    long long v11 = [(INBoatTrip *)v13 initWithProvider:v2 boatName:v3 boatNumber:v4 tripDuration:v6 departureBoatTerminalLocation:v8 arrivalBoatTerminalLocation:v10];
  }
  else
  {
    long long v11 = 0;
  }

  return v11;
}

_INPBBoatTrip *INIntentSlotValueTransformToBoatTrip(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBBoatTrip);
    id v3 = [v1 provider];
    [(_INPBBoatTrip *)v2 setProvider:v3];

    uint64_t v4 = [v1 boatName];
    [(_INPBBoatTrip *)v2 setBoatName:v4];

    uint64_t v5 = [v1 boatNumber];
    [(_INPBBoatTrip *)v2 setBoatNumber:v5];

    uint64_t v6 = [v1 tripDuration];
    uint64_t v7 = INIntentSlotValueTransformToDateTimeRange(v6);
    [(_INPBBoatTrip *)v2 setTripDuration:v7];

    char v8 = [v1 departureBoatTerminalLocation];
    unsigned int v9 = INIntentSlotValueTransformToLocationValue(v8);
    [(_INPBBoatTrip *)v2 setDepartureBoatTerminalLocation:v9];

    unint64_t v10 = [v1 arrivalBoatTerminalLocation];

    long long v11 = INIntentSlotValueTransformToLocationValue(v10);
    [(_INPBBoatTrip *)v2 setArrivalBoatTerminalLocation:v11];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromBoatTrips(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromBoatTrip(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBoatTrips(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToBoatTrip(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBoatTripFromBoatTrip(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBMediaSubItemReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v17 = PBReaderReadString();
        [a1 setAssetInfo:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = PBReaderReadString();
    [a1 setIdentifier:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INMediaSubItem *INIntentSlotValueTransformFromMediaSubItem(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INMediaSubItem alloc];
    id v3 = [v1 identifier];
    uint64_t v4 = [v1 assetInfo];

    uint64_t v5 = [(INMediaSubItem *)v2 initWithIdentifier:v3 assetInfo:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

_INPBMediaSubItem *INIntentSlotValueTransformToMediaSubItem(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBMediaSubItem);
    id v3 = [v1 identifier];
    [(_INPBMediaSubItem *)v2 setIdentifier:v3];

    uint64_t v4 = [v1 assetInfo];

    [(_INPBMediaSubItem *)v2 setAssetInfo:v4];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMediaSubItems(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromMediaSubItem(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaSubItems(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToMediaSubItem(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMediaSubItemFromMediaSubItem(void *a1)
{
  id v1 = a1;

  return v1;
}

INSpeakerIDInfo *INIntentSlotValueTransformFromSpeakerIDInfo(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INSpeakerIDInfo alloc];
    id v3 = [v1 sharedUserID];
    uint64_t v4 = INIntentSlotValueTransformFromString(v3);
    int v5 = [v1 hasSpeakerIDConfidence];
    int v6 = [v1 speakerIDConfidence];

    uint64_t v7 = (v6 - 1);
    if (v7 <= 4) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v5) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [(INSpeakerIDInfo *)v2 initWithSharedUserID:v4 speakerIDConfidence:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBSpeakerIDInfo *INIntentSlotValueTransformToSpeakerIDInfo(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBSpeakerIDInfo);
    id v3 = [v1 sharedUserID];
    uint64_t v4 = INIntentSlotValueTransformToString(v3);
    [(_INPBSpeakerIDInfo *)v2 setSharedUserID:v4];

    unint64_t v5 = [v1 speakerIDConfidence];
    if (v5 >= 6) {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v6 = v5;
    }
    [(_INPBSpeakerIDInfo *)v2 setSpeakerIDConfidence:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromSpeakerIDInfos(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromSpeakerIDInfo(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSpeakerIDInfos(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToSpeakerIDInfo(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSpeakerIDInfoFromSpeakerIDInfo(void *a1)
{
  id v1 = a1;

  return v1;
}

INPrivateMediaIntentData *INIntentSlotValueTransformFromPrivateMediaIntentData(INPrivateMediaIntentData *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v23 = [INPrivateMediaIntentData alloc];
    id v3 = [(INPrivateMediaIntentData *)v2 speakerIDInfo];
    uint64_t v4 = INIntentSlotValueTransformFromSpeakerIDInfo(v3);
    uint64_t v29 = [(INPrivateMediaIntentData *)v2 proxiedThirdPartyAppInfo];
    char v32 = INIntentSlotValueTransformFromAppIdentifier(v29);
    double v31 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivateMediaIntentData isAppAttributionRequired](v2, "isAppAttributionRequired"));
    char v28 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivateMediaIntentData useDialogMemoryForAttribution](v2, "useDialogMemoryForAttribution"));
    uint64_t v5 = objc_msgSend(NSNumber, "numberWithBool:", -[INPrivateMediaIntentData isAppCorrection](v2, "isAppCorrection"));
    unint64_t v27 = [(INPrivateMediaIntentData *)v2 fallbackUsername];
    uint64_t v26 = INIntentSlotValueTransformFromString(v27);
    uint64_t v25 = [(INPrivateMediaIntentData *)v2 wholeHouseAudioMetadata];
    uint64_t v6 = INIntentSlotValueTransformFromWholeHouseAudioMetadata(v25);
    uint64_t v7 = NSNumber;
    [(INPrivateMediaIntentData *)v2 nlConfidenceScore];
    uint64_t v8 = objc_msgSend(v7, "numberWithFloat:");
    int v9 = [(INPrivateMediaIntentData *)v2 hasNlConfidenceLevel];
    int v10 = [(INPrivateMediaIntentData *)v2 nlConfidenceLevel];
    unint64_t v30 = v3;
    unsigned int v33 = (void *)v4;
    if (!v9) {
      goto LABEL_7;
    }
    switch(v10)
    {
      case 30:
        uint64_t v11 = 3;
        break;
      case 20:
        uint64_t v11 = 2;
        break;
      case 10:
        uint64_t v11 = 1;
        break;
      default:
LABEL_7:
        uint64_t v11 = 0;
        break;
    }
    long long v12 = NSNumber;
    [(INPrivateMediaIntentData *)v2 asrConfidenceScore];
    long long v13 = objc_msgSend(v12, "numberWithFloat:");
    int v14 = [(INPrivateMediaIntentData *)v2 hasAsrConfidenceLevel];
    int v15 = [(INPrivateMediaIntentData *)v2 asrConfidenceLevel];
    char v22 = (void *)v5;
    if (!v14) {
      goto LABEL_13;
    }
    switch(v15)
    {
      case 30:
        uint64_t v16 = 3;
        break;
      case 20:
        uint64_t v16 = 2;
        break;
      case 10:
        uint64_t v16 = 1;
        break;
      default:
LABEL_13:
        uint64_t v16 = 0;
        break;
    }
    char v17 = [(INPrivateMediaIntentData *)v2 resolvedSharedUserID];
    unsigned int v18 = INIntentSlotValueTransformFromString(v17);
    uint64_t v19 = [(INPrivateMediaIntentData *)v2 homeAutomationEntityProvider];

    uint64_t v20 = INIntentSlotValueTransformFromHomeAutomationEntityProvider(v19);
    unsigned int v24 = [(INPrivateMediaIntentData *)v23 initWithSpeakerIDInfo:v33 proxiedThirdPartyAppInfo:v32 isAppAttributionRequired:v31 useDialogMemoryForAttribution:v28 isAppCorrection:v22 fallbackUsername:v26 wholeHouseAudioMetadata:v6 nlConfidenceScore:v8 nlConfidenceLevel:v11 asrConfidenceScore:v13 asrConfidenceLevel:v16 resolvedSharedUserID:v18 homeAutomationEntityProvider:v20];

    a1 = v24;
    uint64_t v1 = vars8;
  }
  return a1;
}

id INIntentSlotValueTransformToPrivateMediaIntentDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToPrivateMediaIntentData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    int v9 = (void *)[v2 copy];
  }
  else
  {
    int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateMediaIntentDataFromPrivateMediaIntentData(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBSpeakerIDInfoReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unsigned int v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSharedUserID:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setSpeakerIDConfidence:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBPrivateMediaIntentDataReadFrom(void *a1, uint64_t a2, double a3)
{
  uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v6) == 0;
  }
  char v8 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v6)) {
      return *(unsigned char *)(a2 + *v6) == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *v4;
      uint64_t v13 = *(void *)(a2 + v12);
      unint64_t v14 = v13 + 1;
      if (v13 == -1 || v14 > *(void *)(a2 + *v5)) {
        break;
      }
      char v15 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
      *(void *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0) {
        goto LABEL_12;
      }
      v9 += 7;
      BOOL v16 = v10++ >= 9;
      if (v16)
      {
        unint64_t v11 = 0;
        uint64_t v17 = *v6;
        int v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
    uint64_t v17 = *v6;
    int v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(unsigned char *)(a2 + v17)) {
      unint64_t v11 = 0;
    }
LABEL_14:
    if (v18 || (v11 & 7) == 4) {
      return *(unsigned char *)(a2 + *v6) == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        uint64_t v20 = objc_alloc_init(_INPBSpeakerIDInfo);
        if (!PBReaderPlaceMark() || (_INPBSpeakerIDInfoReadFrom(v20, a2) & 1) == 0) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeakerIDInfo:", v20, 0, 0);
        goto LABEL_80;
      case 2u:
        uint64_t v20 = objc_alloc_init(_INPBAppIdentifier);
        if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v20, a2)) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProxiedThirdPartyAppInfo:", v20, 0, 0);
        goto LABEL_80;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        while (2)
        {
          uint64_t v25 = *v4;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v8) + v26);
            *(void *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              BOOL v16 = v23++ >= 9;
              if (v16)
              {
                uint64_t v24 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v24 = 0;
        }
LABEL_86:
        [a1 setIsAppAttributionRequired:v24 != 0];
        goto LABEL_81;
      case 4u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        while (2)
        {
          uint64_t v32 = *v4;
          uint64_t v33 = *(void *)(a2 + v32);
          unint64_t v34 = v33 + 1;
          if (v33 == -1 || v34 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v8) + v33);
            *(void *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              BOOL v16 = v30++ >= 9;
              if (v16)
              {
                uint64_t v31 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v31 = 0;
        }
LABEL_90:
        [a1 setUseDialogMemoryForAttribution:v31 != 0];
        goto LABEL_81;
      case 5u:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        while (2)
        {
          uint64_t v39 = *v4;
          uint64_t v40 = *(void *)(a2 + v39);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + *v8) + v40);
            *(void *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              BOOL v16 = v37++ >= 9;
              if (v16)
              {
                uint64_t v38 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v38 = 0;
        }
LABEL_94:
        [a1 setIsAppCorrection:v38 != 0];
        goto LABEL_81;
      case 6u:
        uint64_t v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFallbackUsername:", v20, 0, 0);
        goto LABEL_80;
      case 7u:
        uint64_t v20 = objc_alloc_init(_INPBWholeHouseAudioMetadata);
        if (!PBReaderPlaceMark() || (_INPBWholeHouseAudioMetadataReadFrom(v20, a2) & 1) == 0) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setWholeHouseAudioMetadata:", v20, 0, 0);
        goto LABEL_80;
      case 8u:
        uint64_t v43 = *v4;
        unint64_t v44 = *(void *)(a2 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(void *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + *v8) + v44);
          *(void *)(a2 + v43) = v44 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v17) = 1;
          a3 = 0.0;
        }
        [a1 setNlConfidenceScore:a3];
        goto LABEL_81;
      case 9u:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        while (2)
        {
          uint64_t v48 = *v4;
          uint64_t v49 = *(void *)(a2 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(a2 + *v8) + v49);
            *(void *)(a2 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v16 = v46++ >= 9;
              if (v16)
              {
                uint64_t v52 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v52 = 0;
        }
        else {
          uint64_t v52 = v47;
        }
LABEL_99:
        [a1 setNlConfidenceLevel:v52];
        goto LABEL_81;
      case 0xAu:
        uint64_t v53 = *v4;
        unint64_t v54 = *(void *)(a2 + v53);
        if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(void *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + *v8) + v54);
          *(void *)(a2 + v53) = v54 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v17) = 1;
          a3 = 0.0;
        }
        [a1 setAsrConfidenceScore:a3];
        goto LABEL_81;
      case 0xBu:
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        while (2)
        {
          uint64_t v58 = *v4;
          uint64_t v59 = *(void *)(a2 + v58);
          unint64_t v60 = v59 + 1;
          if (v59 == -1 || v60 > *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(a2 + *v8) + v59);
            *(void *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              BOOL v16 = v56++ >= 9;
              if (v16)
              {
                uint64_t v62 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v6)) {
          uint64_t v62 = 0;
        }
        else {
          uint64_t v62 = v57;
        }
LABEL_104:
        [a1 setAsrConfidenceLevel:v62];
        goto LABEL_81;
      case 0xCu:
        uint64_t v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0) {
          goto LABEL_110;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setResolvedSharedUserID:", v20, 0, 0);
        goto LABEL_80;
      case 0xDu:
        uint64_t v20 = objc_alloc_init(_INPBHomeAutomationEntityProvider);
        if (PBReaderPlaceMark() && _INPBHomeAutomationEntityProviderReadFrom(v20, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setHomeAutomationEntityProvider:", v20, 0, 0);
LABEL_80:

LABEL_81:
          if (*(void *)(a2 + *v4) >= *(void *)(a2 + *v5)) {
            return *(unsigned char *)(a2 + *v6) == 0;
          }
          continue;
        }
LABEL_110:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_81;
    }
  }
}

BOOL _INPBPrivateAddMediaIntentDataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(_INPBPrivateMediaIntentData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v17, a2, v18) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        uint64_t v17 = objc_alloc_init(_INPBMediaItemValue);
        if (PBReaderPlaceMark() && _INPBMediaItemValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addAudioSearchResults:", v17, 0, 0);
          }
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      case 3u:
        PBReaderReadString();
        uint64_t v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addInternalSignal:v17];
        }
        goto LABEL_31;
      case 4u:
        PBReaderReadData();
        uint64_t v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        [a1 setPegasusMetaData:v17];
        goto LABEL_31;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

INPrivateAddMediaIntentData *INIntentSlotValueTransformFromPrivateAddMediaIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INPrivateAddMediaIntentData alloc];
    id v3 = [v1 privateMediaIntentData];
    uint64_t v4 = INIntentSlotValueTransformFromPrivateMediaIntentData(v3);
    uint64_t v5 = [v1 audioSearchResults];
    uint64_t v6 = INIntentSlotValueTransformFromMediaItemValues(v5);
    uint64_t v7 = [v1 internalSignals];
    char v8 = [v1 pegasusMetaData];

    unsigned int v9 = [(INPrivateAddMediaIntentData *)v2 initWithPrivateMediaIntentData:v4 audioSearchResults:v6 internalSignals:v7 pegasusMetaData:v8];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

_INPBPrivateAddMediaIntentData *INIntentSlotValueTransformToPrivateAddMediaIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBPrivateAddMediaIntentData);
    id v3 = [v1 privateMediaIntentData];
    uint64_t v4 = INIntentSlotValueTransformToPrivateMediaIntentData(v3);
    [(_INPBPrivateAddMediaIntentData *)v2 setPrivateMediaIntentData:v4];

    uint64_t v5 = [v1 audioSearchResults];
    uint64_t v6 = INIntentSlotValueTransformToMediaItemValues(v5);
    [(_INPBPrivateAddMediaIntentData *)v2 setAudioSearchResults:v6];

    uint64_t v7 = [v1 internalSignals];
    [(_INPBPrivateAddMediaIntentData *)v2 setInternalSignals:v7];

    char v8 = [v1 pegasusMetaData];

    [(_INPBPrivateAddMediaIntentData *)v2 setPegasusMetaData:v8];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueRedactedPrivateAddMediaIntentDataFromPrivateAddMediaIntentData(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBPrivateUpdateMediaAffinityIntentDataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        double v18 = objc_alloc_init(_INPBPrivateMediaIntentData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v18, a2, v19) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v18, 0, 0);
        goto LABEL_27;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        PBReaderReadString();
        double v18 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        if (v18) {
          [a1 addInternalSignal:v18];
        }
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadData();
    double v18 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
    [a1 setPegasusMetaData:v18];
LABEL_27:

    goto LABEL_29;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INPrivateUpdateMediaAffinityIntentData *INIntentSlotValueTransformFromPrivateUpdateMediaAffinityIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INPrivateUpdateMediaAffinityIntentData alloc];
    id v3 = [v1 privateMediaIntentData];
    uint64_t v4 = INIntentSlotValueTransformFromPrivateMediaIntentData(v3);
    uint64_t v5 = [v1 internalSignals];
    uint64_t v6 = [v1 pegasusMetaData];

    uint64_t v7 = [(INPrivateUpdateMediaAffinityIntentData *)v2 initWithPrivateMediaIntentData:v4 internalSignals:v5 pegasusMetaData:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

_INPBPrivateUpdateMediaAffinityIntentData *INIntentSlotValueTransformToPrivateUpdateMediaAffinityIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBPrivateUpdateMediaAffinityIntentData);
    id v3 = [v1 privateMediaIntentData];
    uint64_t v4 = INIntentSlotValueTransformToPrivateMediaIntentData(v3);
    [(_INPBPrivateUpdateMediaAffinityIntentData *)v2 setPrivateMediaIntentData:v4];

    uint64_t v5 = [v1 internalSignals];
    [(_INPBPrivateUpdateMediaAffinityIntentData *)v2 setInternalSignals:v5];

    uint64_t v6 = [v1 pegasusMetaData];

    [(_INPBPrivateUpdateMediaAffinityIntentData *)v2 setPegasusMetaData:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromPrivateUpdateMediaAffinityIntentDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromPrivateUpdateMediaAffinityIntentData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateUpdateMediaAffinityIntentDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToPrivateUpdateMediaAffinityIntentData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateUpdateMediaAffinityIntentDataFromPrivateUpdateMediaAffinityIntentData(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL INSpeakerIDConfidenceHasBackingType(unint64_t a1)
{
  return a1 < 6;
}

unint64_t INSpeakerIDConfidenceGetBackingType(unint64_t result)
{
  if (result >= 6) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INSpeakerIDConfidenceGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 4) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INSpeakerIDConfidenceGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return *(&off_1E5520068 + a1 - 1);
  }
}

uint64_t INSpeakerIDConfidenceWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"fullConfidence"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"highConfidence"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"mediumConfidence"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"ambiguousConfidence"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"noConfidence"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INSpeakerIDConfidenceGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"full confidence";
      goto LABEL_8;
    case 2:
      uint64_t v4 = @"high confidence";
      goto LABEL_8;
    case 3:
      uint64_t v4 = @"medium confidence";
      goto LABEL_8;
    case 4:
      uint64_t v4 = @"ambiguous confidence";
      goto LABEL_8;
    case 5:
      uint64_t v4 = @"no confidence";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBSendAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBAnnouncement);
        if (!PBReaderPlaceMark() || (_INPBAnnouncementReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAnnouncement:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBHomeFilter);
        if (PBReaderPlaceMark() && _INPBHomeFilterReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addRecipients:", v17, 0, 0);
          }
LABEL_39:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_43:
        [a1 setIsReply:v21 != 0];
        goto LABEL_44;
      case 5u:
        PBReaderReadString();
        unint64_t v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setSharedUserID:v17];
        goto LABEL_39;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

uint64_t _INPBSendAnnouncementIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBAnnouncementRecord);
        if (!PBReaderPlaceMark() || !_INPBAnnouncementRecordReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addSentAnnouncements:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INSendAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xE) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5520090 + a1);
  }
}

uint64_t INSetNumericSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 9) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5520108 + a1);
  }
}

uint64_t INGetSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5520158 + a1);
  }
}

BOOL _INPBSetLabeledSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 == 2)
      {
        double v18 = PBReaderReadString();
        [a1 setUpdatedValue:v18];
        goto LABEL_24;
      }
      if (v17 == 3)
      {
        double v18 = PBReaderReadString();
        [a1 setErrorDetail:v18];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    double v18 = PBReaderReadString();
    [a1 setOldValue:v18];
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INSetTemporalSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5520198 + a1);
  }
}

uint64_t _INPBSetBinarySettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_44;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v31 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
        uint64_t v31 = *(unsigned char *)(a2 + *v5) ? 0 : v27;
LABEL_47:
        [a1 setOldValue:v31];
      }
      else if (v17 == 3)
      {
        uint64_t v32 = PBReaderReadString();
        [a1 setErrorDetail:v32];
      }
      else if (v17 == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v24 = 0;
            goto LABEL_42;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        uint64_t v24 = *(unsigned char *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        [a1 setUpdatedValue:v24];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INSettingMetadata *INIntentSlotValueTransformFromSettingMetadata(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INSettingMetadata alloc];
    id v3 = [v1 settingId];
    uint64_t v4 = [v1 targetDevice];
    uint64_t v5 = INIntentSlotValueTransformFromDevice(v4);
    uint64_t v6 = [v1 targetApp];

    uint64_t v7 = INIntentSlotValueTransformFromAppIdentifier(v6);
    char v8 = [(INSettingMetadata *)v2 initWithSettingId:v3 targetDevice:v5 targetApp:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

id INIntentSlotValueTransformFromSettingMetadatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromSettingMetadata(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSettingMetadatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToSettingMetadata(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSettingMetadataFromSettingMetadata(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t INSetLabeledSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E55201F8 + a1);
  }
}

uint64_t INBinarySettingValueHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INBinarySettingValueGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INBinarySettingValueGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INBinarySettingValueGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return *(&off_1E5520240 + a1 - 1);
  }
}

uint64_t INBinarySettingValueWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"on"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"off"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"toggle"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INBinarySettingValueGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"toggle";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"off";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"on";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

uint64_t _INPBGetSettingResponseDataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2)) {
          goto LABEL_55;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBNumericSettingValue);
        if PBReaderPlaceMark() && (_INPBNumericSettingValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNumericValue:", v17, 0, 0);
LABEL_42:

LABEL_53:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_55:

        return 0;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_47:
        [a1 setBoundedValue:v25];
        goto LABEL_53;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_52:
        [a1 setBinaryValue:v32];
        goto LABEL_53;
      case 5u:
        PBReaderReadString();
        unint64_t v17 = (_INPBSettingMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setLabeledValue:v17];
        goto LABEL_42;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_53;
    }
  }
}

uint64_t _INPBDeviceReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v25 = PBReaderReadString();
        [a1 setDeviceName:v25];
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 3)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_37;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_37:
            [a1 setDeviceCategory:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v25 = PBReaderReadString();
        [a1 setDeviceModel:v25];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBSetTemporalSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOldValue:", v18, 0, 0);
        goto LABEL_28;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        PBReaderReadString();
        char v18 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        [a1 setErrorDetail:v18];
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBDateTimeRange);
    if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_33;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setUpdatedValue:", v18, 0, 0);
    goto LABEL_28;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INSettingDevice *INIntentSlotValueTransformFromDevice(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INSettingDevice alloc];
    id v3 = [v1 deviceName];
    uint64_t v4 = [v1 deviceModel];
    int v5 = [v1 hasDeviceCategory];
    int v6 = [v1 deviceCategory];

    uint64_t v7 = (v6 - 1);
    if (v7 <= 0xD) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v5) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [(INSettingDevice *)v2 initWithDeviceName:v3 deviceModel:v4 deviceCategory:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBDevice *INIntentSlotValueTransformToDevice(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBDevice);
    id v3 = [v1 deviceName];
    [(_INPBDevice *)v2 setDeviceName:v3];

    uint64_t v4 = [v1 deviceModel];
    [(_INPBDevice *)v2 setDeviceModel:v4];

    uint64_t v5 = [v1 deviceCategory];
    if ((unint64_t)(v5 - 1) < 0xE) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    [(_INPBDevice *)v2 setDeviceCategory:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromDevices(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromDevice(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToDevices(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToDevice(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedDeviceFromDevice(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t INSettingActionHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INSettingActionGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INSettingActionGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INSettingActionGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return *(&off_1E55202F8 + a1 - 1);
  }
}

uint64_t INSettingActionWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"set"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"increase"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"decrease"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INSettingActionGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"decrease";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"increase";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"set";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

uint64_t INSetBinarySettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5520310 + a1);
  }
}

uint64_t _INPBSetTemporalSettingIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_48;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2)) {
          goto LABEL_48;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_48;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTimeValue:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_33:

LABEL_46:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_48:

        return 0;
      case 5u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_45:
        [a1 setAction:v25];
        goto LABEL_46;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_46;
    }
  }
}

BOOL _INPBSettingMetadataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(_INPBAppIdentifier);
        if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v18, a2))
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetApp:", v18, 0, 0);
        goto LABEL_28;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        PBReaderReadString();
        char v18 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
        [a1 setSettingId:v18];
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBDevice);
    if (!PBReaderPlaceMark() || (_INPBDeviceReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_33;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetDevice:", v18, 0, 0);
    goto LABEL_28;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INNumericSettingValue *INIntentSlotValueTransformFromNumericSettingValue(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INNumericSettingValue alloc];
    id v3 = NSNumber;
    [v1 value];
    uint64_t v4 = objc_msgSend(v3, "numberWithDouble:");
    unsigned int v5 = [v1 hasUnit];
    int v6 = [v1 unit];

    if (v6 == 1) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0;
    }
    char v8 = [(INNumericSettingValue *)v2 initWithValue:v4 unit:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

_INPBNumericSettingValue *INIntentSlotValueTransformToNumericSettingValue(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBNumericSettingValue);
    id v3 = [v1 value];
    [v3 doubleValue];
    -[_INPBNumericSettingValue setValue:](v2, "setValue:");

    uint64_t v4 = [v1 unit];
    if (v4 == 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = 0x7FFFFFFFLL;
    }
    [(_INPBNumericSettingValue *)v2 setUnit:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromNumericSettingValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromNumericSettingValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToNumericSettingValues(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToNumericSettingValue(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedNumericSettingValueFromNumericSettingValue(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBGetSettingIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 3)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_38;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_41;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_41:
            [a1 setConfirmationValue:v24];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v25 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v25, a2)) {
          goto LABEL_44;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v25, 0, 0);
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSetNumericSettingIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_47;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2)) {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_47;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumericValue:", v17, 0, 0);
        goto LABEL_47;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_52:
        [a1 setBoundedValue:v25];
        goto LABEL_58;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_57:
        [a1 setAction:v32];
        goto LABEL_58;
      case 6u:
        unint64_t v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_47:

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_60:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

uint64_t _INPBNumericSettingValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          double v29 = *(double *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v29 = 0.0;
        }
        [a1 setValue:v29];
      }
      else if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (1)
        {
          uint64_t v22 = *v3;
          uint64_t v23 = *(void *)(a2 + v22);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0) {
            goto LABEL_33;
          }
          v19 += 7;
          BOOL v15 = v20++ >= 9;
          if (v15)
          {
            uint64_t v26 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        uint64_t v26 = *(unsigned char *)(a2 + *v5) ? 0 : v21;
LABEL_36:
        [a1 setUnit:v26];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBGetSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        int v17 = (_INPBGetSettingResponseData *)objc_claimAutoreleasedReturnValue();
        [a1 setErrorDetail:v17];
LABEL_25:

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v17 = objc_alloc_init(_INPBGetSettingResponseData);
    if (!PBReaderPlaceMark() || !_INPBGetSettingResponseDataReadFrom(v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addSettingResponseData:", v17, 0, 0);
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18CF06948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MediaRemoteLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!MediaRemoteLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __MediaRemoteLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E55203C0;
    uint64_t v5 = 0;
    MediaRemoteLibraryCore_frameworkLibrary = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = MediaRemoteLibraryCore_frameworkLibrary;
    if (MediaRemoteLibraryCore_frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return MediaRemoteLibraryCore_frameworkLibrary;
}

uint64_t MediaPlayerLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __MediaPlayerLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E55203D8;
    uint64_t v5 = 0;
    MediaPlayerLibraryCore_frameworkLibrary = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = MediaPlayerLibraryCore_frameworkLibrary;
    if (MediaPlayerLibraryCore_frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return MediaPlayerLibraryCore_frameworkLibrary;
}

id getMPMediaItemPropertyArtwork()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v0 = (void **)getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  uint64_t v8 = getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  if (!getMPMediaItemPropertyArtworkSymbolLoc_ptr)
  {
    id v1 = (void *)MediaPlayerLibrary();
    v6[3] = (uint64_t)dlsym(v1, "MPMediaItemPropertyArtwork");
    getMPMediaItemPropertyArtworkSymbolLoc_ptr = v6[3];
    uint64_t v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    long long v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }
  uint64_t v2 = *v0;

  return v2;
}

uint64_t getkMRMediaRemoteNowPlayingInfoArtworkData()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr;
  uint64_t v7 = getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr;
  if (!getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr)
  {
    id v1 = (void *)MediaRemoteLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kMRMediaRemoteNowPlayingInfoArtworkData");
    getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    id v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(void *)v0;
}

uint64_t getkMRMediaRemoteNowPlayingInfoArtworkDataWidth()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr;
  uint64_t v7 = getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr;
  if (!getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr)
  {
    id v1 = (void *)MediaRemoteLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kMRMediaRemoteNowPlayingInfoArtworkDataWidth");
    getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    id v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(void *)v0;
}

uint64_t getkMRMediaRemoteNowPlayingInfoArtworkDataHeight()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr;
  uint64_t v7 = getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr;
  if (!getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr)
  {
    id v1 = (void *)MediaRemoteLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kMRMediaRemoteNowPlayingInfoArtworkDataHeight");
    getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    id v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(void *)v0;
}

void *__getkMRMediaRemoteNowPlayingInfoArtworkMIMETypeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteNowPlayingInfoArtworkMIMEType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkMRMediaRemoteNowPlayingInfoArtworkMIMETypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getMPNowPlayingInfoDictionaryToMRNowPlayingInfoDictionarySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPNowPlayingInfoDictionaryToMRNowPlayingInfoDictionary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPNowPlayingInfoDictionaryToMRNowPlayingInfoDictionarySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                        + 24);
  return result;
}

void *__getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteNowPlayingInfoArtworkDataHeight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteNowPlayingInfoArtworkDataWidth");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteNowPlayingInfoArtworkData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyArtworkSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyArtwork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyArtworkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t __MediaRemoteLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaRemoteLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t _INPBSetBinarySettingIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        int v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        int v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v21;
        }
LABEL_42:
        [a1 setBinaryValue:v25];
        goto LABEL_43;
      case 4u:
        int v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_37:

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

BOOL _INPBSetNumericSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        int v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOldValue:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        int v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUpdatedValue:", v17, 0, 0);
        goto LABEL_34;
      case 3u:
        int v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_38;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMinValue:", v17, 0, 0);
        goto LABEL_34;
      case 4u:
        int v17 = objc_alloc_init(_INPBNumericSettingValue);
        if PBReaderPlaceMark() && (_INPBNumericSettingValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMaxValue:", v17, 0, 0);
LABEL_34:

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      case 5u:
        PBReaderReadString();
        int v17 = (_INPBNumericSettingValue *)objc_claimAutoreleasedReturnValue();
        [a1 setErrorDetail:v17];
        goto LABEL_34;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_35;
    }
  }
}

BOOL INNumericSettingUnitHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INNumericSettingUnitGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INNumericSettingUnitGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INNumericSettingUnitGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"percentage";
  }
  else {
    return @"unknown";
  }
}

uint64_t INNumericSettingUnitWithString(void *a1)
{
  return [a1 isEqualToString:@"percentage"];
}

id INNumericSettingUnitGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"percentage", @"percentage", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

BOOL _INPBSetLabeledSettingIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        int v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        int v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2)) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        PBReaderReadString();
        int v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setLabeledValue:v17];
        goto LABEL_31;
      case 4u:
        int v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

uint64_t INDeviceCategoryHasBackingType(unint64_t a1)
{
  return (a1 < 0xF) & (0x7FFEu >> a1);
}

uint64_t INDeviceCategoryGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xE) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INDeviceCategoryGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 0xD) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INDeviceCategoryGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xD) {
    return @"unknown";
  }
  else {
    return off_1E5520408[a1 - 1];
  }
}

uint64_t INDeviceCategoryWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"phone"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"pad"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"watch"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"Mac"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"AppleTV"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"homePod"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"TVRemote"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"speaker"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"headphone"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"batteryCase"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"keyboard"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"trackpad"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"mouse"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"pencil"])
  {
    uint64_t v2 = 14;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INDeviceCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"phone";
      goto LABEL_17;
    case 2:
      uint64_t v4 = @"pad";
      goto LABEL_17;
    case 3:
      uint64_t v4 = @"watch";
      goto LABEL_17;
    case 4:
      uint64_t v4 = @"Mac";
      goto LABEL_17;
    case 5:
      uint64_t v4 = @"Apple TV";
      goto LABEL_17;
    case 6:
      uint64_t v4 = @"home pod";
      goto LABEL_17;
    case 7:
      uint64_t v4 = @"t v remote";
      goto LABEL_17;
    case 8:
      uint64_t v4 = @"speaker";
      goto LABEL_17;
    case 9:
      uint64_t v4 = @"headphone";
      goto LABEL_17;
    case 10:
      uint64_t v4 = @"battery case";
      goto LABEL_17;
    case 11:
      uint64_t v4 = @"keyboard";
      goto LABEL_17;
    case 12:
      uint64_t v4 = @"trackpad";
      goto LABEL_17;
    case 13:
      uint64_t v4 = @"mouse";
      goto LABEL_17;
    case 14:
      uint64_t v4 = @"pencil";
LABEL_17:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t INBoundedSettingValueHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INBoundedSettingValueGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INBoundedSettingValueGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INBoundedSettingValueGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5520478[a1 - 1];
  }
}

uint64_t INBoundedSettingValueWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"min"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"median"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"max"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INBoundedSettingValueGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"max";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"median";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"min";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

INGetSettingResponseData *INIntentSlotValueTransformFromGetSettingResponseData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INGetSettingResponseData alloc];
    id v3 = [v1 settingMetadata];
    uint64_t v4 = INIntentSlotValueTransformFromSettingMetadata(v3);
    uint64_t v5 = [v1 numericValue];
    uint64_t v6 = INIntentSlotValueTransformFromNumericSettingValue(v5);
    int v7 = [v1 hasBoundedValue];
    uint64_t v8 = [v1 boundedValue] - 1;
    if (v8 <= 2) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = [v1 hasBinaryValue];
    uint64_t v12 = [v1 binaryValue] - 1;
    if (v12 <= 2) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v11) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = [v1 labeledValue];

    uint64_t v16 = [(INGetSettingResponseData *)v2 initWithSettingMetadata:v4 numericValue:v6 boundedValue:v10 binaryValue:v14 labeledValue:v15];
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

_INPBGetSettingResponseData *INIntentSlotValueTransformToGetSettingResponseData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBGetSettingResponseData);
    id v3 = [v1 settingMetadata];
    uint64_t v4 = INIntentSlotValueTransformToSettingMetadata(v3);
    [(_INPBGetSettingResponseData *)v2 setSettingMetadata:v4];

    uint64_t v5 = [v1 numericValue];
    uint64_t v6 = INIntentSlotValueTransformToNumericSettingValue(v5);
    [(_INPBGetSettingResponseData *)v2 setNumericValue:v6];

    unint64_t v7 = [v1 boundedValue] - 1;
    if (v7 < 3) {
      uint64_t v8 = (v7 + 1);
    }
    else {
      uint64_t v8 = 0x7FFFFFFFLL;
    }
    [(_INPBGetSettingResponseData *)v2 setBoundedValue:v8];
    unint64_t v9 = [v1 binaryValue] - 1;
    if (v9 < 3) {
      uint64_t v10 = (v9 + 1);
    }
    else {
      uint64_t v10 = 0x7FFFFFFFLL;
    }
    [(_INPBGetSettingResponseData *)v2 setBinaryValue:v10];
    int v11 = [v1 labeledValue];

    [(_INPBGetSettingResponseData *)v2 setLabeledValue:v11];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromGetSettingResponseDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromGetSettingResponseData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    unint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToGetSettingResponseDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToGetSettingResponseData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    unint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedGetSettingResponseDataFromGetSettingResponseData(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBDeleteParkingLocationIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingLocation:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingNote:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INDeleteParkingLocationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520490[a1];
  }
}

__CFString *INSaveParkingLocationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E55204C0[a1];
  }
}

BOOL _INPBSaveParkingLocationIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingNote:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBLocation);
    if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingLocation:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBReadAnnouncementIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(_INPBAnnouncementRecord);
        if (!PBReaderPlaceMark() || !_INPBAnnouncementRecordReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addAnnouncementRecords:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBReadAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
          if PBReaderPlaceMark() && (_INPBIntentMetadataReadFrom(v17, a2))
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
            goto LABEL_32;
          }

          return 0;
        case 2u:
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_41;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_44;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = v21;
          }
LABEL_44:
          [a1 setReadType:v25];
          continue;
        case 3u:
          PBReaderReadString();
          unint64_t v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
          [a1 setStartAnnouncementIdentifier:v17];
LABEL_32:

          continue;
        case 4u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0) {
          goto LABEL_46;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          uint64_t v32 = 0;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
      uint64_t v32 = *(unsigned char *)(a2 + *v5) ? 0 : v28;
LABEL_49:
      [a1 setUserNotificationType:v32];
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INReadAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E55204F0[a1];
  }
}

INAnnouncement *INIntentSlotValueTransformFromAnnouncement(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INAnnouncement alloc];
    id v3 = [v1 speechDataURL];
    uint64_t v4 = INIntentSlotValueTransformFromURLValue(v3);
    uint64_t v5 = [v1 identifier];
    uint64_t v6 = [v1 speechDataTranscription];

    unint64_t v7 = [(INAnnouncement *)v2 initWithSpeechDataURL:v4 identifier:v5 speechDataTranscription:v6];
  }
  else
  {
    unint64_t v7 = 0;
  }

  return v7;
}

_INPBAnnouncement *INIntentSlotValueTransformToAnnouncement(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAnnouncement);
    id v3 = [v1 speechDataURL];
    uint64_t v4 = INIntentSlotValueTransformToURLValue(v3);
    [(_INPBAnnouncement *)v2 setSpeechDataURL:v4];

    uint64_t v5 = [v1 identifier];
    [(_INPBAnnouncement *)v2 setIdentifier:v5];

    uint64_t v6 = [v1 speechDataTranscription];

    [(_INPBAnnouncement *)v2 setSpeechDataTranscription:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAnnouncements(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAnnouncement(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAnnouncements(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAnnouncement(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAnnouncementFromAnnouncement(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBAnnouncementReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          unint64_t v17 = objc_alloc_init(_INPBURLValue);
          if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setSpeechDataURL:", v17, 0, 0);
            goto LABEL_40;
          }

          return 0;
        case 2u:
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_42;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = v21;
          }
LABEL_45:
          [a1 setStartTime:v25];
          continue;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          break;
        case 4u:
          PBReaderReadString();
          unint64_t v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setIdentifier:v17];
          goto LABEL_40;
        case 5u:
          PBReaderReadString();
          unint64_t v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          [a1 setSpeechDataTranscription:v17];
LABEL_40:

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0) {
          goto LABEL_47;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          uint64_t v32 = 0;
          goto LABEL_50;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
      uint64_t v32 = *(unsigned char *)(a2 + *v5) ? 0 : v28;
LABEL_50:
      [a1 setEndTime:v32];
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBOpenSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = PBReaderReadString();
        [a1 setErrorDetail:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = PBReaderReadString();
    [a1 setPunchoutUrl:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBOpenSettingIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSearchQuery:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBSettingMetadata);
    if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setSettingMetadata:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INOpenSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return off_1E5520520[a1];
  }
}

INPrivateSearchForMediaIntentData *INIntentSlotValueTransformFromPrivateSearchForMediaIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INPrivateSearchForMediaIntentData alloc];
    id v3 = [v1 privateMediaIntentData];
    uint64_t v4 = INIntentSlotValueTransformFromPrivateMediaIntentData(v3);
    uint64_t v5 = [v1 audioSearchResults];
    uint64_t v6 = INIntentSlotValueTransformFromMediaItemValues(v5);
    unint64_t v7 = [v1 internalSignals];
    char v8 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v1, "appInferred"));
    unsigned int v9 = [v1 pegasusMetaData];

    unint64_t v10 = [(INPrivateSearchForMediaIntentData *)v2 initWithPrivateMediaIntentData:v4 audioSearchResults:v6 internalSignals:v7 appInferred:v8 pegasusMetaData:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBPrivateSearchForMediaIntentData *INIntentSlotValueTransformToPrivateSearchForMediaIntentData(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBPrivateSearchForMediaIntentData);
    id v3 = [v1 privateMediaIntentData];
    uint64_t v4 = INIntentSlotValueTransformToPrivateMediaIntentData(v3);
    [(_INPBPrivateSearchForMediaIntentData *)v2 setPrivateMediaIntentData:v4];

    uint64_t v5 = [v1 audioSearchResults];
    uint64_t v6 = INIntentSlotValueTransformToMediaItemValues(v5);
    [(_INPBPrivateSearchForMediaIntentData *)v2 setAudioSearchResults:v6];

    unint64_t v7 = [v1 internalSignals];
    [(_INPBPrivateSearchForMediaIntentData *)v2 setInternalSignals:v7];

    char v8 = [v1 appInferred];
    -[_INPBPrivateSearchForMediaIntentData setAppInferred:](v2, "setAppInferred:", [v8 BOOLValue]);

    unsigned int v9 = [v1 pegasusMetaData];

    [(_INPBPrivateSearchForMediaIntentData *)v2 setPegasusMetaData:v9];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformToPrivateSearchForMediaIntentDatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToPrivateSearchForMediaIntentData(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateSearchForMediaIntentDataFromPrivateSearchForMediaIntentData(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBPrivateSearchForMediaIntentDataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBPrivateMediaIntentData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v17, a2, v18) & 1) == 0) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v17, 0, 0);
        goto LABEL_38;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBMediaItemValue);
        if (PBReaderPlaceMark() && _INPBMediaItemValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17) {
            objc_msgSend(a1, "addAudioSearchResults:", v17, 0, 0);
          }
LABEL_38:

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      case 3u:
        PBReaderReadString();
        unint64_t v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addInternalSignal:v17];
        }
        goto LABEL_38;
      case 4u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_42:
        [a1 setAppInferred:v22 != 0];
        goto LABEL_43;
      case 5u:
        PBReaderReadData();
        unint64_t v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        [a1 setPegasusMetaData:v17];
        goto LABEL_38;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

void INDayOfWeekOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_11;
  }
  id v4 = v3;
  if (a1)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
    id v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  id v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  id v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
    id v3 = v4;
    if ((a1 & 0x20) == 0)
    {
LABEL_9:
      if ((a1 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_17:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  id v3 = v4;
  if ((a1 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((a1 & 0x20) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 6);
  id v3 = v4;
  if ((a1 & 0x40) != 0)
  {
LABEL_10:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 7);
    id v3 = v4;
  }
LABEL_11:
}

unint64_t INDayOfWeekOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        uint64_t result = (result >> 1) & 1;
        break;
      case 3:
        uint64_t result = (result >> 2) & 1;
        break;
      case 4:
        uint64_t result = (result >> 3) & 1;
        break;
      case 5:
        uint64_t result = (result >> 4) & 1;
        break;
      case 6:
        uint64_t result = (result >> 5) & 1;
        break;
      case 7:
        uint64_t result = (result >> 6) & 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INDayOfWeekOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      case 5:
        v2 |= 0x10uLL;
        break;
      case 6:
        v2 |= 0x20uLL;
        break;
      case 7:
        v2 |= 0x40uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t *INDayOfWeekOptionsRemoveBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      case 5:
        v2 &= ~0x10uLL;
        break;
      case 6:
        v2 &= ~0x20uLL;
        break;
      case 7:
        v2 &= ~0x40uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INDayOfWeekOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"monday"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_17;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"tuesday"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_17:
    [v3 addObject:@"wednesday"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
LABEL_18:
    [v3 addObject:@"thursday"];
    if ((v1 & 0x10) == 0)
    {
LABEL_7:
      if ((v1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    [v3 addObject:@"friday"];
    if ((v1 & 0x20) == 0)
    {
LABEL_8:
      if ((v1 & 0x40) == 0)
      {
LABEL_10:
        id v4 = (void *)[v3 copy];

        goto LABEL_12;
      }
LABEL_9:
      [v3 addObject:@"sunday"];
      goto LABEL_10;
    }
LABEL_20:
    [v3 addObject:@"saturday"];
    if ((v1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_12:

  return v4;
}

uint64_t INDayOfWeekOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  obuint64_t j = a1;
  uint64_t v1 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v3 |= [v6 isEqualToString:@"monday"];
        if ([v6 isEqualToString:@"tuesday"]) {
          v3 |= 2uLL;
        }
        if ([v6 isEqualToString:@"wednesday"]) {
          v3 |= 4uLL;
        }
        if ([v6 isEqualToString:@"thursday"]) {
          v3 |= 8uLL;
        }
        if ([v6 isEqualToString:@"friday"]) {
          v3 |= 0x10uLL;
        }
        if ([v6 isEqualToString:@"saturday"]) {
          v3 |= 0x20uLL;
        }
        if ([v6 isEqualToString:@"sunday"]) {
          v3 |= 0x40uLL;
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id INDayOfWeekOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"monday", @"monday", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_17;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"tuesday", @"tuesday", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_17:
    long long v10 = INLocalizedStringWithLocalizer(@"wednesday", @"wednesday", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
LABEL_18:
    long long v11 = INLocalizedStringWithLocalizer(@"thursday", @"thursday", v3);
    [v4 addObject:v11];

    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    long long v12 = INLocalizedStringWithLocalizer(@"friday", @"friday", v3);
    [v4 addObject:v12];

    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x40) == 0)
      {
LABEL_10:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_12;
      }
LABEL_9:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"sunday", @"sunday", v3);
      [v4 addObject:v5];

      goto LABEL_10;
    }
LABEL_20:
    char v13 = INLocalizedStringWithLocalizer(@"saturday", @"saturday", v3);
    [v4 addObject:v13];

    if ((a1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_12:

  return v6;
}

void INShortcutAvailabilityOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_11;
  }
  id v4 = v3;
  if (a1)
  {
    (*((void (**)(id, void))v3 + 2))(v3, 0);
    id v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 1);
  id v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  id v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
    id v3 = v4;
    if ((a1 & 0x20) == 0)
    {
LABEL_9:
      if ((a1 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_17:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  id v3 = v4;
  if ((a1 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((a1 & 0x20) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
  id v3 = v4;
  if ((a1 & 0x40) != 0)
  {
LABEL_10:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 6);
    id v3 = v4;
  }
LABEL_11:
}

unint64_t INShortcutAvailabilityOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result &= 1u;
        break;
      case 1:
        uint64_t result = (result >> 1) & 1;
        break;
      case 2:
        uint64_t result = (result >> 2) & 1;
        break;
      case 3:
        uint64_t result = (result >> 3) & 1;
        break;
      case 4:
        uint64_t result = (result >> 4) & 1;
        break;
      case 5:
        uint64_t result = (result >> 5) & 1;
        break;
      case 6:
        uint64_t result = (result >> 6) & 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INShortcutAvailabilityOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 0:
        v2 |= 1uLL;
        break;
      case 1:
        v2 |= 2uLL;
        break;
      case 2:
        v2 |= 4uLL;
        break;
      case 3:
        v2 |= 8uLL;
        break;
      case 4:
        v2 |= 0x10uLL;
        break;
      case 5:
        v2 |= 0x20uLL;
        break;
      case 6:
        v2 |= 0x40uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t *INShortcutAvailabilityOptionsRemoveBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 0:
        v2 &= ~1uLL;
        break;
      case 1:
        v2 &= ~2uLL;
        break;
      case 2:
        v2 &= ~4uLL;
        break;
      case 3:
        v2 &= ~8uLL;
        break;
      case 4:
        v2 &= ~0x10uLL;
        break;
      case 5:
        v2 &= ~0x20uLL;
        break;
      case 6:
        v2 &= ~0x40uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INShortcutAvailabilityOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"sleepMindfulness"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_17;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"sleepJournaling"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_17:
    [v3 addObject:@"sleepMusic"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
LABEL_18:
    [v3 addObject:@"sleepPodcasts"];
    if ((v1 & 0x10) == 0)
    {
LABEL_7:
      if ((v1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    [v3 addObject:@"sleepReading"];
    if ((v1 & 0x20) == 0)
    {
LABEL_8:
      if ((v1 & 0x40) == 0)
      {
LABEL_10:
        id v4 = (void *)[v3 copy];

        goto LABEL_12;
      }
LABEL_9:
      [v3 addObject:@"sleepYogaAndStretching"];
      goto LABEL_10;
    }
LABEL_20:
    [v3 addObject:@"sleepWrapUpYourDay"];
    if ((v1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_12:

  return v4;
}

uint64_t INShortcutAvailabilityOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  obuint64_t j = a1;
  uint64_t v1 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v3 |= [v6 isEqualToString:@"sleepMindfulness"];
        if ([v6 isEqualToString:@"sleepJournaling"]) {
          v3 |= 2uLL;
        }
        if ([v6 isEqualToString:@"sleepMusic"]) {
          v3 |= 4uLL;
        }
        if ([v6 isEqualToString:@"sleepPodcasts"]) {
          v3 |= 8uLL;
        }
        if ([v6 isEqualToString:@"sleepReading"]) {
          v3 |= 0x10uLL;
        }
        if ([v6 isEqualToString:@"sleepWrapUpYourDay"]) {
          v3 |= 0x20uLL;
        }
        if ([v6 isEqualToString:@"sleepYogaAndStretching"]) {
          v3 |= 0x40uLL;
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id INShortcutAvailabilityOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"sleep mindfulness", @"sleep mindfulness", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_17;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"sleep journaling", @"sleep journaling", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_17:
    long long v10 = INLocalizedStringWithLocalizer(@"sleep music", @"sleep music", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
LABEL_18:
    long long v11 = INLocalizedStringWithLocalizer(@"sleep podcasts", @"sleep podcasts", v3);
    [v4 addObject:v11];

    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    long long v12 = INLocalizedStringWithLocalizer(@"sleep reading", @"sleep reading", v3);
    [v4 addObject:v12];

    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x40) == 0)
      {
LABEL_10:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_12;
      }
LABEL_9:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"sleep yoga and stretching", @"sleep yoga and stretching", v3);
      [v4 addObject:v5];

      goto LABEL_10;
    }
LABEL_20:
    char v13 = INLocalizedStringWithLocalizer(@"sleep wrap up your day", @"sleep wrap up your day", v3);
    [v4 addObject:v13];

    if ((a1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_12:

  return v6;
}

uint64_t _INPBAnnouncementRecordReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v23 = objc_alloc_init(_INPBHomeFilter);
        if (!PBReaderPlaceMark() || (_INPBHomeFilterReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginator:", v23, 0, 0);
      }
      else
      {
        if (v19 != 2)
        {
          if (v19 == 3)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
            {
              double v22 = *(double *)(*(void *)(a2 + *v7) + v21);
              *(void *)(a2 + v20) = v21 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + v16) = 1;
              double v22 = 0.0;
            }
            [a1 setDuration:v22];
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        PBReaderReadString();
        uint64_t v23 = (_INPBHomeFilter *)objc_claimAutoreleasedReturnValue();
        [a1 setIdentifier:v23];
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INAnnouncementRecord *INIntentSlotValueTransformFromAnnouncementRecord(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INAnnouncementRecord alloc];
    id v3 = [v1 originator];
    id v4 = INIntentSlotValueTransformFromHomeFilter(v3);
    uint64_t v5 = [v1 identifier];
    uint64_t v6 = NSNumber;
    [v1 duration];
    double v8 = v7;

    unsigned int v9 = [v6 numberWithDouble:v8];
    unint64_t v10 = [(INAnnouncementRecord *)v2 initWithOriginator:v4 identifier:v5 duration:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBAnnouncementRecord *INIntentSlotValueTransformToAnnouncementRecord(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAnnouncementRecord);
    id v3 = [v1 originator];
    id v4 = INIntentSlotValueTransformToHomeFilter(v3);
    [(_INPBAnnouncementRecord *)v2 setOriginator:v4];

    uint64_t v5 = [v1 identifier];
    [(_INPBAnnouncementRecord *)v2 setIdentifier:v5];

    uint64_t v6 = [v1 duration];

    [v6 doubleValue];
    -[_INPBAnnouncementRecord setDuration:](v2, "setDuration:");
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAnnouncementRecords(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          double v8 = INIntentSlotValueTransformFromAnnouncementRecord(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAnnouncementRecordFromAnnouncementRecord(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBStopAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBStopAnnouncementIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBAnnouncementRecord);
        if (!PBReaderPlaceMark() || !_INPBAnnouncementRecordReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addStoppedAnnouncementRecords:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INStopAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520568[a1];
  }
}

INWholeHouseAudioMetadata *INIntentSlotValueTransformFromWholeHouseAudioMetadata(INWholeHouseAudioMetadata *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    double v18 = [INWholeHouseAudioMetadata alloc];
    unsigned int v27 = [(INWholeHouseAudioMetadata *)v2 speakerNames];
    uint64_t v32 = INIntentSlotValueTransformFromStrings(v27);
    char v26 = [(INWholeHouseAudioMetadata *)v2 speakerRooms];
    char v31 = INIntentSlotValueTransformFromStrings(v26);
    char v25 = [(INWholeHouseAudioMetadata *)v2 permanentNames];
    unint64_t v30 = INIntentSlotValueTransformFromStrings(v25);
    unint64_t v24 = [(INWholeHouseAudioMetadata *)v2 intentSpeakerNames];
    uint64_t v29 = INIntentSlotValueTransformFromStrings(v24);
    uint64_t v23 = [(INWholeHouseAudioMetadata *)v2 intentSpeakerRooms];
    uint64_t v16 = INIntentSlotValueTransformFromStrings(v23);
    double v22 = [(INWholeHouseAudioMetadata *)v2 intentDestinationSpeakers];
    int v15 = INIntentSlotValueTransformFromStrings(v22);
    unint64_t v21 = [(INWholeHouseAudioMetadata *)v2 intentPermanentNames];
    uint64_t v28 = INIntentSlotValueTransformFromStrings(v21);
    uint64_t v20 = [(INWholeHouseAudioMetadata *)v2 spokenEntityTypes];
    long long v14 = INIntentSlotValueTransformFromStrings(v20);
    int v17 = [(INWholeHouseAudioMetadata *)v2 spokenEntityNames];
    id v3 = INIntentSlotValueTransformFromStrings(v17);
    uint64_t v4 = objc_msgSend(NSNumber, "numberWithInt:", -[INWholeHouseAudioMetadata numberOfHomeAutomationWords](v2, "numberOfHomeAutomationWords"));
    char v13 = objc_msgSend(NSNumber, "numberWithBool:", -[INWholeHouseAudioMetadata isAllSpeakers](v2, "isAllSpeakers"));
    uint64_t v5 = objc_msgSend(NSNumber, "numberWithBool:", -[INWholeHouseAudioMetadata isPauseOrStop](v2, "isPauseOrStop"));
    uint64_t v6 = objc_msgSend(NSNumber, "numberWithBool:", -[INWholeHouseAudioMetadata isWholeHouseAudioCommand](v2, "isWholeHouseAudioCommand"));
    double v7 = objc_msgSend(NSNumber, "numberWithBool:", -[INWholeHouseAudioMetadata isInHere](v2, "isInHere"));
    char v8 = objc_msgSend(NSNumber, "numberWithBool:", -[INWholeHouseAudioMetadata hasExcept](v2, "hasExcept"));
    unsigned int v9 = NSNumber;
    uint64_t v10 = [(INWholeHouseAudioMetadata *)v2 isParticipatingSpeaker];

    uint64_t v11 = [v9 numberWithBool:v10];
    unint64_t v19 = -[INWholeHouseAudioMetadata initWithSpeakerNames:speakerRooms:permanentNames:intentSpeakerNames:intentSpeakerRooms:intentDestinationSpeakers:intentPermanentNames:spokenEntityTypes:spokenEntityNames:numberOfHomeAutomationWords:isAllSpeakers:isPauseOrStop:isWholeHouseAudioCommand:isInHere:hasExcept:isParticipatingSpeaker:](v18, "initWithSpeakerNames:speakerRooms:permanentNames:intentSpeakerNames:intentSpeakerRooms:intentDestinationSpeakers:intentPermanentNames:spokenEntityTypes:spokenEntityNames:numberOfHomeAutomationWords:isAllSpeakers:isPauseOrStop:isWholeHouseAudioCommand:isInHere:hasExcept:isParticipatingSpeaker:", v32, v31, v30, v29, v16, v15, v28, v14, v3, v4, v13, v5, v6, v7, v8,
            v11);

    a1 = v19;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBWholeHouseAudioMetadata *INIntentSlotValueTransformToWholeHouseAudioMetadata(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBWholeHouseAudioMetadata);
    id v3 = [v1 speakerNames];
    uint64_t v4 = INIntentSlotValueTransformToStrings(v3);
    [(_INPBWholeHouseAudioMetadata *)v2 setSpeakerNames:v4];

    uint64_t v5 = [v1 speakerRooms];
    uint64_t v6 = INIntentSlotValueTransformToStrings(v5);
    [(_INPBWholeHouseAudioMetadata *)v2 setSpeakerRooms:v6];

    double v7 = [v1 permanentNames];
    char v8 = INIntentSlotValueTransformToStrings(v7);
    [(_INPBWholeHouseAudioMetadata *)v2 setPermanentNames:v8];

    unsigned int v9 = [v1 intentSpeakerNames];
    uint64_t v10 = INIntentSlotValueTransformToStrings(v9);
    [(_INPBWholeHouseAudioMetadata *)v2 setIntentSpeakerNames:v10];

    uint64_t v11 = [v1 intentSpeakerRooms];
    unint64_t v12 = INIntentSlotValueTransformToStrings(v11);
    [(_INPBWholeHouseAudioMetadata *)v2 setIntentSpeakerRooms:v12];

    char v13 = [v1 intentDestinationSpeakers];
    long long v14 = INIntentSlotValueTransformToStrings(v13);
    [(_INPBWholeHouseAudioMetadata *)v2 setIntentDestinationSpeakers:v14];

    int v15 = [v1 intentPermanentNames];
    uint64_t v16 = INIntentSlotValueTransformToStrings(v15);
    [(_INPBWholeHouseAudioMetadata *)v2 setIntentPermanentNames:v16];

    int v17 = [v1 spokenEntityTypes];
    double v18 = INIntentSlotValueTransformToStrings(v17);
    [(_INPBWholeHouseAudioMetadata *)v2 setSpokenEntityTypes:v18];

    unint64_t v19 = [v1 spokenEntityNames];
    uint64_t v20 = INIntentSlotValueTransformToStrings(v19);
    [(_INPBWholeHouseAudioMetadata *)v2 setSpokenEntityNames:v20];

    unint64_t v21 = [v1 numberOfHomeAutomationWords];
    -[_INPBWholeHouseAudioMetadata setNumberOfHomeAutomationWords:](v2, "setNumberOfHomeAutomationWords:", [v21 intValue]);

    double v22 = [v1 isAllSpeakers];
    -[_INPBWholeHouseAudioMetadata setIsAllSpeakers:](v2, "setIsAllSpeakers:", [v22 BOOLValue]);

    uint64_t v23 = [v1 isPauseOrStop];
    -[_INPBWholeHouseAudioMetadata setIsPauseOrStop:](v2, "setIsPauseOrStop:", [v23 BOOLValue]);

    unint64_t v24 = [v1 isWholeHouseAudioCommand];
    -[_INPBWholeHouseAudioMetadata setIsWholeHouseAudioCommand:](v2, "setIsWholeHouseAudioCommand:", [v24 BOOLValue]);

    char v25 = [v1 isInHere];
    -[_INPBWholeHouseAudioMetadata setIsInHere:](v2, "setIsInHere:", [v25 BOOLValue]);

    char v26 = [v1 hasExcept];
    -[_INPBWholeHouseAudioMetadata setHasExcept:](v2, "setHasExcept:", [v26 BOOLValue]);

    unsigned int v27 = [v1 isParticipatingSpeaker];

    -[_INPBWholeHouseAudioMetadata setIsParticipatingSpeaker:](v2, "setIsParticipatingSpeaker:", [v27 BOOLValue]);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromWholeHouseAudioMetadatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          INIntentSlotValueTransformFromWholeHouseAudioMetadata(*(INWholeHouseAudioMetadata **)(*((void *)&v11 + 1)
          char v8 = + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWholeHouseAudioMetadatas(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToWholeHouseAudioMetadata(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedWholeHouseAudioMetadataFromWholeHouseAudioMetadata(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL INMediaConfidenceLevelHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

uint64_t INMediaConfidenceLevelGetBackingType(unint64_t a1)
{
  if (a1 >= 4) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (10 * a1);
  }
}

uint64_t INMediaConfidenceLevelGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 3;
  uint64_t v3 = 2;
  if (a2 != 20) {
    uint64_t v3 = a2 == 10;
  }
  if (a2 != 30) {
    uint64_t v2 = v3;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INMediaConfidenceLevelGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5520598[a1 - 1];
  }
}

uint64_t INMediaConfidenceLevelWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"low"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"medium"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"high"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMediaConfidenceLevelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"high";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"medium";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"low";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

uint64_t _INPBPlayAnnouncementSoundIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setSoundType:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INPlayAnnouncementSoundIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E55205B0[a1];
  }
}

BOOL _INPBPlayAnnouncementSoundIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL INAnnouncementSoundTypeHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INAnnouncementSoundTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INAnnouncementSoundTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

__CFString *INAnnouncementSoundTypeGetName(uint64_t a1)
{
  if (a1 == 1) {
    return @"announcementSent";
  }
  else {
    return @"unknown";
  }
}

uint64_t INAnnouncementSoundTypeWithString(void *a1)
{
  return [a1 isEqualToString:@"announcementSent"];
}

id INAnnouncementSoundTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    id v3 = INLocalizedStringWithLocalizer(@"announcement sent", @"announcement sent", a2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

INConnectedCall *INIntentSlotValueTransformFromConnectedCall(INConnectedCall *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    id v3 = [INConnectedCall alloc];
    int v4 = [(INConnectedCall *)v2 hasAudioRoute];
    int v5 = [(INConnectedCall *)v2 audioRoute];

    if (v4 && (v5 - 2) <= 2) {
      uint64_t v6 = qword_18CFC4B68[v5 - 2];
    }
    else {
      uint64_t v6 = 0;
    }
    a1 = [(INConnectedCall *)v3 initWithAudioRoute:v6];
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBConnectedCall *INIntentSlotValueTransformToConnectedCall(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBConnectedCall);
    uint64_t v3 = [v1 audioRoute];

    if (v3 == 1) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 0x7FFFFFFF;
    }
    if (v3 == 2) {
      unsigned int v4 = 3;
    }
    if (v3 == 1000) {
      uint64_t v5 = 4;
    }
    else {
      uint64_t v5 = v4;
    }
    [(_INPBConnectedCall *)v2 setAudioRoute:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromConnectedCalls(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromConnectedCall(*(INConnectedCall **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToConnectedCalls(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToConnectedCall(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedConnectedCallFromConnectedCall(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBConnectedCallReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_32;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        uint64_t v23 = *(unsigned char *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        [a1 setAudioRoute:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBAlarmSearchReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_65;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_68;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_65:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_68:
        [a1 setAlarmReferenceType:v23];
        goto LABEL_87;
      case 2u:
        PBReaderReadString();
        char v25 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        [a1 setIdentifier:v25];
        goto LABEL_35;
      case 3u:
        char v25 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v25, a2) & 1) == 0) {
          goto LABEL_89;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTime:", v25, 0, 0);
        goto LABEL_35;
      case 4u:
        char v25 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLabel:", v25, 0, 0);
LABEL_35:

LABEL_87:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_89:

        return 0;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_73:
        [a1 setAlarmSearchStatus:v32];
        goto LABEL_87;
      case 6u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v35 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_77:
        [a1 setIncludeSleepAlarm:v35 != 0];
        goto LABEL_87;
      case 7u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        while (2)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v45 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = v41;
        }
LABEL_82:
        [a1 setPeriod:v45];
        goto LABEL_87;
      case 8u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        while (2)
        {
          uint64_t v49 = *v3;
          unint64_t v50 = *(void *)(a2 + v49);
          if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              BOOL v14 = v47++ >= 9;
              if (v14)
              {
                uint64_t v48 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v48 = 0;
        }
LABEL_86:
        [a1 setIsMeridianInferred:v48 != 0];
        goto LABEL_87;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_87;
    }
  }
}

__CFString *INDeleteAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520680[a1];
  }
}

INAlarm *INIntentSlotValueTransformFromAlarm(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v19 = 0;
    if ([v1 alarmRepeatScheduleOptionsCount])
    {
      unint64_t v3 = 0;
      do
        INAlarmRepeatScheduleOptionsAddBackingType(&v19, [v2 alarmRepeatScheduleOptionsAtIndex:v3++]);
      while (v3 < [v2 alarmRepeatScheduleOptionsCount]);
    }
    uint64_t v4 = [INAlarm alloc];
    uint64_t v5 = [v2 identifier];
    unsigned int v18 = [v2 dateTime];
    uint64_t v6 = INIntentSlotValueTransformFromDateTime(v18);
    char v17 = [v2 label];
    int v7 = INIntentSlotValueTransformFromDataString(v17);
    char v8 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v2, "enabled"));
    unsigned int v9 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v2, "firing"));
    uint64_t v10 = v19;
    uint64_t v11 = [v2 sleepAlarmAttribute];
    unint64_t v12 = INIntentSlotValueTransformFromSleepAlarmAttribute(v11);
    char v13 = v4;
    BOOL v14 = (void *)v5;
    int v15 = [(INAlarm *)v13 initWithIdentifier:v5 dateTime:v6 label:v7 enabled:v8 firing:v9 alarmRepeatScheduleOptions:v10 sleepAlarmAttribute:v12];
  }
  else
  {
    int v15 = 0;
  }

  return v15;
}

_INPBAlarm *INIntentSlotValueTransformToAlarm(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAlarm);
    unint64_t v3 = [v1 identifier];
    [(_INPBAlarm *)v2 setIdentifier:v3];

    uint64_t v4 = [v1 dateTime];
    uint64_t v5 = INIntentSlotValueTransformToDateTime(v4);
    [(_INPBAlarm *)v2 setDateTime:v5];

    uint64_t v6 = [v1 label];
    int v7 = INIntentSlotValueTransformToDataString(v6);
    [(_INPBAlarm *)v2 setLabel:v7];

    char v8 = [v1 enabled];
    -[_INPBAlarm setEnabled:](v2, "setEnabled:", [v8 BOOLValue]);

    unsigned int v9 = [v1 firing];
    -[_INPBAlarm setFiring:](v2, "setFiring:", [v9 BOOLValue]);

    uint64_t v10 = [v1 alarmRepeatScheduleOptions];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __INIntentSlotValueTransformToAlarm_block_invoke;
    v15[3] = &unk_1E5520C28;
    uint64_t v11 = v2;
    uint64_t v16 = v11;
    INAlarmRepeatScheduleOptionsEnumerateBackingTypes(v10, v15);
    unint64_t v12 = [v1 sleepAlarmAttribute];

    char v13 = INIntentSlotValueTransformToSleepAlarmAttribute(v12);
    [(_INPBAlarm *)v11 setSleepAlarmAttribute:v13];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t __INIntentSlotValueTransformToAlarm_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addAlarmRepeatScheduleOptions:a2];
}

id INIntentSlotValueTransformFromAlarms(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAlarm(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAlarms(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAlarm(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAlarmFromAlarm(void *a1)
{
  id v1 = a1;

  return v1;
}

INAlarmSearch *INIntentSlotValueTransformFromAlarmSearch(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INAlarmSearch alloc];
    unsigned __int8 v3 = [v1 hasAlarmReferenceType];
    unsigned int v4 = [v1 alarmReferenceType];
    if (((v4 < 4) & v3) != 0) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v25 = v5;
    uint64_t v6 = [v1 identifier];
    int v7 = [v1 time];
    char v26 = INIntentSlotValueTransformFromDateTimeRangeValue(v7);
    char v8 = [v1 label];
    unsigned int v9 = INIntentSlotValueTransformFromDataString(v8);
    int v10 = [v1 hasAlarmSearchStatus];
    uint64_t v11 = [v1 alarmSearchStatus] - 1;
    if (v11 <= 3) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v10) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v1, "includeSleepAlarm"));
    int v15 = [v1 hasPeriod];
    int v16 = [v1 period];
    unsigned int v27 = v7;
    char v17 = (void *)v6;
    if (v15 && (uint64_t v18 = (v16 - 1), v18 <= 7)) {
      uint64_t v19 = v18 + 1;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = NSNumber;
    uint64_t v21 = [v1 isMeridianInferred];

    char v22 = [v20 numberWithBool:v21];
    uint64_t v23 = [(INAlarmSearch *)v2 initWithAlarmReferenceType:v25 identifier:v17 time:v26 label:v9 alarmSearchStatus:v13 includeSleepAlarm:v14 period:v19 isMeridianInferred:v22];
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

_INPBAlarmSearch *INIntentSlotValueTransformToAlarmSearch(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBAlarmSearch);
    unint64_t v3 = [v1 alarmReferenceType] - 1;
    if (v3 >= 4) {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v4 = v3;
    }
    [(_INPBAlarmSearch *)v2 setAlarmReferenceType:v4];
    uint64_t v5 = [v1 identifier];
    [(_INPBAlarmSearch *)v2 setIdentifier:v5];

    uint64_t v6 = [v1 time];
    int v7 = INIntentSlotValueTransformToDateTimeRangeValue(v6);
    [(_INPBAlarmSearch *)v2 setTime:v7];

    char v8 = [v1 label];
    unsigned int v9 = INIntentSlotValueTransformToDataString(v8);
    [(_INPBAlarmSearch *)v2 setLabel:v9];

    unint64_t v10 = [v1 alarmSearchStatus] - 1;
    if (v10 < 4) {
      uint64_t v11 = (v10 + 1);
    }
    else {
      uint64_t v11 = 0x7FFFFFFFLL;
    }
    [(_INPBAlarmSearch *)v2 setAlarmSearchStatus:v11];
    uint64_t v12 = [v1 includeSleepAlarm];
    -[_INPBAlarmSearch setIncludeSleepAlarm:](v2, "setIncludeSleepAlarm:", [v12 BOOLValue]);

    unint64_t v13 = [v1 period];
    if (v13 >= 9) {
      uint64_t v14 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    [(_INPBAlarmSearch *)v2 setPeriod:v14];
    int v15 = [v1 isMeridianInferred];

    -[_INPBAlarmSearch setIsMeridianInferred:](v2, "setIsMeridianInferred:", [v15 BOOLValue]);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromAlarmSearchs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromAlarmSearch(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAlarmSearchs(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToAlarmSearch(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAlarmSearchFromAlarmSearch(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL INAlarmPeriodHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INAlarmPeriodGetBackingType(unint64_t result)
{
  if (result >= 9) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INAlarmPeriodGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 7) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INAlarmPeriodGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7) {
    return @"unknown";
  }
  else {
    return off_1E55206B0[a1 - 1];
  }
}

uint64_t INAlarmPeriodWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"morning"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"afternoon"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"evening"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"night"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"noon"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"midnight"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"today"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"tomorrow"])
  {
    uint64_t v2 = 8;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INAlarmPeriodGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"morning";
      goto LABEL_11;
    case 2:
      uint64_t v4 = @"afternoon";
      goto LABEL_11;
    case 3:
      uint64_t v4 = @"evening";
      goto LABEL_11;
    case 4:
      uint64_t v4 = @"night";
      goto LABEL_11;
    case 5:
      uint64_t v4 = @"noon";
      goto LABEL_11;
    case 6:
      uint64_t v4 = @"midnight";
      goto LABEL_11;
    case 7:
      uint64_t v4 = @"today";
      goto LABEL_11;
    case 8:
      uint64_t v4 = @"tomorrow";
LABEL_11:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBUpdateAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBAlarmSearch);
        if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmSearch:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        char v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || (_INPBAlarmReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarm:", v17, 0, 0);
        goto LABEL_42;
      case 3u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (2)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v20;
        }
LABEL_51:
        [a1 setOperation:v24];
        goto LABEL_43;
      case 4u:
        char v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProposedTime:", v17, 0, 0);
        goto LABEL_42;
      case 5u:
        char v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2)) {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProposedLabel:", v17, 0, 0);
        goto LABEL_42;
      default:
        if ((v10 >> 3) != 100)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if PBReaderPlaceMark() && (_INPBIntentMetadataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_42:

          goto LABEL_43;
        }
LABEL_53:

        return 0;
    }
  }
}

uint64_t _INPBCreateAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_53;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v24 = 0;
            goto LABEL_56;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v20;
        }
LABEL_56:
        objc_msgSend(a1, "setRelativeOffsetInMinutes:", v24, v39, v40);
        goto LABEL_67;
      case 2u:
        uint64_t v25 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v25, a2) & 1) == 0) {
          goto LABEL_70;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTime:", v25, 0, 0);
        goto LABEL_36;
      case 3u:
        uint64_t v25 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v25, a2)) {
          goto LABEL_70;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLabel:", v25, 0, 0);
        goto LABEL_36;
      case 4u:
        if (v16 == 2)
        {
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            while (1)
            {
              uint64_t v30 = *v3;
              unint64_t v31 = *(void *)(a2 + v30);
              if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
              *(void *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                BOOL v14 = v28++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_49;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_66;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_66:
          PBRepeatedInt32Add();
        }
        goto LABEL_67;
      default:
        if ((v10 >> 3) != 100)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          goto LABEL_67;
        }
        uint64_t v25 = objc_alloc_init(_INPBIntentMetadata);
        if PBReaderPlaceMark() && (_INPBIntentMetadataReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
LABEL_36:

LABEL_67:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_70:

        return 0;
    }
  }
}

BOOL _INPBSnoozeAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 100) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addAlarms:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INChangeAlarmStatusOperationHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INChangeAlarmStatusOperationGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INChangeAlarmStatusOperationGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INChangeAlarmStatusOperationGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5520730[a1 - 1];
  }
}

uint64_t INChangeAlarmStatusOperationWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"enable"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"disable"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"dismiss"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INChangeAlarmStatusOperationGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"dismiss";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"disable";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"enable";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

BOOL _INPBUpdateAlarmIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v17, a2)) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addConflictAlarms:", v17, 0, 0);
        }
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(_INPBAlarm);
    if (!PBReaderPlaceMark() || (_INPBAlarmReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setUpdatedAlarm:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBChangeAlarmStatusIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2) {
        break;
      }
      if (v17 == 100)
      {
        char v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_50:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_40:

        goto LABEL_48;
      }
      if (v17 != 3)
      {
LABEL_41:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_48;
      }
      char v19 = 0;
      unsigned int v20 = 0;
      uint64_t v21 = 0;
      while (1)
      {
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
        *(void *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0) {
          goto LABEL_44;
        }
        v19 += 7;
        BOOL v14 = v20++ >= 9;
        if (v14)
        {
          uint64_t v25 = 0;
          goto LABEL_47;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v21;
      }
LABEL_47:
      objc_msgSend(a1, "setOperation:", v25, v27, v28);
LABEL_48:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v17 == 1)
    {
      char v18 = objc_alloc_init(_INPBAlarmSearch);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v18, a2) & 1) == 0) {
        goto LABEL_50;
      }
      PBReaderRecallMark();
      [a1 setAlarmSearch:v18];
    }
    else
    {
      if (v17 != 2) {
        goto LABEL_41;
      }
      char v18 = objc_alloc_init(_INPBAlarm);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v18, a2)) {
        goto LABEL_50;
      }
      PBReaderRecallMark();
      if (v18) {
        objc_msgSend(a1, "addAlarms:", v18, 0, 0);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBDeleteAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 100)
      {
        char v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_31;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(_INPBAlarmSearch);
        if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmSearch:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBAlarm);
    if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v18, a2)) {
      goto LABEL_36;
    }
    PBReaderRecallMark();
    if (v18) {
      objc_msgSend(a1, "addAlarms:", v18, 0, 0);
    }
    goto LABEL_31;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INCreateAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520760[a1];
  }
}

__CFString *INSnoozeAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520790[a1];
  }
}

BOOL INUpdateAlarmOperationHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INUpdateAlarmOperationGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INUpdateAlarmOperationGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INUpdateAlarmOperationGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"updateTime";
  }
  if (a1 == 1) {
    return @"updateLabel";
  }
  else {
    return v1;
  }
}

uint64_t INUpdateAlarmOperationWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"updateLabel"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"updateTime"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INUpdateAlarmOperationGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"update time";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"update label";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL INAlarmReferenceTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INAlarmReferenceTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 4) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INAlarmReferenceTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 4) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INAlarmReferenceTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return off_1E55207C0[a1 - 1];
  }
}

uint64_t INAlarmReferenceTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"default"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"this"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"next"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"all"])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INAlarmReferenceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"default";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"this";
      goto LABEL_7;
    case 3:
      uint64_t v4 = @"next";
      goto LABEL_7;
    case 4:
      uint64_t v4 = @"all";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBCreateAlarmIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v24 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || (_INPBAlarmReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedAlarm:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setSuccessCode:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBSnoozeAlarmIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t _INPBChangeAlarmStatusIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addModifiedAlarms:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBAlarmReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        unsigned int v18 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        [a1 setIdentifier:v18];
        goto LABEL_58;
      case 2u:
        unsigned int v18 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v18, a2) & 1) == 0) {
          goto LABEL_80;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v18, 0, 0);
        goto LABEL_58;
      case 3u:
        unsigned int v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2)) {
          goto LABEL_80;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLabel:", v18, 0, 0);
        goto LABEL_58;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_62:
        objc_msgSend(a1, "setEnabled:", v21 != 0, v44, v45);
        goto LABEL_77;
      case 5u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v27 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_66:
        [a1 setFiring:v27 != 0];
        goto LABEL_77;
      case 6u:
        if (v16 == 2)
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            while (1)
            {
              uint64_t v35 = *v3;
              unint64_t v36 = *(void *)(a2 + v35);
              if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
              *(void *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v14 = v33++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_54;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          while (1)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v14 = v39++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_76;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
        goto LABEL_77;
      case 7u:
        unsigned int v18 = objc_alloc_init(_INPBSleepAlarmAttribute);
        if PBReaderPlaceMark() && (_INPBSleepAlarmAttributeReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSleepAlarmAttribute:", v18, 0, 0);
LABEL_58:

LABEL_77:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_80:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_77;
    }
  }
}

__CFString *INChangeAlarmStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520838[a1];
  }
}

__CFString *INUpdateAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520868[a1];
  }
}

BOOL _INPBDeleteAlarmIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t INCreateAlarmSuccessCodeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCreateAlarmSuccessCodeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INCreateAlarmSuccessCodeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 3) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INCreateAlarmSuccessCodeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5520898[a1 - 1];
  }
}

uint64_t INCreateAlarmSuccessCodeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"alarmCreated"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"duplicateAlarmExists"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"duplicateAlarmEnabled"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCreateAlarmSuccessCodeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"duplicate alarm enabled";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"duplicate alarm exists";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"alarm created";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

uint64_t _INPBSleepAlarmAttributeReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v23 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBedtime:", v23, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        [a1 setOverride:v19 != 0];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18CF34D80(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CF34EC0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CF34FD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CF35340(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CF35458(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CF35980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLNMetadataProviderClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!LinkServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __LinkServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5520938;
    uint64_t v6 = 0;
    LinkServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!LinkServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("LNMetadataProvider");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getLNMetadataProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __LinkServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  LinkServicesLibraryCore_frameworkLibrary = result;
  return result;
}

INSleepAlarmAttribute *INIntentSlotValueTransformFromSleepAlarmAttribute(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INSleepAlarmAttribute alloc];
    id v3 = [v1 bedtime];
    uint64_t v4 = INIntentSlotValueTransformFromDateTime(v3);
    long long v5 = NSNumber;
    uint64_t v6 = [v1 override];

    uint64_t v7 = [v5 numberWithBool:v6];
    char v8 = [(INSleepAlarmAttribute *)v2 initWithBedtime:v4 override:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

_INPBSleepAlarmAttribute *INIntentSlotValueTransformToSleepAlarmAttribute(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBSleepAlarmAttribute);
    id v3 = [v1 bedtime];
    uint64_t v4 = INIntentSlotValueTransformToDateTime(v3);
    [(_INPBSleepAlarmAttribute *)v2 setBedtime:v4];

    long long v5 = [v1 override];

    -[_INPBSleepAlarmAttribute setOverride:](v2, "setOverride:", [v5 BOOLValue]);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromSleepAlarmAttributes(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromSleepAlarmAttribute(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSleepAlarmAttributes(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToSleepAlarmAttribute(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSleepAlarmAttributeFromSleepAlarmAttribute(void *a1)
{
  id v1 = a1;

  return v1;
}

void INAlarmRepeatScheduleOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_12;
  }
  id v4 = v3;
  if (a1)
  {
    (*((void (**)(id, void))v3 + 2))(v3, 0);
    id v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_17;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 1);
  id v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  id v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  id v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0) {
      goto LABEL_9;
    }
LABEL_20:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
    id v3 = v4;
    if ((a1 & 0x40) == 0)
    {
LABEL_10:
      if ((a1 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_19:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  id v3 = v4;
  if ((a1 & 0x20) != 0) {
    goto LABEL_20;
  }
LABEL_9:
  if ((a1 & 0x40) == 0) {
    goto LABEL_10;
  }
LABEL_21:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 6);
  id v3 = v4;
  if ((a1 & 0x80) != 0)
  {
LABEL_11:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 7);
    id v3 = v4;
  }
LABEL_12:
}

unint64_t INAlarmRepeatScheduleOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result &= 1u;
        break;
      case 1:
        uint64_t result = (result >> 1) & 1;
        break;
      case 2:
        uint64_t result = (result >> 2) & 1;
        break;
      case 3:
        uint64_t result = (result >> 3) & 1;
        break;
      case 4:
        uint64_t result = (result >> 4) & 1;
        break;
      case 5:
        uint64_t result = (result >> 5) & 1;
        break;
      case 6:
        uint64_t result = (result >> 6) & 1;
        break;
      case 7:
        uint64_t result = (result >> 7) & 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INAlarmRepeatScheduleOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 0:
        v2 |= 1uLL;
        break;
      case 1:
        v2 |= 2uLL;
        break;
      case 2:
        v2 |= 4uLL;
        break;
      case 3:
        v2 |= 8uLL;
        break;
      case 4:
        v2 |= 0x10uLL;
        break;
      case 5:
        v2 |= 0x20uLL;
        break;
      case 6:
        v2 |= 0x40uLL;
        break;
      case 7:
        v2 |= 0x80uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t *INAlarmRepeatScheduleOptionsRemoveBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 0:
        v2 &= ~1uLL;
        break;
      case 1:
        v2 &= ~2uLL;
        break;
      case 2:
        v2 &= ~4uLL;
        break;
      case 3:
        v2 &= ~8uLL;
        break;
      case 4:
        v2 &= ~0x10uLL;
        break;
      case 5:
        v2 &= ~0x20uLL;
        break;
      case 6:
        v2 &= ~0x40uLL;
        break;
      case 7:
        v2 &= ~0x80uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INAlarmRepeatScheduleOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"none"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_18;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"monday"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
LABEL_18:
    [v3 addObject:@"tuesday"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_20;
    }
LABEL_19:
    [v3 addObject:@"wednesday"];
    if ((v1 & 0x10) == 0)
    {
LABEL_7:
      if ((v1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
LABEL_20:
    [v3 addObject:@"thursday"];
    if ((v1 & 0x20) == 0)
    {
LABEL_8:
      if ((v1 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
LABEL_21:
    [v3 addObject:@"friday"];
    if ((v1 & 0x40) == 0)
    {
LABEL_9:
      if ((v1 & 0x80) == 0)
      {
LABEL_11:
        id v4 = (void *)[v3 copy];

        goto LABEL_13;
      }
LABEL_10:
      [v3 addObject:@"sunday"];
      goto LABEL_11;
    }
LABEL_22:
    [v3 addObject:@"saturday"];
    if ((v1 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_13:

  return v4;
}

uint64_t INAlarmRepeatScheduleOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  obuint64_t j = a1;
  uint64_t v1 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v3 |= [v6 isEqualToString:@"none"];
        if ([v6 isEqualToString:@"monday"]) {
          v3 |= 2uLL;
        }
        if ([v6 isEqualToString:@"tuesday"]) {
          v3 |= 4uLL;
        }
        if ([v6 isEqualToString:@"wednesday"]) {
          v3 |= 8uLL;
        }
        if ([v6 isEqualToString:@"thursday"]) {
          v3 |= 0x10uLL;
        }
        if ([v6 isEqualToString:@"friday"]) {
          v3 |= 0x20uLL;
        }
        if ([v6 isEqualToString:@"saturday"]) {
          v3 |= 0x40uLL;
        }
        if ([v6 isEqualToString:@"sunday"]) {
          v3 |= 0x80uLL;
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id INAlarmRepeatScheduleOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"none", @"none", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_18;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"monday", @"monday", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
LABEL_18:
    long long v10 = INLocalizedStringWithLocalizer(@"tuesday", @"tuesday", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_20;
    }
LABEL_19:
    long long v11 = INLocalizedStringWithLocalizer(@"wednesday", @"wednesday", v3);
    [v4 addObject:v11];

    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
LABEL_20:
    long long v12 = INLocalizedStringWithLocalizer(@"thursday", @"thursday", v3);
    [v4 addObject:v12];

    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
LABEL_21:
    long long v13 = INLocalizedStringWithLocalizer(@"friday", @"friday", v3);
    [v4 addObject:v13];

    if ((a1 & 0x40) == 0)
    {
LABEL_9:
      if ((a1 & 0x80) == 0)
      {
LABEL_11:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_13;
      }
LABEL_10:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"sunday", @"sunday", v3);
      [v4 addObject:v5];

      goto LABEL_11;
    }
LABEL_22:
    uint64_t v14 = INLocalizedStringWithLocalizer(@"saturday", @"saturday", v3);
    [v4 addObject:v14];

    if ((a1 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_13:

  return v6;
}

BOOL INAlarmSearchStatusHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INAlarmSearchStatusGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 4) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INAlarmSearchStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 3) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INAlarmSearchStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return off_1E5520950[a1 - 1];
  }
}

uint64_t INAlarmSearchStatusWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"enabled"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"disabled"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"firing"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"snoozed"])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INAlarmSearchStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"enabled";
      goto LABEL_7;
    case 2:
      id v4 = @"disabled";
      goto LABEL_7;
    case 3:
      id v4 = @"firing";
      goto LABEL_7;
    case 4:
      id v4 = @"snoozed";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBSearchAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2) {
        break;
      }
      if (v17 == 1)
      {
        char v25 = objc_alloc_init(_INPBAlarmSearch);
        if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v25, a2) & 1) == 0) {
          goto LABEL_50;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmSearch:", v25, 0, 0);
LABEL_40:

        goto LABEL_48;
      }
      if (v17 != 2) {
        goto LABEL_41;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_44;
        }
        v18 += 7;
        BOOL v14 = v19++ >= 9;
        if (v14)
        {
          uint64_t v24 = 0;
          goto LABEL_47;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v20;
      }
LABEL_47:
      objc_msgSend(a1, "setAlarmSearchType:", v24, v27, v28);
LABEL_48:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v17 == 3)
    {
      char v25 = objc_alloc_init(_INPBAlarm);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v25, a2))
      {
LABEL_50:

        return 0;
      }
      PBReaderRecallMark();
      if (v25) {
        objc_msgSend(a1, "addAlarms:", v25, 0, 0);
      }
    }
    else
    {
      if (v17 != 100)
      {
LABEL_41:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_48;
      }
      char v25 = objc_alloc_init(_INPBIntentMetadata);
      if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0) {
        goto LABEL_50;
      }
      PBReaderRecallMark();
      objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
    }
    goto LABEL_40;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBSearchAlarmIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

__CFString *INSearchAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520998[a1];
  }
}

uint64_t INAlarmSearchTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INAlarmSearchTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INAlarmSearchTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INAlarmSearchTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E55209C8[a1 - 1];
  }
}

uint64_t INAlarmSearchTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"find"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"whenIs"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"howLongUntil"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"read"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"howMany"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INAlarmSearchTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"find";
      goto LABEL_8;
    case 2:
      id v4 = @"when is";
      goto LABEL_8;
    case 3:
      id v4 = @"how long until";
      goto LABEL_8;
    case 4:
      id v4 = @"read";
      goto LABEL_8;
    case 5:
      id v4 = @"how many";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INBoatReservation *INIntentSlotValueTransformFromBoatReservation(INBoatReservation *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    id v3 = [(INBoatReservation *)v2 reservation];
    id v4 = [INBoatReservation alloc];
    char v23 = [v3 itemReference];
    uint64_t v24 = INIntentSlotValueTransformFromDataString(v23);
    uint64_t v5 = [v3 reservationNumber];
    unint64_t v22 = [v3 bookingTime];
    uint64_t v20 = INIntentSlotValueTransformFromTimestamp(v22);
    int v6 = [v3 hasReservationStatus];
    uint64_t v7 = [v3 reservationStatus] - 2;
    if (v7 <= 3) {
      char v8 = (void *)(v7 + 1);
    }
    else {
      char v8 = 0;
    }
    if (!v6) {
      char v8 = 0;
    }
    id v17 = v8;
    uint64_t v16 = [v3 reservationHolderName];
    uint64_t v21 = [v3 actions];
    BOOL v15 = INIntentSlotValueTransformFromReservationActions(v21);
    unsigned int v19 = [v3 url];
    unsigned int v9 = INIntentSlotValueTransformFromURLValue(v19);
    uint64_t v10 = [(INBoatReservation *)v2 reservedSeat];
    uint64_t v11 = INIntentSlotValueTransformFromSeat(v10);
    unint64_t v12 = [(INBoatReservation *)v2 boatTrip];

    char v13 = INIntentSlotValueTransformFromBoatTrip(v12);
    char v18 = [(INBoatReservation *)v4 initWithItemReference:v24 reservationNumber:v5 bookingTime:v20 reservationStatus:v17 reservationHolderName:v16 actions:v15 URL:v9 reservedSeat:v11 boatTrip:v13];

    a1 = v18;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBBoatReservation *INIntentSlotValueTransformToBoatReservation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBReservation);
    id v3 = [v1 itemReference];
    id v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBReservation *)v2 setItemReference:v4];

    uint64_t v5 = [v1 reservationNumber];
    [(_INPBReservation *)v2 setReservationNumber:v5];

    int v6 = [v1 bookingTime];
    uint64_t v7 = INIntentSlotValueTransformToTimestamp(v6);
    [(_INPBReservation *)v2 setBookingTime:v7];

    unint64_t v8 = [v1 reservationStatus];
    if (v8 < 5) {
      uint64_t v9 = (v8 + 1);
    }
    else {
      uint64_t v9 = 0x7FFFFFFFLL;
    }
    [(_INPBReservation *)v2 setReservationStatus:v9];
    uint64_t v10 = [v1 reservationHolderName];
    [(_INPBReservation *)v2 setReservationHolderName:v10];

    uint64_t v11 = [v1 actions];
    unint64_t v12 = INIntentSlotValueTransformToReservationActions(v11);
    [(_INPBReservation *)v2 setActions:v12];

    char v13 = [v1 URL];
    BOOL v14 = INIntentSlotValueTransformToURLValue(v13);
    [(_INPBReservation *)v2 setUrl:v14];

    BOOL v15 = objc_alloc_init(_INPBBoatReservation);
    [(_INPBBoatReservation *)v15 setReservation:v2];
    uint64_t v16 = [v1 reservedSeat];
    id v17 = INIntentSlotValueTransformToSeat(v16);
    [(_INPBBoatReservation *)v15 setReservedSeat:v17];

    char v18 = [v1 boatTrip];

    unsigned int v19 = INIntentSlotValueTransformToBoatTrip(v18);
    [(_INPBBoatReservation *)v15 setBoatTrip:v19];
  }
  else
  {
    BOOL v15 = 0;
  }

  return v15;
}

id INIntentSlotValueTransformFromBoatReservations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformFromBoatReservation(*(INBoatReservation **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBoatReservations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformToBoatReservation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBoatReservationFromBoatReservation(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBBusReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        char v18 = objc_alloc_init(_INPBBusTrip);
        if (!PBReaderPlaceMark() || !_INPBBusTripReadFrom(v18, a2)) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBusTrip:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBBoatReservationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        char v18 = objc_alloc_init(_INPBBoatTrip);
        if (!PBReaderPlaceMark() || !_INPBBoatTripReadFrom(v18, a2)) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBoatTrip:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2)) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INBusReservation *INIntentSlotValueTransformFromBusReservation(INBusReservation *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    id v3 = [(INBusReservation *)v2 reservation];
    uint64_t v4 = [INBusReservation alloc];
    char v23 = [v3 itemReference];
    uint64_t v24 = INIntentSlotValueTransformFromDataString(v23);
    uint64_t v5 = [v3 reservationNumber];
    unint64_t v22 = [v3 bookingTime];
    uint64_t v20 = INIntentSlotValueTransformFromTimestamp(v22);
    int v6 = [v3 hasReservationStatus];
    uint64_t v7 = [v3 reservationStatus] - 2;
    if (v7 <= 3) {
      char v8 = (void *)(v7 + 1);
    }
    else {
      char v8 = 0;
    }
    if (!v6) {
      char v8 = 0;
    }
    id v17 = v8;
    uint64_t v16 = [v3 reservationHolderName];
    uint64_t v21 = [v3 actions];
    int v15 = INIntentSlotValueTransformFromReservationActions(v21);
    unsigned int v19 = [v3 url];
    unsigned int v9 = INIntentSlotValueTransformFromURLValue(v19);
    unint64_t v10 = [(INBusReservation *)v2 reservedSeat];
    uint64_t v11 = INIntentSlotValueTransformFromSeat(v10);
    unint64_t v12 = [(INBusReservation *)v2 busTrip];

    char v13 = INIntentSlotValueTransformFromBusTrip(v12);
    char v18 = [(INBusReservation *)v4 initWithItemReference:v24 reservationNumber:v5 bookingTime:v20 reservationStatus:v17 reservationHolderName:v16 actions:v15 URL:v9 reservedSeat:v11 busTrip:v13];

    a1 = v18;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBBusReservation *INIntentSlotValueTransformToBusReservation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBReservation);
    id v3 = [v1 itemReference];
    uint64_t v4 = INIntentSlotValueTransformToDataString(v3);
    [(_INPBReservation *)v2 setItemReference:v4];

    uint64_t v5 = [v1 reservationNumber];
    [(_INPBReservation *)v2 setReservationNumber:v5];

    int v6 = [v1 bookingTime];
    uint64_t v7 = INIntentSlotValueTransformToTimestamp(v6);
    [(_INPBReservation *)v2 setBookingTime:v7];

    unint64_t v8 = [v1 reservationStatus];
    if (v8 < 5) {
      uint64_t v9 = (v8 + 1);
    }
    else {
      uint64_t v9 = 0x7FFFFFFFLL;
    }
    [(_INPBReservation *)v2 setReservationStatus:v9];
    unint64_t v10 = [v1 reservationHolderName];
    [(_INPBReservation *)v2 setReservationHolderName:v10];

    uint64_t v11 = [v1 actions];
    unint64_t v12 = INIntentSlotValueTransformToReservationActions(v11);
    [(_INPBReservation *)v2 setActions:v12];

    char v13 = [v1 URL];
    long long v14 = INIntentSlotValueTransformToURLValue(v13);
    [(_INPBReservation *)v2 setUrl:v14];

    int v15 = objc_alloc_init(_INPBBusReservation);
    [(_INPBBusReservation *)v15 setReservation:v2];
    uint64_t v16 = [v1 reservedSeat];
    id v17 = INIntentSlotValueTransformToSeat(v16);
    [(_INPBBusReservation *)v15 setReservedSeat:v17];

    char v18 = [v1 busTrip];

    unsigned int v19 = INIntentSlotValueTransformToBusTrip(v18);
    [(_INPBBusReservation *)v15 setBusTrip:v19];
  }
  else
  {
    int v15 = 0;
  }

  return v15;
}

id INIntentSlotValueTransformFromBusReservations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformFromBusReservation(*(INBusReservation **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBusReservations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = INIntentSlotValueTransformToBusReservation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBusReservationFromBusReservation(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBSkipAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INReadActionTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INReadActionTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t INReadActionTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INReadActionTypeGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"repeat";
  }
  if (a1 == 1) {
    return @"read";
  }
  else {
    return v1;
  }
}

uint64_t INReadActionTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"read"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"repeat"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INReadActionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"repeat";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"read";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL _INPBSkipAnnouncementIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

__CFString *INSkipAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E55209F0[a1];
  }
}

uint64_t _INPBPowerValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);
      }
      else if (v19 == 2)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          double v31 = *(double *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v31 = 0.0;
        }
        [a1 setMagnitude:v31];
      }
      else if (v19 == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = v22;
        }
LABEL_40:
        [a1 setUnit:v27];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBJSONDictionaryReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = PBReaderReadString();
        [a1 setJsonString:v17];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBCallRecordFilterReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        int v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v18 = objc_alloc_init(_INPBContact);
              uint64_t v46 = 0;
              uint64_t v47 = 0;
              if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v18, a2))
              {

                return 0;
              }
              PBReaderRecallMark();
              if (v18) {
                objc_msgSend(a1, "addParticipants:", v18, 0, 0);
              }

              goto LABEL_73;
            case 2u:
              if (v16 == 2)
              {
                uint64_t v46 = 0;
                uint64_t v47 = 0;
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v20 = 0;
                  unsigned int v21 = 0;
                  uint64_t v22 = 0;
                  while (1)
                  {
                    uint64_t v23 = *v3;
                    unint64_t v24 = *(void *)(a2 + v23);
                    if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
                    *(void *)(a2 + v23) = v24 + 1;
                    v22 |= (unint64_t)(v25 & 0x7F) << v20;
                    if (v25 < 0)
                    {
                      v20 += 7;
                      BOOL v14 = v21++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_38;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
                  PBRepeatedInt32Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                char v40 = 0;
                unsigned int v41 = 0;
                uint64_t v42 = 0;
                while (1)
                {
                  uint64_t v43 = *v3;
                  unint64_t v44 = *(void *)(a2 + v43);
                  if (v44 == -1 || v44 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
                  *(void *)(a2 + v43) = v44 + 1;
                  v42 |= (unint64_t)(v45 & 0x7F) << v40;
                  if (v45 < 0)
                  {
                    v40 += 7;
                    BOOL v14 = v41++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_72;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_72:
                PBRepeatedInt32Add();
              }
LABEL_73:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            case 3u:
              char v26 = 0;
              unsigned int v27 = 0;
              uint64_t v28 = 0;
              while (2)
              {
                uint64_t v29 = *v3;
                unint64_t v30 = *(void *)(a2 + v29);
                if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
                  *(void *)(a2 + v29) = v30 + 1;
                  v28 |= (unint64_t)(v31 & 0x7F) << v26;
                  if (v31 < 0)
                  {
                    v26 += 7;
                    BOOL v14 = v27++ >= 9;
                    if (v14)
                    {
                      uint64_t v32 = 0;
                      goto LABEL_57;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v32 = 0;
              }
              else {
                uint64_t v32 = v28;
              }
LABEL_57:
              objc_msgSend(a1, "setCallCapability:", v32, v46, v47);
              goto LABEL_73;
            case 4u:
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v35 |= (unint64_t)(v38 & 0x7F) << v33;
                  if (v38 < 0)
                  {
                    v33 += 7;
                    BOOL v14 = v34++ >= 9;
                    if (v14)
                    {
                      uint64_t v39 = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v39 = 0;
              }
              else {
                uint64_t v39 = v35;
              }
LABEL_62:
              objc_msgSend(a1, "setPreferredCallProvider:", v39, v46, v47);
              goto LABEL_73;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_73;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INCallRecordFilter *INIntentSlotValueTransformFromCallRecordFilter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v18 = 0;
    if ([v1 callTypesCount])
    {
      unint64_t v3 = 0;
      do
        INCallRecordTypeOptionsAddBackingType(&v18, [v2 callTypesAtIndex:v3++]);
      while (v3 < [v2 callTypesCount]);
    }
    uint64_t v4 = [INCallRecordFilter alloc];
    uint64_t v5 = [v2 participants];
    uint64_t v6 = INIntentSlotValueTransformFromContacts(v5);
    uint64_t v7 = v18;
    int v8 = [v2 hasCallCapability];
    int v9 = [v2 callCapability];
    uint64_t v10 = 2 * (v9 == 2);
    if (v9 == 1) {
      uint64_t v10 = 1;
    }
    if (v8) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    int v12 = [v2 hasPreferredCallProvider];
    uint64_t v13 = [v2 preferredCallProvider] - 2;
    if (v13 <= 2) {
      uint64_t v14 = v13 + 1;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v12) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    int v16 = [(INCallRecordFilter *)v4 initWithParticipants:v6 callTypes:v7 callCapability:v11 preferredCallProvider:v15];
  }
  else
  {
    int v16 = 0;
  }

  return v16;
}

_INPBCallRecordFilter *INIntentSlotValueTransformToCallRecordFilter(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCallRecordFilter);
    unint64_t v3 = [v1 participants];
    uint64_t v4 = INIntentSlotValueTransformToContacts(v3);
    [(_INPBCallRecordFilter *)v2 setParticipants:v4];

    uint64_t v5 = [v1 callTypes];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __INIntentSlotValueTransformToCallRecordFilter_block_invoke;
    v13[3] = &unk_1E5520C28;
    uint64_t v6 = v2;
    uint64_t v14 = v6;
    INCallRecordTypeOptionsEnumerateBackingTypes(v5, v13);
    uint64_t v7 = [v1 callCapability];
    if (v7 == 1) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = 0x7FFFFFFF;
    }
    if (v7 == 2) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = v8;
    }
    [(_INPBCallRecordFilter *)v6 setCallCapability:v9];
    uint64_t v10 = [v1 preferredCallProvider];

    if ((unint64_t)(v10 - 1) >= 3) {
      uint64_t v11 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v11 = (v10 + 1);
    }
    [(_INPBCallRecordFilter *)v6 setPreferredCallProvider:v11];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t __INIntentSlotValueTransformToCallRecordFilter_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addCallTypes:a2];
}

id INIntentSlotValueTransformFromCallRecordFilters(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = INIntentSlotValueTransformFromCallRecordFilter(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallRecordFilters(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = INIntentSlotValueTransformToCallRecordFilter(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallRecordFilterFromCallRecordFilter(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBPowerReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(_INPBPowerValue);
        if (!PBReaderPlaceMark() || !_INPBPowerValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addValue:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INCarChargingConnectorTypeGetFacadeObject(int a1, int a2)
{
  if (a1 && (a2 - 2) <= 9) {
    return off_1E5520B30[a2 - 2];
  }
  else {
    return 0;
  }
}

uint64_t INCarChargingConnectorTypeGetBackingType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:@"com.apple.intents.CarChargingConnectorType.J1772"])
    {
      uint64_t v3 = 2;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.CCS1"])
    {
      uint64_t v3 = 3;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.CCS2"])
    {
      uint64_t v3 = 4;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.CHAdeMO"])
    {
      uint64_t v3 = 5;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.GBTAC"])
    {
      uint64_t v3 = 6;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.GBTDC"])
    {
      uint64_t v3 = 7;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.Tesla"])
    {
      uint64_t v3 = 8;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.Mennekes"])
    {
      uint64_t v3 = 9;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.NACSDC"])
    {
      uint64_t v3 = 10;
    }
    else if ([v2 isEqualToString:@"com.apple.intents.CarChargingConnectorType.NACSAC"])
    {
      uint64_t v3 = 11;
    }
    else
    {
      uint64_t v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INCarChargingConnectorTypeValueAsString(__CFString *a1)
{
  if (a1)
  {
    uint64_t BackingType = INCarChargingConnectorTypeGetBackingType(a1);
    if ((BackingType - 2) >= 0xA)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", BackingType);
      a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = off_1E5520B80[(BackingType - 2)];
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

INCarChargingConnectorPower *INIntentSlotValueTransformFromCarChargingConnectorPower(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INCarChargingConnectorPower alloc];
    int v3 = [v1 hasChargingConnector];
    int v4 = [v1 chargingConnector];
    if (v3 && (v4 - 2) <= 9) {
      uint64_t v5 = off_1E5520B30[v4 - 2];
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5;
    uint64_t v7 = [v1 maximumPower];

    char v8 = INIntentSlotValueTransformFromPower(v7);
    unsigned int v9 = [(INCarChargingConnectorPower *)v2 initWithChargingConnector:v6 maximumPower:v8];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

_INPBCarChargingConnectorPower *INIntentSlotValueTransformToCarChargingConnectorPower(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCarChargingConnectorPower);
    int v3 = [v1 chargingConnector];
    [(_INPBCarChargingConnectorPower *)v2 setChargingConnector:INCarChargingConnectorTypeGetBackingType(v3)];

    int v4 = [v1 maximumPower];

    uint64_t v5 = INIntentSlotValueTransformToPower(v4);
    [(_INPBCarChargingConnectorPower *)v2 setMaximumPower:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCarChargingConnectorPowers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromCarChargingConnectorPower(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCarChargingConnectorPowers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToCarChargingConnectorPower(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCarChargingConnectorPowerFromCarChargingConnectorPower(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBCarChargingConnectorPowerReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v24 = objc_alloc_init(_INPBPower);
        if (!PBReaderPlaceMark() || (_INPBPowerReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMaximumPower:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setChargingConnector:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBCarHeadUnitReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = PBReaderReadString();
        [a1 setBluetoothIdentifier:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = PBReaderReadString();
    [a1 setIAP2Identifier:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INCarHeadUnit *INIntentSlotValueTransformFromCarHeadUnit(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INCarHeadUnit alloc];
    id v3 = [v1 bluetoothIdentifier];
    uint64_t v4 = [v1 iAP2Identifier];

    uint64_t v5 = [(INCarHeadUnit *)v2 initWithBluetoothIdentifier:v3 iAP2Identifier:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

_INPBCarHeadUnit *INIntentSlotValueTransformToCarHeadUnit(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCarHeadUnit);
    id v3 = [v1 bluetoothIdentifier];
    [(_INPBCarHeadUnit *)v2 setBluetoothIdentifier:v3];

    uint64_t v4 = [v1 iAP2Identifier];

    [(_INPBCarHeadUnit *)v2 setIAP2Identifier:v4];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCarHeadUnits(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromCarHeadUnit(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCarHeadUnits(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToCarHeadUnit(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCarHeadUnitFromCarHeadUnit(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBDataValueReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        char v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setValue:v17];
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(_INPBValueMetadata);
    if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INReportIncidentIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD) {
    return 0;
  }
  else {
    return off_1E5520C48[a1];
  }
}

uint64_t _INPBReportIncidentIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    uint64_t v16 = *v5;
    int v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(unsigned char *)(a2 + v16)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v17 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_43;
      case 2u:
        uint64_t v19 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
        if (!PBReaderPlaceMark() || (_INPBSupportedTrafficIncidentTypeReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIncidentType:", v19, 0, 0);
        goto LABEL_43;
      case 3u:
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          double v23 = *(double *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          double v23 = 0.0;
        }
        [a1 setStartTime:v23];
        goto LABEL_50;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (2)
        {
          uint64_t v27 = *v3;
          uint64_t v28 = *(void *)(a2 + v27);
          unint64_t v29 = v28 + 1;
          if (v28 == -1 || v29 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              BOOL v15 = v25++ >= 9;
              if (v15)
              {
                uint64_t v26 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_47:
        [a1 setIsClear:v26 != 0];
        goto LABEL_50;
      case 5u:
        uint64_t v19 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserLocation:", v19, 0, 0);
        goto LABEL_43;
      case 6u:
        uint64_t v19 = objc_alloc_init(_INPBString);
        if PBReaderPlaceMark() && (_INPBStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAdditionalDetails:", v19, 0, 0);
LABEL_43:

LABEL_50:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_52:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_50;
    }
  }
}

uint64_t _INPBReportIncidentIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            while (1)
            {
              uint64_t v24 = *v3;
              unint64_t v25 = *(void *)(a2 + v24);
              if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                BOOL v14 = v22++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_36;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_53;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
          PBRepeatedInt32Add();
        }
        goto LABEL_54;
      }
      if (v18 == 3) {
        break;
      }
      if (v18 == 2)
      {
        uint64_t v19 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v19, 0, 0);
LABEL_41:

        goto LABEL_54;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_54:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v19 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
    if (!PBReaderPlaceMark() || !_INPBSupportedTrafficIncidentTypeReadFrom(v19, a2))
    {
LABEL_57:

      return 0;
    }
    PBReaderRecallMark();
    if (v19) {
      objc_msgSend(a1, "addSupportedType:", v19, 0, 0);
    }
    goto LABEL_41;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL INMapsTransportTypeHasBackingType(unint64_t a1)
{
  return a1 < 6;
}

unint64_t INMapsTransportTypeGetBackingType(unint64_t result)
{
  if (result >= 6) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INMapsTransportTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 4) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INMapsTransportTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E5520CE8[a1 - 1];
  }
}

uint64_t INMapsTransportTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"driving"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"walking"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"cycling"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"transit"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"rideshare"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INMapsTransportTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"driving";
      goto LABEL_8;
    case 2:
      uint64_t v4 = @"walking";
      goto LABEL_8;
    case 3:
      uint64_t v4 = @"cycling";
      goto LABEL_8;
    case 4:
      uint64_t v4 = @"transit";
      goto LABEL_8;
    case 5:
      uint64_t v4 = @"rideshare";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

uint64_t INWorkoutAssociatedItemLabelHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INWorkoutAssociatedItemLabelGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INWorkoutAssociatedItemLabelGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INWorkoutAssociatedItemLabelGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E5520D10[a1 - 1];
  }
}

uint64_t INWorkoutAssociatedItemLabelWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"narrator"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"playlist"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"song"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"trainer"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"workout"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INWorkoutAssociatedItemLabelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      uint64_t v4 = @"narrator";
      goto LABEL_8;
    case 2:
      uint64_t v4 = @"playlist";
      goto LABEL_8;
    case 3:
      uint64_t v4 = @"song";
      goto LABEL_8;
    case 4:
      uint64_t v4 = @"trainer";
      goto LABEL_8;
    case 5:
      uint64_t v4 = @"workout";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INWorkoutAssociatedItem *INIntentSlotValueTransformFromWorkoutAssociatedItem(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INWorkoutAssociatedItem alloc];
    unsigned __int8 v3 = [v1 hasItemLabel];
    unsigned int v4 = [v1 itemLabel];
    if (((v4 < 5) & v3) != 0) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = [v1 itemID];
    int v7 = [v1 hasContentRating];
    int v8 = [v1 contentRating];
    uint64_t v9 = 2 * (v8 == 1);
    if (!v8) {
      uint64_t v9 = 1;
    }
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = [v1 itemName];

    unint64_t v12 = INIntentSlotValueTransformFromDataString(v11);
    char v13 = [(INWorkoutAssociatedItem *)v2 initWithItemLabel:v5 itemID:v6 contentRating:v10 itemName:v12];
  }
  else
  {
    char v13 = 0;
  }

  return v13;
}

_INPBWorkoutAssociatedItem *INIntentSlotValueTransformToWorkoutAssociatedItem(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBWorkoutAssociatedItem);
    unint64_t v3 = [v1 itemLabel] - 1;
    if (v3 >= 5) {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v4 = v3;
    }
    [(_INPBWorkoutAssociatedItem *)v2 setItemLabel:v4];
    uint64_t v5 = [v1 itemID];
    [(_INPBWorkoutAssociatedItem *)v2 setItemID:v5];

    uint64_t v6 = [v1 contentRating];
    if (v6 == 1) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = 0x7FFFFFFF;
    }
    if (v6 == 2) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v7;
    }
    [(_INPBWorkoutAssociatedItem *)v2 setContentRating:v8];
    uint64_t v9 = [v1 itemName];

    uint64_t v10 = INIntentSlotValueTransformToDataString(v9);
    [(_INPBWorkoutAssociatedItem *)v2 setItemName:v10];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromWorkoutAssociatedItems(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromWorkoutAssociatedItem(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWorkoutAssociatedItems(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToWorkoutAssociatedItem(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedWorkoutAssociatedItemFromWorkoutAssociatedItem(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL INWorkoutContentRatingLabelHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INWorkoutContentRatingLabelGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 0;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t INWorkoutContentRatingLabelGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 1);
  if (!a2) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INWorkoutContentRatingLabelGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"explicit";
  }
  if (a1 == 1) {
    return @"clean";
  }
  else {
    return v1;
  }
}

uint64_t INWorkoutContentRatingLabelWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"clean"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"explicit"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INWorkoutContentRatingLabelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"explicit";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"clean";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

BOOL INWorkoutSequenceLabelHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INWorkoutSequenceLabelGetBackingType(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 0;
  }
  else {
    unsigned int v1 = 0x7FFFFFFF;
  }
  if (a1 == 2) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t INWorkoutSequenceLabelGetFacadeType(int a1, int a2)
{
  uint64_t v2 = 2 * (a2 == 1);
  if (!a2) {
    uint64_t v2 = 1;
  }
  if (a1) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *INWorkoutSequenceLabelGetName(uint64_t a1)
{
  unsigned int v1 = @"unknown";
  if (a1 == 2) {
    unsigned int v1 = @"next";
  }
  if (a1 == 1) {
    return @"last";
  }
  else {
    return v1;
  }
}

uint64_t INWorkoutSequenceLabelWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"last"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"next"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INWorkoutSequenceLabelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 == 2)
  {
    uint64_t v4 = @"next";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v4 = @"last";
LABEL_5:
    uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

uint64_t _INPBWorkoutAssociatedItemReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_41;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_44:
        [a1 setItemLabel:v23];
        goto LABEL_50;
      case 2u:
        PBReaderReadString();
        unint64_t v25 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        [a1 setItemID:v25];
        goto LABEL_39;
      case 3u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28;
        }
LABEL_49:
        [a1 setContentRating:v32];
        goto LABEL_50;
      case 4u:
        unint64_t v25 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setItemName:", v25, 0, 0);
LABEL_39:

LABEL_50:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_50;
    }
  }
}

uint64_t _INPBResolveObjectReferenceResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = PBReaderReadData();
        [a1 setResolvedReference:v17];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBResolveObjectReferenceIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadData();
    char v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    [a1 setReference:v17];
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INResolveObjectReferenceIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xC) {
    return 0;
  }
  else {
    return off_1E5520D60[a1];
  }
}

uint64_t _INPBResolveObjectReferenceIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = PBReaderReadData();
        [a1 setResolvedReferences:v17];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBSupportedTrafficIncidentTypeReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalizedDisplayString:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setType:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void INMapsTransportTypeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_9;
  }
  id v4 = v3;
  if (a1)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
    id v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0) {
        goto LABEL_6;
      }
LABEL_14:
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
      id v3 = v4;
      if ((a1 & 8) == 0)
      {
LABEL_7:
        if ((a1 & 0x10) == 0) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  id v3 = v4;
  if ((a1 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  if ((a1 & 8) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  id v3 = v4;
  if ((a1 & 0x10) != 0)
  {
LABEL_8:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
    id v3 = v4;
  }
LABEL_9:
}

unint64_t INMapsTransportTypeOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        uint64_t result = (result >> 1) & 1;
        break;
      case 3:
        uint64_t result = (result >> 2) & 1;
        break;
      case 4:
        uint64_t result = (result >> 3) & 1;
        break;
      case 5:
        uint64_t result = (result >> 4) & 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INMapsTransportTypeOptionsAddBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      case 5:
        v2 |= 0x10uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

uint64_t *INMapsTransportTypeOptionsRemoveBackingType(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      case 5:
        v2 &= ~0x10uLL;
        break;
      default:
        break;
    }
    *uint64_t result = v2;
  }
  return result;
}

id INMapsTransportTypeOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"driving"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"walking"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    [v3 addObject:@"cycling"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0)
      {
LABEL_8:
        id v4 = (void *)[v3 copy];

        goto LABEL_10;
      }
LABEL_7:
      [v3 addObject:@"rideshare"];
      goto LABEL_8;
    }
LABEL_16:
    [v3 addObject:@"transit"];
    if ((v1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_10:

  return v4;
}

uint64_t INMapsTransportTypeOptionsWithNames(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  obuint64_t j = a1;
  uint64_t v1 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        v3 |= [v6 isEqualToString:@"driving"];
        if ([v6 isEqualToString:@"walking"]) {
          v3 |= 2uLL;
        }
        if ([v6 isEqualToString:@"cycling"]) {
          v3 |= 4uLL;
        }
        if ([v6 isEqualToString:@"transit"]) {
          v3 |= 8uLL;
        }
        if ([v6 isEqualToString:@"rideshare"]) {
          v3 |= 0x10uLL;
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id INMapsTransportTypeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a1)
    {
      char v8 = INLocalizedStringWithLocalizer(@"driving", @"driving", v3);
      [v4 addObject:v8];

      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    long long v9 = INLocalizedStringWithLocalizer(@"walking", @"walking", v3);
    [v4 addObject:v9];

    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    long long v10 = INLocalizedStringWithLocalizer(@"cycling", @"cycling", v3);
    [v4 addObject:v10];

    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0)
      {
LABEL_8:
        uint64_t v6 = (void *)[v4 copy];

        goto LABEL_10;
      }
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(@"rideshare", @"rideshare", v3);
      [v4 addObject:v5];

      goto LABEL_8;
    }
LABEL_16:
    long long v11 = INLocalizedStringWithLocalizer(@"transit", @"transit", v3);
    [v4 addObject:v11];

    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_10:

  return v6;
}

uint64_t INTrafficIncidentTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INTrafficIncidentTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t INTrafficIncidentTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0) {
    return a2 + 1;
  }
  else {
    return 0;
  }
}

__CFString *INTrafficIncidentTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E5520DF0[a1 - 1];
  }
}

uint64_t INTrafficIncidentTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"accident"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"hazard"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"speedtrap"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"construction"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"roadwork"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INTrafficIncidentTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 1:
      id v4 = @"accident";
      goto LABEL_8;
    case 2:
      id v4 = @"hazard";
      goto LABEL_8;
    case 3:
      id v4 = @"speedtrap";
      goto LABEL_8;
    case 4:
      id v4 = @"construction";
      goto LABEL_8;
    case 5:
      id v4 = @"roadwork";
LABEL_8:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      break;
    default:
      uint64_t v5 = 0;
      break;
  }

  return v5;
}

INSupportedTrafficIncidentType *INIntentSlotValueTransformFromSupportedTrafficIncidentType(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INSupportedTrafficIncidentType alloc];
    unsigned __int8 v3 = [v1 hasType];
    unsigned int v4 = [v1 type];
    if (((v4 < 5) & v3) != 0) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = [v1 localizedDisplayString];

    unsigned int v7 = INIntentSlotValueTransformFromString(v6);
    char v8 = [(INSupportedTrafficIncidentType *)v2 initWithType:v5 localizedDisplayString:v7];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

_INPBSupportedTrafficIncidentType *INIntentSlotValueTransformToSupportedTrafficIncidentType(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
    unint64_t v3 = [v1 type] - 1;
    if (v3 >= 5) {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v4 = v3;
    }
    [(_INPBSupportedTrafficIncidentType *)v2 setType:v4];
    uint64_t v5 = [v1 localizedDisplayString];

    uint64_t v6 = INIntentSlotValueTransformToString(v5);
    [(_INPBSupportedTrafficIncidentType *)v2 setLocalizedDisplayString:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromSupportedTrafficIncidentTypes(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromSupportedTrafficIncidentType(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    long long v9 = (void *)[v2 copy];
  }
  else
  {
    long long v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSupportedTrafficIncidentTypes(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToSupportedTrafficIncidentType(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    long long v9 = (void *)[v2 copy];
  }
  else
  {
    long long v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSupportedTrafficIncidentTypeFromSupportedTrafficIncidentType(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBWorkoutCustomizationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v17 = PBReaderReadString();
        [a1 setEnvironment:v17];
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = PBReaderReadString();
    [a1 setFocus:v17];
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INWorkoutCustomization *INIntentSlotValueTransformFromWorkoutCustomization(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INWorkoutCustomization alloc];
    id v3 = [v1 focus];
    uint64_t v4 = [v1 environment];

    uint64_t v5 = [(INWorkoutCustomization *)v2 initWithFocus:v3 environment:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

_INPBWorkoutCustomization *INIntentSlotValueTransformToWorkoutCustomization(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBWorkoutCustomization);
    id v3 = [v1 focus];
    [(_INPBWorkoutCustomization *)v2 setFocus:v3];

    uint64_t v4 = [v1 environment];

    [(_INPBWorkoutCustomization *)v2 setEnvironment:v4];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromWorkoutCustomizations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromWorkoutCustomization(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWorkoutCustomizations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToWorkoutCustomization(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedWorkoutCustomizationFromWorkoutCustomization(void *a1)
{
  id v1 = a1;

  return v1;
}

INHomeAutomationEntityProvider *INIntentSlotValueTransformFromHomeAutomationEntityProvider(INHomeAutomationEntityProvider *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v17 = [INHomeAutomationEntityProvider alloc];
    char v26 = [(INHomeAutomationEntityProvider *)v2 roomNames];
    uint64_t v29 = INIntentSlotValueTransformFromStrings(v26);
    unint64_t v25 = [(INHomeAutomationEntityProvider *)v2 homeName];
    uint64_t v28 = INIntentSlotValueTransformFromString(v25);
    uint64_t v24 = [(INHomeAutomationEntityProvider *)v2 zoneNames];
    unsigned int v27 = INIntentSlotValueTransformFromStrings(v24);
    uint64_t v23 = [(INHomeAutomationEntityProvider *)v2 accessoryNames];
    uint64_t v16 = INIntentSlotValueTransformFromStrings(v23);
    char v22 = [(INHomeAutomationEntityProvider *)v2 serviceNames];
    int v15 = INIntentSlotValueTransformFromStrings(v22);
    unint64_t v21 = [(INHomeAutomationEntityProvider *)v2 serviceGroups];
    long long v13 = INIntentSlotValueTransformFromStrings(v21);
    uint64_t v20 = [(INHomeAutomationEntityProvider *)v2 intentFromEntities];
    long long v12 = INIntentSlotValueTransformFromHomeAutomationFromEntities(v20);
    uint64_t v19 = [(INHomeAutomationEntityProvider *)v2 intentDeviceQuantifier];
    long long v11 = INIntentSlotValueTransformFromString(v19);
    long long v14 = [(INHomeAutomationEntityProvider *)v2 destinationDeviceId];
    id v3 = INIntentSlotValueTransformFromString(v14);
    uint64_t v4 = [(INHomeAutomationEntityProvider *)v2 intentDeviceType];
    uint64_t v5 = INIntentSlotValueTransformFromString(v4);
    uint64_t v6 = [(INHomeAutomationEntityProvider *)v2 intentPlaceHint];
    unsigned int v7 = INIntentSlotValueTransformFromString(v6);
    char v8 = [(INHomeAutomationEntityProvider *)v2 intentReference];

    unsigned int v9 = INIntentSlotValueTransformFromString(v8);
    unsigned int v18 = [(INHomeAutomationEntityProvider *)v17 initWithRoomNames:v29 homeName:v28 zoneNames:v27 accessoryNames:v16 serviceNames:v15 serviceGroups:v13 intentFromEntities:v12 intentDeviceQuantifier:v11 destinationDeviceId:v3 intentDeviceType:v5 intentPlaceHint:v7 intentReference:v9];

    a1 = v18;
    uint64_t v1 = vars8;
  }
  return a1;
}

_INPBHomeAutomationEntityProvider *INIntentSlotValueTransformToHomeAutomationEntityProvider(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBHomeAutomationEntityProvider);
    id v3 = [v1 roomNames];
    uint64_t v4 = INIntentSlotValueTransformToStrings(v3);
    [(_INPBHomeAutomationEntityProvider *)v2 setRoomNames:v4];

    uint64_t v5 = [v1 homeName];
    uint64_t v6 = INIntentSlotValueTransformToString(v5);
    [(_INPBHomeAutomationEntityProvider *)v2 setHomeName:v6];

    unsigned int v7 = [v1 zoneNames];
    char v8 = INIntentSlotValueTransformToStrings(v7);
    [(_INPBHomeAutomationEntityProvider *)v2 setZoneNames:v8];

    unsigned int v9 = [v1 accessoryNames];
    unint64_t v10 = INIntentSlotValueTransformToStrings(v9);
    [(_INPBHomeAutomationEntityProvider *)v2 setAccessoryNames:v10];

    long long v11 = [v1 serviceNames];
    long long v12 = INIntentSlotValueTransformToStrings(v11);
    [(_INPBHomeAutomationEntityProvider *)v2 setServiceNames:v12];

    long long v13 = [v1 serviceGroups];
    long long v14 = INIntentSlotValueTransformToStrings(v13);
    [(_INPBHomeAutomationEntityProvider *)v2 setServiceGroups:v14];

    int v15 = [v1 intentFromEntities];
    uint64_t v16 = INIntentSlotValueTransformToHomeAutomationFromEntities(v15);
    [(_INPBHomeAutomationEntityProvider *)v2 setIntentFromEntities:v16];

    char v17 = [v1 intentDeviceQuantifier];
    unsigned int v18 = INIntentSlotValueTransformToString(v17);
    [(_INPBHomeAutomationEntityProvider *)v2 setIntentDeviceQuantifier:v18];

    uint64_t v19 = [v1 destinationDeviceId];
    uint64_t v20 = INIntentSlotValueTransformToString(v19);
    [(_INPBHomeAutomationEntityProvider *)v2 setDestinationDeviceId:v20];

    unint64_t v21 = [v1 intentDeviceType];
    char v22 = INIntentSlotValueTransformToString(v21);
    [(_INPBHomeAutomationEntityProvider *)v2 setIntentDeviceType:v22];

    uint64_t v23 = [v1 intentPlaceHint];
    uint64_t v24 = INIntentSlotValueTransformToString(v23);
    [(_INPBHomeAutomationEntityProvider *)v2 setIntentPlaceHint:v24];

    unint64_t v25 = [v1 intentReference];

    char v26 = INIntentSlotValueTransformToString(v25);
    [(_INPBHomeAutomationEntityProvider *)v2 setIntentReference:v26];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeAutomationEntityProviders(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromHomeAutomationEntityProvider(*(INHomeAutomationEntityProvider **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeAutomationEntityProviders(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToHomeAutomationEntityProvider(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeAutomationEntityProviderFromHomeAutomationEntityProvider(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBHomeAutomationEntityProviderReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addRoomNames:", v17, 0, 0);
        }
        goto LABEL_63;
      case 2u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeName:", v17, 0, 0);
        goto LABEL_63;
      case 3u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addZoneNames:", v17, 0, 0);
        }
        goto LABEL_63;
      case 4u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addAccessoryNames:", v17, 0, 0);
        }
        goto LABEL_63;
      case 5u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addServiceNames:", v17, 0, 0);
        }
        goto LABEL_63;
      case 6u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2)) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addServiceGroups:", v17, 0, 0);
        }
        goto LABEL_63;
      case 7u:
        char v17 = objc_alloc_init(_INPBHomeAutomationFromEntity);
        if (!PBReaderPlaceMark() || !_INPBHomeAutomationFromEntityReadFrom(v17, a2)) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addIntentFromEntities:", v17, 0, 0);
        }
        goto LABEL_63;
      case 8u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentDeviceQuantifier:", v17, 0, 0);
        goto LABEL_63;
      case 9u:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDestinationDeviceId:", v17, 0, 0);
        goto LABEL_63;
      case 0xAu:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentDeviceType:", v17, 0, 0);
        goto LABEL_63;
      case 0xBu:
        char v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentPlaceHint:", v17, 0, 0);
        goto LABEL_63;
      case 0xCu:
        char v17 = objc_alloc_init(_INPBString);
        if PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentReference:", v17, 0, 0);
LABEL_63:

LABEL_64:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_67:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_64;
    }
  }
}

void sub_18CF550F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18CF55198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_18CF553C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18CF556FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18CF55C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_18CF55F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18CF56104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100]()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E5515858, MEMORY[0x1E4FBA1C8]);
}

void sub_18CF561A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1)
{
  uint64_t result = std::logic_error::logic_error(a1, "basic_string");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void sub_18CF56448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18CF56708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_18CF569A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_18CF56A48()
{
  JUMPOUT(0x18CF56A38);
}

void sub_18CF56A58()
{
}

void sub_18CF56C74(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

BOOL INHomeAutomationEntityTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INHomeAutomationEntityTypeGetBackingType(unint64_t result)
{
  if (result >= 4) {
    return 0x7FFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t INHomeAutomationEntityTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INHomeAutomationEntityTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5520E18[a1 - 1];
  }
}

uint64_t INHomeAutomationEntityTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"accessory"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"room"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"zone"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INHomeAutomationEntityTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"zone";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"room";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"accessory";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}

INHomeAutomationFromEntity *INIntentSlotValueTransformFromHomeAutomationFromEntity(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INHomeAutomationFromEntity alloc];
    id v3 = [v1 value];
    uint64_t v4 = INIntentSlotValueTransformFromString(v3);
    int v5 = [v1 hasType];
    int v6 = [v1 type];

    uint64_t v7 = (v6 - 1);
    if (v7 <= 2) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v5) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [(INHomeAutomationFromEntity *)v2 initWithValue:v4 type:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBHomeAutomationFromEntity *INIntentSlotValueTransformToHomeAutomationFromEntity(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBHomeAutomationFromEntity);
    id v3 = [v1 value];
    uint64_t v4 = INIntentSlotValueTransformToString(v3);
    [(_INPBHomeAutomationFromEntity *)v2 setValue:v4];

    unint64_t v5 = [v1 type];
    if (v5 >= 4) {
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v6 = v5;
    }
    [(_INPBHomeAutomationFromEntity *)v2 setType:v6];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeAutomationFromEntities(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformFromHomeAutomationFromEntity(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeAutomationFromEntities(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = INIntentSlotValueTransformToHomeAutomationFromEntity(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = (void *)[v2 copy];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeAutomationFromEntityFromHomeAutomationFromEntity(void *a1)
{
  id v1 = a1;

  return v1;
}

uint64_t _INPBHomeAutomationFromEntityReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v24, 0, 0);
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v19;
        }
LABEL_36:
        [a1 setType:v23];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INJoinCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return off_1E5520E50[a1];
  }
}

BOOL _INPBJoinCallIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 10)
      {
        unsigned int v18 = objc_alloc_init(_INPBCallGroupConversation);
        if (!PBReaderPlaceMark() || !_INPBCallGroupConversationReadFrom(v18, a2)) {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupConversation:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(_INPBCallGroupConversationFilter);
    if (!PBReaderPlaceMark() || (_INPBCallGroupConversationFilterReadFrom(v18, a2) & 1) == 0) {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setGroupConversationFilter:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBJoinCallIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBCallGroupConversationReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        unint64_t v17 = (_INPBContactValue *)objc_claimAutoreleasedReturnValue();
        [a1 setConversationId:v17];
        goto LABEL_32;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || (_INPBContactValueReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCaller:", v17, 0, 0);
        goto LABEL_32;
      case 3u:
        unint64_t v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v17, a2)) {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addOtherParticipants:", v17, 0, 0);
        }
        goto LABEL_32;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBCallGroup);
        if (PBReaderPlaceMark() && _INPBCallGroupReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallGroup:", v17, 0, 0);
LABEL_32:

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

INCallGroupConversation *INIntentSlotValueTransformFromCallGroupConversation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INCallGroupConversation alloc];
    id v3 = [v1 conversationId];
    uint64_t v4 = [v1 caller];
    uint64_t v5 = INIntentSlotValueTransformFromContactValueWithAlternatives(v4, 0);
    uint64_t v6 = [v1 otherParticipants];
    int v7 = INIntentSlotValueTransformFromContactValues(v6);
    char v8 = [v1 callGroup];

    unsigned int v9 = INIntentSlotValueTransformFromCallGroup(v8);
    unint64_t v10 = [(INCallGroupConversation *)v2 initWithConversationId:v3 caller:v5 otherParticipants:v7 callGroup:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBCallGroupConversation *INIntentSlotValueTransformToCallGroupConversation(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCallGroupConversation);
    id v3 = [v1 conversationId];
    [(_INPBCallGroupConversation *)v2 setConversationId:v3];

    uint64_t v4 = [v1 caller];
    uint64_t v5 = INIntentSlotValueTransformToContactValue(v4);
    [(_INPBCallGroupConversation *)v2 setCaller:v5];

    uint64_t v6 = [v1 otherParticipants];
    int v7 = INIntentSlotValueTransformToContactValues(v6);
    [(_INPBCallGroupConversation *)v2 setOtherParticipants:v7];

    char v8 = [v1 callGroup];

    unsigned int v9 = INIntentSlotValueTransformToCallGroup(v8);
    [(_INPBCallGroupConversation *)v2 setCallGroup:v9];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCallGroupConversations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromCallGroupConversation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallGroupConversations(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToCallGroupConversation(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallGroupConversationFromCallGroupConversation(void *a1)
{
  id v1 = a1;

  return v1;
}

void sub_18CF5D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLNActionClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!LinkServicesLibraryCore_frameworkLibrary_165877)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __LinkServicesLibraryCore_block_invoke_165878;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5520ED8;
    uint64_t v6 = 0;
    LinkServicesLibraryCore_frameworkLibrary_165877 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!LinkServicesLibraryCore_frameworkLibrary_165877)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("LNAction");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getLNActionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __LinkServicesLibraryCore_block_invoke_165878()
{
  uint64_t result = _sl_dlopen();
  LinkServicesLibraryCore_frameworkLibrary_165877 = result;
  return result;
}

uint64_t _INPBCallGroupConversationFilterReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCaller:", v17, 0, 0);
        goto LABEL_38;
      case 2u:
        unint64_t v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addParticipants:", v17, 0, 0);
        }
        goto LABEL_38;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_42:
        [a1 setMatchCallerAndParticipantsExactly:v21 != 0];
        goto LABEL_43;
      case 4u:
        unint64_t v17 = objc_alloc_init(_INPBCallGroup);
        if (PBReaderPlaceMark() && _INPBCallGroupReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallGroup:", v17, 0, 0);
LABEL_38:

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

INCallGroupConversationFilter *INIntentSlotValueTransformFromCallGroupConversationFilter(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INCallGroupConversationFilter alloc];
    id v3 = [v1 caller];
    uint64_t v4 = INIntentSlotValueTransformFromContact(v3);
    long long v5 = [v1 participants];
    uint64_t v6 = INIntentSlotValueTransformFromContacts(v5);
    uint64_t v7 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v1, "matchCallerAndParticipantsExactly"));
    char v8 = [v1 callGroup];

    unsigned int v9 = INIntentSlotValueTransformFromCallGroup(v8);
    unint64_t v10 = [(INCallGroupConversationFilter *)v2 initWithCaller:v4 participants:v6 matchCallerAndParticipantsExactly:v7 callGroup:v9];
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

_INPBCallGroupConversationFilter *INIntentSlotValueTransformToCallGroupConversationFilter(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBCallGroupConversationFilter);
    id v3 = [v1 caller];
    uint64_t v4 = INIntentSlotValueTransformToContact(v3);
    [(_INPBCallGroupConversationFilter *)v2 setCaller:v4];

    long long v5 = [v1 participants];
    uint64_t v6 = INIntentSlotValueTransformToContacts(v5);
    [(_INPBCallGroupConversationFilter *)v2 setParticipants:v6];

    uint64_t v7 = [v1 matchCallerAndParticipantsExactly];
    -[_INPBCallGroupConversationFilter setMatchCallerAndParticipantsExactly:](v2, "setMatchCallerAndParticipantsExactly:", [v7 BOOLValue]);

    char v8 = [v1 callGroup];

    unsigned int v9 = INIntentSlotValueTransformToCallGroup(v8);
    [(_INPBCallGroupConversationFilter *)v2 setCallGroup:v9];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCallGroupConversationFilters(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromCallGroupConversationFilter(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallGroupConversationFilters(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToCallGroupConversationFilter(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallGroupConversationFilterFromCallGroupConversationFilter(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBShareFocusStatusIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 1) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(_INPBFocusStatus);
        if (!PBReaderPlaceMark() || (_INPBFocusStatusReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFocusStatus:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _INPBFocusStatusReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_31:
        [a1 setIsFocused:v19 != 0];
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

INFocusStatus *INIntentSlotValueTransformFromFocusStatus(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [INFocusStatus alloc];
    id v3 = NSNumber;
    uint64_t v4 = [v1 isFocused];

    uint64_t v5 = [v3 numberWithBool:v4];
    uint64_t v6 = [(INFocusStatus *)v2 initWithIsFocused:v5];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

_INPBFocusStatus *INIntentSlotValueTransformToFocusStatus(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc_init(_INPBFocusStatus);
    id v3 = [v1 isFocused];

    -[_INPBFocusStatus setIsFocused:](v2, "setIsFocused:", [v3 BOOLValue]);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromFocusStatuses(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformFromFocusStatus(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFocusStatuses(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = INIntentSlotValueTransformToFocusStatus(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    unsigned int v9 = (void *)[v2 copy];
  }
  else
  {
    unsigned int v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedFocusStatusFromFocusStatus(void *a1)
{
  id v1 = a1;

  return v1;
}

BOOL _INPBShareFocusStatusIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

__CFString *INShareFocusStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5520F10[a1];
  }
}

BOOL _INPBAddCallParticipantIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17) {
      objc_msgSend(a1, "addParticipants:", v17, 0, 0);
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INAddCallParticipantIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD) {
    return 0;
  }
  else {
    return off_1E5520F40[a1];
  }
}

uint64_t _INPBAddCallParticipantIntentResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBCallInvite);
        if (!PBReaderPlaceMark() || !_INPBCallInviteReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17) {
          objc_msgSend(a1, "addInvites:", v17, 0, 0);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL _INPBUnsendMessagesIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBUnsendMessagesIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadString();
    char v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    if (v17) {
      [a1 addMessageIdentifiers:v17];
    }
LABEL_25:

    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INUnsendMessagesIntentResponseCodeGetName(uint64_t a1)
{
  if (a1 > 999)
  {
    uint64_t v2 = @"INUnsendMessagesIntentResponseCodeFailureScreenTimeRestrictionEnabled";
    id v3 = @"INUnsendMessagesIntentResponseCodeFailureDownTimeRestrictionEnabled";
    if (a1 != 1002) {
      id v3 = 0;
    }
    if (a1 != 1001) {
      uint64_t v2 = v3;
    }
    if (a1 == 1000) {
      return @"INUnsendMessagesIntentResponseCodeFailureNotAMemberOfConversation";
    }
    else {
      return v2;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeUnspecified";
        break;
      case 1:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeReady";
        break;
      case 2:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeInProgress";
        break;
      case 3:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeSuccess";
        break;
      case 4:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailure";
        break;
      case 5:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailureRequiringAppLaunch";
        break;
      case 6:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailureMessageNotFound";
        break;
      case 7:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailurePastUnsendTimeLimit";
        break;
      case 8:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailureMessageTypeUnsupported";
        break;
      case 9:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailureUnsupportedOnService";
        break;
      case 10:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailureMessageServiceNotAvailable";
        break;
      case 11:
        uint64_t result = @"INUnsendMessagesIntentResponseCodeFailureRequiringInAppAuthentication";
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

BOOL _INPBEditMessageIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _INPBEditMessageIntentReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unsigned int v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_26;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        PBReaderReadString();
        unsigned int v18 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        [a1 setEditedContent:v18];
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadString();
    unsigned int v18 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    [a1 setMessageIdentifier:v18];
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *INEditMessageIntentResponseCodeGetName(uint64_t a1)
{
  if (a1 > 999)
  {
    uint64_t v2 = @"INEditMessageIntentResponseCodeFailureScreenTimeRestrictionEnabled";
    id v3 = @"INEditMessageIntentResponseCodeFailureDownTimeRestrictionEnabled";
    if (a1 != 1002) {
      id v3 = 0;
    }
    if (a1 != 1001) {
      uint64_t v2 = v3;
    }
    if (a1 == 1000) {
      return @"INEditMessageIntentResponseCodeFailureNotAMemberOfConversation";
    }
    else {
      return v2;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t result = @"INEditMessageIntentResponseCodeUnspecified";
        break;
      case 1:
        uint64_t result = @"INEditMessageIntentResponseCodeReady";
        break;
      case 2:
        uint64_t result = @"INEditMessageIntentResponseCodeInProgress";
        break;
      case 3:
        uint64_t result = @"INEditMessageIntentResponseCodeSuccess";
        break;
      case 4:
        uint64_t result = @"INEditMessageIntentResponseCodeFailure";
        break;
      case 5:
        uint64_t result = @"INEditMessageIntentResponseCodeFailureRequiringAppLaunch";
        break;
      case 6:
        uint64_t result = @"INEditMessageIntentResponseCodeFailureMessageNotFound";
        break;
      case 7:
        uint64_t result = @"INEditMessageIntentResponseCodeFailurePastEditTimeLimit";
        break;
      case 8:
        uint64_t result = @"INEditMessageIntentResponseCodeFailureMessageTypeUnsupported";
        break;
      case 9:
        uint64_t result = @"INEditMessageIntentResponseCodeFailureUnsupportedOnService";
        break;
      case 10:
        uint64_t result = @"INEditMessageIntentResponseCodeFailureMessageServiceNotAvailable";
        break;
      case 11:
        uint64_t result = @"INEditMessageIntentResponseCodeFailureRequiringInAppAuthentication";
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t _INPBCallInviteReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        unint64_t v25 = objc_alloc_init(_INPBContact);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v25, a2))
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        if (v25) {
          objc_msgSend(a1, "addParticipants:", v25, 0, 0);
        }
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_39;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_42;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = v20;
            }
LABEL_42:
            objc_msgSend(a1, "setInviteType:", v24, v27, v28);
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        unint64_t v25 = objc_alloc_init(_INPBURLValue);
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v25, a2)) {
          goto LABEL_45;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallURL:", v25, 0, 0);
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t INCallInviteTypeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCallInviteTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t INCallInviteTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 <= 2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *INCallInviteTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5520FC8[a1 - 1];
  }
}

uint64_t INCallInviteTypeWithString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"add"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"ring"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"link"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id INCallInviteTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 3:
      uint64_t v4 = @"link";
      goto LABEL_7;
    case 2:
      uint64_t v4 = @"ring";
      goto LABEL_7;
    case 1:
      uint64_t v4 = @"add";
LABEL_7:
      uint64_t v5 = INLocalizedStringWithLocalizer(v4, v4, v3);
      goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:

  return v5;
}